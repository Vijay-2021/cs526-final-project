; ModuleID = 'blur5x5'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur5x5\00", align 32
@blur5x5_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur5x5(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2375 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2376 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2377 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2779 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2779, align 4, !tbaa !181
  %extent.i2781 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2781, align 4, !tbaa !178
  %stride.i2783 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2783, align 4, !tbaa !182
  %host.i2784 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2785 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2785, align 8, !tbaa !176
  %min.i2786 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2786, align 4, !tbaa !181
  %extent.i2788 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2788, align 4, !tbaa !178
  %min.i2792 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2792, align 4, !tbaa !181
  %extent.i2794 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2794, align 4, !tbaa !178
  %stride.i2796 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2796, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1634 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1635 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1637 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 35
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1635
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1635, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1645 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 3
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 35
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 4
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1635
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1645
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1634, %t1635
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1634, 27
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1635
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -28
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %57 = icmp sgt i32 %b19, %a17
  %58 = select i1 %57, i32 %a17, i32 %b19
  %59 = ashr i32 %58, 5
  %a16 = add nsw i32 %59, 1
  %.not2533 = icmp slt i32 %59, %b18
  %t1624 = select i1 %.not2533, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %60 = icmp sgt i32 %a21, %b23
  %t1626 = select i1 %60, i32 %a21, i32 %b23
  %61 = add nsw i32 %6, 31
  %t1612 = ashr i32 %61, 5
  %62 = icmp sgt i32 %6, 0
  br i1 %62, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %63 = bitcast i8** %host.i2784 to i16**
  %64 = load i16*, i16** %63, align 8, !tbaa !172
  %65 = bitcast i8** %host.i to i16**
  %66 = load i16*, i16** %65, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2690 = icmp slt i32 %48, 0
  %67 = select i1 %.inv2690, i32 0, i32 %a24
  %t2290 = zext i32 %67 to i64
  %68 = mul nuw nsw i64 %t2290, 72
  %69 = or i64 %68, 6
  %70 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %71 = sub nsw i32 %11, %5
  %72 = sub i32 %5, %11
  %t1652 = add nsw i32 %t1645, %3
  %t1650 = add nsw i32 %t1635, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 4
  %73 = add nsw i32 %t1634, -1
  %74 = insertelement <32 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <32 x i32> %74, <32 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <32 x i32> undef, i32 %9, i32 0
  %77 = shufflevector <32 x i32> %76, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1661 = sub nsw i32 %20, %t1624
  %78 = icmp sgt i32 %b18, 0
  %79 = sext i32 %11 to i64
  %80 = sext i32 %5 to i64
  %81 = sub nsw i64 %79, %80
  %82 = sext i32 %a24 to i64
  %83 = sext i32 %t1652 to i64
  %t1667 = sub nsw i32 %t1624, %b18
  %84 = icmp sgt i32 %t1667, 0
  %85 = icmp sgt i32 %t1661, 0
  %86 = sub nsw i32 %5, %a40
  %87 = sext i32 %a40 to i64
  %88 = sub nsw i64 %87, %80
  %a73 = sub nsw i32 %4, %t1645
  %89 = icmp sgt i32 %a73, 0
  %90 = select i1 %89, i32 %a73, i32 0
  %t2291 = zext i32 %90 to i64
  %91 = shl nuw nsw i64 %t2291, 4
  %92 = or i64 %91, 6
  %93 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t682 = sub i32 %t1635, %t1645
  %94 = sext i32 %t682 to i64
  %95 = zext i32 %4 to i64
  %96 = sext i32 %t1645 to i64
  %97 = sub nsw i64 %95, %96
  %98 = sext i32 %t1635 to i64
  %99 = sub nsw i64 %98, %96
  %t1680 = sub nsw i32 %t1626, %b23
  %100 = icmp sgt i32 %t1680, 0
  %101 = sext i32 %b23 to i64
  %t1683 = sub nsw i32 %a3, %t1626
  %102 = icmp sgt i32 %t1683, 0
  %t688 = add i32 %t682, %a24
  %103 = sext i32 %t688 to i64
  %t1687 = sub nsw i32 %a24, %t1645
  %104 = shl nsw i32 %a24, 1
  %t694 = add i32 %t682, %104
  %105 = sext i32 %t694 to i64
  %t1693 = sub nsw i32 %104, %t1645
  %106 = shl nsw i32 %a24, 2
  %a24.neg = xor i32 %48, -1
  %107 = add i32 %t682, %a24.neg
  %t700 = add i32 %107, %106
  %108 = sext i32 %t700 to i64
  %109 = sub nsw i32 %106, %t1645
  %t1699 = sub nsw i32 %109, %a24
  %110 = add nsw i32 %106, %t1635
  %t706 = sub i32 %110, %t1645
  %111 = sext i32 %t706 to i64
  %112 = sext i32 %a73 to i64
  %113 = sext i32 %7 to i64
  %114 = sext i32 %t1637 to i64
  %115 = sub nsw i64 %98, %114
  %t1709 = sub nsw i32 0, %t1637
  %116 = sext i32 %t1709 to i64
  %t722 = add nsw i32 %t706, %a24
  %117 = sext i32 %t722 to i64
  %t1721 = add nsw i32 %109, %a24
  %118 = mul nsw i32 %a24, 6
  %t738 = add i32 %t682, %118
  %119 = sext i32 %t738 to i64
  %t1737 = sub nsw i32 %118, %t1645
  %120 = mul nsw i32 %a24, 7
  %t754 = add i32 %t682, %120
  %121 = sext i32 %t754 to i64
  %t1753 = sub nsw i32 %120, %t1645
  %122 = shl nsw i32 %a24, 3
  %t770 = add i32 %t682, %122
  %123 = sext i32 %t770 to i64
  %t1769 = sub nsw i32 %122, %t1645
  %124 = mul nsw i32 %a24, 9
  %t786 = add i32 %t682, %124
  %125 = sext i32 %t786 to i64
  %t1785 = sub nsw i32 %124, %t1645
  %126 = mul nsw i32 %a24, 10
  %t802 = add i32 %t682, %126
  %127 = sext i32 %t802 to i64
  %t1801 = sub nsw i32 %126, %t1645
  %128 = mul nsw i32 %a24, 11
  %t818 = add i32 %t682, %128
  %129 = sext i32 %t818 to i64
  %t1817 = sub nsw i32 %128, %t1645
  %130 = mul nsw i32 %a24, 12
  %t834 = add i32 %t682, %130
  %131 = sext i32 %t834 to i64
  %t1833 = sub nsw i32 %130, %t1645
  %132 = mul nsw i32 %a24, 13
  %t850 = add i32 %t682, %132
  %133 = sext i32 %t850 to i64
  %t1849 = sub nsw i32 %132, %t1645
  %134 = mul nsw i32 %a24, 14
  %t866 = add i32 %t682, %134
  %135 = sext i32 %t866 to i64
  %t1865 = sub nsw i32 %134, %t1645
  %136 = mul nsw i32 %a24, 15
  %t882 = add i32 %t682, %136
  %137 = sext i32 %t882 to i64
  %t1881 = sub nsw i32 %136, %t1645
  %138 = shl nsw i32 %a24, 4
  %t898 = add i32 %t682, %138
  %139 = sext i32 %t898 to i64
  %t1897 = sub nsw i32 %138, %t1645
  %140 = mul nsw i32 %a24, 17
  %t914 = add i32 %t682, %140
  %141 = sext i32 %t914 to i64
  %t1913 = sub nsw i32 %140, %t1645
  %142 = mul nsw i32 %a24, 18
  %t930 = add i32 %t682, %142
  %143 = sext i32 %t930 to i64
  %t1929 = sub nsw i32 %142, %t1645
  %144 = mul nsw i32 %a24, 19
  %t946 = add i32 %t682, %144
  %145 = sext i32 %t946 to i64
  %t1945 = sub nsw i32 %144, %t1645
  %146 = mul nsw i32 %a24, 20
  %t962 = add i32 %t682, %146
  %147 = sext i32 %t962 to i64
  %t1961 = sub nsw i32 %146, %t1645
  %148 = mul nsw i32 %a24, 21
  %t978 = add i32 %t682, %148
  %149 = sext i32 %t978 to i64
  %t1977 = sub nsw i32 %148, %t1645
  %150 = mul nsw i32 %a24, 22
  %t994 = add i32 %t682, %150
  %151 = sext i32 %t994 to i64
  %t1993 = sub nsw i32 %150, %t1645
  %152 = mul nsw i32 %a24, 23
  %t1010 = add i32 %t682, %152
  %153 = sext i32 %t1010 to i64
  %t2009 = sub nsw i32 %152, %t1645
  %154 = mul nsw i32 %a24, 24
  %t1026 = add i32 %t682, %154
  %155 = sext i32 %t1026 to i64
  %t2025 = sub nsw i32 %154, %t1645
  %156 = mul nsw i32 %a24, 25
  %t1042 = add i32 %t682, %156
  %157 = sext i32 %t1042 to i64
  %t2041 = sub nsw i32 %156, %t1645
  %158 = mul nsw i32 %a24, 26
  %t1058 = add i32 %t682, %158
  %159 = sext i32 %t1058 to i64
  %t2057 = sub nsw i32 %158, %t1645
  %160 = mul nsw i32 %a24, 27
  %t1074 = add i32 %t682, %160
  %161 = sext i32 %t1074 to i64
  %t2073 = sub nsw i32 %160, %t1645
  %162 = mul nsw i32 %a24, 28
  %t1090 = add i32 %t682, %162
  %163 = sext i32 %t1090 to i64
  %t2089 = sub nsw i32 %162, %t1645
  %164 = mul nsw i32 %a24, 29
  %t1106 = add i32 %t682, %164
  %165 = sext i32 %t1106 to i64
  %t2105 = sub nsw i32 %164, %t1645
  %166 = mul nsw i32 %a24, 30
  %t1122 = add i32 %t682, %166
  %167 = sext i32 %t1122 to i64
  %t2121 = sub nsw i32 %166, %t1645
  %168 = mul nsw i32 %a24, 31
  %t1138 = add i32 %t682, %168
  %169 = sext i32 %t1138 to i64
  %t2137 = sub nsw i32 %168, %t1645
  %170 = shl nsw i32 %a24, 5
  %t1154 = add i32 %t682, %170
  %171 = sext i32 %t1154 to i64
  %t2153 = sub nsw i32 %170, %t1645
  %172 = mul nsw i32 %a24, 33
  %t1170 = add i32 %t682, %172
  %173 = sext i32 %t1170 to i64
  %t2169 = sub nsw i32 %172, %t1645
  %174 = mul nsw i32 %a24, 34
  %t1186 = add i32 %t682, %174
  %175 = sext i32 %t1186 to i64
  %t2185 = sub nsw i32 %174, %t1645
  %176 = mul nsw i32 %a24, 35
  %t1202 = add i32 %t682, %176
  %177 = sext i32 %t1202 to i64
  %t2201 = sub nsw i32 %176, %t1645
  %178 = sext i32 %b36 to i64
  %179 = zext i32 %b18 to i64
  %180 = sext i32 %t1650 to i64
  %181 = zext i32 %t1667 to i64
  %182 = sext i32 %13 to i64
  %183 = sext i32 %9 to i64
  %184 = zext i32 %t1680 to i64
  %185 = add nsw i64 %181, -1
  %xtraiter = and i64 %181, 3
  %186 = icmp ult i64 %185, 3
  %unroll_iter = and i64 %181, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased787"
  %blur_y.s0.y.y = phi i32 [ %14527, %"end for blur_y.s0.x.x.rebased787" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %187 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %187, i32 %a22, i32 %b24
  %188 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %188, %69
  %189 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %189, null
  %190 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %190, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %189) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %191 = phi i64 [ %.pre, %if.then3.i ], [ %190, %if.then.i ]
  %add.i = add i64 %191, %69
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %69) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %69, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %192 = phi i8* [ %storemerge.i, %if.end11.i ], [ %189, %"for blur_y.s0.y.y" ]
  %193 = bitcast i8* %192 to i16*
  %.not2691 = icmp eq i8* %192, null
  br i1 %.not2691, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased787"
  %194 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %195 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02901 = phi i8* [ null, %entry ], [ %195, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %194, %"end for blur_y.s0.y.y.loopexit" ]
  %196 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2799 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 0, i32 0
  %197 = load i32, i32* %min.i2799, align 4, !tbaa !181
  %extent.i2801 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 0, i32 1
  %198 = load i32, i32* %extent.i2801, align 4, !tbaa !178
  %min.i2805 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 0
  %199 = load i32, i32* %min.i2805, align 4, !tbaa !181
  %extent.i2807 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 1
  %200 = load i32, i32* %extent.i2807, align 4, !tbaa !178
  %stride.i2809 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 2
  %201 = load i32, i32* %stride.i2809, align 4, !tbaa !182
  %202 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2785, align 8, !tbaa !176
  %min.i2812 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 0, i32 0
  %203 = load i32, i32* %min.i2812, align 4, !tbaa !181
  %extent.i2814 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 0, i32 1
  %204 = load i32, i32* %extent.i2814, align 4, !tbaa !178
  %min.i2818 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 0
  %205 = load i32, i32* %min.i2818, align 4, !tbaa !181
  %extent.i2820 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 1
  %206 = load i32, i32* %extent.i2820, align 4, !tbaa !178
  %stride.i2822 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 2
  %207 = load i32, i32* %stride.i2822, align 4, !tbaa !182
  %t1634807 = add nsw i32 %204, %203
  %208 = icmp slt i32 %198, 32
  %t1635808 = select i1 %208, i32 %198, i32 32
  %209 = icmp sgt i32 %206, 0
  %210 = select i1 %209, i32 %206, i32 0
  %t1636 = add nsw i32 %210, %205
  %t1637809 = mul nsw i32 %201, %199
  %211 = add nsw i32 %198, 31
  %212 = icmp sgt i32 %198, 32
  %213 = select i1 %212, i32 %198, i32 32
  %214 = add nuw nsw i32 %213, 35
  %215 = lshr i32 %214, 5
  %a331 = ashr i32 %211, 5
  %216 = icmp slt i32 %a331, 1
  %t1641 = select i1 %216, i32 %a331, i32 1
  %217 = sub i32 63, %197
  %218 = sub i32 %217, %t1635808
  %219 = add i32 %218, %203
  %a333 = ashr i32 %219, 5
  %220 = icmp sgt i32 %a333, 0
  %a332 = select i1 %220, i32 %a333, i32 0
  %221 = icmp sgt i32 %215, %a332
  %t1642 = select i1 %221, i32 %a332, i32 %215
  %t1644 = add nsw i32 %t1635808, -32
  %222 = icmp slt i32 %198, 0
  %223 = select i1 %222, i32 %198, i32 0
  %a337 = select i1 %212, i32 %223, i32 %t1644
  %224 = icmp sgt i32 %t1644, %a337
  %t1645811 = select i1 %224, i32 %a337, i32 %t1644
  %t1647 = add nsw i32 %198, -32
  %225 = add i32 %198, -1
  %226 = and i32 %225, -32
  %a341 = select i1 %212, i32 %226, i32 %t1647
  %227 = icmp sgt i32 %a341, %t1647
  %228 = select i1 %227, i32 %a341, i32 %t1647
  %229 = icmp sgt i32 %198, 0
  %230 = select i1 %229, i32 %198, i32 0
  %a342 = select i1 %212, i32 %230, i32 32
  %231 = icmp sgt i32 %a342, 32
  %232 = select i1 %231, i32 %a342, i32 32
  %233 = add nsw i32 %232, -1
  %234 = and i32 %233, -32
  %235 = add nsw i32 %234, %228
  %a346 = add nsw i32 %235, 32
  %236 = icmp sgt i32 %198, %a346
  %a345 = select i1 %236, i32 %a346, i32 %198
  %237 = icmp sgt i32 %235, %t1647
  %238 = select i1 %237, i32 %t1647, i32 %235
  %b347 = add nsw i32 %238, 35
  %239 = icmp sgt i32 %a345, %b347
  %a344 = select i1 %239, i32 %a345, i32 %b347
  %a354 = add nsw i32 %198, 4
  %240 = add nuw nsw i32 %213, 3
  %241 = and i32 %240, 2147483616
  %b356 = add nsw i32 %241, %t1635808
  %242 = icmp sgt i32 %b356, %a354
  %243 = select i1 %242, i32 %a354, i32 %b356
  %b346 = add nsw i32 %243, -1
  %.not2534 = icmp slt i32 %a344, %243
  %244 = select i1 %.not2534, i32 %b346, i32 %a344
  %245 = sub nsw i32 %244, %t1645811
  %a377 = add nsw i32 %245, 1
  %246 = sub nsw i32 %t1634807, %t1635808
  %a362 = sub i32 %246, %197
  %a365 = add nsw i32 %t1634807, 27
  %b367 = add nsw i32 %198, %197
  %247 = icmp sgt i32 %b367, %a365
  %248 = select i1 %247, i32 %a365, i32 %b367
  %249 = sub i32 32, %197
  %250 = sub i32 %249, %t1635808
  %a364 = add i32 %250, %248
  %251 = icmp sgt i32 %213, %a364
  %252 = select i1 %251, i32 %a364, i32 %213
  %b364 = add nsw i32 %252, -28
  %253 = icmp sgt i32 %b364, %a362
  %a361 = select i1 %253, i32 %a362, i32 %b364
  %254 = icmp sgt i32 %240, %a361
  %255 = select i1 %254, i32 %a361, i32 %240
  %256 = ashr i32 %255, 5
  %a373 = ashr i32 %198, 5
  %257 = icmp sgt i32 %a373, %t1641
  %t1626814 = select i1 %257, i32 %a373, i32 %t1641
  %258 = add nsw i32 %200, 31
  %t1612815 = ashr i32 %258, 5
  %259 = icmp sgt i32 %200, 0
  br i1 %259, label %"for blur_y.s0.y.y816.preheader", label %"end for blur_y.s0.y.y817", !prof !386

"for blur_y.s0.y.y816.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %a377.neg = xor i32 %245, -1
  %260 = bitcast i8** %host.i2784 to i16**
  %261 = load i16*, i16** %260, align 8, !tbaa !172
  %262 = bitcast i8** %host.i to i16**
  %263 = load i16*, i16** %262, align 8, !tbaa !172
  %.not2535 = icmp slt i32 %256, %t1642
  %a360 = add nsw i32 %256, 1
  %b377 = add nsw i32 %200, -32
  %.inv = icmp slt i32 %245, 0
  %264 = select i1 %.inv, i32 0, i32 %a377
  %t2292 = zext i32 %264 to i64
  %265 = mul nuw nsw i64 %t2292, 72
  %266 = or i64 %265, 6
  %267 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b385 = add nsw i32 %206, %205
  %268 = sub nsw i32 %205, %199
  %269 = sub i32 %199, %205
  %b398 = add nsw i32 %206, -1
  %270 = add i32 %t1645811, %197
  %271 = add nsw i32 %t1635808, %197
  %b419 = add nsw i32 %b367, 4
  %272 = add nsw i32 %t1634807, -1
  %273 = insertelement <32 x i32> undef, i32 %272, i32 0
  %274 = shufflevector <32 x i32> %273, <32 x i32> undef, <8 x i32> zeroinitializer
  %275 = insertelement <32 x i32> undef, i32 %203, i32 0
  %276 = shufflevector <32 x i32> %275, <32 x i32> undef, <8 x i32> zeroinitializer
  %277 = select i1 %.not2535, i32 %t1642, i32 %a360
  %t1661841 = sub nsw i32 %215, %277
  %278 = icmp sgt i32 %t1642, 0
  %279 = sext i32 %205 to i64
  %280 = sext i32 %199 to i64
  %281 = sub nsw i64 %279, %280
  %282 = sext i32 %a377 to i64
  %283 = sext i32 %270 to i64
  %t1667854 = sub nsw i32 %277, %t1642
  %284 = icmp sgt i32 %t1667854, 0
  %285 = icmp sgt i32 %t1661841, 0
  %286 = sub nsw i32 %199, %t1636
  %287 = sext i32 %t1636 to i64
  %288 = sub nsw i64 %287, %280
  %a551 = sub nsw i32 %198, %t1645811
  %289 = icmp sgt i32 %a551, 0
  %290 = select i1 %289, i32 %a551, i32 0
  %t2293 = zext i32 %290 to i64
  %291 = shl nuw nsw i64 %t2293, 4
  %292 = or i64 %291, 6
  %293 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %a554 = select i1 %212, i32 0, i32 %t1644
  %294 = icmp sgt i32 %t1644, %a554
  %295 = select i1 %294, i32 %a554, i32 %t1644
  %t682885 = sub i32 %t1635808, %295
  %296 = sext i32 %t682885 to i64
  %297 = zext i32 %198 to i64
  %298 = sext i32 %t1645811 to i64
  %299 = sub nsw i64 %297, %298
  %300 = sext i32 %t1635808 to i64
  %301 = sub nsw i64 %300, %298
  %t1680887 = sub nsw i32 %t1626814, %t1641
  %302 = icmp sgt i32 %t1680887, 0
  %303 = sext i32 %t1641 to i64
  %t1683898 = sub nsw i32 %a331, %t1626814
  %304 = icmp sgt i32 %t1683898, 0
  %305 = select i1 %212, i32 %226, i32 0
  %306 = add nsw i32 %228, %305
  %a615 = add nsw i32 %306, 32
  %307 = icmp sgt i32 %198, %a615
  %a614 = select i1 %307, i32 %a615, i32 %198
  %308 = icmp sgt i32 %306, %t1647
  %309 = select i1 %308, i32 %t1647, i32 %306
  %b616 = add nsw i32 %309, 35
  %310 = icmp sgt i32 %a614, %b616
  %a613 = select i1 %310, i32 %a614, i32 %b616
  %.not2677 = icmp slt i32 %a613, %243
  %311 = select i1 %.not2677, i32 %b346, i32 %a613
  %factor = mul i32 %295, -2
  %312 = add nsw i32 %t1635808, 1
  %313 = add i32 %312, %factor
  %t688913 = add i32 %313, %311
  %314 = sext i32 %t688913 to i64
  %315 = sub i32 %a377, %t1645811
  %316 = sub nsw i32 %311, %295
  %317 = shl i32 %316, 1
  %318 = add nsw i32 %t1635808, 2
  %319 = sub i32 %318, %295
  %t694943 = add i32 %319, %317
  %320 = sext i32 %t694943 to i64
  %321 = shl nsw i32 %a377, 1
  %322 = sub i32 %321, %t1645811
  %323 = shl i32 %316, 2
  %324 = add i32 %323, 4
  %.neg3072 = xor i32 %316, -1
  %325 = add i32 %t682885, %.neg3072
  %t700973 = add i32 %325, %324
  %326 = sext i32 %t700973 to i64
  %327 = shl nsw i32 %a377, 2
  %328 = sub nsw i32 %327, %t1645811
  %329 = add i32 %328, %a377.neg
  %330 = add nsw i32 %t1635808, 4
  %331 = sub i32 %330, %295
  %t7061003 = add i32 %331, %323
  %332 = sext i32 %t7061003 to i64
  %t12631007 = sub nsw i32 %198, %295
  %333 = sext i32 %t12631007 to i64
  %334 = sext i32 %201 to i64
  %335 = sext i32 %t1637809 to i64
  %336 = sub nsw i64 %300, %335
  %t17091013 = sub nsw i32 0, %t1637809
  %337 = sext i32 %a551 to i64
  %338 = sext i32 %t17091013 to i64
  %339 = add nsw i32 %316, 1
  %340 = shl nsw i32 %339, 2
  %341 = add i32 %t682885, %339
  %t7221046 = add i32 %341, %340
  %342 = sext i32 %t7221046 to i64
  %343 = add nsw i32 %328, %a377
  %344 = mul i32 %316, 6
  %345 = add nsw i32 %t1635808, 6
  %346 = sub i32 %345, %295
  %t7381089 = add i32 %346, %344
  %347 = sext i32 %t7381089 to i64
  %348 = mul nsw i32 %a377, 6
  %349 = sub i32 %348, %t1645811
  %350 = mul i32 %316, 7
  %351 = add nsw i32 %t1635808, 7
  %352 = sub i32 %351, %295
  %t7541132 = add i32 %352, %350
  %353 = sext i32 %t7541132 to i64
  %354 = mul nsw i32 %a377, 7
  %355 = sub i32 %354, %t1645811
  %356 = shl i32 %316, 3
  %357 = add nsw i32 %t1635808, 8
  %358 = sub i32 %357, %295
  %t7701175 = add i32 %358, %356
  %359 = sext i32 %t7701175 to i64
  %360 = shl nsw i32 %a377, 3
  %361 = sub i32 %360, %t1645811
  %362 = mul i32 %316, 9
  %363 = add nsw i32 %t1635808, 9
  %364 = sub i32 %363, %295
  %t7861218 = add i32 %364, %362
  %365 = sext i32 %t7861218 to i64
  %366 = mul nsw i32 %a377, 9
  %367 = sub i32 %366, %t1645811
  %368 = mul i32 %316, 10
  %369 = add nsw i32 %t1635808, 10
  %370 = sub i32 %369, %295
  %t8021261 = add i32 %370, %368
  %371 = sext i32 %t8021261 to i64
  %372 = mul nsw i32 %a377, 10
  %373 = sub i32 %372, %t1645811
  %374 = mul i32 %316, 11
  %375 = add nsw i32 %t1635808, 11
  %376 = sub i32 %375, %295
  %t8181304 = add i32 %376, %374
  %377 = sext i32 %t8181304 to i64
  %378 = mul nsw i32 %a377, 11
  %379 = sub i32 %378, %t1645811
  %380 = mul i32 %316, 12
  %381 = add nsw i32 %t1635808, 12
  %382 = sub i32 %381, %295
  %t8341347 = add i32 %382, %380
  %383 = sext i32 %t8341347 to i64
  %384 = mul nsw i32 %a377, 12
  %385 = sub i32 %384, %t1645811
  %386 = mul i32 %316, 13
  %387 = add nsw i32 %t1635808, 13
  %388 = sub i32 %387, %295
  %t8501390 = add i32 %388, %386
  %389 = sext i32 %t8501390 to i64
  %390 = mul nsw i32 %a377, 13
  %391 = sub i32 %390, %t1645811
  %392 = mul i32 %316, 14
  %393 = add nsw i32 %t1635808, 14
  %394 = sub i32 %393, %295
  %t8661433 = add i32 %394, %392
  %395 = sext i32 %t8661433 to i64
  %396 = mul nsw i32 %a377, 14
  %397 = sub i32 %396, %t1645811
  %398 = mul i32 %316, 15
  %399 = add nsw i32 %t1635808, 15
  %400 = sub i32 %399, %295
  %t8821476 = add i32 %400, %398
  %401 = sext i32 %t8821476 to i64
  %402 = mul nsw i32 %a377, 15
  %403 = sub i32 %402, %t1645811
  %404 = shl i32 %316, 4
  %405 = add nsw i32 %t1635808, 16
  %406 = sub i32 %405, %295
  %t8981519 = add i32 %406, %404
  %407 = sext i32 %t8981519 to i64
  %408 = shl nsw i32 %a377, 4
  %409 = sub i32 %408, %t1645811
  %410 = mul i32 %316, 17
  %411 = add nsw i32 %t1635808, 17
  %412 = sub i32 %411, %295
  %t9141562 = add i32 %412, %410
  %413 = sext i32 %t9141562 to i64
  %414 = mul nsw i32 %a377, 17
  %415 = sub i32 %414, %t1645811
  %416 = mul i32 %316, 18
  %417 = add nsw i32 %t1635808, 18
  %418 = sub i32 %417, %295
  %t9301605 = add i32 %418, %416
  %419 = sext i32 %t9301605 to i64
  %420 = mul nsw i32 %a377, 18
  %421 = sub i32 %420, %t1645811
  %422 = mul i32 %316, 19
  %423 = add nsw i32 %t1635808, 19
  %424 = sub i32 %423, %295
  %t9461648 = add i32 %424, %422
  %425 = sext i32 %t9461648 to i64
  %426 = mul nsw i32 %a377, 19
  %427 = sub i32 %426, %t1645811
  %428 = mul i32 %316, 20
  %429 = add nsw i32 %t1635808, 20
  %430 = sub i32 %429, %295
  %t9621691 = add i32 %430, %428
  %431 = sext i32 %t9621691 to i64
  %432 = mul nsw i32 %a377, 20
  %433 = sub i32 %432, %t1645811
  %434 = mul i32 %316, 21
  %435 = add nsw i32 %t1635808, 21
  %436 = sub i32 %435, %295
  %t9781734 = add i32 %436, %434
  %437 = sext i32 %t9781734 to i64
  %438 = mul nsw i32 %a377, 21
  %439 = sub i32 %438, %t1645811
  %440 = mul i32 %316, 22
  %441 = add nsw i32 %t1635808, 22
  %442 = sub i32 %441, %295
  %t9941777 = add i32 %442, %440
  %443 = sext i32 %t9941777 to i64
  %444 = mul nsw i32 %a377, 22
  %445 = sub i32 %444, %t1645811
  %446 = mul i32 %316, 23
  %447 = add nsw i32 %t1635808, 23
  %448 = sub i32 %447, %295
  %t10101820 = add i32 %448, %446
  %449 = sext i32 %t10101820 to i64
  %450 = mul nsw i32 %a377, 23
  %451 = sub i32 %450, %t1645811
  %452 = mul i32 %316, 24
  %453 = add nsw i32 %t1635808, 24
  %454 = sub i32 %453, %295
  %t10261863 = add i32 %454, %452
  %455 = sext i32 %t10261863 to i64
  %456 = mul nsw i32 %a377, 24
  %457 = sub i32 %456, %t1645811
  %458 = mul i32 %316, 25
  %459 = add nsw i32 %t1635808, 25
  %460 = sub i32 %459, %295
  %t10421906 = add i32 %460, %458
  %461 = sext i32 %t10421906 to i64
  %462 = mul nsw i32 %a377, 25
  %463 = sub i32 %462, %t1645811
  %464 = mul i32 %316, 26
  %465 = add nsw i32 %t1635808, 26
  %466 = sub i32 %465, %295
  %t10581949 = add i32 %466, %464
  %467 = sext i32 %t10581949 to i64
  %468 = mul nsw i32 %a377, 26
  %469 = sub i32 %468, %t1645811
  %470 = mul i32 %316, 27
  %471 = add nsw i32 %t1635808, 27
  %472 = sub i32 %471, %295
  %t10741992 = add i32 %472, %470
  %473 = sext i32 %t10741992 to i64
  %474 = mul nsw i32 %a377, 27
  %475 = sub i32 %474, %t1645811
  %476 = mul i32 %316, 28
  %477 = add nsw i32 %t1635808, 28
  %478 = sub i32 %477, %295
  %t10902035 = add i32 %478, %476
  %479 = sext i32 %t10902035 to i64
  %480 = mul nsw i32 %a377, 28
  %481 = sub i32 %480, %t1645811
  %482 = mul i32 %316, 29
  %483 = add nsw i32 %t1635808, 29
  %484 = sub i32 %483, %295
  %t11062078 = add i32 %484, %482
  %485 = sext i32 %t11062078 to i64
  %486 = mul nsw i32 %a377, 29
  %487 = sub i32 %486, %t1645811
  %488 = mul i32 %316, 30
  %489 = add nsw i32 %t1635808, 30
  %490 = sub i32 %489, %295
  %t11222121 = add i32 %490, %488
  %491 = sext i32 %t11222121 to i64
  %492 = mul nsw i32 %a377, 30
  %493 = sub i32 %492, %t1645811
  %494 = mul i32 %316, 31
  %495 = add nsw i32 %t1635808, 31
  %496 = sub i32 %495, %295
  %t11382164 = add i32 %496, %494
  %497 = sext i32 %t11382164 to i64
  %498 = mul nsw i32 %a377, 31
  %499 = sub i32 %498, %t1645811
  %500 = shl i32 %316, 5
  %501 = add nsw i32 %t1635808, 32
  %502 = sub i32 %501, %295
  %t11542207 = add i32 %502, %500
  %503 = sext i32 %t11542207 to i64
  %504 = shl nsw i32 %a377, 5
  %505 = sub i32 %504, %t1645811
  %506 = mul i32 %316, 33
  %507 = add nsw i32 %t1635808, 33
  %508 = sub i32 %507, %295
  %t11702250 = add i32 %508, %506
  %509 = sext i32 %t11702250 to i64
  %510 = mul nsw i32 %a377, 33
  %511 = sub i32 %510, %t1645811
  %512 = mul i32 %316, 34
  %513 = add nsw i32 %t1635808, 34
  %514 = sub i32 %513, %295
  %t11862293 = add i32 %514, %512
  %515 = sext i32 %t11862293 to i64
  %516 = mul nsw i32 %a377, 34
  %517 = sub i32 %516, %t1645811
  %518 = mul i32 %316, 35
  %519 = add nsw i32 %t1635808, 35
  %520 = sub i32 %519, %295
  %t12022336 = add i32 %520, %518
  %521 = sext i32 %t12022336 to i64
  %522 = mul nsw i32 %a377, 35
  %523 = sub i32 %522, %t1645811
  %524 = sext i32 %b398 to i64
  %525 = zext i32 %t1642 to i64
  %526 = sext i32 %271 to i64
  %527 = zext i32 %t1667854 to i64
  %528 = sext i32 %207 to i64
  %529 = sext i32 %203 to i64
  %zext = zext i32 %t1680887 to i64
  %zext3370 = zext i32 %t1680887 to i64
  %zext3373 = zext i32 %t1680887 to i64
  %zext3376 = zext i32 %t1680887 to i64
  %zext3379 = zext i32 %t1680887 to i64
  %zext3382 = zext i32 %t1680887 to i64
  %zext3385 = zext i32 %t1680887 to i64
  %zext3388 = zext i32 %t1680887 to i64
  %zext3391 = zext i32 %t1680887 to i64
  %zext3394 = zext i32 %t1680887 to i64
  %zext3397 = zext i32 %t1680887 to i64
  %zext3400 = zext i32 %t1680887 to i64
  %zext3403 = zext i32 %t1680887 to i64
  %zext3406 = zext i32 %t1680887 to i64
  %zext3409 = zext i32 %t1680887 to i64
  %zext3412 = zext i32 %t1680887 to i64
  %zext3415 = zext i32 %t1680887 to i64
  %zext3418 = zext i32 %t1680887 to i64
  %zext3421 = zext i32 %t1680887 to i64
  %zext3424 = zext i32 %t1680887 to i64
  %zext3427 = zext i32 %t1680887 to i64
  %zext3430 = zext i32 %t1680887 to i64
  %zext3433 = zext i32 %t1680887 to i64
  %zext3436 = zext i32 %t1680887 to i64
  %zext3439 = zext i32 %t1680887 to i64
  %zext3442 = zext i32 %t1680887 to i64
  %zext3445 = zext i32 %t1680887 to i64
  %zext3448 = zext i32 %t1680887 to i64
  %zext3451 = zext i32 %t1680887 to i64
  %zext3454 = zext i32 %t1680887 to i64
  %zext3457 = zext i32 %t1680887 to i64
  %zext3460 = zext i32 %t1680887 to i64
  %zext3463 = zext i32 %t1680887 to i64
  %zext3466 = zext i32 %t1680887 to i64
  %zext3469 = zext i32 %t1680887 to i64
  %zext3472 = zext i32 %t1680887 to i64
  %530 = add nsw i64 %527, -1
  %xtraiter3663 = and i64 %527, 3
  %531 = icmp ult i64 %530, 3
  %unroll_iter3666 = and i64 %527, 4294967292
  %lcmp.mod3665.not = icmp eq i64 %xtraiter3663, 0
  br label %"for blur_y.s0.y.y816"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %532 = alloca i8*, i64 %69, align 32
  %533 = bitcast i8** %532 to i16*
  store i8** %532, i8*** %70, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %533, %then_bb ], [ %193, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %534 = icmp sgt i32 %a26, %11
  %a25 = select i1 %534, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 36
  %535 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %535, i32 %a25, i32 %b27
  %536 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %536, i32 %a25, i32 %b30
  %537 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %537, i32 %a27, i32 %b27
  %a31 = sub i32 %71, %blur_y.s0.y.yi.base.s
  %538 = icmp sgt i32 %a31, 0
  br i1 %538, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1651 = add nsw i32 %72, %blur_y.s0.y.yi.base.s
  %539 = icmp slt i32 %a31, 36
  %a30 = select i1 %539, i32 %a31, i32 36
  %540 = sext i32 %t1651 to i64
  %541 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %542 = add nsw i64 %indvars.iv, %540
  %543 = icmp slt i64 %542, %178
  %544 = trunc i64 %542 to i32
  %a33 = select i1 %543, i32 %544, i32 %b36
  %545 = mul nsw i64 %indvars.iv, %82
  %546 = sub nsw i64 %545, %83
  %547 = icmp sgt i32 %a33, 0
  %548 = select i1 %547, i32 %a33, i32 0
  %549 = mul nsw i32 %548, %13
  %t1653 = sub nsw i32 %549, %9
  %550 = insertelement <32 x i32> undef, i32 %t1653, i32 0
  %551 = shufflevector <32 x i32> %550, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %552 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %552, i32 %a40, i32 %a26
  %553 = icmp sgt i32 %b27, %a39
  %554 = select i1 %553, i32 %a39, i32 %b27
  %t1655 = sub nsw i32 %554, %read_input.s0.y.prologue
  %555 = icmp sgt i32 %t1655, 0
  br i1 %555, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1658 = sub i32 %read_input.s0.y.prologue, %11
  %556 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %81, %556
  %557 = icmp slt i64 %a47, 36
  %a46 = select i1 %557, i64 %a47, i64 36
  %558 = icmp sgt i64 %a46, 0
  %559 = select i1 %558, i64 %a46, i64 0
  %560 = sext i32 %t1658 to i64
  %561 = zext i32 %t1655 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %760, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %562 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %562, %t1650
  %563 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %563, i32 %a35, i32 %b37
  %564 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %565 = insertelement <32 x i32> undef, i32 %564, i32 0
  %566 = shufflevector <32 x i32> %565, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %566, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %567 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %568 = icmp sgt <8 x i32> %75, %567
  %569 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %570 = icmp sgt <8 x i32> %75, %569
  %571 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %572 = icmp sgt <8 x i32> %75, %571
  %573 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %574 = icmp sgt <8 x i32> %75, %573
  %575 = select <8 x i1> %568, <8 x i32> %567, <8 x i32> %75
  %576 = select <8 x i1> %570, <8 x i32> %569, <8 x i32> %75
  %577 = select <8 x i1> %572, <8 x i32> %571, <8 x i32> %75
  %578 = select <8 x i1> %574, <8 x i32> %573, <8 x i32> %75
  %579 = icmp sgt <8 x i32> %575, %77
  %580 = icmp sgt <8 x i32> %576, %77
  %581 = icmp sgt <8 x i32> %577, %77
  %582 = icmp sgt <8 x i32> %578, %77
  %583 = select <8 x i1> %579, <8 x i32> %575, <8 x i32> %77
  %584 = select <8 x i1> %580, <8 x i32> %576, <8 x i32> %77
  %585 = select <8 x i1> %581, <8 x i32> %577, <8 x i32> %77
  %586 = select <8 x i1> %582, <8 x i32> %578, <8 x i32> %77
  %587 = shufflevector <8 x i32> %583, <8 x i32> %584, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %588 = shufflevector <8 x i32> %585, <8 x i32> %586, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %589 = shufflevector <16 x i32> %587, <16 x i32> %588, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %590 = add nsw <32 x i32> %589, %551
  %591 = extractelement <32 x i32> %590, i32 0
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds i16, i16* %64, i64 %592
  %594 = load i16, i16* %593, align 2, !tbaa !393
  %595 = insertelement <32 x i16> undef, i16 %594, i32 0
  %596 = extractelement <32 x i32> %590, i32 1
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds i16, i16* %64, i64 %597
  %599 = load i16, i16* %598, align 2, !tbaa !393
  %600 = insertelement <32 x i16> %595, i16 %599, i32 1
  %601 = extractelement <32 x i32> %590, i32 2
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds i16, i16* %64, i64 %602
  %604 = load i16, i16* %603, align 2, !tbaa !393
  %605 = insertelement <32 x i16> %600, i16 %604, i32 2
  %606 = extractelement <32 x i32> %590, i32 3
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %64, i64 %607
  %609 = load i16, i16* %608, align 2, !tbaa !393
  %610 = insertelement <32 x i16> %605, i16 %609, i32 3
  %611 = extractelement <32 x i32> %590, i32 4
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds i16, i16* %64, i64 %612
  %614 = load i16, i16* %613, align 2, !tbaa !393
  %615 = insertelement <32 x i16> %610, i16 %614, i32 4
  %616 = extractelement <32 x i32> %590, i32 5
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i16, i16* %64, i64 %617
  %619 = load i16, i16* %618, align 2, !tbaa !393
  %620 = insertelement <32 x i16> %615, i16 %619, i32 5
  %621 = extractelement <32 x i32> %590, i32 6
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds i16, i16* %64, i64 %622
  %624 = load i16, i16* %623, align 2, !tbaa !393
  %625 = insertelement <32 x i16> %620, i16 %624, i32 6
  %626 = extractelement <32 x i32> %590, i32 7
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds i16, i16* %64, i64 %627
  %629 = load i16, i16* %628, align 2, !tbaa !393
  %630 = insertelement <32 x i16> %625, i16 %629, i32 7
  %631 = extractelement <32 x i32> %590, i32 8
  %632 = sext i32 %631 to i64
  %633 = getelementptr inbounds i16, i16* %64, i64 %632
  %634 = load i16, i16* %633, align 2, !tbaa !393
  %635 = insertelement <32 x i16> %630, i16 %634, i32 8
  %636 = extractelement <32 x i32> %590, i32 9
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i16, i16* %64, i64 %637
  %639 = load i16, i16* %638, align 2, !tbaa !393
  %640 = insertelement <32 x i16> %635, i16 %639, i32 9
  %641 = extractelement <32 x i32> %590, i32 10
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds i16, i16* %64, i64 %642
  %644 = load i16, i16* %643, align 2, !tbaa !393
  %645 = insertelement <32 x i16> %640, i16 %644, i32 10
  %646 = extractelement <32 x i32> %590, i32 11
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i16, i16* %64, i64 %647
  %649 = load i16, i16* %648, align 2, !tbaa !393
  %650 = insertelement <32 x i16> %645, i16 %649, i32 11
  %651 = extractelement <32 x i32> %590, i32 12
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds i16, i16* %64, i64 %652
  %654 = load i16, i16* %653, align 2, !tbaa !393
  %655 = insertelement <32 x i16> %650, i16 %654, i32 12
  %656 = extractelement <32 x i32> %590, i32 13
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds i16, i16* %64, i64 %657
  %659 = load i16, i16* %658, align 2, !tbaa !393
  %660 = insertelement <32 x i16> %655, i16 %659, i32 13
  %661 = extractelement <32 x i32> %590, i32 14
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds i16, i16* %64, i64 %662
  %664 = load i16, i16* %663, align 2, !tbaa !393
  %665 = insertelement <32 x i16> %660, i16 %664, i32 14
  %666 = extractelement <32 x i32> %590, i32 15
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds i16, i16* %64, i64 %667
  %669 = load i16, i16* %668, align 2, !tbaa !393
  %670 = insertelement <32 x i16> %665, i16 %669, i32 15
  %671 = extractelement <32 x i32> %590, i32 16
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds i16, i16* %64, i64 %672
  %674 = load i16, i16* %673, align 2, !tbaa !393
  %675 = insertelement <32 x i16> %670, i16 %674, i32 16
  %676 = extractelement <32 x i32> %590, i32 17
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i16, i16* %64, i64 %677
  %679 = load i16, i16* %678, align 2, !tbaa !393
  %680 = insertelement <32 x i16> %675, i16 %679, i32 17
  %681 = extractelement <32 x i32> %590, i32 18
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds i16, i16* %64, i64 %682
  %684 = load i16, i16* %683, align 2, !tbaa !393
  %685 = insertelement <32 x i16> %680, i16 %684, i32 18
  %686 = extractelement <32 x i32> %590, i32 19
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds i16, i16* %64, i64 %687
  %689 = load i16, i16* %688, align 2, !tbaa !393
  %690 = insertelement <32 x i16> %685, i16 %689, i32 19
  %691 = extractelement <32 x i32> %590, i32 20
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i16, i16* %64, i64 %692
  %694 = load i16, i16* %693, align 2, !tbaa !393
  %695 = insertelement <32 x i16> %690, i16 %694, i32 20
  %696 = extractelement <32 x i32> %590, i32 21
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds i16, i16* %64, i64 %697
  %699 = load i16, i16* %698, align 2, !tbaa !393
  %700 = insertelement <32 x i16> %695, i16 %699, i32 21
  %701 = extractelement <32 x i32> %590, i32 22
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i16, i16* %64, i64 %702
  %704 = load i16, i16* %703, align 2, !tbaa !393
  %705 = insertelement <32 x i16> %700, i16 %704, i32 22
  %706 = extractelement <32 x i32> %590, i32 23
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds i16, i16* %64, i64 %707
  %709 = load i16, i16* %708, align 2, !tbaa !393
  %710 = insertelement <32 x i16> %705, i16 %709, i32 23
  %711 = extractelement <32 x i32> %590, i32 24
  %712 = sext i32 %711 to i64
  %713 = getelementptr inbounds i16, i16* %64, i64 %712
  %714 = load i16, i16* %713, align 2, !tbaa !393
  %715 = insertelement <32 x i16> %710, i16 %714, i32 24
  %716 = extractelement <32 x i32> %590, i32 25
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds i16, i16* %64, i64 %717
  %719 = load i16, i16* %718, align 2, !tbaa !393
  %720 = insertelement <32 x i16> %715, i16 %719, i32 25
  %721 = extractelement <32 x i32> %590, i32 26
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds i16, i16* %64, i64 %722
  %724 = load i16, i16* %723, align 2, !tbaa !393
  %725 = insertelement <32 x i16> %720, i16 %724, i32 26
  %726 = extractelement <32 x i32> %590, i32 27
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds i16, i16* %64, i64 %727
  %729 = load i16, i16* %728, align 2, !tbaa !393
  %730 = insertelement <32 x i16> %725, i16 %729, i32 27
  %731 = extractelement <32 x i32> %590, i32 28
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds i16, i16* %64, i64 %732
  %734 = load i16, i16* %733, align 2, !tbaa !393
  %735 = insertelement <32 x i16> %730, i16 %734, i32 28
  %736 = extractelement <32 x i32> %590, i32 29
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i16, i16* %64, i64 %737
  %739 = load i16, i16* %738, align 2, !tbaa !393
  %740 = insertelement <32 x i16> %735, i16 %739, i32 29
  %741 = extractelement <32 x i32> %590, i32 30
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds i16, i16* %64, i64 %742
  %744 = load i16, i16* %743, align 2, !tbaa !393
  %745 = insertelement <32 x i16> %740, i16 %744, i32 30
  %746 = extractelement <32 x i32> %590, i32 31
  %747 = sext i32 %746 to i64
  %748 = getelementptr inbounds i16, i16* %64, i64 %747
  %749 = load i16, i16* %748, align 2, !tbaa !393
  %750 = insertelement <32 x i16> %745, i16 %749, i32 31
  %751 = shufflevector <32 x i16> %750, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %752 = sext i32 %read_input.s0.x.v2.base.s to i64
  %753 = add nsw i64 %546, %752
  %754 = getelementptr inbounds i16, i16* %read_input, i64 %753
  %755 = getelementptr inbounds i16, i16* %754, i64 -32
  %756 = bitcast i16* %755 to <16 x i16>*
  store <16 x i16> %751, <16 x i16>* %756, align 2, !tbaa !396
  %757 = shufflevector <32 x i16> %750, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %758 = getelementptr inbounds i16, i16* %754, i64 -16
  %759 = bitcast i16* %758 to <16 x i16>*
  store <16 x i16> %757, <16 x i16>* %759, align 2, !tbaa !396
  %760 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2775 = icmp eq i32 %760, %20
  br i1 %.not2775, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2774 = icmp eq i64 %indvars.iv.next, %541
  br i1 %.not2774, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3242 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3243, %"end for read_input.s0.x.x.rebased10" ]
  %761 = add nsw i64 %indvars.iv3242, %560
  %762 = mul nsw i64 %761, %182
  %763 = sub nsw i64 %762, %183
  br i1 %78, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %764 = trunc i64 %763 to i32
  %765 = insertelement <32 x i32> undef, i32 %764, i32 0
  %766 = shufflevector <32 x i32> %765, <32 x i32> undef, <32 x i32> zeroinitializer
  %767 = add nuw nsw i64 %559, %indvars.iv3242
  %768 = mul nsw i64 %767, %82
  %769 = sub i64 %768, %83
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %86
  %770 = icmp slt i32 %a63, 0
  %a62 = select i1 %770, i32 %a63, i32 0
  %771 = icmp sgt i32 %a62, -36
  %t1675 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %771, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %772 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %88, %772
  %773 = icmp slt i64 %a70, 36
  %a69 = select i1 %773, i64 %a70, i64 36
  %774 = icmp sgt i64 %a69, 0
  %775 = select i1 %774, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 35
  %776 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %975, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %777 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %777, %t1650
  %778 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %778, i32 %a43, i32 %b37
  %779 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %780 = insertelement <32 x i32> undef, i32 %779, i32 0
  %781 = shufflevector <32 x i32> %780, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %781, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %782 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %783 = icmp sgt <8 x i32> %75, %782
  %784 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %785 = icmp sgt <8 x i32> %75, %784
  %786 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %787 = icmp sgt <8 x i32> %75, %786
  %788 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %789 = icmp sgt <8 x i32> %75, %788
  %790 = select <8 x i1> %783, <8 x i32> %782, <8 x i32> %75
  %791 = select <8 x i1> %785, <8 x i32> %784, <8 x i32> %75
  %792 = select <8 x i1> %787, <8 x i32> %786, <8 x i32> %75
  %793 = select <8 x i1> %789, <8 x i32> %788, <8 x i32> %75
  %794 = icmp sgt <8 x i32> %790, %77
  %795 = icmp sgt <8 x i32> %791, %77
  %796 = icmp sgt <8 x i32> %792, %77
  %797 = icmp sgt <8 x i32> %793, %77
  %798 = select <8 x i1> %794, <8 x i32> %790, <8 x i32> %77
  %799 = select <8 x i1> %795, <8 x i32> %791, <8 x i32> %77
  %800 = select <8 x i1> %796, <8 x i32> %792, <8 x i32> %77
  %801 = select <8 x i1> %797, <8 x i32> %793, <8 x i32> %77
  %802 = shufflevector <8 x i32> %798, <8 x i32> %799, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %803 = shufflevector <8 x i32> %800, <8 x i32> %801, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %804 = shufflevector <16 x i32> %802, <16 x i32> %803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %805 = add nsw <32 x i32> %804, %766
  %806 = extractelement <32 x i32> %805, i32 0
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i16, i16* %64, i64 %807
  %809 = load i16, i16* %808, align 2, !tbaa !393
  %810 = insertelement <32 x i16> undef, i16 %809, i32 0
  %811 = extractelement <32 x i32> %805, i32 1
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i16, i16* %64, i64 %812
  %814 = load i16, i16* %813, align 2, !tbaa !393
  %815 = insertelement <32 x i16> %810, i16 %814, i32 1
  %816 = extractelement <32 x i32> %805, i32 2
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i16, i16* %64, i64 %817
  %819 = load i16, i16* %818, align 2, !tbaa !393
  %820 = insertelement <32 x i16> %815, i16 %819, i32 2
  %821 = extractelement <32 x i32> %805, i32 3
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds i16, i16* %64, i64 %822
  %824 = load i16, i16* %823, align 2, !tbaa !393
  %825 = insertelement <32 x i16> %820, i16 %824, i32 3
  %826 = extractelement <32 x i32> %805, i32 4
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i16, i16* %64, i64 %827
  %829 = load i16, i16* %828, align 2, !tbaa !393
  %830 = insertelement <32 x i16> %825, i16 %829, i32 4
  %831 = extractelement <32 x i32> %805, i32 5
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds i16, i16* %64, i64 %832
  %834 = load i16, i16* %833, align 2, !tbaa !393
  %835 = insertelement <32 x i16> %830, i16 %834, i32 5
  %836 = extractelement <32 x i32> %805, i32 6
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds i16, i16* %64, i64 %837
  %839 = load i16, i16* %838, align 2, !tbaa !393
  %840 = insertelement <32 x i16> %835, i16 %839, i32 6
  %841 = extractelement <32 x i32> %805, i32 7
  %842 = sext i32 %841 to i64
  %843 = getelementptr inbounds i16, i16* %64, i64 %842
  %844 = load i16, i16* %843, align 2, !tbaa !393
  %845 = insertelement <32 x i16> %840, i16 %844, i32 7
  %846 = extractelement <32 x i32> %805, i32 8
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i16, i16* %64, i64 %847
  %849 = load i16, i16* %848, align 2, !tbaa !393
  %850 = insertelement <32 x i16> %845, i16 %849, i32 8
  %851 = extractelement <32 x i32> %805, i32 9
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i16, i16* %64, i64 %852
  %854 = load i16, i16* %853, align 2, !tbaa !393
  %855 = insertelement <32 x i16> %850, i16 %854, i32 9
  %856 = extractelement <32 x i32> %805, i32 10
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i16, i16* %64, i64 %857
  %859 = load i16, i16* %858, align 2, !tbaa !393
  %860 = insertelement <32 x i16> %855, i16 %859, i32 10
  %861 = extractelement <32 x i32> %805, i32 11
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i16, i16* %64, i64 %862
  %864 = load i16, i16* %863, align 2, !tbaa !393
  %865 = insertelement <32 x i16> %860, i16 %864, i32 11
  %866 = extractelement <32 x i32> %805, i32 12
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i16, i16* %64, i64 %867
  %869 = load i16, i16* %868, align 2, !tbaa !393
  %870 = insertelement <32 x i16> %865, i16 %869, i32 12
  %871 = extractelement <32 x i32> %805, i32 13
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i16, i16* %64, i64 %872
  %874 = load i16, i16* %873, align 2, !tbaa !393
  %875 = insertelement <32 x i16> %870, i16 %874, i32 13
  %876 = extractelement <32 x i32> %805, i32 14
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i16, i16* %64, i64 %877
  %879 = load i16, i16* %878, align 2, !tbaa !393
  %880 = insertelement <32 x i16> %875, i16 %879, i32 14
  %881 = extractelement <32 x i32> %805, i32 15
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i16, i16* %64, i64 %882
  %884 = load i16, i16* %883, align 2, !tbaa !393
  %885 = insertelement <32 x i16> %880, i16 %884, i32 15
  %886 = extractelement <32 x i32> %805, i32 16
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds i16, i16* %64, i64 %887
  %889 = load i16, i16* %888, align 2, !tbaa !393
  %890 = insertelement <32 x i16> %885, i16 %889, i32 16
  %891 = extractelement <32 x i32> %805, i32 17
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i16, i16* %64, i64 %892
  %894 = load i16, i16* %893, align 2, !tbaa !393
  %895 = insertelement <32 x i16> %890, i16 %894, i32 17
  %896 = extractelement <32 x i32> %805, i32 18
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds i16, i16* %64, i64 %897
  %899 = load i16, i16* %898, align 2, !tbaa !393
  %900 = insertelement <32 x i16> %895, i16 %899, i32 18
  %901 = extractelement <32 x i32> %805, i32 19
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i16, i16* %64, i64 %902
  %904 = load i16, i16* %903, align 2, !tbaa !393
  %905 = insertelement <32 x i16> %900, i16 %904, i32 19
  %906 = extractelement <32 x i32> %805, i32 20
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds i16, i16* %64, i64 %907
  %909 = load i16, i16* %908, align 2, !tbaa !393
  %910 = insertelement <32 x i16> %905, i16 %909, i32 20
  %911 = extractelement <32 x i32> %805, i32 21
  %912 = sext i32 %911 to i64
  %913 = getelementptr inbounds i16, i16* %64, i64 %912
  %914 = load i16, i16* %913, align 2, !tbaa !393
  %915 = insertelement <32 x i16> %910, i16 %914, i32 21
  %916 = extractelement <32 x i32> %805, i32 22
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds i16, i16* %64, i64 %917
  %919 = load i16, i16* %918, align 2, !tbaa !393
  %920 = insertelement <32 x i16> %915, i16 %919, i32 22
  %921 = extractelement <32 x i32> %805, i32 23
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i16, i16* %64, i64 %922
  %924 = load i16, i16* %923, align 2, !tbaa !393
  %925 = insertelement <32 x i16> %920, i16 %924, i32 23
  %926 = extractelement <32 x i32> %805, i32 24
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds i16, i16* %64, i64 %927
  %929 = load i16, i16* %928, align 2, !tbaa !393
  %930 = insertelement <32 x i16> %925, i16 %929, i32 24
  %931 = extractelement <32 x i32> %805, i32 25
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i16, i16* %64, i64 %932
  %934 = load i16, i16* %933, align 2, !tbaa !393
  %935 = insertelement <32 x i16> %930, i16 %934, i32 25
  %936 = extractelement <32 x i32> %805, i32 26
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds i16, i16* %64, i64 %937
  %939 = load i16, i16* %938, align 2, !tbaa !393
  %940 = insertelement <32 x i16> %935, i16 %939, i32 26
  %941 = extractelement <32 x i32> %805, i32 27
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds i16, i16* %64, i64 %942
  %944 = load i16, i16* %943, align 2, !tbaa !393
  %945 = insertelement <32 x i16> %940, i16 %944, i32 27
  %946 = extractelement <32 x i32> %805, i32 28
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i16, i16* %64, i64 %947
  %949 = load i16, i16* %948, align 2, !tbaa !393
  %950 = insertelement <32 x i16> %945, i16 %949, i32 28
  %951 = extractelement <32 x i32> %805, i32 29
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds i16, i16* %64, i64 %952
  %954 = load i16, i16* %953, align 2, !tbaa !393
  %955 = insertelement <32 x i16> %950, i16 %954, i32 29
  %956 = extractelement <32 x i32> %805, i32 30
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds i16, i16* %64, i64 %957
  %959 = load i16, i16* %958, align 2, !tbaa !393
  %960 = insertelement <32 x i16> %955, i16 %959, i32 30
  %961 = extractelement <32 x i32> %805, i32 31
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds i16, i16* %64, i64 %962
  %964 = load i16, i16* %963, align 2, !tbaa !393
  %965 = insertelement <32 x i16> %960, i16 %964, i32 31
  %966 = shufflevector <32 x i16> %965, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %967 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %968 = add nsw i64 %769, %967
  %969 = getelementptr inbounds i16, i16* %read_input, i64 %968
  %970 = getelementptr inbounds i16, i16* %969, i64 -32
  %971 = bitcast i16* %970 to <16 x i16>*
  store <16 x i16> %966, <16 x i16>* %971, align 2, !tbaa !396
  %972 = shufflevector <32 x i16> %965, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %973 = getelementptr inbounds i16, i16* %969, i64 -16
  %974 = bitcast i16* %973 to <16 x i16>*
  store <16 x i16> %972, <16 x i16>* %974, align 2, !tbaa !396
  %975 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2772 = icmp eq i32 %975, %b18
  br i1 %.not2772, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %84, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %976 = add nuw nsw i64 %559, %indvars.iv3242
  %977 = mul nsw i64 %976, %82
  %978 = sub i64 %977, %83
  br i1 %186, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3239 = phi i64 [ %indvars.iv.next3240.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %979 = add nuw nsw i64 %indvars.iv3239, %179
  %980 = shl nsw i64 %979, 5
  %981 = add nsw i64 %980, %180
  %982 = add nsw i64 %981, %763
  %983 = getelementptr inbounds i16, i16* %64, i64 %982
  %984 = getelementptr inbounds i16, i16* %983, i64 -32
  %985 = bitcast i16* %984 to <16 x i16>*
  %986 = load <16 x i16>, <16 x i16>* %985, align 2, !tbaa !393
  %987 = getelementptr inbounds i16, i16* %983, i64 -16
  %988 = bitcast i16* %987 to <16 x i16>*
  %989 = load <16 x i16>, <16 x i16>* %988, align 2, !tbaa !393
  %990 = add nsw i64 %978, %981
  %991 = getelementptr inbounds i16, i16* %read_input, i64 %990
  %992 = getelementptr inbounds i16, i16* %991, i64 -32
  %993 = bitcast i16* %992 to <16 x i16>*
  store <16 x i16> %986, <16 x i16>* %993, align 2, !tbaa !396
  %994 = getelementptr inbounds i16, i16* %991, i64 -16
  %995 = bitcast i16* %994 to <16 x i16>*
  store <16 x i16> %989, <16 x i16>* %995, align 2, !tbaa !396
  %indvars.iv.next3240 = or i64 %indvars.iv3239, 1
  %996 = add nuw nsw i64 %indvars.iv.next3240, %179
  %997 = shl nsw i64 %996, 5
  %998 = add nsw i64 %997, %180
  %999 = add nsw i64 %998, %763
  %1000 = getelementptr inbounds i16, i16* %64, i64 %999
  %1001 = getelementptr inbounds i16, i16* %1000, i64 -32
  %1002 = bitcast i16* %1001 to <16 x i16>*
  %1003 = load <16 x i16>, <16 x i16>* %1002, align 2, !tbaa !393
  %1004 = getelementptr inbounds i16, i16* %1000, i64 -16
  %1005 = bitcast i16* %1004 to <16 x i16>*
  %1006 = load <16 x i16>, <16 x i16>* %1005, align 2, !tbaa !393
  %1007 = add nsw i64 %978, %998
  %1008 = getelementptr inbounds i16, i16* %read_input, i64 %1007
  %1009 = getelementptr inbounds i16, i16* %1008, i64 -32
  %1010 = bitcast i16* %1009 to <16 x i16>*
  store <16 x i16> %1003, <16 x i16>* %1010, align 2, !tbaa !396
  %1011 = getelementptr inbounds i16, i16* %1008, i64 -16
  %1012 = bitcast i16* %1011 to <16 x i16>*
  store <16 x i16> %1006, <16 x i16>* %1012, align 2, !tbaa !396
  %indvars.iv.next3240.1 = or i64 %indvars.iv3239, 2
  %1013 = add nuw nsw i64 %indvars.iv.next3240.1, %179
  %1014 = shl nsw i64 %1013, 5
  %1015 = add nsw i64 %1014, %180
  %1016 = add nsw i64 %1015, %763
  %1017 = getelementptr inbounds i16, i16* %64, i64 %1016
  %1018 = getelementptr inbounds i16, i16* %1017, i64 -32
  %1019 = bitcast i16* %1018 to <16 x i16>*
  %1020 = load <16 x i16>, <16 x i16>* %1019, align 2, !tbaa !393
  %1021 = getelementptr inbounds i16, i16* %1017, i64 -16
  %1022 = bitcast i16* %1021 to <16 x i16>*
  %1023 = load <16 x i16>, <16 x i16>* %1022, align 2, !tbaa !393
  %1024 = add nsw i64 %978, %1015
  %1025 = getelementptr inbounds i16, i16* %read_input, i64 %1024
  %1026 = getelementptr inbounds i16, i16* %1025, i64 -32
  %1027 = bitcast i16* %1026 to <16 x i16>*
  store <16 x i16> %1020, <16 x i16>* %1027, align 2, !tbaa !396
  %1028 = getelementptr inbounds i16, i16* %1025, i64 -16
  %1029 = bitcast i16* %1028 to <16 x i16>*
  store <16 x i16> %1023, <16 x i16>* %1029, align 2, !tbaa !396
  %indvars.iv.next3240.2 = or i64 %indvars.iv3239, 3
  %1030 = add nuw nsw i64 %indvars.iv.next3240.2, %179
  %1031 = shl nsw i64 %1030, 5
  %1032 = add nsw i64 %1031, %180
  %1033 = add nsw i64 %1032, %763
  %1034 = getelementptr inbounds i16, i16* %64, i64 %1033
  %1035 = getelementptr inbounds i16, i16* %1034, i64 -32
  %1036 = bitcast i16* %1035 to <16 x i16>*
  %1037 = load <16 x i16>, <16 x i16>* %1036, align 2, !tbaa !393
  %1038 = getelementptr inbounds i16, i16* %1034, i64 -16
  %1039 = bitcast i16* %1038 to <16 x i16>*
  %1040 = load <16 x i16>, <16 x i16>* %1039, align 2, !tbaa !393
  %1041 = add nsw i64 %978, %1032
  %1042 = getelementptr inbounds i16, i16* %read_input, i64 %1041
  %1043 = getelementptr inbounds i16, i16* %1042, i64 -32
  %1044 = bitcast i16* %1043 to <16 x i16>*
  store <16 x i16> %1037, <16 x i16>* %1044, align 2, !tbaa !396
  %1045 = getelementptr inbounds i16, i16* %1042, i64 -16
  %1046 = bitcast i16* %1045 to <16 x i16>*
  store <16 x i16> %1040, <16 x i16>* %1046, align 2, !tbaa !396
  %indvars.iv.next3240.3 = add nuw nsw i64 %indvars.iv3239, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3239.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3240.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3239.epil = phi i64 [ %indvars.iv.next3240.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3239.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %1047 = add nuw nsw i64 %indvars.iv3239.epil, %179
  %1048 = shl nsw i64 %1047, 5
  %1049 = add nsw i64 %1048, %180
  %1050 = add nsw i64 %1049, %763
  %1051 = getelementptr inbounds i16, i16* %64, i64 %1050
  %1052 = getelementptr inbounds i16, i16* %1051, i64 -32
  %1053 = bitcast i16* %1052 to <16 x i16>*
  %1054 = load <16 x i16>, <16 x i16>* %1053, align 2, !tbaa !393
  %1055 = getelementptr inbounds i16, i16* %1051, i64 -16
  %1056 = bitcast i16* %1055 to <16 x i16>*
  %1057 = load <16 x i16>, <16 x i16>* %1056, align 2, !tbaa !393
  %1058 = add nsw i64 %978, %1049
  %1059 = getelementptr inbounds i16, i16* %read_input, i64 %1058
  %1060 = getelementptr inbounds i16, i16* %1059, i64 -32
  %1061 = bitcast i16* %1060 to <16 x i16>*
  store <16 x i16> %1054, <16 x i16>* %1061, align 2, !tbaa !396
  %1062 = getelementptr inbounds i16, i16* %1059, i64 -16
  %1063 = bitcast i16* %1062 to <16 x i16>*
  store <16 x i16> %1057, <16 x i16>* %1063, align 2, !tbaa !396
  %indvars.iv.next3240.epil = add nuw nsw i64 %indvars.iv3239.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %85, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %1064 = trunc i64 %763 to i32
  %1065 = insertelement <32 x i32> undef, i32 %1064, i32 0
  %1066 = shufflevector <32 x i32> %1065, <32 x i32> undef, <32 x i32> zeroinitializer
  %1067 = add nuw nsw i64 %559, %indvars.iv3242
  %1068 = mul nsw i64 %1067, %82
  %1069 = sub i64 %1068, %83
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1269, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %1070 = add nsw i32 %read_input.s0.x.x.rebased11, %t1624
  %1071 = shl nsw i32 %1070, 5
  %a54 = add nsw i32 %1071, %t1650
  %1072 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %1072, i32 %a54, i32 %b37
  %1073 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %1074 = insertelement <32 x i32> undef, i32 %1073, i32 0
  %1075 = shufflevector <32 x i32> %1074, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %1075, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1076 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1077 = icmp sgt <8 x i32> %75, %1076
  %1078 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1079 = icmp sgt <8 x i32> %75, %1078
  %1080 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1081 = icmp sgt <8 x i32> %75, %1080
  %1082 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1083 = icmp sgt <8 x i32> %75, %1082
  %1084 = select <8 x i1> %1077, <8 x i32> %1076, <8 x i32> %75
  %1085 = select <8 x i1> %1079, <8 x i32> %1078, <8 x i32> %75
  %1086 = select <8 x i1> %1081, <8 x i32> %1080, <8 x i32> %75
  %1087 = select <8 x i1> %1083, <8 x i32> %1082, <8 x i32> %75
  %1088 = icmp sgt <8 x i32> %1084, %77
  %1089 = icmp sgt <8 x i32> %1085, %77
  %1090 = icmp sgt <8 x i32> %1086, %77
  %1091 = icmp sgt <8 x i32> %1087, %77
  %1092 = select <8 x i1> %1088, <8 x i32> %1084, <8 x i32> %77
  %1093 = select <8 x i1> %1089, <8 x i32> %1085, <8 x i32> %77
  %1094 = select <8 x i1> %1090, <8 x i32> %1086, <8 x i32> %77
  %1095 = select <8 x i1> %1091, <8 x i32> %1087, <8 x i32> %77
  %1096 = shufflevector <8 x i32> %1092, <8 x i32> %1093, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1097 = shufflevector <8 x i32> %1094, <8 x i32> %1095, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1098 = shufflevector <16 x i32> %1096, <16 x i32> %1097, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1099 = add nsw <32 x i32> %1098, %1066
  %1100 = extractelement <32 x i32> %1099, i32 0
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i16, i16* %64, i64 %1101
  %1103 = load i16, i16* %1102, align 2, !tbaa !393
  %1104 = insertelement <32 x i16> undef, i16 %1103, i32 0
  %1105 = extractelement <32 x i32> %1099, i32 1
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds i16, i16* %64, i64 %1106
  %1108 = load i16, i16* %1107, align 2, !tbaa !393
  %1109 = insertelement <32 x i16> %1104, i16 %1108, i32 1
  %1110 = extractelement <32 x i32> %1099, i32 2
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i16, i16* %64, i64 %1111
  %1113 = load i16, i16* %1112, align 2, !tbaa !393
  %1114 = insertelement <32 x i16> %1109, i16 %1113, i32 2
  %1115 = extractelement <32 x i32> %1099, i32 3
  %1116 = sext i32 %1115 to i64
  %1117 = getelementptr inbounds i16, i16* %64, i64 %1116
  %1118 = load i16, i16* %1117, align 2, !tbaa !393
  %1119 = insertelement <32 x i16> %1114, i16 %1118, i32 3
  %1120 = extractelement <32 x i32> %1099, i32 4
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i16, i16* %64, i64 %1121
  %1123 = load i16, i16* %1122, align 2, !tbaa !393
  %1124 = insertelement <32 x i16> %1119, i16 %1123, i32 4
  %1125 = extractelement <32 x i32> %1099, i32 5
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds i16, i16* %64, i64 %1126
  %1128 = load i16, i16* %1127, align 2, !tbaa !393
  %1129 = insertelement <32 x i16> %1124, i16 %1128, i32 5
  %1130 = extractelement <32 x i32> %1099, i32 6
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i16, i16* %64, i64 %1131
  %1133 = load i16, i16* %1132, align 2, !tbaa !393
  %1134 = insertelement <32 x i16> %1129, i16 %1133, i32 6
  %1135 = extractelement <32 x i32> %1099, i32 7
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i16, i16* %64, i64 %1136
  %1138 = load i16, i16* %1137, align 2, !tbaa !393
  %1139 = insertelement <32 x i16> %1134, i16 %1138, i32 7
  %1140 = extractelement <32 x i32> %1099, i32 8
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i16, i16* %64, i64 %1141
  %1143 = load i16, i16* %1142, align 2, !tbaa !393
  %1144 = insertelement <32 x i16> %1139, i16 %1143, i32 8
  %1145 = extractelement <32 x i32> %1099, i32 9
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds i16, i16* %64, i64 %1146
  %1148 = load i16, i16* %1147, align 2, !tbaa !393
  %1149 = insertelement <32 x i16> %1144, i16 %1148, i32 9
  %1150 = extractelement <32 x i32> %1099, i32 10
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i16, i16* %64, i64 %1151
  %1153 = load i16, i16* %1152, align 2, !tbaa !393
  %1154 = insertelement <32 x i16> %1149, i16 %1153, i32 10
  %1155 = extractelement <32 x i32> %1099, i32 11
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i16, i16* %64, i64 %1156
  %1158 = load i16, i16* %1157, align 2, !tbaa !393
  %1159 = insertelement <32 x i16> %1154, i16 %1158, i32 11
  %1160 = extractelement <32 x i32> %1099, i32 12
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i16, i16* %64, i64 %1161
  %1163 = load i16, i16* %1162, align 2, !tbaa !393
  %1164 = insertelement <32 x i16> %1159, i16 %1163, i32 12
  %1165 = extractelement <32 x i32> %1099, i32 13
  %1166 = sext i32 %1165 to i64
  %1167 = getelementptr inbounds i16, i16* %64, i64 %1166
  %1168 = load i16, i16* %1167, align 2, !tbaa !393
  %1169 = insertelement <32 x i16> %1164, i16 %1168, i32 13
  %1170 = extractelement <32 x i32> %1099, i32 14
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds i16, i16* %64, i64 %1171
  %1173 = load i16, i16* %1172, align 2, !tbaa !393
  %1174 = insertelement <32 x i16> %1169, i16 %1173, i32 14
  %1175 = extractelement <32 x i32> %1099, i32 15
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds i16, i16* %64, i64 %1176
  %1178 = load i16, i16* %1177, align 2, !tbaa !393
  %1179 = insertelement <32 x i16> %1174, i16 %1178, i32 15
  %1180 = extractelement <32 x i32> %1099, i32 16
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i16, i16* %64, i64 %1181
  %1183 = load i16, i16* %1182, align 2, !tbaa !393
  %1184 = insertelement <32 x i16> %1179, i16 %1183, i32 16
  %1185 = extractelement <32 x i32> %1099, i32 17
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i16, i16* %64, i64 %1186
  %1188 = load i16, i16* %1187, align 2, !tbaa !393
  %1189 = insertelement <32 x i16> %1184, i16 %1188, i32 17
  %1190 = extractelement <32 x i32> %1099, i32 18
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i16, i16* %64, i64 %1191
  %1193 = load i16, i16* %1192, align 2, !tbaa !393
  %1194 = insertelement <32 x i16> %1189, i16 %1193, i32 18
  %1195 = extractelement <32 x i32> %1099, i32 19
  %1196 = sext i32 %1195 to i64
  %1197 = getelementptr inbounds i16, i16* %64, i64 %1196
  %1198 = load i16, i16* %1197, align 2, !tbaa !393
  %1199 = insertelement <32 x i16> %1194, i16 %1198, i32 19
  %1200 = extractelement <32 x i32> %1099, i32 20
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds i16, i16* %64, i64 %1201
  %1203 = load i16, i16* %1202, align 2, !tbaa !393
  %1204 = insertelement <32 x i16> %1199, i16 %1203, i32 20
  %1205 = extractelement <32 x i32> %1099, i32 21
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds i16, i16* %64, i64 %1206
  %1208 = load i16, i16* %1207, align 2, !tbaa !393
  %1209 = insertelement <32 x i16> %1204, i16 %1208, i32 21
  %1210 = extractelement <32 x i32> %1099, i32 22
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds i16, i16* %64, i64 %1211
  %1213 = load i16, i16* %1212, align 2, !tbaa !393
  %1214 = insertelement <32 x i16> %1209, i16 %1213, i32 22
  %1215 = extractelement <32 x i32> %1099, i32 23
  %1216 = sext i32 %1215 to i64
  %1217 = getelementptr inbounds i16, i16* %64, i64 %1216
  %1218 = load i16, i16* %1217, align 2, !tbaa !393
  %1219 = insertelement <32 x i16> %1214, i16 %1218, i32 23
  %1220 = extractelement <32 x i32> %1099, i32 24
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i16, i16* %64, i64 %1221
  %1223 = load i16, i16* %1222, align 2, !tbaa !393
  %1224 = insertelement <32 x i16> %1219, i16 %1223, i32 24
  %1225 = extractelement <32 x i32> %1099, i32 25
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i16, i16* %64, i64 %1226
  %1228 = load i16, i16* %1227, align 2, !tbaa !393
  %1229 = insertelement <32 x i16> %1224, i16 %1228, i32 25
  %1230 = extractelement <32 x i32> %1099, i32 26
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds i16, i16* %64, i64 %1231
  %1233 = load i16, i16* %1232, align 2, !tbaa !393
  %1234 = insertelement <32 x i16> %1229, i16 %1233, i32 26
  %1235 = extractelement <32 x i32> %1099, i32 27
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds i16, i16* %64, i64 %1236
  %1238 = load i16, i16* %1237, align 2, !tbaa !393
  %1239 = insertelement <32 x i16> %1234, i16 %1238, i32 27
  %1240 = extractelement <32 x i32> %1099, i32 28
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds i16, i16* %64, i64 %1241
  %1243 = load i16, i16* %1242, align 2, !tbaa !393
  %1244 = insertelement <32 x i16> %1239, i16 %1243, i32 28
  %1245 = extractelement <32 x i32> %1099, i32 29
  %1246 = sext i32 %1245 to i64
  %1247 = getelementptr inbounds i16, i16* %64, i64 %1246
  %1248 = load i16, i16* %1247, align 2, !tbaa !393
  %1249 = insertelement <32 x i16> %1244, i16 %1248, i32 29
  %1250 = extractelement <32 x i32> %1099, i32 30
  %1251 = sext i32 %1250 to i64
  %1252 = getelementptr inbounds i16, i16* %64, i64 %1251
  %1253 = load i16, i16* %1252, align 2, !tbaa !393
  %1254 = insertelement <32 x i16> %1249, i16 %1253, i32 30
  %1255 = extractelement <32 x i32> %1099, i32 31
  %1256 = sext i32 %1255 to i64
  %1257 = getelementptr inbounds i16, i16* %64, i64 %1256
  %1258 = load i16, i16* %1257, align 2, !tbaa !393
  %1259 = insertelement <32 x i16> %1254, i16 %1258, i32 31
  %1260 = shufflevector <32 x i16> %1259, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1261 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1262 = add nsw i64 %1069, %1261
  %1263 = getelementptr inbounds i16, i16* %read_input, i64 %1262
  %1264 = getelementptr inbounds i16, i16* %1263, i64 -32
  %1265 = bitcast i16* %1264 to <16 x i16>*
  store <16 x i16> %1260, <16 x i16>* %1265, align 2, !tbaa !396
  %1266 = shufflevector <32 x i16> %1259, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1267 = getelementptr inbounds i16, i16* %1263, i64 -16
  %1268 = bitcast i16* %1267 to <16 x i16>*
  store <16 x i16> %1266, <16 x i16>* %1268, align 2, !tbaa !396
  %1269 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2770 = icmp eq i32 %1269, %t1661
  br i1 %.not2770, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3243 = add nuw nsw i64 %indvars.iv3242, 1
  %.not2769 = icmp eq i64 %indvars.iv.next3243, %561
  br i1 %.not2769, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3245 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3246, %"end for read_input.s0.x.x17" ]
  %1270 = trunc i64 %indvars.iv3245 to i32
  %a65 = add nsw i32 %t1675, %1270
  %1271 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1271, i32 %a65, i32 %b36
  %1272 = icmp sgt i32 %a64, 0
  %1273 = select i1 %1272, i32 %a64, i32 0
  %1274 = mul nsw i32 %1273, %13
  %t1679 = sub nsw i32 %1274, %9
  %1275 = insertelement <32 x i32> undef, i32 %t1679, i32 0
  %1276 = shufflevector <32 x i32> %1275, <32 x i32> undef, <32 x i32> zeroinitializer
  %1277 = add nuw nsw i64 %775, %indvars.iv3245
  %1278 = mul nsw i64 %1277, %82
  %1279 = sub i64 %1278, %83
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1280 = load i64, i64* %.fca.1.gep2376, align 8, !tbaa !387
  %cmp.i2824 = icmp ult i64 %1280, %92
  %1281 = load i8*, i8** %.fca.0.gep2375, align 8, !tbaa !389
  br i1 %cmp.i2824, label %if.then.i2827, label %pseudostack_alloc.exit2840, !prof !390

if.then.i2827:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2826 = icmp ne i8* %1281, null
  %1282 = load i64, i64* %.fca.2.gep2377, align 8
  %cmp2.i2829 = icmp ugt i64 %1282, 16384
  %or.cond2911 = and i1 %tobool1.not.i2826, %cmp2.i2829
  br i1 %or.cond2911, label %if.then3.i2831, label %if.end.i2835

if.then3.i2831:                                   ; preds = %if.then.i2827
  call void @halide_free(i8* null, i8* nonnull %1281) #16
  %.pre3473 = load i64, i64* %.fca.2.gep2377, align 8, !tbaa !391
  br label %if.end.i2835

if.end.i2835:                                     ; preds = %if.then3.i2831, %if.then.i2827
  %1283 = phi i64 [ %.pre3473, %if.then3.i2831 ], [ %1282, %if.then.i2827 ]
  %add.i2833 = add i64 %1283, %92
  store i64 %add.i2833, i64* %.fca.2.gep2377, align 8, !tbaa !391
  %cmp7.i2834 = icmp ugt i64 %add.i2833, 16384
  br i1 %cmp7.i2834, label %if.then8.i2837, label %if.end11.i2839

if.then8.i2837:                                   ; preds = %if.end.i2835
  %call.i2836 = call i8* @halide_malloc(i8* null, i64 %92) #16
  br label %if.end11.i2839

if.end11.i2839:                                   ; preds = %if.then8.i2837, %if.end.i2835
  %storemerge.i2838 = phi i8* [ %call.i2836, %if.then8.i2837 ], [ null, %if.end.i2835 ]
  store i8* %storemerge.i2838, i8** %.fca.0.gep2375, align 8, !tbaa !389
  store i64 %92, i64* %.fca.1.gep2376, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2840

pseudostack_alloc.exit2840:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2839
  %1284 = phi i8* [ %storemerge.i2838, %if.end11.i2839 ], [ %1281, %"end for read_input.s0.y.rebased14" ]
  %1285 = bitcast i8* %1284 to i16*
  %.not2692 = icmp eq i8* %1284, null
  br i1 %.not2692, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1484, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1286 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1286, %t1650
  %1287 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1287, i32 %a66, i32 %b37
  %1288 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1289 = insertelement <32 x i32> undef, i32 %1288, i32 0
  %1290 = shufflevector <32 x i32> %1289, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1290, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1291 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1292 = icmp sgt <8 x i32> %75, %1291
  %1293 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1294 = icmp sgt <8 x i32> %75, %1293
  %1295 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1296 = icmp sgt <8 x i32> %75, %1295
  %1297 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1298 = icmp sgt <8 x i32> %75, %1297
  %1299 = select <8 x i1> %1292, <8 x i32> %1291, <8 x i32> %75
  %1300 = select <8 x i1> %1294, <8 x i32> %1293, <8 x i32> %75
  %1301 = select <8 x i1> %1296, <8 x i32> %1295, <8 x i32> %75
  %1302 = select <8 x i1> %1298, <8 x i32> %1297, <8 x i32> %75
  %1303 = icmp sgt <8 x i32> %1299, %77
  %1304 = icmp sgt <8 x i32> %1300, %77
  %1305 = icmp sgt <8 x i32> %1301, %77
  %1306 = icmp sgt <8 x i32> %1302, %77
  %1307 = select <8 x i1> %1303, <8 x i32> %1299, <8 x i32> %77
  %1308 = select <8 x i1> %1304, <8 x i32> %1300, <8 x i32> %77
  %1309 = select <8 x i1> %1305, <8 x i32> %1301, <8 x i32> %77
  %1310 = select <8 x i1> %1306, <8 x i32> %1302, <8 x i32> %77
  %1311 = shufflevector <8 x i32> %1307, <8 x i32> %1308, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1312 = shufflevector <8 x i32> %1309, <8 x i32> %1310, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1313 = shufflevector <16 x i32> %1311, <16 x i32> %1312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1314 = add nsw <32 x i32> %1313, %1276
  %1315 = extractelement <32 x i32> %1314, i32 0
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds i16, i16* %64, i64 %1316
  %1318 = load i16, i16* %1317, align 2, !tbaa !393
  %1319 = insertelement <32 x i16> undef, i16 %1318, i32 0
  %1320 = extractelement <32 x i32> %1314, i32 1
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds i16, i16* %64, i64 %1321
  %1323 = load i16, i16* %1322, align 2, !tbaa !393
  %1324 = insertelement <32 x i16> %1319, i16 %1323, i32 1
  %1325 = extractelement <32 x i32> %1314, i32 2
  %1326 = sext i32 %1325 to i64
  %1327 = getelementptr inbounds i16, i16* %64, i64 %1326
  %1328 = load i16, i16* %1327, align 2, !tbaa !393
  %1329 = insertelement <32 x i16> %1324, i16 %1328, i32 2
  %1330 = extractelement <32 x i32> %1314, i32 3
  %1331 = sext i32 %1330 to i64
  %1332 = getelementptr inbounds i16, i16* %64, i64 %1331
  %1333 = load i16, i16* %1332, align 2, !tbaa !393
  %1334 = insertelement <32 x i16> %1329, i16 %1333, i32 3
  %1335 = extractelement <32 x i32> %1314, i32 4
  %1336 = sext i32 %1335 to i64
  %1337 = getelementptr inbounds i16, i16* %64, i64 %1336
  %1338 = load i16, i16* %1337, align 2, !tbaa !393
  %1339 = insertelement <32 x i16> %1334, i16 %1338, i32 4
  %1340 = extractelement <32 x i32> %1314, i32 5
  %1341 = sext i32 %1340 to i64
  %1342 = getelementptr inbounds i16, i16* %64, i64 %1341
  %1343 = load i16, i16* %1342, align 2, !tbaa !393
  %1344 = insertelement <32 x i16> %1339, i16 %1343, i32 5
  %1345 = extractelement <32 x i32> %1314, i32 6
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds i16, i16* %64, i64 %1346
  %1348 = load i16, i16* %1347, align 2, !tbaa !393
  %1349 = insertelement <32 x i16> %1344, i16 %1348, i32 6
  %1350 = extractelement <32 x i32> %1314, i32 7
  %1351 = sext i32 %1350 to i64
  %1352 = getelementptr inbounds i16, i16* %64, i64 %1351
  %1353 = load i16, i16* %1352, align 2, !tbaa !393
  %1354 = insertelement <32 x i16> %1349, i16 %1353, i32 7
  %1355 = extractelement <32 x i32> %1314, i32 8
  %1356 = sext i32 %1355 to i64
  %1357 = getelementptr inbounds i16, i16* %64, i64 %1356
  %1358 = load i16, i16* %1357, align 2, !tbaa !393
  %1359 = insertelement <32 x i16> %1354, i16 %1358, i32 8
  %1360 = extractelement <32 x i32> %1314, i32 9
  %1361 = sext i32 %1360 to i64
  %1362 = getelementptr inbounds i16, i16* %64, i64 %1361
  %1363 = load i16, i16* %1362, align 2, !tbaa !393
  %1364 = insertelement <32 x i16> %1359, i16 %1363, i32 9
  %1365 = extractelement <32 x i32> %1314, i32 10
  %1366 = sext i32 %1365 to i64
  %1367 = getelementptr inbounds i16, i16* %64, i64 %1366
  %1368 = load i16, i16* %1367, align 2, !tbaa !393
  %1369 = insertelement <32 x i16> %1364, i16 %1368, i32 10
  %1370 = extractelement <32 x i32> %1314, i32 11
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds i16, i16* %64, i64 %1371
  %1373 = load i16, i16* %1372, align 2, !tbaa !393
  %1374 = insertelement <32 x i16> %1369, i16 %1373, i32 11
  %1375 = extractelement <32 x i32> %1314, i32 12
  %1376 = sext i32 %1375 to i64
  %1377 = getelementptr inbounds i16, i16* %64, i64 %1376
  %1378 = load i16, i16* %1377, align 2, !tbaa !393
  %1379 = insertelement <32 x i16> %1374, i16 %1378, i32 12
  %1380 = extractelement <32 x i32> %1314, i32 13
  %1381 = sext i32 %1380 to i64
  %1382 = getelementptr inbounds i16, i16* %64, i64 %1381
  %1383 = load i16, i16* %1382, align 2, !tbaa !393
  %1384 = insertelement <32 x i16> %1379, i16 %1383, i32 13
  %1385 = extractelement <32 x i32> %1314, i32 14
  %1386 = sext i32 %1385 to i64
  %1387 = getelementptr inbounds i16, i16* %64, i64 %1386
  %1388 = load i16, i16* %1387, align 2, !tbaa !393
  %1389 = insertelement <32 x i16> %1384, i16 %1388, i32 14
  %1390 = extractelement <32 x i32> %1314, i32 15
  %1391 = sext i32 %1390 to i64
  %1392 = getelementptr inbounds i16, i16* %64, i64 %1391
  %1393 = load i16, i16* %1392, align 2, !tbaa !393
  %1394 = insertelement <32 x i16> %1389, i16 %1393, i32 15
  %1395 = extractelement <32 x i32> %1314, i32 16
  %1396 = sext i32 %1395 to i64
  %1397 = getelementptr inbounds i16, i16* %64, i64 %1396
  %1398 = load i16, i16* %1397, align 2, !tbaa !393
  %1399 = insertelement <32 x i16> %1394, i16 %1398, i32 16
  %1400 = extractelement <32 x i32> %1314, i32 17
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, i16* %64, i64 %1401
  %1403 = load i16, i16* %1402, align 2, !tbaa !393
  %1404 = insertelement <32 x i16> %1399, i16 %1403, i32 17
  %1405 = extractelement <32 x i32> %1314, i32 18
  %1406 = sext i32 %1405 to i64
  %1407 = getelementptr inbounds i16, i16* %64, i64 %1406
  %1408 = load i16, i16* %1407, align 2, !tbaa !393
  %1409 = insertelement <32 x i16> %1404, i16 %1408, i32 18
  %1410 = extractelement <32 x i32> %1314, i32 19
  %1411 = sext i32 %1410 to i64
  %1412 = getelementptr inbounds i16, i16* %64, i64 %1411
  %1413 = load i16, i16* %1412, align 2, !tbaa !393
  %1414 = insertelement <32 x i16> %1409, i16 %1413, i32 19
  %1415 = extractelement <32 x i32> %1314, i32 20
  %1416 = sext i32 %1415 to i64
  %1417 = getelementptr inbounds i16, i16* %64, i64 %1416
  %1418 = load i16, i16* %1417, align 2, !tbaa !393
  %1419 = insertelement <32 x i16> %1414, i16 %1418, i32 20
  %1420 = extractelement <32 x i32> %1314, i32 21
  %1421 = sext i32 %1420 to i64
  %1422 = getelementptr inbounds i16, i16* %64, i64 %1421
  %1423 = load i16, i16* %1422, align 2, !tbaa !393
  %1424 = insertelement <32 x i16> %1419, i16 %1423, i32 21
  %1425 = extractelement <32 x i32> %1314, i32 22
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i16, i16* %64, i64 %1426
  %1428 = load i16, i16* %1427, align 2, !tbaa !393
  %1429 = insertelement <32 x i16> %1424, i16 %1428, i32 22
  %1430 = extractelement <32 x i32> %1314, i32 23
  %1431 = sext i32 %1430 to i64
  %1432 = getelementptr inbounds i16, i16* %64, i64 %1431
  %1433 = load i16, i16* %1432, align 2, !tbaa !393
  %1434 = insertelement <32 x i16> %1429, i16 %1433, i32 23
  %1435 = extractelement <32 x i32> %1314, i32 24
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds i16, i16* %64, i64 %1436
  %1438 = load i16, i16* %1437, align 2, !tbaa !393
  %1439 = insertelement <32 x i16> %1434, i16 %1438, i32 24
  %1440 = extractelement <32 x i32> %1314, i32 25
  %1441 = sext i32 %1440 to i64
  %1442 = getelementptr inbounds i16, i16* %64, i64 %1441
  %1443 = load i16, i16* %1442, align 2, !tbaa !393
  %1444 = insertelement <32 x i16> %1439, i16 %1443, i32 25
  %1445 = extractelement <32 x i32> %1314, i32 26
  %1446 = sext i32 %1445 to i64
  %1447 = getelementptr inbounds i16, i16* %64, i64 %1446
  %1448 = load i16, i16* %1447, align 2, !tbaa !393
  %1449 = insertelement <32 x i16> %1444, i16 %1448, i32 26
  %1450 = extractelement <32 x i32> %1314, i32 27
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds i16, i16* %64, i64 %1451
  %1453 = load i16, i16* %1452, align 2, !tbaa !393
  %1454 = insertelement <32 x i16> %1449, i16 %1453, i32 27
  %1455 = extractelement <32 x i32> %1314, i32 28
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds i16, i16* %64, i64 %1456
  %1458 = load i16, i16* %1457, align 2, !tbaa !393
  %1459 = insertelement <32 x i16> %1454, i16 %1458, i32 28
  %1460 = extractelement <32 x i32> %1314, i32 29
  %1461 = sext i32 %1460 to i64
  %1462 = getelementptr inbounds i16, i16* %64, i64 %1461
  %1463 = load i16, i16* %1462, align 2, !tbaa !393
  %1464 = insertelement <32 x i16> %1459, i16 %1463, i32 29
  %1465 = extractelement <32 x i32> %1314, i32 30
  %1466 = sext i32 %1465 to i64
  %1467 = getelementptr inbounds i16, i16* %64, i64 %1466
  %1468 = load i16, i16* %1467, align 2, !tbaa !393
  %1469 = insertelement <32 x i16> %1464, i16 %1468, i32 30
  %1470 = extractelement <32 x i32> %1314, i32 31
  %1471 = sext i32 %1470 to i64
  %1472 = getelementptr inbounds i16, i16* %64, i64 %1471
  %1473 = load i16, i16* %1472, align 2, !tbaa !393
  %1474 = insertelement <32 x i16> %1469, i16 %1473, i32 31
  %1475 = shufflevector <32 x i16> %1474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1476 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1477 = add nsw i64 %1279, %1476
  %1478 = getelementptr inbounds i16, i16* %read_input, i64 %1477
  %1479 = getelementptr inbounds i16, i16* %1478, i64 -32
  %1480 = bitcast i16* %1479 to <16 x i16>*
  store <16 x i16> %1475, <16 x i16>* %1480, align 2, !tbaa !396
  %1481 = shufflevector <32 x i16> %1474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1482 = getelementptr inbounds i16, i16* %1478, i64 -16
  %1483 = bitcast i16* %1482 to <16 x i16>*
  store <16 x i16> %1481, <16 x i16>* %1483, align 2, !tbaa !396
  %1484 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2768 = icmp eq i32 %1484, %20
  br i1 %.not2768, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3246 = add nuw nsw i64 %indvars.iv3245, 1
  %.not2767 = icmp eq i64 %indvars.iv3245, %776
  br i1 %.not2767, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2840
  %1485 = alloca i8*, i64 %92, align 32
  %1486 = bitcast i8** %1485 to i16*
  store i8** %1485, i8*** %93, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2840, %then_bb21
  %blur_x = phi i16* [ %1486, %then_bb21 ], [ %1285, %pseudostack_alloc.exit2840 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3476 = and i32 %a26, 7
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3476, %"consume read_input.after_bb22_crit_edge" ], [ %1533, %"produce blur_x" ]
  %1487 = mul nsw i32 %.pre-phi, %a73
  %t1682 = sub nsw i32 %1487, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1488 = sext i32 %t1682 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1489 = getelementptr inbounds i16, i16* %read_input, i64 %94
  %1490 = getelementptr inbounds i16, i16* %1489, i64 -31
  %1491 = bitcast i16* %1490 to <16 x i16>*
  %1492 = load <16 x i16>, <16 x i16>* %1491, align 2, !tbaa !396
  %1493 = getelementptr inbounds i16, i16* %1489, i64 -15
  %1494 = bitcast i16* %1493 to <16 x i16>*
  %1495 = load <16 x i16>, <16 x i16>* %1494, align 2, !tbaa !396
  %1496 = getelementptr inbounds i16, i16* %1489, i64 -32
  %1497 = bitcast i16* %1496 to <16 x i16>*
  %1498 = load <16 x i16>, <16 x i16>* %1497, align 2, !tbaa !396
  %1499 = getelementptr inbounds i16, i16* %1489, i64 -16
  %1500 = bitcast i16* %1499 to <16 x i16>*
  %1501 = load <16 x i16>, <16 x i16>* %1500, align 2, !tbaa !396
  %1502 = getelementptr inbounds i16, i16* %1489, i64 -30
  %1503 = bitcast i16* %1502 to <16 x i16>*
  %1504 = load <16 x i16>, <16 x i16>* %1503, align 2, !tbaa !396
  %1505 = getelementptr inbounds i16, i16* %1489, i64 -14
  %1506 = bitcast i16* %1505 to <16 x i16>*
  %1507 = load <16 x i16>, <16 x i16>* %1506, align 2, !tbaa !396
  %1508 = getelementptr inbounds i16, i16* %1489, i64 -28
  %1509 = bitcast i16* %1508 to <16 x i16>*
  %1510 = load <16 x i16>, <16 x i16>* %1509, align 2, !tbaa !396
  %1511 = getelementptr inbounds i16, i16* %1489, i64 -12
  %1512 = bitcast i16* %1511 to <16 x i16>*
  %1513 = load <16 x i16>, <16 x i16>* %1512, align 2, !tbaa !396
  %1514 = getelementptr inbounds i16, i16* %1489, i64 -29
  %1515 = bitcast i16* %1514 to <16 x i16>*
  %1516 = load <16 x i16>, <16 x i16>* %1515, align 2, !tbaa !396
  %1517 = getelementptr inbounds i16, i16* %1489, i64 -13
  %1518 = bitcast i16* %1517 to <16 x i16>*
  %1519 = load <16 x i16>, <16 x i16>* %1518, align 2, !tbaa !396
  %1520 = add <16 x i16> %1498, %1492
  %1521 = add <16 x i16> %1520, %1504
  %1522 = add <16 x i16> %1521, %1510
  %1523 = add <16 x i16> %1522, %1516
  %1524 = add <16 x i16> %1501, %1495
  %1525 = add <16 x i16> %1524, %1507
  %1526 = add <16 x i16> %1525, %1513
  %1527 = add <16 x i16> %1526, %1519
  %1528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1523, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1529 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1527, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1530 = shufflevector <16 x i16> %1528, <16 x i16> %1529, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1531 = lshr <32 x i16> %1530, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1532 = shufflevector <32 x i16> %1531, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1533 = and i32 %a26, 7
  %1534 = zext i32 %1533 to i64
  %1535 = mul nsw i64 %97, %1534
  %1536 = add nsw i64 %99, %1535
  %1537 = getelementptr inbounds i16, i16* %blur_x, i64 %1536
  %1538 = getelementptr inbounds i16, i16* %1537, i64 -32
  %1539 = bitcast i16* %1538 to <16 x i16>*
  store <16 x i16> %1532, <16 x i16>* %1539, align 2, !tbaa !399
  %1540 = shufflevector <32 x i16> %1531, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1541 = getelementptr inbounds i16, i16* %1537, i64 -16
  %1542 = bitcast i16* %1541 to <16 x i16>*
  store <16 x i16> %1540, <16 x i16>* %1542, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3247 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3248, %after_bb24 ]
  %1543 = add nsw i64 %indvars.iv3247, %101
  %1544 = icmp slt i64 %1543, 1
  %1545 = trunc i64 %1543 to i32
  %1546 = shl nsw i32 %1545, 5
  %1547 = icmp sgt i32 %4, %1546
  %1548 = or i1 %1544, %1547
  br i1 %1548, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %102, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1549 = sext i32 %t1682 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3248 = add nuw nsw i64 %indvars.iv3247, 1
  %.not2765 = icmp eq i64 %indvars.iv.next3248, %184
  br i1 %.not2765, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t684 = sub i32 %1546, %t1645
  %1550 = sext i32 %t684 to i64
  %1551 = getelementptr inbounds i16, i16* %read_input, i64 %1550
  %1552 = getelementptr inbounds i16, i16* %1551, i64 1
  %1553 = bitcast i16* %1552 to <16 x i16>*
  %1554 = load <16 x i16>, <16 x i16>* %1553, align 2, !tbaa !396
  %1555 = getelementptr inbounds i16, i16* %1551, i64 17
  %1556 = bitcast i16* %1555 to <16 x i16>*
  %1557 = load <16 x i16>, <16 x i16>* %1556, align 2, !tbaa !396
  %1558 = bitcast i16* %1551 to <16 x i16>*
  %1559 = load <16 x i16>, <16 x i16>* %1558, align 2, !tbaa !396
  %1560 = getelementptr inbounds i16, i16* %1551, i64 16
  %1561 = bitcast i16* %1560 to <16 x i16>*
  %1562 = load <16 x i16>, <16 x i16>* %1561, align 2, !tbaa !396
  %1563 = getelementptr inbounds i16, i16* %1551, i64 2
  %1564 = bitcast i16* %1563 to <16 x i16>*
  %1565 = load <16 x i16>, <16 x i16>* %1564, align 2, !tbaa !396
  %1566 = getelementptr inbounds i16, i16* %1551, i64 18
  %1567 = bitcast i16* %1566 to <16 x i16>*
  %1568 = load <16 x i16>, <16 x i16>* %1567, align 2, !tbaa !396
  %1569 = getelementptr inbounds i16, i16* %1551, i64 4
  %1570 = bitcast i16* %1569 to <16 x i16>*
  %1571 = load <16 x i16>, <16 x i16>* %1570, align 2, !tbaa !396
  %1572 = getelementptr inbounds i16, i16* %1551, i64 20
  %1573 = bitcast i16* %1572 to <16 x i16>*
  %1574 = load <16 x i16>, <16 x i16>* %1573, align 2, !tbaa !396
  %1575 = getelementptr inbounds i16, i16* %1551, i64 3
  %1576 = bitcast i16* %1575 to <16 x i16>*
  %1577 = load <16 x i16>, <16 x i16>* %1576, align 2, !tbaa !396
  %1578 = getelementptr inbounds i16, i16* %1551, i64 19
  %1579 = bitcast i16* %1578 to <16 x i16>*
  %1580 = load <16 x i16>, <16 x i16>* %1579, align 2, !tbaa !396
  %1581 = add <16 x i16> %1559, %1554
  %1582 = add <16 x i16> %1581, %1565
  %1583 = add <16 x i16> %1582, %1571
  %1584 = add <16 x i16> %1583, %1577
  %1585 = add <16 x i16> %1562, %1557
  %1586 = add <16 x i16> %1585, %1568
  %1587 = add <16 x i16> %1586, %1574
  %1588 = add <16 x i16> %1587, %1580
  %1589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1584, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1588, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1591 = shufflevector <16 x i16> %1589, <16 x i16> %1590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1592 = lshr <32 x i16> %1591, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1593 = shufflevector <32 x i16> %1592, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1594 = shl nsw i64 %1543, 5
  %1595 = add nsw i64 %1594, %1488
  %1596 = getelementptr inbounds i16, i16* %blur_x, i64 %1595
  %1597 = bitcast i16* %1596 to <16 x i16>*
  store <16 x i16> %1593, <16 x i16>* %1597, align 2, !tbaa !399
  %1598 = shufflevector <32 x i16> %1592, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1599 = getelementptr inbounds i16, i16* %1596, i64 16
  %1600 = bitcast i16* %1599 to <16 x i16>*
  store <16 x i16> %1598, <16 x i16>* %1600, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1605, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2219 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1626
  %1601 = icmp slt i32 %t2219, 1
  %1602 = shl nsw i32 %t2219, 5
  %1603 = icmp sgt i32 %4, %1602
  %1604 = or i1 %1601, %1603
  br i1 %1604, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3477 = add nsw i32 %a26, 1
  %.pre3479 = and i32 %.pre3477, 7
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1605 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2764 = icmp eq i32 %1605, %t1683
  br i1 %.not2764, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1606 = icmp sgt i32 %a14, %1602
  %b83 = select i1 %1606, i32 %1602, i32 %a14
  %1607 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1607, i32 %b83, i32 %4
  %t686 = sub i32 %blur_x.s0.x.v1.base.s, %t1645
  %1608 = sext i32 %t686 to i64
  %1609 = getelementptr inbounds i16, i16* %read_input, i64 %1608
  %1610 = getelementptr inbounds i16, i16* %1609, i64 1
  %1611 = bitcast i16* %1610 to <16 x i16>*
  %1612 = load <16 x i16>, <16 x i16>* %1611, align 2, !tbaa !396
  %1613 = getelementptr inbounds i16, i16* %1609, i64 17
  %1614 = bitcast i16* %1613 to <16 x i16>*
  %1615 = load <16 x i16>, <16 x i16>* %1614, align 2, !tbaa !396
  %1616 = bitcast i16* %1609 to <16 x i16>*
  %1617 = load <16 x i16>, <16 x i16>* %1616, align 2, !tbaa !396
  %1618 = getelementptr inbounds i16, i16* %1609, i64 16
  %1619 = bitcast i16* %1618 to <16 x i16>*
  %1620 = load <16 x i16>, <16 x i16>* %1619, align 2, !tbaa !396
  %1621 = getelementptr inbounds i16, i16* %1609, i64 2
  %1622 = bitcast i16* %1621 to <16 x i16>*
  %1623 = load <16 x i16>, <16 x i16>* %1622, align 2, !tbaa !396
  %1624 = getelementptr inbounds i16, i16* %1609, i64 18
  %1625 = bitcast i16* %1624 to <16 x i16>*
  %1626 = load <16 x i16>, <16 x i16>* %1625, align 2, !tbaa !396
  %1627 = getelementptr inbounds i16, i16* %1609, i64 4
  %1628 = bitcast i16* %1627 to <16 x i16>*
  %1629 = load <16 x i16>, <16 x i16>* %1628, align 2, !tbaa !396
  %1630 = getelementptr inbounds i16, i16* %1609, i64 20
  %1631 = bitcast i16* %1630 to <16 x i16>*
  %1632 = load <16 x i16>, <16 x i16>* %1631, align 2, !tbaa !396
  %1633 = getelementptr inbounds i16, i16* %1609, i64 3
  %1634 = bitcast i16* %1633 to <16 x i16>*
  %1635 = load <16 x i16>, <16 x i16>* %1634, align 2, !tbaa !396
  %1636 = getelementptr inbounds i16, i16* %1609, i64 19
  %1637 = bitcast i16* %1636 to <16 x i16>*
  %1638 = load <16 x i16>, <16 x i16>* %1637, align 2, !tbaa !396
  %1639 = add <16 x i16> %1617, %1612
  %1640 = add <16 x i16> %1639, %1623
  %1641 = add <16 x i16> %1640, %1629
  %1642 = add <16 x i16> %1641, %1635
  %1643 = add <16 x i16> %1620, %1615
  %1644 = add <16 x i16> %1643, %1626
  %1645 = add <16 x i16> %1644, %1632
  %1646 = add <16 x i16> %1645, %1638
  %1647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1642, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1648 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1646, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1649 = shufflevector <16 x i16> %1647, <16 x i16> %1648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1650 = lshr <32 x i16> %1649, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1651 = shufflevector <32 x i16> %1650, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1652 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1653 = add nsw i64 %1652, %1549
  %1654 = getelementptr inbounds i16, i16* %blur_x, i64 %1653
  %1655 = bitcast i16* %1654 to <16 x i16>*
  store <16 x i16> %1651, <16 x i16>* %1655, align 2, !tbaa !399
  %1656 = shufflevector <32 x i16> %1650, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1657 = getelementptr inbounds i16, i16* %1654, i64 16
  %1658 = bitcast i16* %1657 to <16 x i16>*
  store <16 x i16> %1656, <16 x i16>* %1658, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3480 = phi i32 [ %.pre3479, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1706, %"produce blur_x38" ]
  %1659 = mul nsw i32 %.pre-phi3480, %a73
  %t1688 = sub nsw i32 %1659, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1660 = sext i32 %t1688 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1661 = getelementptr inbounds i16, i16* %read_input, i64 %103
  %1662 = getelementptr inbounds i16, i16* %1661, i64 -31
  %1663 = bitcast i16* %1662 to <16 x i16>*
  %1664 = load <16 x i16>, <16 x i16>* %1663, align 2, !tbaa !396
  %1665 = getelementptr inbounds i16, i16* %1661, i64 -15
  %1666 = bitcast i16* %1665 to <16 x i16>*
  %1667 = load <16 x i16>, <16 x i16>* %1666, align 2, !tbaa !396
  %1668 = getelementptr inbounds i16, i16* %1661, i64 -32
  %1669 = bitcast i16* %1668 to <16 x i16>*
  %1670 = load <16 x i16>, <16 x i16>* %1669, align 2, !tbaa !396
  %1671 = getelementptr inbounds i16, i16* %1661, i64 -16
  %1672 = bitcast i16* %1671 to <16 x i16>*
  %1673 = load <16 x i16>, <16 x i16>* %1672, align 2, !tbaa !396
  %1674 = getelementptr inbounds i16, i16* %1661, i64 -30
  %1675 = bitcast i16* %1674 to <16 x i16>*
  %1676 = load <16 x i16>, <16 x i16>* %1675, align 2, !tbaa !396
  %1677 = getelementptr inbounds i16, i16* %1661, i64 -14
  %1678 = bitcast i16* %1677 to <16 x i16>*
  %1679 = load <16 x i16>, <16 x i16>* %1678, align 2, !tbaa !396
  %1680 = getelementptr inbounds i16, i16* %1661, i64 -28
  %1681 = bitcast i16* %1680 to <16 x i16>*
  %1682 = load <16 x i16>, <16 x i16>* %1681, align 2, !tbaa !396
  %1683 = getelementptr inbounds i16, i16* %1661, i64 -12
  %1684 = bitcast i16* %1683 to <16 x i16>*
  %1685 = load <16 x i16>, <16 x i16>* %1684, align 2, !tbaa !396
  %1686 = getelementptr inbounds i16, i16* %1661, i64 -29
  %1687 = bitcast i16* %1686 to <16 x i16>*
  %1688 = load <16 x i16>, <16 x i16>* %1687, align 2, !tbaa !396
  %1689 = getelementptr inbounds i16, i16* %1661, i64 -13
  %1690 = bitcast i16* %1689 to <16 x i16>*
  %1691 = load <16 x i16>, <16 x i16>* %1690, align 2, !tbaa !396
  %1692 = add <16 x i16> %1670, %1664
  %1693 = add <16 x i16> %1692, %1676
  %1694 = add <16 x i16> %1693, %1682
  %1695 = add <16 x i16> %1694, %1688
  %1696 = add <16 x i16> %1673, %1667
  %1697 = add <16 x i16> %1696, %1679
  %1698 = add <16 x i16> %1697, %1685
  %1699 = add <16 x i16> %1698, %1691
  %1700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1695, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1699, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1702 = shufflevector <16 x i16> %1700, <16 x i16> %1701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1703 = lshr <32 x i16> %1702, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1704 = shufflevector <32 x i16> %1703, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1705 = add nsw i32 %a26, 1
  %1706 = and i32 %1705, 7
  %1707 = zext i32 %1706 to i64
  %1708 = mul nsw i64 %97, %1707
  %1709 = add nsw i64 %99, %1708
  %1710 = getelementptr inbounds i16, i16* %blur_x, i64 %1709
  %1711 = getelementptr inbounds i16, i16* %1710, i64 -32
  %1712 = bitcast i16* %1711 to <16 x i16>*
  store <16 x i16> %1704, <16 x i16>* %1712, align 2, !tbaa !399
  %1713 = shufflevector <32 x i16> %1703, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1714 = getelementptr inbounds i16, i16* %1710, i64 -16
  %1715 = bitcast i16* %1714 to <16 x i16>*
  store <16 x i16> %1713, <16 x i16>* %1715, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3250 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3251, %after_bb42 ]
  %1716 = add nsw i64 %indvars.iv3250, %101
  %1717 = icmp slt i64 %1716, 1
  %1718 = trunc i64 %1716 to i32
  %1719 = shl nsw i32 %1718, 5
  %1720 = icmp sgt i32 %4, %1719
  %1721 = or i1 %1717, %1720
  br i1 %1721, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %102, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1722 = sext i32 %t1688 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3251 = add nuw nsw i64 %indvars.iv3250, 1
  %.not2763 = icmp eq i64 %indvars.iv.next3251, %184
  br i1 %.not2763, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t690 = add nsw i32 %1719, %t1687
  %1723 = sext i32 %t690 to i64
  %1724 = getelementptr inbounds i16, i16* %read_input, i64 %1723
  %1725 = getelementptr inbounds i16, i16* %1724, i64 1
  %1726 = bitcast i16* %1725 to <16 x i16>*
  %1727 = load <16 x i16>, <16 x i16>* %1726, align 2, !tbaa !396
  %1728 = getelementptr inbounds i16, i16* %1724, i64 17
  %1729 = bitcast i16* %1728 to <16 x i16>*
  %1730 = load <16 x i16>, <16 x i16>* %1729, align 2, !tbaa !396
  %1731 = bitcast i16* %1724 to <16 x i16>*
  %1732 = load <16 x i16>, <16 x i16>* %1731, align 2, !tbaa !396
  %1733 = getelementptr inbounds i16, i16* %1724, i64 16
  %1734 = bitcast i16* %1733 to <16 x i16>*
  %1735 = load <16 x i16>, <16 x i16>* %1734, align 2, !tbaa !396
  %1736 = getelementptr inbounds i16, i16* %1724, i64 2
  %1737 = bitcast i16* %1736 to <16 x i16>*
  %1738 = load <16 x i16>, <16 x i16>* %1737, align 2, !tbaa !396
  %1739 = getelementptr inbounds i16, i16* %1724, i64 18
  %1740 = bitcast i16* %1739 to <16 x i16>*
  %1741 = load <16 x i16>, <16 x i16>* %1740, align 2, !tbaa !396
  %1742 = getelementptr inbounds i16, i16* %1724, i64 4
  %1743 = bitcast i16* %1742 to <16 x i16>*
  %1744 = load <16 x i16>, <16 x i16>* %1743, align 2, !tbaa !396
  %1745 = getelementptr inbounds i16, i16* %1724, i64 20
  %1746 = bitcast i16* %1745 to <16 x i16>*
  %1747 = load <16 x i16>, <16 x i16>* %1746, align 2, !tbaa !396
  %1748 = getelementptr inbounds i16, i16* %1724, i64 3
  %1749 = bitcast i16* %1748 to <16 x i16>*
  %1750 = load <16 x i16>, <16 x i16>* %1749, align 2, !tbaa !396
  %1751 = getelementptr inbounds i16, i16* %1724, i64 19
  %1752 = bitcast i16* %1751 to <16 x i16>*
  %1753 = load <16 x i16>, <16 x i16>* %1752, align 2, !tbaa !396
  %1754 = add <16 x i16> %1732, %1727
  %1755 = add <16 x i16> %1754, %1738
  %1756 = add <16 x i16> %1755, %1744
  %1757 = add <16 x i16> %1756, %1750
  %1758 = add <16 x i16> %1735, %1730
  %1759 = add <16 x i16> %1758, %1741
  %1760 = add <16 x i16> %1759, %1747
  %1761 = add <16 x i16> %1760, %1753
  %1762 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1757, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1763 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1761, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1764 = shufflevector <16 x i16> %1762, <16 x i16> %1763, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1765 = lshr <32 x i16> %1764, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1766 = shufflevector <32 x i16> %1765, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1767 = shl nsw i64 %1716, 5
  %1768 = add nsw i64 %1767, %1660
  %1769 = getelementptr inbounds i16, i16* %blur_x, i64 %1768
  %1770 = bitcast i16* %1769 to <16 x i16>*
  store <16 x i16> %1766, <16 x i16>* %1770, align 2, !tbaa !399
  %1771 = shufflevector <32 x i16> %1765, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1772 = getelementptr inbounds i16, i16* %1769, i64 16
  %1773 = bitcast i16* %1772 to <16 x i16>*
  store <16 x i16> %1771, <16 x i16>* %1773, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1778, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2221 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1626
  %1774 = icmp slt i32 %t2221, 1
  %1775 = shl nsw i32 %t2221, 5
  %1776 = icmp sgt i32 %4, %1775
  %1777 = or i1 %1774, %1776
  br i1 %1777, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3481 = add nsw i32 %a26, 2
  %.pre3483 = and i32 %.pre3481, 7
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1778 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2762 = icmp eq i32 %1778, %t1683
  br i1 %.not2762, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1779 = icmp sgt i32 %a14, %1775
  %b90 = select i1 %1779, i32 %1775, i32 %a14
  %1780 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1780, i32 %b90, i32 %4
  %t692 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1687
  %1781 = sext i32 %t692 to i64
  %1782 = getelementptr inbounds i16, i16* %read_input, i64 %1781
  %1783 = getelementptr inbounds i16, i16* %1782, i64 1
  %1784 = bitcast i16* %1783 to <16 x i16>*
  %1785 = load <16 x i16>, <16 x i16>* %1784, align 2, !tbaa !396
  %1786 = getelementptr inbounds i16, i16* %1782, i64 17
  %1787 = bitcast i16* %1786 to <16 x i16>*
  %1788 = load <16 x i16>, <16 x i16>* %1787, align 2, !tbaa !396
  %1789 = bitcast i16* %1782 to <16 x i16>*
  %1790 = load <16 x i16>, <16 x i16>* %1789, align 2, !tbaa !396
  %1791 = getelementptr inbounds i16, i16* %1782, i64 16
  %1792 = bitcast i16* %1791 to <16 x i16>*
  %1793 = load <16 x i16>, <16 x i16>* %1792, align 2, !tbaa !396
  %1794 = getelementptr inbounds i16, i16* %1782, i64 2
  %1795 = bitcast i16* %1794 to <16 x i16>*
  %1796 = load <16 x i16>, <16 x i16>* %1795, align 2, !tbaa !396
  %1797 = getelementptr inbounds i16, i16* %1782, i64 18
  %1798 = bitcast i16* %1797 to <16 x i16>*
  %1799 = load <16 x i16>, <16 x i16>* %1798, align 2, !tbaa !396
  %1800 = getelementptr inbounds i16, i16* %1782, i64 4
  %1801 = bitcast i16* %1800 to <16 x i16>*
  %1802 = load <16 x i16>, <16 x i16>* %1801, align 2, !tbaa !396
  %1803 = getelementptr inbounds i16, i16* %1782, i64 20
  %1804 = bitcast i16* %1803 to <16 x i16>*
  %1805 = load <16 x i16>, <16 x i16>* %1804, align 2, !tbaa !396
  %1806 = getelementptr inbounds i16, i16* %1782, i64 3
  %1807 = bitcast i16* %1806 to <16 x i16>*
  %1808 = load <16 x i16>, <16 x i16>* %1807, align 2, !tbaa !396
  %1809 = getelementptr inbounds i16, i16* %1782, i64 19
  %1810 = bitcast i16* %1809 to <16 x i16>*
  %1811 = load <16 x i16>, <16 x i16>* %1810, align 2, !tbaa !396
  %1812 = add <16 x i16> %1790, %1785
  %1813 = add <16 x i16> %1812, %1796
  %1814 = add <16 x i16> %1813, %1802
  %1815 = add <16 x i16> %1814, %1808
  %1816 = add <16 x i16> %1793, %1788
  %1817 = add <16 x i16> %1816, %1799
  %1818 = add <16 x i16> %1817, %1805
  %1819 = add <16 x i16> %1818, %1811
  %1820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1815, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1819, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1822 = shufflevector <16 x i16> %1820, <16 x i16> %1821, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1823 = lshr <32 x i16> %1822, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1824 = shufflevector <32 x i16> %1823, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1825 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1826 = add nsw i64 %1825, %1722
  %1827 = getelementptr inbounds i16, i16* %blur_x, i64 %1826
  %1828 = bitcast i16* %1827 to <16 x i16>*
  store <16 x i16> %1824, <16 x i16>* %1828, align 2, !tbaa !399
  %1829 = shufflevector <32 x i16> %1823, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1830 = getelementptr inbounds i16, i16* %1827, i64 16
  %1831 = bitcast i16* %1830 to <16 x i16>*
  store <16 x i16> %1829, <16 x i16>* %1831, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3484 = phi i32 [ %.pre3483, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1879, %"produce blur_x57" ]
  %1832 = mul nsw i32 %.pre-phi3484, %a73
  %t1694 = sub nsw i32 %1832, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1833 = sext i32 %t1694 to i64
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1834 = getelementptr inbounds i16, i16* %read_input, i64 %105
  %1835 = getelementptr inbounds i16, i16* %1834, i64 -31
  %1836 = bitcast i16* %1835 to <16 x i16>*
  %1837 = load <16 x i16>, <16 x i16>* %1836, align 2, !tbaa !396
  %1838 = getelementptr inbounds i16, i16* %1834, i64 -15
  %1839 = bitcast i16* %1838 to <16 x i16>*
  %1840 = load <16 x i16>, <16 x i16>* %1839, align 2, !tbaa !396
  %1841 = getelementptr inbounds i16, i16* %1834, i64 -32
  %1842 = bitcast i16* %1841 to <16 x i16>*
  %1843 = load <16 x i16>, <16 x i16>* %1842, align 2, !tbaa !396
  %1844 = getelementptr inbounds i16, i16* %1834, i64 -16
  %1845 = bitcast i16* %1844 to <16 x i16>*
  %1846 = load <16 x i16>, <16 x i16>* %1845, align 2, !tbaa !396
  %1847 = getelementptr inbounds i16, i16* %1834, i64 -30
  %1848 = bitcast i16* %1847 to <16 x i16>*
  %1849 = load <16 x i16>, <16 x i16>* %1848, align 2, !tbaa !396
  %1850 = getelementptr inbounds i16, i16* %1834, i64 -14
  %1851 = bitcast i16* %1850 to <16 x i16>*
  %1852 = load <16 x i16>, <16 x i16>* %1851, align 2, !tbaa !396
  %1853 = getelementptr inbounds i16, i16* %1834, i64 -28
  %1854 = bitcast i16* %1853 to <16 x i16>*
  %1855 = load <16 x i16>, <16 x i16>* %1854, align 2, !tbaa !396
  %1856 = getelementptr inbounds i16, i16* %1834, i64 -12
  %1857 = bitcast i16* %1856 to <16 x i16>*
  %1858 = load <16 x i16>, <16 x i16>* %1857, align 2, !tbaa !396
  %1859 = getelementptr inbounds i16, i16* %1834, i64 -29
  %1860 = bitcast i16* %1859 to <16 x i16>*
  %1861 = load <16 x i16>, <16 x i16>* %1860, align 2, !tbaa !396
  %1862 = getelementptr inbounds i16, i16* %1834, i64 -13
  %1863 = bitcast i16* %1862 to <16 x i16>*
  %1864 = load <16 x i16>, <16 x i16>* %1863, align 2, !tbaa !396
  %1865 = add <16 x i16> %1843, %1837
  %1866 = add <16 x i16> %1865, %1849
  %1867 = add <16 x i16> %1866, %1855
  %1868 = add <16 x i16> %1867, %1861
  %1869 = add <16 x i16> %1846, %1840
  %1870 = add <16 x i16> %1869, %1852
  %1871 = add <16 x i16> %1870, %1858
  %1872 = add <16 x i16> %1871, %1864
  %1873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1868, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1872, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1875 = shufflevector <16 x i16> %1873, <16 x i16> %1874, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1876 = lshr <32 x i16> %1875, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1877 = shufflevector <32 x i16> %1876, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1878 = add nsw i32 %a26, 2
  %1879 = and i32 %1878, 7
  %1880 = zext i32 %1879 to i64
  %1881 = mul nsw i64 %97, %1880
  %1882 = add nsw i64 %99, %1881
  %1883 = getelementptr inbounds i16, i16* %blur_x, i64 %1882
  %1884 = getelementptr inbounds i16, i16* %1883, i64 -32
  %1885 = bitcast i16* %1884 to <16 x i16>*
  store <16 x i16> %1877, <16 x i16>* %1885, align 2, !tbaa !399
  %1886 = shufflevector <32 x i16> %1876, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1887 = getelementptr inbounds i16, i16* %1883, i64 -16
  %1888 = bitcast i16* %1887 to <16 x i16>*
  store <16 x i16> %1886, <16 x i16>* %1888, align 2, !tbaa !399
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %after_bb61
  %indvars.iv3253 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3254, %after_bb61 ]
  %1889 = add nsw i64 %indvars.iv3253, %101
  %1890 = icmp slt i64 %1889, 1
  %1891 = trunc i64 %1889 to i32
  %1892 = shl nsw i32 %1891, 5
  %1893 = icmp sgt i32 %4, %1892
  %1894 = or i1 %1890, %1893
  br i1 %1894, label %"produce blur_x64", label %after_bb61

"end for blur_y.s0.x.x.rebased59":                ; preds = %after_bb61, %after_bb54
  br i1 %102, label %"for blur_y.s0.x.x.rebased65.preheader", label %"end for blur_y.s0.x.x.rebased66", !prof !386

"for blur_y.s0.x.x.rebased65.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1895 = sext i32 %t1694 to i64
  br label %"for blur_y.s0.x.x.rebased65"

after_bb61:                                       ; preds = %"for blur_y.s0.x.x.rebased58", %"produce blur_x64"
  %indvars.iv.next3254 = add nuw nsw i64 %indvars.iv3253, 1
  %.not2761 = icmp eq i64 %indvars.iv.next3254, %184
  br i1 %.not2761, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t696 = add nsw i32 %1892, %t1693
  %1896 = sext i32 %t696 to i64
  %1897 = getelementptr inbounds i16, i16* %read_input, i64 %1896
  %1898 = getelementptr inbounds i16, i16* %1897, i64 1
  %1899 = bitcast i16* %1898 to <16 x i16>*
  %1900 = load <16 x i16>, <16 x i16>* %1899, align 2, !tbaa !396
  %1901 = getelementptr inbounds i16, i16* %1897, i64 17
  %1902 = bitcast i16* %1901 to <16 x i16>*
  %1903 = load <16 x i16>, <16 x i16>* %1902, align 2, !tbaa !396
  %1904 = bitcast i16* %1897 to <16 x i16>*
  %1905 = load <16 x i16>, <16 x i16>* %1904, align 2, !tbaa !396
  %1906 = getelementptr inbounds i16, i16* %1897, i64 16
  %1907 = bitcast i16* %1906 to <16 x i16>*
  %1908 = load <16 x i16>, <16 x i16>* %1907, align 2, !tbaa !396
  %1909 = getelementptr inbounds i16, i16* %1897, i64 2
  %1910 = bitcast i16* %1909 to <16 x i16>*
  %1911 = load <16 x i16>, <16 x i16>* %1910, align 2, !tbaa !396
  %1912 = getelementptr inbounds i16, i16* %1897, i64 18
  %1913 = bitcast i16* %1912 to <16 x i16>*
  %1914 = load <16 x i16>, <16 x i16>* %1913, align 2, !tbaa !396
  %1915 = getelementptr inbounds i16, i16* %1897, i64 4
  %1916 = bitcast i16* %1915 to <16 x i16>*
  %1917 = load <16 x i16>, <16 x i16>* %1916, align 2, !tbaa !396
  %1918 = getelementptr inbounds i16, i16* %1897, i64 20
  %1919 = bitcast i16* %1918 to <16 x i16>*
  %1920 = load <16 x i16>, <16 x i16>* %1919, align 2, !tbaa !396
  %1921 = getelementptr inbounds i16, i16* %1897, i64 3
  %1922 = bitcast i16* %1921 to <16 x i16>*
  %1923 = load <16 x i16>, <16 x i16>* %1922, align 2, !tbaa !396
  %1924 = getelementptr inbounds i16, i16* %1897, i64 19
  %1925 = bitcast i16* %1924 to <16 x i16>*
  %1926 = load <16 x i16>, <16 x i16>* %1925, align 2, !tbaa !396
  %1927 = add <16 x i16> %1905, %1900
  %1928 = add <16 x i16> %1927, %1911
  %1929 = add <16 x i16> %1928, %1917
  %1930 = add <16 x i16> %1929, %1923
  %1931 = add <16 x i16> %1908, %1903
  %1932 = add <16 x i16> %1931, %1914
  %1933 = add <16 x i16> %1932, %1920
  %1934 = add <16 x i16> %1933, %1926
  %1935 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1930, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1936 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1934, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1937 = shufflevector <16 x i16> %1935, <16 x i16> %1936, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1938 = lshr <32 x i16> %1937, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1939 = shufflevector <32 x i16> %1938, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1940 = shl nsw i64 %1889, 5
  %1941 = add nsw i64 %1940, %1833
  %1942 = getelementptr inbounds i16, i16* %blur_x, i64 %1941
  %1943 = bitcast i16* %1942 to <16 x i16>*
  store <16 x i16> %1939, <16 x i16>* %1943, align 2, !tbaa !399
  %1944 = shufflevector <32 x i16> %1938, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1945 = getelementptr inbounds i16, i16* %1942, i64 16
  %1946 = bitcast i16* %1945 to <16 x i16>*
  store <16 x i16> %1944, <16 x i16>* %1946, align 2, !tbaa !399
  br label %after_bb61

"for blur_y.s0.x.x.rebased65":                    ; preds = %"for blur_y.s0.x.x.rebased65.preheader", %after_bb68
  %blur_y.s0.x.x.rebased67 = phi i32 [ %1951, %after_bb68 ], [ 0, %"for blur_y.s0.x.x.rebased65.preheader" ]
  %t2223 = add nsw i32 %blur_y.s0.x.x.rebased67, %t1626
  %1947 = icmp slt i32 %t2223, 1
  %1948 = shl nsw i32 %t2223, 5
  %1949 = icmp sgt i32 %4, %1948
  %1950 = or i1 %1947, %1949
  br i1 %1950, label %then_bb69, label %after_bb68

"end for blur_y.s0.x.x.rebased66":                ; preds = %after_bb68, %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x76", label %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge"

"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased66"
  %.pre3485 = add nsw i32 %a26, 3
  %.pre3487 = and i32 %.pre3485, 7
  br label %after_bb73

after_bb68:                                       ; preds = %"for blur_y.s0.x.x.rebased65", %then_bb69
  %1951 = add nuw nsw i32 %blur_y.s0.x.x.rebased67, 1
  %.not2760 = icmp eq i32 %1951, %t1683
  br i1 %.not2760, label %"end for blur_y.s0.x.x.rebased66", label %"for blur_y.s0.x.x.rebased65"

then_bb69:                                        ; preds = %"for blur_y.s0.x.x.rebased65"
  %1952 = icmp sgt i32 %a14, %1948
  %b97 = select i1 %1952, i32 %1948, i32 %a14
  %1953 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s72 = select i1 %1953, i32 %b97, i32 %4
  %t698 = add nsw i32 %blur_x.s0.x.v1.base.s72, %t1693
  %1954 = sext i32 %t698 to i64
  %1955 = getelementptr inbounds i16, i16* %read_input, i64 %1954
  %1956 = getelementptr inbounds i16, i16* %1955, i64 1
  %1957 = bitcast i16* %1956 to <16 x i16>*
  %1958 = load <16 x i16>, <16 x i16>* %1957, align 2, !tbaa !396
  %1959 = getelementptr inbounds i16, i16* %1955, i64 17
  %1960 = bitcast i16* %1959 to <16 x i16>*
  %1961 = load <16 x i16>, <16 x i16>* %1960, align 2, !tbaa !396
  %1962 = bitcast i16* %1955 to <16 x i16>*
  %1963 = load <16 x i16>, <16 x i16>* %1962, align 2, !tbaa !396
  %1964 = getelementptr inbounds i16, i16* %1955, i64 16
  %1965 = bitcast i16* %1964 to <16 x i16>*
  %1966 = load <16 x i16>, <16 x i16>* %1965, align 2, !tbaa !396
  %1967 = getelementptr inbounds i16, i16* %1955, i64 2
  %1968 = bitcast i16* %1967 to <16 x i16>*
  %1969 = load <16 x i16>, <16 x i16>* %1968, align 2, !tbaa !396
  %1970 = getelementptr inbounds i16, i16* %1955, i64 18
  %1971 = bitcast i16* %1970 to <16 x i16>*
  %1972 = load <16 x i16>, <16 x i16>* %1971, align 2, !tbaa !396
  %1973 = getelementptr inbounds i16, i16* %1955, i64 4
  %1974 = bitcast i16* %1973 to <16 x i16>*
  %1975 = load <16 x i16>, <16 x i16>* %1974, align 2, !tbaa !396
  %1976 = getelementptr inbounds i16, i16* %1955, i64 20
  %1977 = bitcast i16* %1976 to <16 x i16>*
  %1978 = load <16 x i16>, <16 x i16>* %1977, align 2, !tbaa !396
  %1979 = getelementptr inbounds i16, i16* %1955, i64 3
  %1980 = bitcast i16* %1979 to <16 x i16>*
  %1981 = load <16 x i16>, <16 x i16>* %1980, align 2, !tbaa !396
  %1982 = getelementptr inbounds i16, i16* %1955, i64 19
  %1983 = bitcast i16* %1982 to <16 x i16>*
  %1984 = load <16 x i16>, <16 x i16>* %1983, align 2, !tbaa !396
  %1985 = add <16 x i16> %1963, %1958
  %1986 = add <16 x i16> %1985, %1969
  %1987 = add <16 x i16> %1986, %1975
  %1988 = add <16 x i16> %1987, %1981
  %1989 = add <16 x i16> %1966, %1961
  %1990 = add <16 x i16> %1989, %1972
  %1991 = add <16 x i16> %1990, %1978
  %1992 = add <16 x i16> %1991, %1984
  %1993 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1988, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1994 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1992, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1995 = shufflevector <16 x i16> %1993, <16 x i16> %1994, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1996 = lshr <32 x i16> %1995, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1997 = shufflevector <32 x i16> %1996, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1998 = sext i32 %blur_x.s0.x.v1.base.s72 to i64
  %1999 = add nsw i64 %1998, %1895
  %2000 = getelementptr inbounds i16, i16* %blur_x, i64 %1999
  %2001 = bitcast i16* %2000 to <16 x i16>*
  store <16 x i16> %1997, <16 x i16>* %2001, align 2, !tbaa !399
  %2002 = shufflevector <32 x i16> %1996, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2003 = getelementptr inbounds i16, i16* %2000, i64 16
  %2004 = bitcast i16* %2003 to <16 x i16>*
  store <16 x i16> %2002, <16 x i16>* %2004, align 2, !tbaa !399
  br label %after_bb68

after_bb73:                                       ; preds = %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge", %"produce blur_x76"
  %.pre-phi3488 = phi i32 [ %.pre3487, %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge" ], [ %2052, %"produce blur_x76" ]
  %2005 = mul nsw i32 %.pre-phi3488, %a73
  %t1700 = sub nsw i32 %2005, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased77.preheader", label %"end for blur_y.s0.x.x.rebased78", !prof !386

"for blur_y.s0.x.x.rebased77.preheader":          ; preds = %after_bb73
  %2006 = sext i32 %t1700 to i64
  br label %"for blur_y.s0.x.x.rebased77"

"produce blur_x76":                               ; preds = %"end for blur_y.s0.x.x.rebased66"
  %2007 = getelementptr inbounds i16, i16* %read_input, i64 %108
  %2008 = getelementptr inbounds i16, i16* %2007, i64 -31
  %2009 = bitcast i16* %2008 to <16 x i16>*
  %2010 = load <16 x i16>, <16 x i16>* %2009, align 2, !tbaa !396
  %2011 = getelementptr inbounds i16, i16* %2007, i64 -15
  %2012 = bitcast i16* %2011 to <16 x i16>*
  %2013 = load <16 x i16>, <16 x i16>* %2012, align 2, !tbaa !396
  %2014 = getelementptr inbounds i16, i16* %2007, i64 -32
  %2015 = bitcast i16* %2014 to <16 x i16>*
  %2016 = load <16 x i16>, <16 x i16>* %2015, align 2, !tbaa !396
  %2017 = getelementptr inbounds i16, i16* %2007, i64 -16
  %2018 = bitcast i16* %2017 to <16 x i16>*
  %2019 = load <16 x i16>, <16 x i16>* %2018, align 2, !tbaa !396
  %2020 = getelementptr inbounds i16, i16* %2007, i64 -30
  %2021 = bitcast i16* %2020 to <16 x i16>*
  %2022 = load <16 x i16>, <16 x i16>* %2021, align 2, !tbaa !396
  %2023 = getelementptr inbounds i16, i16* %2007, i64 -14
  %2024 = bitcast i16* %2023 to <16 x i16>*
  %2025 = load <16 x i16>, <16 x i16>* %2024, align 2, !tbaa !396
  %2026 = getelementptr inbounds i16, i16* %2007, i64 -28
  %2027 = bitcast i16* %2026 to <16 x i16>*
  %2028 = load <16 x i16>, <16 x i16>* %2027, align 2, !tbaa !396
  %2029 = getelementptr inbounds i16, i16* %2007, i64 -12
  %2030 = bitcast i16* %2029 to <16 x i16>*
  %2031 = load <16 x i16>, <16 x i16>* %2030, align 2, !tbaa !396
  %2032 = getelementptr inbounds i16, i16* %2007, i64 -29
  %2033 = bitcast i16* %2032 to <16 x i16>*
  %2034 = load <16 x i16>, <16 x i16>* %2033, align 2, !tbaa !396
  %2035 = getelementptr inbounds i16, i16* %2007, i64 -13
  %2036 = bitcast i16* %2035 to <16 x i16>*
  %2037 = load <16 x i16>, <16 x i16>* %2036, align 2, !tbaa !396
  %2038 = add <16 x i16> %2016, %2010
  %2039 = add <16 x i16> %2038, %2022
  %2040 = add <16 x i16> %2039, %2028
  %2041 = add <16 x i16> %2040, %2034
  %2042 = add <16 x i16> %2019, %2013
  %2043 = add <16 x i16> %2042, %2025
  %2044 = add <16 x i16> %2043, %2031
  %2045 = add <16 x i16> %2044, %2037
  %2046 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2041, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2047 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2045, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2048 = shufflevector <16 x i16> %2046, <16 x i16> %2047, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2049 = lshr <32 x i16> %2048, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2050 = shufflevector <32 x i16> %2049, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2051 = add nsw i32 %a26, 3
  %2052 = and i32 %2051, 7
  %2053 = zext i32 %2052 to i64
  %2054 = mul nsw i64 %97, %2053
  %2055 = add nsw i64 %99, %2054
  %2056 = getelementptr inbounds i16, i16* %blur_x, i64 %2055
  %2057 = getelementptr inbounds i16, i16* %2056, i64 -32
  %2058 = bitcast i16* %2057 to <16 x i16>*
  store <16 x i16> %2050, <16 x i16>* %2058, align 2, !tbaa !399
  %2059 = shufflevector <32 x i16> %2049, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2060 = getelementptr inbounds i16, i16* %2056, i64 -16
  %2061 = bitcast i16* %2060 to <16 x i16>*
  store <16 x i16> %2059, <16 x i16>* %2061, align 2, !tbaa !399
  br label %after_bb73

"for blur_y.s0.x.x.rebased77":                    ; preds = %"for blur_y.s0.x.x.rebased77.preheader", %after_bb80
  %indvars.iv3256 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased77.preheader" ], [ %indvars.iv.next3257, %after_bb80 ]
  %2062 = add nsw i64 %indvars.iv3256, %101
  %2063 = icmp slt i64 %2062, 1
  %2064 = trunc i64 %2062 to i32
  %2065 = shl nsw i32 %2064, 5
  %2066 = icmp sgt i32 %4, %2065
  %2067 = or i1 %2063, %2066
  br i1 %2067, label %"produce blur_x83", label %after_bb80

"end for blur_y.s0.x.x.rebased78":                ; preds = %after_bb80, %after_bb73
  br i1 %102, label %"for blur_y.s0.x.x.rebased84.preheader", label %"end for blur_y.s0.x.x.rebased85", !prof !386

"for blur_y.s0.x.x.rebased84.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased78"
  %2068 = sext i32 %t1700 to i64
  br label %"for blur_y.s0.x.x.rebased84"

after_bb80:                                       ; preds = %"for blur_y.s0.x.x.rebased77", %"produce blur_x83"
  %indvars.iv.next3257 = add nuw nsw i64 %indvars.iv3256, 1
  %.not2759 = icmp eq i64 %indvars.iv.next3257, %184
  br i1 %.not2759, label %"end for blur_y.s0.x.x.rebased78", label %"for blur_y.s0.x.x.rebased77"

"produce blur_x83":                               ; preds = %"for blur_y.s0.x.x.rebased77"
  %t702 = add nsw i32 %2065, %t1699
  %2069 = sext i32 %t702 to i64
  %2070 = getelementptr inbounds i16, i16* %read_input, i64 %2069
  %2071 = getelementptr inbounds i16, i16* %2070, i64 1
  %2072 = bitcast i16* %2071 to <16 x i16>*
  %2073 = load <16 x i16>, <16 x i16>* %2072, align 2, !tbaa !396
  %2074 = getelementptr inbounds i16, i16* %2070, i64 17
  %2075 = bitcast i16* %2074 to <16 x i16>*
  %2076 = load <16 x i16>, <16 x i16>* %2075, align 2, !tbaa !396
  %2077 = bitcast i16* %2070 to <16 x i16>*
  %2078 = load <16 x i16>, <16 x i16>* %2077, align 2, !tbaa !396
  %2079 = getelementptr inbounds i16, i16* %2070, i64 16
  %2080 = bitcast i16* %2079 to <16 x i16>*
  %2081 = load <16 x i16>, <16 x i16>* %2080, align 2, !tbaa !396
  %2082 = getelementptr inbounds i16, i16* %2070, i64 2
  %2083 = bitcast i16* %2082 to <16 x i16>*
  %2084 = load <16 x i16>, <16 x i16>* %2083, align 2, !tbaa !396
  %2085 = getelementptr inbounds i16, i16* %2070, i64 18
  %2086 = bitcast i16* %2085 to <16 x i16>*
  %2087 = load <16 x i16>, <16 x i16>* %2086, align 2, !tbaa !396
  %2088 = getelementptr inbounds i16, i16* %2070, i64 4
  %2089 = bitcast i16* %2088 to <16 x i16>*
  %2090 = load <16 x i16>, <16 x i16>* %2089, align 2, !tbaa !396
  %2091 = getelementptr inbounds i16, i16* %2070, i64 20
  %2092 = bitcast i16* %2091 to <16 x i16>*
  %2093 = load <16 x i16>, <16 x i16>* %2092, align 2, !tbaa !396
  %2094 = getelementptr inbounds i16, i16* %2070, i64 3
  %2095 = bitcast i16* %2094 to <16 x i16>*
  %2096 = load <16 x i16>, <16 x i16>* %2095, align 2, !tbaa !396
  %2097 = getelementptr inbounds i16, i16* %2070, i64 19
  %2098 = bitcast i16* %2097 to <16 x i16>*
  %2099 = load <16 x i16>, <16 x i16>* %2098, align 2, !tbaa !396
  %2100 = add <16 x i16> %2078, %2073
  %2101 = add <16 x i16> %2100, %2084
  %2102 = add <16 x i16> %2101, %2090
  %2103 = add <16 x i16> %2102, %2096
  %2104 = add <16 x i16> %2081, %2076
  %2105 = add <16 x i16> %2104, %2087
  %2106 = add <16 x i16> %2105, %2093
  %2107 = add <16 x i16> %2106, %2099
  %2108 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2103, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2109 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2107, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2110 = shufflevector <16 x i16> %2108, <16 x i16> %2109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2111 = lshr <32 x i16> %2110, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2112 = shufflevector <32 x i16> %2111, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2113 = shl nsw i64 %2062, 5
  %2114 = add nsw i64 %2113, %2006
  %2115 = getelementptr inbounds i16, i16* %blur_x, i64 %2114
  %2116 = bitcast i16* %2115 to <16 x i16>*
  store <16 x i16> %2112, <16 x i16>* %2116, align 2, !tbaa !399
  %2117 = shufflevector <32 x i16> %2111, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2118 = getelementptr inbounds i16, i16* %2115, i64 16
  %2119 = bitcast i16* %2118 to <16 x i16>*
  store <16 x i16> %2117, <16 x i16>* %2119, align 2, !tbaa !399
  br label %after_bb80

"for blur_y.s0.x.x.rebased84":                    ; preds = %"for blur_y.s0.x.x.rebased84.preheader", %after_bb87
  %blur_y.s0.x.x.rebased86 = phi i32 [ %2124, %after_bb87 ], [ 0, %"for blur_y.s0.x.x.rebased84.preheader" ]
  %t2225 = add nsw i32 %blur_y.s0.x.x.rebased86, %t1626
  %2120 = icmp slt i32 %t2225, 1
  %2121 = shl nsw i32 %t2225, 5
  %2122 = icmp sgt i32 %4, %2121
  %2123 = or i1 %2120, %2122
  br i1 %2123, label %then_bb88, label %after_bb87

"end for blur_y.s0.x.x.rebased85":                ; preds = %after_bb87, %"end for blur_y.s0.x.x.rebased78"
  br i1 %34, label %"produce blur_x95", label %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge"

"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased85"
  %.pre3489 = add nsw i32 %a26, 4
  %.pre3491 = and i32 %.pre3489, 7
  br label %after_bb92

after_bb87:                                       ; preds = %"for blur_y.s0.x.x.rebased84", %then_bb88
  %2124 = add nuw nsw i32 %blur_y.s0.x.x.rebased86, 1
  %.not2758 = icmp eq i32 %2124, %t1683
  br i1 %.not2758, label %"end for blur_y.s0.x.x.rebased85", label %"for blur_y.s0.x.x.rebased84"

then_bb88:                                        ; preds = %"for blur_y.s0.x.x.rebased84"
  %2125 = icmp sgt i32 %a14, %2121
  %b104 = select i1 %2125, i32 %2121, i32 %a14
  %2126 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s91 = select i1 %2126, i32 %b104, i32 %4
  %t704 = add nsw i32 %blur_x.s0.x.v1.base.s91, %t1699
  %2127 = sext i32 %t704 to i64
  %2128 = getelementptr inbounds i16, i16* %read_input, i64 %2127
  %2129 = getelementptr inbounds i16, i16* %2128, i64 1
  %2130 = bitcast i16* %2129 to <16 x i16>*
  %2131 = load <16 x i16>, <16 x i16>* %2130, align 2, !tbaa !396
  %2132 = getelementptr inbounds i16, i16* %2128, i64 17
  %2133 = bitcast i16* %2132 to <16 x i16>*
  %2134 = load <16 x i16>, <16 x i16>* %2133, align 2, !tbaa !396
  %2135 = bitcast i16* %2128 to <16 x i16>*
  %2136 = load <16 x i16>, <16 x i16>* %2135, align 2, !tbaa !396
  %2137 = getelementptr inbounds i16, i16* %2128, i64 16
  %2138 = bitcast i16* %2137 to <16 x i16>*
  %2139 = load <16 x i16>, <16 x i16>* %2138, align 2, !tbaa !396
  %2140 = getelementptr inbounds i16, i16* %2128, i64 2
  %2141 = bitcast i16* %2140 to <16 x i16>*
  %2142 = load <16 x i16>, <16 x i16>* %2141, align 2, !tbaa !396
  %2143 = getelementptr inbounds i16, i16* %2128, i64 18
  %2144 = bitcast i16* %2143 to <16 x i16>*
  %2145 = load <16 x i16>, <16 x i16>* %2144, align 2, !tbaa !396
  %2146 = getelementptr inbounds i16, i16* %2128, i64 4
  %2147 = bitcast i16* %2146 to <16 x i16>*
  %2148 = load <16 x i16>, <16 x i16>* %2147, align 2, !tbaa !396
  %2149 = getelementptr inbounds i16, i16* %2128, i64 20
  %2150 = bitcast i16* %2149 to <16 x i16>*
  %2151 = load <16 x i16>, <16 x i16>* %2150, align 2, !tbaa !396
  %2152 = getelementptr inbounds i16, i16* %2128, i64 3
  %2153 = bitcast i16* %2152 to <16 x i16>*
  %2154 = load <16 x i16>, <16 x i16>* %2153, align 2, !tbaa !396
  %2155 = getelementptr inbounds i16, i16* %2128, i64 19
  %2156 = bitcast i16* %2155 to <16 x i16>*
  %2157 = load <16 x i16>, <16 x i16>* %2156, align 2, !tbaa !396
  %2158 = add <16 x i16> %2136, %2131
  %2159 = add <16 x i16> %2158, %2142
  %2160 = add <16 x i16> %2159, %2148
  %2161 = add <16 x i16> %2160, %2154
  %2162 = add <16 x i16> %2139, %2134
  %2163 = add <16 x i16> %2162, %2145
  %2164 = add <16 x i16> %2163, %2151
  %2165 = add <16 x i16> %2164, %2157
  %2166 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2161, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2165, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2168 = shufflevector <16 x i16> %2166, <16 x i16> %2167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2169 = lshr <32 x i16> %2168, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2170 = shufflevector <32 x i16> %2169, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2171 = sext i32 %blur_x.s0.x.v1.base.s91 to i64
  %2172 = add nsw i64 %2171, %2068
  %2173 = getelementptr inbounds i16, i16* %blur_x, i64 %2172
  %2174 = bitcast i16* %2173 to <16 x i16>*
  store <16 x i16> %2170, <16 x i16>* %2174, align 2, !tbaa !399
  %2175 = shufflevector <32 x i16> %2169, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2176 = getelementptr inbounds i16, i16* %2173, i64 16
  %2177 = bitcast i16* %2176 to <16 x i16>*
  store <16 x i16> %2175, <16 x i16>* %2177, align 2, !tbaa !399
  br label %after_bb87

after_bb92:                                       ; preds = %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge", %"produce blur_x95"
  %.pre-phi3492 = phi i32 [ %.pre3491, %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge" ], [ %2243, %"produce blur_x95" ]
  %2178 = mul nsw i32 %.pre-phi3492, %a73
  %t1706 = sub nsw i32 %2178, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased96.preheader", label %"end for blur_y.s0.x.x.rebased97", !prof !386

"for blur_y.s0.x.x.rebased96.preheader":          ; preds = %after_bb92
  %2179 = sext i32 %t1706 to i64
  %2180 = zext i32 %.pre-phi3480 to i64
  %2181 = mul nsw i64 %2180, %112
  %2182 = sub nsw i64 %2181, %96
  %2183 = zext i32 %.pre-phi to i64
  %2184 = mul nsw i64 %2183, %112
  %2185 = sub nsw i64 %2184, %96
  %2186 = zext i32 %.pre-phi3484 to i64
  %2187 = mul nsw i64 %2186, %112
  %2188 = sub nsw i64 %2187, %96
  %2189 = zext i32 %.pre-phi3492 to i64
  %2190 = mul nsw i64 %2189, %112
  %2191 = sub nsw i64 %2190, %96
  %2192 = zext i32 %.pre-phi3488 to i64
  %2193 = mul nsw i64 %2192, %112
  %2194 = sub nsw i64 %2193, %96
  %2195 = sext i32 %a26 to i64
  %2196 = mul nsw i64 %2195, %113
  %2197 = add nsw i64 %2196, %116
  br label %"for blur_y.s0.x.x.rebased96"

"produce blur_x95":                               ; preds = %"end for blur_y.s0.x.x.rebased85"
  %2198 = getelementptr inbounds i16, i16* %read_input, i64 %111
  %2199 = getelementptr inbounds i16, i16* %2198, i64 -31
  %2200 = bitcast i16* %2199 to <16 x i16>*
  %2201 = load <16 x i16>, <16 x i16>* %2200, align 2, !tbaa !396
  %2202 = getelementptr inbounds i16, i16* %2198, i64 -15
  %2203 = bitcast i16* %2202 to <16 x i16>*
  %2204 = load <16 x i16>, <16 x i16>* %2203, align 2, !tbaa !396
  %2205 = getelementptr inbounds i16, i16* %2198, i64 -32
  %2206 = bitcast i16* %2205 to <16 x i16>*
  %2207 = load <16 x i16>, <16 x i16>* %2206, align 2, !tbaa !396
  %2208 = getelementptr inbounds i16, i16* %2198, i64 -16
  %2209 = bitcast i16* %2208 to <16 x i16>*
  %2210 = load <16 x i16>, <16 x i16>* %2209, align 2, !tbaa !396
  %2211 = getelementptr inbounds i16, i16* %2198, i64 -30
  %2212 = bitcast i16* %2211 to <16 x i16>*
  %2213 = load <16 x i16>, <16 x i16>* %2212, align 2, !tbaa !396
  %2214 = getelementptr inbounds i16, i16* %2198, i64 -14
  %2215 = bitcast i16* %2214 to <16 x i16>*
  %2216 = load <16 x i16>, <16 x i16>* %2215, align 2, !tbaa !396
  %2217 = getelementptr inbounds i16, i16* %2198, i64 -28
  %2218 = bitcast i16* %2217 to <16 x i16>*
  %2219 = load <16 x i16>, <16 x i16>* %2218, align 2, !tbaa !396
  %2220 = getelementptr inbounds i16, i16* %2198, i64 -12
  %2221 = bitcast i16* %2220 to <16 x i16>*
  %2222 = load <16 x i16>, <16 x i16>* %2221, align 2, !tbaa !396
  %2223 = getelementptr inbounds i16, i16* %2198, i64 -29
  %2224 = bitcast i16* %2223 to <16 x i16>*
  %2225 = load <16 x i16>, <16 x i16>* %2224, align 2, !tbaa !396
  %2226 = getelementptr inbounds i16, i16* %2198, i64 -13
  %2227 = bitcast i16* %2226 to <16 x i16>*
  %2228 = load <16 x i16>, <16 x i16>* %2227, align 2, !tbaa !396
  %2229 = add <16 x i16> %2207, %2201
  %2230 = add <16 x i16> %2229, %2213
  %2231 = add <16 x i16> %2230, %2219
  %2232 = add <16 x i16> %2231, %2225
  %2233 = add <16 x i16> %2210, %2204
  %2234 = add <16 x i16> %2233, %2216
  %2235 = add <16 x i16> %2234, %2222
  %2236 = add <16 x i16> %2235, %2228
  %2237 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2232, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2238 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2236, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2239 = shufflevector <16 x i16> %2237, <16 x i16> %2238, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2240 = lshr <32 x i16> %2239, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2241 = shufflevector <32 x i16> %2240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2242 = add nsw i32 %a26, 4
  %2243 = and i32 %2242, 7
  %2244 = zext i32 %2243 to i64
  %2245 = mul nsw i64 %97, %2244
  %2246 = add nsw i64 %99, %2245
  %2247 = getelementptr inbounds i16, i16* %blur_x, i64 %2246
  %2248 = getelementptr inbounds i16, i16* %2247, i64 -32
  %2249 = bitcast i16* %2248 to <16 x i16>*
  store <16 x i16> %2241, <16 x i16>* %2249, align 2, !tbaa !399
  %2250 = shufflevector <32 x i16> %2240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2251 = getelementptr inbounds i16, i16* %2247, i64 -16
  %2252 = bitcast i16* %2251 to <16 x i16>*
  store <16 x i16> %2250, <16 x i16>* %2252, align 2, !tbaa !399
  %2253 = zext i32 %.pre-phi3480 to i64
  %2254 = mul nsw i64 %2253, %112
  %2255 = add nsw i64 %2254, %94
  %2256 = getelementptr inbounds i16, i16* %blur_x, i64 %2255
  %2257 = getelementptr inbounds i16, i16* %2256, i64 -32
  %2258 = bitcast i16* %2257 to <16 x i16>*
  %2259 = load <16 x i16>, <16 x i16>* %2258, align 2, !tbaa !399
  %2260 = getelementptr inbounds i16, i16* %2256, i64 -16
  %2261 = bitcast i16* %2260 to <16 x i16>*
  %2262 = load <16 x i16>, <16 x i16>* %2261, align 2, !tbaa !399
  %2263 = zext i32 %.pre-phi to i64
  %2264 = mul nsw i64 %2263, %112
  %2265 = add nsw i64 %2264, %94
  %2266 = getelementptr inbounds i16, i16* %blur_x, i64 %2265
  %2267 = getelementptr inbounds i16, i16* %2266, i64 -32
  %2268 = bitcast i16* %2267 to <16 x i16>*
  %2269 = load <16 x i16>, <16 x i16>* %2268, align 2, !tbaa !399
  %2270 = getelementptr inbounds i16, i16* %2266, i64 -16
  %2271 = bitcast i16* %2270 to <16 x i16>*
  %2272 = load <16 x i16>, <16 x i16>* %2271, align 2, !tbaa !399
  %2273 = zext i32 %.pre-phi3484 to i64
  %2274 = mul nsw i64 %2273, %112
  %2275 = add nsw i64 %2274, %94
  %2276 = getelementptr inbounds i16, i16* %blur_x, i64 %2275
  %2277 = getelementptr inbounds i16, i16* %2276, i64 -32
  %2278 = bitcast i16* %2277 to <16 x i16>*
  %2279 = load <16 x i16>, <16 x i16>* %2278, align 2, !tbaa !399
  %2280 = getelementptr inbounds i16, i16* %2276, i64 -16
  %2281 = bitcast i16* %2280 to <16 x i16>*
  %2282 = load <16 x i16>, <16 x i16>* %2281, align 2, !tbaa !399
  %2283 = mul nsw i64 %2244, %112
  %2284 = add nsw i64 %2283, %94
  %2285 = getelementptr inbounds i16, i16* %blur_x, i64 %2284
  %2286 = getelementptr inbounds i16, i16* %2285, i64 -32
  %2287 = bitcast i16* %2286 to <16 x i16>*
  %2288 = load <16 x i16>, <16 x i16>* %2287, align 2, !tbaa !399
  %2289 = getelementptr inbounds i16, i16* %2285, i64 -16
  %2290 = bitcast i16* %2289 to <16 x i16>*
  %2291 = load <16 x i16>, <16 x i16>* %2290, align 2, !tbaa !399
  %2292 = zext i32 %.pre-phi3488 to i64
  %2293 = mul nsw i64 %2292, %112
  %2294 = add nsw i64 %2293, %94
  %2295 = getelementptr inbounds i16, i16* %blur_x, i64 %2294
  %2296 = getelementptr inbounds i16, i16* %2295, i64 -32
  %2297 = bitcast i16* %2296 to <16 x i16>*
  %2298 = load <16 x i16>, <16 x i16>* %2297, align 2, !tbaa !399
  %2299 = getelementptr inbounds i16, i16* %2295, i64 -16
  %2300 = bitcast i16* %2299 to <16 x i16>*
  %2301 = load <16 x i16>, <16 x i16>* %2300, align 2, !tbaa !399
  %2302 = add <16 x i16> %2269, %2259
  %2303 = add <16 x i16> %2302, %2279
  %2304 = add <16 x i16> %2303, %2288
  %2305 = add <16 x i16> %2304, %2298
  %2306 = add <16 x i16> %2272, %2262
  %2307 = add <16 x i16> %2306, %2282
  %2308 = add <16 x i16> %2307, %2291
  %2309 = add <16 x i16> %2308, %2301
  %2310 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2305, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2311 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2309, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2312 = shufflevector <16 x i16> %2310, <16 x i16> %2311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2313 = lshr <32 x i16> %2312, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2314 = shufflevector <32 x i16> %2313, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2315 = sext i32 %a26 to i64
  %2316 = mul nsw i64 %2315, %113
  %2317 = add nsw i64 %115, %2316
  %2318 = getelementptr inbounds i16, i16* %66, i64 %2317
  %2319 = getelementptr inbounds i16, i16* %2318, i64 -32
  %2320 = bitcast i16* %2319 to <16 x i16>*
  store <16 x i16> %2314, <16 x i16>* %2320, align 2, !tbaa !401
  %2321 = shufflevector <32 x i16> %2313, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2322 = getelementptr inbounds i16, i16* %2318, i64 -16
  %2323 = bitcast i16* %2322 to <16 x i16>*
  store <16 x i16> %2321, <16 x i16>* %2323, align 2, !tbaa !401
  br label %after_bb92

"for blur_y.s0.x.x.rebased96":                    ; preds = %"for blur_y.s0.x.x.rebased96.preheader", %"consume blur_x103"
  %indvars.iv3259 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased96.preheader" ], [ %indvars.iv.next3260, %"consume blur_x103" ]
  %2324 = add nsw i64 %indvars.iv3259, %101
  %2325 = icmp slt i64 %2324, 1
  %2326 = trunc i64 %2324 to i32
  %2327 = shl nsw i32 %2326, 5
  %2328 = icmp sgt i32 %4, %2327
  %2329 = or i1 %2325, %2328
  br i1 %2329, label %"produce blur_x102", label %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge"

"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased96"
  %.pre3493 = shl nsw i64 %2324, 5
  br label %"consume blur_x103"

"end for blur_y.s0.x.x.rebased97":                ; preds = %"consume blur_x103", %after_bb92
  br i1 %102, label %"for blur_y.s0.x.x.rebased104.preheader", label %"end for blur_y.s0.x.x.rebased105", !prof !386

"for blur_y.s0.x.x.rebased104.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased97"
  %2330 = sext i32 %t1706 to i64
  %2331 = zext i32 %.pre-phi3480 to i64
  %2332 = mul nsw i64 %2331, %112
  %2333 = sub nsw i64 %2332, %96
  %2334 = zext i32 %.pre-phi to i64
  %2335 = mul nsw i64 %2334, %112
  %2336 = sub nsw i64 %2335, %96
  %2337 = zext i32 %.pre-phi3484 to i64
  %2338 = mul nsw i64 %2337, %112
  %2339 = sub nsw i64 %2338, %96
  %2340 = zext i32 %.pre-phi3492 to i64
  %2341 = mul nsw i64 %2340, %112
  %2342 = sub nsw i64 %2341, %96
  %2343 = zext i32 %.pre-phi3488 to i64
  %2344 = mul nsw i64 %2343, %112
  %2345 = sub nsw i64 %2344, %96
  %2346 = sext i32 %a26 to i64
  %2347 = mul nsw i64 %2346, %113
  %2348 = add nsw i64 %2347, %116
  br label %"for blur_y.s0.x.x.rebased104"

"produce blur_x102":                              ; preds = %"for blur_y.s0.x.x.rebased96"
  %t712 = add nsw i32 %2327, %109
  %2349 = sext i32 %t712 to i64
  %2350 = getelementptr inbounds i16, i16* %read_input, i64 %2349
  %2351 = getelementptr inbounds i16, i16* %2350, i64 1
  %2352 = bitcast i16* %2351 to <16 x i16>*
  %2353 = load <16 x i16>, <16 x i16>* %2352, align 2, !tbaa !396
  %2354 = getelementptr inbounds i16, i16* %2350, i64 17
  %2355 = bitcast i16* %2354 to <16 x i16>*
  %2356 = load <16 x i16>, <16 x i16>* %2355, align 2, !tbaa !396
  %2357 = bitcast i16* %2350 to <16 x i16>*
  %2358 = load <16 x i16>, <16 x i16>* %2357, align 2, !tbaa !396
  %2359 = getelementptr inbounds i16, i16* %2350, i64 16
  %2360 = bitcast i16* %2359 to <16 x i16>*
  %2361 = load <16 x i16>, <16 x i16>* %2360, align 2, !tbaa !396
  %2362 = getelementptr inbounds i16, i16* %2350, i64 2
  %2363 = bitcast i16* %2362 to <16 x i16>*
  %2364 = load <16 x i16>, <16 x i16>* %2363, align 2, !tbaa !396
  %2365 = getelementptr inbounds i16, i16* %2350, i64 18
  %2366 = bitcast i16* %2365 to <16 x i16>*
  %2367 = load <16 x i16>, <16 x i16>* %2366, align 2, !tbaa !396
  %2368 = getelementptr inbounds i16, i16* %2350, i64 4
  %2369 = bitcast i16* %2368 to <16 x i16>*
  %2370 = load <16 x i16>, <16 x i16>* %2369, align 2, !tbaa !396
  %2371 = getelementptr inbounds i16, i16* %2350, i64 20
  %2372 = bitcast i16* %2371 to <16 x i16>*
  %2373 = load <16 x i16>, <16 x i16>* %2372, align 2, !tbaa !396
  %2374 = getelementptr inbounds i16, i16* %2350, i64 3
  %2375 = bitcast i16* %2374 to <16 x i16>*
  %2376 = load <16 x i16>, <16 x i16>* %2375, align 2, !tbaa !396
  %2377 = getelementptr inbounds i16, i16* %2350, i64 19
  %2378 = bitcast i16* %2377 to <16 x i16>*
  %2379 = load <16 x i16>, <16 x i16>* %2378, align 2, !tbaa !396
  %2380 = add <16 x i16> %2358, %2353
  %2381 = add <16 x i16> %2380, %2364
  %2382 = add <16 x i16> %2381, %2370
  %2383 = add <16 x i16> %2382, %2376
  %2384 = add <16 x i16> %2361, %2356
  %2385 = add <16 x i16> %2384, %2367
  %2386 = add <16 x i16> %2385, %2373
  %2387 = add <16 x i16> %2386, %2379
  %2388 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2383, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2389 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2387, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2390 = shufflevector <16 x i16> %2388, <16 x i16> %2389, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2391 = lshr <32 x i16> %2390, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2392 = shufflevector <32 x i16> %2391, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2393 = shl nsw i64 %2324, 5
  %2394 = add nsw i64 %2393, %2179
  %2395 = getelementptr inbounds i16, i16* %blur_x, i64 %2394
  %2396 = bitcast i16* %2395 to <16 x i16>*
  store <16 x i16> %2392, <16 x i16>* %2396, align 2, !tbaa !399
  %2397 = shufflevector <32 x i16> %2391, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2398 = getelementptr inbounds i16, i16* %2395, i64 16
  %2399 = bitcast i16* %2398 to <16 x i16>*
  store <16 x i16> %2397, <16 x i16>* %2399, align 2, !tbaa !399
  br label %"consume blur_x103"

"consume blur_x103":                              ; preds = %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge", %"produce blur_x102"
  %.pre-phi3494 = phi i64 [ %.pre3493, %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge" ], [ %2393, %"produce blur_x102" ]
  %2400 = add nsw i64 %2182, %.pre-phi3494
  %2401 = getelementptr inbounds i16, i16* %blur_x, i64 %2400
  %2402 = bitcast i16* %2401 to <16 x i16>*
  %2403 = load <16 x i16>, <16 x i16>* %2402, align 2, !tbaa !399
  %2404 = getelementptr inbounds i16, i16* %2401, i64 16
  %2405 = bitcast i16* %2404 to <16 x i16>*
  %2406 = load <16 x i16>, <16 x i16>* %2405, align 2, !tbaa !399
  %2407 = add nsw i64 %2185, %.pre-phi3494
  %2408 = getelementptr inbounds i16, i16* %blur_x, i64 %2407
  %2409 = bitcast i16* %2408 to <16 x i16>*
  %2410 = load <16 x i16>, <16 x i16>* %2409, align 2, !tbaa !399
  %2411 = getelementptr inbounds i16, i16* %2408, i64 16
  %2412 = bitcast i16* %2411 to <16 x i16>*
  %2413 = load <16 x i16>, <16 x i16>* %2412, align 2, !tbaa !399
  %2414 = add nsw i64 %2188, %.pre-phi3494
  %2415 = getelementptr inbounds i16, i16* %blur_x, i64 %2414
  %2416 = bitcast i16* %2415 to <16 x i16>*
  %2417 = load <16 x i16>, <16 x i16>* %2416, align 2, !tbaa !399
  %2418 = getelementptr inbounds i16, i16* %2415, i64 16
  %2419 = bitcast i16* %2418 to <16 x i16>*
  %2420 = load <16 x i16>, <16 x i16>* %2419, align 2, !tbaa !399
  %2421 = add nsw i64 %2191, %.pre-phi3494
  %2422 = getelementptr inbounds i16, i16* %blur_x, i64 %2421
  %2423 = bitcast i16* %2422 to <16 x i16>*
  %2424 = load <16 x i16>, <16 x i16>* %2423, align 2, !tbaa !399
  %2425 = getelementptr inbounds i16, i16* %2422, i64 16
  %2426 = bitcast i16* %2425 to <16 x i16>*
  %2427 = load <16 x i16>, <16 x i16>* %2426, align 2, !tbaa !399
  %2428 = add nsw i64 %2194, %.pre-phi3494
  %2429 = getelementptr inbounds i16, i16* %blur_x, i64 %2428
  %2430 = bitcast i16* %2429 to <16 x i16>*
  %2431 = load <16 x i16>, <16 x i16>* %2430, align 2, !tbaa !399
  %2432 = getelementptr inbounds i16, i16* %2429, i64 16
  %2433 = bitcast i16* %2432 to <16 x i16>*
  %2434 = load <16 x i16>, <16 x i16>* %2433, align 2, !tbaa !399
  %2435 = add <16 x i16> %2410, %2403
  %2436 = add <16 x i16> %2435, %2417
  %2437 = add <16 x i16> %2436, %2424
  %2438 = add <16 x i16> %2437, %2431
  %2439 = add <16 x i16> %2413, %2406
  %2440 = add <16 x i16> %2439, %2420
  %2441 = add <16 x i16> %2440, %2427
  %2442 = add <16 x i16> %2441, %2434
  %2443 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2438, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2444 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2442, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2445 = shufflevector <16 x i16> %2443, <16 x i16> %2444, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2446 = lshr <32 x i16> %2445, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2447 = shufflevector <32 x i16> %2446, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2448 = add nsw i64 %2197, %.pre-phi3494
  %2449 = getelementptr inbounds i16, i16* %66, i64 %2448
  %2450 = bitcast i16* %2449 to <16 x i16>*
  store <16 x i16> %2447, <16 x i16>* %2450, align 2, !tbaa !401
  %2451 = shufflevector <32 x i16> %2446, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2452 = getelementptr inbounds i16, i16* %2449, i64 16
  %2453 = bitcast i16* %2452 to <16 x i16>*
  store <16 x i16> %2451, <16 x i16>* %2453, align 2, !tbaa !401
  %indvars.iv.next3260 = add nuw nsw i64 %indvars.iv3259, 1
  %.not2757 = icmp eq i64 %indvars.iv.next3260, %184
  br i1 %.not2757, label %"end for blur_y.s0.x.x.rebased97", label %"for blur_y.s0.x.x.rebased96"

"for blur_y.s0.x.x.rebased104":                   ; preds = %"for blur_y.s0.x.x.rebased104.preheader", %"consume blur_x112"
  %blur_y.s0.x.x.rebased106 = phi i32 [ %2566, %"consume blur_x112" ], [ 0, %"for blur_y.s0.x.x.rebased104.preheader" ]
  %2454 = add nsw i32 %blur_y.s0.x.x.rebased106, %t1626
  %a105 = shl nsw i32 %2454, 5
  %2455 = icmp sgt i32 %a14, %a105
  %b111 = select i1 %2455, i32 %a105, i32 %a14
  %2456 = icmp slt i32 %2454, 1
  %2457 = icmp sgt i32 %4, %a105
  %2458 = or i1 %2456, %2457
  br i1 %2458, label %"produce blur_x110", label %"consume blur_x112"

"end for blur_y.s0.x.x.rebased105":               ; preds = %"consume blur_x112", %"end for blur_y.s0.x.x.rebased97"
  br i1 %34, label %"produce blur_x116", label %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge"

"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased105"
  %.pre3495 = add nsw i32 %a26, 5
  %.pre3497 = and i32 %.pre3495, 7
  br label %after_bb113

"produce blur_x110":                              ; preds = %"for blur_y.s0.x.x.rebased104"
  %2459 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s111 = select i1 %2459, i32 %b111, i32 %4
  %t717 = add nsw i32 %blur_x.s0.x.v1.base.s111, %109
  %2460 = sext i32 %t717 to i64
  %2461 = getelementptr inbounds i16, i16* %read_input, i64 %2460
  %2462 = getelementptr inbounds i16, i16* %2461, i64 1
  %2463 = bitcast i16* %2462 to <16 x i16>*
  %2464 = load <16 x i16>, <16 x i16>* %2463, align 2, !tbaa !396
  %2465 = getelementptr inbounds i16, i16* %2461, i64 17
  %2466 = bitcast i16* %2465 to <16 x i16>*
  %2467 = load <16 x i16>, <16 x i16>* %2466, align 2, !tbaa !396
  %2468 = bitcast i16* %2461 to <16 x i16>*
  %2469 = load <16 x i16>, <16 x i16>* %2468, align 2, !tbaa !396
  %2470 = getelementptr inbounds i16, i16* %2461, i64 16
  %2471 = bitcast i16* %2470 to <16 x i16>*
  %2472 = load <16 x i16>, <16 x i16>* %2471, align 2, !tbaa !396
  %2473 = getelementptr inbounds i16, i16* %2461, i64 2
  %2474 = bitcast i16* %2473 to <16 x i16>*
  %2475 = load <16 x i16>, <16 x i16>* %2474, align 2, !tbaa !396
  %2476 = getelementptr inbounds i16, i16* %2461, i64 18
  %2477 = bitcast i16* %2476 to <16 x i16>*
  %2478 = load <16 x i16>, <16 x i16>* %2477, align 2, !tbaa !396
  %2479 = getelementptr inbounds i16, i16* %2461, i64 4
  %2480 = bitcast i16* %2479 to <16 x i16>*
  %2481 = load <16 x i16>, <16 x i16>* %2480, align 2, !tbaa !396
  %2482 = getelementptr inbounds i16, i16* %2461, i64 20
  %2483 = bitcast i16* %2482 to <16 x i16>*
  %2484 = load <16 x i16>, <16 x i16>* %2483, align 2, !tbaa !396
  %2485 = getelementptr inbounds i16, i16* %2461, i64 3
  %2486 = bitcast i16* %2485 to <16 x i16>*
  %2487 = load <16 x i16>, <16 x i16>* %2486, align 2, !tbaa !396
  %2488 = getelementptr inbounds i16, i16* %2461, i64 19
  %2489 = bitcast i16* %2488 to <16 x i16>*
  %2490 = load <16 x i16>, <16 x i16>* %2489, align 2, !tbaa !396
  %2491 = add <16 x i16> %2469, %2464
  %2492 = add <16 x i16> %2491, %2475
  %2493 = add <16 x i16> %2492, %2481
  %2494 = add <16 x i16> %2493, %2487
  %2495 = add <16 x i16> %2472, %2467
  %2496 = add <16 x i16> %2495, %2478
  %2497 = add <16 x i16> %2496, %2484
  %2498 = add <16 x i16> %2497, %2490
  %2499 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2494, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2500 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2498, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2501 = shufflevector <16 x i16> %2499, <16 x i16> %2500, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2502 = lshr <32 x i16> %2501, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2503 = shufflevector <32 x i16> %2502, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2504 = sext i32 %blur_x.s0.x.v1.base.s111 to i64
  %2505 = add nsw i64 %2504, %2330
  %2506 = getelementptr inbounds i16, i16* %blur_x, i64 %2505
  %2507 = bitcast i16* %2506 to <16 x i16>*
  store <16 x i16> %2503, <16 x i16>* %2507, align 2, !tbaa !399
  %2508 = shufflevector <32 x i16> %2502, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2509 = getelementptr inbounds i16, i16* %2506, i64 16
  %2510 = bitcast i16* %2509 to <16 x i16>*
  store <16 x i16> %2508, <16 x i16>* %2510, align 2, !tbaa !399
  br label %"consume blur_x112"

"consume blur_x112":                              ; preds = %"for blur_y.s0.x.x.rebased104", %"produce blur_x110"
  %2511 = sext i32 %b111 to i64
  %2512 = add nsw i64 %2333, %2511
  %2513 = getelementptr inbounds i16, i16* %blur_x, i64 %2512
  %2514 = bitcast i16* %2513 to <16 x i16>*
  %2515 = load <16 x i16>, <16 x i16>* %2514, align 2, !tbaa !399
  %2516 = getelementptr inbounds i16, i16* %2513, i64 16
  %2517 = bitcast i16* %2516 to <16 x i16>*
  %2518 = load <16 x i16>, <16 x i16>* %2517, align 2, !tbaa !399
  %2519 = add nsw i64 %2336, %2511
  %2520 = getelementptr inbounds i16, i16* %blur_x, i64 %2519
  %2521 = bitcast i16* %2520 to <16 x i16>*
  %2522 = load <16 x i16>, <16 x i16>* %2521, align 2, !tbaa !399
  %2523 = getelementptr inbounds i16, i16* %2520, i64 16
  %2524 = bitcast i16* %2523 to <16 x i16>*
  %2525 = load <16 x i16>, <16 x i16>* %2524, align 2, !tbaa !399
  %2526 = add nsw i64 %2339, %2511
  %2527 = getelementptr inbounds i16, i16* %blur_x, i64 %2526
  %2528 = bitcast i16* %2527 to <16 x i16>*
  %2529 = load <16 x i16>, <16 x i16>* %2528, align 2, !tbaa !399
  %2530 = getelementptr inbounds i16, i16* %2527, i64 16
  %2531 = bitcast i16* %2530 to <16 x i16>*
  %2532 = load <16 x i16>, <16 x i16>* %2531, align 2, !tbaa !399
  %2533 = add nsw i64 %2342, %2511
  %2534 = getelementptr inbounds i16, i16* %blur_x, i64 %2533
  %2535 = bitcast i16* %2534 to <16 x i16>*
  %2536 = load <16 x i16>, <16 x i16>* %2535, align 2, !tbaa !399
  %2537 = getelementptr inbounds i16, i16* %2534, i64 16
  %2538 = bitcast i16* %2537 to <16 x i16>*
  %2539 = load <16 x i16>, <16 x i16>* %2538, align 2, !tbaa !399
  %2540 = add nsw i64 %2345, %2511
  %2541 = getelementptr inbounds i16, i16* %blur_x, i64 %2540
  %2542 = bitcast i16* %2541 to <16 x i16>*
  %2543 = load <16 x i16>, <16 x i16>* %2542, align 2, !tbaa !399
  %2544 = getelementptr inbounds i16, i16* %2541, i64 16
  %2545 = bitcast i16* %2544 to <16 x i16>*
  %2546 = load <16 x i16>, <16 x i16>* %2545, align 2, !tbaa !399
  %2547 = add <16 x i16> %2522, %2515
  %2548 = add <16 x i16> %2547, %2529
  %2549 = add <16 x i16> %2548, %2536
  %2550 = add <16 x i16> %2549, %2543
  %2551 = add <16 x i16> %2525, %2518
  %2552 = add <16 x i16> %2551, %2532
  %2553 = add <16 x i16> %2552, %2539
  %2554 = add <16 x i16> %2553, %2546
  %2555 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2550, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2556 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2554, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2557 = shufflevector <16 x i16> %2555, <16 x i16> %2556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2558 = lshr <32 x i16> %2557, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2559 = shufflevector <32 x i16> %2558, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2560 = add nsw i64 %2348, %2511
  %2561 = getelementptr inbounds i16, i16* %66, i64 %2560
  %2562 = bitcast i16* %2561 to <16 x i16>*
  store <16 x i16> %2559, <16 x i16>* %2562, align 2, !tbaa !401
  %2563 = shufflevector <32 x i16> %2558, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2564 = getelementptr inbounds i16, i16* %2561, i64 16
  %2565 = bitcast i16* %2564 to <16 x i16>*
  store <16 x i16> %2563, <16 x i16>* %2565, align 2, !tbaa !401
  %2566 = add nuw nsw i32 %blur_y.s0.x.x.rebased106, 1
  %.not2756 = icmp eq i32 %2566, %t1683
  br i1 %.not2756, label %"end for blur_y.s0.x.x.rebased105", label %"for blur_y.s0.x.x.rebased104"

after_bb113:                                      ; preds = %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge", %"produce blur_x116"
  %.pre-phi3498 = phi i32 [ %.pre3497, %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge" ], [ %2633, %"produce blur_x116" ]
  %2567 = mul nsw i32 %.pre-phi3498, %a73
  %t1722 = sub nsw i32 %2567, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased118.preheader", label %"end for blur_y.s0.x.x.rebased119", !prof !386

"for blur_y.s0.x.x.rebased118.preheader":         ; preds = %after_bb113
  %2568 = sext i32 %t1722 to i64
  %2569 = zext i32 %.pre-phi3484 to i64
  %2570 = mul nsw i64 %2569, %112
  %2571 = sub nsw i64 %2570, %96
  %2572 = zext i32 %.pre-phi3480 to i64
  %2573 = mul nsw i64 %2572, %112
  %2574 = sub nsw i64 %2573, %96
  %2575 = zext i32 %.pre-phi3488 to i64
  %2576 = mul nsw i64 %2575, %112
  %2577 = sub nsw i64 %2576, %96
  %2578 = zext i32 %.pre-phi3498 to i64
  %2579 = mul nsw i64 %2578, %112
  %2580 = sub nsw i64 %2579, %96
  %2581 = zext i32 %.pre-phi3492 to i64
  %2582 = mul nsw i64 %2581, %112
  %2583 = sub nsw i64 %2582, %96
  %2584 = sext i32 %a26 to i64
  %2585 = add nsw i64 %2584, 1
  %2586 = mul nsw i64 %2585, %113
  %2587 = add nsw i64 %2586, %116
  br label %"for blur_y.s0.x.x.rebased118"

"produce blur_x116":                              ; preds = %"end for blur_y.s0.x.x.rebased105"
  %2588 = getelementptr inbounds i16, i16* %read_input, i64 %117
  %2589 = getelementptr inbounds i16, i16* %2588, i64 -31
  %2590 = bitcast i16* %2589 to <16 x i16>*
  %2591 = load <16 x i16>, <16 x i16>* %2590, align 2, !tbaa !396
  %2592 = getelementptr inbounds i16, i16* %2588, i64 -15
  %2593 = bitcast i16* %2592 to <16 x i16>*
  %2594 = load <16 x i16>, <16 x i16>* %2593, align 2, !tbaa !396
  %2595 = getelementptr inbounds i16, i16* %2588, i64 -32
  %2596 = bitcast i16* %2595 to <16 x i16>*
  %2597 = load <16 x i16>, <16 x i16>* %2596, align 2, !tbaa !396
  %2598 = getelementptr inbounds i16, i16* %2588, i64 -16
  %2599 = bitcast i16* %2598 to <16 x i16>*
  %2600 = load <16 x i16>, <16 x i16>* %2599, align 2, !tbaa !396
  %2601 = getelementptr inbounds i16, i16* %2588, i64 -30
  %2602 = bitcast i16* %2601 to <16 x i16>*
  %2603 = load <16 x i16>, <16 x i16>* %2602, align 2, !tbaa !396
  %2604 = getelementptr inbounds i16, i16* %2588, i64 -14
  %2605 = bitcast i16* %2604 to <16 x i16>*
  %2606 = load <16 x i16>, <16 x i16>* %2605, align 2, !tbaa !396
  %2607 = getelementptr inbounds i16, i16* %2588, i64 -28
  %2608 = bitcast i16* %2607 to <16 x i16>*
  %2609 = load <16 x i16>, <16 x i16>* %2608, align 2, !tbaa !396
  %2610 = getelementptr inbounds i16, i16* %2588, i64 -12
  %2611 = bitcast i16* %2610 to <16 x i16>*
  %2612 = load <16 x i16>, <16 x i16>* %2611, align 2, !tbaa !396
  %2613 = getelementptr inbounds i16, i16* %2588, i64 -29
  %2614 = bitcast i16* %2613 to <16 x i16>*
  %2615 = load <16 x i16>, <16 x i16>* %2614, align 2, !tbaa !396
  %2616 = getelementptr inbounds i16, i16* %2588, i64 -13
  %2617 = bitcast i16* %2616 to <16 x i16>*
  %2618 = load <16 x i16>, <16 x i16>* %2617, align 2, !tbaa !396
  %2619 = add <16 x i16> %2597, %2591
  %2620 = add <16 x i16> %2619, %2603
  %2621 = add <16 x i16> %2620, %2609
  %2622 = add <16 x i16> %2621, %2615
  %2623 = add <16 x i16> %2600, %2594
  %2624 = add <16 x i16> %2623, %2606
  %2625 = add <16 x i16> %2624, %2612
  %2626 = add <16 x i16> %2625, %2618
  %2627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2622, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2626, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2629 = shufflevector <16 x i16> %2627, <16 x i16> %2628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2630 = lshr <32 x i16> %2629, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2631 = shufflevector <32 x i16> %2630, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2632 = add nsw i32 %a26, 5
  %2633 = and i32 %2632, 7
  %2634 = zext i32 %2633 to i64
  %2635 = mul nsw i64 %97, %2634
  %2636 = add nsw i64 %99, %2635
  %2637 = getelementptr inbounds i16, i16* %blur_x, i64 %2636
  %2638 = getelementptr inbounds i16, i16* %2637, i64 -32
  %2639 = bitcast i16* %2638 to <16 x i16>*
  store <16 x i16> %2631, <16 x i16>* %2639, align 2, !tbaa !399
  %2640 = shufflevector <32 x i16> %2630, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2641 = getelementptr inbounds i16, i16* %2637, i64 -16
  %2642 = bitcast i16* %2641 to <16 x i16>*
  store <16 x i16> %2640, <16 x i16>* %2642, align 2, !tbaa !399
  %2643 = zext i32 %.pre-phi3484 to i64
  %2644 = mul nsw i64 %2643, %112
  %2645 = add nsw i64 %2644, %94
  %2646 = getelementptr inbounds i16, i16* %blur_x, i64 %2645
  %2647 = getelementptr inbounds i16, i16* %2646, i64 -32
  %2648 = bitcast i16* %2647 to <16 x i16>*
  %2649 = load <16 x i16>, <16 x i16>* %2648, align 2, !tbaa !399
  %2650 = getelementptr inbounds i16, i16* %2646, i64 -16
  %2651 = bitcast i16* %2650 to <16 x i16>*
  %2652 = load <16 x i16>, <16 x i16>* %2651, align 2, !tbaa !399
  %2653 = zext i32 %.pre-phi3480 to i64
  %2654 = mul nsw i64 %2653, %112
  %2655 = add nsw i64 %2654, %94
  %2656 = getelementptr inbounds i16, i16* %blur_x, i64 %2655
  %2657 = getelementptr inbounds i16, i16* %2656, i64 -32
  %2658 = bitcast i16* %2657 to <16 x i16>*
  %2659 = load <16 x i16>, <16 x i16>* %2658, align 2, !tbaa !399
  %2660 = getelementptr inbounds i16, i16* %2656, i64 -16
  %2661 = bitcast i16* %2660 to <16 x i16>*
  %2662 = load <16 x i16>, <16 x i16>* %2661, align 2, !tbaa !399
  %2663 = zext i32 %.pre-phi3488 to i64
  %2664 = mul nsw i64 %2663, %112
  %2665 = add nsw i64 %2664, %94
  %2666 = getelementptr inbounds i16, i16* %blur_x, i64 %2665
  %2667 = getelementptr inbounds i16, i16* %2666, i64 -32
  %2668 = bitcast i16* %2667 to <16 x i16>*
  %2669 = load <16 x i16>, <16 x i16>* %2668, align 2, !tbaa !399
  %2670 = getelementptr inbounds i16, i16* %2666, i64 -16
  %2671 = bitcast i16* %2670 to <16 x i16>*
  %2672 = load <16 x i16>, <16 x i16>* %2671, align 2, !tbaa !399
  %2673 = mul nsw i64 %2634, %112
  %2674 = add nsw i64 %2673, %94
  %2675 = getelementptr inbounds i16, i16* %blur_x, i64 %2674
  %2676 = getelementptr inbounds i16, i16* %2675, i64 -32
  %2677 = bitcast i16* %2676 to <16 x i16>*
  %2678 = load <16 x i16>, <16 x i16>* %2677, align 2, !tbaa !399
  %2679 = getelementptr inbounds i16, i16* %2675, i64 -16
  %2680 = bitcast i16* %2679 to <16 x i16>*
  %2681 = load <16 x i16>, <16 x i16>* %2680, align 2, !tbaa !399
  %2682 = zext i32 %.pre-phi3492 to i64
  %2683 = mul nsw i64 %2682, %112
  %2684 = add nsw i64 %2683, %94
  %2685 = getelementptr inbounds i16, i16* %blur_x, i64 %2684
  %2686 = getelementptr inbounds i16, i16* %2685, i64 -32
  %2687 = bitcast i16* %2686 to <16 x i16>*
  %2688 = load <16 x i16>, <16 x i16>* %2687, align 2, !tbaa !399
  %2689 = getelementptr inbounds i16, i16* %2685, i64 -16
  %2690 = bitcast i16* %2689 to <16 x i16>*
  %2691 = load <16 x i16>, <16 x i16>* %2690, align 2, !tbaa !399
  %2692 = add <16 x i16> %2659, %2649
  %2693 = add <16 x i16> %2692, %2669
  %2694 = add <16 x i16> %2693, %2678
  %2695 = add <16 x i16> %2694, %2688
  %2696 = add <16 x i16> %2662, %2652
  %2697 = add <16 x i16> %2696, %2672
  %2698 = add <16 x i16> %2697, %2681
  %2699 = add <16 x i16> %2698, %2691
  %2700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2695, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2699, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2702 = shufflevector <16 x i16> %2700, <16 x i16> %2701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2703 = lshr <32 x i16> %2702, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2704 = shufflevector <32 x i16> %2703, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2705 = sext i32 %a26 to i64
  %2706 = add nsw i64 %2705, 1
  %2707 = mul nsw i64 %2706, %113
  %2708 = add nsw i64 %115, %2707
  %2709 = getelementptr inbounds i16, i16* %66, i64 %2708
  %2710 = getelementptr inbounds i16, i16* %2709, i64 -32
  %2711 = bitcast i16* %2710 to <16 x i16>*
  store <16 x i16> %2704, <16 x i16>* %2711, align 2, !tbaa !401
  %2712 = shufflevector <32 x i16> %2703, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2713 = getelementptr inbounds i16, i16* %2709, i64 -16
  %2714 = bitcast i16* %2713 to <16 x i16>*
  store <16 x i16> %2712, <16 x i16>* %2714, align 2, !tbaa !401
  br label %after_bb113

"for blur_y.s0.x.x.rebased118":                   ; preds = %"for blur_y.s0.x.x.rebased118.preheader", %"consume blur_x125"
  %indvars.iv3262 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased118.preheader" ], [ %indvars.iv.next3263, %"consume blur_x125" ]
  %2715 = add nsw i64 %indvars.iv3262, %101
  %2716 = icmp slt i64 %2715, 1
  %2717 = trunc i64 %2715 to i32
  %2718 = shl nsw i32 %2717, 5
  %2719 = icmp sgt i32 %4, %2718
  %2720 = or i1 %2716, %2719
  br i1 %2720, label %"produce blur_x124", label %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge"

"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased118"
  %.pre3499 = shl nsw i64 %2715, 5
  br label %"consume blur_x125"

"end for blur_y.s0.x.x.rebased119":               ; preds = %"consume blur_x125", %after_bb113
  br i1 %102, label %"for blur_y.s0.x.x.rebased126.preheader", label %"end for blur_y.s0.x.x.rebased127", !prof !386

"for blur_y.s0.x.x.rebased126.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased119"
  %2721 = sext i32 %t1722 to i64
  %2722 = zext i32 %.pre-phi3484 to i64
  %2723 = mul nsw i64 %2722, %112
  %2724 = sub nsw i64 %2723, %96
  %2725 = zext i32 %.pre-phi3480 to i64
  %2726 = mul nsw i64 %2725, %112
  %2727 = sub nsw i64 %2726, %96
  %2728 = zext i32 %.pre-phi3488 to i64
  %2729 = mul nsw i64 %2728, %112
  %2730 = sub nsw i64 %2729, %96
  %2731 = zext i32 %.pre-phi3498 to i64
  %2732 = mul nsw i64 %2731, %112
  %2733 = sub nsw i64 %2732, %96
  %2734 = zext i32 %.pre-phi3492 to i64
  %2735 = mul nsw i64 %2734, %112
  %2736 = sub nsw i64 %2735, %96
  %2737 = sext i32 %a26 to i64
  %2738 = add nsw i64 %2737, 1
  %2739 = mul nsw i64 %2738, %113
  %2740 = add nsw i64 %2739, %116
  br label %"for blur_y.s0.x.x.rebased126"

"produce blur_x124":                              ; preds = %"for blur_y.s0.x.x.rebased118"
  %t728 = add nsw i32 %2718, %t1721
  %2741 = sext i32 %t728 to i64
  %2742 = getelementptr inbounds i16, i16* %read_input, i64 %2741
  %2743 = getelementptr inbounds i16, i16* %2742, i64 1
  %2744 = bitcast i16* %2743 to <16 x i16>*
  %2745 = load <16 x i16>, <16 x i16>* %2744, align 2, !tbaa !396
  %2746 = getelementptr inbounds i16, i16* %2742, i64 17
  %2747 = bitcast i16* %2746 to <16 x i16>*
  %2748 = load <16 x i16>, <16 x i16>* %2747, align 2, !tbaa !396
  %2749 = bitcast i16* %2742 to <16 x i16>*
  %2750 = load <16 x i16>, <16 x i16>* %2749, align 2, !tbaa !396
  %2751 = getelementptr inbounds i16, i16* %2742, i64 16
  %2752 = bitcast i16* %2751 to <16 x i16>*
  %2753 = load <16 x i16>, <16 x i16>* %2752, align 2, !tbaa !396
  %2754 = getelementptr inbounds i16, i16* %2742, i64 2
  %2755 = bitcast i16* %2754 to <16 x i16>*
  %2756 = load <16 x i16>, <16 x i16>* %2755, align 2, !tbaa !396
  %2757 = getelementptr inbounds i16, i16* %2742, i64 18
  %2758 = bitcast i16* %2757 to <16 x i16>*
  %2759 = load <16 x i16>, <16 x i16>* %2758, align 2, !tbaa !396
  %2760 = getelementptr inbounds i16, i16* %2742, i64 4
  %2761 = bitcast i16* %2760 to <16 x i16>*
  %2762 = load <16 x i16>, <16 x i16>* %2761, align 2, !tbaa !396
  %2763 = getelementptr inbounds i16, i16* %2742, i64 20
  %2764 = bitcast i16* %2763 to <16 x i16>*
  %2765 = load <16 x i16>, <16 x i16>* %2764, align 2, !tbaa !396
  %2766 = getelementptr inbounds i16, i16* %2742, i64 3
  %2767 = bitcast i16* %2766 to <16 x i16>*
  %2768 = load <16 x i16>, <16 x i16>* %2767, align 2, !tbaa !396
  %2769 = getelementptr inbounds i16, i16* %2742, i64 19
  %2770 = bitcast i16* %2769 to <16 x i16>*
  %2771 = load <16 x i16>, <16 x i16>* %2770, align 2, !tbaa !396
  %2772 = add <16 x i16> %2750, %2745
  %2773 = add <16 x i16> %2772, %2756
  %2774 = add <16 x i16> %2773, %2762
  %2775 = add <16 x i16> %2774, %2768
  %2776 = add <16 x i16> %2753, %2748
  %2777 = add <16 x i16> %2776, %2759
  %2778 = add <16 x i16> %2777, %2765
  %2779 = add <16 x i16> %2778, %2771
  %2780 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2775, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2781 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2779, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2782 = shufflevector <16 x i16> %2780, <16 x i16> %2781, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2783 = lshr <32 x i16> %2782, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2784 = shufflevector <32 x i16> %2783, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2785 = shl nsw i64 %2715, 5
  %2786 = add nsw i64 %2785, %2568
  %2787 = getelementptr inbounds i16, i16* %blur_x, i64 %2786
  %2788 = bitcast i16* %2787 to <16 x i16>*
  store <16 x i16> %2784, <16 x i16>* %2788, align 2, !tbaa !399
  %2789 = shufflevector <32 x i16> %2783, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2790 = getelementptr inbounds i16, i16* %2787, i64 16
  %2791 = bitcast i16* %2790 to <16 x i16>*
  store <16 x i16> %2789, <16 x i16>* %2791, align 2, !tbaa !399
  br label %"consume blur_x125"

"consume blur_x125":                              ; preds = %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge", %"produce blur_x124"
  %.pre-phi3500 = phi i64 [ %.pre3499, %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge" ], [ %2785, %"produce blur_x124" ]
  %2792 = add nsw i64 %2571, %.pre-phi3500
  %2793 = getelementptr inbounds i16, i16* %blur_x, i64 %2792
  %2794 = bitcast i16* %2793 to <16 x i16>*
  %2795 = load <16 x i16>, <16 x i16>* %2794, align 2, !tbaa !399
  %2796 = getelementptr inbounds i16, i16* %2793, i64 16
  %2797 = bitcast i16* %2796 to <16 x i16>*
  %2798 = load <16 x i16>, <16 x i16>* %2797, align 2, !tbaa !399
  %2799 = add nsw i64 %2574, %.pre-phi3500
  %2800 = getelementptr inbounds i16, i16* %blur_x, i64 %2799
  %2801 = bitcast i16* %2800 to <16 x i16>*
  %2802 = load <16 x i16>, <16 x i16>* %2801, align 2, !tbaa !399
  %2803 = getelementptr inbounds i16, i16* %2800, i64 16
  %2804 = bitcast i16* %2803 to <16 x i16>*
  %2805 = load <16 x i16>, <16 x i16>* %2804, align 2, !tbaa !399
  %2806 = add nsw i64 %2577, %.pre-phi3500
  %2807 = getelementptr inbounds i16, i16* %blur_x, i64 %2806
  %2808 = bitcast i16* %2807 to <16 x i16>*
  %2809 = load <16 x i16>, <16 x i16>* %2808, align 2, !tbaa !399
  %2810 = getelementptr inbounds i16, i16* %2807, i64 16
  %2811 = bitcast i16* %2810 to <16 x i16>*
  %2812 = load <16 x i16>, <16 x i16>* %2811, align 2, !tbaa !399
  %2813 = add nsw i64 %2580, %.pre-phi3500
  %2814 = getelementptr inbounds i16, i16* %blur_x, i64 %2813
  %2815 = bitcast i16* %2814 to <16 x i16>*
  %2816 = load <16 x i16>, <16 x i16>* %2815, align 2, !tbaa !399
  %2817 = getelementptr inbounds i16, i16* %2814, i64 16
  %2818 = bitcast i16* %2817 to <16 x i16>*
  %2819 = load <16 x i16>, <16 x i16>* %2818, align 2, !tbaa !399
  %2820 = add nsw i64 %2583, %.pre-phi3500
  %2821 = getelementptr inbounds i16, i16* %blur_x, i64 %2820
  %2822 = bitcast i16* %2821 to <16 x i16>*
  %2823 = load <16 x i16>, <16 x i16>* %2822, align 2, !tbaa !399
  %2824 = getelementptr inbounds i16, i16* %2821, i64 16
  %2825 = bitcast i16* %2824 to <16 x i16>*
  %2826 = load <16 x i16>, <16 x i16>* %2825, align 2, !tbaa !399
  %2827 = add <16 x i16> %2802, %2795
  %2828 = add <16 x i16> %2827, %2809
  %2829 = add <16 x i16> %2828, %2816
  %2830 = add <16 x i16> %2829, %2823
  %2831 = add <16 x i16> %2805, %2798
  %2832 = add <16 x i16> %2831, %2812
  %2833 = add <16 x i16> %2832, %2819
  %2834 = add <16 x i16> %2833, %2826
  %2835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2830, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2834, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2837 = shufflevector <16 x i16> %2835, <16 x i16> %2836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2838 = lshr <32 x i16> %2837, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2839 = shufflevector <32 x i16> %2838, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2840 = add nsw i64 %2587, %.pre-phi3500
  %2841 = getelementptr inbounds i16, i16* %66, i64 %2840
  %2842 = bitcast i16* %2841 to <16 x i16>*
  store <16 x i16> %2839, <16 x i16>* %2842, align 2, !tbaa !401
  %2843 = shufflevector <32 x i16> %2838, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2844 = getelementptr inbounds i16, i16* %2841, i64 16
  %2845 = bitcast i16* %2844 to <16 x i16>*
  store <16 x i16> %2843, <16 x i16>* %2845, align 2, !tbaa !401
  %indvars.iv.next3263 = add nuw nsw i64 %indvars.iv3262, 1
  %.not2755 = icmp eq i64 %indvars.iv.next3263, %184
  br i1 %.not2755, label %"end for blur_y.s0.x.x.rebased119", label %"for blur_y.s0.x.x.rebased118"

"for blur_y.s0.x.x.rebased126":                   ; preds = %"for blur_y.s0.x.x.rebased126.preheader", %"consume blur_x134"
  %blur_y.s0.x.x.rebased128 = phi i32 [ %2958, %"consume blur_x134" ], [ 0, %"for blur_y.s0.x.x.rebased126.preheader" ]
  %2846 = add nsw i32 %blur_y.s0.x.x.rebased128, %t1626
  %a112 = shl nsw i32 %2846, 5
  %2847 = icmp sgt i32 %a14, %a112
  %b118 = select i1 %2847, i32 %a112, i32 %a14
  %2848 = icmp slt i32 %2846, 1
  %2849 = icmp sgt i32 %4, %a112
  %2850 = or i1 %2848, %2849
  br i1 %2850, label %"produce blur_x132", label %"consume blur_x134"

"end for blur_y.s0.x.x.rebased127":               ; preds = %"consume blur_x134", %"end for blur_y.s0.x.x.rebased119"
  br i1 %34, label %"produce blur_x138", label %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge"

"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased127"
  %.pre3501 = add nsw i32 %a26, 6
  %.pre3503 = and i32 %.pre3501, 7
  br label %after_bb135

"produce blur_x132":                              ; preds = %"for blur_y.s0.x.x.rebased126"
  %2851 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s133 = select i1 %2851, i32 %b118, i32 %4
  %t733 = add nsw i32 %blur_x.s0.x.v1.base.s133, %t1721
  %2852 = sext i32 %t733 to i64
  %2853 = getelementptr inbounds i16, i16* %read_input, i64 %2852
  %2854 = getelementptr inbounds i16, i16* %2853, i64 1
  %2855 = bitcast i16* %2854 to <16 x i16>*
  %2856 = load <16 x i16>, <16 x i16>* %2855, align 2, !tbaa !396
  %2857 = getelementptr inbounds i16, i16* %2853, i64 17
  %2858 = bitcast i16* %2857 to <16 x i16>*
  %2859 = load <16 x i16>, <16 x i16>* %2858, align 2, !tbaa !396
  %2860 = bitcast i16* %2853 to <16 x i16>*
  %2861 = load <16 x i16>, <16 x i16>* %2860, align 2, !tbaa !396
  %2862 = getelementptr inbounds i16, i16* %2853, i64 16
  %2863 = bitcast i16* %2862 to <16 x i16>*
  %2864 = load <16 x i16>, <16 x i16>* %2863, align 2, !tbaa !396
  %2865 = getelementptr inbounds i16, i16* %2853, i64 2
  %2866 = bitcast i16* %2865 to <16 x i16>*
  %2867 = load <16 x i16>, <16 x i16>* %2866, align 2, !tbaa !396
  %2868 = getelementptr inbounds i16, i16* %2853, i64 18
  %2869 = bitcast i16* %2868 to <16 x i16>*
  %2870 = load <16 x i16>, <16 x i16>* %2869, align 2, !tbaa !396
  %2871 = getelementptr inbounds i16, i16* %2853, i64 4
  %2872 = bitcast i16* %2871 to <16 x i16>*
  %2873 = load <16 x i16>, <16 x i16>* %2872, align 2, !tbaa !396
  %2874 = getelementptr inbounds i16, i16* %2853, i64 20
  %2875 = bitcast i16* %2874 to <16 x i16>*
  %2876 = load <16 x i16>, <16 x i16>* %2875, align 2, !tbaa !396
  %2877 = getelementptr inbounds i16, i16* %2853, i64 3
  %2878 = bitcast i16* %2877 to <16 x i16>*
  %2879 = load <16 x i16>, <16 x i16>* %2878, align 2, !tbaa !396
  %2880 = getelementptr inbounds i16, i16* %2853, i64 19
  %2881 = bitcast i16* %2880 to <16 x i16>*
  %2882 = load <16 x i16>, <16 x i16>* %2881, align 2, !tbaa !396
  %2883 = add <16 x i16> %2861, %2856
  %2884 = add <16 x i16> %2883, %2867
  %2885 = add <16 x i16> %2884, %2873
  %2886 = add <16 x i16> %2885, %2879
  %2887 = add <16 x i16> %2864, %2859
  %2888 = add <16 x i16> %2887, %2870
  %2889 = add <16 x i16> %2888, %2876
  %2890 = add <16 x i16> %2889, %2882
  %2891 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2886, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2890, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2893 = shufflevector <16 x i16> %2891, <16 x i16> %2892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2894 = lshr <32 x i16> %2893, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2895 = shufflevector <32 x i16> %2894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2896 = sext i32 %blur_x.s0.x.v1.base.s133 to i64
  %2897 = add nsw i64 %2896, %2721
  %2898 = getelementptr inbounds i16, i16* %blur_x, i64 %2897
  %2899 = bitcast i16* %2898 to <16 x i16>*
  store <16 x i16> %2895, <16 x i16>* %2899, align 2, !tbaa !399
  %2900 = shufflevector <32 x i16> %2894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2901 = getelementptr inbounds i16, i16* %2898, i64 16
  %2902 = bitcast i16* %2901 to <16 x i16>*
  store <16 x i16> %2900, <16 x i16>* %2902, align 2, !tbaa !399
  br label %"consume blur_x134"

"consume blur_x134":                              ; preds = %"for blur_y.s0.x.x.rebased126", %"produce blur_x132"
  %2903 = sext i32 %b118 to i64
  %2904 = add nsw i64 %2724, %2903
  %2905 = getelementptr inbounds i16, i16* %blur_x, i64 %2904
  %2906 = bitcast i16* %2905 to <16 x i16>*
  %2907 = load <16 x i16>, <16 x i16>* %2906, align 2, !tbaa !399
  %2908 = getelementptr inbounds i16, i16* %2905, i64 16
  %2909 = bitcast i16* %2908 to <16 x i16>*
  %2910 = load <16 x i16>, <16 x i16>* %2909, align 2, !tbaa !399
  %2911 = add nsw i64 %2727, %2903
  %2912 = getelementptr inbounds i16, i16* %blur_x, i64 %2911
  %2913 = bitcast i16* %2912 to <16 x i16>*
  %2914 = load <16 x i16>, <16 x i16>* %2913, align 2, !tbaa !399
  %2915 = getelementptr inbounds i16, i16* %2912, i64 16
  %2916 = bitcast i16* %2915 to <16 x i16>*
  %2917 = load <16 x i16>, <16 x i16>* %2916, align 2, !tbaa !399
  %2918 = add nsw i64 %2730, %2903
  %2919 = getelementptr inbounds i16, i16* %blur_x, i64 %2918
  %2920 = bitcast i16* %2919 to <16 x i16>*
  %2921 = load <16 x i16>, <16 x i16>* %2920, align 2, !tbaa !399
  %2922 = getelementptr inbounds i16, i16* %2919, i64 16
  %2923 = bitcast i16* %2922 to <16 x i16>*
  %2924 = load <16 x i16>, <16 x i16>* %2923, align 2, !tbaa !399
  %2925 = add nsw i64 %2733, %2903
  %2926 = getelementptr inbounds i16, i16* %blur_x, i64 %2925
  %2927 = bitcast i16* %2926 to <16 x i16>*
  %2928 = load <16 x i16>, <16 x i16>* %2927, align 2, !tbaa !399
  %2929 = getelementptr inbounds i16, i16* %2926, i64 16
  %2930 = bitcast i16* %2929 to <16 x i16>*
  %2931 = load <16 x i16>, <16 x i16>* %2930, align 2, !tbaa !399
  %2932 = add nsw i64 %2736, %2903
  %2933 = getelementptr inbounds i16, i16* %blur_x, i64 %2932
  %2934 = bitcast i16* %2933 to <16 x i16>*
  %2935 = load <16 x i16>, <16 x i16>* %2934, align 2, !tbaa !399
  %2936 = getelementptr inbounds i16, i16* %2933, i64 16
  %2937 = bitcast i16* %2936 to <16 x i16>*
  %2938 = load <16 x i16>, <16 x i16>* %2937, align 2, !tbaa !399
  %2939 = add <16 x i16> %2914, %2907
  %2940 = add <16 x i16> %2939, %2921
  %2941 = add <16 x i16> %2940, %2928
  %2942 = add <16 x i16> %2941, %2935
  %2943 = add <16 x i16> %2917, %2910
  %2944 = add <16 x i16> %2943, %2924
  %2945 = add <16 x i16> %2944, %2931
  %2946 = add <16 x i16> %2945, %2938
  %2947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2942, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2948 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2946, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2949 = shufflevector <16 x i16> %2947, <16 x i16> %2948, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2950 = lshr <32 x i16> %2949, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2951 = shufflevector <32 x i16> %2950, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2952 = add nsw i64 %2740, %2903
  %2953 = getelementptr inbounds i16, i16* %66, i64 %2952
  %2954 = bitcast i16* %2953 to <16 x i16>*
  store <16 x i16> %2951, <16 x i16>* %2954, align 2, !tbaa !401
  %2955 = shufflevector <32 x i16> %2950, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2956 = getelementptr inbounds i16, i16* %2953, i64 16
  %2957 = bitcast i16* %2956 to <16 x i16>*
  store <16 x i16> %2955, <16 x i16>* %2957, align 2, !tbaa !401
  %2958 = add nuw nsw i32 %blur_y.s0.x.x.rebased128, 1
  %.not2754 = icmp eq i32 %2958, %t1683
  br i1 %.not2754, label %"end for blur_y.s0.x.x.rebased127", label %"for blur_y.s0.x.x.rebased126"

after_bb135:                                      ; preds = %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge", %"produce blur_x138"
  %.pre-phi3504 = phi i32 [ %.pre3503, %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge" ], [ %3025, %"produce blur_x138" ]
  %2959 = mul nsw i32 %.pre-phi3504, %a73
  %t1738 = sub nsw i32 %2959, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased140.preheader", label %"end for blur_y.s0.x.x.rebased141", !prof !386

"for blur_y.s0.x.x.rebased140.preheader":         ; preds = %after_bb135
  %2960 = sext i32 %t1738 to i64
  %2961 = zext i32 %.pre-phi3488 to i64
  %2962 = mul nsw i64 %2961, %112
  %2963 = sub nsw i64 %2962, %96
  %2964 = zext i32 %.pre-phi3484 to i64
  %2965 = mul nsw i64 %2964, %112
  %2966 = sub nsw i64 %2965, %96
  %2967 = zext i32 %.pre-phi3492 to i64
  %2968 = mul nsw i64 %2967, %112
  %2969 = sub nsw i64 %2968, %96
  %2970 = zext i32 %.pre-phi3504 to i64
  %2971 = mul nsw i64 %2970, %112
  %2972 = sub nsw i64 %2971, %96
  %2973 = zext i32 %.pre-phi3498 to i64
  %2974 = mul nsw i64 %2973, %112
  %2975 = sub nsw i64 %2974, %96
  %2976 = sext i32 %a26 to i64
  %2977 = add nsw i64 %2976, 2
  %2978 = mul nsw i64 %2977, %113
  %2979 = add nsw i64 %2978, %116
  br label %"for blur_y.s0.x.x.rebased140"

"produce blur_x138":                              ; preds = %"end for blur_y.s0.x.x.rebased127"
  %2980 = getelementptr inbounds i16, i16* %read_input, i64 %119
  %2981 = getelementptr inbounds i16, i16* %2980, i64 -31
  %2982 = bitcast i16* %2981 to <16 x i16>*
  %2983 = load <16 x i16>, <16 x i16>* %2982, align 2, !tbaa !396
  %2984 = getelementptr inbounds i16, i16* %2980, i64 -15
  %2985 = bitcast i16* %2984 to <16 x i16>*
  %2986 = load <16 x i16>, <16 x i16>* %2985, align 2, !tbaa !396
  %2987 = getelementptr inbounds i16, i16* %2980, i64 -32
  %2988 = bitcast i16* %2987 to <16 x i16>*
  %2989 = load <16 x i16>, <16 x i16>* %2988, align 2, !tbaa !396
  %2990 = getelementptr inbounds i16, i16* %2980, i64 -16
  %2991 = bitcast i16* %2990 to <16 x i16>*
  %2992 = load <16 x i16>, <16 x i16>* %2991, align 2, !tbaa !396
  %2993 = getelementptr inbounds i16, i16* %2980, i64 -30
  %2994 = bitcast i16* %2993 to <16 x i16>*
  %2995 = load <16 x i16>, <16 x i16>* %2994, align 2, !tbaa !396
  %2996 = getelementptr inbounds i16, i16* %2980, i64 -14
  %2997 = bitcast i16* %2996 to <16 x i16>*
  %2998 = load <16 x i16>, <16 x i16>* %2997, align 2, !tbaa !396
  %2999 = getelementptr inbounds i16, i16* %2980, i64 -28
  %3000 = bitcast i16* %2999 to <16 x i16>*
  %3001 = load <16 x i16>, <16 x i16>* %3000, align 2, !tbaa !396
  %3002 = getelementptr inbounds i16, i16* %2980, i64 -12
  %3003 = bitcast i16* %3002 to <16 x i16>*
  %3004 = load <16 x i16>, <16 x i16>* %3003, align 2, !tbaa !396
  %3005 = getelementptr inbounds i16, i16* %2980, i64 -29
  %3006 = bitcast i16* %3005 to <16 x i16>*
  %3007 = load <16 x i16>, <16 x i16>* %3006, align 2, !tbaa !396
  %3008 = getelementptr inbounds i16, i16* %2980, i64 -13
  %3009 = bitcast i16* %3008 to <16 x i16>*
  %3010 = load <16 x i16>, <16 x i16>* %3009, align 2, !tbaa !396
  %3011 = add <16 x i16> %2989, %2983
  %3012 = add <16 x i16> %3011, %2995
  %3013 = add <16 x i16> %3012, %3001
  %3014 = add <16 x i16> %3013, %3007
  %3015 = add <16 x i16> %2992, %2986
  %3016 = add <16 x i16> %3015, %2998
  %3017 = add <16 x i16> %3016, %3004
  %3018 = add <16 x i16> %3017, %3010
  %3019 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3014, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3018, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3021 = shufflevector <16 x i16> %3019, <16 x i16> %3020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3022 = lshr <32 x i16> %3021, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3023 = shufflevector <32 x i16> %3022, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3024 = add nsw i32 %a26, 6
  %3025 = and i32 %3024, 7
  %3026 = zext i32 %3025 to i64
  %3027 = mul nsw i64 %97, %3026
  %3028 = add nsw i64 %99, %3027
  %3029 = getelementptr inbounds i16, i16* %blur_x, i64 %3028
  %3030 = getelementptr inbounds i16, i16* %3029, i64 -32
  %3031 = bitcast i16* %3030 to <16 x i16>*
  store <16 x i16> %3023, <16 x i16>* %3031, align 2, !tbaa !399
  %3032 = shufflevector <32 x i16> %3022, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3033 = getelementptr inbounds i16, i16* %3029, i64 -16
  %3034 = bitcast i16* %3033 to <16 x i16>*
  store <16 x i16> %3032, <16 x i16>* %3034, align 2, !tbaa !399
  %3035 = zext i32 %.pre-phi3488 to i64
  %3036 = mul nsw i64 %3035, %112
  %3037 = add nsw i64 %3036, %94
  %3038 = getelementptr inbounds i16, i16* %blur_x, i64 %3037
  %3039 = getelementptr inbounds i16, i16* %3038, i64 -32
  %3040 = bitcast i16* %3039 to <16 x i16>*
  %3041 = load <16 x i16>, <16 x i16>* %3040, align 2, !tbaa !399
  %3042 = getelementptr inbounds i16, i16* %3038, i64 -16
  %3043 = bitcast i16* %3042 to <16 x i16>*
  %3044 = load <16 x i16>, <16 x i16>* %3043, align 2, !tbaa !399
  %3045 = zext i32 %.pre-phi3484 to i64
  %3046 = mul nsw i64 %3045, %112
  %3047 = add nsw i64 %3046, %94
  %3048 = getelementptr inbounds i16, i16* %blur_x, i64 %3047
  %3049 = getelementptr inbounds i16, i16* %3048, i64 -32
  %3050 = bitcast i16* %3049 to <16 x i16>*
  %3051 = load <16 x i16>, <16 x i16>* %3050, align 2, !tbaa !399
  %3052 = getelementptr inbounds i16, i16* %3048, i64 -16
  %3053 = bitcast i16* %3052 to <16 x i16>*
  %3054 = load <16 x i16>, <16 x i16>* %3053, align 2, !tbaa !399
  %3055 = zext i32 %.pre-phi3492 to i64
  %3056 = mul nsw i64 %3055, %112
  %3057 = add nsw i64 %3056, %94
  %3058 = getelementptr inbounds i16, i16* %blur_x, i64 %3057
  %3059 = getelementptr inbounds i16, i16* %3058, i64 -32
  %3060 = bitcast i16* %3059 to <16 x i16>*
  %3061 = load <16 x i16>, <16 x i16>* %3060, align 2, !tbaa !399
  %3062 = getelementptr inbounds i16, i16* %3058, i64 -16
  %3063 = bitcast i16* %3062 to <16 x i16>*
  %3064 = load <16 x i16>, <16 x i16>* %3063, align 2, !tbaa !399
  %3065 = mul nsw i64 %3026, %112
  %3066 = add nsw i64 %3065, %94
  %3067 = getelementptr inbounds i16, i16* %blur_x, i64 %3066
  %3068 = getelementptr inbounds i16, i16* %3067, i64 -32
  %3069 = bitcast i16* %3068 to <16 x i16>*
  %3070 = load <16 x i16>, <16 x i16>* %3069, align 2, !tbaa !399
  %3071 = getelementptr inbounds i16, i16* %3067, i64 -16
  %3072 = bitcast i16* %3071 to <16 x i16>*
  %3073 = load <16 x i16>, <16 x i16>* %3072, align 2, !tbaa !399
  %3074 = zext i32 %.pre-phi3498 to i64
  %3075 = mul nsw i64 %3074, %112
  %3076 = add nsw i64 %3075, %94
  %3077 = getelementptr inbounds i16, i16* %blur_x, i64 %3076
  %3078 = getelementptr inbounds i16, i16* %3077, i64 -32
  %3079 = bitcast i16* %3078 to <16 x i16>*
  %3080 = load <16 x i16>, <16 x i16>* %3079, align 2, !tbaa !399
  %3081 = getelementptr inbounds i16, i16* %3077, i64 -16
  %3082 = bitcast i16* %3081 to <16 x i16>*
  %3083 = load <16 x i16>, <16 x i16>* %3082, align 2, !tbaa !399
  %3084 = add <16 x i16> %3051, %3041
  %3085 = add <16 x i16> %3084, %3061
  %3086 = add <16 x i16> %3085, %3070
  %3087 = add <16 x i16> %3086, %3080
  %3088 = add <16 x i16> %3054, %3044
  %3089 = add <16 x i16> %3088, %3064
  %3090 = add <16 x i16> %3089, %3073
  %3091 = add <16 x i16> %3090, %3083
  %3092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3087, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3093 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3091, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3094 = shufflevector <16 x i16> %3092, <16 x i16> %3093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3095 = lshr <32 x i16> %3094, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3096 = shufflevector <32 x i16> %3095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3097 = sext i32 %a26 to i64
  %3098 = add nsw i64 %3097, 2
  %3099 = mul nsw i64 %3098, %113
  %3100 = add nsw i64 %115, %3099
  %3101 = getelementptr inbounds i16, i16* %66, i64 %3100
  %3102 = getelementptr inbounds i16, i16* %3101, i64 -32
  %3103 = bitcast i16* %3102 to <16 x i16>*
  store <16 x i16> %3096, <16 x i16>* %3103, align 2, !tbaa !401
  %3104 = shufflevector <32 x i16> %3095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3105 = getelementptr inbounds i16, i16* %3101, i64 -16
  %3106 = bitcast i16* %3105 to <16 x i16>*
  store <16 x i16> %3104, <16 x i16>* %3106, align 2, !tbaa !401
  br label %after_bb135

"for blur_y.s0.x.x.rebased140":                   ; preds = %"for blur_y.s0.x.x.rebased140.preheader", %"consume blur_x147"
  %indvars.iv3265 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased140.preheader" ], [ %indvars.iv.next3266, %"consume blur_x147" ]
  %3107 = add nsw i64 %indvars.iv3265, %101
  %3108 = icmp slt i64 %3107, 1
  %3109 = trunc i64 %3107 to i32
  %3110 = shl nsw i32 %3109, 5
  %3111 = icmp sgt i32 %4, %3110
  %3112 = or i1 %3108, %3111
  br i1 %3112, label %"produce blur_x146", label %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge"

"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased140"
  %.pre3505 = shl nsw i64 %3107, 5
  br label %"consume blur_x147"

"end for blur_y.s0.x.x.rebased141":               ; preds = %"consume blur_x147", %after_bb135
  br i1 %102, label %"for blur_y.s0.x.x.rebased148.preheader", label %"end for blur_y.s0.x.x.rebased149", !prof !386

"for blur_y.s0.x.x.rebased148.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased141"
  %3113 = sext i32 %t1738 to i64
  %3114 = zext i32 %.pre-phi3488 to i64
  %3115 = mul nsw i64 %3114, %112
  %3116 = sub nsw i64 %3115, %96
  %3117 = zext i32 %.pre-phi3484 to i64
  %3118 = mul nsw i64 %3117, %112
  %3119 = sub nsw i64 %3118, %96
  %3120 = zext i32 %.pre-phi3492 to i64
  %3121 = mul nsw i64 %3120, %112
  %3122 = sub nsw i64 %3121, %96
  %3123 = zext i32 %.pre-phi3504 to i64
  %3124 = mul nsw i64 %3123, %112
  %3125 = sub nsw i64 %3124, %96
  %3126 = zext i32 %.pre-phi3498 to i64
  %3127 = mul nsw i64 %3126, %112
  %3128 = sub nsw i64 %3127, %96
  %3129 = sext i32 %a26 to i64
  %3130 = add nsw i64 %3129, 2
  %3131 = mul nsw i64 %3130, %113
  %3132 = add nsw i64 %3131, %116
  br label %"for blur_y.s0.x.x.rebased148"

"produce blur_x146":                              ; preds = %"for blur_y.s0.x.x.rebased140"
  %t744 = add nsw i32 %3110, %t1737
  %3133 = sext i32 %t744 to i64
  %3134 = getelementptr inbounds i16, i16* %read_input, i64 %3133
  %3135 = getelementptr inbounds i16, i16* %3134, i64 1
  %3136 = bitcast i16* %3135 to <16 x i16>*
  %3137 = load <16 x i16>, <16 x i16>* %3136, align 2, !tbaa !396
  %3138 = getelementptr inbounds i16, i16* %3134, i64 17
  %3139 = bitcast i16* %3138 to <16 x i16>*
  %3140 = load <16 x i16>, <16 x i16>* %3139, align 2, !tbaa !396
  %3141 = bitcast i16* %3134 to <16 x i16>*
  %3142 = load <16 x i16>, <16 x i16>* %3141, align 2, !tbaa !396
  %3143 = getelementptr inbounds i16, i16* %3134, i64 16
  %3144 = bitcast i16* %3143 to <16 x i16>*
  %3145 = load <16 x i16>, <16 x i16>* %3144, align 2, !tbaa !396
  %3146 = getelementptr inbounds i16, i16* %3134, i64 2
  %3147 = bitcast i16* %3146 to <16 x i16>*
  %3148 = load <16 x i16>, <16 x i16>* %3147, align 2, !tbaa !396
  %3149 = getelementptr inbounds i16, i16* %3134, i64 18
  %3150 = bitcast i16* %3149 to <16 x i16>*
  %3151 = load <16 x i16>, <16 x i16>* %3150, align 2, !tbaa !396
  %3152 = getelementptr inbounds i16, i16* %3134, i64 4
  %3153 = bitcast i16* %3152 to <16 x i16>*
  %3154 = load <16 x i16>, <16 x i16>* %3153, align 2, !tbaa !396
  %3155 = getelementptr inbounds i16, i16* %3134, i64 20
  %3156 = bitcast i16* %3155 to <16 x i16>*
  %3157 = load <16 x i16>, <16 x i16>* %3156, align 2, !tbaa !396
  %3158 = getelementptr inbounds i16, i16* %3134, i64 3
  %3159 = bitcast i16* %3158 to <16 x i16>*
  %3160 = load <16 x i16>, <16 x i16>* %3159, align 2, !tbaa !396
  %3161 = getelementptr inbounds i16, i16* %3134, i64 19
  %3162 = bitcast i16* %3161 to <16 x i16>*
  %3163 = load <16 x i16>, <16 x i16>* %3162, align 2, !tbaa !396
  %3164 = add <16 x i16> %3142, %3137
  %3165 = add <16 x i16> %3164, %3148
  %3166 = add <16 x i16> %3165, %3154
  %3167 = add <16 x i16> %3166, %3160
  %3168 = add <16 x i16> %3145, %3140
  %3169 = add <16 x i16> %3168, %3151
  %3170 = add <16 x i16> %3169, %3157
  %3171 = add <16 x i16> %3170, %3163
  %3172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3167, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3171, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3174 = shufflevector <16 x i16> %3172, <16 x i16> %3173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3175 = lshr <32 x i16> %3174, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3176 = shufflevector <32 x i16> %3175, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3177 = shl nsw i64 %3107, 5
  %3178 = add nsw i64 %3177, %2960
  %3179 = getelementptr inbounds i16, i16* %blur_x, i64 %3178
  %3180 = bitcast i16* %3179 to <16 x i16>*
  store <16 x i16> %3176, <16 x i16>* %3180, align 2, !tbaa !399
  %3181 = shufflevector <32 x i16> %3175, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3182 = getelementptr inbounds i16, i16* %3179, i64 16
  %3183 = bitcast i16* %3182 to <16 x i16>*
  store <16 x i16> %3181, <16 x i16>* %3183, align 2, !tbaa !399
  br label %"consume blur_x147"

"consume blur_x147":                              ; preds = %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge", %"produce blur_x146"
  %.pre-phi3506 = phi i64 [ %.pre3505, %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge" ], [ %3177, %"produce blur_x146" ]
  %3184 = add nsw i64 %2963, %.pre-phi3506
  %3185 = getelementptr inbounds i16, i16* %blur_x, i64 %3184
  %3186 = bitcast i16* %3185 to <16 x i16>*
  %3187 = load <16 x i16>, <16 x i16>* %3186, align 2, !tbaa !399
  %3188 = getelementptr inbounds i16, i16* %3185, i64 16
  %3189 = bitcast i16* %3188 to <16 x i16>*
  %3190 = load <16 x i16>, <16 x i16>* %3189, align 2, !tbaa !399
  %3191 = add nsw i64 %2966, %.pre-phi3506
  %3192 = getelementptr inbounds i16, i16* %blur_x, i64 %3191
  %3193 = bitcast i16* %3192 to <16 x i16>*
  %3194 = load <16 x i16>, <16 x i16>* %3193, align 2, !tbaa !399
  %3195 = getelementptr inbounds i16, i16* %3192, i64 16
  %3196 = bitcast i16* %3195 to <16 x i16>*
  %3197 = load <16 x i16>, <16 x i16>* %3196, align 2, !tbaa !399
  %3198 = add nsw i64 %2969, %.pre-phi3506
  %3199 = getelementptr inbounds i16, i16* %blur_x, i64 %3198
  %3200 = bitcast i16* %3199 to <16 x i16>*
  %3201 = load <16 x i16>, <16 x i16>* %3200, align 2, !tbaa !399
  %3202 = getelementptr inbounds i16, i16* %3199, i64 16
  %3203 = bitcast i16* %3202 to <16 x i16>*
  %3204 = load <16 x i16>, <16 x i16>* %3203, align 2, !tbaa !399
  %3205 = add nsw i64 %2972, %.pre-phi3506
  %3206 = getelementptr inbounds i16, i16* %blur_x, i64 %3205
  %3207 = bitcast i16* %3206 to <16 x i16>*
  %3208 = load <16 x i16>, <16 x i16>* %3207, align 2, !tbaa !399
  %3209 = getelementptr inbounds i16, i16* %3206, i64 16
  %3210 = bitcast i16* %3209 to <16 x i16>*
  %3211 = load <16 x i16>, <16 x i16>* %3210, align 2, !tbaa !399
  %3212 = add nsw i64 %2975, %.pre-phi3506
  %3213 = getelementptr inbounds i16, i16* %blur_x, i64 %3212
  %3214 = bitcast i16* %3213 to <16 x i16>*
  %3215 = load <16 x i16>, <16 x i16>* %3214, align 2, !tbaa !399
  %3216 = getelementptr inbounds i16, i16* %3213, i64 16
  %3217 = bitcast i16* %3216 to <16 x i16>*
  %3218 = load <16 x i16>, <16 x i16>* %3217, align 2, !tbaa !399
  %3219 = add <16 x i16> %3194, %3187
  %3220 = add <16 x i16> %3219, %3201
  %3221 = add <16 x i16> %3220, %3208
  %3222 = add <16 x i16> %3221, %3215
  %3223 = add <16 x i16> %3197, %3190
  %3224 = add <16 x i16> %3223, %3204
  %3225 = add <16 x i16> %3224, %3211
  %3226 = add <16 x i16> %3225, %3218
  %3227 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3222, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3228 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3226, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3229 = shufflevector <16 x i16> %3227, <16 x i16> %3228, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3230 = lshr <32 x i16> %3229, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3231 = shufflevector <32 x i16> %3230, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3232 = add nsw i64 %2979, %.pre-phi3506
  %3233 = getelementptr inbounds i16, i16* %66, i64 %3232
  %3234 = bitcast i16* %3233 to <16 x i16>*
  store <16 x i16> %3231, <16 x i16>* %3234, align 2, !tbaa !401
  %3235 = shufflevector <32 x i16> %3230, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3236 = getelementptr inbounds i16, i16* %3233, i64 16
  %3237 = bitcast i16* %3236 to <16 x i16>*
  store <16 x i16> %3235, <16 x i16>* %3237, align 2, !tbaa !401
  %indvars.iv.next3266 = add nuw nsw i64 %indvars.iv3265, 1
  %.not2753 = icmp eq i64 %indvars.iv.next3266, %184
  br i1 %.not2753, label %"end for blur_y.s0.x.x.rebased141", label %"for blur_y.s0.x.x.rebased140"

"for blur_y.s0.x.x.rebased148":                   ; preds = %"for blur_y.s0.x.x.rebased148.preheader", %"consume blur_x156"
  %blur_y.s0.x.x.rebased150 = phi i32 [ %3350, %"consume blur_x156" ], [ 0, %"for blur_y.s0.x.x.rebased148.preheader" ]
  %3238 = add nsw i32 %blur_y.s0.x.x.rebased150, %t1626
  %a119 = shl nsw i32 %3238, 5
  %3239 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %3239, i32 %a119, i32 %a14
  %3240 = icmp slt i32 %3238, 1
  %3241 = icmp sgt i32 %4, %a119
  %3242 = or i1 %3240, %3241
  br i1 %3242, label %"produce blur_x154", label %"consume blur_x156"

"end for blur_y.s0.x.x.rebased149":               ; preds = %"consume blur_x156", %"end for blur_y.s0.x.x.rebased141"
  br i1 %34, label %"produce blur_x160", label %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge"

"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased149"
  %.pre3507 = add nsw i32 %a26, 7
  %.pre3509 = and i32 %.pre3507, 7
  br label %after_bb157

"produce blur_x154":                              ; preds = %"for blur_y.s0.x.x.rebased148"
  %3243 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s155 = select i1 %3243, i32 %b125, i32 %4
  %t749 = add nsw i32 %blur_x.s0.x.v1.base.s155, %t1737
  %3244 = sext i32 %t749 to i64
  %3245 = getelementptr inbounds i16, i16* %read_input, i64 %3244
  %3246 = getelementptr inbounds i16, i16* %3245, i64 1
  %3247 = bitcast i16* %3246 to <16 x i16>*
  %3248 = load <16 x i16>, <16 x i16>* %3247, align 2, !tbaa !396
  %3249 = getelementptr inbounds i16, i16* %3245, i64 17
  %3250 = bitcast i16* %3249 to <16 x i16>*
  %3251 = load <16 x i16>, <16 x i16>* %3250, align 2, !tbaa !396
  %3252 = bitcast i16* %3245 to <16 x i16>*
  %3253 = load <16 x i16>, <16 x i16>* %3252, align 2, !tbaa !396
  %3254 = getelementptr inbounds i16, i16* %3245, i64 16
  %3255 = bitcast i16* %3254 to <16 x i16>*
  %3256 = load <16 x i16>, <16 x i16>* %3255, align 2, !tbaa !396
  %3257 = getelementptr inbounds i16, i16* %3245, i64 2
  %3258 = bitcast i16* %3257 to <16 x i16>*
  %3259 = load <16 x i16>, <16 x i16>* %3258, align 2, !tbaa !396
  %3260 = getelementptr inbounds i16, i16* %3245, i64 18
  %3261 = bitcast i16* %3260 to <16 x i16>*
  %3262 = load <16 x i16>, <16 x i16>* %3261, align 2, !tbaa !396
  %3263 = getelementptr inbounds i16, i16* %3245, i64 4
  %3264 = bitcast i16* %3263 to <16 x i16>*
  %3265 = load <16 x i16>, <16 x i16>* %3264, align 2, !tbaa !396
  %3266 = getelementptr inbounds i16, i16* %3245, i64 20
  %3267 = bitcast i16* %3266 to <16 x i16>*
  %3268 = load <16 x i16>, <16 x i16>* %3267, align 2, !tbaa !396
  %3269 = getelementptr inbounds i16, i16* %3245, i64 3
  %3270 = bitcast i16* %3269 to <16 x i16>*
  %3271 = load <16 x i16>, <16 x i16>* %3270, align 2, !tbaa !396
  %3272 = getelementptr inbounds i16, i16* %3245, i64 19
  %3273 = bitcast i16* %3272 to <16 x i16>*
  %3274 = load <16 x i16>, <16 x i16>* %3273, align 2, !tbaa !396
  %3275 = add <16 x i16> %3253, %3248
  %3276 = add <16 x i16> %3275, %3259
  %3277 = add <16 x i16> %3276, %3265
  %3278 = add <16 x i16> %3277, %3271
  %3279 = add <16 x i16> %3256, %3251
  %3280 = add <16 x i16> %3279, %3262
  %3281 = add <16 x i16> %3280, %3268
  %3282 = add <16 x i16> %3281, %3274
  %3283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3278, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3282, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3285 = shufflevector <16 x i16> %3283, <16 x i16> %3284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3286 = lshr <32 x i16> %3285, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3287 = shufflevector <32 x i16> %3286, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3288 = sext i32 %blur_x.s0.x.v1.base.s155 to i64
  %3289 = add nsw i64 %3288, %3113
  %3290 = getelementptr inbounds i16, i16* %blur_x, i64 %3289
  %3291 = bitcast i16* %3290 to <16 x i16>*
  store <16 x i16> %3287, <16 x i16>* %3291, align 2, !tbaa !399
  %3292 = shufflevector <32 x i16> %3286, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3293 = getelementptr inbounds i16, i16* %3290, i64 16
  %3294 = bitcast i16* %3293 to <16 x i16>*
  store <16 x i16> %3292, <16 x i16>* %3294, align 2, !tbaa !399
  br label %"consume blur_x156"

"consume blur_x156":                              ; preds = %"for blur_y.s0.x.x.rebased148", %"produce blur_x154"
  %3295 = sext i32 %b125 to i64
  %3296 = add nsw i64 %3116, %3295
  %3297 = getelementptr inbounds i16, i16* %blur_x, i64 %3296
  %3298 = bitcast i16* %3297 to <16 x i16>*
  %3299 = load <16 x i16>, <16 x i16>* %3298, align 2, !tbaa !399
  %3300 = getelementptr inbounds i16, i16* %3297, i64 16
  %3301 = bitcast i16* %3300 to <16 x i16>*
  %3302 = load <16 x i16>, <16 x i16>* %3301, align 2, !tbaa !399
  %3303 = add nsw i64 %3119, %3295
  %3304 = getelementptr inbounds i16, i16* %blur_x, i64 %3303
  %3305 = bitcast i16* %3304 to <16 x i16>*
  %3306 = load <16 x i16>, <16 x i16>* %3305, align 2, !tbaa !399
  %3307 = getelementptr inbounds i16, i16* %3304, i64 16
  %3308 = bitcast i16* %3307 to <16 x i16>*
  %3309 = load <16 x i16>, <16 x i16>* %3308, align 2, !tbaa !399
  %3310 = add nsw i64 %3122, %3295
  %3311 = getelementptr inbounds i16, i16* %blur_x, i64 %3310
  %3312 = bitcast i16* %3311 to <16 x i16>*
  %3313 = load <16 x i16>, <16 x i16>* %3312, align 2, !tbaa !399
  %3314 = getelementptr inbounds i16, i16* %3311, i64 16
  %3315 = bitcast i16* %3314 to <16 x i16>*
  %3316 = load <16 x i16>, <16 x i16>* %3315, align 2, !tbaa !399
  %3317 = add nsw i64 %3125, %3295
  %3318 = getelementptr inbounds i16, i16* %blur_x, i64 %3317
  %3319 = bitcast i16* %3318 to <16 x i16>*
  %3320 = load <16 x i16>, <16 x i16>* %3319, align 2, !tbaa !399
  %3321 = getelementptr inbounds i16, i16* %3318, i64 16
  %3322 = bitcast i16* %3321 to <16 x i16>*
  %3323 = load <16 x i16>, <16 x i16>* %3322, align 2, !tbaa !399
  %3324 = add nsw i64 %3128, %3295
  %3325 = getelementptr inbounds i16, i16* %blur_x, i64 %3324
  %3326 = bitcast i16* %3325 to <16 x i16>*
  %3327 = load <16 x i16>, <16 x i16>* %3326, align 2, !tbaa !399
  %3328 = getelementptr inbounds i16, i16* %3325, i64 16
  %3329 = bitcast i16* %3328 to <16 x i16>*
  %3330 = load <16 x i16>, <16 x i16>* %3329, align 2, !tbaa !399
  %3331 = add <16 x i16> %3306, %3299
  %3332 = add <16 x i16> %3331, %3313
  %3333 = add <16 x i16> %3332, %3320
  %3334 = add <16 x i16> %3333, %3327
  %3335 = add <16 x i16> %3309, %3302
  %3336 = add <16 x i16> %3335, %3316
  %3337 = add <16 x i16> %3336, %3323
  %3338 = add <16 x i16> %3337, %3330
  %3339 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3334, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3340 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3338, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3341 = shufflevector <16 x i16> %3339, <16 x i16> %3340, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3342 = lshr <32 x i16> %3341, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3343 = shufflevector <32 x i16> %3342, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3344 = add nsw i64 %3132, %3295
  %3345 = getelementptr inbounds i16, i16* %66, i64 %3344
  %3346 = bitcast i16* %3345 to <16 x i16>*
  store <16 x i16> %3343, <16 x i16>* %3346, align 2, !tbaa !401
  %3347 = shufflevector <32 x i16> %3342, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3348 = getelementptr inbounds i16, i16* %3345, i64 16
  %3349 = bitcast i16* %3348 to <16 x i16>*
  store <16 x i16> %3347, <16 x i16>* %3349, align 2, !tbaa !401
  %3350 = add nuw nsw i32 %blur_y.s0.x.x.rebased150, 1
  %.not2752 = icmp eq i32 %3350, %t1683
  br i1 %.not2752, label %"end for blur_y.s0.x.x.rebased149", label %"for blur_y.s0.x.x.rebased148"

after_bb157:                                      ; preds = %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge", %"produce blur_x160"
  %.pre-phi3510 = phi i32 [ %.pre3509, %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge" ], [ %3417, %"produce blur_x160" ]
  %3351 = mul nsw i32 %.pre-phi3510, %a73
  %t1754 = sub nsw i32 %3351, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased162.preheader", label %"end for blur_y.s0.x.x.rebased163", !prof !386

"for blur_y.s0.x.x.rebased162.preheader":         ; preds = %after_bb157
  %3352 = sext i32 %t1754 to i64
  %3353 = zext i32 %.pre-phi3492 to i64
  %3354 = mul nsw i64 %3353, %112
  %3355 = sub nsw i64 %3354, %96
  %3356 = zext i32 %.pre-phi3488 to i64
  %3357 = mul nsw i64 %3356, %112
  %3358 = sub nsw i64 %3357, %96
  %3359 = zext i32 %.pre-phi3498 to i64
  %3360 = mul nsw i64 %3359, %112
  %3361 = sub nsw i64 %3360, %96
  %3362 = zext i32 %.pre-phi3510 to i64
  %3363 = mul nsw i64 %3362, %112
  %3364 = sub nsw i64 %3363, %96
  %3365 = zext i32 %.pre-phi3504 to i64
  %3366 = mul nsw i64 %3365, %112
  %3367 = sub nsw i64 %3366, %96
  %3368 = sext i32 %a26 to i64
  %3369 = add nsw i64 %3368, 3
  %3370 = mul nsw i64 %3369, %113
  %3371 = add nsw i64 %3370, %116
  br label %"for blur_y.s0.x.x.rebased162"

"produce blur_x160":                              ; preds = %"end for blur_y.s0.x.x.rebased149"
  %3372 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3373 = getelementptr inbounds i16, i16* %3372, i64 -31
  %3374 = bitcast i16* %3373 to <16 x i16>*
  %3375 = load <16 x i16>, <16 x i16>* %3374, align 2, !tbaa !396
  %3376 = getelementptr inbounds i16, i16* %3372, i64 -15
  %3377 = bitcast i16* %3376 to <16 x i16>*
  %3378 = load <16 x i16>, <16 x i16>* %3377, align 2, !tbaa !396
  %3379 = getelementptr inbounds i16, i16* %3372, i64 -32
  %3380 = bitcast i16* %3379 to <16 x i16>*
  %3381 = load <16 x i16>, <16 x i16>* %3380, align 2, !tbaa !396
  %3382 = getelementptr inbounds i16, i16* %3372, i64 -16
  %3383 = bitcast i16* %3382 to <16 x i16>*
  %3384 = load <16 x i16>, <16 x i16>* %3383, align 2, !tbaa !396
  %3385 = getelementptr inbounds i16, i16* %3372, i64 -30
  %3386 = bitcast i16* %3385 to <16 x i16>*
  %3387 = load <16 x i16>, <16 x i16>* %3386, align 2, !tbaa !396
  %3388 = getelementptr inbounds i16, i16* %3372, i64 -14
  %3389 = bitcast i16* %3388 to <16 x i16>*
  %3390 = load <16 x i16>, <16 x i16>* %3389, align 2, !tbaa !396
  %3391 = getelementptr inbounds i16, i16* %3372, i64 -28
  %3392 = bitcast i16* %3391 to <16 x i16>*
  %3393 = load <16 x i16>, <16 x i16>* %3392, align 2, !tbaa !396
  %3394 = getelementptr inbounds i16, i16* %3372, i64 -12
  %3395 = bitcast i16* %3394 to <16 x i16>*
  %3396 = load <16 x i16>, <16 x i16>* %3395, align 2, !tbaa !396
  %3397 = getelementptr inbounds i16, i16* %3372, i64 -29
  %3398 = bitcast i16* %3397 to <16 x i16>*
  %3399 = load <16 x i16>, <16 x i16>* %3398, align 2, !tbaa !396
  %3400 = getelementptr inbounds i16, i16* %3372, i64 -13
  %3401 = bitcast i16* %3400 to <16 x i16>*
  %3402 = load <16 x i16>, <16 x i16>* %3401, align 2, !tbaa !396
  %3403 = add <16 x i16> %3381, %3375
  %3404 = add <16 x i16> %3403, %3387
  %3405 = add <16 x i16> %3404, %3393
  %3406 = add <16 x i16> %3405, %3399
  %3407 = add <16 x i16> %3384, %3378
  %3408 = add <16 x i16> %3407, %3390
  %3409 = add <16 x i16> %3408, %3396
  %3410 = add <16 x i16> %3409, %3402
  %3411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3406, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3412 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3410, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3413 = shufflevector <16 x i16> %3411, <16 x i16> %3412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3414 = lshr <32 x i16> %3413, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3415 = shufflevector <32 x i16> %3414, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3416 = add nsw i32 %a26, 7
  %3417 = and i32 %3416, 7
  %3418 = zext i32 %3417 to i64
  %3419 = mul nsw i64 %97, %3418
  %3420 = add nsw i64 %99, %3419
  %3421 = getelementptr inbounds i16, i16* %blur_x, i64 %3420
  %3422 = getelementptr inbounds i16, i16* %3421, i64 -32
  %3423 = bitcast i16* %3422 to <16 x i16>*
  store <16 x i16> %3415, <16 x i16>* %3423, align 2, !tbaa !399
  %3424 = shufflevector <32 x i16> %3414, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3425 = getelementptr inbounds i16, i16* %3421, i64 -16
  %3426 = bitcast i16* %3425 to <16 x i16>*
  store <16 x i16> %3424, <16 x i16>* %3426, align 2, !tbaa !399
  %3427 = zext i32 %.pre-phi3492 to i64
  %3428 = mul nsw i64 %3427, %112
  %3429 = add nsw i64 %3428, %94
  %3430 = getelementptr inbounds i16, i16* %blur_x, i64 %3429
  %3431 = getelementptr inbounds i16, i16* %3430, i64 -32
  %3432 = bitcast i16* %3431 to <16 x i16>*
  %3433 = load <16 x i16>, <16 x i16>* %3432, align 2, !tbaa !399
  %3434 = getelementptr inbounds i16, i16* %3430, i64 -16
  %3435 = bitcast i16* %3434 to <16 x i16>*
  %3436 = load <16 x i16>, <16 x i16>* %3435, align 2, !tbaa !399
  %3437 = zext i32 %.pre-phi3488 to i64
  %3438 = mul nsw i64 %3437, %112
  %3439 = add nsw i64 %3438, %94
  %3440 = getelementptr inbounds i16, i16* %blur_x, i64 %3439
  %3441 = getelementptr inbounds i16, i16* %3440, i64 -32
  %3442 = bitcast i16* %3441 to <16 x i16>*
  %3443 = load <16 x i16>, <16 x i16>* %3442, align 2, !tbaa !399
  %3444 = getelementptr inbounds i16, i16* %3440, i64 -16
  %3445 = bitcast i16* %3444 to <16 x i16>*
  %3446 = load <16 x i16>, <16 x i16>* %3445, align 2, !tbaa !399
  %3447 = zext i32 %.pre-phi3498 to i64
  %3448 = mul nsw i64 %3447, %112
  %3449 = add nsw i64 %3448, %94
  %3450 = getelementptr inbounds i16, i16* %blur_x, i64 %3449
  %3451 = getelementptr inbounds i16, i16* %3450, i64 -32
  %3452 = bitcast i16* %3451 to <16 x i16>*
  %3453 = load <16 x i16>, <16 x i16>* %3452, align 2, !tbaa !399
  %3454 = getelementptr inbounds i16, i16* %3450, i64 -16
  %3455 = bitcast i16* %3454 to <16 x i16>*
  %3456 = load <16 x i16>, <16 x i16>* %3455, align 2, !tbaa !399
  %3457 = mul nsw i64 %3418, %112
  %3458 = add nsw i64 %3457, %94
  %3459 = getelementptr inbounds i16, i16* %blur_x, i64 %3458
  %3460 = getelementptr inbounds i16, i16* %3459, i64 -32
  %3461 = bitcast i16* %3460 to <16 x i16>*
  %3462 = load <16 x i16>, <16 x i16>* %3461, align 2, !tbaa !399
  %3463 = getelementptr inbounds i16, i16* %3459, i64 -16
  %3464 = bitcast i16* %3463 to <16 x i16>*
  %3465 = load <16 x i16>, <16 x i16>* %3464, align 2, !tbaa !399
  %3466 = zext i32 %.pre-phi3504 to i64
  %3467 = mul nsw i64 %3466, %112
  %3468 = add nsw i64 %3467, %94
  %3469 = getelementptr inbounds i16, i16* %blur_x, i64 %3468
  %3470 = getelementptr inbounds i16, i16* %3469, i64 -32
  %3471 = bitcast i16* %3470 to <16 x i16>*
  %3472 = load <16 x i16>, <16 x i16>* %3471, align 2, !tbaa !399
  %3473 = getelementptr inbounds i16, i16* %3469, i64 -16
  %3474 = bitcast i16* %3473 to <16 x i16>*
  %3475 = load <16 x i16>, <16 x i16>* %3474, align 2, !tbaa !399
  %3476 = add <16 x i16> %3443, %3433
  %3477 = add <16 x i16> %3476, %3453
  %3478 = add <16 x i16> %3477, %3462
  %3479 = add <16 x i16> %3478, %3472
  %3480 = add <16 x i16> %3446, %3436
  %3481 = add <16 x i16> %3480, %3456
  %3482 = add <16 x i16> %3481, %3465
  %3483 = add <16 x i16> %3482, %3475
  %3484 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3479, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3485 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3483, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3486 = shufflevector <16 x i16> %3484, <16 x i16> %3485, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3487 = lshr <32 x i16> %3486, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3488 = shufflevector <32 x i16> %3487, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3489 = sext i32 %a26 to i64
  %3490 = add nsw i64 %3489, 3
  %3491 = mul nsw i64 %3490, %113
  %3492 = add nsw i64 %115, %3491
  %3493 = getelementptr inbounds i16, i16* %66, i64 %3492
  %3494 = getelementptr inbounds i16, i16* %3493, i64 -32
  %3495 = bitcast i16* %3494 to <16 x i16>*
  store <16 x i16> %3488, <16 x i16>* %3495, align 2, !tbaa !401
  %3496 = shufflevector <32 x i16> %3487, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3497 = getelementptr inbounds i16, i16* %3493, i64 -16
  %3498 = bitcast i16* %3497 to <16 x i16>*
  store <16 x i16> %3496, <16 x i16>* %3498, align 2, !tbaa !401
  br label %after_bb157

"for blur_y.s0.x.x.rebased162":                   ; preds = %"for blur_y.s0.x.x.rebased162.preheader", %"consume blur_x169"
  %indvars.iv3268 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased162.preheader" ], [ %indvars.iv.next3269, %"consume blur_x169" ]
  %3499 = add nsw i64 %indvars.iv3268, %101
  %3500 = icmp slt i64 %3499, 1
  %3501 = trunc i64 %3499 to i32
  %3502 = shl nsw i32 %3501, 5
  %3503 = icmp sgt i32 %4, %3502
  %3504 = or i1 %3500, %3503
  br i1 %3504, label %"produce blur_x168", label %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge"

"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased162"
  %.pre3511 = shl nsw i64 %3499, 5
  br label %"consume blur_x169"

"end for blur_y.s0.x.x.rebased163":               ; preds = %"consume blur_x169", %after_bb157
  br i1 %102, label %"for blur_y.s0.x.x.rebased170.preheader", label %"end for blur_y.s0.x.x.rebased171", !prof !386

"for blur_y.s0.x.x.rebased170.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased163"
  %3505 = sext i32 %t1754 to i64
  %3506 = zext i32 %.pre-phi3492 to i64
  %3507 = mul nsw i64 %3506, %112
  %3508 = sub nsw i64 %3507, %96
  %3509 = zext i32 %.pre-phi3488 to i64
  %3510 = mul nsw i64 %3509, %112
  %3511 = sub nsw i64 %3510, %96
  %3512 = zext i32 %.pre-phi3498 to i64
  %3513 = mul nsw i64 %3512, %112
  %3514 = sub nsw i64 %3513, %96
  %3515 = zext i32 %.pre-phi3510 to i64
  %3516 = mul nsw i64 %3515, %112
  %3517 = sub nsw i64 %3516, %96
  %3518 = zext i32 %.pre-phi3504 to i64
  %3519 = mul nsw i64 %3518, %112
  %3520 = sub nsw i64 %3519, %96
  %3521 = sext i32 %a26 to i64
  %3522 = add nsw i64 %3521, 3
  %3523 = mul nsw i64 %3522, %113
  %3524 = add nsw i64 %3523, %116
  br label %"for blur_y.s0.x.x.rebased170"

"produce blur_x168":                              ; preds = %"for blur_y.s0.x.x.rebased162"
  %t760 = add nsw i32 %3502, %t1753
  %3525 = sext i32 %t760 to i64
  %3526 = getelementptr inbounds i16, i16* %read_input, i64 %3525
  %3527 = getelementptr inbounds i16, i16* %3526, i64 1
  %3528 = bitcast i16* %3527 to <16 x i16>*
  %3529 = load <16 x i16>, <16 x i16>* %3528, align 2, !tbaa !396
  %3530 = getelementptr inbounds i16, i16* %3526, i64 17
  %3531 = bitcast i16* %3530 to <16 x i16>*
  %3532 = load <16 x i16>, <16 x i16>* %3531, align 2, !tbaa !396
  %3533 = bitcast i16* %3526 to <16 x i16>*
  %3534 = load <16 x i16>, <16 x i16>* %3533, align 2, !tbaa !396
  %3535 = getelementptr inbounds i16, i16* %3526, i64 16
  %3536 = bitcast i16* %3535 to <16 x i16>*
  %3537 = load <16 x i16>, <16 x i16>* %3536, align 2, !tbaa !396
  %3538 = getelementptr inbounds i16, i16* %3526, i64 2
  %3539 = bitcast i16* %3538 to <16 x i16>*
  %3540 = load <16 x i16>, <16 x i16>* %3539, align 2, !tbaa !396
  %3541 = getelementptr inbounds i16, i16* %3526, i64 18
  %3542 = bitcast i16* %3541 to <16 x i16>*
  %3543 = load <16 x i16>, <16 x i16>* %3542, align 2, !tbaa !396
  %3544 = getelementptr inbounds i16, i16* %3526, i64 4
  %3545 = bitcast i16* %3544 to <16 x i16>*
  %3546 = load <16 x i16>, <16 x i16>* %3545, align 2, !tbaa !396
  %3547 = getelementptr inbounds i16, i16* %3526, i64 20
  %3548 = bitcast i16* %3547 to <16 x i16>*
  %3549 = load <16 x i16>, <16 x i16>* %3548, align 2, !tbaa !396
  %3550 = getelementptr inbounds i16, i16* %3526, i64 3
  %3551 = bitcast i16* %3550 to <16 x i16>*
  %3552 = load <16 x i16>, <16 x i16>* %3551, align 2, !tbaa !396
  %3553 = getelementptr inbounds i16, i16* %3526, i64 19
  %3554 = bitcast i16* %3553 to <16 x i16>*
  %3555 = load <16 x i16>, <16 x i16>* %3554, align 2, !tbaa !396
  %3556 = add <16 x i16> %3534, %3529
  %3557 = add <16 x i16> %3556, %3540
  %3558 = add <16 x i16> %3557, %3546
  %3559 = add <16 x i16> %3558, %3552
  %3560 = add <16 x i16> %3537, %3532
  %3561 = add <16 x i16> %3560, %3543
  %3562 = add <16 x i16> %3561, %3549
  %3563 = add <16 x i16> %3562, %3555
  %3564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3559, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3563, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3566 = shufflevector <16 x i16> %3564, <16 x i16> %3565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3567 = lshr <32 x i16> %3566, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3568 = shufflevector <32 x i16> %3567, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3569 = shl nsw i64 %3499, 5
  %3570 = add nsw i64 %3569, %3352
  %3571 = getelementptr inbounds i16, i16* %blur_x, i64 %3570
  %3572 = bitcast i16* %3571 to <16 x i16>*
  store <16 x i16> %3568, <16 x i16>* %3572, align 2, !tbaa !399
  %3573 = shufflevector <32 x i16> %3567, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3574 = getelementptr inbounds i16, i16* %3571, i64 16
  %3575 = bitcast i16* %3574 to <16 x i16>*
  store <16 x i16> %3573, <16 x i16>* %3575, align 2, !tbaa !399
  br label %"consume blur_x169"

"consume blur_x169":                              ; preds = %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge", %"produce blur_x168"
  %.pre-phi3512 = phi i64 [ %.pre3511, %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge" ], [ %3569, %"produce blur_x168" ]
  %3576 = add nsw i64 %3355, %.pre-phi3512
  %3577 = getelementptr inbounds i16, i16* %blur_x, i64 %3576
  %3578 = bitcast i16* %3577 to <16 x i16>*
  %3579 = load <16 x i16>, <16 x i16>* %3578, align 2, !tbaa !399
  %3580 = getelementptr inbounds i16, i16* %3577, i64 16
  %3581 = bitcast i16* %3580 to <16 x i16>*
  %3582 = load <16 x i16>, <16 x i16>* %3581, align 2, !tbaa !399
  %3583 = add nsw i64 %3358, %.pre-phi3512
  %3584 = getelementptr inbounds i16, i16* %blur_x, i64 %3583
  %3585 = bitcast i16* %3584 to <16 x i16>*
  %3586 = load <16 x i16>, <16 x i16>* %3585, align 2, !tbaa !399
  %3587 = getelementptr inbounds i16, i16* %3584, i64 16
  %3588 = bitcast i16* %3587 to <16 x i16>*
  %3589 = load <16 x i16>, <16 x i16>* %3588, align 2, !tbaa !399
  %3590 = add nsw i64 %3361, %.pre-phi3512
  %3591 = getelementptr inbounds i16, i16* %blur_x, i64 %3590
  %3592 = bitcast i16* %3591 to <16 x i16>*
  %3593 = load <16 x i16>, <16 x i16>* %3592, align 2, !tbaa !399
  %3594 = getelementptr inbounds i16, i16* %3591, i64 16
  %3595 = bitcast i16* %3594 to <16 x i16>*
  %3596 = load <16 x i16>, <16 x i16>* %3595, align 2, !tbaa !399
  %3597 = add nsw i64 %3364, %.pre-phi3512
  %3598 = getelementptr inbounds i16, i16* %blur_x, i64 %3597
  %3599 = bitcast i16* %3598 to <16 x i16>*
  %3600 = load <16 x i16>, <16 x i16>* %3599, align 2, !tbaa !399
  %3601 = getelementptr inbounds i16, i16* %3598, i64 16
  %3602 = bitcast i16* %3601 to <16 x i16>*
  %3603 = load <16 x i16>, <16 x i16>* %3602, align 2, !tbaa !399
  %3604 = add nsw i64 %3367, %.pre-phi3512
  %3605 = getelementptr inbounds i16, i16* %blur_x, i64 %3604
  %3606 = bitcast i16* %3605 to <16 x i16>*
  %3607 = load <16 x i16>, <16 x i16>* %3606, align 2, !tbaa !399
  %3608 = getelementptr inbounds i16, i16* %3605, i64 16
  %3609 = bitcast i16* %3608 to <16 x i16>*
  %3610 = load <16 x i16>, <16 x i16>* %3609, align 2, !tbaa !399
  %3611 = add <16 x i16> %3586, %3579
  %3612 = add <16 x i16> %3611, %3593
  %3613 = add <16 x i16> %3612, %3600
  %3614 = add <16 x i16> %3613, %3607
  %3615 = add <16 x i16> %3589, %3582
  %3616 = add <16 x i16> %3615, %3596
  %3617 = add <16 x i16> %3616, %3603
  %3618 = add <16 x i16> %3617, %3610
  %3619 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3614, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3620 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3618, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3621 = shufflevector <16 x i16> %3619, <16 x i16> %3620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3622 = lshr <32 x i16> %3621, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3623 = shufflevector <32 x i16> %3622, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3624 = add nsw i64 %3371, %.pre-phi3512
  %3625 = getelementptr inbounds i16, i16* %66, i64 %3624
  %3626 = bitcast i16* %3625 to <16 x i16>*
  store <16 x i16> %3623, <16 x i16>* %3626, align 2, !tbaa !401
  %3627 = shufflevector <32 x i16> %3622, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3628 = getelementptr inbounds i16, i16* %3625, i64 16
  %3629 = bitcast i16* %3628 to <16 x i16>*
  store <16 x i16> %3627, <16 x i16>* %3629, align 2, !tbaa !401
  %indvars.iv.next3269 = add nuw nsw i64 %indvars.iv3268, 1
  %.not2751 = icmp eq i64 %indvars.iv.next3269, %184
  br i1 %.not2751, label %"end for blur_y.s0.x.x.rebased163", label %"for blur_y.s0.x.x.rebased162"

"for blur_y.s0.x.x.rebased170":                   ; preds = %"for blur_y.s0.x.x.rebased170.preheader", %"consume blur_x178"
  %blur_y.s0.x.x.rebased172 = phi i32 [ %3742, %"consume blur_x178" ], [ 0, %"for blur_y.s0.x.x.rebased170.preheader" ]
  %3630 = add nsw i32 %blur_y.s0.x.x.rebased172, %t1626
  %a126 = shl nsw i32 %3630, 5
  %3631 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3631, i32 %a126, i32 %a14
  %3632 = icmp slt i32 %3630, 1
  %3633 = icmp sgt i32 %4, %a126
  %3634 = or i1 %3632, %3633
  br i1 %3634, label %"produce blur_x176", label %"consume blur_x178"

"end for blur_y.s0.x.x.rebased171":               ; preds = %"consume blur_x178", %"end for blur_y.s0.x.x.rebased163"
  br i1 %34, label %"produce blur_x182", label %after_bb179

"produce blur_x176":                              ; preds = %"for blur_y.s0.x.x.rebased170"
  %3635 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s177 = select i1 %3635, i32 %b132, i32 %4
  %t765 = add nsw i32 %blur_x.s0.x.v1.base.s177, %t1753
  %3636 = sext i32 %t765 to i64
  %3637 = getelementptr inbounds i16, i16* %read_input, i64 %3636
  %3638 = getelementptr inbounds i16, i16* %3637, i64 1
  %3639 = bitcast i16* %3638 to <16 x i16>*
  %3640 = load <16 x i16>, <16 x i16>* %3639, align 2, !tbaa !396
  %3641 = getelementptr inbounds i16, i16* %3637, i64 17
  %3642 = bitcast i16* %3641 to <16 x i16>*
  %3643 = load <16 x i16>, <16 x i16>* %3642, align 2, !tbaa !396
  %3644 = bitcast i16* %3637 to <16 x i16>*
  %3645 = load <16 x i16>, <16 x i16>* %3644, align 2, !tbaa !396
  %3646 = getelementptr inbounds i16, i16* %3637, i64 16
  %3647 = bitcast i16* %3646 to <16 x i16>*
  %3648 = load <16 x i16>, <16 x i16>* %3647, align 2, !tbaa !396
  %3649 = getelementptr inbounds i16, i16* %3637, i64 2
  %3650 = bitcast i16* %3649 to <16 x i16>*
  %3651 = load <16 x i16>, <16 x i16>* %3650, align 2, !tbaa !396
  %3652 = getelementptr inbounds i16, i16* %3637, i64 18
  %3653 = bitcast i16* %3652 to <16 x i16>*
  %3654 = load <16 x i16>, <16 x i16>* %3653, align 2, !tbaa !396
  %3655 = getelementptr inbounds i16, i16* %3637, i64 4
  %3656 = bitcast i16* %3655 to <16 x i16>*
  %3657 = load <16 x i16>, <16 x i16>* %3656, align 2, !tbaa !396
  %3658 = getelementptr inbounds i16, i16* %3637, i64 20
  %3659 = bitcast i16* %3658 to <16 x i16>*
  %3660 = load <16 x i16>, <16 x i16>* %3659, align 2, !tbaa !396
  %3661 = getelementptr inbounds i16, i16* %3637, i64 3
  %3662 = bitcast i16* %3661 to <16 x i16>*
  %3663 = load <16 x i16>, <16 x i16>* %3662, align 2, !tbaa !396
  %3664 = getelementptr inbounds i16, i16* %3637, i64 19
  %3665 = bitcast i16* %3664 to <16 x i16>*
  %3666 = load <16 x i16>, <16 x i16>* %3665, align 2, !tbaa !396
  %3667 = add <16 x i16> %3645, %3640
  %3668 = add <16 x i16> %3667, %3651
  %3669 = add <16 x i16> %3668, %3657
  %3670 = add <16 x i16> %3669, %3663
  %3671 = add <16 x i16> %3648, %3643
  %3672 = add <16 x i16> %3671, %3654
  %3673 = add <16 x i16> %3672, %3660
  %3674 = add <16 x i16> %3673, %3666
  %3675 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3670, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3674, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3677 = shufflevector <16 x i16> %3675, <16 x i16> %3676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3678 = lshr <32 x i16> %3677, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3679 = shufflevector <32 x i16> %3678, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3680 = sext i32 %blur_x.s0.x.v1.base.s177 to i64
  %3681 = add nsw i64 %3680, %3505
  %3682 = getelementptr inbounds i16, i16* %blur_x, i64 %3681
  %3683 = bitcast i16* %3682 to <16 x i16>*
  store <16 x i16> %3679, <16 x i16>* %3683, align 2, !tbaa !399
  %3684 = shufflevector <32 x i16> %3678, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3685 = getelementptr inbounds i16, i16* %3682, i64 16
  %3686 = bitcast i16* %3685 to <16 x i16>*
  store <16 x i16> %3684, <16 x i16>* %3686, align 2, !tbaa !399
  br label %"consume blur_x178"

"consume blur_x178":                              ; preds = %"for blur_y.s0.x.x.rebased170", %"produce blur_x176"
  %3687 = sext i32 %b132 to i64
  %3688 = add nsw i64 %3508, %3687
  %3689 = getelementptr inbounds i16, i16* %blur_x, i64 %3688
  %3690 = bitcast i16* %3689 to <16 x i16>*
  %3691 = load <16 x i16>, <16 x i16>* %3690, align 2, !tbaa !399
  %3692 = getelementptr inbounds i16, i16* %3689, i64 16
  %3693 = bitcast i16* %3692 to <16 x i16>*
  %3694 = load <16 x i16>, <16 x i16>* %3693, align 2, !tbaa !399
  %3695 = add nsw i64 %3511, %3687
  %3696 = getelementptr inbounds i16, i16* %blur_x, i64 %3695
  %3697 = bitcast i16* %3696 to <16 x i16>*
  %3698 = load <16 x i16>, <16 x i16>* %3697, align 2, !tbaa !399
  %3699 = getelementptr inbounds i16, i16* %3696, i64 16
  %3700 = bitcast i16* %3699 to <16 x i16>*
  %3701 = load <16 x i16>, <16 x i16>* %3700, align 2, !tbaa !399
  %3702 = add nsw i64 %3514, %3687
  %3703 = getelementptr inbounds i16, i16* %blur_x, i64 %3702
  %3704 = bitcast i16* %3703 to <16 x i16>*
  %3705 = load <16 x i16>, <16 x i16>* %3704, align 2, !tbaa !399
  %3706 = getelementptr inbounds i16, i16* %3703, i64 16
  %3707 = bitcast i16* %3706 to <16 x i16>*
  %3708 = load <16 x i16>, <16 x i16>* %3707, align 2, !tbaa !399
  %3709 = add nsw i64 %3517, %3687
  %3710 = getelementptr inbounds i16, i16* %blur_x, i64 %3709
  %3711 = bitcast i16* %3710 to <16 x i16>*
  %3712 = load <16 x i16>, <16 x i16>* %3711, align 2, !tbaa !399
  %3713 = getelementptr inbounds i16, i16* %3710, i64 16
  %3714 = bitcast i16* %3713 to <16 x i16>*
  %3715 = load <16 x i16>, <16 x i16>* %3714, align 2, !tbaa !399
  %3716 = add nsw i64 %3520, %3687
  %3717 = getelementptr inbounds i16, i16* %blur_x, i64 %3716
  %3718 = bitcast i16* %3717 to <16 x i16>*
  %3719 = load <16 x i16>, <16 x i16>* %3718, align 2, !tbaa !399
  %3720 = getelementptr inbounds i16, i16* %3717, i64 16
  %3721 = bitcast i16* %3720 to <16 x i16>*
  %3722 = load <16 x i16>, <16 x i16>* %3721, align 2, !tbaa !399
  %3723 = add <16 x i16> %3698, %3691
  %3724 = add <16 x i16> %3723, %3705
  %3725 = add <16 x i16> %3724, %3712
  %3726 = add <16 x i16> %3725, %3719
  %3727 = add <16 x i16> %3701, %3694
  %3728 = add <16 x i16> %3727, %3708
  %3729 = add <16 x i16> %3728, %3715
  %3730 = add <16 x i16> %3729, %3722
  %3731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3726, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3730, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3733 = shufflevector <16 x i16> %3731, <16 x i16> %3732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3734 = lshr <32 x i16> %3733, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3735 = shufflevector <32 x i16> %3734, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3736 = add nsw i64 %3524, %3687
  %3737 = getelementptr inbounds i16, i16* %66, i64 %3736
  %3738 = bitcast i16* %3737 to <16 x i16>*
  store <16 x i16> %3735, <16 x i16>* %3738, align 2, !tbaa !401
  %3739 = shufflevector <32 x i16> %3734, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3740 = getelementptr inbounds i16, i16* %3737, i64 16
  %3741 = bitcast i16* %3740 to <16 x i16>*
  store <16 x i16> %3739, <16 x i16>* %3741, align 2, !tbaa !401
  %3742 = add nuw nsw i32 %blur_y.s0.x.x.rebased172, 1
  %.not2750 = icmp eq i32 %3742, %t1683
  br i1 %.not2750, label %"end for blur_y.s0.x.x.rebased171", label %"for blur_y.s0.x.x.rebased170"

after_bb179:                                      ; preds = %"end for blur_y.s0.x.x.rebased171", %"produce blur_x182"
  br i1 %100, label %"for blur_y.s0.x.x.rebased184.preheader", label %"end for blur_y.s0.x.x.rebased185", !prof !386

"for blur_y.s0.x.x.rebased184.preheader":         ; preds = %after_bb179
  %3743 = sext i32 %t1682 to i64
  %3744 = zext i32 %.pre-phi3498 to i64
  %3745 = mul nsw i64 %3744, %112
  %3746 = sub nsw i64 %3745, %96
  %3747 = zext i32 %.pre-phi3492 to i64
  %3748 = mul nsw i64 %3747, %112
  %3749 = sub nsw i64 %3748, %96
  %3750 = zext i32 %.pre-phi3504 to i64
  %3751 = mul nsw i64 %3750, %112
  %3752 = sub nsw i64 %3751, %96
  %3753 = zext i32 %.pre-phi to i64
  %3754 = mul nsw i64 %3753, %112
  %3755 = sub nsw i64 %3754, %96
  %3756 = zext i32 %.pre-phi3510 to i64
  %3757 = mul nsw i64 %3756, %112
  %3758 = sub nsw i64 %3757, %96
  %3759 = sext i32 %a26 to i64
  %3760 = add nsw i64 %3759, 4
  %3761 = mul nsw i64 %3760, %113
  %3762 = add nsw i64 %3761, %116
  br label %"for blur_y.s0.x.x.rebased184"

"produce blur_x182":                              ; preds = %"end for blur_y.s0.x.x.rebased171"
  %3763 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3764 = getelementptr inbounds i16, i16* %3763, i64 -31
  %3765 = bitcast i16* %3764 to <16 x i16>*
  %3766 = load <16 x i16>, <16 x i16>* %3765, align 2, !tbaa !396
  %3767 = getelementptr inbounds i16, i16* %3763, i64 -15
  %3768 = bitcast i16* %3767 to <16 x i16>*
  %3769 = load <16 x i16>, <16 x i16>* %3768, align 2, !tbaa !396
  %3770 = getelementptr inbounds i16, i16* %3763, i64 -32
  %3771 = bitcast i16* %3770 to <16 x i16>*
  %3772 = load <16 x i16>, <16 x i16>* %3771, align 2, !tbaa !396
  %3773 = getelementptr inbounds i16, i16* %3763, i64 -16
  %3774 = bitcast i16* %3773 to <16 x i16>*
  %3775 = load <16 x i16>, <16 x i16>* %3774, align 2, !tbaa !396
  %3776 = getelementptr inbounds i16, i16* %3763, i64 -30
  %3777 = bitcast i16* %3776 to <16 x i16>*
  %3778 = load <16 x i16>, <16 x i16>* %3777, align 2, !tbaa !396
  %3779 = getelementptr inbounds i16, i16* %3763, i64 -14
  %3780 = bitcast i16* %3779 to <16 x i16>*
  %3781 = load <16 x i16>, <16 x i16>* %3780, align 2, !tbaa !396
  %3782 = getelementptr inbounds i16, i16* %3763, i64 -28
  %3783 = bitcast i16* %3782 to <16 x i16>*
  %3784 = load <16 x i16>, <16 x i16>* %3783, align 2, !tbaa !396
  %3785 = getelementptr inbounds i16, i16* %3763, i64 -12
  %3786 = bitcast i16* %3785 to <16 x i16>*
  %3787 = load <16 x i16>, <16 x i16>* %3786, align 2, !tbaa !396
  %3788 = getelementptr inbounds i16, i16* %3763, i64 -29
  %3789 = bitcast i16* %3788 to <16 x i16>*
  %3790 = load <16 x i16>, <16 x i16>* %3789, align 2, !tbaa !396
  %3791 = getelementptr inbounds i16, i16* %3763, i64 -13
  %3792 = bitcast i16* %3791 to <16 x i16>*
  %3793 = load <16 x i16>, <16 x i16>* %3792, align 2, !tbaa !396
  %3794 = add <16 x i16> %3772, %3766
  %3795 = add <16 x i16> %3794, %3778
  %3796 = add <16 x i16> %3795, %3784
  %3797 = add <16 x i16> %3796, %3790
  %3798 = add <16 x i16> %3775, %3769
  %3799 = add <16 x i16> %3798, %3781
  %3800 = add <16 x i16> %3799, %3787
  %3801 = add <16 x i16> %3800, %3793
  %3802 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3797, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3801, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3804 = shufflevector <16 x i16> %3802, <16 x i16> %3803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3805 = lshr <32 x i16> %3804, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3806 = shufflevector <32 x i16> %3805, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3807 = zext i32 %.pre-phi to i64
  %3808 = mul nsw i64 %97, %3807
  %3809 = add nsw i64 %99, %3808
  %3810 = getelementptr inbounds i16, i16* %blur_x, i64 %3809
  %3811 = getelementptr inbounds i16, i16* %3810, i64 -32
  %3812 = bitcast i16* %3811 to <16 x i16>*
  store <16 x i16> %3806, <16 x i16>* %3812, align 2, !tbaa !399
  %3813 = shufflevector <32 x i16> %3805, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3814 = getelementptr inbounds i16, i16* %3810, i64 -16
  %3815 = bitcast i16* %3814 to <16 x i16>*
  store <16 x i16> %3813, <16 x i16>* %3815, align 2, !tbaa !399
  %3816 = zext i32 %.pre-phi3498 to i64
  %3817 = mul nsw i64 %3816, %112
  %3818 = add nsw i64 %3817, %94
  %3819 = getelementptr inbounds i16, i16* %blur_x, i64 %3818
  %3820 = getelementptr inbounds i16, i16* %3819, i64 -32
  %3821 = bitcast i16* %3820 to <16 x i16>*
  %3822 = load <16 x i16>, <16 x i16>* %3821, align 2, !tbaa !399
  %3823 = getelementptr inbounds i16, i16* %3819, i64 -16
  %3824 = bitcast i16* %3823 to <16 x i16>*
  %3825 = load <16 x i16>, <16 x i16>* %3824, align 2, !tbaa !399
  %3826 = zext i32 %.pre-phi3492 to i64
  %3827 = mul nsw i64 %3826, %112
  %3828 = add nsw i64 %3827, %94
  %3829 = getelementptr inbounds i16, i16* %blur_x, i64 %3828
  %3830 = getelementptr inbounds i16, i16* %3829, i64 -32
  %3831 = bitcast i16* %3830 to <16 x i16>*
  %3832 = load <16 x i16>, <16 x i16>* %3831, align 2, !tbaa !399
  %3833 = getelementptr inbounds i16, i16* %3829, i64 -16
  %3834 = bitcast i16* %3833 to <16 x i16>*
  %3835 = load <16 x i16>, <16 x i16>* %3834, align 2, !tbaa !399
  %3836 = zext i32 %.pre-phi3504 to i64
  %3837 = mul nsw i64 %3836, %112
  %3838 = add nsw i64 %3837, %94
  %3839 = getelementptr inbounds i16, i16* %blur_x, i64 %3838
  %3840 = getelementptr inbounds i16, i16* %3839, i64 -32
  %3841 = bitcast i16* %3840 to <16 x i16>*
  %3842 = load <16 x i16>, <16 x i16>* %3841, align 2, !tbaa !399
  %3843 = getelementptr inbounds i16, i16* %3839, i64 -16
  %3844 = bitcast i16* %3843 to <16 x i16>*
  %3845 = load <16 x i16>, <16 x i16>* %3844, align 2, !tbaa !399
  %3846 = mul nsw i64 %3807, %112
  %3847 = add nsw i64 %3846, %94
  %3848 = getelementptr inbounds i16, i16* %blur_x, i64 %3847
  %3849 = getelementptr inbounds i16, i16* %3848, i64 -32
  %3850 = bitcast i16* %3849 to <16 x i16>*
  %3851 = load <16 x i16>, <16 x i16>* %3850, align 2, !tbaa !399
  %3852 = getelementptr inbounds i16, i16* %3848, i64 -16
  %3853 = bitcast i16* %3852 to <16 x i16>*
  %3854 = load <16 x i16>, <16 x i16>* %3853, align 2, !tbaa !399
  %3855 = zext i32 %.pre-phi3510 to i64
  %3856 = mul nsw i64 %3855, %112
  %3857 = add nsw i64 %3856, %94
  %3858 = getelementptr inbounds i16, i16* %blur_x, i64 %3857
  %3859 = getelementptr inbounds i16, i16* %3858, i64 -32
  %3860 = bitcast i16* %3859 to <16 x i16>*
  %3861 = load <16 x i16>, <16 x i16>* %3860, align 2, !tbaa !399
  %3862 = getelementptr inbounds i16, i16* %3858, i64 -16
  %3863 = bitcast i16* %3862 to <16 x i16>*
  %3864 = load <16 x i16>, <16 x i16>* %3863, align 2, !tbaa !399
  %3865 = add <16 x i16> %3832, %3822
  %3866 = add <16 x i16> %3865, %3842
  %3867 = add <16 x i16> %3866, %3851
  %3868 = add <16 x i16> %3867, %3861
  %3869 = add <16 x i16> %3835, %3825
  %3870 = add <16 x i16> %3869, %3845
  %3871 = add <16 x i16> %3870, %3854
  %3872 = add <16 x i16> %3871, %3864
  %3873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3868, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3872, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3875 = shufflevector <16 x i16> %3873, <16 x i16> %3874, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3876 = lshr <32 x i16> %3875, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3877 = shufflevector <32 x i16> %3876, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3878 = sext i32 %a26 to i64
  %3879 = add nsw i64 %3878, 4
  %3880 = mul nsw i64 %3879, %113
  %3881 = add nsw i64 %115, %3880
  %3882 = getelementptr inbounds i16, i16* %66, i64 %3881
  %3883 = getelementptr inbounds i16, i16* %3882, i64 -32
  %3884 = bitcast i16* %3883 to <16 x i16>*
  store <16 x i16> %3877, <16 x i16>* %3884, align 2, !tbaa !401
  %3885 = shufflevector <32 x i16> %3876, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3886 = getelementptr inbounds i16, i16* %3882, i64 -16
  %3887 = bitcast i16* %3886 to <16 x i16>*
  store <16 x i16> %3885, <16 x i16>* %3887, align 2, !tbaa !401
  br label %after_bb179

"for blur_y.s0.x.x.rebased184":                   ; preds = %"for blur_y.s0.x.x.rebased184.preheader", %"consume blur_x191"
  %indvars.iv3271 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased184.preheader" ], [ %indvars.iv.next3272, %"consume blur_x191" ]
  %3888 = add nsw i64 %indvars.iv3271, %101
  %3889 = icmp slt i64 %3888, 1
  %3890 = trunc i64 %3888 to i32
  %3891 = shl nsw i32 %3890, 5
  %3892 = icmp sgt i32 %4, %3891
  %3893 = or i1 %3889, %3892
  br i1 %3893, label %"produce blur_x190", label %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge"

"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased184"
  %.pre3513 = shl nsw i64 %3888, 5
  br label %"consume blur_x191"

"end for blur_y.s0.x.x.rebased185":               ; preds = %"consume blur_x191", %after_bb179
  br i1 %102, label %"for blur_y.s0.x.x.rebased192.preheader", label %"end for blur_y.s0.x.x.rebased193", !prof !386

"for blur_y.s0.x.x.rebased192.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased185"
  %3894 = sext i32 %t1682 to i64
  %3895 = zext i32 %.pre-phi3498 to i64
  %3896 = mul nsw i64 %3895, %112
  %3897 = sub nsw i64 %3896, %96
  %3898 = zext i32 %.pre-phi3492 to i64
  %3899 = mul nsw i64 %3898, %112
  %3900 = sub nsw i64 %3899, %96
  %3901 = zext i32 %.pre-phi3504 to i64
  %3902 = mul nsw i64 %3901, %112
  %3903 = sub nsw i64 %3902, %96
  %3904 = zext i32 %.pre-phi to i64
  %3905 = mul nsw i64 %3904, %112
  %3906 = sub nsw i64 %3905, %96
  %3907 = zext i32 %.pre-phi3510 to i64
  %3908 = mul nsw i64 %3907, %112
  %3909 = sub nsw i64 %3908, %96
  %3910 = sext i32 %a26 to i64
  %3911 = add nsw i64 %3910, 4
  %3912 = mul nsw i64 %3911, %113
  %3913 = add nsw i64 %3912, %116
  br label %"for blur_y.s0.x.x.rebased192"

"produce blur_x190":                              ; preds = %"for blur_y.s0.x.x.rebased184"
  %t776 = add nsw i32 %3891, %t1769
  %3914 = sext i32 %t776 to i64
  %3915 = getelementptr inbounds i16, i16* %read_input, i64 %3914
  %3916 = getelementptr inbounds i16, i16* %3915, i64 1
  %3917 = bitcast i16* %3916 to <16 x i16>*
  %3918 = load <16 x i16>, <16 x i16>* %3917, align 2, !tbaa !396
  %3919 = getelementptr inbounds i16, i16* %3915, i64 17
  %3920 = bitcast i16* %3919 to <16 x i16>*
  %3921 = load <16 x i16>, <16 x i16>* %3920, align 2, !tbaa !396
  %3922 = bitcast i16* %3915 to <16 x i16>*
  %3923 = load <16 x i16>, <16 x i16>* %3922, align 2, !tbaa !396
  %3924 = getelementptr inbounds i16, i16* %3915, i64 16
  %3925 = bitcast i16* %3924 to <16 x i16>*
  %3926 = load <16 x i16>, <16 x i16>* %3925, align 2, !tbaa !396
  %3927 = getelementptr inbounds i16, i16* %3915, i64 2
  %3928 = bitcast i16* %3927 to <16 x i16>*
  %3929 = load <16 x i16>, <16 x i16>* %3928, align 2, !tbaa !396
  %3930 = getelementptr inbounds i16, i16* %3915, i64 18
  %3931 = bitcast i16* %3930 to <16 x i16>*
  %3932 = load <16 x i16>, <16 x i16>* %3931, align 2, !tbaa !396
  %3933 = getelementptr inbounds i16, i16* %3915, i64 4
  %3934 = bitcast i16* %3933 to <16 x i16>*
  %3935 = load <16 x i16>, <16 x i16>* %3934, align 2, !tbaa !396
  %3936 = getelementptr inbounds i16, i16* %3915, i64 20
  %3937 = bitcast i16* %3936 to <16 x i16>*
  %3938 = load <16 x i16>, <16 x i16>* %3937, align 2, !tbaa !396
  %3939 = getelementptr inbounds i16, i16* %3915, i64 3
  %3940 = bitcast i16* %3939 to <16 x i16>*
  %3941 = load <16 x i16>, <16 x i16>* %3940, align 2, !tbaa !396
  %3942 = getelementptr inbounds i16, i16* %3915, i64 19
  %3943 = bitcast i16* %3942 to <16 x i16>*
  %3944 = load <16 x i16>, <16 x i16>* %3943, align 2, !tbaa !396
  %3945 = add <16 x i16> %3923, %3918
  %3946 = add <16 x i16> %3945, %3929
  %3947 = add <16 x i16> %3946, %3935
  %3948 = add <16 x i16> %3947, %3941
  %3949 = add <16 x i16> %3926, %3921
  %3950 = add <16 x i16> %3949, %3932
  %3951 = add <16 x i16> %3950, %3938
  %3952 = add <16 x i16> %3951, %3944
  %3953 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3948, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3952, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3955 = shufflevector <16 x i16> %3953, <16 x i16> %3954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3956 = lshr <32 x i16> %3955, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3957 = shufflevector <32 x i16> %3956, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3958 = shl nsw i64 %3888, 5
  %3959 = add nsw i64 %3958, %3743
  %3960 = getelementptr inbounds i16, i16* %blur_x, i64 %3959
  %3961 = bitcast i16* %3960 to <16 x i16>*
  store <16 x i16> %3957, <16 x i16>* %3961, align 2, !tbaa !399
  %3962 = shufflevector <32 x i16> %3956, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3963 = getelementptr inbounds i16, i16* %3960, i64 16
  %3964 = bitcast i16* %3963 to <16 x i16>*
  store <16 x i16> %3962, <16 x i16>* %3964, align 2, !tbaa !399
  br label %"consume blur_x191"

"consume blur_x191":                              ; preds = %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge", %"produce blur_x190"
  %.pre-phi3514 = phi i64 [ %.pre3513, %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge" ], [ %3958, %"produce blur_x190" ]
  %3965 = add nsw i64 %3746, %.pre-phi3514
  %3966 = getelementptr inbounds i16, i16* %blur_x, i64 %3965
  %3967 = bitcast i16* %3966 to <16 x i16>*
  %3968 = load <16 x i16>, <16 x i16>* %3967, align 2, !tbaa !399
  %3969 = getelementptr inbounds i16, i16* %3966, i64 16
  %3970 = bitcast i16* %3969 to <16 x i16>*
  %3971 = load <16 x i16>, <16 x i16>* %3970, align 2, !tbaa !399
  %3972 = add nsw i64 %3749, %.pre-phi3514
  %3973 = getelementptr inbounds i16, i16* %blur_x, i64 %3972
  %3974 = bitcast i16* %3973 to <16 x i16>*
  %3975 = load <16 x i16>, <16 x i16>* %3974, align 2, !tbaa !399
  %3976 = getelementptr inbounds i16, i16* %3973, i64 16
  %3977 = bitcast i16* %3976 to <16 x i16>*
  %3978 = load <16 x i16>, <16 x i16>* %3977, align 2, !tbaa !399
  %3979 = add nsw i64 %3752, %.pre-phi3514
  %3980 = getelementptr inbounds i16, i16* %blur_x, i64 %3979
  %3981 = bitcast i16* %3980 to <16 x i16>*
  %3982 = load <16 x i16>, <16 x i16>* %3981, align 2, !tbaa !399
  %3983 = getelementptr inbounds i16, i16* %3980, i64 16
  %3984 = bitcast i16* %3983 to <16 x i16>*
  %3985 = load <16 x i16>, <16 x i16>* %3984, align 2, !tbaa !399
  %3986 = add nsw i64 %3755, %.pre-phi3514
  %3987 = getelementptr inbounds i16, i16* %blur_x, i64 %3986
  %3988 = bitcast i16* %3987 to <16 x i16>*
  %3989 = load <16 x i16>, <16 x i16>* %3988, align 2, !tbaa !399
  %3990 = getelementptr inbounds i16, i16* %3987, i64 16
  %3991 = bitcast i16* %3990 to <16 x i16>*
  %3992 = load <16 x i16>, <16 x i16>* %3991, align 2, !tbaa !399
  %3993 = add nsw i64 %3758, %.pre-phi3514
  %3994 = getelementptr inbounds i16, i16* %blur_x, i64 %3993
  %3995 = bitcast i16* %3994 to <16 x i16>*
  %3996 = load <16 x i16>, <16 x i16>* %3995, align 2, !tbaa !399
  %3997 = getelementptr inbounds i16, i16* %3994, i64 16
  %3998 = bitcast i16* %3997 to <16 x i16>*
  %3999 = load <16 x i16>, <16 x i16>* %3998, align 2, !tbaa !399
  %4000 = add <16 x i16> %3975, %3968
  %4001 = add <16 x i16> %4000, %3982
  %4002 = add <16 x i16> %4001, %3989
  %4003 = add <16 x i16> %4002, %3996
  %4004 = add <16 x i16> %3978, %3971
  %4005 = add <16 x i16> %4004, %3985
  %4006 = add <16 x i16> %4005, %3992
  %4007 = add <16 x i16> %4006, %3999
  %4008 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4003, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4007, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4010 = shufflevector <16 x i16> %4008, <16 x i16> %4009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4011 = lshr <32 x i16> %4010, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4012 = shufflevector <32 x i16> %4011, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4013 = add nsw i64 %3762, %.pre-phi3514
  %4014 = getelementptr inbounds i16, i16* %66, i64 %4013
  %4015 = bitcast i16* %4014 to <16 x i16>*
  store <16 x i16> %4012, <16 x i16>* %4015, align 2, !tbaa !401
  %4016 = shufflevector <32 x i16> %4011, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4017 = getelementptr inbounds i16, i16* %4014, i64 16
  %4018 = bitcast i16* %4017 to <16 x i16>*
  store <16 x i16> %4016, <16 x i16>* %4018, align 2, !tbaa !401
  %indvars.iv.next3272 = add nuw nsw i64 %indvars.iv3271, 1
  %.not2749 = icmp eq i64 %indvars.iv.next3272, %184
  br i1 %.not2749, label %"end for blur_y.s0.x.x.rebased185", label %"for blur_y.s0.x.x.rebased184"

"for blur_y.s0.x.x.rebased192":                   ; preds = %"for blur_y.s0.x.x.rebased192.preheader", %"consume blur_x200"
  %blur_y.s0.x.x.rebased194 = phi i32 [ %4131, %"consume blur_x200" ], [ 0, %"for blur_y.s0.x.x.rebased192.preheader" ]
  %4019 = add nsw i32 %blur_y.s0.x.x.rebased194, %t1626
  %a133 = shl nsw i32 %4019, 5
  %4020 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %4020, i32 %a133, i32 %a14
  %4021 = icmp slt i32 %4019, 1
  %4022 = icmp sgt i32 %4, %a133
  %4023 = or i1 %4021, %4022
  br i1 %4023, label %"produce blur_x198", label %"consume blur_x200"

"end for blur_y.s0.x.x.rebased193":               ; preds = %"consume blur_x200", %"end for blur_y.s0.x.x.rebased185"
  br i1 %34, label %"produce blur_x204", label %after_bb201

"produce blur_x198":                              ; preds = %"for blur_y.s0.x.x.rebased192"
  %4024 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s199 = select i1 %4024, i32 %b139, i32 %4
  %t781 = add nsw i32 %blur_x.s0.x.v1.base.s199, %t1769
  %4025 = sext i32 %t781 to i64
  %4026 = getelementptr inbounds i16, i16* %read_input, i64 %4025
  %4027 = getelementptr inbounds i16, i16* %4026, i64 1
  %4028 = bitcast i16* %4027 to <16 x i16>*
  %4029 = load <16 x i16>, <16 x i16>* %4028, align 2, !tbaa !396
  %4030 = getelementptr inbounds i16, i16* %4026, i64 17
  %4031 = bitcast i16* %4030 to <16 x i16>*
  %4032 = load <16 x i16>, <16 x i16>* %4031, align 2, !tbaa !396
  %4033 = bitcast i16* %4026 to <16 x i16>*
  %4034 = load <16 x i16>, <16 x i16>* %4033, align 2, !tbaa !396
  %4035 = getelementptr inbounds i16, i16* %4026, i64 16
  %4036 = bitcast i16* %4035 to <16 x i16>*
  %4037 = load <16 x i16>, <16 x i16>* %4036, align 2, !tbaa !396
  %4038 = getelementptr inbounds i16, i16* %4026, i64 2
  %4039 = bitcast i16* %4038 to <16 x i16>*
  %4040 = load <16 x i16>, <16 x i16>* %4039, align 2, !tbaa !396
  %4041 = getelementptr inbounds i16, i16* %4026, i64 18
  %4042 = bitcast i16* %4041 to <16 x i16>*
  %4043 = load <16 x i16>, <16 x i16>* %4042, align 2, !tbaa !396
  %4044 = getelementptr inbounds i16, i16* %4026, i64 4
  %4045 = bitcast i16* %4044 to <16 x i16>*
  %4046 = load <16 x i16>, <16 x i16>* %4045, align 2, !tbaa !396
  %4047 = getelementptr inbounds i16, i16* %4026, i64 20
  %4048 = bitcast i16* %4047 to <16 x i16>*
  %4049 = load <16 x i16>, <16 x i16>* %4048, align 2, !tbaa !396
  %4050 = getelementptr inbounds i16, i16* %4026, i64 3
  %4051 = bitcast i16* %4050 to <16 x i16>*
  %4052 = load <16 x i16>, <16 x i16>* %4051, align 2, !tbaa !396
  %4053 = getelementptr inbounds i16, i16* %4026, i64 19
  %4054 = bitcast i16* %4053 to <16 x i16>*
  %4055 = load <16 x i16>, <16 x i16>* %4054, align 2, !tbaa !396
  %4056 = add <16 x i16> %4034, %4029
  %4057 = add <16 x i16> %4056, %4040
  %4058 = add <16 x i16> %4057, %4046
  %4059 = add <16 x i16> %4058, %4052
  %4060 = add <16 x i16> %4037, %4032
  %4061 = add <16 x i16> %4060, %4043
  %4062 = add <16 x i16> %4061, %4049
  %4063 = add <16 x i16> %4062, %4055
  %4064 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4059, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4063, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4066 = shufflevector <16 x i16> %4064, <16 x i16> %4065, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4067 = lshr <32 x i16> %4066, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4068 = shufflevector <32 x i16> %4067, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4069 = sext i32 %blur_x.s0.x.v1.base.s199 to i64
  %4070 = add nsw i64 %4069, %3894
  %4071 = getelementptr inbounds i16, i16* %blur_x, i64 %4070
  %4072 = bitcast i16* %4071 to <16 x i16>*
  store <16 x i16> %4068, <16 x i16>* %4072, align 2, !tbaa !399
  %4073 = shufflevector <32 x i16> %4067, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4074 = getelementptr inbounds i16, i16* %4071, i64 16
  %4075 = bitcast i16* %4074 to <16 x i16>*
  store <16 x i16> %4073, <16 x i16>* %4075, align 2, !tbaa !399
  br label %"consume blur_x200"

"consume blur_x200":                              ; preds = %"for blur_y.s0.x.x.rebased192", %"produce blur_x198"
  %4076 = sext i32 %b139 to i64
  %4077 = add nsw i64 %3897, %4076
  %4078 = getelementptr inbounds i16, i16* %blur_x, i64 %4077
  %4079 = bitcast i16* %4078 to <16 x i16>*
  %4080 = load <16 x i16>, <16 x i16>* %4079, align 2, !tbaa !399
  %4081 = getelementptr inbounds i16, i16* %4078, i64 16
  %4082 = bitcast i16* %4081 to <16 x i16>*
  %4083 = load <16 x i16>, <16 x i16>* %4082, align 2, !tbaa !399
  %4084 = add nsw i64 %3900, %4076
  %4085 = getelementptr inbounds i16, i16* %blur_x, i64 %4084
  %4086 = bitcast i16* %4085 to <16 x i16>*
  %4087 = load <16 x i16>, <16 x i16>* %4086, align 2, !tbaa !399
  %4088 = getelementptr inbounds i16, i16* %4085, i64 16
  %4089 = bitcast i16* %4088 to <16 x i16>*
  %4090 = load <16 x i16>, <16 x i16>* %4089, align 2, !tbaa !399
  %4091 = add nsw i64 %3903, %4076
  %4092 = getelementptr inbounds i16, i16* %blur_x, i64 %4091
  %4093 = bitcast i16* %4092 to <16 x i16>*
  %4094 = load <16 x i16>, <16 x i16>* %4093, align 2, !tbaa !399
  %4095 = getelementptr inbounds i16, i16* %4092, i64 16
  %4096 = bitcast i16* %4095 to <16 x i16>*
  %4097 = load <16 x i16>, <16 x i16>* %4096, align 2, !tbaa !399
  %4098 = add nsw i64 %3906, %4076
  %4099 = getelementptr inbounds i16, i16* %blur_x, i64 %4098
  %4100 = bitcast i16* %4099 to <16 x i16>*
  %4101 = load <16 x i16>, <16 x i16>* %4100, align 2, !tbaa !399
  %4102 = getelementptr inbounds i16, i16* %4099, i64 16
  %4103 = bitcast i16* %4102 to <16 x i16>*
  %4104 = load <16 x i16>, <16 x i16>* %4103, align 2, !tbaa !399
  %4105 = add nsw i64 %3909, %4076
  %4106 = getelementptr inbounds i16, i16* %blur_x, i64 %4105
  %4107 = bitcast i16* %4106 to <16 x i16>*
  %4108 = load <16 x i16>, <16 x i16>* %4107, align 2, !tbaa !399
  %4109 = getelementptr inbounds i16, i16* %4106, i64 16
  %4110 = bitcast i16* %4109 to <16 x i16>*
  %4111 = load <16 x i16>, <16 x i16>* %4110, align 2, !tbaa !399
  %4112 = add <16 x i16> %4087, %4080
  %4113 = add <16 x i16> %4112, %4094
  %4114 = add <16 x i16> %4113, %4101
  %4115 = add <16 x i16> %4114, %4108
  %4116 = add <16 x i16> %4090, %4083
  %4117 = add <16 x i16> %4116, %4097
  %4118 = add <16 x i16> %4117, %4104
  %4119 = add <16 x i16> %4118, %4111
  %4120 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4115, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4119, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4122 = shufflevector <16 x i16> %4120, <16 x i16> %4121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4123 = lshr <32 x i16> %4122, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4124 = shufflevector <32 x i16> %4123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4125 = add nsw i64 %3913, %4076
  %4126 = getelementptr inbounds i16, i16* %66, i64 %4125
  %4127 = bitcast i16* %4126 to <16 x i16>*
  store <16 x i16> %4124, <16 x i16>* %4127, align 2, !tbaa !401
  %4128 = shufflevector <32 x i16> %4123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4129 = getelementptr inbounds i16, i16* %4126, i64 16
  %4130 = bitcast i16* %4129 to <16 x i16>*
  store <16 x i16> %4128, <16 x i16>* %4130, align 2, !tbaa !401
  %4131 = add nuw nsw i32 %blur_y.s0.x.x.rebased194, 1
  %.not2748 = icmp eq i32 %4131, %t1683
  br i1 %.not2748, label %"end for blur_y.s0.x.x.rebased193", label %"for blur_y.s0.x.x.rebased192"

after_bb201:                                      ; preds = %"end for blur_y.s0.x.x.rebased193", %"produce blur_x204"
  br i1 %100, label %"for blur_y.s0.x.x.rebased206.preheader", label %"end for blur_y.s0.x.x.rebased207", !prof !386

"for blur_y.s0.x.x.rebased206.preheader":         ; preds = %after_bb201
  %4132 = sext i32 %t1688 to i64
  %4133 = zext i32 %.pre-phi3504 to i64
  %4134 = mul nsw i64 %4133, %112
  %4135 = sub nsw i64 %4134, %96
  %4136 = zext i32 %.pre-phi3498 to i64
  %4137 = mul nsw i64 %4136, %112
  %4138 = sub nsw i64 %4137, %96
  %4139 = zext i32 %.pre-phi3510 to i64
  %4140 = mul nsw i64 %4139, %112
  %4141 = sub nsw i64 %4140, %96
  %4142 = zext i32 %.pre-phi3480 to i64
  %4143 = mul nsw i64 %4142, %112
  %4144 = sub nsw i64 %4143, %96
  %4145 = zext i32 %.pre-phi to i64
  %4146 = mul nsw i64 %4145, %112
  %4147 = sub nsw i64 %4146, %96
  %4148 = sext i32 %a26 to i64
  %4149 = add nsw i64 %4148, 5
  %4150 = mul nsw i64 %4149, %113
  %4151 = add nsw i64 %4150, %116
  br label %"for blur_y.s0.x.x.rebased206"

"produce blur_x204":                              ; preds = %"end for blur_y.s0.x.x.rebased193"
  %4152 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %4153 = getelementptr inbounds i16, i16* %4152, i64 -31
  %4154 = bitcast i16* %4153 to <16 x i16>*
  %4155 = load <16 x i16>, <16 x i16>* %4154, align 2, !tbaa !396
  %4156 = getelementptr inbounds i16, i16* %4152, i64 -15
  %4157 = bitcast i16* %4156 to <16 x i16>*
  %4158 = load <16 x i16>, <16 x i16>* %4157, align 2, !tbaa !396
  %4159 = getelementptr inbounds i16, i16* %4152, i64 -32
  %4160 = bitcast i16* %4159 to <16 x i16>*
  %4161 = load <16 x i16>, <16 x i16>* %4160, align 2, !tbaa !396
  %4162 = getelementptr inbounds i16, i16* %4152, i64 -16
  %4163 = bitcast i16* %4162 to <16 x i16>*
  %4164 = load <16 x i16>, <16 x i16>* %4163, align 2, !tbaa !396
  %4165 = getelementptr inbounds i16, i16* %4152, i64 -30
  %4166 = bitcast i16* %4165 to <16 x i16>*
  %4167 = load <16 x i16>, <16 x i16>* %4166, align 2, !tbaa !396
  %4168 = getelementptr inbounds i16, i16* %4152, i64 -14
  %4169 = bitcast i16* %4168 to <16 x i16>*
  %4170 = load <16 x i16>, <16 x i16>* %4169, align 2, !tbaa !396
  %4171 = getelementptr inbounds i16, i16* %4152, i64 -28
  %4172 = bitcast i16* %4171 to <16 x i16>*
  %4173 = load <16 x i16>, <16 x i16>* %4172, align 2, !tbaa !396
  %4174 = getelementptr inbounds i16, i16* %4152, i64 -12
  %4175 = bitcast i16* %4174 to <16 x i16>*
  %4176 = load <16 x i16>, <16 x i16>* %4175, align 2, !tbaa !396
  %4177 = getelementptr inbounds i16, i16* %4152, i64 -29
  %4178 = bitcast i16* %4177 to <16 x i16>*
  %4179 = load <16 x i16>, <16 x i16>* %4178, align 2, !tbaa !396
  %4180 = getelementptr inbounds i16, i16* %4152, i64 -13
  %4181 = bitcast i16* %4180 to <16 x i16>*
  %4182 = load <16 x i16>, <16 x i16>* %4181, align 2, !tbaa !396
  %4183 = add <16 x i16> %4161, %4155
  %4184 = add <16 x i16> %4183, %4167
  %4185 = add <16 x i16> %4184, %4173
  %4186 = add <16 x i16> %4185, %4179
  %4187 = add <16 x i16> %4164, %4158
  %4188 = add <16 x i16> %4187, %4170
  %4189 = add <16 x i16> %4188, %4176
  %4190 = add <16 x i16> %4189, %4182
  %4191 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4186, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4190, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4193 = shufflevector <16 x i16> %4191, <16 x i16> %4192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4194 = lshr <32 x i16> %4193, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4195 = shufflevector <32 x i16> %4194, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4196 = zext i32 %.pre-phi3480 to i64
  %4197 = mul nsw i64 %97, %4196
  %4198 = add nsw i64 %99, %4197
  %4199 = getelementptr inbounds i16, i16* %blur_x, i64 %4198
  %4200 = getelementptr inbounds i16, i16* %4199, i64 -32
  %4201 = bitcast i16* %4200 to <16 x i16>*
  store <16 x i16> %4195, <16 x i16>* %4201, align 2, !tbaa !399
  %4202 = shufflevector <32 x i16> %4194, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4203 = getelementptr inbounds i16, i16* %4199, i64 -16
  %4204 = bitcast i16* %4203 to <16 x i16>*
  store <16 x i16> %4202, <16 x i16>* %4204, align 2, !tbaa !399
  %4205 = zext i32 %.pre-phi3504 to i64
  %4206 = mul nsw i64 %4205, %112
  %4207 = add nsw i64 %4206, %94
  %4208 = getelementptr inbounds i16, i16* %blur_x, i64 %4207
  %4209 = getelementptr inbounds i16, i16* %4208, i64 -32
  %4210 = bitcast i16* %4209 to <16 x i16>*
  %4211 = load <16 x i16>, <16 x i16>* %4210, align 2, !tbaa !399
  %4212 = getelementptr inbounds i16, i16* %4208, i64 -16
  %4213 = bitcast i16* %4212 to <16 x i16>*
  %4214 = load <16 x i16>, <16 x i16>* %4213, align 2, !tbaa !399
  %4215 = zext i32 %.pre-phi3498 to i64
  %4216 = mul nsw i64 %4215, %112
  %4217 = add nsw i64 %4216, %94
  %4218 = getelementptr inbounds i16, i16* %blur_x, i64 %4217
  %4219 = getelementptr inbounds i16, i16* %4218, i64 -32
  %4220 = bitcast i16* %4219 to <16 x i16>*
  %4221 = load <16 x i16>, <16 x i16>* %4220, align 2, !tbaa !399
  %4222 = getelementptr inbounds i16, i16* %4218, i64 -16
  %4223 = bitcast i16* %4222 to <16 x i16>*
  %4224 = load <16 x i16>, <16 x i16>* %4223, align 2, !tbaa !399
  %4225 = zext i32 %.pre-phi3510 to i64
  %4226 = mul nsw i64 %4225, %112
  %4227 = add nsw i64 %4226, %94
  %4228 = getelementptr inbounds i16, i16* %blur_x, i64 %4227
  %4229 = getelementptr inbounds i16, i16* %4228, i64 -32
  %4230 = bitcast i16* %4229 to <16 x i16>*
  %4231 = load <16 x i16>, <16 x i16>* %4230, align 2, !tbaa !399
  %4232 = getelementptr inbounds i16, i16* %4228, i64 -16
  %4233 = bitcast i16* %4232 to <16 x i16>*
  %4234 = load <16 x i16>, <16 x i16>* %4233, align 2, !tbaa !399
  %4235 = mul nsw i64 %4196, %112
  %4236 = add nsw i64 %4235, %94
  %4237 = getelementptr inbounds i16, i16* %blur_x, i64 %4236
  %4238 = getelementptr inbounds i16, i16* %4237, i64 -32
  %4239 = bitcast i16* %4238 to <16 x i16>*
  %4240 = load <16 x i16>, <16 x i16>* %4239, align 2, !tbaa !399
  %4241 = getelementptr inbounds i16, i16* %4237, i64 -16
  %4242 = bitcast i16* %4241 to <16 x i16>*
  %4243 = load <16 x i16>, <16 x i16>* %4242, align 2, !tbaa !399
  %4244 = zext i32 %.pre-phi to i64
  %4245 = mul nsw i64 %4244, %112
  %4246 = add nsw i64 %4245, %94
  %4247 = getelementptr inbounds i16, i16* %blur_x, i64 %4246
  %4248 = getelementptr inbounds i16, i16* %4247, i64 -32
  %4249 = bitcast i16* %4248 to <16 x i16>*
  %4250 = load <16 x i16>, <16 x i16>* %4249, align 2, !tbaa !399
  %4251 = getelementptr inbounds i16, i16* %4247, i64 -16
  %4252 = bitcast i16* %4251 to <16 x i16>*
  %4253 = load <16 x i16>, <16 x i16>* %4252, align 2, !tbaa !399
  %4254 = add <16 x i16> %4221, %4211
  %4255 = add <16 x i16> %4254, %4231
  %4256 = add <16 x i16> %4255, %4240
  %4257 = add <16 x i16> %4256, %4250
  %4258 = add <16 x i16> %4224, %4214
  %4259 = add <16 x i16> %4258, %4234
  %4260 = add <16 x i16> %4259, %4243
  %4261 = add <16 x i16> %4260, %4253
  %4262 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4257, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4263 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4261, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4264 = shufflevector <16 x i16> %4262, <16 x i16> %4263, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4265 = lshr <32 x i16> %4264, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4266 = shufflevector <32 x i16> %4265, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4267 = sext i32 %a26 to i64
  %4268 = add nsw i64 %4267, 5
  %4269 = mul nsw i64 %4268, %113
  %4270 = add nsw i64 %115, %4269
  %4271 = getelementptr inbounds i16, i16* %66, i64 %4270
  %4272 = getelementptr inbounds i16, i16* %4271, i64 -32
  %4273 = bitcast i16* %4272 to <16 x i16>*
  store <16 x i16> %4266, <16 x i16>* %4273, align 2, !tbaa !401
  %4274 = shufflevector <32 x i16> %4265, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4275 = getelementptr inbounds i16, i16* %4271, i64 -16
  %4276 = bitcast i16* %4275 to <16 x i16>*
  store <16 x i16> %4274, <16 x i16>* %4276, align 2, !tbaa !401
  br label %after_bb201

"for blur_y.s0.x.x.rebased206":                   ; preds = %"for blur_y.s0.x.x.rebased206.preheader", %"consume blur_x213"
  %indvars.iv3274 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased206.preheader" ], [ %indvars.iv.next3275, %"consume blur_x213" ]
  %4277 = add nsw i64 %indvars.iv3274, %101
  %4278 = icmp slt i64 %4277, 1
  %4279 = trunc i64 %4277 to i32
  %4280 = shl nsw i32 %4279, 5
  %4281 = icmp sgt i32 %4, %4280
  %4282 = or i1 %4278, %4281
  br i1 %4282, label %"produce blur_x212", label %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge"

"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased206"
  %.pre3515 = shl nsw i64 %4277, 5
  br label %"consume blur_x213"

"end for blur_y.s0.x.x.rebased207":               ; preds = %"consume blur_x213", %after_bb201
  br i1 %102, label %"for blur_y.s0.x.x.rebased214.preheader", label %"end for blur_y.s0.x.x.rebased215", !prof !386

"for blur_y.s0.x.x.rebased214.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased207"
  %4283 = sext i32 %t1688 to i64
  %4284 = zext i32 %.pre-phi3504 to i64
  %4285 = mul nsw i64 %4284, %112
  %4286 = sub nsw i64 %4285, %96
  %4287 = zext i32 %.pre-phi3498 to i64
  %4288 = mul nsw i64 %4287, %112
  %4289 = sub nsw i64 %4288, %96
  %4290 = zext i32 %.pre-phi3510 to i64
  %4291 = mul nsw i64 %4290, %112
  %4292 = sub nsw i64 %4291, %96
  %4293 = zext i32 %.pre-phi3480 to i64
  %4294 = mul nsw i64 %4293, %112
  %4295 = sub nsw i64 %4294, %96
  %4296 = zext i32 %.pre-phi to i64
  %4297 = mul nsw i64 %4296, %112
  %4298 = sub nsw i64 %4297, %96
  %4299 = sext i32 %a26 to i64
  %4300 = add nsw i64 %4299, 5
  %4301 = mul nsw i64 %4300, %113
  %4302 = add nsw i64 %4301, %116
  br label %"for blur_y.s0.x.x.rebased214"

"produce blur_x212":                              ; preds = %"for blur_y.s0.x.x.rebased206"
  %t792 = add nsw i32 %4280, %t1785
  %4303 = sext i32 %t792 to i64
  %4304 = getelementptr inbounds i16, i16* %read_input, i64 %4303
  %4305 = getelementptr inbounds i16, i16* %4304, i64 1
  %4306 = bitcast i16* %4305 to <16 x i16>*
  %4307 = load <16 x i16>, <16 x i16>* %4306, align 2, !tbaa !396
  %4308 = getelementptr inbounds i16, i16* %4304, i64 17
  %4309 = bitcast i16* %4308 to <16 x i16>*
  %4310 = load <16 x i16>, <16 x i16>* %4309, align 2, !tbaa !396
  %4311 = bitcast i16* %4304 to <16 x i16>*
  %4312 = load <16 x i16>, <16 x i16>* %4311, align 2, !tbaa !396
  %4313 = getelementptr inbounds i16, i16* %4304, i64 16
  %4314 = bitcast i16* %4313 to <16 x i16>*
  %4315 = load <16 x i16>, <16 x i16>* %4314, align 2, !tbaa !396
  %4316 = getelementptr inbounds i16, i16* %4304, i64 2
  %4317 = bitcast i16* %4316 to <16 x i16>*
  %4318 = load <16 x i16>, <16 x i16>* %4317, align 2, !tbaa !396
  %4319 = getelementptr inbounds i16, i16* %4304, i64 18
  %4320 = bitcast i16* %4319 to <16 x i16>*
  %4321 = load <16 x i16>, <16 x i16>* %4320, align 2, !tbaa !396
  %4322 = getelementptr inbounds i16, i16* %4304, i64 4
  %4323 = bitcast i16* %4322 to <16 x i16>*
  %4324 = load <16 x i16>, <16 x i16>* %4323, align 2, !tbaa !396
  %4325 = getelementptr inbounds i16, i16* %4304, i64 20
  %4326 = bitcast i16* %4325 to <16 x i16>*
  %4327 = load <16 x i16>, <16 x i16>* %4326, align 2, !tbaa !396
  %4328 = getelementptr inbounds i16, i16* %4304, i64 3
  %4329 = bitcast i16* %4328 to <16 x i16>*
  %4330 = load <16 x i16>, <16 x i16>* %4329, align 2, !tbaa !396
  %4331 = getelementptr inbounds i16, i16* %4304, i64 19
  %4332 = bitcast i16* %4331 to <16 x i16>*
  %4333 = load <16 x i16>, <16 x i16>* %4332, align 2, !tbaa !396
  %4334 = add <16 x i16> %4312, %4307
  %4335 = add <16 x i16> %4334, %4318
  %4336 = add <16 x i16> %4335, %4324
  %4337 = add <16 x i16> %4336, %4330
  %4338 = add <16 x i16> %4315, %4310
  %4339 = add <16 x i16> %4338, %4321
  %4340 = add <16 x i16> %4339, %4327
  %4341 = add <16 x i16> %4340, %4333
  %4342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4337, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4341, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4344 = shufflevector <16 x i16> %4342, <16 x i16> %4343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4345 = lshr <32 x i16> %4344, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4346 = shufflevector <32 x i16> %4345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4347 = shl nsw i64 %4277, 5
  %4348 = add nsw i64 %4347, %4132
  %4349 = getelementptr inbounds i16, i16* %blur_x, i64 %4348
  %4350 = bitcast i16* %4349 to <16 x i16>*
  store <16 x i16> %4346, <16 x i16>* %4350, align 2, !tbaa !399
  %4351 = shufflevector <32 x i16> %4345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4352 = getelementptr inbounds i16, i16* %4349, i64 16
  %4353 = bitcast i16* %4352 to <16 x i16>*
  store <16 x i16> %4351, <16 x i16>* %4353, align 2, !tbaa !399
  br label %"consume blur_x213"

"consume blur_x213":                              ; preds = %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge", %"produce blur_x212"
  %.pre-phi3516 = phi i64 [ %.pre3515, %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge" ], [ %4347, %"produce blur_x212" ]
  %4354 = add nsw i64 %4135, %.pre-phi3516
  %4355 = getelementptr inbounds i16, i16* %blur_x, i64 %4354
  %4356 = bitcast i16* %4355 to <16 x i16>*
  %4357 = load <16 x i16>, <16 x i16>* %4356, align 2, !tbaa !399
  %4358 = getelementptr inbounds i16, i16* %4355, i64 16
  %4359 = bitcast i16* %4358 to <16 x i16>*
  %4360 = load <16 x i16>, <16 x i16>* %4359, align 2, !tbaa !399
  %4361 = add nsw i64 %4138, %.pre-phi3516
  %4362 = getelementptr inbounds i16, i16* %blur_x, i64 %4361
  %4363 = bitcast i16* %4362 to <16 x i16>*
  %4364 = load <16 x i16>, <16 x i16>* %4363, align 2, !tbaa !399
  %4365 = getelementptr inbounds i16, i16* %4362, i64 16
  %4366 = bitcast i16* %4365 to <16 x i16>*
  %4367 = load <16 x i16>, <16 x i16>* %4366, align 2, !tbaa !399
  %4368 = add nsw i64 %4141, %.pre-phi3516
  %4369 = getelementptr inbounds i16, i16* %blur_x, i64 %4368
  %4370 = bitcast i16* %4369 to <16 x i16>*
  %4371 = load <16 x i16>, <16 x i16>* %4370, align 2, !tbaa !399
  %4372 = getelementptr inbounds i16, i16* %4369, i64 16
  %4373 = bitcast i16* %4372 to <16 x i16>*
  %4374 = load <16 x i16>, <16 x i16>* %4373, align 2, !tbaa !399
  %4375 = add nsw i64 %4144, %.pre-phi3516
  %4376 = getelementptr inbounds i16, i16* %blur_x, i64 %4375
  %4377 = bitcast i16* %4376 to <16 x i16>*
  %4378 = load <16 x i16>, <16 x i16>* %4377, align 2, !tbaa !399
  %4379 = getelementptr inbounds i16, i16* %4376, i64 16
  %4380 = bitcast i16* %4379 to <16 x i16>*
  %4381 = load <16 x i16>, <16 x i16>* %4380, align 2, !tbaa !399
  %4382 = add nsw i64 %4147, %.pre-phi3516
  %4383 = getelementptr inbounds i16, i16* %blur_x, i64 %4382
  %4384 = bitcast i16* %4383 to <16 x i16>*
  %4385 = load <16 x i16>, <16 x i16>* %4384, align 2, !tbaa !399
  %4386 = getelementptr inbounds i16, i16* %4383, i64 16
  %4387 = bitcast i16* %4386 to <16 x i16>*
  %4388 = load <16 x i16>, <16 x i16>* %4387, align 2, !tbaa !399
  %4389 = add <16 x i16> %4364, %4357
  %4390 = add <16 x i16> %4389, %4371
  %4391 = add <16 x i16> %4390, %4378
  %4392 = add <16 x i16> %4391, %4385
  %4393 = add <16 x i16> %4367, %4360
  %4394 = add <16 x i16> %4393, %4374
  %4395 = add <16 x i16> %4394, %4381
  %4396 = add <16 x i16> %4395, %4388
  %4397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4392, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4396, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4399 = shufflevector <16 x i16> %4397, <16 x i16> %4398, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4400 = lshr <32 x i16> %4399, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4401 = shufflevector <32 x i16> %4400, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4402 = add nsw i64 %4151, %.pre-phi3516
  %4403 = getelementptr inbounds i16, i16* %66, i64 %4402
  %4404 = bitcast i16* %4403 to <16 x i16>*
  store <16 x i16> %4401, <16 x i16>* %4404, align 2, !tbaa !401
  %4405 = shufflevector <32 x i16> %4400, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4406 = getelementptr inbounds i16, i16* %4403, i64 16
  %4407 = bitcast i16* %4406 to <16 x i16>*
  store <16 x i16> %4405, <16 x i16>* %4407, align 2, !tbaa !401
  %indvars.iv.next3275 = add nuw nsw i64 %indvars.iv3274, 1
  %.not2747 = icmp eq i64 %indvars.iv.next3275, %184
  br i1 %.not2747, label %"end for blur_y.s0.x.x.rebased207", label %"for blur_y.s0.x.x.rebased206"

"for blur_y.s0.x.x.rebased214":                   ; preds = %"for blur_y.s0.x.x.rebased214.preheader", %"consume blur_x222"
  %blur_y.s0.x.x.rebased216 = phi i32 [ %4520, %"consume blur_x222" ], [ 0, %"for blur_y.s0.x.x.rebased214.preheader" ]
  %4408 = add nsw i32 %blur_y.s0.x.x.rebased216, %t1626
  %a140 = shl nsw i32 %4408, 5
  %4409 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %4409, i32 %a140, i32 %a14
  %4410 = icmp slt i32 %4408, 1
  %4411 = icmp sgt i32 %4, %a140
  %4412 = or i1 %4410, %4411
  br i1 %4412, label %"produce blur_x220", label %"consume blur_x222"

"end for blur_y.s0.x.x.rebased215":               ; preds = %"consume blur_x222", %"end for blur_y.s0.x.x.rebased207"
  br i1 %34, label %"produce blur_x226", label %after_bb223

"produce blur_x220":                              ; preds = %"for blur_y.s0.x.x.rebased214"
  %4413 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s221 = select i1 %4413, i32 %b146, i32 %4
  %t797 = add nsw i32 %blur_x.s0.x.v1.base.s221, %t1785
  %4414 = sext i32 %t797 to i64
  %4415 = getelementptr inbounds i16, i16* %read_input, i64 %4414
  %4416 = getelementptr inbounds i16, i16* %4415, i64 1
  %4417 = bitcast i16* %4416 to <16 x i16>*
  %4418 = load <16 x i16>, <16 x i16>* %4417, align 2, !tbaa !396
  %4419 = getelementptr inbounds i16, i16* %4415, i64 17
  %4420 = bitcast i16* %4419 to <16 x i16>*
  %4421 = load <16 x i16>, <16 x i16>* %4420, align 2, !tbaa !396
  %4422 = bitcast i16* %4415 to <16 x i16>*
  %4423 = load <16 x i16>, <16 x i16>* %4422, align 2, !tbaa !396
  %4424 = getelementptr inbounds i16, i16* %4415, i64 16
  %4425 = bitcast i16* %4424 to <16 x i16>*
  %4426 = load <16 x i16>, <16 x i16>* %4425, align 2, !tbaa !396
  %4427 = getelementptr inbounds i16, i16* %4415, i64 2
  %4428 = bitcast i16* %4427 to <16 x i16>*
  %4429 = load <16 x i16>, <16 x i16>* %4428, align 2, !tbaa !396
  %4430 = getelementptr inbounds i16, i16* %4415, i64 18
  %4431 = bitcast i16* %4430 to <16 x i16>*
  %4432 = load <16 x i16>, <16 x i16>* %4431, align 2, !tbaa !396
  %4433 = getelementptr inbounds i16, i16* %4415, i64 4
  %4434 = bitcast i16* %4433 to <16 x i16>*
  %4435 = load <16 x i16>, <16 x i16>* %4434, align 2, !tbaa !396
  %4436 = getelementptr inbounds i16, i16* %4415, i64 20
  %4437 = bitcast i16* %4436 to <16 x i16>*
  %4438 = load <16 x i16>, <16 x i16>* %4437, align 2, !tbaa !396
  %4439 = getelementptr inbounds i16, i16* %4415, i64 3
  %4440 = bitcast i16* %4439 to <16 x i16>*
  %4441 = load <16 x i16>, <16 x i16>* %4440, align 2, !tbaa !396
  %4442 = getelementptr inbounds i16, i16* %4415, i64 19
  %4443 = bitcast i16* %4442 to <16 x i16>*
  %4444 = load <16 x i16>, <16 x i16>* %4443, align 2, !tbaa !396
  %4445 = add <16 x i16> %4423, %4418
  %4446 = add <16 x i16> %4445, %4429
  %4447 = add <16 x i16> %4446, %4435
  %4448 = add <16 x i16> %4447, %4441
  %4449 = add <16 x i16> %4426, %4421
  %4450 = add <16 x i16> %4449, %4432
  %4451 = add <16 x i16> %4450, %4438
  %4452 = add <16 x i16> %4451, %4444
  %4453 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4448, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4452, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4455 = shufflevector <16 x i16> %4453, <16 x i16> %4454, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4456 = lshr <32 x i16> %4455, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4457 = shufflevector <32 x i16> %4456, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4458 = sext i32 %blur_x.s0.x.v1.base.s221 to i64
  %4459 = add nsw i64 %4458, %4283
  %4460 = getelementptr inbounds i16, i16* %blur_x, i64 %4459
  %4461 = bitcast i16* %4460 to <16 x i16>*
  store <16 x i16> %4457, <16 x i16>* %4461, align 2, !tbaa !399
  %4462 = shufflevector <32 x i16> %4456, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4463 = getelementptr inbounds i16, i16* %4460, i64 16
  %4464 = bitcast i16* %4463 to <16 x i16>*
  store <16 x i16> %4462, <16 x i16>* %4464, align 2, !tbaa !399
  br label %"consume blur_x222"

"consume blur_x222":                              ; preds = %"for blur_y.s0.x.x.rebased214", %"produce blur_x220"
  %4465 = sext i32 %b146 to i64
  %4466 = add nsw i64 %4286, %4465
  %4467 = getelementptr inbounds i16, i16* %blur_x, i64 %4466
  %4468 = bitcast i16* %4467 to <16 x i16>*
  %4469 = load <16 x i16>, <16 x i16>* %4468, align 2, !tbaa !399
  %4470 = getelementptr inbounds i16, i16* %4467, i64 16
  %4471 = bitcast i16* %4470 to <16 x i16>*
  %4472 = load <16 x i16>, <16 x i16>* %4471, align 2, !tbaa !399
  %4473 = add nsw i64 %4289, %4465
  %4474 = getelementptr inbounds i16, i16* %blur_x, i64 %4473
  %4475 = bitcast i16* %4474 to <16 x i16>*
  %4476 = load <16 x i16>, <16 x i16>* %4475, align 2, !tbaa !399
  %4477 = getelementptr inbounds i16, i16* %4474, i64 16
  %4478 = bitcast i16* %4477 to <16 x i16>*
  %4479 = load <16 x i16>, <16 x i16>* %4478, align 2, !tbaa !399
  %4480 = add nsw i64 %4292, %4465
  %4481 = getelementptr inbounds i16, i16* %blur_x, i64 %4480
  %4482 = bitcast i16* %4481 to <16 x i16>*
  %4483 = load <16 x i16>, <16 x i16>* %4482, align 2, !tbaa !399
  %4484 = getelementptr inbounds i16, i16* %4481, i64 16
  %4485 = bitcast i16* %4484 to <16 x i16>*
  %4486 = load <16 x i16>, <16 x i16>* %4485, align 2, !tbaa !399
  %4487 = add nsw i64 %4295, %4465
  %4488 = getelementptr inbounds i16, i16* %blur_x, i64 %4487
  %4489 = bitcast i16* %4488 to <16 x i16>*
  %4490 = load <16 x i16>, <16 x i16>* %4489, align 2, !tbaa !399
  %4491 = getelementptr inbounds i16, i16* %4488, i64 16
  %4492 = bitcast i16* %4491 to <16 x i16>*
  %4493 = load <16 x i16>, <16 x i16>* %4492, align 2, !tbaa !399
  %4494 = add nsw i64 %4298, %4465
  %4495 = getelementptr inbounds i16, i16* %blur_x, i64 %4494
  %4496 = bitcast i16* %4495 to <16 x i16>*
  %4497 = load <16 x i16>, <16 x i16>* %4496, align 2, !tbaa !399
  %4498 = getelementptr inbounds i16, i16* %4495, i64 16
  %4499 = bitcast i16* %4498 to <16 x i16>*
  %4500 = load <16 x i16>, <16 x i16>* %4499, align 2, !tbaa !399
  %4501 = add <16 x i16> %4476, %4469
  %4502 = add <16 x i16> %4501, %4483
  %4503 = add <16 x i16> %4502, %4490
  %4504 = add <16 x i16> %4503, %4497
  %4505 = add <16 x i16> %4479, %4472
  %4506 = add <16 x i16> %4505, %4486
  %4507 = add <16 x i16> %4506, %4493
  %4508 = add <16 x i16> %4507, %4500
  %4509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4504, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4508, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4511 = shufflevector <16 x i16> %4509, <16 x i16> %4510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4512 = lshr <32 x i16> %4511, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4513 = shufflevector <32 x i16> %4512, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4514 = add nsw i64 %4302, %4465
  %4515 = getelementptr inbounds i16, i16* %66, i64 %4514
  %4516 = bitcast i16* %4515 to <16 x i16>*
  store <16 x i16> %4513, <16 x i16>* %4516, align 2, !tbaa !401
  %4517 = shufflevector <32 x i16> %4512, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4518 = getelementptr inbounds i16, i16* %4515, i64 16
  %4519 = bitcast i16* %4518 to <16 x i16>*
  store <16 x i16> %4517, <16 x i16>* %4519, align 2, !tbaa !401
  %4520 = add nuw nsw i32 %blur_y.s0.x.x.rebased216, 1
  %.not2746 = icmp eq i32 %4520, %t1683
  br i1 %.not2746, label %"end for blur_y.s0.x.x.rebased215", label %"for blur_y.s0.x.x.rebased214"

after_bb223:                                      ; preds = %"end for blur_y.s0.x.x.rebased215", %"produce blur_x226"
  br i1 %100, label %"for blur_y.s0.x.x.rebased228.preheader", label %"end for blur_y.s0.x.x.rebased229", !prof !386

"for blur_y.s0.x.x.rebased228.preheader":         ; preds = %after_bb223
  %4521 = sext i32 %t1694 to i64
  %4522 = zext i32 %.pre-phi3510 to i64
  %4523 = mul nsw i64 %4522, %112
  %4524 = sub nsw i64 %4523, %96
  %4525 = zext i32 %.pre-phi3504 to i64
  %4526 = mul nsw i64 %4525, %112
  %4527 = sub nsw i64 %4526, %96
  %4528 = zext i32 %.pre-phi to i64
  %4529 = mul nsw i64 %4528, %112
  %4530 = sub nsw i64 %4529, %96
  %4531 = zext i32 %.pre-phi3484 to i64
  %4532 = mul nsw i64 %4531, %112
  %4533 = sub nsw i64 %4532, %96
  %4534 = zext i32 %.pre-phi3480 to i64
  %4535 = mul nsw i64 %4534, %112
  %4536 = sub nsw i64 %4535, %96
  %4537 = sext i32 %a26 to i64
  %4538 = add nsw i64 %4537, 6
  %4539 = mul nsw i64 %4538, %113
  %4540 = add nsw i64 %4539, %116
  br label %"for blur_y.s0.x.x.rebased228"

"produce blur_x226":                              ; preds = %"end for blur_y.s0.x.x.rebased215"
  %4541 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %4542 = getelementptr inbounds i16, i16* %4541, i64 -31
  %4543 = bitcast i16* %4542 to <16 x i16>*
  %4544 = load <16 x i16>, <16 x i16>* %4543, align 2, !tbaa !396
  %4545 = getelementptr inbounds i16, i16* %4541, i64 -15
  %4546 = bitcast i16* %4545 to <16 x i16>*
  %4547 = load <16 x i16>, <16 x i16>* %4546, align 2, !tbaa !396
  %4548 = getelementptr inbounds i16, i16* %4541, i64 -32
  %4549 = bitcast i16* %4548 to <16 x i16>*
  %4550 = load <16 x i16>, <16 x i16>* %4549, align 2, !tbaa !396
  %4551 = getelementptr inbounds i16, i16* %4541, i64 -16
  %4552 = bitcast i16* %4551 to <16 x i16>*
  %4553 = load <16 x i16>, <16 x i16>* %4552, align 2, !tbaa !396
  %4554 = getelementptr inbounds i16, i16* %4541, i64 -30
  %4555 = bitcast i16* %4554 to <16 x i16>*
  %4556 = load <16 x i16>, <16 x i16>* %4555, align 2, !tbaa !396
  %4557 = getelementptr inbounds i16, i16* %4541, i64 -14
  %4558 = bitcast i16* %4557 to <16 x i16>*
  %4559 = load <16 x i16>, <16 x i16>* %4558, align 2, !tbaa !396
  %4560 = getelementptr inbounds i16, i16* %4541, i64 -28
  %4561 = bitcast i16* %4560 to <16 x i16>*
  %4562 = load <16 x i16>, <16 x i16>* %4561, align 2, !tbaa !396
  %4563 = getelementptr inbounds i16, i16* %4541, i64 -12
  %4564 = bitcast i16* %4563 to <16 x i16>*
  %4565 = load <16 x i16>, <16 x i16>* %4564, align 2, !tbaa !396
  %4566 = getelementptr inbounds i16, i16* %4541, i64 -29
  %4567 = bitcast i16* %4566 to <16 x i16>*
  %4568 = load <16 x i16>, <16 x i16>* %4567, align 2, !tbaa !396
  %4569 = getelementptr inbounds i16, i16* %4541, i64 -13
  %4570 = bitcast i16* %4569 to <16 x i16>*
  %4571 = load <16 x i16>, <16 x i16>* %4570, align 2, !tbaa !396
  %4572 = add <16 x i16> %4550, %4544
  %4573 = add <16 x i16> %4572, %4556
  %4574 = add <16 x i16> %4573, %4562
  %4575 = add <16 x i16> %4574, %4568
  %4576 = add <16 x i16> %4553, %4547
  %4577 = add <16 x i16> %4576, %4559
  %4578 = add <16 x i16> %4577, %4565
  %4579 = add <16 x i16> %4578, %4571
  %4580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4575, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4579, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4582 = shufflevector <16 x i16> %4580, <16 x i16> %4581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4583 = lshr <32 x i16> %4582, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4584 = shufflevector <32 x i16> %4583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4585 = zext i32 %.pre-phi3484 to i64
  %4586 = mul nsw i64 %97, %4585
  %4587 = add nsw i64 %99, %4586
  %4588 = getelementptr inbounds i16, i16* %blur_x, i64 %4587
  %4589 = getelementptr inbounds i16, i16* %4588, i64 -32
  %4590 = bitcast i16* %4589 to <16 x i16>*
  store <16 x i16> %4584, <16 x i16>* %4590, align 2, !tbaa !399
  %4591 = shufflevector <32 x i16> %4583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4592 = getelementptr inbounds i16, i16* %4588, i64 -16
  %4593 = bitcast i16* %4592 to <16 x i16>*
  store <16 x i16> %4591, <16 x i16>* %4593, align 2, !tbaa !399
  %4594 = zext i32 %.pre-phi3510 to i64
  %4595 = mul nsw i64 %4594, %112
  %4596 = add nsw i64 %4595, %94
  %4597 = getelementptr inbounds i16, i16* %blur_x, i64 %4596
  %4598 = getelementptr inbounds i16, i16* %4597, i64 -32
  %4599 = bitcast i16* %4598 to <16 x i16>*
  %4600 = load <16 x i16>, <16 x i16>* %4599, align 2, !tbaa !399
  %4601 = getelementptr inbounds i16, i16* %4597, i64 -16
  %4602 = bitcast i16* %4601 to <16 x i16>*
  %4603 = load <16 x i16>, <16 x i16>* %4602, align 2, !tbaa !399
  %4604 = zext i32 %.pre-phi3504 to i64
  %4605 = mul nsw i64 %4604, %112
  %4606 = add nsw i64 %4605, %94
  %4607 = getelementptr inbounds i16, i16* %blur_x, i64 %4606
  %4608 = getelementptr inbounds i16, i16* %4607, i64 -32
  %4609 = bitcast i16* %4608 to <16 x i16>*
  %4610 = load <16 x i16>, <16 x i16>* %4609, align 2, !tbaa !399
  %4611 = getelementptr inbounds i16, i16* %4607, i64 -16
  %4612 = bitcast i16* %4611 to <16 x i16>*
  %4613 = load <16 x i16>, <16 x i16>* %4612, align 2, !tbaa !399
  %4614 = zext i32 %.pre-phi to i64
  %4615 = mul nsw i64 %4614, %112
  %4616 = add nsw i64 %4615, %94
  %4617 = getelementptr inbounds i16, i16* %blur_x, i64 %4616
  %4618 = getelementptr inbounds i16, i16* %4617, i64 -32
  %4619 = bitcast i16* %4618 to <16 x i16>*
  %4620 = load <16 x i16>, <16 x i16>* %4619, align 2, !tbaa !399
  %4621 = getelementptr inbounds i16, i16* %4617, i64 -16
  %4622 = bitcast i16* %4621 to <16 x i16>*
  %4623 = load <16 x i16>, <16 x i16>* %4622, align 2, !tbaa !399
  %4624 = mul nsw i64 %4585, %112
  %4625 = add nsw i64 %4624, %94
  %4626 = getelementptr inbounds i16, i16* %blur_x, i64 %4625
  %4627 = getelementptr inbounds i16, i16* %4626, i64 -32
  %4628 = bitcast i16* %4627 to <16 x i16>*
  %4629 = load <16 x i16>, <16 x i16>* %4628, align 2, !tbaa !399
  %4630 = getelementptr inbounds i16, i16* %4626, i64 -16
  %4631 = bitcast i16* %4630 to <16 x i16>*
  %4632 = load <16 x i16>, <16 x i16>* %4631, align 2, !tbaa !399
  %4633 = zext i32 %.pre-phi3480 to i64
  %4634 = mul nsw i64 %4633, %112
  %4635 = add nsw i64 %4634, %94
  %4636 = getelementptr inbounds i16, i16* %blur_x, i64 %4635
  %4637 = getelementptr inbounds i16, i16* %4636, i64 -32
  %4638 = bitcast i16* %4637 to <16 x i16>*
  %4639 = load <16 x i16>, <16 x i16>* %4638, align 2, !tbaa !399
  %4640 = getelementptr inbounds i16, i16* %4636, i64 -16
  %4641 = bitcast i16* %4640 to <16 x i16>*
  %4642 = load <16 x i16>, <16 x i16>* %4641, align 2, !tbaa !399
  %4643 = add <16 x i16> %4610, %4600
  %4644 = add <16 x i16> %4643, %4620
  %4645 = add <16 x i16> %4644, %4629
  %4646 = add <16 x i16> %4645, %4639
  %4647 = add <16 x i16> %4613, %4603
  %4648 = add <16 x i16> %4647, %4623
  %4649 = add <16 x i16> %4648, %4632
  %4650 = add <16 x i16> %4649, %4642
  %4651 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4646, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4650, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4653 = shufflevector <16 x i16> %4651, <16 x i16> %4652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4654 = lshr <32 x i16> %4653, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4655 = shufflevector <32 x i16> %4654, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4656 = sext i32 %a26 to i64
  %4657 = add nsw i64 %4656, 6
  %4658 = mul nsw i64 %4657, %113
  %4659 = add nsw i64 %115, %4658
  %4660 = getelementptr inbounds i16, i16* %66, i64 %4659
  %4661 = getelementptr inbounds i16, i16* %4660, i64 -32
  %4662 = bitcast i16* %4661 to <16 x i16>*
  store <16 x i16> %4655, <16 x i16>* %4662, align 2, !tbaa !401
  %4663 = shufflevector <32 x i16> %4654, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4664 = getelementptr inbounds i16, i16* %4660, i64 -16
  %4665 = bitcast i16* %4664 to <16 x i16>*
  store <16 x i16> %4663, <16 x i16>* %4665, align 2, !tbaa !401
  br label %after_bb223

"for blur_y.s0.x.x.rebased228":                   ; preds = %"for blur_y.s0.x.x.rebased228.preheader", %"consume blur_x235"
  %indvars.iv3277 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased228.preheader" ], [ %indvars.iv.next3278, %"consume blur_x235" ]
  %4666 = add nsw i64 %indvars.iv3277, %101
  %4667 = icmp slt i64 %4666, 1
  %4668 = trunc i64 %4666 to i32
  %4669 = shl nsw i32 %4668, 5
  %4670 = icmp sgt i32 %4, %4669
  %4671 = or i1 %4667, %4670
  br i1 %4671, label %"produce blur_x234", label %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge"

"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased228"
  %.pre3517 = shl nsw i64 %4666, 5
  br label %"consume blur_x235"

"end for blur_y.s0.x.x.rebased229":               ; preds = %"consume blur_x235", %after_bb223
  br i1 %102, label %"for blur_y.s0.x.x.rebased236.preheader", label %"end for blur_y.s0.x.x.rebased237", !prof !386

"for blur_y.s0.x.x.rebased236.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased229"
  %4672 = sext i32 %t1694 to i64
  %4673 = zext i32 %.pre-phi3510 to i64
  %4674 = mul nsw i64 %4673, %112
  %4675 = sub nsw i64 %4674, %96
  %4676 = zext i32 %.pre-phi3504 to i64
  %4677 = mul nsw i64 %4676, %112
  %4678 = sub nsw i64 %4677, %96
  %4679 = zext i32 %.pre-phi to i64
  %4680 = mul nsw i64 %4679, %112
  %4681 = sub nsw i64 %4680, %96
  %4682 = zext i32 %.pre-phi3484 to i64
  %4683 = mul nsw i64 %4682, %112
  %4684 = sub nsw i64 %4683, %96
  %4685 = zext i32 %.pre-phi3480 to i64
  %4686 = mul nsw i64 %4685, %112
  %4687 = sub nsw i64 %4686, %96
  %4688 = sext i32 %a26 to i64
  %4689 = add nsw i64 %4688, 6
  %4690 = mul nsw i64 %4689, %113
  %4691 = add nsw i64 %4690, %116
  br label %"for blur_y.s0.x.x.rebased236"

"produce blur_x234":                              ; preds = %"for blur_y.s0.x.x.rebased228"
  %t808 = add nsw i32 %4669, %t1801
  %4692 = sext i32 %t808 to i64
  %4693 = getelementptr inbounds i16, i16* %read_input, i64 %4692
  %4694 = getelementptr inbounds i16, i16* %4693, i64 1
  %4695 = bitcast i16* %4694 to <16 x i16>*
  %4696 = load <16 x i16>, <16 x i16>* %4695, align 2, !tbaa !396
  %4697 = getelementptr inbounds i16, i16* %4693, i64 17
  %4698 = bitcast i16* %4697 to <16 x i16>*
  %4699 = load <16 x i16>, <16 x i16>* %4698, align 2, !tbaa !396
  %4700 = bitcast i16* %4693 to <16 x i16>*
  %4701 = load <16 x i16>, <16 x i16>* %4700, align 2, !tbaa !396
  %4702 = getelementptr inbounds i16, i16* %4693, i64 16
  %4703 = bitcast i16* %4702 to <16 x i16>*
  %4704 = load <16 x i16>, <16 x i16>* %4703, align 2, !tbaa !396
  %4705 = getelementptr inbounds i16, i16* %4693, i64 2
  %4706 = bitcast i16* %4705 to <16 x i16>*
  %4707 = load <16 x i16>, <16 x i16>* %4706, align 2, !tbaa !396
  %4708 = getelementptr inbounds i16, i16* %4693, i64 18
  %4709 = bitcast i16* %4708 to <16 x i16>*
  %4710 = load <16 x i16>, <16 x i16>* %4709, align 2, !tbaa !396
  %4711 = getelementptr inbounds i16, i16* %4693, i64 4
  %4712 = bitcast i16* %4711 to <16 x i16>*
  %4713 = load <16 x i16>, <16 x i16>* %4712, align 2, !tbaa !396
  %4714 = getelementptr inbounds i16, i16* %4693, i64 20
  %4715 = bitcast i16* %4714 to <16 x i16>*
  %4716 = load <16 x i16>, <16 x i16>* %4715, align 2, !tbaa !396
  %4717 = getelementptr inbounds i16, i16* %4693, i64 3
  %4718 = bitcast i16* %4717 to <16 x i16>*
  %4719 = load <16 x i16>, <16 x i16>* %4718, align 2, !tbaa !396
  %4720 = getelementptr inbounds i16, i16* %4693, i64 19
  %4721 = bitcast i16* %4720 to <16 x i16>*
  %4722 = load <16 x i16>, <16 x i16>* %4721, align 2, !tbaa !396
  %4723 = add <16 x i16> %4701, %4696
  %4724 = add <16 x i16> %4723, %4707
  %4725 = add <16 x i16> %4724, %4713
  %4726 = add <16 x i16> %4725, %4719
  %4727 = add <16 x i16> %4704, %4699
  %4728 = add <16 x i16> %4727, %4710
  %4729 = add <16 x i16> %4728, %4716
  %4730 = add <16 x i16> %4729, %4722
  %4731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4726, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4730, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4733 = shufflevector <16 x i16> %4731, <16 x i16> %4732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4734 = lshr <32 x i16> %4733, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4735 = shufflevector <32 x i16> %4734, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4736 = shl nsw i64 %4666, 5
  %4737 = add nsw i64 %4736, %4521
  %4738 = getelementptr inbounds i16, i16* %blur_x, i64 %4737
  %4739 = bitcast i16* %4738 to <16 x i16>*
  store <16 x i16> %4735, <16 x i16>* %4739, align 2, !tbaa !399
  %4740 = shufflevector <32 x i16> %4734, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4741 = getelementptr inbounds i16, i16* %4738, i64 16
  %4742 = bitcast i16* %4741 to <16 x i16>*
  store <16 x i16> %4740, <16 x i16>* %4742, align 2, !tbaa !399
  br label %"consume blur_x235"

"consume blur_x235":                              ; preds = %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge", %"produce blur_x234"
  %.pre-phi3518 = phi i64 [ %.pre3517, %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge" ], [ %4736, %"produce blur_x234" ]
  %4743 = add nsw i64 %4524, %.pre-phi3518
  %4744 = getelementptr inbounds i16, i16* %blur_x, i64 %4743
  %4745 = bitcast i16* %4744 to <16 x i16>*
  %4746 = load <16 x i16>, <16 x i16>* %4745, align 2, !tbaa !399
  %4747 = getelementptr inbounds i16, i16* %4744, i64 16
  %4748 = bitcast i16* %4747 to <16 x i16>*
  %4749 = load <16 x i16>, <16 x i16>* %4748, align 2, !tbaa !399
  %4750 = add nsw i64 %4527, %.pre-phi3518
  %4751 = getelementptr inbounds i16, i16* %blur_x, i64 %4750
  %4752 = bitcast i16* %4751 to <16 x i16>*
  %4753 = load <16 x i16>, <16 x i16>* %4752, align 2, !tbaa !399
  %4754 = getelementptr inbounds i16, i16* %4751, i64 16
  %4755 = bitcast i16* %4754 to <16 x i16>*
  %4756 = load <16 x i16>, <16 x i16>* %4755, align 2, !tbaa !399
  %4757 = add nsw i64 %4530, %.pre-phi3518
  %4758 = getelementptr inbounds i16, i16* %blur_x, i64 %4757
  %4759 = bitcast i16* %4758 to <16 x i16>*
  %4760 = load <16 x i16>, <16 x i16>* %4759, align 2, !tbaa !399
  %4761 = getelementptr inbounds i16, i16* %4758, i64 16
  %4762 = bitcast i16* %4761 to <16 x i16>*
  %4763 = load <16 x i16>, <16 x i16>* %4762, align 2, !tbaa !399
  %4764 = add nsw i64 %4533, %.pre-phi3518
  %4765 = getelementptr inbounds i16, i16* %blur_x, i64 %4764
  %4766 = bitcast i16* %4765 to <16 x i16>*
  %4767 = load <16 x i16>, <16 x i16>* %4766, align 2, !tbaa !399
  %4768 = getelementptr inbounds i16, i16* %4765, i64 16
  %4769 = bitcast i16* %4768 to <16 x i16>*
  %4770 = load <16 x i16>, <16 x i16>* %4769, align 2, !tbaa !399
  %4771 = add nsw i64 %4536, %.pre-phi3518
  %4772 = getelementptr inbounds i16, i16* %blur_x, i64 %4771
  %4773 = bitcast i16* %4772 to <16 x i16>*
  %4774 = load <16 x i16>, <16 x i16>* %4773, align 2, !tbaa !399
  %4775 = getelementptr inbounds i16, i16* %4772, i64 16
  %4776 = bitcast i16* %4775 to <16 x i16>*
  %4777 = load <16 x i16>, <16 x i16>* %4776, align 2, !tbaa !399
  %4778 = add <16 x i16> %4753, %4746
  %4779 = add <16 x i16> %4778, %4760
  %4780 = add <16 x i16> %4779, %4767
  %4781 = add <16 x i16> %4780, %4774
  %4782 = add <16 x i16> %4756, %4749
  %4783 = add <16 x i16> %4782, %4763
  %4784 = add <16 x i16> %4783, %4770
  %4785 = add <16 x i16> %4784, %4777
  %4786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4781, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4785, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4788 = shufflevector <16 x i16> %4786, <16 x i16> %4787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4789 = lshr <32 x i16> %4788, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4790 = shufflevector <32 x i16> %4789, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4791 = add nsw i64 %4540, %.pre-phi3518
  %4792 = getelementptr inbounds i16, i16* %66, i64 %4791
  %4793 = bitcast i16* %4792 to <16 x i16>*
  store <16 x i16> %4790, <16 x i16>* %4793, align 2, !tbaa !401
  %4794 = shufflevector <32 x i16> %4789, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4795 = getelementptr inbounds i16, i16* %4792, i64 16
  %4796 = bitcast i16* %4795 to <16 x i16>*
  store <16 x i16> %4794, <16 x i16>* %4796, align 2, !tbaa !401
  %indvars.iv.next3278 = add nuw nsw i64 %indvars.iv3277, 1
  %.not2745 = icmp eq i64 %indvars.iv.next3278, %184
  br i1 %.not2745, label %"end for blur_y.s0.x.x.rebased229", label %"for blur_y.s0.x.x.rebased228"

"for blur_y.s0.x.x.rebased236":                   ; preds = %"for blur_y.s0.x.x.rebased236.preheader", %"consume blur_x244"
  %blur_y.s0.x.x.rebased238 = phi i32 [ %4909, %"consume blur_x244" ], [ 0, %"for blur_y.s0.x.x.rebased236.preheader" ]
  %4797 = add nsw i32 %blur_y.s0.x.x.rebased238, %t1626
  %a147 = shl nsw i32 %4797, 5
  %4798 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %4798, i32 %a147, i32 %a14
  %4799 = icmp slt i32 %4797, 1
  %4800 = icmp sgt i32 %4, %a147
  %4801 = or i1 %4799, %4800
  br i1 %4801, label %"produce blur_x242", label %"consume blur_x244"

"end for blur_y.s0.x.x.rebased237":               ; preds = %"consume blur_x244", %"end for blur_y.s0.x.x.rebased229"
  br i1 %34, label %"produce blur_x248", label %after_bb245

"produce blur_x242":                              ; preds = %"for blur_y.s0.x.x.rebased236"
  %4802 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s243 = select i1 %4802, i32 %b153, i32 %4
  %t813 = add nsw i32 %blur_x.s0.x.v1.base.s243, %t1801
  %4803 = sext i32 %t813 to i64
  %4804 = getelementptr inbounds i16, i16* %read_input, i64 %4803
  %4805 = getelementptr inbounds i16, i16* %4804, i64 1
  %4806 = bitcast i16* %4805 to <16 x i16>*
  %4807 = load <16 x i16>, <16 x i16>* %4806, align 2, !tbaa !396
  %4808 = getelementptr inbounds i16, i16* %4804, i64 17
  %4809 = bitcast i16* %4808 to <16 x i16>*
  %4810 = load <16 x i16>, <16 x i16>* %4809, align 2, !tbaa !396
  %4811 = bitcast i16* %4804 to <16 x i16>*
  %4812 = load <16 x i16>, <16 x i16>* %4811, align 2, !tbaa !396
  %4813 = getelementptr inbounds i16, i16* %4804, i64 16
  %4814 = bitcast i16* %4813 to <16 x i16>*
  %4815 = load <16 x i16>, <16 x i16>* %4814, align 2, !tbaa !396
  %4816 = getelementptr inbounds i16, i16* %4804, i64 2
  %4817 = bitcast i16* %4816 to <16 x i16>*
  %4818 = load <16 x i16>, <16 x i16>* %4817, align 2, !tbaa !396
  %4819 = getelementptr inbounds i16, i16* %4804, i64 18
  %4820 = bitcast i16* %4819 to <16 x i16>*
  %4821 = load <16 x i16>, <16 x i16>* %4820, align 2, !tbaa !396
  %4822 = getelementptr inbounds i16, i16* %4804, i64 4
  %4823 = bitcast i16* %4822 to <16 x i16>*
  %4824 = load <16 x i16>, <16 x i16>* %4823, align 2, !tbaa !396
  %4825 = getelementptr inbounds i16, i16* %4804, i64 20
  %4826 = bitcast i16* %4825 to <16 x i16>*
  %4827 = load <16 x i16>, <16 x i16>* %4826, align 2, !tbaa !396
  %4828 = getelementptr inbounds i16, i16* %4804, i64 3
  %4829 = bitcast i16* %4828 to <16 x i16>*
  %4830 = load <16 x i16>, <16 x i16>* %4829, align 2, !tbaa !396
  %4831 = getelementptr inbounds i16, i16* %4804, i64 19
  %4832 = bitcast i16* %4831 to <16 x i16>*
  %4833 = load <16 x i16>, <16 x i16>* %4832, align 2, !tbaa !396
  %4834 = add <16 x i16> %4812, %4807
  %4835 = add <16 x i16> %4834, %4818
  %4836 = add <16 x i16> %4835, %4824
  %4837 = add <16 x i16> %4836, %4830
  %4838 = add <16 x i16> %4815, %4810
  %4839 = add <16 x i16> %4838, %4821
  %4840 = add <16 x i16> %4839, %4827
  %4841 = add <16 x i16> %4840, %4833
  %4842 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4837, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4841, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4844 = shufflevector <16 x i16> %4842, <16 x i16> %4843, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4845 = lshr <32 x i16> %4844, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4846 = shufflevector <32 x i16> %4845, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4847 = sext i32 %blur_x.s0.x.v1.base.s243 to i64
  %4848 = add nsw i64 %4847, %4672
  %4849 = getelementptr inbounds i16, i16* %blur_x, i64 %4848
  %4850 = bitcast i16* %4849 to <16 x i16>*
  store <16 x i16> %4846, <16 x i16>* %4850, align 2, !tbaa !399
  %4851 = shufflevector <32 x i16> %4845, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4852 = getelementptr inbounds i16, i16* %4849, i64 16
  %4853 = bitcast i16* %4852 to <16 x i16>*
  store <16 x i16> %4851, <16 x i16>* %4853, align 2, !tbaa !399
  br label %"consume blur_x244"

"consume blur_x244":                              ; preds = %"for blur_y.s0.x.x.rebased236", %"produce blur_x242"
  %4854 = sext i32 %b153 to i64
  %4855 = add nsw i64 %4675, %4854
  %4856 = getelementptr inbounds i16, i16* %blur_x, i64 %4855
  %4857 = bitcast i16* %4856 to <16 x i16>*
  %4858 = load <16 x i16>, <16 x i16>* %4857, align 2, !tbaa !399
  %4859 = getelementptr inbounds i16, i16* %4856, i64 16
  %4860 = bitcast i16* %4859 to <16 x i16>*
  %4861 = load <16 x i16>, <16 x i16>* %4860, align 2, !tbaa !399
  %4862 = add nsw i64 %4678, %4854
  %4863 = getelementptr inbounds i16, i16* %blur_x, i64 %4862
  %4864 = bitcast i16* %4863 to <16 x i16>*
  %4865 = load <16 x i16>, <16 x i16>* %4864, align 2, !tbaa !399
  %4866 = getelementptr inbounds i16, i16* %4863, i64 16
  %4867 = bitcast i16* %4866 to <16 x i16>*
  %4868 = load <16 x i16>, <16 x i16>* %4867, align 2, !tbaa !399
  %4869 = add nsw i64 %4681, %4854
  %4870 = getelementptr inbounds i16, i16* %blur_x, i64 %4869
  %4871 = bitcast i16* %4870 to <16 x i16>*
  %4872 = load <16 x i16>, <16 x i16>* %4871, align 2, !tbaa !399
  %4873 = getelementptr inbounds i16, i16* %4870, i64 16
  %4874 = bitcast i16* %4873 to <16 x i16>*
  %4875 = load <16 x i16>, <16 x i16>* %4874, align 2, !tbaa !399
  %4876 = add nsw i64 %4684, %4854
  %4877 = getelementptr inbounds i16, i16* %blur_x, i64 %4876
  %4878 = bitcast i16* %4877 to <16 x i16>*
  %4879 = load <16 x i16>, <16 x i16>* %4878, align 2, !tbaa !399
  %4880 = getelementptr inbounds i16, i16* %4877, i64 16
  %4881 = bitcast i16* %4880 to <16 x i16>*
  %4882 = load <16 x i16>, <16 x i16>* %4881, align 2, !tbaa !399
  %4883 = add nsw i64 %4687, %4854
  %4884 = getelementptr inbounds i16, i16* %blur_x, i64 %4883
  %4885 = bitcast i16* %4884 to <16 x i16>*
  %4886 = load <16 x i16>, <16 x i16>* %4885, align 2, !tbaa !399
  %4887 = getelementptr inbounds i16, i16* %4884, i64 16
  %4888 = bitcast i16* %4887 to <16 x i16>*
  %4889 = load <16 x i16>, <16 x i16>* %4888, align 2, !tbaa !399
  %4890 = add <16 x i16> %4865, %4858
  %4891 = add <16 x i16> %4890, %4872
  %4892 = add <16 x i16> %4891, %4879
  %4893 = add <16 x i16> %4892, %4886
  %4894 = add <16 x i16> %4868, %4861
  %4895 = add <16 x i16> %4894, %4875
  %4896 = add <16 x i16> %4895, %4882
  %4897 = add <16 x i16> %4896, %4889
  %4898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4893, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4897, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4900 = shufflevector <16 x i16> %4898, <16 x i16> %4899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4901 = lshr <32 x i16> %4900, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4902 = shufflevector <32 x i16> %4901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4903 = add nsw i64 %4691, %4854
  %4904 = getelementptr inbounds i16, i16* %66, i64 %4903
  %4905 = bitcast i16* %4904 to <16 x i16>*
  store <16 x i16> %4902, <16 x i16>* %4905, align 2, !tbaa !401
  %4906 = shufflevector <32 x i16> %4901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4907 = getelementptr inbounds i16, i16* %4904, i64 16
  %4908 = bitcast i16* %4907 to <16 x i16>*
  store <16 x i16> %4906, <16 x i16>* %4908, align 2, !tbaa !401
  %4909 = add nuw nsw i32 %blur_y.s0.x.x.rebased238, 1
  %.not2744 = icmp eq i32 %4909, %t1683
  br i1 %.not2744, label %"end for blur_y.s0.x.x.rebased237", label %"for blur_y.s0.x.x.rebased236"

after_bb245:                                      ; preds = %"end for blur_y.s0.x.x.rebased237", %"produce blur_x248"
  br i1 %100, label %"for blur_y.s0.x.x.rebased250.preheader", label %"end for blur_y.s0.x.x.rebased251", !prof !386

"for blur_y.s0.x.x.rebased250.preheader":         ; preds = %after_bb245
  %4910 = sext i32 %t1700 to i64
  %4911 = zext i32 %.pre-phi to i64
  %4912 = mul nsw i64 %4911, %112
  %4913 = sub nsw i64 %4912, %96
  %4914 = zext i32 %.pre-phi3510 to i64
  %4915 = mul nsw i64 %4914, %112
  %4916 = sub nsw i64 %4915, %96
  %4917 = zext i32 %.pre-phi3480 to i64
  %4918 = mul nsw i64 %4917, %112
  %4919 = sub nsw i64 %4918, %96
  %4920 = zext i32 %.pre-phi3488 to i64
  %4921 = mul nsw i64 %4920, %112
  %4922 = sub nsw i64 %4921, %96
  %4923 = zext i32 %.pre-phi3484 to i64
  %4924 = mul nsw i64 %4923, %112
  %4925 = sub nsw i64 %4924, %96
  %4926 = sext i32 %a26 to i64
  %4927 = add nsw i64 %4926, 7
  %4928 = mul nsw i64 %4927, %113
  %4929 = add nsw i64 %4928, %116
  br label %"for blur_y.s0.x.x.rebased250"

"produce blur_x248":                              ; preds = %"end for blur_y.s0.x.x.rebased237"
  %4930 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %4931 = getelementptr inbounds i16, i16* %4930, i64 -31
  %4932 = bitcast i16* %4931 to <16 x i16>*
  %4933 = load <16 x i16>, <16 x i16>* %4932, align 2, !tbaa !396
  %4934 = getelementptr inbounds i16, i16* %4930, i64 -15
  %4935 = bitcast i16* %4934 to <16 x i16>*
  %4936 = load <16 x i16>, <16 x i16>* %4935, align 2, !tbaa !396
  %4937 = getelementptr inbounds i16, i16* %4930, i64 -32
  %4938 = bitcast i16* %4937 to <16 x i16>*
  %4939 = load <16 x i16>, <16 x i16>* %4938, align 2, !tbaa !396
  %4940 = getelementptr inbounds i16, i16* %4930, i64 -16
  %4941 = bitcast i16* %4940 to <16 x i16>*
  %4942 = load <16 x i16>, <16 x i16>* %4941, align 2, !tbaa !396
  %4943 = getelementptr inbounds i16, i16* %4930, i64 -30
  %4944 = bitcast i16* %4943 to <16 x i16>*
  %4945 = load <16 x i16>, <16 x i16>* %4944, align 2, !tbaa !396
  %4946 = getelementptr inbounds i16, i16* %4930, i64 -14
  %4947 = bitcast i16* %4946 to <16 x i16>*
  %4948 = load <16 x i16>, <16 x i16>* %4947, align 2, !tbaa !396
  %4949 = getelementptr inbounds i16, i16* %4930, i64 -28
  %4950 = bitcast i16* %4949 to <16 x i16>*
  %4951 = load <16 x i16>, <16 x i16>* %4950, align 2, !tbaa !396
  %4952 = getelementptr inbounds i16, i16* %4930, i64 -12
  %4953 = bitcast i16* %4952 to <16 x i16>*
  %4954 = load <16 x i16>, <16 x i16>* %4953, align 2, !tbaa !396
  %4955 = getelementptr inbounds i16, i16* %4930, i64 -29
  %4956 = bitcast i16* %4955 to <16 x i16>*
  %4957 = load <16 x i16>, <16 x i16>* %4956, align 2, !tbaa !396
  %4958 = getelementptr inbounds i16, i16* %4930, i64 -13
  %4959 = bitcast i16* %4958 to <16 x i16>*
  %4960 = load <16 x i16>, <16 x i16>* %4959, align 2, !tbaa !396
  %4961 = add <16 x i16> %4939, %4933
  %4962 = add <16 x i16> %4961, %4945
  %4963 = add <16 x i16> %4962, %4951
  %4964 = add <16 x i16> %4963, %4957
  %4965 = add <16 x i16> %4942, %4936
  %4966 = add <16 x i16> %4965, %4948
  %4967 = add <16 x i16> %4966, %4954
  %4968 = add <16 x i16> %4967, %4960
  %4969 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4964, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4968, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4971 = shufflevector <16 x i16> %4969, <16 x i16> %4970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4972 = lshr <32 x i16> %4971, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4973 = shufflevector <32 x i16> %4972, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4974 = zext i32 %.pre-phi3488 to i64
  %4975 = mul nsw i64 %97, %4974
  %4976 = add nsw i64 %99, %4975
  %4977 = getelementptr inbounds i16, i16* %blur_x, i64 %4976
  %4978 = getelementptr inbounds i16, i16* %4977, i64 -32
  %4979 = bitcast i16* %4978 to <16 x i16>*
  store <16 x i16> %4973, <16 x i16>* %4979, align 2, !tbaa !399
  %4980 = shufflevector <32 x i16> %4972, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4981 = getelementptr inbounds i16, i16* %4977, i64 -16
  %4982 = bitcast i16* %4981 to <16 x i16>*
  store <16 x i16> %4980, <16 x i16>* %4982, align 2, !tbaa !399
  %4983 = zext i32 %.pre-phi to i64
  %4984 = mul nsw i64 %4983, %112
  %4985 = add nsw i64 %4984, %94
  %4986 = getelementptr inbounds i16, i16* %blur_x, i64 %4985
  %4987 = getelementptr inbounds i16, i16* %4986, i64 -32
  %4988 = bitcast i16* %4987 to <16 x i16>*
  %4989 = load <16 x i16>, <16 x i16>* %4988, align 2, !tbaa !399
  %4990 = getelementptr inbounds i16, i16* %4986, i64 -16
  %4991 = bitcast i16* %4990 to <16 x i16>*
  %4992 = load <16 x i16>, <16 x i16>* %4991, align 2, !tbaa !399
  %4993 = zext i32 %.pre-phi3510 to i64
  %4994 = mul nsw i64 %4993, %112
  %4995 = add nsw i64 %4994, %94
  %4996 = getelementptr inbounds i16, i16* %blur_x, i64 %4995
  %4997 = getelementptr inbounds i16, i16* %4996, i64 -32
  %4998 = bitcast i16* %4997 to <16 x i16>*
  %4999 = load <16 x i16>, <16 x i16>* %4998, align 2, !tbaa !399
  %5000 = getelementptr inbounds i16, i16* %4996, i64 -16
  %5001 = bitcast i16* %5000 to <16 x i16>*
  %5002 = load <16 x i16>, <16 x i16>* %5001, align 2, !tbaa !399
  %5003 = zext i32 %.pre-phi3480 to i64
  %5004 = mul nsw i64 %5003, %112
  %5005 = add nsw i64 %5004, %94
  %5006 = getelementptr inbounds i16, i16* %blur_x, i64 %5005
  %5007 = getelementptr inbounds i16, i16* %5006, i64 -32
  %5008 = bitcast i16* %5007 to <16 x i16>*
  %5009 = load <16 x i16>, <16 x i16>* %5008, align 2, !tbaa !399
  %5010 = getelementptr inbounds i16, i16* %5006, i64 -16
  %5011 = bitcast i16* %5010 to <16 x i16>*
  %5012 = load <16 x i16>, <16 x i16>* %5011, align 2, !tbaa !399
  %5013 = mul nsw i64 %4974, %112
  %5014 = add nsw i64 %5013, %94
  %5015 = getelementptr inbounds i16, i16* %blur_x, i64 %5014
  %5016 = getelementptr inbounds i16, i16* %5015, i64 -32
  %5017 = bitcast i16* %5016 to <16 x i16>*
  %5018 = load <16 x i16>, <16 x i16>* %5017, align 2, !tbaa !399
  %5019 = getelementptr inbounds i16, i16* %5015, i64 -16
  %5020 = bitcast i16* %5019 to <16 x i16>*
  %5021 = load <16 x i16>, <16 x i16>* %5020, align 2, !tbaa !399
  %5022 = zext i32 %.pre-phi3484 to i64
  %5023 = mul nsw i64 %5022, %112
  %5024 = add nsw i64 %5023, %94
  %5025 = getelementptr inbounds i16, i16* %blur_x, i64 %5024
  %5026 = getelementptr inbounds i16, i16* %5025, i64 -32
  %5027 = bitcast i16* %5026 to <16 x i16>*
  %5028 = load <16 x i16>, <16 x i16>* %5027, align 2, !tbaa !399
  %5029 = getelementptr inbounds i16, i16* %5025, i64 -16
  %5030 = bitcast i16* %5029 to <16 x i16>*
  %5031 = load <16 x i16>, <16 x i16>* %5030, align 2, !tbaa !399
  %5032 = add <16 x i16> %4999, %4989
  %5033 = add <16 x i16> %5032, %5009
  %5034 = add <16 x i16> %5033, %5018
  %5035 = add <16 x i16> %5034, %5028
  %5036 = add <16 x i16> %5002, %4992
  %5037 = add <16 x i16> %5036, %5012
  %5038 = add <16 x i16> %5037, %5021
  %5039 = add <16 x i16> %5038, %5031
  %5040 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5035, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5041 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5039, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5042 = shufflevector <16 x i16> %5040, <16 x i16> %5041, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5043 = lshr <32 x i16> %5042, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5044 = shufflevector <32 x i16> %5043, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5045 = sext i32 %a26 to i64
  %5046 = add nsw i64 %5045, 7
  %5047 = mul nsw i64 %5046, %113
  %5048 = add nsw i64 %115, %5047
  %5049 = getelementptr inbounds i16, i16* %66, i64 %5048
  %5050 = getelementptr inbounds i16, i16* %5049, i64 -32
  %5051 = bitcast i16* %5050 to <16 x i16>*
  store <16 x i16> %5044, <16 x i16>* %5051, align 2, !tbaa !401
  %5052 = shufflevector <32 x i16> %5043, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5053 = getelementptr inbounds i16, i16* %5049, i64 -16
  %5054 = bitcast i16* %5053 to <16 x i16>*
  store <16 x i16> %5052, <16 x i16>* %5054, align 2, !tbaa !401
  br label %after_bb245

"for blur_y.s0.x.x.rebased250":                   ; preds = %"for blur_y.s0.x.x.rebased250.preheader", %"consume blur_x257"
  %indvars.iv3280 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased250.preheader" ], [ %indvars.iv.next3281, %"consume blur_x257" ]
  %5055 = add nsw i64 %indvars.iv3280, %101
  %5056 = icmp slt i64 %5055, 1
  %5057 = trunc i64 %5055 to i32
  %5058 = shl nsw i32 %5057, 5
  %5059 = icmp sgt i32 %4, %5058
  %5060 = or i1 %5056, %5059
  br i1 %5060, label %"produce blur_x256", label %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge"

"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased250"
  %.pre3519 = shl nsw i64 %5055, 5
  br label %"consume blur_x257"

"end for blur_y.s0.x.x.rebased251":               ; preds = %"consume blur_x257", %after_bb245
  br i1 %102, label %"for blur_y.s0.x.x.rebased258.preheader", label %"end for blur_y.s0.x.x.rebased259", !prof !386

"for blur_y.s0.x.x.rebased258.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased251"
  %5061 = sext i32 %t1700 to i64
  %5062 = zext i32 %.pre-phi to i64
  %5063 = mul nsw i64 %5062, %112
  %5064 = sub nsw i64 %5063, %96
  %5065 = zext i32 %.pre-phi3510 to i64
  %5066 = mul nsw i64 %5065, %112
  %5067 = sub nsw i64 %5066, %96
  %5068 = zext i32 %.pre-phi3480 to i64
  %5069 = mul nsw i64 %5068, %112
  %5070 = sub nsw i64 %5069, %96
  %5071 = zext i32 %.pre-phi3488 to i64
  %5072 = mul nsw i64 %5071, %112
  %5073 = sub nsw i64 %5072, %96
  %5074 = zext i32 %.pre-phi3484 to i64
  %5075 = mul nsw i64 %5074, %112
  %5076 = sub nsw i64 %5075, %96
  %5077 = sext i32 %a26 to i64
  %5078 = add nsw i64 %5077, 7
  %5079 = mul nsw i64 %5078, %113
  %5080 = add nsw i64 %5079, %116
  br label %"for blur_y.s0.x.x.rebased258"

"produce blur_x256":                              ; preds = %"for blur_y.s0.x.x.rebased250"
  %t824 = add nsw i32 %5058, %t1817
  %5081 = sext i32 %t824 to i64
  %5082 = getelementptr inbounds i16, i16* %read_input, i64 %5081
  %5083 = getelementptr inbounds i16, i16* %5082, i64 1
  %5084 = bitcast i16* %5083 to <16 x i16>*
  %5085 = load <16 x i16>, <16 x i16>* %5084, align 2, !tbaa !396
  %5086 = getelementptr inbounds i16, i16* %5082, i64 17
  %5087 = bitcast i16* %5086 to <16 x i16>*
  %5088 = load <16 x i16>, <16 x i16>* %5087, align 2, !tbaa !396
  %5089 = bitcast i16* %5082 to <16 x i16>*
  %5090 = load <16 x i16>, <16 x i16>* %5089, align 2, !tbaa !396
  %5091 = getelementptr inbounds i16, i16* %5082, i64 16
  %5092 = bitcast i16* %5091 to <16 x i16>*
  %5093 = load <16 x i16>, <16 x i16>* %5092, align 2, !tbaa !396
  %5094 = getelementptr inbounds i16, i16* %5082, i64 2
  %5095 = bitcast i16* %5094 to <16 x i16>*
  %5096 = load <16 x i16>, <16 x i16>* %5095, align 2, !tbaa !396
  %5097 = getelementptr inbounds i16, i16* %5082, i64 18
  %5098 = bitcast i16* %5097 to <16 x i16>*
  %5099 = load <16 x i16>, <16 x i16>* %5098, align 2, !tbaa !396
  %5100 = getelementptr inbounds i16, i16* %5082, i64 4
  %5101 = bitcast i16* %5100 to <16 x i16>*
  %5102 = load <16 x i16>, <16 x i16>* %5101, align 2, !tbaa !396
  %5103 = getelementptr inbounds i16, i16* %5082, i64 20
  %5104 = bitcast i16* %5103 to <16 x i16>*
  %5105 = load <16 x i16>, <16 x i16>* %5104, align 2, !tbaa !396
  %5106 = getelementptr inbounds i16, i16* %5082, i64 3
  %5107 = bitcast i16* %5106 to <16 x i16>*
  %5108 = load <16 x i16>, <16 x i16>* %5107, align 2, !tbaa !396
  %5109 = getelementptr inbounds i16, i16* %5082, i64 19
  %5110 = bitcast i16* %5109 to <16 x i16>*
  %5111 = load <16 x i16>, <16 x i16>* %5110, align 2, !tbaa !396
  %5112 = add <16 x i16> %5090, %5085
  %5113 = add <16 x i16> %5112, %5096
  %5114 = add <16 x i16> %5113, %5102
  %5115 = add <16 x i16> %5114, %5108
  %5116 = add <16 x i16> %5093, %5088
  %5117 = add <16 x i16> %5116, %5099
  %5118 = add <16 x i16> %5117, %5105
  %5119 = add <16 x i16> %5118, %5111
  %5120 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5115, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5119, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5122 = shufflevector <16 x i16> %5120, <16 x i16> %5121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5123 = lshr <32 x i16> %5122, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5124 = shufflevector <32 x i16> %5123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5125 = shl nsw i64 %5055, 5
  %5126 = add nsw i64 %5125, %4910
  %5127 = getelementptr inbounds i16, i16* %blur_x, i64 %5126
  %5128 = bitcast i16* %5127 to <16 x i16>*
  store <16 x i16> %5124, <16 x i16>* %5128, align 2, !tbaa !399
  %5129 = shufflevector <32 x i16> %5123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5130 = getelementptr inbounds i16, i16* %5127, i64 16
  %5131 = bitcast i16* %5130 to <16 x i16>*
  store <16 x i16> %5129, <16 x i16>* %5131, align 2, !tbaa !399
  br label %"consume blur_x257"

"consume blur_x257":                              ; preds = %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge", %"produce blur_x256"
  %.pre-phi3520 = phi i64 [ %.pre3519, %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge" ], [ %5125, %"produce blur_x256" ]
  %5132 = add nsw i64 %4913, %.pre-phi3520
  %5133 = getelementptr inbounds i16, i16* %blur_x, i64 %5132
  %5134 = bitcast i16* %5133 to <16 x i16>*
  %5135 = load <16 x i16>, <16 x i16>* %5134, align 2, !tbaa !399
  %5136 = getelementptr inbounds i16, i16* %5133, i64 16
  %5137 = bitcast i16* %5136 to <16 x i16>*
  %5138 = load <16 x i16>, <16 x i16>* %5137, align 2, !tbaa !399
  %5139 = add nsw i64 %4916, %.pre-phi3520
  %5140 = getelementptr inbounds i16, i16* %blur_x, i64 %5139
  %5141 = bitcast i16* %5140 to <16 x i16>*
  %5142 = load <16 x i16>, <16 x i16>* %5141, align 2, !tbaa !399
  %5143 = getelementptr inbounds i16, i16* %5140, i64 16
  %5144 = bitcast i16* %5143 to <16 x i16>*
  %5145 = load <16 x i16>, <16 x i16>* %5144, align 2, !tbaa !399
  %5146 = add nsw i64 %4919, %.pre-phi3520
  %5147 = getelementptr inbounds i16, i16* %blur_x, i64 %5146
  %5148 = bitcast i16* %5147 to <16 x i16>*
  %5149 = load <16 x i16>, <16 x i16>* %5148, align 2, !tbaa !399
  %5150 = getelementptr inbounds i16, i16* %5147, i64 16
  %5151 = bitcast i16* %5150 to <16 x i16>*
  %5152 = load <16 x i16>, <16 x i16>* %5151, align 2, !tbaa !399
  %5153 = add nsw i64 %4922, %.pre-phi3520
  %5154 = getelementptr inbounds i16, i16* %blur_x, i64 %5153
  %5155 = bitcast i16* %5154 to <16 x i16>*
  %5156 = load <16 x i16>, <16 x i16>* %5155, align 2, !tbaa !399
  %5157 = getelementptr inbounds i16, i16* %5154, i64 16
  %5158 = bitcast i16* %5157 to <16 x i16>*
  %5159 = load <16 x i16>, <16 x i16>* %5158, align 2, !tbaa !399
  %5160 = add nsw i64 %4925, %.pre-phi3520
  %5161 = getelementptr inbounds i16, i16* %blur_x, i64 %5160
  %5162 = bitcast i16* %5161 to <16 x i16>*
  %5163 = load <16 x i16>, <16 x i16>* %5162, align 2, !tbaa !399
  %5164 = getelementptr inbounds i16, i16* %5161, i64 16
  %5165 = bitcast i16* %5164 to <16 x i16>*
  %5166 = load <16 x i16>, <16 x i16>* %5165, align 2, !tbaa !399
  %5167 = add <16 x i16> %5142, %5135
  %5168 = add <16 x i16> %5167, %5149
  %5169 = add <16 x i16> %5168, %5156
  %5170 = add <16 x i16> %5169, %5163
  %5171 = add <16 x i16> %5145, %5138
  %5172 = add <16 x i16> %5171, %5152
  %5173 = add <16 x i16> %5172, %5159
  %5174 = add <16 x i16> %5173, %5166
  %5175 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5170, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5176 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5174, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5177 = shufflevector <16 x i16> %5175, <16 x i16> %5176, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5178 = lshr <32 x i16> %5177, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5179 = shufflevector <32 x i16> %5178, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5180 = add nsw i64 %4929, %.pre-phi3520
  %5181 = getelementptr inbounds i16, i16* %66, i64 %5180
  %5182 = bitcast i16* %5181 to <16 x i16>*
  store <16 x i16> %5179, <16 x i16>* %5182, align 2, !tbaa !401
  %5183 = shufflevector <32 x i16> %5178, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5184 = getelementptr inbounds i16, i16* %5181, i64 16
  %5185 = bitcast i16* %5184 to <16 x i16>*
  store <16 x i16> %5183, <16 x i16>* %5185, align 2, !tbaa !401
  %indvars.iv.next3281 = add nuw nsw i64 %indvars.iv3280, 1
  %.not2743 = icmp eq i64 %indvars.iv.next3281, %184
  br i1 %.not2743, label %"end for blur_y.s0.x.x.rebased251", label %"for blur_y.s0.x.x.rebased250"

"for blur_y.s0.x.x.rebased258":                   ; preds = %"for blur_y.s0.x.x.rebased258.preheader", %"consume blur_x266"
  %blur_y.s0.x.x.rebased260 = phi i32 [ %5298, %"consume blur_x266" ], [ 0, %"for blur_y.s0.x.x.rebased258.preheader" ]
  %5186 = add nsw i32 %blur_y.s0.x.x.rebased260, %t1626
  %a154 = shl nsw i32 %5186, 5
  %5187 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %5187, i32 %a154, i32 %a14
  %5188 = icmp slt i32 %5186, 1
  %5189 = icmp sgt i32 %4, %a154
  %5190 = or i1 %5188, %5189
  br i1 %5190, label %"produce blur_x264", label %"consume blur_x266"

"end for blur_y.s0.x.x.rebased259":               ; preds = %"consume blur_x266", %"end for blur_y.s0.x.x.rebased251"
  br i1 %34, label %"produce blur_x270", label %after_bb267

"produce blur_x264":                              ; preds = %"for blur_y.s0.x.x.rebased258"
  %5191 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s265 = select i1 %5191, i32 %b160, i32 %4
  %t829 = add nsw i32 %blur_x.s0.x.v1.base.s265, %t1817
  %5192 = sext i32 %t829 to i64
  %5193 = getelementptr inbounds i16, i16* %read_input, i64 %5192
  %5194 = getelementptr inbounds i16, i16* %5193, i64 1
  %5195 = bitcast i16* %5194 to <16 x i16>*
  %5196 = load <16 x i16>, <16 x i16>* %5195, align 2, !tbaa !396
  %5197 = getelementptr inbounds i16, i16* %5193, i64 17
  %5198 = bitcast i16* %5197 to <16 x i16>*
  %5199 = load <16 x i16>, <16 x i16>* %5198, align 2, !tbaa !396
  %5200 = bitcast i16* %5193 to <16 x i16>*
  %5201 = load <16 x i16>, <16 x i16>* %5200, align 2, !tbaa !396
  %5202 = getelementptr inbounds i16, i16* %5193, i64 16
  %5203 = bitcast i16* %5202 to <16 x i16>*
  %5204 = load <16 x i16>, <16 x i16>* %5203, align 2, !tbaa !396
  %5205 = getelementptr inbounds i16, i16* %5193, i64 2
  %5206 = bitcast i16* %5205 to <16 x i16>*
  %5207 = load <16 x i16>, <16 x i16>* %5206, align 2, !tbaa !396
  %5208 = getelementptr inbounds i16, i16* %5193, i64 18
  %5209 = bitcast i16* %5208 to <16 x i16>*
  %5210 = load <16 x i16>, <16 x i16>* %5209, align 2, !tbaa !396
  %5211 = getelementptr inbounds i16, i16* %5193, i64 4
  %5212 = bitcast i16* %5211 to <16 x i16>*
  %5213 = load <16 x i16>, <16 x i16>* %5212, align 2, !tbaa !396
  %5214 = getelementptr inbounds i16, i16* %5193, i64 20
  %5215 = bitcast i16* %5214 to <16 x i16>*
  %5216 = load <16 x i16>, <16 x i16>* %5215, align 2, !tbaa !396
  %5217 = getelementptr inbounds i16, i16* %5193, i64 3
  %5218 = bitcast i16* %5217 to <16 x i16>*
  %5219 = load <16 x i16>, <16 x i16>* %5218, align 2, !tbaa !396
  %5220 = getelementptr inbounds i16, i16* %5193, i64 19
  %5221 = bitcast i16* %5220 to <16 x i16>*
  %5222 = load <16 x i16>, <16 x i16>* %5221, align 2, !tbaa !396
  %5223 = add <16 x i16> %5201, %5196
  %5224 = add <16 x i16> %5223, %5207
  %5225 = add <16 x i16> %5224, %5213
  %5226 = add <16 x i16> %5225, %5219
  %5227 = add <16 x i16> %5204, %5199
  %5228 = add <16 x i16> %5227, %5210
  %5229 = add <16 x i16> %5228, %5216
  %5230 = add <16 x i16> %5229, %5222
  %5231 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5226, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5230, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5233 = shufflevector <16 x i16> %5231, <16 x i16> %5232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5234 = lshr <32 x i16> %5233, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5235 = shufflevector <32 x i16> %5234, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5236 = sext i32 %blur_x.s0.x.v1.base.s265 to i64
  %5237 = add nsw i64 %5236, %5061
  %5238 = getelementptr inbounds i16, i16* %blur_x, i64 %5237
  %5239 = bitcast i16* %5238 to <16 x i16>*
  store <16 x i16> %5235, <16 x i16>* %5239, align 2, !tbaa !399
  %5240 = shufflevector <32 x i16> %5234, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5241 = getelementptr inbounds i16, i16* %5238, i64 16
  %5242 = bitcast i16* %5241 to <16 x i16>*
  store <16 x i16> %5240, <16 x i16>* %5242, align 2, !tbaa !399
  br label %"consume blur_x266"

"consume blur_x266":                              ; preds = %"for blur_y.s0.x.x.rebased258", %"produce blur_x264"
  %5243 = sext i32 %b160 to i64
  %5244 = add nsw i64 %5064, %5243
  %5245 = getelementptr inbounds i16, i16* %blur_x, i64 %5244
  %5246 = bitcast i16* %5245 to <16 x i16>*
  %5247 = load <16 x i16>, <16 x i16>* %5246, align 2, !tbaa !399
  %5248 = getelementptr inbounds i16, i16* %5245, i64 16
  %5249 = bitcast i16* %5248 to <16 x i16>*
  %5250 = load <16 x i16>, <16 x i16>* %5249, align 2, !tbaa !399
  %5251 = add nsw i64 %5067, %5243
  %5252 = getelementptr inbounds i16, i16* %blur_x, i64 %5251
  %5253 = bitcast i16* %5252 to <16 x i16>*
  %5254 = load <16 x i16>, <16 x i16>* %5253, align 2, !tbaa !399
  %5255 = getelementptr inbounds i16, i16* %5252, i64 16
  %5256 = bitcast i16* %5255 to <16 x i16>*
  %5257 = load <16 x i16>, <16 x i16>* %5256, align 2, !tbaa !399
  %5258 = add nsw i64 %5070, %5243
  %5259 = getelementptr inbounds i16, i16* %blur_x, i64 %5258
  %5260 = bitcast i16* %5259 to <16 x i16>*
  %5261 = load <16 x i16>, <16 x i16>* %5260, align 2, !tbaa !399
  %5262 = getelementptr inbounds i16, i16* %5259, i64 16
  %5263 = bitcast i16* %5262 to <16 x i16>*
  %5264 = load <16 x i16>, <16 x i16>* %5263, align 2, !tbaa !399
  %5265 = add nsw i64 %5073, %5243
  %5266 = getelementptr inbounds i16, i16* %blur_x, i64 %5265
  %5267 = bitcast i16* %5266 to <16 x i16>*
  %5268 = load <16 x i16>, <16 x i16>* %5267, align 2, !tbaa !399
  %5269 = getelementptr inbounds i16, i16* %5266, i64 16
  %5270 = bitcast i16* %5269 to <16 x i16>*
  %5271 = load <16 x i16>, <16 x i16>* %5270, align 2, !tbaa !399
  %5272 = add nsw i64 %5076, %5243
  %5273 = getelementptr inbounds i16, i16* %blur_x, i64 %5272
  %5274 = bitcast i16* %5273 to <16 x i16>*
  %5275 = load <16 x i16>, <16 x i16>* %5274, align 2, !tbaa !399
  %5276 = getelementptr inbounds i16, i16* %5273, i64 16
  %5277 = bitcast i16* %5276 to <16 x i16>*
  %5278 = load <16 x i16>, <16 x i16>* %5277, align 2, !tbaa !399
  %5279 = add <16 x i16> %5254, %5247
  %5280 = add <16 x i16> %5279, %5261
  %5281 = add <16 x i16> %5280, %5268
  %5282 = add <16 x i16> %5281, %5275
  %5283 = add <16 x i16> %5257, %5250
  %5284 = add <16 x i16> %5283, %5264
  %5285 = add <16 x i16> %5284, %5271
  %5286 = add <16 x i16> %5285, %5278
  %5287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5282, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5286, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5289 = shufflevector <16 x i16> %5287, <16 x i16> %5288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5290 = lshr <32 x i16> %5289, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5291 = shufflevector <32 x i16> %5290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5292 = add nsw i64 %5080, %5243
  %5293 = getelementptr inbounds i16, i16* %66, i64 %5292
  %5294 = bitcast i16* %5293 to <16 x i16>*
  store <16 x i16> %5291, <16 x i16>* %5294, align 2, !tbaa !401
  %5295 = shufflevector <32 x i16> %5290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5296 = getelementptr inbounds i16, i16* %5293, i64 16
  %5297 = bitcast i16* %5296 to <16 x i16>*
  store <16 x i16> %5295, <16 x i16>* %5297, align 2, !tbaa !401
  %5298 = add nuw nsw i32 %blur_y.s0.x.x.rebased260, 1
  %.not2742 = icmp eq i32 %5298, %t1683
  br i1 %.not2742, label %"end for blur_y.s0.x.x.rebased259", label %"for blur_y.s0.x.x.rebased258"

after_bb267:                                      ; preds = %"end for blur_y.s0.x.x.rebased259", %"produce blur_x270"
  br i1 %100, label %"for blur_y.s0.x.x.rebased272.preheader", label %"end for blur_y.s0.x.x.rebased273", !prof !386

"for blur_y.s0.x.x.rebased272.preheader":         ; preds = %after_bb267
  %5299 = sext i32 %t1706 to i64
  %5300 = zext i32 %.pre-phi3480 to i64
  %5301 = mul nsw i64 %5300, %112
  %5302 = sub nsw i64 %5301, %96
  %5303 = zext i32 %.pre-phi to i64
  %5304 = mul nsw i64 %5303, %112
  %5305 = sub nsw i64 %5304, %96
  %5306 = zext i32 %.pre-phi3484 to i64
  %5307 = mul nsw i64 %5306, %112
  %5308 = sub nsw i64 %5307, %96
  %5309 = zext i32 %.pre-phi3492 to i64
  %5310 = mul nsw i64 %5309, %112
  %5311 = sub nsw i64 %5310, %96
  %5312 = zext i32 %.pre-phi3488 to i64
  %5313 = mul nsw i64 %5312, %112
  %5314 = sub nsw i64 %5313, %96
  %5315 = sext i32 %a26 to i64
  %5316 = add nsw i64 %5315, 8
  %5317 = mul nsw i64 %5316, %113
  %5318 = add nsw i64 %5317, %116
  br label %"for blur_y.s0.x.x.rebased272"

"produce blur_x270":                              ; preds = %"end for blur_y.s0.x.x.rebased259"
  %5319 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %5320 = getelementptr inbounds i16, i16* %5319, i64 -31
  %5321 = bitcast i16* %5320 to <16 x i16>*
  %5322 = load <16 x i16>, <16 x i16>* %5321, align 2, !tbaa !396
  %5323 = getelementptr inbounds i16, i16* %5319, i64 -15
  %5324 = bitcast i16* %5323 to <16 x i16>*
  %5325 = load <16 x i16>, <16 x i16>* %5324, align 2, !tbaa !396
  %5326 = getelementptr inbounds i16, i16* %5319, i64 -32
  %5327 = bitcast i16* %5326 to <16 x i16>*
  %5328 = load <16 x i16>, <16 x i16>* %5327, align 2, !tbaa !396
  %5329 = getelementptr inbounds i16, i16* %5319, i64 -16
  %5330 = bitcast i16* %5329 to <16 x i16>*
  %5331 = load <16 x i16>, <16 x i16>* %5330, align 2, !tbaa !396
  %5332 = getelementptr inbounds i16, i16* %5319, i64 -30
  %5333 = bitcast i16* %5332 to <16 x i16>*
  %5334 = load <16 x i16>, <16 x i16>* %5333, align 2, !tbaa !396
  %5335 = getelementptr inbounds i16, i16* %5319, i64 -14
  %5336 = bitcast i16* %5335 to <16 x i16>*
  %5337 = load <16 x i16>, <16 x i16>* %5336, align 2, !tbaa !396
  %5338 = getelementptr inbounds i16, i16* %5319, i64 -28
  %5339 = bitcast i16* %5338 to <16 x i16>*
  %5340 = load <16 x i16>, <16 x i16>* %5339, align 2, !tbaa !396
  %5341 = getelementptr inbounds i16, i16* %5319, i64 -12
  %5342 = bitcast i16* %5341 to <16 x i16>*
  %5343 = load <16 x i16>, <16 x i16>* %5342, align 2, !tbaa !396
  %5344 = getelementptr inbounds i16, i16* %5319, i64 -29
  %5345 = bitcast i16* %5344 to <16 x i16>*
  %5346 = load <16 x i16>, <16 x i16>* %5345, align 2, !tbaa !396
  %5347 = getelementptr inbounds i16, i16* %5319, i64 -13
  %5348 = bitcast i16* %5347 to <16 x i16>*
  %5349 = load <16 x i16>, <16 x i16>* %5348, align 2, !tbaa !396
  %5350 = add <16 x i16> %5328, %5322
  %5351 = add <16 x i16> %5350, %5334
  %5352 = add <16 x i16> %5351, %5340
  %5353 = add <16 x i16> %5352, %5346
  %5354 = add <16 x i16> %5331, %5325
  %5355 = add <16 x i16> %5354, %5337
  %5356 = add <16 x i16> %5355, %5343
  %5357 = add <16 x i16> %5356, %5349
  %5358 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5353, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5357, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5360 = shufflevector <16 x i16> %5358, <16 x i16> %5359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5361 = lshr <32 x i16> %5360, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5362 = shufflevector <32 x i16> %5361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5363 = zext i32 %.pre-phi3492 to i64
  %5364 = mul nsw i64 %97, %5363
  %5365 = add nsw i64 %99, %5364
  %5366 = getelementptr inbounds i16, i16* %blur_x, i64 %5365
  %5367 = getelementptr inbounds i16, i16* %5366, i64 -32
  %5368 = bitcast i16* %5367 to <16 x i16>*
  store <16 x i16> %5362, <16 x i16>* %5368, align 2, !tbaa !399
  %5369 = shufflevector <32 x i16> %5361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5370 = getelementptr inbounds i16, i16* %5366, i64 -16
  %5371 = bitcast i16* %5370 to <16 x i16>*
  store <16 x i16> %5369, <16 x i16>* %5371, align 2, !tbaa !399
  %5372 = zext i32 %.pre-phi3480 to i64
  %5373 = mul nsw i64 %5372, %112
  %5374 = add nsw i64 %5373, %94
  %5375 = getelementptr inbounds i16, i16* %blur_x, i64 %5374
  %5376 = getelementptr inbounds i16, i16* %5375, i64 -32
  %5377 = bitcast i16* %5376 to <16 x i16>*
  %5378 = load <16 x i16>, <16 x i16>* %5377, align 2, !tbaa !399
  %5379 = getelementptr inbounds i16, i16* %5375, i64 -16
  %5380 = bitcast i16* %5379 to <16 x i16>*
  %5381 = load <16 x i16>, <16 x i16>* %5380, align 2, !tbaa !399
  %5382 = zext i32 %.pre-phi to i64
  %5383 = mul nsw i64 %5382, %112
  %5384 = add nsw i64 %5383, %94
  %5385 = getelementptr inbounds i16, i16* %blur_x, i64 %5384
  %5386 = getelementptr inbounds i16, i16* %5385, i64 -32
  %5387 = bitcast i16* %5386 to <16 x i16>*
  %5388 = load <16 x i16>, <16 x i16>* %5387, align 2, !tbaa !399
  %5389 = getelementptr inbounds i16, i16* %5385, i64 -16
  %5390 = bitcast i16* %5389 to <16 x i16>*
  %5391 = load <16 x i16>, <16 x i16>* %5390, align 2, !tbaa !399
  %5392 = zext i32 %.pre-phi3484 to i64
  %5393 = mul nsw i64 %5392, %112
  %5394 = add nsw i64 %5393, %94
  %5395 = getelementptr inbounds i16, i16* %blur_x, i64 %5394
  %5396 = getelementptr inbounds i16, i16* %5395, i64 -32
  %5397 = bitcast i16* %5396 to <16 x i16>*
  %5398 = load <16 x i16>, <16 x i16>* %5397, align 2, !tbaa !399
  %5399 = getelementptr inbounds i16, i16* %5395, i64 -16
  %5400 = bitcast i16* %5399 to <16 x i16>*
  %5401 = load <16 x i16>, <16 x i16>* %5400, align 2, !tbaa !399
  %5402 = mul nsw i64 %5363, %112
  %5403 = add nsw i64 %5402, %94
  %5404 = getelementptr inbounds i16, i16* %blur_x, i64 %5403
  %5405 = getelementptr inbounds i16, i16* %5404, i64 -32
  %5406 = bitcast i16* %5405 to <16 x i16>*
  %5407 = load <16 x i16>, <16 x i16>* %5406, align 2, !tbaa !399
  %5408 = getelementptr inbounds i16, i16* %5404, i64 -16
  %5409 = bitcast i16* %5408 to <16 x i16>*
  %5410 = load <16 x i16>, <16 x i16>* %5409, align 2, !tbaa !399
  %5411 = zext i32 %.pre-phi3488 to i64
  %5412 = mul nsw i64 %5411, %112
  %5413 = add nsw i64 %5412, %94
  %5414 = getelementptr inbounds i16, i16* %blur_x, i64 %5413
  %5415 = getelementptr inbounds i16, i16* %5414, i64 -32
  %5416 = bitcast i16* %5415 to <16 x i16>*
  %5417 = load <16 x i16>, <16 x i16>* %5416, align 2, !tbaa !399
  %5418 = getelementptr inbounds i16, i16* %5414, i64 -16
  %5419 = bitcast i16* %5418 to <16 x i16>*
  %5420 = load <16 x i16>, <16 x i16>* %5419, align 2, !tbaa !399
  %5421 = add <16 x i16> %5388, %5378
  %5422 = add <16 x i16> %5421, %5398
  %5423 = add <16 x i16> %5422, %5407
  %5424 = add <16 x i16> %5423, %5417
  %5425 = add <16 x i16> %5391, %5381
  %5426 = add <16 x i16> %5425, %5401
  %5427 = add <16 x i16> %5426, %5410
  %5428 = add <16 x i16> %5427, %5420
  %5429 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5424, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5430 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5428, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5431 = shufflevector <16 x i16> %5429, <16 x i16> %5430, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5432 = lshr <32 x i16> %5431, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5433 = shufflevector <32 x i16> %5432, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5434 = sext i32 %a26 to i64
  %5435 = add nsw i64 %5434, 8
  %5436 = mul nsw i64 %5435, %113
  %5437 = add nsw i64 %115, %5436
  %5438 = getelementptr inbounds i16, i16* %66, i64 %5437
  %5439 = getelementptr inbounds i16, i16* %5438, i64 -32
  %5440 = bitcast i16* %5439 to <16 x i16>*
  store <16 x i16> %5433, <16 x i16>* %5440, align 2, !tbaa !401
  %5441 = shufflevector <32 x i16> %5432, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5442 = getelementptr inbounds i16, i16* %5438, i64 -16
  %5443 = bitcast i16* %5442 to <16 x i16>*
  store <16 x i16> %5441, <16 x i16>* %5443, align 2, !tbaa !401
  br label %after_bb267

"for blur_y.s0.x.x.rebased272":                   ; preds = %"for blur_y.s0.x.x.rebased272.preheader", %"consume blur_x279"
  %indvars.iv3283 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased272.preheader" ], [ %indvars.iv.next3284, %"consume blur_x279" ]
  %5444 = add nsw i64 %indvars.iv3283, %101
  %5445 = icmp slt i64 %5444, 1
  %5446 = trunc i64 %5444 to i32
  %5447 = shl nsw i32 %5446, 5
  %5448 = icmp sgt i32 %4, %5447
  %5449 = or i1 %5445, %5448
  br i1 %5449, label %"produce blur_x278", label %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge"

"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased272"
  %.pre3521 = shl nsw i64 %5444, 5
  br label %"consume blur_x279"

"end for blur_y.s0.x.x.rebased273":               ; preds = %"consume blur_x279", %after_bb267
  br i1 %102, label %"for blur_y.s0.x.x.rebased280.preheader", label %"end for blur_y.s0.x.x.rebased281", !prof !386

"for blur_y.s0.x.x.rebased280.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased273"
  %5450 = sext i32 %t1706 to i64
  %5451 = zext i32 %.pre-phi3480 to i64
  %5452 = mul nsw i64 %5451, %112
  %5453 = sub nsw i64 %5452, %96
  %5454 = zext i32 %.pre-phi to i64
  %5455 = mul nsw i64 %5454, %112
  %5456 = sub nsw i64 %5455, %96
  %5457 = zext i32 %.pre-phi3484 to i64
  %5458 = mul nsw i64 %5457, %112
  %5459 = sub nsw i64 %5458, %96
  %5460 = zext i32 %.pre-phi3492 to i64
  %5461 = mul nsw i64 %5460, %112
  %5462 = sub nsw i64 %5461, %96
  %5463 = zext i32 %.pre-phi3488 to i64
  %5464 = mul nsw i64 %5463, %112
  %5465 = sub nsw i64 %5464, %96
  %5466 = sext i32 %a26 to i64
  %5467 = add nsw i64 %5466, 8
  %5468 = mul nsw i64 %5467, %113
  %5469 = add nsw i64 %5468, %116
  br label %"for blur_y.s0.x.x.rebased280"

"produce blur_x278":                              ; preds = %"for blur_y.s0.x.x.rebased272"
  %t840 = add nsw i32 %5447, %t1833
  %5470 = sext i32 %t840 to i64
  %5471 = getelementptr inbounds i16, i16* %read_input, i64 %5470
  %5472 = getelementptr inbounds i16, i16* %5471, i64 1
  %5473 = bitcast i16* %5472 to <16 x i16>*
  %5474 = load <16 x i16>, <16 x i16>* %5473, align 2, !tbaa !396
  %5475 = getelementptr inbounds i16, i16* %5471, i64 17
  %5476 = bitcast i16* %5475 to <16 x i16>*
  %5477 = load <16 x i16>, <16 x i16>* %5476, align 2, !tbaa !396
  %5478 = bitcast i16* %5471 to <16 x i16>*
  %5479 = load <16 x i16>, <16 x i16>* %5478, align 2, !tbaa !396
  %5480 = getelementptr inbounds i16, i16* %5471, i64 16
  %5481 = bitcast i16* %5480 to <16 x i16>*
  %5482 = load <16 x i16>, <16 x i16>* %5481, align 2, !tbaa !396
  %5483 = getelementptr inbounds i16, i16* %5471, i64 2
  %5484 = bitcast i16* %5483 to <16 x i16>*
  %5485 = load <16 x i16>, <16 x i16>* %5484, align 2, !tbaa !396
  %5486 = getelementptr inbounds i16, i16* %5471, i64 18
  %5487 = bitcast i16* %5486 to <16 x i16>*
  %5488 = load <16 x i16>, <16 x i16>* %5487, align 2, !tbaa !396
  %5489 = getelementptr inbounds i16, i16* %5471, i64 4
  %5490 = bitcast i16* %5489 to <16 x i16>*
  %5491 = load <16 x i16>, <16 x i16>* %5490, align 2, !tbaa !396
  %5492 = getelementptr inbounds i16, i16* %5471, i64 20
  %5493 = bitcast i16* %5492 to <16 x i16>*
  %5494 = load <16 x i16>, <16 x i16>* %5493, align 2, !tbaa !396
  %5495 = getelementptr inbounds i16, i16* %5471, i64 3
  %5496 = bitcast i16* %5495 to <16 x i16>*
  %5497 = load <16 x i16>, <16 x i16>* %5496, align 2, !tbaa !396
  %5498 = getelementptr inbounds i16, i16* %5471, i64 19
  %5499 = bitcast i16* %5498 to <16 x i16>*
  %5500 = load <16 x i16>, <16 x i16>* %5499, align 2, !tbaa !396
  %5501 = add <16 x i16> %5479, %5474
  %5502 = add <16 x i16> %5501, %5485
  %5503 = add <16 x i16> %5502, %5491
  %5504 = add <16 x i16> %5503, %5497
  %5505 = add <16 x i16> %5482, %5477
  %5506 = add <16 x i16> %5505, %5488
  %5507 = add <16 x i16> %5506, %5494
  %5508 = add <16 x i16> %5507, %5500
  %5509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5504, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5508, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5511 = shufflevector <16 x i16> %5509, <16 x i16> %5510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5512 = lshr <32 x i16> %5511, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5513 = shufflevector <32 x i16> %5512, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5514 = shl nsw i64 %5444, 5
  %5515 = add nsw i64 %5514, %5299
  %5516 = getelementptr inbounds i16, i16* %blur_x, i64 %5515
  %5517 = bitcast i16* %5516 to <16 x i16>*
  store <16 x i16> %5513, <16 x i16>* %5517, align 2, !tbaa !399
  %5518 = shufflevector <32 x i16> %5512, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5519 = getelementptr inbounds i16, i16* %5516, i64 16
  %5520 = bitcast i16* %5519 to <16 x i16>*
  store <16 x i16> %5518, <16 x i16>* %5520, align 2, !tbaa !399
  br label %"consume blur_x279"

"consume blur_x279":                              ; preds = %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge", %"produce blur_x278"
  %.pre-phi3522 = phi i64 [ %.pre3521, %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge" ], [ %5514, %"produce blur_x278" ]
  %5521 = add nsw i64 %5302, %.pre-phi3522
  %5522 = getelementptr inbounds i16, i16* %blur_x, i64 %5521
  %5523 = bitcast i16* %5522 to <16 x i16>*
  %5524 = load <16 x i16>, <16 x i16>* %5523, align 2, !tbaa !399
  %5525 = getelementptr inbounds i16, i16* %5522, i64 16
  %5526 = bitcast i16* %5525 to <16 x i16>*
  %5527 = load <16 x i16>, <16 x i16>* %5526, align 2, !tbaa !399
  %5528 = add nsw i64 %5305, %.pre-phi3522
  %5529 = getelementptr inbounds i16, i16* %blur_x, i64 %5528
  %5530 = bitcast i16* %5529 to <16 x i16>*
  %5531 = load <16 x i16>, <16 x i16>* %5530, align 2, !tbaa !399
  %5532 = getelementptr inbounds i16, i16* %5529, i64 16
  %5533 = bitcast i16* %5532 to <16 x i16>*
  %5534 = load <16 x i16>, <16 x i16>* %5533, align 2, !tbaa !399
  %5535 = add nsw i64 %5308, %.pre-phi3522
  %5536 = getelementptr inbounds i16, i16* %blur_x, i64 %5535
  %5537 = bitcast i16* %5536 to <16 x i16>*
  %5538 = load <16 x i16>, <16 x i16>* %5537, align 2, !tbaa !399
  %5539 = getelementptr inbounds i16, i16* %5536, i64 16
  %5540 = bitcast i16* %5539 to <16 x i16>*
  %5541 = load <16 x i16>, <16 x i16>* %5540, align 2, !tbaa !399
  %5542 = add nsw i64 %5311, %.pre-phi3522
  %5543 = getelementptr inbounds i16, i16* %blur_x, i64 %5542
  %5544 = bitcast i16* %5543 to <16 x i16>*
  %5545 = load <16 x i16>, <16 x i16>* %5544, align 2, !tbaa !399
  %5546 = getelementptr inbounds i16, i16* %5543, i64 16
  %5547 = bitcast i16* %5546 to <16 x i16>*
  %5548 = load <16 x i16>, <16 x i16>* %5547, align 2, !tbaa !399
  %5549 = add nsw i64 %5314, %.pre-phi3522
  %5550 = getelementptr inbounds i16, i16* %blur_x, i64 %5549
  %5551 = bitcast i16* %5550 to <16 x i16>*
  %5552 = load <16 x i16>, <16 x i16>* %5551, align 2, !tbaa !399
  %5553 = getelementptr inbounds i16, i16* %5550, i64 16
  %5554 = bitcast i16* %5553 to <16 x i16>*
  %5555 = load <16 x i16>, <16 x i16>* %5554, align 2, !tbaa !399
  %5556 = add <16 x i16> %5531, %5524
  %5557 = add <16 x i16> %5556, %5538
  %5558 = add <16 x i16> %5557, %5545
  %5559 = add <16 x i16> %5558, %5552
  %5560 = add <16 x i16> %5534, %5527
  %5561 = add <16 x i16> %5560, %5541
  %5562 = add <16 x i16> %5561, %5548
  %5563 = add <16 x i16> %5562, %5555
  %5564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5559, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5563, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5566 = shufflevector <16 x i16> %5564, <16 x i16> %5565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5567 = lshr <32 x i16> %5566, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5568 = shufflevector <32 x i16> %5567, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5569 = add nsw i64 %5318, %.pre-phi3522
  %5570 = getelementptr inbounds i16, i16* %66, i64 %5569
  %5571 = bitcast i16* %5570 to <16 x i16>*
  store <16 x i16> %5568, <16 x i16>* %5571, align 2, !tbaa !401
  %5572 = shufflevector <32 x i16> %5567, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5573 = getelementptr inbounds i16, i16* %5570, i64 16
  %5574 = bitcast i16* %5573 to <16 x i16>*
  store <16 x i16> %5572, <16 x i16>* %5574, align 2, !tbaa !401
  %indvars.iv.next3284 = add nuw nsw i64 %indvars.iv3283, 1
  %.not2741 = icmp eq i64 %indvars.iv.next3284, %184
  br i1 %.not2741, label %"end for blur_y.s0.x.x.rebased273", label %"for blur_y.s0.x.x.rebased272"

"for blur_y.s0.x.x.rebased280":                   ; preds = %"for blur_y.s0.x.x.rebased280.preheader", %"consume blur_x288"
  %blur_y.s0.x.x.rebased282 = phi i32 [ %5687, %"consume blur_x288" ], [ 0, %"for blur_y.s0.x.x.rebased280.preheader" ]
  %5575 = add nsw i32 %blur_y.s0.x.x.rebased282, %t1626
  %a161 = shl nsw i32 %5575, 5
  %5576 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %5576, i32 %a161, i32 %a14
  %5577 = icmp slt i32 %5575, 1
  %5578 = icmp sgt i32 %4, %a161
  %5579 = or i1 %5577, %5578
  br i1 %5579, label %"produce blur_x286", label %"consume blur_x288"

"end for blur_y.s0.x.x.rebased281":               ; preds = %"consume blur_x288", %"end for blur_y.s0.x.x.rebased273"
  br i1 %34, label %"produce blur_x292", label %after_bb289

"produce blur_x286":                              ; preds = %"for blur_y.s0.x.x.rebased280"
  %5580 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s287 = select i1 %5580, i32 %b167, i32 %4
  %t845 = add nsw i32 %blur_x.s0.x.v1.base.s287, %t1833
  %5581 = sext i32 %t845 to i64
  %5582 = getelementptr inbounds i16, i16* %read_input, i64 %5581
  %5583 = getelementptr inbounds i16, i16* %5582, i64 1
  %5584 = bitcast i16* %5583 to <16 x i16>*
  %5585 = load <16 x i16>, <16 x i16>* %5584, align 2, !tbaa !396
  %5586 = getelementptr inbounds i16, i16* %5582, i64 17
  %5587 = bitcast i16* %5586 to <16 x i16>*
  %5588 = load <16 x i16>, <16 x i16>* %5587, align 2, !tbaa !396
  %5589 = bitcast i16* %5582 to <16 x i16>*
  %5590 = load <16 x i16>, <16 x i16>* %5589, align 2, !tbaa !396
  %5591 = getelementptr inbounds i16, i16* %5582, i64 16
  %5592 = bitcast i16* %5591 to <16 x i16>*
  %5593 = load <16 x i16>, <16 x i16>* %5592, align 2, !tbaa !396
  %5594 = getelementptr inbounds i16, i16* %5582, i64 2
  %5595 = bitcast i16* %5594 to <16 x i16>*
  %5596 = load <16 x i16>, <16 x i16>* %5595, align 2, !tbaa !396
  %5597 = getelementptr inbounds i16, i16* %5582, i64 18
  %5598 = bitcast i16* %5597 to <16 x i16>*
  %5599 = load <16 x i16>, <16 x i16>* %5598, align 2, !tbaa !396
  %5600 = getelementptr inbounds i16, i16* %5582, i64 4
  %5601 = bitcast i16* %5600 to <16 x i16>*
  %5602 = load <16 x i16>, <16 x i16>* %5601, align 2, !tbaa !396
  %5603 = getelementptr inbounds i16, i16* %5582, i64 20
  %5604 = bitcast i16* %5603 to <16 x i16>*
  %5605 = load <16 x i16>, <16 x i16>* %5604, align 2, !tbaa !396
  %5606 = getelementptr inbounds i16, i16* %5582, i64 3
  %5607 = bitcast i16* %5606 to <16 x i16>*
  %5608 = load <16 x i16>, <16 x i16>* %5607, align 2, !tbaa !396
  %5609 = getelementptr inbounds i16, i16* %5582, i64 19
  %5610 = bitcast i16* %5609 to <16 x i16>*
  %5611 = load <16 x i16>, <16 x i16>* %5610, align 2, !tbaa !396
  %5612 = add <16 x i16> %5590, %5585
  %5613 = add <16 x i16> %5612, %5596
  %5614 = add <16 x i16> %5613, %5602
  %5615 = add <16 x i16> %5614, %5608
  %5616 = add <16 x i16> %5593, %5588
  %5617 = add <16 x i16> %5616, %5599
  %5618 = add <16 x i16> %5617, %5605
  %5619 = add <16 x i16> %5618, %5611
  %5620 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5615, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5619, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5622 = shufflevector <16 x i16> %5620, <16 x i16> %5621, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5623 = lshr <32 x i16> %5622, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5624 = shufflevector <32 x i16> %5623, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5625 = sext i32 %blur_x.s0.x.v1.base.s287 to i64
  %5626 = add nsw i64 %5625, %5450
  %5627 = getelementptr inbounds i16, i16* %blur_x, i64 %5626
  %5628 = bitcast i16* %5627 to <16 x i16>*
  store <16 x i16> %5624, <16 x i16>* %5628, align 2, !tbaa !399
  %5629 = shufflevector <32 x i16> %5623, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5630 = getelementptr inbounds i16, i16* %5627, i64 16
  %5631 = bitcast i16* %5630 to <16 x i16>*
  store <16 x i16> %5629, <16 x i16>* %5631, align 2, !tbaa !399
  br label %"consume blur_x288"

"consume blur_x288":                              ; preds = %"for blur_y.s0.x.x.rebased280", %"produce blur_x286"
  %5632 = sext i32 %b167 to i64
  %5633 = add nsw i64 %5453, %5632
  %5634 = getelementptr inbounds i16, i16* %blur_x, i64 %5633
  %5635 = bitcast i16* %5634 to <16 x i16>*
  %5636 = load <16 x i16>, <16 x i16>* %5635, align 2, !tbaa !399
  %5637 = getelementptr inbounds i16, i16* %5634, i64 16
  %5638 = bitcast i16* %5637 to <16 x i16>*
  %5639 = load <16 x i16>, <16 x i16>* %5638, align 2, !tbaa !399
  %5640 = add nsw i64 %5456, %5632
  %5641 = getelementptr inbounds i16, i16* %blur_x, i64 %5640
  %5642 = bitcast i16* %5641 to <16 x i16>*
  %5643 = load <16 x i16>, <16 x i16>* %5642, align 2, !tbaa !399
  %5644 = getelementptr inbounds i16, i16* %5641, i64 16
  %5645 = bitcast i16* %5644 to <16 x i16>*
  %5646 = load <16 x i16>, <16 x i16>* %5645, align 2, !tbaa !399
  %5647 = add nsw i64 %5459, %5632
  %5648 = getelementptr inbounds i16, i16* %blur_x, i64 %5647
  %5649 = bitcast i16* %5648 to <16 x i16>*
  %5650 = load <16 x i16>, <16 x i16>* %5649, align 2, !tbaa !399
  %5651 = getelementptr inbounds i16, i16* %5648, i64 16
  %5652 = bitcast i16* %5651 to <16 x i16>*
  %5653 = load <16 x i16>, <16 x i16>* %5652, align 2, !tbaa !399
  %5654 = add nsw i64 %5462, %5632
  %5655 = getelementptr inbounds i16, i16* %blur_x, i64 %5654
  %5656 = bitcast i16* %5655 to <16 x i16>*
  %5657 = load <16 x i16>, <16 x i16>* %5656, align 2, !tbaa !399
  %5658 = getelementptr inbounds i16, i16* %5655, i64 16
  %5659 = bitcast i16* %5658 to <16 x i16>*
  %5660 = load <16 x i16>, <16 x i16>* %5659, align 2, !tbaa !399
  %5661 = add nsw i64 %5465, %5632
  %5662 = getelementptr inbounds i16, i16* %blur_x, i64 %5661
  %5663 = bitcast i16* %5662 to <16 x i16>*
  %5664 = load <16 x i16>, <16 x i16>* %5663, align 2, !tbaa !399
  %5665 = getelementptr inbounds i16, i16* %5662, i64 16
  %5666 = bitcast i16* %5665 to <16 x i16>*
  %5667 = load <16 x i16>, <16 x i16>* %5666, align 2, !tbaa !399
  %5668 = add <16 x i16> %5643, %5636
  %5669 = add <16 x i16> %5668, %5650
  %5670 = add <16 x i16> %5669, %5657
  %5671 = add <16 x i16> %5670, %5664
  %5672 = add <16 x i16> %5646, %5639
  %5673 = add <16 x i16> %5672, %5653
  %5674 = add <16 x i16> %5673, %5660
  %5675 = add <16 x i16> %5674, %5667
  %5676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5671, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5675, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5678 = shufflevector <16 x i16> %5676, <16 x i16> %5677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5679 = lshr <32 x i16> %5678, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5680 = shufflevector <32 x i16> %5679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5681 = add nsw i64 %5469, %5632
  %5682 = getelementptr inbounds i16, i16* %66, i64 %5681
  %5683 = bitcast i16* %5682 to <16 x i16>*
  store <16 x i16> %5680, <16 x i16>* %5683, align 2, !tbaa !401
  %5684 = shufflevector <32 x i16> %5679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5685 = getelementptr inbounds i16, i16* %5682, i64 16
  %5686 = bitcast i16* %5685 to <16 x i16>*
  store <16 x i16> %5684, <16 x i16>* %5686, align 2, !tbaa !401
  %5687 = add nuw nsw i32 %blur_y.s0.x.x.rebased282, 1
  %.not2740 = icmp eq i32 %5687, %t1683
  br i1 %.not2740, label %"end for blur_y.s0.x.x.rebased281", label %"for blur_y.s0.x.x.rebased280"

after_bb289:                                      ; preds = %"end for blur_y.s0.x.x.rebased281", %"produce blur_x292"
  br i1 %100, label %"for blur_y.s0.x.x.rebased294.preheader", label %"end for blur_y.s0.x.x.rebased295", !prof !386

"for blur_y.s0.x.x.rebased294.preheader":         ; preds = %after_bb289
  %5688 = sext i32 %t1722 to i64
  %5689 = zext i32 %.pre-phi3484 to i64
  %5690 = mul nsw i64 %5689, %112
  %5691 = sub nsw i64 %5690, %96
  %5692 = zext i32 %.pre-phi3480 to i64
  %5693 = mul nsw i64 %5692, %112
  %5694 = sub nsw i64 %5693, %96
  %5695 = zext i32 %.pre-phi3488 to i64
  %5696 = mul nsw i64 %5695, %112
  %5697 = sub nsw i64 %5696, %96
  %5698 = zext i32 %.pre-phi3498 to i64
  %5699 = mul nsw i64 %5698, %112
  %5700 = sub nsw i64 %5699, %96
  %5701 = zext i32 %.pre-phi3492 to i64
  %5702 = mul nsw i64 %5701, %112
  %5703 = sub nsw i64 %5702, %96
  %5704 = sext i32 %a26 to i64
  %5705 = add nsw i64 %5704, 9
  %5706 = mul nsw i64 %5705, %113
  %5707 = add nsw i64 %5706, %116
  br label %"for blur_y.s0.x.x.rebased294"

"produce blur_x292":                              ; preds = %"end for blur_y.s0.x.x.rebased281"
  %5708 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %5709 = getelementptr inbounds i16, i16* %5708, i64 -31
  %5710 = bitcast i16* %5709 to <16 x i16>*
  %5711 = load <16 x i16>, <16 x i16>* %5710, align 2, !tbaa !396
  %5712 = getelementptr inbounds i16, i16* %5708, i64 -15
  %5713 = bitcast i16* %5712 to <16 x i16>*
  %5714 = load <16 x i16>, <16 x i16>* %5713, align 2, !tbaa !396
  %5715 = getelementptr inbounds i16, i16* %5708, i64 -32
  %5716 = bitcast i16* %5715 to <16 x i16>*
  %5717 = load <16 x i16>, <16 x i16>* %5716, align 2, !tbaa !396
  %5718 = getelementptr inbounds i16, i16* %5708, i64 -16
  %5719 = bitcast i16* %5718 to <16 x i16>*
  %5720 = load <16 x i16>, <16 x i16>* %5719, align 2, !tbaa !396
  %5721 = getelementptr inbounds i16, i16* %5708, i64 -30
  %5722 = bitcast i16* %5721 to <16 x i16>*
  %5723 = load <16 x i16>, <16 x i16>* %5722, align 2, !tbaa !396
  %5724 = getelementptr inbounds i16, i16* %5708, i64 -14
  %5725 = bitcast i16* %5724 to <16 x i16>*
  %5726 = load <16 x i16>, <16 x i16>* %5725, align 2, !tbaa !396
  %5727 = getelementptr inbounds i16, i16* %5708, i64 -28
  %5728 = bitcast i16* %5727 to <16 x i16>*
  %5729 = load <16 x i16>, <16 x i16>* %5728, align 2, !tbaa !396
  %5730 = getelementptr inbounds i16, i16* %5708, i64 -12
  %5731 = bitcast i16* %5730 to <16 x i16>*
  %5732 = load <16 x i16>, <16 x i16>* %5731, align 2, !tbaa !396
  %5733 = getelementptr inbounds i16, i16* %5708, i64 -29
  %5734 = bitcast i16* %5733 to <16 x i16>*
  %5735 = load <16 x i16>, <16 x i16>* %5734, align 2, !tbaa !396
  %5736 = getelementptr inbounds i16, i16* %5708, i64 -13
  %5737 = bitcast i16* %5736 to <16 x i16>*
  %5738 = load <16 x i16>, <16 x i16>* %5737, align 2, !tbaa !396
  %5739 = add <16 x i16> %5717, %5711
  %5740 = add <16 x i16> %5739, %5723
  %5741 = add <16 x i16> %5740, %5729
  %5742 = add <16 x i16> %5741, %5735
  %5743 = add <16 x i16> %5720, %5714
  %5744 = add <16 x i16> %5743, %5726
  %5745 = add <16 x i16> %5744, %5732
  %5746 = add <16 x i16> %5745, %5738
  %5747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5742, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5746, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5749 = shufflevector <16 x i16> %5747, <16 x i16> %5748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5750 = lshr <32 x i16> %5749, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5751 = shufflevector <32 x i16> %5750, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5752 = zext i32 %.pre-phi3498 to i64
  %5753 = mul nsw i64 %97, %5752
  %5754 = add nsw i64 %99, %5753
  %5755 = getelementptr inbounds i16, i16* %blur_x, i64 %5754
  %5756 = getelementptr inbounds i16, i16* %5755, i64 -32
  %5757 = bitcast i16* %5756 to <16 x i16>*
  store <16 x i16> %5751, <16 x i16>* %5757, align 2, !tbaa !399
  %5758 = shufflevector <32 x i16> %5750, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5759 = getelementptr inbounds i16, i16* %5755, i64 -16
  %5760 = bitcast i16* %5759 to <16 x i16>*
  store <16 x i16> %5758, <16 x i16>* %5760, align 2, !tbaa !399
  %5761 = zext i32 %.pre-phi3484 to i64
  %5762 = mul nsw i64 %5761, %112
  %5763 = add nsw i64 %5762, %94
  %5764 = getelementptr inbounds i16, i16* %blur_x, i64 %5763
  %5765 = getelementptr inbounds i16, i16* %5764, i64 -32
  %5766 = bitcast i16* %5765 to <16 x i16>*
  %5767 = load <16 x i16>, <16 x i16>* %5766, align 2, !tbaa !399
  %5768 = getelementptr inbounds i16, i16* %5764, i64 -16
  %5769 = bitcast i16* %5768 to <16 x i16>*
  %5770 = load <16 x i16>, <16 x i16>* %5769, align 2, !tbaa !399
  %5771 = zext i32 %.pre-phi3480 to i64
  %5772 = mul nsw i64 %5771, %112
  %5773 = add nsw i64 %5772, %94
  %5774 = getelementptr inbounds i16, i16* %blur_x, i64 %5773
  %5775 = getelementptr inbounds i16, i16* %5774, i64 -32
  %5776 = bitcast i16* %5775 to <16 x i16>*
  %5777 = load <16 x i16>, <16 x i16>* %5776, align 2, !tbaa !399
  %5778 = getelementptr inbounds i16, i16* %5774, i64 -16
  %5779 = bitcast i16* %5778 to <16 x i16>*
  %5780 = load <16 x i16>, <16 x i16>* %5779, align 2, !tbaa !399
  %5781 = zext i32 %.pre-phi3488 to i64
  %5782 = mul nsw i64 %5781, %112
  %5783 = add nsw i64 %5782, %94
  %5784 = getelementptr inbounds i16, i16* %blur_x, i64 %5783
  %5785 = getelementptr inbounds i16, i16* %5784, i64 -32
  %5786 = bitcast i16* %5785 to <16 x i16>*
  %5787 = load <16 x i16>, <16 x i16>* %5786, align 2, !tbaa !399
  %5788 = getelementptr inbounds i16, i16* %5784, i64 -16
  %5789 = bitcast i16* %5788 to <16 x i16>*
  %5790 = load <16 x i16>, <16 x i16>* %5789, align 2, !tbaa !399
  %5791 = mul nsw i64 %5752, %112
  %5792 = add nsw i64 %5791, %94
  %5793 = getelementptr inbounds i16, i16* %blur_x, i64 %5792
  %5794 = getelementptr inbounds i16, i16* %5793, i64 -32
  %5795 = bitcast i16* %5794 to <16 x i16>*
  %5796 = load <16 x i16>, <16 x i16>* %5795, align 2, !tbaa !399
  %5797 = getelementptr inbounds i16, i16* %5793, i64 -16
  %5798 = bitcast i16* %5797 to <16 x i16>*
  %5799 = load <16 x i16>, <16 x i16>* %5798, align 2, !tbaa !399
  %5800 = zext i32 %.pre-phi3492 to i64
  %5801 = mul nsw i64 %5800, %112
  %5802 = add nsw i64 %5801, %94
  %5803 = getelementptr inbounds i16, i16* %blur_x, i64 %5802
  %5804 = getelementptr inbounds i16, i16* %5803, i64 -32
  %5805 = bitcast i16* %5804 to <16 x i16>*
  %5806 = load <16 x i16>, <16 x i16>* %5805, align 2, !tbaa !399
  %5807 = getelementptr inbounds i16, i16* %5803, i64 -16
  %5808 = bitcast i16* %5807 to <16 x i16>*
  %5809 = load <16 x i16>, <16 x i16>* %5808, align 2, !tbaa !399
  %5810 = add <16 x i16> %5777, %5767
  %5811 = add <16 x i16> %5810, %5787
  %5812 = add <16 x i16> %5811, %5796
  %5813 = add <16 x i16> %5812, %5806
  %5814 = add <16 x i16> %5780, %5770
  %5815 = add <16 x i16> %5814, %5790
  %5816 = add <16 x i16> %5815, %5799
  %5817 = add <16 x i16> %5816, %5809
  %5818 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5813, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5819 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5817, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5820 = shufflevector <16 x i16> %5818, <16 x i16> %5819, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5821 = lshr <32 x i16> %5820, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5822 = shufflevector <32 x i16> %5821, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5823 = sext i32 %a26 to i64
  %5824 = add nsw i64 %5823, 9
  %5825 = mul nsw i64 %5824, %113
  %5826 = add nsw i64 %115, %5825
  %5827 = getelementptr inbounds i16, i16* %66, i64 %5826
  %5828 = getelementptr inbounds i16, i16* %5827, i64 -32
  %5829 = bitcast i16* %5828 to <16 x i16>*
  store <16 x i16> %5822, <16 x i16>* %5829, align 2, !tbaa !401
  %5830 = shufflevector <32 x i16> %5821, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5831 = getelementptr inbounds i16, i16* %5827, i64 -16
  %5832 = bitcast i16* %5831 to <16 x i16>*
  store <16 x i16> %5830, <16 x i16>* %5832, align 2, !tbaa !401
  br label %after_bb289

"for blur_y.s0.x.x.rebased294":                   ; preds = %"for blur_y.s0.x.x.rebased294.preheader", %"consume blur_x301"
  %indvars.iv3286 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased294.preheader" ], [ %indvars.iv.next3287, %"consume blur_x301" ]
  %5833 = add nsw i64 %indvars.iv3286, %101
  %5834 = icmp slt i64 %5833, 1
  %5835 = trunc i64 %5833 to i32
  %5836 = shl nsw i32 %5835, 5
  %5837 = icmp sgt i32 %4, %5836
  %5838 = or i1 %5834, %5837
  br i1 %5838, label %"produce blur_x300", label %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge"

"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased294"
  %.pre3523 = shl nsw i64 %5833, 5
  br label %"consume blur_x301"

"end for blur_y.s0.x.x.rebased295":               ; preds = %"consume blur_x301", %after_bb289
  br i1 %102, label %"for blur_y.s0.x.x.rebased302.preheader", label %"end for blur_y.s0.x.x.rebased303", !prof !386

"for blur_y.s0.x.x.rebased302.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased295"
  %5839 = sext i32 %t1722 to i64
  %5840 = zext i32 %.pre-phi3484 to i64
  %5841 = mul nsw i64 %5840, %112
  %5842 = sub nsw i64 %5841, %96
  %5843 = zext i32 %.pre-phi3480 to i64
  %5844 = mul nsw i64 %5843, %112
  %5845 = sub nsw i64 %5844, %96
  %5846 = zext i32 %.pre-phi3488 to i64
  %5847 = mul nsw i64 %5846, %112
  %5848 = sub nsw i64 %5847, %96
  %5849 = zext i32 %.pre-phi3498 to i64
  %5850 = mul nsw i64 %5849, %112
  %5851 = sub nsw i64 %5850, %96
  %5852 = zext i32 %.pre-phi3492 to i64
  %5853 = mul nsw i64 %5852, %112
  %5854 = sub nsw i64 %5853, %96
  %5855 = sext i32 %a26 to i64
  %5856 = add nsw i64 %5855, 9
  %5857 = mul nsw i64 %5856, %113
  %5858 = add nsw i64 %5857, %116
  br label %"for blur_y.s0.x.x.rebased302"

"produce blur_x300":                              ; preds = %"for blur_y.s0.x.x.rebased294"
  %t856 = add nsw i32 %5836, %t1849
  %5859 = sext i32 %t856 to i64
  %5860 = getelementptr inbounds i16, i16* %read_input, i64 %5859
  %5861 = getelementptr inbounds i16, i16* %5860, i64 1
  %5862 = bitcast i16* %5861 to <16 x i16>*
  %5863 = load <16 x i16>, <16 x i16>* %5862, align 2, !tbaa !396
  %5864 = getelementptr inbounds i16, i16* %5860, i64 17
  %5865 = bitcast i16* %5864 to <16 x i16>*
  %5866 = load <16 x i16>, <16 x i16>* %5865, align 2, !tbaa !396
  %5867 = bitcast i16* %5860 to <16 x i16>*
  %5868 = load <16 x i16>, <16 x i16>* %5867, align 2, !tbaa !396
  %5869 = getelementptr inbounds i16, i16* %5860, i64 16
  %5870 = bitcast i16* %5869 to <16 x i16>*
  %5871 = load <16 x i16>, <16 x i16>* %5870, align 2, !tbaa !396
  %5872 = getelementptr inbounds i16, i16* %5860, i64 2
  %5873 = bitcast i16* %5872 to <16 x i16>*
  %5874 = load <16 x i16>, <16 x i16>* %5873, align 2, !tbaa !396
  %5875 = getelementptr inbounds i16, i16* %5860, i64 18
  %5876 = bitcast i16* %5875 to <16 x i16>*
  %5877 = load <16 x i16>, <16 x i16>* %5876, align 2, !tbaa !396
  %5878 = getelementptr inbounds i16, i16* %5860, i64 4
  %5879 = bitcast i16* %5878 to <16 x i16>*
  %5880 = load <16 x i16>, <16 x i16>* %5879, align 2, !tbaa !396
  %5881 = getelementptr inbounds i16, i16* %5860, i64 20
  %5882 = bitcast i16* %5881 to <16 x i16>*
  %5883 = load <16 x i16>, <16 x i16>* %5882, align 2, !tbaa !396
  %5884 = getelementptr inbounds i16, i16* %5860, i64 3
  %5885 = bitcast i16* %5884 to <16 x i16>*
  %5886 = load <16 x i16>, <16 x i16>* %5885, align 2, !tbaa !396
  %5887 = getelementptr inbounds i16, i16* %5860, i64 19
  %5888 = bitcast i16* %5887 to <16 x i16>*
  %5889 = load <16 x i16>, <16 x i16>* %5888, align 2, !tbaa !396
  %5890 = add <16 x i16> %5868, %5863
  %5891 = add <16 x i16> %5890, %5874
  %5892 = add <16 x i16> %5891, %5880
  %5893 = add <16 x i16> %5892, %5886
  %5894 = add <16 x i16> %5871, %5866
  %5895 = add <16 x i16> %5894, %5877
  %5896 = add <16 x i16> %5895, %5883
  %5897 = add <16 x i16> %5896, %5889
  %5898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5893, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5897, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5900 = shufflevector <16 x i16> %5898, <16 x i16> %5899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5901 = lshr <32 x i16> %5900, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5902 = shufflevector <32 x i16> %5901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5903 = shl nsw i64 %5833, 5
  %5904 = add nsw i64 %5903, %5688
  %5905 = getelementptr inbounds i16, i16* %blur_x, i64 %5904
  %5906 = bitcast i16* %5905 to <16 x i16>*
  store <16 x i16> %5902, <16 x i16>* %5906, align 2, !tbaa !399
  %5907 = shufflevector <32 x i16> %5901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5908 = getelementptr inbounds i16, i16* %5905, i64 16
  %5909 = bitcast i16* %5908 to <16 x i16>*
  store <16 x i16> %5907, <16 x i16>* %5909, align 2, !tbaa !399
  br label %"consume blur_x301"

"consume blur_x301":                              ; preds = %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge", %"produce blur_x300"
  %.pre-phi3524 = phi i64 [ %.pre3523, %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge" ], [ %5903, %"produce blur_x300" ]
  %5910 = add nsw i64 %5691, %.pre-phi3524
  %5911 = getelementptr inbounds i16, i16* %blur_x, i64 %5910
  %5912 = bitcast i16* %5911 to <16 x i16>*
  %5913 = load <16 x i16>, <16 x i16>* %5912, align 2, !tbaa !399
  %5914 = getelementptr inbounds i16, i16* %5911, i64 16
  %5915 = bitcast i16* %5914 to <16 x i16>*
  %5916 = load <16 x i16>, <16 x i16>* %5915, align 2, !tbaa !399
  %5917 = add nsw i64 %5694, %.pre-phi3524
  %5918 = getelementptr inbounds i16, i16* %blur_x, i64 %5917
  %5919 = bitcast i16* %5918 to <16 x i16>*
  %5920 = load <16 x i16>, <16 x i16>* %5919, align 2, !tbaa !399
  %5921 = getelementptr inbounds i16, i16* %5918, i64 16
  %5922 = bitcast i16* %5921 to <16 x i16>*
  %5923 = load <16 x i16>, <16 x i16>* %5922, align 2, !tbaa !399
  %5924 = add nsw i64 %5697, %.pre-phi3524
  %5925 = getelementptr inbounds i16, i16* %blur_x, i64 %5924
  %5926 = bitcast i16* %5925 to <16 x i16>*
  %5927 = load <16 x i16>, <16 x i16>* %5926, align 2, !tbaa !399
  %5928 = getelementptr inbounds i16, i16* %5925, i64 16
  %5929 = bitcast i16* %5928 to <16 x i16>*
  %5930 = load <16 x i16>, <16 x i16>* %5929, align 2, !tbaa !399
  %5931 = add nsw i64 %5700, %.pre-phi3524
  %5932 = getelementptr inbounds i16, i16* %blur_x, i64 %5931
  %5933 = bitcast i16* %5932 to <16 x i16>*
  %5934 = load <16 x i16>, <16 x i16>* %5933, align 2, !tbaa !399
  %5935 = getelementptr inbounds i16, i16* %5932, i64 16
  %5936 = bitcast i16* %5935 to <16 x i16>*
  %5937 = load <16 x i16>, <16 x i16>* %5936, align 2, !tbaa !399
  %5938 = add nsw i64 %5703, %.pre-phi3524
  %5939 = getelementptr inbounds i16, i16* %blur_x, i64 %5938
  %5940 = bitcast i16* %5939 to <16 x i16>*
  %5941 = load <16 x i16>, <16 x i16>* %5940, align 2, !tbaa !399
  %5942 = getelementptr inbounds i16, i16* %5939, i64 16
  %5943 = bitcast i16* %5942 to <16 x i16>*
  %5944 = load <16 x i16>, <16 x i16>* %5943, align 2, !tbaa !399
  %5945 = add <16 x i16> %5920, %5913
  %5946 = add <16 x i16> %5945, %5927
  %5947 = add <16 x i16> %5946, %5934
  %5948 = add <16 x i16> %5947, %5941
  %5949 = add <16 x i16> %5923, %5916
  %5950 = add <16 x i16> %5949, %5930
  %5951 = add <16 x i16> %5950, %5937
  %5952 = add <16 x i16> %5951, %5944
  %5953 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5948, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5952, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5955 = shufflevector <16 x i16> %5953, <16 x i16> %5954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5956 = lshr <32 x i16> %5955, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5957 = shufflevector <32 x i16> %5956, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5958 = add nsw i64 %5707, %.pre-phi3524
  %5959 = getelementptr inbounds i16, i16* %66, i64 %5958
  %5960 = bitcast i16* %5959 to <16 x i16>*
  store <16 x i16> %5957, <16 x i16>* %5960, align 2, !tbaa !401
  %5961 = shufflevector <32 x i16> %5956, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5962 = getelementptr inbounds i16, i16* %5959, i64 16
  %5963 = bitcast i16* %5962 to <16 x i16>*
  store <16 x i16> %5961, <16 x i16>* %5963, align 2, !tbaa !401
  %indvars.iv.next3287 = add nuw nsw i64 %indvars.iv3286, 1
  %.not2739 = icmp eq i64 %indvars.iv.next3287, %184
  br i1 %.not2739, label %"end for blur_y.s0.x.x.rebased295", label %"for blur_y.s0.x.x.rebased294"

"for blur_y.s0.x.x.rebased302":                   ; preds = %"for blur_y.s0.x.x.rebased302.preheader", %"consume blur_x310"
  %blur_y.s0.x.x.rebased304 = phi i32 [ %6076, %"consume blur_x310" ], [ 0, %"for blur_y.s0.x.x.rebased302.preheader" ]
  %5964 = add nsw i32 %blur_y.s0.x.x.rebased304, %t1626
  %a168 = shl nsw i32 %5964, 5
  %5965 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %5965, i32 %a168, i32 %a14
  %5966 = icmp slt i32 %5964, 1
  %5967 = icmp sgt i32 %4, %a168
  %5968 = or i1 %5966, %5967
  br i1 %5968, label %"produce blur_x308", label %"consume blur_x310"

"end for blur_y.s0.x.x.rebased303":               ; preds = %"consume blur_x310", %"end for blur_y.s0.x.x.rebased295"
  br i1 %34, label %"produce blur_x314", label %after_bb311

"produce blur_x308":                              ; preds = %"for blur_y.s0.x.x.rebased302"
  %5969 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s309 = select i1 %5969, i32 %b174, i32 %4
  %t861 = add nsw i32 %blur_x.s0.x.v1.base.s309, %t1849
  %5970 = sext i32 %t861 to i64
  %5971 = getelementptr inbounds i16, i16* %read_input, i64 %5970
  %5972 = getelementptr inbounds i16, i16* %5971, i64 1
  %5973 = bitcast i16* %5972 to <16 x i16>*
  %5974 = load <16 x i16>, <16 x i16>* %5973, align 2, !tbaa !396
  %5975 = getelementptr inbounds i16, i16* %5971, i64 17
  %5976 = bitcast i16* %5975 to <16 x i16>*
  %5977 = load <16 x i16>, <16 x i16>* %5976, align 2, !tbaa !396
  %5978 = bitcast i16* %5971 to <16 x i16>*
  %5979 = load <16 x i16>, <16 x i16>* %5978, align 2, !tbaa !396
  %5980 = getelementptr inbounds i16, i16* %5971, i64 16
  %5981 = bitcast i16* %5980 to <16 x i16>*
  %5982 = load <16 x i16>, <16 x i16>* %5981, align 2, !tbaa !396
  %5983 = getelementptr inbounds i16, i16* %5971, i64 2
  %5984 = bitcast i16* %5983 to <16 x i16>*
  %5985 = load <16 x i16>, <16 x i16>* %5984, align 2, !tbaa !396
  %5986 = getelementptr inbounds i16, i16* %5971, i64 18
  %5987 = bitcast i16* %5986 to <16 x i16>*
  %5988 = load <16 x i16>, <16 x i16>* %5987, align 2, !tbaa !396
  %5989 = getelementptr inbounds i16, i16* %5971, i64 4
  %5990 = bitcast i16* %5989 to <16 x i16>*
  %5991 = load <16 x i16>, <16 x i16>* %5990, align 2, !tbaa !396
  %5992 = getelementptr inbounds i16, i16* %5971, i64 20
  %5993 = bitcast i16* %5992 to <16 x i16>*
  %5994 = load <16 x i16>, <16 x i16>* %5993, align 2, !tbaa !396
  %5995 = getelementptr inbounds i16, i16* %5971, i64 3
  %5996 = bitcast i16* %5995 to <16 x i16>*
  %5997 = load <16 x i16>, <16 x i16>* %5996, align 2, !tbaa !396
  %5998 = getelementptr inbounds i16, i16* %5971, i64 19
  %5999 = bitcast i16* %5998 to <16 x i16>*
  %6000 = load <16 x i16>, <16 x i16>* %5999, align 2, !tbaa !396
  %6001 = add <16 x i16> %5979, %5974
  %6002 = add <16 x i16> %6001, %5985
  %6003 = add <16 x i16> %6002, %5991
  %6004 = add <16 x i16> %6003, %5997
  %6005 = add <16 x i16> %5982, %5977
  %6006 = add <16 x i16> %6005, %5988
  %6007 = add <16 x i16> %6006, %5994
  %6008 = add <16 x i16> %6007, %6000
  %6009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6004, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6008, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6011 = shufflevector <16 x i16> %6009, <16 x i16> %6010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6012 = lshr <32 x i16> %6011, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6013 = shufflevector <32 x i16> %6012, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6014 = sext i32 %blur_x.s0.x.v1.base.s309 to i64
  %6015 = add nsw i64 %6014, %5839
  %6016 = getelementptr inbounds i16, i16* %blur_x, i64 %6015
  %6017 = bitcast i16* %6016 to <16 x i16>*
  store <16 x i16> %6013, <16 x i16>* %6017, align 2, !tbaa !399
  %6018 = shufflevector <32 x i16> %6012, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6019 = getelementptr inbounds i16, i16* %6016, i64 16
  %6020 = bitcast i16* %6019 to <16 x i16>*
  store <16 x i16> %6018, <16 x i16>* %6020, align 2, !tbaa !399
  br label %"consume blur_x310"

"consume blur_x310":                              ; preds = %"for blur_y.s0.x.x.rebased302", %"produce blur_x308"
  %6021 = sext i32 %b174 to i64
  %6022 = add nsw i64 %5842, %6021
  %6023 = getelementptr inbounds i16, i16* %blur_x, i64 %6022
  %6024 = bitcast i16* %6023 to <16 x i16>*
  %6025 = load <16 x i16>, <16 x i16>* %6024, align 2, !tbaa !399
  %6026 = getelementptr inbounds i16, i16* %6023, i64 16
  %6027 = bitcast i16* %6026 to <16 x i16>*
  %6028 = load <16 x i16>, <16 x i16>* %6027, align 2, !tbaa !399
  %6029 = add nsw i64 %5845, %6021
  %6030 = getelementptr inbounds i16, i16* %blur_x, i64 %6029
  %6031 = bitcast i16* %6030 to <16 x i16>*
  %6032 = load <16 x i16>, <16 x i16>* %6031, align 2, !tbaa !399
  %6033 = getelementptr inbounds i16, i16* %6030, i64 16
  %6034 = bitcast i16* %6033 to <16 x i16>*
  %6035 = load <16 x i16>, <16 x i16>* %6034, align 2, !tbaa !399
  %6036 = add nsw i64 %5848, %6021
  %6037 = getelementptr inbounds i16, i16* %blur_x, i64 %6036
  %6038 = bitcast i16* %6037 to <16 x i16>*
  %6039 = load <16 x i16>, <16 x i16>* %6038, align 2, !tbaa !399
  %6040 = getelementptr inbounds i16, i16* %6037, i64 16
  %6041 = bitcast i16* %6040 to <16 x i16>*
  %6042 = load <16 x i16>, <16 x i16>* %6041, align 2, !tbaa !399
  %6043 = add nsw i64 %5851, %6021
  %6044 = getelementptr inbounds i16, i16* %blur_x, i64 %6043
  %6045 = bitcast i16* %6044 to <16 x i16>*
  %6046 = load <16 x i16>, <16 x i16>* %6045, align 2, !tbaa !399
  %6047 = getelementptr inbounds i16, i16* %6044, i64 16
  %6048 = bitcast i16* %6047 to <16 x i16>*
  %6049 = load <16 x i16>, <16 x i16>* %6048, align 2, !tbaa !399
  %6050 = add nsw i64 %5854, %6021
  %6051 = getelementptr inbounds i16, i16* %blur_x, i64 %6050
  %6052 = bitcast i16* %6051 to <16 x i16>*
  %6053 = load <16 x i16>, <16 x i16>* %6052, align 2, !tbaa !399
  %6054 = getelementptr inbounds i16, i16* %6051, i64 16
  %6055 = bitcast i16* %6054 to <16 x i16>*
  %6056 = load <16 x i16>, <16 x i16>* %6055, align 2, !tbaa !399
  %6057 = add <16 x i16> %6032, %6025
  %6058 = add <16 x i16> %6057, %6039
  %6059 = add <16 x i16> %6058, %6046
  %6060 = add <16 x i16> %6059, %6053
  %6061 = add <16 x i16> %6035, %6028
  %6062 = add <16 x i16> %6061, %6042
  %6063 = add <16 x i16> %6062, %6049
  %6064 = add <16 x i16> %6063, %6056
  %6065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6060, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6064, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6067 = shufflevector <16 x i16> %6065, <16 x i16> %6066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6068 = lshr <32 x i16> %6067, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6069 = shufflevector <32 x i16> %6068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6070 = add nsw i64 %5858, %6021
  %6071 = getelementptr inbounds i16, i16* %66, i64 %6070
  %6072 = bitcast i16* %6071 to <16 x i16>*
  store <16 x i16> %6069, <16 x i16>* %6072, align 2, !tbaa !401
  %6073 = shufflevector <32 x i16> %6068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6074 = getelementptr inbounds i16, i16* %6071, i64 16
  %6075 = bitcast i16* %6074 to <16 x i16>*
  store <16 x i16> %6073, <16 x i16>* %6075, align 2, !tbaa !401
  %6076 = add nuw nsw i32 %blur_y.s0.x.x.rebased304, 1
  %.not2738 = icmp eq i32 %6076, %t1683
  br i1 %.not2738, label %"end for blur_y.s0.x.x.rebased303", label %"for blur_y.s0.x.x.rebased302"

after_bb311:                                      ; preds = %"end for blur_y.s0.x.x.rebased303", %"produce blur_x314"
  br i1 %100, label %"for blur_y.s0.x.x.rebased316.preheader", label %"end for blur_y.s0.x.x.rebased317", !prof !386

"for blur_y.s0.x.x.rebased316.preheader":         ; preds = %after_bb311
  %6077 = sext i32 %t1738 to i64
  %6078 = zext i32 %.pre-phi3488 to i64
  %6079 = mul nsw i64 %6078, %112
  %6080 = sub nsw i64 %6079, %96
  %6081 = zext i32 %.pre-phi3484 to i64
  %6082 = mul nsw i64 %6081, %112
  %6083 = sub nsw i64 %6082, %96
  %6084 = zext i32 %.pre-phi3492 to i64
  %6085 = mul nsw i64 %6084, %112
  %6086 = sub nsw i64 %6085, %96
  %6087 = zext i32 %.pre-phi3504 to i64
  %6088 = mul nsw i64 %6087, %112
  %6089 = sub nsw i64 %6088, %96
  %6090 = zext i32 %.pre-phi3498 to i64
  %6091 = mul nsw i64 %6090, %112
  %6092 = sub nsw i64 %6091, %96
  %6093 = sext i32 %a26 to i64
  %6094 = add nsw i64 %6093, 10
  %6095 = mul nsw i64 %6094, %113
  %6096 = add nsw i64 %6095, %116
  br label %"for blur_y.s0.x.x.rebased316"

"produce blur_x314":                              ; preds = %"end for blur_y.s0.x.x.rebased303"
  %6097 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %6098 = getelementptr inbounds i16, i16* %6097, i64 -31
  %6099 = bitcast i16* %6098 to <16 x i16>*
  %6100 = load <16 x i16>, <16 x i16>* %6099, align 2, !tbaa !396
  %6101 = getelementptr inbounds i16, i16* %6097, i64 -15
  %6102 = bitcast i16* %6101 to <16 x i16>*
  %6103 = load <16 x i16>, <16 x i16>* %6102, align 2, !tbaa !396
  %6104 = getelementptr inbounds i16, i16* %6097, i64 -32
  %6105 = bitcast i16* %6104 to <16 x i16>*
  %6106 = load <16 x i16>, <16 x i16>* %6105, align 2, !tbaa !396
  %6107 = getelementptr inbounds i16, i16* %6097, i64 -16
  %6108 = bitcast i16* %6107 to <16 x i16>*
  %6109 = load <16 x i16>, <16 x i16>* %6108, align 2, !tbaa !396
  %6110 = getelementptr inbounds i16, i16* %6097, i64 -30
  %6111 = bitcast i16* %6110 to <16 x i16>*
  %6112 = load <16 x i16>, <16 x i16>* %6111, align 2, !tbaa !396
  %6113 = getelementptr inbounds i16, i16* %6097, i64 -14
  %6114 = bitcast i16* %6113 to <16 x i16>*
  %6115 = load <16 x i16>, <16 x i16>* %6114, align 2, !tbaa !396
  %6116 = getelementptr inbounds i16, i16* %6097, i64 -28
  %6117 = bitcast i16* %6116 to <16 x i16>*
  %6118 = load <16 x i16>, <16 x i16>* %6117, align 2, !tbaa !396
  %6119 = getelementptr inbounds i16, i16* %6097, i64 -12
  %6120 = bitcast i16* %6119 to <16 x i16>*
  %6121 = load <16 x i16>, <16 x i16>* %6120, align 2, !tbaa !396
  %6122 = getelementptr inbounds i16, i16* %6097, i64 -29
  %6123 = bitcast i16* %6122 to <16 x i16>*
  %6124 = load <16 x i16>, <16 x i16>* %6123, align 2, !tbaa !396
  %6125 = getelementptr inbounds i16, i16* %6097, i64 -13
  %6126 = bitcast i16* %6125 to <16 x i16>*
  %6127 = load <16 x i16>, <16 x i16>* %6126, align 2, !tbaa !396
  %6128 = add <16 x i16> %6106, %6100
  %6129 = add <16 x i16> %6128, %6112
  %6130 = add <16 x i16> %6129, %6118
  %6131 = add <16 x i16> %6130, %6124
  %6132 = add <16 x i16> %6109, %6103
  %6133 = add <16 x i16> %6132, %6115
  %6134 = add <16 x i16> %6133, %6121
  %6135 = add <16 x i16> %6134, %6127
  %6136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6131, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6135, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6138 = shufflevector <16 x i16> %6136, <16 x i16> %6137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6139 = lshr <32 x i16> %6138, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6140 = shufflevector <32 x i16> %6139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6141 = zext i32 %.pre-phi3504 to i64
  %6142 = mul nsw i64 %97, %6141
  %6143 = add nsw i64 %99, %6142
  %6144 = getelementptr inbounds i16, i16* %blur_x, i64 %6143
  %6145 = getelementptr inbounds i16, i16* %6144, i64 -32
  %6146 = bitcast i16* %6145 to <16 x i16>*
  store <16 x i16> %6140, <16 x i16>* %6146, align 2, !tbaa !399
  %6147 = shufflevector <32 x i16> %6139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6148 = getelementptr inbounds i16, i16* %6144, i64 -16
  %6149 = bitcast i16* %6148 to <16 x i16>*
  store <16 x i16> %6147, <16 x i16>* %6149, align 2, !tbaa !399
  %6150 = zext i32 %.pre-phi3488 to i64
  %6151 = mul nsw i64 %6150, %112
  %6152 = add nsw i64 %6151, %94
  %6153 = getelementptr inbounds i16, i16* %blur_x, i64 %6152
  %6154 = getelementptr inbounds i16, i16* %6153, i64 -32
  %6155 = bitcast i16* %6154 to <16 x i16>*
  %6156 = load <16 x i16>, <16 x i16>* %6155, align 2, !tbaa !399
  %6157 = getelementptr inbounds i16, i16* %6153, i64 -16
  %6158 = bitcast i16* %6157 to <16 x i16>*
  %6159 = load <16 x i16>, <16 x i16>* %6158, align 2, !tbaa !399
  %6160 = zext i32 %.pre-phi3484 to i64
  %6161 = mul nsw i64 %6160, %112
  %6162 = add nsw i64 %6161, %94
  %6163 = getelementptr inbounds i16, i16* %blur_x, i64 %6162
  %6164 = getelementptr inbounds i16, i16* %6163, i64 -32
  %6165 = bitcast i16* %6164 to <16 x i16>*
  %6166 = load <16 x i16>, <16 x i16>* %6165, align 2, !tbaa !399
  %6167 = getelementptr inbounds i16, i16* %6163, i64 -16
  %6168 = bitcast i16* %6167 to <16 x i16>*
  %6169 = load <16 x i16>, <16 x i16>* %6168, align 2, !tbaa !399
  %6170 = zext i32 %.pre-phi3492 to i64
  %6171 = mul nsw i64 %6170, %112
  %6172 = add nsw i64 %6171, %94
  %6173 = getelementptr inbounds i16, i16* %blur_x, i64 %6172
  %6174 = getelementptr inbounds i16, i16* %6173, i64 -32
  %6175 = bitcast i16* %6174 to <16 x i16>*
  %6176 = load <16 x i16>, <16 x i16>* %6175, align 2, !tbaa !399
  %6177 = getelementptr inbounds i16, i16* %6173, i64 -16
  %6178 = bitcast i16* %6177 to <16 x i16>*
  %6179 = load <16 x i16>, <16 x i16>* %6178, align 2, !tbaa !399
  %6180 = mul nsw i64 %6141, %112
  %6181 = add nsw i64 %6180, %94
  %6182 = getelementptr inbounds i16, i16* %blur_x, i64 %6181
  %6183 = getelementptr inbounds i16, i16* %6182, i64 -32
  %6184 = bitcast i16* %6183 to <16 x i16>*
  %6185 = load <16 x i16>, <16 x i16>* %6184, align 2, !tbaa !399
  %6186 = getelementptr inbounds i16, i16* %6182, i64 -16
  %6187 = bitcast i16* %6186 to <16 x i16>*
  %6188 = load <16 x i16>, <16 x i16>* %6187, align 2, !tbaa !399
  %6189 = zext i32 %.pre-phi3498 to i64
  %6190 = mul nsw i64 %6189, %112
  %6191 = add nsw i64 %6190, %94
  %6192 = getelementptr inbounds i16, i16* %blur_x, i64 %6191
  %6193 = getelementptr inbounds i16, i16* %6192, i64 -32
  %6194 = bitcast i16* %6193 to <16 x i16>*
  %6195 = load <16 x i16>, <16 x i16>* %6194, align 2, !tbaa !399
  %6196 = getelementptr inbounds i16, i16* %6192, i64 -16
  %6197 = bitcast i16* %6196 to <16 x i16>*
  %6198 = load <16 x i16>, <16 x i16>* %6197, align 2, !tbaa !399
  %6199 = add <16 x i16> %6166, %6156
  %6200 = add <16 x i16> %6199, %6176
  %6201 = add <16 x i16> %6200, %6185
  %6202 = add <16 x i16> %6201, %6195
  %6203 = add <16 x i16> %6169, %6159
  %6204 = add <16 x i16> %6203, %6179
  %6205 = add <16 x i16> %6204, %6188
  %6206 = add <16 x i16> %6205, %6198
  %6207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6202, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6206, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6209 = shufflevector <16 x i16> %6207, <16 x i16> %6208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6210 = lshr <32 x i16> %6209, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6211 = shufflevector <32 x i16> %6210, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6212 = sext i32 %a26 to i64
  %6213 = add nsw i64 %6212, 10
  %6214 = mul nsw i64 %6213, %113
  %6215 = add nsw i64 %115, %6214
  %6216 = getelementptr inbounds i16, i16* %66, i64 %6215
  %6217 = getelementptr inbounds i16, i16* %6216, i64 -32
  %6218 = bitcast i16* %6217 to <16 x i16>*
  store <16 x i16> %6211, <16 x i16>* %6218, align 2, !tbaa !401
  %6219 = shufflevector <32 x i16> %6210, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6220 = getelementptr inbounds i16, i16* %6216, i64 -16
  %6221 = bitcast i16* %6220 to <16 x i16>*
  store <16 x i16> %6219, <16 x i16>* %6221, align 2, !tbaa !401
  br label %after_bb311

"for blur_y.s0.x.x.rebased316":                   ; preds = %"for blur_y.s0.x.x.rebased316.preheader", %"consume blur_x323"
  %indvars.iv3289 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased316.preheader" ], [ %indvars.iv.next3290, %"consume blur_x323" ]
  %6222 = add nsw i64 %indvars.iv3289, %101
  %6223 = icmp slt i64 %6222, 1
  %6224 = trunc i64 %6222 to i32
  %6225 = shl nsw i32 %6224, 5
  %6226 = icmp sgt i32 %4, %6225
  %6227 = or i1 %6223, %6226
  br i1 %6227, label %"produce blur_x322", label %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge"

"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased316"
  %.pre3525 = shl nsw i64 %6222, 5
  br label %"consume blur_x323"

"end for blur_y.s0.x.x.rebased317":               ; preds = %"consume blur_x323", %after_bb311
  br i1 %102, label %"for blur_y.s0.x.x.rebased324.preheader", label %"end for blur_y.s0.x.x.rebased325", !prof !386

"for blur_y.s0.x.x.rebased324.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased317"
  %6228 = sext i32 %t1738 to i64
  %6229 = zext i32 %.pre-phi3488 to i64
  %6230 = mul nsw i64 %6229, %112
  %6231 = sub nsw i64 %6230, %96
  %6232 = zext i32 %.pre-phi3484 to i64
  %6233 = mul nsw i64 %6232, %112
  %6234 = sub nsw i64 %6233, %96
  %6235 = zext i32 %.pre-phi3492 to i64
  %6236 = mul nsw i64 %6235, %112
  %6237 = sub nsw i64 %6236, %96
  %6238 = zext i32 %.pre-phi3504 to i64
  %6239 = mul nsw i64 %6238, %112
  %6240 = sub nsw i64 %6239, %96
  %6241 = zext i32 %.pre-phi3498 to i64
  %6242 = mul nsw i64 %6241, %112
  %6243 = sub nsw i64 %6242, %96
  %6244 = sext i32 %a26 to i64
  %6245 = add nsw i64 %6244, 10
  %6246 = mul nsw i64 %6245, %113
  %6247 = add nsw i64 %6246, %116
  br label %"for blur_y.s0.x.x.rebased324"

"produce blur_x322":                              ; preds = %"for blur_y.s0.x.x.rebased316"
  %t872 = add nsw i32 %6225, %t1865
  %6248 = sext i32 %t872 to i64
  %6249 = getelementptr inbounds i16, i16* %read_input, i64 %6248
  %6250 = getelementptr inbounds i16, i16* %6249, i64 1
  %6251 = bitcast i16* %6250 to <16 x i16>*
  %6252 = load <16 x i16>, <16 x i16>* %6251, align 2, !tbaa !396
  %6253 = getelementptr inbounds i16, i16* %6249, i64 17
  %6254 = bitcast i16* %6253 to <16 x i16>*
  %6255 = load <16 x i16>, <16 x i16>* %6254, align 2, !tbaa !396
  %6256 = bitcast i16* %6249 to <16 x i16>*
  %6257 = load <16 x i16>, <16 x i16>* %6256, align 2, !tbaa !396
  %6258 = getelementptr inbounds i16, i16* %6249, i64 16
  %6259 = bitcast i16* %6258 to <16 x i16>*
  %6260 = load <16 x i16>, <16 x i16>* %6259, align 2, !tbaa !396
  %6261 = getelementptr inbounds i16, i16* %6249, i64 2
  %6262 = bitcast i16* %6261 to <16 x i16>*
  %6263 = load <16 x i16>, <16 x i16>* %6262, align 2, !tbaa !396
  %6264 = getelementptr inbounds i16, i16* %6249, i64 18
  %6265 = bitcast i16* %6264 to <16 x i16>*
  %6266 = load <16 x i16>, <16 x i16>* %6265, align 2, !tbaa !396
  %6267 = getelementptr inbounds i16, i16* %6249, i64 4
  %6268 = bitcast i16* %6267 to <16 x i16>*
  %6269 = load <16 x i16>, <16 x i16>* %6268, align 2, !tbaa !396
  %6270 = getelementptr inbounds i16, i16* %6249, i64 20
  %6271 = bitcast i16* %6270 to <16 x i16>*
  %6272 = load <16 x i16>, <16 x i16>* %6271, align 2, !tbaa !396
  %6273 = getelementptr inbounds i16, i16* %6249, i64 3
  %6274 = bitcast i16* %6273 to <16 x i16>*
  %6275 = load <16 x i16>, <16 x i16>* %6274, align 2, !tbaa !396
  %6276 = getelementptr inbounds i16, i16* %6249, i64 19
  %6277 = bitcast i16* %6276 to <16 x i16>*
  %6278 = load <16 x i16>, <16 x i16>* %6277, align 2, !tbaa !396
  %6279 = add <16 x i16> %6257, %6252
  %6280 = add <16 x i16> %6279, %6263
  %6281 = add <16 x i16> %6280, %6269
  %6282 = add <16 x i16> %6281, %6275
  %6283 = add <16 x i16> %6260, %6255
  %6284 = add <16 x i16> %6283, %6266
  %6285 = add <16 x i16> %6284, %6272
  %6286 = add <16 x i16> %6285, %6278
  %6287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6282, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6286, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6289 = shufflevector <16 x i16> %6287, <16 x i16> %6288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6290 = lshr <32 x i16> %6289, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6291 = shufflevector <32 x i16> %6290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6292 = shl nsw i64 %6222, 5
  %6293 = add nsw i64 %6292, %6077
  %6294 = getelementptr inbounds i16, i16* %blur_x, i64 %6293
  %6295 = bitcast i16* %6294 to <16 x i16>*
  store <16 x i16> %6291, <16 x i16>* %6295, align 2, !tbaa !399
  %6296 = shufflevector <32 x i16> %6290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6297 = getelementptr inbounds i16, i16* %6294, i64 16
  %6298 = bitcast i16* %6297 to <16 x i16>*
  store <16 x i16> %6296, <16 x i16>* %6298, align 2, !tbaa !399
  br label %"consume blur_x323"

"consume blur_x323":                              ; preds = %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge", %"produce blur_x322"
  %.pre-phi3526 = phi i64 [ %.pre3525, %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge" ], [ %6292, %"produce blur_x322" ]
  %6299 = add nsw i64 %6080, %.pre-phi3526
  %6300 = getelementptr inbounds i16, i16* %blur_x, i64 %6299
  %6301 = bitcast i16* %6300 to <16 x i16>*
  %6302 = load <16 x i16>, <16 x i16>* %6301, align 2, !tbaa !399
  %6303 = getelementptr inbounds i16, i16* %6300, i64 16
  %6304 = bitcast i16* %6303 to <16 x i16>*
  %6305 = load <16 x i16>, <16 x i16>* %6304, align 2, !tbaa !399
  %6306 = add nsw i64 %6083, %.pre-phi3526
  %6307 = getelementptr inbounds i16, i16* %blur_x, i64 %6306
  %6308 = bitcast i16* %6307 to <16 x i16>*
  %6309 = load <16 x i16>, <16 x i16>* %6308, align 2, !tbaa !399
  %6310 = getelementptr inbounds i16, i16* %6307, i64 16
  %6311 = bitcast i16* %6310 to <16 x i16>*
  %6312 = load <16 x i16>, <16 x i16>* %6311, align 2, !tbaa !399
  %6313 = add nsw i64 %6086, %.pre-phi3526
  %6314 = getelementptr inbounds i16, i16* %blur_x, i64 %6313
  %6315 = bitcast i16* %6314 to <16 x i16>*
  %6316 = load <16 x i16>, <16 x i16>* %6315, align 2, !tbaa !399
  %6317 = getelementptr inbounds i16, i16* %6314, i64 16
  %6318 = bitcast i16* %6317 to <16 x i16>*
  %6319 = load <16 x i16>, <16 x i16>* %6318, align 2, !tbaa !399
  %6320 = add nsw i64 %6089, %.pre-phi3526
  %6321 = getelementptr inbounds i16, i16* %blur_x, i64 %6320
  %6322 = bitcast i16* %6321 to <16 x i16>*
  %6323 = load <16 x i16>, <16 x i16>* %6322, align 2, !tbaa !399
  %6324 = getelementptr inbounds i16, i16* %6321, i64 16
  %6325 = bitcast i16* %6324 to <16 x i16>*
  %6326 = load <16 x i16>, <16 x i16>* %6325, align 2, !tbaa !399
  %6327 = add nsw i64 %6092, %.pre-phi3526
  %6328 = getelementptr inbounds i16, i16* %blur_x, i64 %6327
  %6329 = bitcast i16* %6328 to <16 x i16>*
  %6330 = load <16 x i16>, <16 x i16>* %6329, align 2, !tbaa !399
  %6331 = getelementptr inbounds i16, i16* %6328, i64 16
  %6332 = bitcast i16* %6331 to <16 x i16>*
  %6333 = load <16 x i16>, <16 x i16>* %6332, align 2, !tbaa !399
  %6334 = add <16 x i16> %6309, %6302
  %6335 = add <16 x i16> %6334, %6316
  %6336 = add <16 x i16> %6335, %6323
  %6337 = add <16 x i16> %6336, %6330
  %6338 = add <16 x i16> %6312, %6305
  %6339 = add <16 x i16> %6338, %6319
  %6340 = add <16 x i16> %6339, %6326
  %6341 = add <16 x i16> %6340, %6333
  %6342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6337, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6341, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6344 = shufflevector <16 x i16> %6342, <16 x i16> %6343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6345 = lshr <32 x i16> %6344, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6346 = shufflevector <32 x i16> %6345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6347 = add nsw i64 %6096, %.pre-phi3526
  %6348 = getelementptr inbounds i16, i16* %66, i64 %6347
  %6349 = bitcast i16* %6348 to <16 x i16>*
  store <16 x i16> %6346, <16 x i16>* %6349, align 2, !tbaa !401
  %6350 = shufflevector <32 x i16> %6345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6351 = getelementptr inbounds i16, i16* %6348, i64 16
  %6352 = bitcast i16* %6351 to <16 x i16>*
  store <16 x i16> %6350, <16 x i16>* %6352, align 2, !tbaa !401
  %indvars.iv.next3290 = add nuw nsw i64 %indvars.iv3289, 1
  %.not2737 = icmp eq i64 %indvars.iv.next3290, %184
  br i1 %.not2737, label %"end for blur_y.s0.x.x.rebased317", label %"for blur_y.s0.x.x.rebased316"

"for blur_y.s0.x.x.rebased324":                   ; preds = %"for blur_y.s0.x.x.rebased324.preheader", %"consume blur_x332"
  %blur_y.s0.x.x.rebased326 = phi i32 [ %6465, %"consume blur_x332" ], [ 0, %"for blur_y.s0.x.x.rebased324.preheader" ]
  %6353 = add nsw i32 %blur_y.s0.x.x.rebased326, %t1626
  %a175 = shl nsw i32 %6353, 5
  %6354 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %6354, i32 %a175, i32 %a14
  %6355 = icmp slt i32 %6353, 1
  %6356 = icmp sgt i32 %4, %a175
  %6357 = or i1 %6355, %6356
  br i1 %6357, label %"produce blur_x330", label %"consume blur_x332"

"end for blur_y.s0.x.x.rebased325":               ; preds = %"consume blur_x332", %"end for blur_y.s0.x.x.rebased317"
  br i1 %34, label %"produce blur_x336", label %after_bb333

"produce blur_x330":                              ; preds = %"for blur_y.s0.x.x.rebased324"
  %6358 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s331 = select i1 %6358, i32 %b181, i32 %4
  %t877 = add nsw i32 %blur_x.s0.x.v1.base.s331, %t1865
  %6359 = sext i32 %t877 to i64
  %6360 = getelementptr inbounds i16, i16* %read_input, i64 %6359
  %6361 = getelementptr inbounds i16, i16* %6360, i64 1
  %6362 = bitcast i16* %6361 to <16 x i16>*
  %6363 = load <16 x i16>, <16 x i16>* %6362, align 2, !tbaa !396
  %6364 = getelementptr inbounds i16, i16* %6360, i64 17
  %6365 = bitcast i16* %6364 to <16 x i16>*
  %6366 = load <16 x i16>, <16 x i16>* %6365, align 2, !tbaa !396
  %6367 = bitcast i16* %6360 to <16 x i16>*
  %6368 = load <16 x i16>, <16 x i16>* %6367, align 2, !tbaa !396
  %6369 = getelementptr inbounds i16, i16* %6360, i64 16
  %6370 = bitcast i16* %6369 to <16 x i16>*
  %6371 = load <16 x i16>, <16 x i16>* %6370, align 2, !tbaa !396
  %6372 = getelementptr inbounds i16, i16* %6360, i64 2
  %6373 = bitcast i16* %6372 to <16 x i16>*
  %6374 = load <16 x i16>, <16 x i16>* %6373, align 2, !tbaa !396
  %6375 = getelementptr inbounds i16, i16* %6360, i64 18
  %6376 = bitcast i16* %6375 to <16 x i16>*
  %6377 = load <16 x i16>, <16 x i16>* %6376, align 2, !tbaa !396
  %6378 = getelementptr inbounds i16, i16* %6360, i64 4
  %6379 = bitcast i16* %6378 to <16 x i16>*
  %6380 = load <16 x i16>, <16 x i16>* %6379, align 2, !tbaa !396
  %6381 = getelementptr inbounds i16, i16* %6360, i64 20
  %6382 = bitcast i16* %6381 to <16 x i16>*
  %6383 = load <16 x i16>, <16 x i16>* %6382, align 2, !tbaa !396
  %6384 = getelementptr inbounds i16, i16* %6360, i64 3
  %6385 = bitcast i16* %6384 to <16 x i16>*
  %6386 = load <16 x i16>, <16 x i16>* %6385, align 2, !tbaa !396
  %6387 = getelementptr inbounds i16, i16* %6360, i64 19
  %6388 = bitcast i16* %6387 to <16 x i16>*
  %6389 = load <16 x i16>, <16 x i16>* %6388, align 2, !tbaa !396
  %6390 = add <16 x i16> %6368, %6363
  %6391 = add <16 x i16> %6390, %6374
  %6392 = add <16 x i16> %6391, %6380
  %6393 = add <16 x i16> %6392, %6386
  %6394 = add <16 x i16> %6371, %6366
  %6395 = add <16 x i16> %6394, %6377
  %6396 = add <16 x i16> %6395, %6383
  %6397 = add <16 x i16> %6396, %6389
  %6398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6393, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6397, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6400 = shufflevector <16 x i16> %6398, <16 x i16> %6399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6401 = lshr <32 x i16> %6400, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6402 = shufflevector <32 x i16> %6401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6403 = sext i32 %blur_x.s0.x.v1.base.s331 to i64
  %6404 = add nsw i64 %6403, %6228
  %6405 = getelementptr inbounds i16, i16* %blur_x, i64 %6404
  %6406 = bitcast i16* %6405 to <16 x i16>*
  store <16 x i16> %6402, <16 x i16>* %6406, align 2, !tbaa !399
  %6407 = shufflevector <32 x i16> %6401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6408 = getelementptr inbounds i16, i16* %6405, i64 16
  %6409 = bitcast i16* %6408 to <16 x i16>*
  store <16 x i16> %6407, <16 x i16>* %6409, align 2, !tbaa !399
  br label %"consume blur_x332"

"consume blur_x332":                              ; preds = %"for blur_y.s0.x.x.rebased324", %"produce blur_x330"
  %6410 = sext i32 %b181 to i64
  %6411 = add nsw i64 %6231, %6410
  %6412 = getelementptr inbounds i16, i16* %blur_x, i64 %6411
  %6413 = bitcast i16* %6412 to <16 x i16>*
  %6414 = load <16 x i16>, <16 x i16>* %6413, align 2, !tbaa !399
  %6415 = getelementptr inbounds i16, i16* %6412, i64 16
  %6416 = bitcast i16* %6415 to <16 x i16>*
  %6417 = load <16 x i16>, <16 x i16>* %6416, align 2, !tbaa !399
  %6418 = add nsw i64 %6234, %6410
  %6419 = getelementptr inbounds i16, i16* %blur_x, i64 %6418
  %6420 = bitcast i16* %6419 to <16 x i16>*
  %6421 = load <16 x i16>, <16 x i16>* %6420, align 2, !tbaa !399
  %6422 = getelementptr inbounds i16, i16* %6419, i64 16
  %6423 = bitcast i16* %6422 to <16 x i16>*
  %6424 = load <16 x i16>, <16 x i16>* %6423, align 2, !tbaa !399
  %6425 = add nsw i64 %6237, %6410
  %6426 = getelementptr inbounds i16, i16* %blur_x, i64 %6425
  %6427 = bitcast i16* %6426 to <16 x i16>*
  %6428 = load <16 x i16>, <16 x i16>* %6427, align 2, !tbaa !399
  %6429 = getelementptr inbounds i16, i16* %6426, i64 16
  %6430 = bitcast i16* %6429 to <16 x i16>*
  %6431 = load <16 x i16>, <16 x i16>* %6430, align 2, !tbaa !399
  %6432 = add nsw i64 %6240, %6410
  %6433 = getelementptr inbounds i16, i16* %blur_x, i64 %6432
  %6434 = bitcast i16* %6433 to <16 x i16>*
  %6435 = load <16 x i16>, <16 x i16>* %6434, align 2, !tbaa !399
  %6436 = getelementptr inbounds i16, i16* %6433, i64 16
  %6437 = bitcast i16* %6436 to <16 x i16>*
  %6438 = load <16 x i16>, <16 x i16>* %6437, align 2, !tbaa !399
  %6439 = add nsw i64 %6243, %6410
  %6440 = getelementptr inbounds i16, i16* %blur_x, i64 %6439
  %6441 = bitcast i16* %6440 to <16 x i16>*
  %6442 = load <16 x i16>, <16 x i16>* %6441, align 2, !tbaa !399
  %6443 = getelementptr inbounds i16, i16* %6440, i64 16
  %6444 = bitcast i16* %6443 to <16 x i16>*
  %6445 = load <16 x i16>, <16 x i16>* %6444, align 2, !tbaa !399
  %6446 = add <16 x i16> %6421, %6414
  %6447 = add <16 x i16> %6446, %6428
  %6448 = add <16 x i16> %6447, %6435
  %6449 = add <16 x i16> %6448, %6442
  %6450 = add <16 x i16> %6424, %6417
  %6451 = add <16 x i16> %6450, %6431
  %6452 = add <16 x i16> %6451, %6438
  %6453 = add <16 x i16> %6452, %6445
  %6454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6449, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6453, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6456 = shufflevector <16 x i16> %6454, <16 x i16> %6455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6457 = lshr <32 x i16> %6456, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6458 = shufflevector <32 x i16> %6457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6459 = add nsw i64 %6247, %6410
  %6460 = getelementptr inbounds i16, i16* %66, i64 %6459
  %6461 = bitcast i16* %6460 to <16 x i16>*
  store <16 x i16> %6458, <16 x i16>* %6461, align 2, !tbaa !401
  %6462 = shufflevector <32 x i16> %6457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6463 = getelementptr inbounds i16, i16* %6460, i64 16
  %6464 = bitcast i16* %6463 to <16 x i16>*
  store <16 x i16> %6462, <16 x i16>* %6464, align 2, !tbaa !401
  %6465 = add nuw nsw i32 %blur_y.s0.x.x.rebased326, 1
  %.not2736 = icmp eq i32 %6465, %t1683
  br i1 %.not2736, label %"end for blur_y.s0.x.x.rebased325", label %"for blur_y.s0.x.x.rebased324"

after_bb333:                                      ; preds = %"end for blur_y.s0.x.x.rebased325", %"produce blur_x336"
  br i1 %100, label %"for blur_y.s0.x.x.rebased338.preheader", label %"end for blur_y.s0.x.x.rebased339", !prof !386

"for blur_y.s0.x.x.rebased338.preheader":         ; preds = %after_bb333
  %6466 = sext i32 %t1754 to i64
  %6467 = zext i32 %.pre-phi3492 to i64
  %6468 = mul nsw i64 %6467, %112
  %6469 = sub nsw i64 %6468, %96
  %6470 = zext i32 %.pre-phi3488 to i64
  %6471 = mul nsw i64 %6470, %112
  %6472 = sub nsw i64 %6471, %96
  %6473 = zext i32 %.pre-phi3498 to i64
  %6474 = mul nsw i64 %6473, %112
  %6475 = sub nsw i64 %6474, %96
  %6476 = zext i32 %.pre-phi3510 to i64
  %6477 = mul nsw i64 %6476, %112
  %6478 = sub nsw i64 %6477, %96
  %6479 = zext i32 %.pre-phi3504 to i64
  %6480 = mul nsw i64 %6479, %112
  %6481 = sub nsw i64 %6480, %96
  %6482 = sext i32 %a26 to i64
  %6483 = add nsw i64 %6482, 11
  %6484 = mul nsw i64 %6483, %113
  %6485 = add nsw i64 %6484, %116
  br label %"for blur_y.s0.x.x.rebased338"

"produce blur_x336":                              ; preds = %"end for blur_y.s0.x.x.rebased325"
  %6486 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %6487 = getelementptr inbounds i16, i16* %6486, i64 -31
  %6488 = bitcast i16* %6487 to <16 x i16>*
  %6489 = load <16 x i16>, <16 x i16>* %6488, align 2, !tbaa !396
  %6490 = getelementptr inbounds i16, i16* %6486, i64 -15
  %6491 = bitcast i16* %6490 to <16 x i16>*
  %6492 = load <16 x i16>, <16 x i16>* %6491, align 2, !tbaa !396
  %6493 = getelementptr inbounds i16, i16* %6486, i64 -32
  %6494 = bitcast i16* %6493 to <16 x i16>*
  %6495 = load <16 x i16>, <16 x i16>* %6494, align 2, !tbaa !396
  %6496 = getelementptr inbounds i16, i16* %6486, i64 -16
  %6497 = bitcast i16* %6496 to <16 x i16>*
  %6498 = load <16 x i16>, <16 x i16>* %6497, align 2, !tbaa !396
  %6499 = getelementptr inbounds i16, i16* %6486, i64 -30
  %6500 = bitcast i16* %6499 to <16 x i16>*
  %6501 = load <16 x i16>, <16 x i16>* %6500, align 2, !tbaa !396
  %6502 = getelementptr inbounds i16, i16* %6486, i64 -14
  %6503 = bitcast i16* %6502 to <16 x i16>*
  %6504 = load <16 x i16>, <16 x i16>* %6503, align 2, !tbaa !396
  %6505 = getelementptr inbounds i16, i16* %6486, i64 -28
  %6506 = bitcast i16* %6505 to <16 x i16>*
  %6507 = load <16 x i16>, <16 x i16>* %6506, align 2, !tbaa !396
  %6508 = getelementptr inbounds i16, i16* %6486, i64 -12
  %6509 = bitcast i16* %6508 to <16 x i16>*
  %6510 = load <16 x i16>, <16 x i16>* %6509, align 2, !tbaa !396
  %6511 = getelementptr inbounds i16, i16* %6486, i64 -29
  %6512 = bitcast i16* %6511 to <16 x i16>*
  %6513 = load <16 x i16>, <16 x i16>* %6512, align 2, !tbaa !396
  %6514 = getelementptr inbounds i16, i16* %6486, i64 -13
  %6515 = bitcast i16* %6514 to <16 x i16>*
  %6516 = load <16 x i16>, <16 x i16>* %6515, align 2, !tbaa !396
  %6517 = add <16 x i16> %6495, %6489
  %6518 = add <16 x i16> %6517, %6501
  %6519 = add <16 x i16> %6518, %6507
  %6520 = add <16 x i16> %6519, %6513
  %6521 = add <16 x i16> %6498, %6492
  %6522 = add <16 x i16> %6521, %6504
  %6523 = add <16 x i16> %6522, %6510
  %6524 = add <16 x i16> %6523, %6516
  %6525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6520, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6524, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6527 = shufflevector <16 x i16> %6525, <16 x i16> %6526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6528 = lshr <32 x i16> %6527, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6529 = shufflevector <32 x i16> %6528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6530 = zext i32 %.pre-phi3510 to i64
  %6531 = mul nsw i64 %97, %6530
  %6532 = add nsw i64 %99, %6531
  %6533 = getelementptr inbounds i16, i16* %blur_x, i64 %6532
  %6534 = getelementptr inbounds i16, i16* %6533, i64 -32
  %6535 = bitcast i16* %6534 to <16 x i16>*
  store <16 x i16> %6529, <16 x i16>* %6535, align 2, !tbaa !399
  %6536 = shufflevector <32 x i16> %6528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6537 = getelementptr inbounds i16, i16* %6533, i64 -16
  %6538 = bitcast i16* %6537 to <16 x i16>*
  store <16 x i16> %6536, <16 x i16>* %6538, align 2, !tbaa !399
  %6539 = zext i32 %.pre-phi3492 to i64
  %6540 = mul nsw i64 %6539, %112
  %6541 = add nsw i64 %6540, %94
  %6542 = getelementptr inbounds i16, i16* %blur_x, i64 %6541
  %6543 = getelementptr inbounds i16, i16* %6542, i64 -32
  %6544 = bitcast i16* %6543 to <16 x i16>*
  %6545 = load <16 x i16>, <16 x i16>* %6544, align 2, !tbaa !399
  %6546 = getelementptr inbounds i16, i16* %6542, i64 -16
  %6547 = bitcast i16* %6546 to <16 x i16>*
  %6548 = load <16 x i16>, <16 x i16>* %6547, align 2, !tbaa !399
  %6549 = zext i32 %.pre-phi3488 to i64
  %6550 = mul nsw i64 %6549, %112
  %6551 = add nsw i64 %6550, %94
  %6552 = getelementptr inbounds i16, i16* %blur_x, i64 %6551
  %6553 = getelementptr inbounds i16, i16* %6552, i64 -32
  %6554 = bitcast i16* %6553 to <16 x i16>*
  %6555 = load <16 x i16>, <16 x i16>* %6554, align 2, !tbaa !399
  %6556 = getelementptr inbounds i16, i16* %6552, i64 -16
  %6557 = bitcast i16* %6556 to <16 x i16>*
  %6558 = load <16 x i16>, <16 x i16>* %6557, align 2, !tbaa !399
  %6559 = zext i32 %.pre-phi3498 to i64
  %6560 = mul nsw i64 %6559, %112
  %6561 = add nsw i64 %6560, %94
  %6562 = getelementptr inbounds i16, i16* %blur_x, i64 %6561
  %6563 = getelementptr inbounds i16, i16* %6562, i64 -32
  %6564 = bitcast i16* %6563 to <16 x i16>*
  %6565 = load <16 x i16>, <16 x i16>* %6564, align 2, !tbaa !399
  %6566 = getelementptr inbounds i16, i16* %6562, i64 -16
  %6567 = bitcast i16* %6566 to <16 x i16>*
  %6568 = load <16 x i16>, <16 x i16>* %6567, align 2, !tbaa !399
  %6569 = mul nsw i64 %6530, %112
  %6570 = add nsw i64 %6569, %94
  %6571 = getelementptr inbounds i16, i16* %blur_x, i64 %6570
  %6572 = getelementptr inbounds i16, i16* %6571, i64 -32
  %6573 = bitcast i16* %6572 to <16 x i16>*
  %6574 = load <16 x i16>, <16 x i16>* %6573, align 2, !tbaa !399
  %6575 = getelementptr inbounds i16, i16* %6571, i64 -16
  %6576 = bitcast i16* %6575 to <16 x i16>*
  %6577 = load <16 x i16>, <16 x i16>* %6576, align 2, !tbaa !399
  %6578 = zext i32 %.pre-phi3504 to i64
  %6579 = mul nsw i64 %6578, %112
  %6580 = add nsw i64 %6579, %94
  %6581 = getelementptr inbounds i16, i16* %blur_x, i64 %6580
  %6582 = getelementptr inbounds i16, i16* %6581, i64 -32
  %6583 = bitcast i16* %6582 to <16 x i16>*
  %6584 = load <16 x i16>, <16 x i16>* %6583, align 2, !tbaa !399
  %6585 = getelementptr inbounds i16, i16* %6581, i64 -16
  %6586 = bitcast i16* %6585 to <16 x i16>*
  %6587 = load <16 x i16>, <16 x i16>* %6586, align 2, !tbaa !399
  %6588 = add <16 x i16> %6555, %6545
  %6589 = add <16 x i16> %6588, %6565
  %6590 = add <16 x i16> %6589, %6574
  %6591 = add <16 x i16> %6590, %6584
  %6592 = add <16 x i16> %6558, %6548
  %6593 = add <16 x i16> %6592, %6568
  %6594 = add <16 x i16> %6593, %6577
  %6595 = add <16 x i16> %6594, %6587
  %6596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6591, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6595, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6598 = shufflevector <16 x i16> %6596, <16 x i16> %6597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6599 = lshr <32 x i16> %6598, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6600 = shufflevector <32 x i16> %6599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6601 = sext i32 %a26 to i64
  %6602 = add nsw i64 %6601, 11
  %6603 = mul nsw i64 %6602, %113
  %6604 = add nsw i64 %115, %6603
  %6605 = getelementptr inbounds i16, i16* %66, i64 %6604
  %6606 = getelementptr inbounds i16, i16* %6605, i64 -32
  %6607 = bitcast i16* %6606 to <16 x i16>*
  store <16 x i16> %6600, <16 x i16>* %6607, align 2, !tbaa !401
  %6608 = shufflevector <32 x i16> %6599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6609 = getelementptr inbounds i16, i16* %6605, i64 -16
  %6610 = bitcast i16* %6609 to <16 x i16>*
  store <16 x i16> %6608, <16 x i16>* %6610, align 2, !tbaa !401
  br label %after_bb333

"for blur_y.s0.x.x.rebased338":                   ; preds = %"for blur_y.s0.x.x.rebased338.preheader", %"consume blur_x345"
  %indvars.iv3292 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased338.preheader" ], [ %indvars.iv.next3293, %"consume blur_x345" ]
  %6611 = add nsw i64 %indvars.iv3292, %101
  %6612 = icmp slt i64 %6611, 1
  %6613 = trunc i64 %6611 to i32
  %6614 = shl nsw i32 %6613, 5
  %6615 = icmp sgt i32 %4, %6614
  %6616 = or i1 %6612, %6615
  br i1 %6616, label %"produce blur_x344", label %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge"

"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased338"
  %.pre3527 = shl nsw i64 %6611, 5
  br label %"consume blur_x345"

"end for blur_y.s0.x.x.rebased339":               ; preds = %"consume blur_x345", %after_bb333
  br i1 %102, label %"for blur_y.s0.x.x.rebased346.preheader", label %"end for blur_y.s0.x.x.rebased347", !prof !386

"for blur_y.s0.x.x.rebased346.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased339"
  %6617 = sext i32 %t1754 to i64
  %6618 = zext i32 %.pre-phi3492 to i64
  %6619 = mul nsw i64 %6618, %112
  %6620 = sub nsw i64 %6619, %96
  %6621 = zext i32 %.pre-phi3488 to i64
  %6622 = mul nsw i64 %6621, %112
  %6623 = sub nsw i64 %6622, %96
  %6624 = zext i32 %.pre-phi3498 to i64
  %6625 = mul nsw i64 %6624, %112
  %6626 = sub nsw i64 %6625, %96
  %6627 = zext i32 %.pre-phi3510 to i64
  %6628 = mul nsw i64 %6627, %112
  %6629 = sub nsw i64 %6628, %96
  %6630 = zext i32 %.pre-phi3504 to i64
  %6631 = mul nsw i64 %6630, %112
  %6632 = sub nsw i64 %6631, %96
  %6633 = sext i32 %a26 to i64
  %6634 = add nsw i64 %6633, 11
  %6635 = mul nsw i64 %6634, %113
  %6636 = add nsw i64 %6635, %116
  br label %"for blur_y.s0.x.x.rebased346"

"produce blur_x344":                              ; preds = %"for blur_y.s0.x.x.rebased338"
  %t888 = add nsw i32 %6614, %t1881
  %6637 = sext i32 %t888 to i64
  %6638 = getelementptr inbounds i16, i16* %read_input, i64 %6637
  %6639 = getelementptr inbounds i16, i16* %6638, i64 1
  %6640 = bitcast i16* %6639 to <16 x i16>*
  %6641 = load <16 x i16>, <16 x i16>* %6640, align 2, !tbaa !396
  %6642 = getelementptr inbounds i16, i16* %6638, i64 17
  %6643 = bitcast i16* %6642 to <16 x i16>*
  %6644 = load <16 x i16>, <16 x i16>* %6643, align 2, !tbaa !396
  %6645 = bitcast i16* %6638 to <16 x i16>*
  %6646 = load <16 x i16>, <16 x i16>* %6645, align 2, !tbaa !396
  %6647 = getelementptr inbounds i16, i16* %6638, i64 16
  %6648 = bitcast i16* %6647 to <16 x i16>*
  %6649 = load <16 x i16>, <16 x i16>* %6648, align 2, !tbaa !396
  %6650 = getelementptr inbounds i16, i16* %6638, i64 2
  %6651 = bitcast i16* %6650 to <16 x i16>*
  %6652 = load <16 x i16>, <16 x i16>* %6651, align 2, !tbaa !396
  %6653 = getelementptr inbounds i16, i16* %6638, i64 18
  %6654 = bitcast i16* %6653 to <16 x i16>*
  %6655 = load <16 x i16>, <16 x i16>* %6654, align 2, !tbaa !396
  %6656 = getelementptr inbounds i16, i16* %6638, i64 4
  %6657 = bitcast i16* %6656 to <16 x i16>*
  %6658 = load <16 x i16>, <16 x i16>* %6657, align 2, !tbaa !396
  %6659 = getelementptr inbounds i16, i16* %6638, i64 20
  %6660 = bitcast i16* %6659 to <16 x i16>*
  %6661 = load <16 x i16>, <16 x i16>* %6660, align 2, !tbaa !396
  %6662 = getelementptr inbounds i16, i16* %6638, i64 3
  %6663 = bitcast i16* %6662 to <16 x i16>*
  %6664 = load <16 x i16>, <16 x i16>* %6663, align 2, !tbaa !396
  %6665 = getelementptr inbounds i16, i16* %6638, i64 19
  %6666 = bitcast i16* %6665 to <16 x i16>*
  %6667 = load <16 x i16>, <16 x i16>* %6666, align 2, !tbaa !396
  %6668 = add <16 x i16> %6646, %6641
  %6669 = add <16 x i16> %6668, %6652
  %6670 = add <16 x i16> %6669, %6658
  %6671 = add <16 x i16> %6670, %6664
  %6672 = add <16 x i16> %6649, %6644
  %6673 = add <16 x i16> %6672, %6655
  %6674 = add <16 x i16> %6673, %6661
  %6675 = add <16 x i16> %6674, %6667
  %6676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6671, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6675, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6678 = shufflevector <16 x i16> %6676, <16 x i16> %6677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6679 = lshr <32 x i16> %6678, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6680 = shufflevector <32 x i16> %6679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6681 = shl nsw i64 %6611, 5
  %6682 = add nsw i64 %6681, %6466
  %6683 = getelementptr inbounds i16, i16* %blur_x, i64 %6682
  %6684 = bitcast i16* %6683 to <16 x i16>*
  store <16 x i16> %6680, <16 x i16>* %6684, align 2, !tbaa !399
  %6685 = shufflevector <32 x i16> %6679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6686 = getelementptr inbounds i16, i16* %6683, i64 16
  %6687 = bitcast i16* %6686 to <16 x i16>*
  store <16 x i16> %6685, <16 x i16>* %6687, align 2, !tbaa !399
  br label %"consume blur_x345"

"consume blur_x345":                              ; preds = %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge", %"produce blur_x344"
  %.pre-phi3528 = phi i64 [ %.pre3527, %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge" ], [ %6681, %"produce blur_x344" ]
  %6688 = add nsw i64 %6469, %.pre-phi3528
  %6689 = getelementptr inbounds i16, i16* %blur_x, i64 %6688
  %6690 = bitcast i16* %6689 to <16 x i16>*
  %6691 = load <16 x i16>, <16 x i16>* %6690, align 2, !tbaa !399
  %6692 = getelementptr inbounds i16, i16* %6689, i64 16
  %6693 = bitcast i16* %6692 to <16 x i16>*
  %6694 = load <16 x i16>, <16 x i16>* %6693, align 2, !tbaa !399
  %6695 = add nsw i64 %6472, %.pre-phi3528
  %6696 = getelementptr inbounds i16, i16* %blur_x, i64 %6695
  %6697 = bitcast i16* %6696 to <16 x i16>*
  %6698 = load <16 x i16>, <16 x i16>* %6697, align 2, !tbaa !399
  %6699 = getelementptr inbounds i16, i16* %6696, i64 16
  %6700 = bitcast i16* %6699 to <16 x i16>*
  %6701 = load <16 x i16>, <16 x i16>* %6700, align 2, !tbaa !399
  %6702 = add nsw i64 %6475, %.pre-phi3528
  %6703 = getelementptr inbounds i16, i16* %blur_x, i64 %6702
  %6704 = bitcast i16* %6703 to <16 x i16>*
  %6705 = load <16 x i16>, <16 x i16>* %6704, align 2, !tbaa !399
  %6706 = getelementptr inbounds i16, i16* %6703, i64 16
  %6707 = bitcast i16* %6706 to <16 x i16>*
  %6708 = load <16 x i16>, <16 x i16>* %6707, align 2, !tbaa !399
  %6709 = add nsw i64 %6478, %.pre-phi3528
  %6710 = getelementptr inbounds i16, i16* %blur_x, i64 %6709
  %6711 = bitcast i16* %6710 to <16 x i16>*
  %6712 = load <16 x i16>, <16 x i16>* %6711, align 2, !tbaa !399
  %6713 = getelementptr inbounds i16, i16* %6710, i64 16
  %6714 = bitcast i16* %6713 to <16 x i16>*
  %6715 = load <16 x i16>, <16 x i16>* %6714, align 2, !tbaa !399
  %6716 = add nsw i64 %6481, %.pre-phi3528
  %6717 = getelementptr inbounds i16, i16* %blur_x, i64 %6716
  %6718 = bitcast i16* %6717 to <16 x i16>*
  %6719 = load <16 x i16>, <16 x i16>* %6718, align 2, !tbaa !399
  %6720 = getelementptr inbounds i16, i16* %6717, i64 16
  %6721 = bitcast i16* %6720 to <16 x i16>*
  %6722 = load <16 x i16>, <16 x i16>* %6721, align 2, !tbaa !399
  %6723 = add <16 x i16> %6698, %6691
  %6724 = add <16 x i16> %6723, %6705
  %6725 = add <16 x i16> %6724, %6712
  %6726 = add <16 x i16> %6725, %6719
  %6727 = add <16 x i16> %6701, %6694
  %6728 = add <16 x i16> %6727, %6708
  %6729 = add <16 x i16> %6728, %6715
  %6730 = add <16 x i16> %6729, %6722
  %6731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6726, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6730, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6733 = shufflevector <16 x i16> %6731, <16 x i16> %6732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6734 = lshr <32 x i16> %6733, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6735 = shufflevector <32 x i16> %6734, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6736 = add nsw i64 %6485, %.pre-phi3528
  %6737 = getelementptr inbounds i16, i16* %66, i64 %6736
  %6738 = bitcast i16* %6737 to <16 x i16>*
  store <16 x i16> %6735, <16 x i16>* %6738, align 2, !tbaa !401
  %6739 = shufflevector <32 x i16> %6734, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6740 = getelementptr inbounds i16, i16* %6737, i64 16
  %6741 = bitcast i16* %6740 to <16 x i16>*
  store <16 x i16> %6739, <16 x i16>* %6741, align 2, !tbaa !401
  %indvars.iv.next3293 = add nuw nsw i64 %indvars.iv3292, 1
  %.not2735 = icmp eq i64 %indvars.iv.next3293, %184
  br i1 %.not2735, label %"end for blur_y.s0.x.x.rebased339", label %"for blur_y.s0.x.x.rebased338"

"for blur_y.s0.x.x.rebased346":                   ; preds = %"for blur_y.s0.x.x.rebased346.preheader", %"consume blur_x354"
  %blur_y.s0.x.x.rebased348 = phi i32 [ %6854, %"consume blur_x354" ], [ 0, %"for blur_y.s0.x.x.rebased346.preheader" ]
  %6742 = add nsw i32 %blur_y.s0.x.x.rebased348, %t1626
  %a182 = shl nsw i32 %6742, 5
  %6743 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %6743, i32 %a182, i32 %a14
  %6744 = icmp slt i32 %6742, 1
  %6745 = icmp sgt i32 %4, %a182
  %6746 = or i1 %6744, %6745
  br i1 %6746, label %"produce blur_x352", label %"consume blur_x354"

"end for blur_y.s0.x.x.rebased347":               ; preds = %"consume blur_x354", %"end for blur_y.s0.x.x.rebased339"
  br i1 %34, label %"produce blur_x358", label %after_bb355

"produce blur_x352":                              ; preds = %"for blur_y.s0.x.x.rebased346"
  %6747 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s353 = select i1 %6747, i32 %b188, i32 %4
  %t893 = add nsw i32 %blur_x.s0.x.v1.base.s353, %t1881
  %6748 = sext i32 %t893 to i64
  %6749 = getelementptr inbounds i16, i16* %read_input, i64 %6748
  %6750 = getelementptr inbounds i16, i16* %6749, i64 1
  %6751 = bitcast i16* %6750 to <16 x i16>*
  %6752 = load <16 x i16>, <16 x i16>* %6751, align 2, !tbaa !396
  %6753 = getelementptr inbounds i16, i16* %6749, i64 17
  %6754 = bitcast i16* %6753 to <16 x i16>*
  %6755 = load <16 x i16>, <16 x i16>* %6754, align 2, !tbaa !396
  %6756 = bitcast i16* %6749 to <16 x i16>*
  %6757 = load <16 x i16>, <16 x i16>* %6756, align 2, !tbaa !396
  %6758 = getelementptr inbounds i16, i16* %6749, i64 16
  %6759 = bitcast i16* %6758 to <16 x i16>*
  %6760 = load <16 x i16>, <16 x i16>* %6759, align 2, !tbaa !396
  %6761 = getelementptr inbounds i16, i16* %6749, i64 2
  %6762 = bitcast i16* %6761 to <16 x i16>*
  %6763 = load <16 x i16>, <16 x i16>* %6762, align 2, !tbaa !396
  %6764 = getelementptr inbounds i16, i16* %6749, i64 18
  %6765 = bitcast i16* %6764 to <16 x i16>*
  %6766 = load <16 x i16>, <16 x i16>* %6765, align 2, !tbaa !396
  %6767 = getelementptr inbounds i16, i16* %6749, i64 4
  %6768 = bitcast i16* %6767 to <16 x i16>*
  %6769 = load <16 x i16>, <16 x i16>* %6768, align 2, !tbaa !396
  %6770 = getelementptr inbounds i16, i16* %6749, i64 20
  %6771 = bitcast i16* %6770 to <16 x i16>*
  %6772 = load <16 x i16>, <16 x i16>* %6771, align 2, !tbaa !396
  %6773 = getelementptr inbounds i16, i16* %6749, i64 3
  %6774 = bitcast i16* %6773 to <16 x i16>*
  %6775 = load <16 x i16>, <16 x i16>* %6774, align 2, !tbaa !396
  %6776 = getelementptr inbounds i16, i16* %6749, i64 19
  %6777 = bitcast i16* %6776 to <16 x i16>*
  %6778 = load <16 x i16>, <16 x i16>* %6777, align 2, !tbaa !396
  %6779 = add <16 x i16> %6757, %6752
  %6780 = add <16 x i16> %6779, %6763
  %6781 = add <16 x i16> %6780, %6769
  %6782 = add <16 x i16> %6781, %6775
  %6783 = add <16 x i16> %6760, %6755
  %6784 = add <16 x i16> %6783, %6766
  %6785 = add <16 x i16> %6784, %6772
  %6786 = add <16 x i16> %6785, %6778
  %6787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6782, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6786, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6789 = shufflevector <16 x i16> %6787, <16 x i16> %6788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6790 = lshr <32 x i16> %6789, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6791 = shufflevector <32 x i16> %6790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6792 = sext i32 %blur_x.s0.x.v1.base.s353 to i64
  %6793 = add nsw i64 %6792, %6617
  %6794 = getelementptr inbounds i16, i16* %blur_x, i64 %6793
  %6795 = bitcast i16* %6794 to <16 x i16>*
  store <16 x i16> %6791, <16 x i16>* %6795, align 2, !tbaa !399
  %6796 = shufflevector <32 x i16> %6790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6797 = getelementptr inbounds i16, i16* %6794, i64 16
  %6798 = bitcast i16* %6797 to <16 x i16>*
  store <16 x i16> %6796, <16 x i16>* %6798, align 2, !tbaa !399
  br label %"consume blur_x354"

"consume blur_x354":                              ; preds = %"for blur_y.s0.x.x.rebased346", %"produce blur_x352"
  %6799 = sext i32 %b188 to i64
  %6800 = add nsw i64 %6620, %6799
  %6801 = getelementptr inbounds i16, i16* %blur_x, i64 %6800
  %6802 = bitcast i16* %6801 to <16 x i16>*
  %6803 = load <16 x i16>, <16 x i16>* %6802, align 2, !tbaa !399
  %6804 = getelementptr inbounds i16, i16* %6801, i64 16
  %6805 = bitcast i16* %6804 to <16 x i16>*
  %6806 = load <16 x i16>, <16 x i16>* %6805, align 2, !tbaa !399
  %6807 = add nsw i64 %6623, %6799
  %6808 = getelementptr inbounds i16, i16* %blur_x, i64 %6807
  %6809 = bitcast i16* %6808 to <16 x i16>*
  %6810 = load <16 x i16>, <16 x i16>* %6809, align 2, !tbaa !399
  %6811 = getelementptr inbounds i16, i16* %6808, i64 16
  %6812 = bitcast i16* %6811 to <16 x i16>*
  %6813 = load <16 x i16>, <16 x i16>* %6812, align 2, !tbaa !399
  %6814 = add nsw i64 %6626, %6799
  %6815 = getelementptr inbounds i16, i16* %blur_x, i64 %6814
  %6816 = bitcast i16* %6815 to <16 x i16>*
  %6817 = load <16 x i16>, <16 x i16>* %6816, align 2, !tbaa !399
  %6818 = getelementptr inbounds i16, i16* %6815, i64 16
  %6819 = bitcast i16* %6818 to <16 x i16>*
  %6820 = load <16 x i16>, <16 x i16>* %6819, align 2, !tbaa !399
  %6821 = add nsw i64 %6629, %6799
  %6822 = getelementptr inbounds i16, i16* %blur_x, i64 %6821
  %6823 = bitcast i16* %6822 to <16 x i16>*
  %6824 = load <16 x i16>, <16 x i16>* %6823, align 2, !tbaa !399
  %6825 = getelementptr inbounds i16, i16* %6822, i64 16
  %6826 = bitcast i16* %6825 to <16 x i16>*
  %6827 = load <16 x i16>, <16 x i16>* %6826, align 2, !tbaa !399
  %6828 = add nsw i64 %6632, %6799
  %6829 = getelementptr inbounds i16, i16* %blur_x, i64 %6828
  %6830 = bitcast i16* %6829 to <16 x i16>*
  %6831 = load <16 x i16>, <16 x i16>* %6830, align 2, !tbaa !399
  %6832 = getelementptr inbounds i16, i16* %6829, i64 16
  %6833 = bitcast i16* %6832 to <16 x i16>*
  %6834 = load <16 x i16>, <16 x i16>* %6833, align 2, !tbaa !399
  %6835 = add <16 x i16> %6810, %6803
  %6836 = add <16 x i16> %6835, %6817
  %6837 = add <16 x i16> %6836, %6824
  %6838 = add <16 x i16> %6837, %6831
  %6839 = add <16 x i16> %6813, %6806
  %6840 = add <16 x i16> %6839, %6820
  %6841 = add <16 x i16> %6840, %6827
  %6842 = add <16 x i16> %6841, %6834
  %6843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6838, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6842, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6845 = shufflevector <16 x i16> %6843, <16 x i16> %6844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6846 = lshr <32 x i16> %6845, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6847 = shufflevector <32 x i16> %6846, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6848 = add nsw i64 %6636, %6799
  %6849 = getelementptr inbounds i16, i16* %66, i64 %6848
  %6850 = bitcast i16* %6849 to <16 x i16>*
  store <16 x i16> %6847, <16 x i16>* %6850, align 2, !tbaa !401
  %6851 = shufflevector <32 x i16> %6846, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6852 = getelementptr inbounds i16, i16* %6849, i64 16
  %6853 = bitcast i16* %6852 to <16 x i16>*
  store <16 x i16> %6851, <16 x i16>* %6853, align 2, !tbaa !401
  %6854 = add nuw nsw i32 %blur_y.s0.x.x.rebased348, 1
  %.not2734 = icmp eq i32 %6854, %t1683
  br i1 %.not2734, label %"end for blur_y.s0.x.x.rebased347", label %"for blur_y.s0.x.x.rebased346"

after_bb355:                                      ; preds = %"end for blur_y.s0.x.x.rebased347", %"produce blur_x358"
  br i1 %100, label %"for blur_y.s0.x.x.rebased360.preheader", label %"end for blur_y.s0.x.x.rebased361", !prof !386

"for blur_y.s0.x.x.rebased360.preheader":         ; preds = %after_bb355
  %6855 = sext i32 %t1682 to i64
  %6856 = zext i32 %.pre-phi3498 to i64
  %6857 = mul nsw i64 %6856, %112
  %6858 = sub nsw i64 %6857, %96
  %6859 = zext i32 %.pre-phi3492 to i64
  %6860 = mul nsw i64 %6859, %112
  %6861 = sub nsw i64 %6860, %96
  %6862 = zext i32 %.pre-phi3504 to i64
  %6863 = mul nsw i64 %6862, %112
  %6864 = sub nsw i64 %6863, %96
  %6865 = zext i32 %.pre-phi to i64
  %6866 = mul nsw i64 %6865, %112
  %6867 = sub nsw i64 %6866, %96
  %6868 = zext i32 %.pre-phi3510 to i64
  %6869 = mul nsw i64 %6868, %112
  %6870 = sub nsw i64 %6869, %96
  %6871 = sext i32 %a26 to i64
  %6872 = add nsw i64 %6871, 12
  %6873 = mul nsw i64 %6872, %113
  %6874 = add nsw i64 %6873, %116
  br label %"for blur_y.s0.x.x.rebased360"

"produce blur_x358":                              ; preds = %"end for blur_y.s0.x.x.rebased347"
  %6875 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %6876 = getelementptr inbounds i16, i16* %6875, i64 -31
  %6877 = bitcast i16* %6876 to <16 x i16>*
  %6878 = load <16 x i16>, <16 x i16>* %6877, align 2, !tbaa !396
  %6879 = getelementptr inbounds i16, i16* %6875, i64 -15
  %6880 = bitcast i16* %6879 to <16 x i16>*
  %6881 = load <16 x i16>, <16 x i16>* %6880, align 2, !tbaa !396
  %6882 = getelementptr inbounds i16, i16* %6875, i64 -32
  %6883 = bitcast i16* %6882 to <16 x i16>*
  %6884 = load <16 x i16>, <16 x i16>* %6883, align 2, !tbaa !396
  %6885 = getelementptr inbounds i16, i16* %6875, i64 -16
  %6886 = bitcast i16* %6885 to <16 x i16>*
  %6887 = load <16 x i16>, <16 x i16>* %6886, align 2, !tbaa !396
  %6888 = getelementptr inbounds i16, i16* %6875, i64 -30
  %6889 = bitcast i16* %6888 to <16 x i16>*
  %6890 = load <16 x i16>, <16 x i16>* %6889, align 2, !tbaa !396
  %6891 = getelementptr inbounds i16, i16* %6875, i64 -14
  %6892 = bitcast i16* %6891 to <16 x i16>*
  %6893 = load <16 x i16>, <16 x i16>* %6892, align 2, !tbaa !396
  %6894 = getelementptr inbounds i16, i16* %6875, i64 -28
  %6895 = bitcast i16* %6894 to <16 x i16>*
  %6896 = load <16 x i16>, <16 x i16>* %6895, align 2, !tbaa !396
  %6897 = getelementptr inbounds i16, i16* %6875, i64 -12
  %6898 = bitcast i16* %6897 to <16 x i16>*
  %6899 = load <16 x i16>, <16 x i16>* %6898, align 2, !tbaa !396
  %6900 = getelementptr inbounds i16, i16* %6875, i64 -29
  %6901 = bitcast i16* %6900 to <16 x i16>*
  %6902 = load <16 x i16>, <16 x i16>* %6901, align 2, !tbaa !396
  %6903 = getelementptr inbounds i16, i16* %6875, i64 -13
  %6904 = bitcast i16* %6903 to <16 x i16>*
  %6905 = load <16 x i16>, <16 x i16>* %6904, align 2, !tbaa !396
  %6906 = add <16 x i16> %6884, %6878
  %6907 = add <16 x i16> %6906, %6890
  %6908 = add <16 x i16> %6907, %6896
  %6909 = add <16 x i16> %6908, %6902
  %6910 = add <16 x i16> %6887, %6881
  %6911 = add <16 x i16> %6910, %6893
  %6912 = add <16 x i16> %6911, %6899
  %6913 = add <16 x i16> %6912, %6905
  %6914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6909, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6913, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6916 = shufflevector <16 x i16> %6914, <16 x i16> %6915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6917 = lshr <32 x i16> %6916, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6918 = shufflevector <32 x i16> %6917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6919 = zext i32 %.pre-phi to i64
  %6920 = mul nsw i64 %97, %6919
  %6921 = add nsw i64 %99, %6920
  %6922 = getelementptr inbounds i16, i16* %blur_x, i64 %6921
  %6923 = getelementptr inbounds i16, i16* %6922, i64 -32
  %6924 = bitcast i16* %6923 to <16 x i16>*
  store <16 x i16> %6918, <16 x i16>* %6924, align 2, !tbaa !399
  %6925 = shufflevector <32 x i16> %6917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6926 = getelementptr inbounds i16, i16* %6922, i64 -16
  %6927 = bitcast i16* %6926 to <16 x i16>*
  store <16 x i16> %6925, <16 x i16>* %6927, align 2, !tbaa !399
  %6928 = zext i32 %.pre-phi3498 to i64
  %6929 = mul nsw i64 %6928, %112
  %6930 = add nsw i64 %6929, %94
  %6931 = getelementptr inbounds i16, i16* %blur_x, i64 %6930
  %6932 = getelementptr inbounds i16, i16* %6931, i64 -32
  %6933 = bitcast i16* %6932 to <16 x i16>*
  %6934 = load <16 x i16>, <16 x i16>* %6933, align 2, !tbaa !399
  %6935 = getelementptr inbounds i16, i16* %6931, i64 -16
  %6936 = bitcast i16* %6935 to <16 x i16>*
  %6937 = load <16 x i16>, <16 x i16>* %6936, align 2, !tbaa !399
  %6938 = zext i32 %.pre-phi3492 to i64
  %6939 = mul nsw i64 %6938, %112
  %6940 = add nsw i64 %6939, %94
  %6941 = getelementptr inbounds i16, i16* %blur_x, i64 %6940
  %6942 = getelementptr inbounds i16, i16* %6941, i64 -32
  %6943 = bitcast i16* %6942 to <16 x i16>*
  %6944 = load <16 x i16>, <16 x i16>* %6943, align 2, !tbaa !399
  %6945 = getelementptr inbounds i16, i16* %6941, i64 -16
  %6946 = bitcast i16* %6945 to <16 x i16>*
  %6947 = load <16 x i16>, <16 x i16>* %6946, align 2, !tbaa !399
  %6948 = zext i32 %.pre-phi3504 to i64
  %6949 = mul nsw i64 %6948, %112
  %6950 = add nsw i64 %6949, %94
  %6951 = getelementptr inbounds i16, i16* %blur_x, i64 %6950
  %6952 = getelementptr inbounds i16, i16* %6951, i64 -32
  %6953 = bitcast i16* %6952 to <16 x i16>*
  %6954 = load <16 x i16>, <16 x i16>* %6953, align 2, !tbaa !399
  %6955 = getelementptr inbounds i16, i16* %6951, i64 -16
  %6956 = bitcast i16* %6955 to <16 x i16>*
  %6957 = load <16 x i16>, <16 x i16>* %6956, align 2, !tbaa !399
  %6958 = mul nsw i64 %6919, %112
  %6959 = add nsw i64 %6958, %94
  %6960 = getelementptr inbounds i16, i16* %blur_x, i64 %6959
  %6961 = getelementptr inbounds i16, i16* %6960, i64 -32
  %6962 = bitcast i16* %6961 to <16 x i16>*
  %6963 = load <16 x i16>, <16 x i16>* %6962, align 2, !tbaa !399
  %6964 = getelementptr inbounds i16, i16* %6960, i64 -16
  %6965 = bitcast i16* %6964 to <16 x i16>*
  %6966 = load <16 x i16>, <16 x i16>* %6965, align 2, !tbaa !399
  %6967 = zext i32 %.pre-phi3510 to i64
  %6968 = mul nsw i64 %6967, %112
  %6969 = add nsw i64 %6968, %94
  %6970 = getelementptr inbounds i16, i16* %blur_x, i64 %6969
  %6971 = getelementptr inbounds i16, i16* %6970, i64 -32
  %6972 = bitcast i16* %6971 to <16 x i16>*
  %6973 = load <16 x i16>, <16 x i16>* %6972, align 2, !tbaa !399
  %6974 = getelementptr inbounds i16, i16* %6970, i64 -16
  %6975 = bitcast i16* %6974 to <16 x i16>*
  %6976 = load <16 x i16>, <16 x i16>* %6975, align 2, !tbaa !399
  %6977 = add <16 x i16> %6944, %6934
  %6978 = add <16 x i16> %6977, %6954
  %6979 = add <16 x i16> %6978, %6963
  %6980 = add <16 x i16> %6979, %6973
  %6981 = add <16 x i16> %6947, %6937
  %6982 = add <16 x i16> %6981, %6957
  %6983 = add <16 x i16> %6982, %6966
  %6984 = add <16 x i16> %6983, %6976
  %6985 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6980, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6984, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6987 = shufflevector <16 x i16> %6985, <16 x i16> %6986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6988 = lshr <32 x i16> %6987, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6989 = shufflevector <32 x i16> %6988, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6990 = sext i32 %a26 to i64
  %6991 = add nsw i64 %6990, 12
  %6992 = mul nsw i64 %6991, %113
  %6993 = add nsw i64 %115, %6992
  %6994 = getelementptr inbounds i16, i16* %66, i64 %6993
  %6995 = getelementptr inbounds i16, i16* %6994, i64 -32
  %6996 = bitcast i16* %6995 to <16 x i16>*
  store <16 x i16> %6989, <16 x i16>* %6996, align 2, !tbaa !401
  %6997 = shufflevector <32 x i16> %6988, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6998 = getelementptr inbounds i16, i16* %6994, i64 -16
  %6999 = bitcast i16* %6998 to <16 x i16>*
  store <16 x i16> %6997, <16 x i16>* %6999, align 2, !tbaa !401
  br label %after_bb355

"for blur_y.s0.x.x.rebased360":                   ; preds = %"for blur_y.s0.x.x.rebased360.preheader", %"consume blur_x367"
  %indvars.iv3295 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased360.preheader" ], [ %indvars.iv.next3296, %"consume blur_x367" ]
  %7000 = add nsw i64 %indvars.iv3295, %101
  %7001 = icmp slt i64 %7000, 1
  %7002 = trunc i64 %7000 to i32
  %7003 = shl nsw i32 %7002, 5
  %7004 = icmp sgt i32 %4, %7003
  %7005 = or i1 %7001, %7004
  br i1 %7005, label %"produce blur_x366", label %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge"

"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased360"
  %.pre3529 = shl nsw i64 %7000, 5
  br label %"consume blur_x367"

"end for blur_y.s0.x.x.rebased361":               ; preds = %"consume blur_x367", %after_bb355
  br i1 %102, label %"for blur_y.s0.x.x.rebased368.preheader", label %"end for blur_y.s0.x.x.rebased369", !prof !386

"for blur_y.s0.x.x.rebased368.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased361"
  %7006 = sext i32 %t1682 to i64
  %7007 = zext i32 %.pre-phi3498 to i64
  %7008 = mul nsw i64 %7007, %112
  %7009 = sub nsw i64 %7008, %96
  %7010 = zext i32 %.pre-phi3492 to i64
  %7011 = mul nsw i64 %7010, %112
  %7012 = sub nsw i64 %7011, %96
  %7013 = zext i32 %.pre-phi3504 to i64
  %7014 = mul nsw i64 %7013, %112
  %7015 = sub nsw i64 %7014, %96
  %7016 = zext i32 %.pre-phi to i64
  %7017 = mul nsw i64 %7016, %112
  %7018 = sub nsw i64 %7017, %96
  %7019 = zext i32 %.pre-phi3510 to i64
  %7020 = mul nsw i64 %7019, %112
  %7021 = sub nsw i64 %7020, %96
  %7022 = sext i32 %a26 to i64
  %7023 = add nsw i64 %7022, 12
  %7024 = mul nsw i64 %7023, %113
  %7025 = add nsw i64 %7024, %116
  br label %"for blur_y.s0.x.x.rebased368"

"produce blur_x366":                              ; preds = %"for blur_y.s0.x.x.rebased360"
  %t904 = add nsw i32 %7003, %t1897
  %7026 = sext i32 %t904 to i64
  %7027 = getelementptr inbounds i16, i16* %read_input, i64 %7026
  %7028 = getelementptr inbounds i16, i16* %7027, i64 1
  %7029 = bitcast i16* %7028 to <16 x i16>*
  %7030 = load <16 x i16>, <16 x i16>* %7029, align 2, !tbaa !396
  %7031 = getelementptr inbounds i16, i16* %7027, i64 17
  %7032 = bitcast i16* %7031 to <16 x i16>*
  %7033 = load <16 x i16>, <16 x i16>* %7032, align 2, !tbaa !396
  %7034 = bitcast i16* %7027 to <16 x i16>*
  %7035 = load <16 x i16>, <16 x i16>* %7034, align 2, !tbaa !396
  %7036 = getelementptr inbounds i16, i16* %7027, i64 16
  %7037 = bitcast i16* %7036 to <16 x i16>*
  %7038 = load <16 x i16>, <16 x i16>* %7037, align 2, !tbaa !396
  %7039 = getelementptr inbounds i16, i16* %7027, i64 2
  %7040 = bitcast i16* %7039 to <16 x i16>*
  %7041 = load <16 x i16>, <16 x i16>* %7040, align 2, !tbaa !396
  %7042 = getelementptr inbounds i16, i16* %7027, i64 18
  %7043 = bitcast i16* %7042 to <16 x i16>*
  %7044 = load <16 x i16>, <16 x i16>* %7043, align 2, !tbaa !396
  %7045 = getelementptr inbounds i16, i16* %7027, i64 4
  %7046 = bitcast i16* %7045 to <16 x i16>*
  %7047 = load <16 x i16>, <16 x i16>* %7046, align 2, !tbaa !396
  %7048 = getelementptr inbounds i16, i16* %7027, i64 20
  %7049 = bitcast i16* %7048 to <16 x i16>*
  %7050 = load <16 x i16>, <16 x i16>* %7049, align 2, !tbaa !396
  %7051 = getelementptr inbounds i16, i16* %7027, i64 3
  %7052 = bitcast i16* %7051 to <16 x i16>*
  %7053 = load <16 x i16>, <16 x i16>* %7052, align 2, !tbaa !396
  %7054 = getelementptr inbounds i16, i16* %7027, i64 19
  %7055 = bitcast i16* %7054 to <16 x i16>*
  %7056 = load <16 x i16>, <16 x i16>* %7055, align 2, !tbaa !396
  %7057 = add <16 x i16> %7035, %7030
  %7058 = add <16 x i16> %7057, %7041
  %7059 = add <16 x i16> %7058, %7047
  %7060 = add <16 x i16> %7059, %7053
  %7061 = add <16 x i16> %7038, %7033
  %7062 = add <16 x i16> %7061, %7044
  %7063 = add <16 x i16> %7062, %7050
  %7064 = add <16 x i16> %7063, %7056
  %7065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7060, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7064, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7067 = shufflevector <16 x i16> %7065, <16 x i16> %7066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7068 = lshr <32 x i16> %7067, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7069 = shufflevector <32 x i16> %7068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7070 = shl nsw i64 %7000, 5
  %7071 = add nsw i64 %7070, %6855
  %7072 = getelementptr inbounds i16, i16* %blur_x, i64 %7071
  %7073 = bitcast i16* %7072 to <16 x i16>*
  store <16 x i16> %7069, <16 x i16>* %7073, align 2, !tbaa !399
  %7074 = shufflevector <32 x i16> %7068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7075 = getelementptr inbounds i16, i16* %7072, i64 16
  %7076 = bitcast i16* %7075 to <16 x i16>*
  store <16 x i16> %7074, <16 x i16>* %7076, align 2, !tbaa !399
  br label %"consume blur_x367"

"consume blur_x367":                              ; preds = %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge", %"produce blur_x366"
  %.pre-phi3530 = phi i64 [ %.pre3529, %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge" ], [ %7070, %"produce blur_x366" ]
  %7077 = add nsw i64 %6858, %.pre-phi3530
  %7078 = getelementptr inbounds i16, i16* %blur_x, i64 %7077
  %7079 = bitcast i16* %7078 to <16 x i16>*
  %7080 = load <16 x i16>, <16 x i16>* %7079, align 2, !tbaa !399
  %7081 = getelementptr inbounds i16, i16* %7078, i64 16
  %7082 = bitcast i16* %7081 to <16 x i16>*
  %7083 = load <16 x i16>, <16 x i16>* %7082, align 2, !tbaa !399
  %7084 = add nsw i64 %6861, %.pre-phi3530
  %7085 = getelementptr inbounds i16, i16* %blur_x, i64 %7084
  %7086 = bitcast i16* %7085 to <16 x i16>*
  %7087 = load <16 x i16>, <16 x i16>* %7086, align 2, !tbaa !399
  %7088 = getelementptr inbounds i16, i16* %7085, i64 16
  %7089 = bitcast i16* %7088 to <16 x i16>*
  %7090 = load <16 x i16>, <16 x i16>* %7089, align 2, !tbaa !399
  %7091 = add nsw i64 %6864, %.pre-phi3530
  %7092 = getelementptr inbounds i16, i16* %blur_x, i64 %7091
  %7093 = bitcast i16* %7092 to <16 x i16>*
  %7094 = load <16 x i16>, <16 x i16>* %7093, align 2, !tbaa !399
  %7095 = getelementptr inbounds i16, i16* %7092, i64 16
  %7096 = bitcast i16* %7095 to <16 x i16>*
  %7097 = load <16 x i16>, <16 x i16>* %7096, align 2, !tbaa !399
  %7098 = add nsw i64 %6867, %.pre-phi3530
  %7099 = getelementptr inbounds i16, i16* %blur_x, i64 %7098
  %7100 = bitcast i16* %7099 to <16 x i16>*
  %7101 = load <16 x i16>, <16 x i16>* %7100, align 2, !tbaa !399
  %7102 = getelementptr inbounds i16, i16* %7099, i64 16
  %7103 = bitcast i16* %7102 to <16 x i16>*
  %7104 = load <16 x i16>, <16 x i16>* %7103, align 2, !tbaa !399
  %7105 = add nsw i64 %6870, %.pre-phi3530
  %7106 = getelementptr inbounds i16, i16* %blur_x, i64 %7105
  %7107 = bitcast i16* %7106 to <16 x i16>*
  %7108 = load <16 x i16>, <16 x i16>* %7107, align 2, !tbaa !399
  %7109 = getelementptr inbounds i16, i16* %7106, i64 16
  %7110 = bitcast i16* %7109 to <16 x i16>*
  %7111 = load <16 x i16>, <16 x i16>* %7110, align 2, !tbaa !399
  %7112 = add <16 x i16> %7087, %7080
  %7113 = add <16 x i16> %7112, %7094
  %7114 = add <16 x i16> %7113, %7101
  %7115 = add <16 x i16> %7114, %7108
  %7116 = add <16 x i16> %7090, %7083
  %7117 = add <16 x i16> %7116, %7097
  %7118 = add <16 x i16> %7117, %7104
  %7119 = add <16 x i16> %7118, %7111
  %7120 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7115, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7119, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7122 = shufflevector <16 x i16> %7120, <16 x i16> %7121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7123 = lshr <32 x i16> %7122, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7124 = shufflevector <32 x i16> %7123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7125 = add nsw i64 %6874, %.pre-phi3530
  %7126 = getelementptr inbounds i16, i16* %66, i64 %7125
  %7127 = bitcast i16* %7126 to <16 x i16>*
  store <16 x i16> %7124, <16 x i16>* %7127, align 2, !tbaa !401
  %7128 = shufflevector <32 x i16> %7123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7129 = getelementptr inbounds i16, i16* %7126, i64 16
  %7130 = bitcast i16* %7129 to <16 x i16>*
  store <16 x i16> %7128, <16 x i16>* %7130, align 2, !tbaa !401
  %indvars.iv.next3296 = add nuw nsw i64 %indvars.iv3295, 1
  %.not2733 = icmp eq i64 %indvars.iv.next3296, %184
  br i1 %.not2733, label %"end for blur_y.s0.x.x.rebased361", label %"for blur_y.s0.x.x.rebased360"

"for blur_y.s0.x.x.rebased368":                   ; preds = %"for blur_y.s0.x.x.rebased368.preheader", %"consume blur_x376"
  %blur_y.s0.x.x.rebased370 = phi i32 [ %7243, %"consume blur_x376" ], [ 0, %"for blur_y.s0.x.x.rebased368.preheader" ]
  %7131 = add nsw i32 %blur_y.s0.x.x.rebased370, %t1626
  %a189 = shl nsw i32 %7131, 5
  %7132 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %7132, i32 %a189, i32 %a14
  %7133 = icmp slt i32 %7131, 1
  %7134 = icmp sgt i32 %4, %a189
  %7135 = or i1 %7133, %7134
  br i1 %7135, label %"produce blur_x374", label %"consume blur_x376"

"end for blur_y.s0.x.x.rebased369":               ; preds = %"consume blur_x376", %"end for blur_y.s0.x.x.rebased361"
  br i1 %34, label %"produce blur_x380", label %after_bb377

"produce blur_x374":                              ; preds = %"for blur_y.s0.x.x.rebased368"
  %7136 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s375 = select i1 %7136, i32 %b195, i32 %4
  %t909 = add nsw i32 %blur_x.s0.x.v1.base.s375, %t1897
  %7137 = sext i32 %t909 to i64
  %7138 = getelementptr inbounds i16, i16* %read_input, i64 %7137
  %7139 = getelementptr inbounds i16, i16* %7138, i64 1
  %7140 = bitcast i16* %7139 to <16 x i16>*
  %7141 = load <16 x i16>, <16 x i16>* %7140, align 2, !tbaa !396
  %7142 = getelementptr inbounds i16, i16* %7138, i64 17
  %7143 = bitcast i16* %7142 to <16 x i16>*
  %7144 = load <16 x i16>, <16 x i16>* %7143, align 2, !tbaa !396
  %7145 = bitcast i16* %7138 to <16 x i16>*
  %7146 = load <16 x i16>, <16 x i16>* %7145, align 2, !tbaa !396
  %7147 = getelementptr inbounds i16, i16* %7138, i64 16
  %7148 = bitcast i16* %7147 to <16 x i16>*
  %7149 = load <16 x i16>, <16 x i16>* %7148, align 2, !tbaa !396
  %7150 = getelementptr inbounds i16, i16* %7138, i64 2
  %7151 = bitcast i16* %7150 to <16 x i16>*
  %7152 = load <16 x i16>, <16 x i16>* %7151, align 2, !tbaa !396
  %7153 = getelementptr inbounds i16, i16* %7138, i64 18
  %7154 = bitcast i16* %7153 to <16 x i16>*
  %7155 = load <16 x i16>, <16 x i16>* %7154, align 2, !tbaa !396
  %7156 = getelementptr inbounds i16, i16* %7138, i64 4
  %7157 = bitcast i16* %7156 to <16 x i16>*
  %7158 = load <16 x i16>, <16 x i16>* %7157, align 2, !tbaa !396
  %7159 = getelementptr inbounds i16, i16* %7138, i64 20
  %7160 = bitcast i16* %7159 to <16 x i16>*
  %7161 = load <16 x i16>, <16 x i16>* %7160, align 2, !tbaa !396
  %7162 = getelementptr inbounds i16, i16* %7138, i64 3
  %7163 = bitcast i16* %7162 to <16 x i16>*
  %7164 = load <16 x i16>, <16 x i16>* %7163, align 2, !tbaa !396
  %7165 = getelementptr inbounds i16, i16* %7138, i64 19
  %7166 = bitcast i16* %7165 to <16 x i16>*
  %7167 = load <16 x i16>, <16 x i16>* %7166, align 2, !tbaa !396
  %7168 = add <16 x i16> %7146, %7141
  %7169 = add <16 x i16> %7168, %7152
  %7170 = add <16 x i16> %7169, %7158
  %7171 = add <16 x i16> %7170, %7164
  %7172 = add <16 x i16> %7149, %7144
  %7173 = add <16 x i16> %7172, %7155
  %7174 = add <16 x i16> %7173, %7161
  %7175 = add <16 x i16> %7174, %7167
  %7176 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7171, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7175, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7178 = shufflevector <16 x i16> %7176, <16 x i16> %7177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7179 = lshr <32 x i16> %7178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7180 = shufflevector <32 x i16> %7179, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7181 = sext i32 %blur_x.s0.x.v1.base.s375 to i64
  %7182 = add nsw i64 %7181, %7006
  %7183 = getelementptr inbounds i16, i16* %blur_x, i64 %7182
  %7184 = bitcast i16* %7183 to <16 x i16>*
  store <16 x i16> %7180, <16 x i16>* %7184, align 2, !tbaa !399
  %7185 = shufflevector <32 x i16> %7179, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7186 = getelementptr inbounds i16, i16* %7183, i64 16
  %7187 = bitcast i16* %7186 to <16 x i16>*
  store <16 x i16> %7185, <16 x i16>* %7187, align 2, !tbaa !399
  br label %"consume blur_x376"

"consume blur_x376":                              ; preds = %"for blur_y.s0.x.x.rebased368", %"produce blur_x374"
  %7188 = sext i32 %b195 to i64
  %7189 = add nsw i64 %7009, %7188
  %7190 = getelementptr inbounds i16, i16* %blur_x, i64 %7189
  %7191 = bitcast i16* %7190 to <16 x i16>*
  %7192 = load <16 x i16>, <16 x i16>* %7191, align 2, !tbaa !399
  %7193 = getelementptr inbounds i16, i16* %7190, i64 16
  %7194 = bitcast i16* %7193 to <16 x i16>*
  %7195 = load <16 x i16>, <16 x i16>* %7194, align 2, !tbaa !399
  %7196 = add nsw i64 %7012, %7188
  %7197 = getelementptr inbounds i16, i16* %blur_x, i64 %7196
  %7198 = bitcast i16* %7197 to <16 x i16>*
  %7199 = load <16 x i16>, <16 x i16>* %7198, align 2, !tbaa !399
  %7200 = getelementptr inbounds i16, i16* %7197, i64 16
  %7201 = bitcast i16* %7200 to <16 x i16>*
  %7202 = load <16 x i16>, <16 x i16>* %7201, align 2, !tbaa !399
  %7203 = add nsw i64 %7015, %7188
  %7204 = getelementptr inbounds i16, i16* %blur_x, i64 %7203
  %7205 = bitcast i16* %7204 to <16 x i16>*
  %7206 = load <16 x i16>, <16 x i16>* %7205, align 2, !tbaa !399
  %7207 = getelementptr inbounds i16, i16* %7204, i64 16
  %7208 = bitcast i16* %7207 to <16 x i16>*
  %7209 = load <16 x i16>, <16 x i16>* %7208, align 2, !tbaa !399
  %7210 = add nsw i64 %7018, %7188
  %7211 = getelementptr inbounds i16, i16* %blur_x, i64 %7210
  %7212 = bitcast i16* %7211 to <16 x i16>*
  %7213 = load <16 x i16>, <16 x i16>* %7212, align 2, !tbaa !399
  %7214 = getelementptr inbounds i16, i16* %7211, i64 16
  %7215 = bitcast i16* %7214 to <16 x i16>*
  %7216 = load <16 x i16>, <16 x i16>* %7215, align 2, !tbaa !399
  %7217 = add nsw i64 %7021, %7188
  %7218 = getelementptr inbounds i16, i16* %blur_x, i64 %7217
  %7219 = bitcast i16* %7218 to <16 x i16>*
  %7220 = load <16 x i16>, <16 x i16>* %7219, align 2, !tbaa !399
  %7221 = getelementptr inbounds i16, i16* %7218, i64 16
  %7222 = bitcast i16* %7221 to <16 x i16>*
  %7223 = load <16 x i16>, <16 x i16>* %7222, align 2, !tbaa !399
  %7224 = add <16 x i16> %7199, %7192
  %7225 = add <16 x i16> %7224, %7206
  %7226 = add <16 x i16> %7225, %7213
  %7227 = add <16 x i16> %7226, %7220
  %7228 = add <16 x i16> %7202, %7195
  %7229 = add <16 x i16> %7228, %7209
  %7230 = add <16 x i16> %7229, %7216
  %7231 = add <16 x i16> %7230, %7223
  %7232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7227, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7231, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7234 = shufflevector <16 x i16> %7232, <16 x i16> %7233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7235 = lshr <32 x i16> %7234, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7236 = shufflevector <32 x i16> %7235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7237 = add nsw i64 %7025, %7188
  %7238 = getelementptr inbounds i16, i16* %66, i64 %7237
  %7239 = bitcast i16* %7238 to <16 x i16>*
  store <16 x i16> %7236, <16 x i16>* %7239, align 2, !tbaa !401
  %7240 = shufflevector <32 x i16> %7235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7241 = getelementptr inbounds i16, i16* %7238, i64 16
  %7242 = bitcast i16* %7241 to <16 x i16>*
  store <16 x i16> %7240, <16 x i16>* %7242, align 2, !tbaa !401
  %7243 = add nuw nsw i32 %blur_y.s0.x.x.rebased370, 1
  %.not2732 = icmp eq i32 %7243, %t1683
  br i1 %.not2732, label %"end for blur_y.s0.x.x.rebased369", label %"for blur_y.s0.x.x.rebased368"

after_bb377:                                      ; preds = %"end for blur_y.s0.x.x.rebased369", %"produce blur_x380"
  br i1 %100, label %"for blur_y.s0.x.x.rebased382.preheader", label %"end for blur_y.s0.x.x.rebased383", !prof !386

"for blur_y.s0.x.x.rebased382.preheader":         ; preds = %after_bb377
  %7244 = sext i32 %t1688 to i64
  %7245 = zext i32 %.pre-phi3504 to i64
  %7246 = mul nsw i64 %7245, %112
  %7247 = sub nsw i64 %7246, %96
  %7248 = zext i32 %.pre-phi3498 to i64
  %7249 = mul nsw i64 %7248, %112
  %7250 = sub nsw i64 %7249, %96
  %7251 = zext i32 %.pre-phi3510 to i64
  %7252 = mul nsw i64 %7251, %112
  %7253 = sub nsw i64 %7252, %96
  %7254 = zext i32 %.pre-phi3480 to i64
  %7255 = mul nsw i64 %7254, %112
  %7256 = sub nsw i64 %7255, %96
  %7257 = zext i32 %.pre-phi to i64
  %7258 = mul nsw i64 %7257, %112
  %7259 = sub nsw i64 %7258, %96
  %7260 = sext i32 %a26 to i64
  %7261 = add nsw i64 %7260, 13
  %7262 = mul nsw i64 %7261, %113
  %7263 = add nsw i64 %7262, %116
  br label %"for blur_y.s0.x.x.rebased382"

"produce blur_x380":                              ; preds = %"end for blur_y.s0.x.x.rebased369"
  %7264 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %7265 = getelementptr inbounds i16, i16* %7264, i64 -31
  %7266 = bitcast i16* %7265 to <16 x i16>*
  %7267 = load <16 x i16>, <16 x i16>* %7266, align 2, !tbaa !396
  %7268 = getelementptr inbounds i16, i16* %7264, i64 -15
  %7269 = bitcast i16* %7268 to <16 x i16>*
  %7270 = load <16 x i16>, <16 x i16>* %7269, align 2, !tbaa !396
  %7271 = getelementptr inbounds i16, i16* %7264, i64 -32
  %7272 = bitcast i16* %7271 to <16 x i16>*
  %7273 = load <16 x i16>, <16 x i16>* %7272, align 2, !tbaa !396
  %7274 = getelementptr inbounds i16, i16* %7264, i64 -16
  %7275 = bitcast i16* %7274 to <16 x i16>*
  %7276 = load <16 x i16>, <16 x i16>* %7275, align 2, !tbaa !396
  %7277 = getelementptr inbounds i16, i16* %7264, i64 -30
  %7278 = bitcast i16* %7277 to <16 x i16>*
  %7279 = load <16 x i16>, <16 x i16>* %7278, align 2, !tbaa !396
  %7280 = getelementptr inbounds i16, i16* %7264, i64 -14
  %7281 = bitcast i16* %7280 to <16 x i16>*
  %7282 = load <16 x i16>, <16 x i16>* %7281, align 2, !tbaa !396
  %7283 = getelementptr inbounds i16, i16* %7264, i64 -28
  %7284 = bitcast i16* %7283 to <16 x i16>*
  %7285 = load <16 x i16>, <16 x i16>* %7284, align 2, !tbaa !396
  %7286 = getelementptr inbounds i16, i16* %7264, i64 -12
  %7287 = bitcast i16* %7286 to <16 x i16>*
  %7288 = load <16 x i16>, <16 x i16>* %7287, align 2, !tbaa !396
  %7289 = getelementptr inbounds i16, i16* %7264, i64 -29
  %7290 = bitcast i16* %7289 to <16 x i16>*
  %7291 = load <16 x i16>, <16 x i16>* %7290, align 2, !tbaa !396
  %7292 = getelementptr inbounds i16, i16* %7264, i64 -13
  %7293 = bitcast i16* %7292 to <16 x i16>*
  %7294 = load <16 x i16>, <16 x i16>* %7293, align 2, !tbaa !396
  %7295 = add <16 x i16> %7273, %7267
  %7296 = add <16 x i16> %7295, %7279
  %7297 = add <16 x i16> %7296, %7285
  %7298 = add <16 x i16> %7297, %7291
  %7299 = add <16 x i16> %7276, %7270
  %7300 = add <16 x i16> %7299, %7282
  %7301 = add <16 x i16> %7300, %7288
  %7302 = add <16 x i16> %7301, %7294
  %7303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7298, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7304 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7302, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7305 = shufflevector <16 x i16> %7303, <16 x i16> %7304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7306 = lshr <32 x i16> %7305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7307 = shufflevector <32 x i16> %7306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7308 = zext i32 %.pre-phi3480 to i64
  %7309 = mul nsw i64 %97, %7308
  %7310 = add nsw i64 %99, %7309
  %7311 = getelementptr inbounds i16, i16* %blur_x, i64 %7310
  %7312 = getelementptr inbounds i16, i16* %7311, i64 -32
  %7313 = bitcast i16* %7312 to <16 x i16>*
  store <16 x i16> %7307, <16 x i16>* %7313, align 2, !tbaa !399
  %7314 = shufflevector <32 x i16> %7306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7315 = getelementptr inbounds i16, i16* %7311, i64 -16
  %7316 = bitcast i16* %7315 to <16 x i16>*
  store <16 x i16> %7314, <16 x i16>* %7316, align 2, !tbaa !399
  %7317 = zext i32 %.pre-phi3504 to i64
  %7318 = mul nsw i64 %7317, %112
  %7319 = add nsw i64 %7318, %94
  %7320 = getelementptr inbounds i16, i16* %blur_x, i64 %7319
  %7321 = getelementptr inbounds i16, i16* %7320, i64 -32
  %7322 = bitcast i16* %7321 to <16 x i16>*
  %7323 = load <16 x i16>, <16 x i16>* %7322, align 2, !tbaa !399
  %7324 = getelementptr inbounds i16, i16* %7320, i64 -16
  %7325 = bitcast i16* %7324 to <16 x i16>*
  %7326 = load <16 x i16>, <16 x i16>* %7325, align 2, !tbaa !399
  %7327 = zext i32 %.pre-phi3498 to i64
  %7328 = mul nsw i64 %7327, %112
  %7329 = add nsw i64 %7328, %94
  %7330 = getelementptr inbounds i16, i16* %blur_x, i64 %7329
  %7331 = getelementptr inbounds i16, i16* %7330, i64 -32
  %7332 = bitcast i16* %7331 to <16 x i16>*
  %7333 = load <16 x i16>, <16 x i16>* %7332, align 2, !tbaa !399
  %7334 = getelementptr inbounds i16, i16* %7330, i64 -16
  %7335 = bitcast i16* %7334 to <16 x i16>*
  %7336 = load <16 x i16>, <16 x i16>* %7335, align 2, !tbaa !399
  %7337 = zext i32 %.pre-phi3510 to i64
  %7338 = mul nsw i64 %7337, %112
  %7339 = add nsw i64 %7338, %94
  %7340 = getelementptr inbounds i16, i16* %blur_x, i64 %7339
  %7341 = getelementptr inbounds i16, i16* %7340, i64 -32
  %7342 = bitcast i16* %7341 to <16 x i16>*
  %7343 = load <16 x i16>, <16 x i16>* %7342, align 2, !tbaa !399
  %7344 = getelementptr inbounds i16, i16* %7340, i64 -16
  %7345 = bitcast i16* %7344 to <16 x i16>*
  %7346 = load <16 x i16>, <16 x i16>* %7345, align 2, !tbaa !399
  %7347 = mul nsw i64 %7308, %112
  %7348 = add nsw i64 %7347, %94
  %7349 = getelementptr inbounds i16, i16* %blur_x, i64 %7348
  %7350 = getelementptr inbounds i16, i16* %7349, i64 -32
  %7351 = bitcast i16* %7350 to <16 x i16>*
  %7352 = load <16 x i16>, <16 x i16>* %7351, align 2, !tbaa !399
  %7353 = getelementptr inbounds i16, i16* %7349, i64 -16
  %7354 = bitcast i16* %7353 to <16 x i16>*
  %7355 = load <16 x i16>, <16 x i16>* %7354, align 2, !tbaa !399
  %7356 = zext i32 %.pre-phi to i64
  %7357 = mul nsw i64 %7356, %112
  %7358 = add nsw i64 %7357, %94
  %7359 = getelementptr inbounds i16, i16* %blur_x, i64 %7358
  %7360 = getelementptr inbounds i16, i16* %7359, i64 -32
  %7361 = bitcast i16* %7360 to <16 x i16>*
  %7362 = load <16 x i16>, <16 x i16>* %7361, align 2, !tbaa !399
  %7363 = getelementptr inbounds i16, i16* %7359, i64 -16
  %7364 = bitcast i16* %7363 to <16 x i16>*
  %7365 = load <16 x i16>, <16 x i16>* %7364, align 2, !tbaa !399
  %7366 = add <16 x i16> %7333, %7323
  %7367 = add <16 x i16> %7366, %7343
  %7368 = add <16 x i16> %7367, %7352
  %7369 = add <16 x i16> %7368, %7362
  %7370 = add <16 x i16> %7336, %7326
  %7371 = add <16 x i16> %7370, %7346
  %7372 = add <16 x i16> %7371, %7355
  %7373 = add <16 x i16> %7372, %7365
  %7374 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7369, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7373, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7376 = shufflevector <16 x i16> %7374, <16 x i16> %7375, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7377 = lshr <32 x i16> %7376, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7378 = shufflevector <32 x i16> %7377, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7379 = sext i32 %a26 to i64
  %7380 = add nsw i64 %7379, 13
  %7381 = mul nsw i64 %7380, %113
  %7382 = add nsw i64 %115, %7381
  %7383 = getelementptr inbounds i16, i16* %66, i64 %7382
  %7384 = getelementptr inbounds i16, i16* %7383, i64 -32
  %7385 = bitcast i16* %7384 to <16 x i16>*
  store <16 x i16> %7378, <16 x i16>* %7385, align 2, !tbaa !401
  %7386 = shufflevector <32 x i16> %7377, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7387 = getelementptr inbounds i16, i16* %7383, i64 -16
  %7388 = bitcast i16* %7387 to <16 x i16>*
  store <16 x i16> %7386, <16 x i16>* %7388, align 2, !tbaa !401
  br label %after_bb377

"for blur_y.s0.x.x.rebased382":                   ; preds = %"for blur_y.s0.x.x.rebased382.preheader", %"consume blur_x389"
  %indvars.iv3298 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased382.preheader" ], [ %indvars.iv.next3299, %"consume blur_x389" ]
  %7389 = add nsw i64 %indvars.iv3298, %101
  %7390 = icmp slt i64 %7389, 1
  %7391 = trunc i64 %7389 to i32
  %7392 = shl nsw i32 %7391, 5
  %7393 = icmp sgt i32 %4, %7392
  %7394 = or i1 %7390, %7393
  br i1 %7394, label %"produce blur_x388", label %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge"

"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased382"
  %.pre3531 = shl nsw i64 %7389, 5
  br label %"consume blur_x389"

"end for blur_y.s0.x.x.rebased383":               ; preds = %"consume blur_x389", %after_bb377
  br i1 %102, label %"for blur_y.s0.x.x.rebased390.preheader", label %"end for blur_y.s0.x.x.rebased391", !prof !386

"for blur_y.s0.x.x.rebased390.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased383"
  %7395 = sext i32 %t1688 to i64
  %7396 = zext i32 %.pre-phi3504 to i64
  %7397 = mul nsw i64 %7396, %112
  %7398 = sub nsw i64 %7397, %96
  %7399 = zext i32 %.pre-phi3498 to i64
  %7400 = mul nsw i64 %7399, %112
  %7401 = sub nsw i64 %7400, %96
  %7402 = zext i32 %.pre-phi3510 to i64
  %7403 = mul nsw i64 %7402, %112
  %7404 = sub nsw i64 %7403, %96
  %7405 = zext i32 %.pre-phi3480 to i64
  %7406 = mul nsw i64 %7405, %112
  %7407 = sub nsw i64 %7406, %96
  %7408 = zext i32 %.pre-phi to i64
  %7409 = mul nsw i64 %7408, %112
  %7410 = sub nsw i64 %7409, %96
  %7411 = sext i32 %a26 to i64
  %7412 = add nsw i64 %7411, 13
  %7413 = mul nsw i64 %7412, %113
  %7414 = add nsw i64 %7413, %116
  br label %"for blur_y.s0.x.x.rebased390"

"produce blur_x388":                              ; preds = %"for blur_y.s0.x.x.rebased382"
  %t920 = add nsw i32 %7392, %t1913
  %7415 = sext i32 %t920 to i64
  %7416 = getelementptr inbounds i16, i16* %read_input, i64 %7415
  %7417 = getelementptr inbounds i16, i16* %7416, i64 1
  %7418 = bitcast i16* %7417 to <16 x i16>*
  %7419 = load <16 x i16>, <16 x i16>* %7418, align 2, !tbaa !396
  %7420 = getelementptr inbounds i16, i16* %7416, i64 17
  %7421 = bitcast i16* %7420 to <16 x i16>*
  %7422 = load <16 x i16>, <16 x i16>* %7421, align 2, !tbaa !396
  %7423 = bitcast i16* %7416 to <16 x i16>*
  %7424 = load <16 x i16>, <16 x i16>* %7423, align 2, !tbaa !396
  %7425 = getelementptr inbounds i16, i16* %7416, i64 16
  %7426 = bitcast i16* %7425 to <16 x i16>*
  %7427 = load <16 x i16>, <16 x i16>* %7426, align 2, !tbaa !396
  %7428 = getelementptr inbounds i16, i16* %7416, i64 2
  %7429 = bitcast i16* %7428 to <16 x i16>*
  %7430 = load <16 x i16>, <16 x i16>* %7429, align 2, !tbaa !396
  %7431 = getelementptr inbounds i16, i16* %7416, i64 18
  %7432 = bitcast i16* %7431 to <16 x i16>*
  %7433 = load <16 x i16>, <16 x i16>* %7432, align 2, !tbaa !396
  %7434 = getelementptr inbounds i16, i16* %7416, i64 4
  %7435 = bitcast i16* %7434 to <16 x i16>*
  %7436 = load <16 x i16>, <16 x i16>* %7435, align 2, !tbaa !396
  %7437 = getelementptr inbounds i16, i16* %7416, i64 20
  %7438 = bitcast i16* %7437 to <16 x i16>*
  %7439 = load <16 x i16>, <16 x i16>* %7438, align 2, !tbaa !396
  %7440 = getelementptr inbounds i16, i16* %7416, i64 3
  %7441 = bitcast i16* %7440 to <16 x i16>*
  %7442 = load <16 x i16>, <16 x i16>* %7441, align 2, !tbaa !396
  %7443 = getelementptr inbounds i16, i16* %7416, i64 19
  %7444 = bitcast i16* %7443 to <16 x i16>*
  %7445 = load <16 x i16>, <16 x i16>* %7444, align 2, !tbaa !396
  %7446 = add <16 x i16> %7424, %7419
  %7447 = add <16 x i16> %7446, %7430
  %7448 = add <16 x i16> %7447, %7436
  %7449 = add <16 x i16> %7448, %7442
  %7450 = add <16 x i16> %7427, %7422
  %7451 = add <16 x i16> %7450, %7433
  %7452 = add <16 x i16> %7451, %7439
  %7453 = add <16 x i16> %7452, %7445
  %7454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7449, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7453, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7456 = shufflevector <16 x i16> %7454, <16 x i16> %7455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7457 = lshr <32 x i16> %7456, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7458 = shufflevector <32 x i16> %7457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7459 = shl nsw i64 %7389, 5
  %7460 = add nsw i64 %7459, %7244
  %7461 = getelementptr inbounds i16, i16* %blur_x, i64 %7460
  %7462 = bitcast i16* %7461 to <16 x i16>*
  store <16 x i16> %7458, <16 x i16>* %7462, align 2, !tbaa !399
  %7463 = shufflevector <32 x i16> %7457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7464 = getelementptr inbounds i16, i16* %7461, i64 16
  %7465 = bitcast i16* %7464 to <16 x i16>*
  store <16 x i16> %7463, <16 x i16>* %7465, align 2, !tbaa !399
  br label %"consume blur_x389"

"consume blur_x389":                              ; preds = %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge", %"produce blur_x388"
  %.pre-phi3532 = phi i64 [ %.pre3531, %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge" ], [ %7459, %"produce blur_x388" ]
  %7466 = add nsw i64 %7247, %.pre-phi3532
  %7467 = getelementptr inbounds i16, i16* %blur_x, i64 %7466
  %7468 = bitcast i16* %7467 to <16 x i16>*
  %7469 = load <16 x i16>, <16 x i16>* %7468, align 2, !tbaa !399
  %7470 = getelementptr inbounds i16, i16* %7467, i64 16
  %7471 = bitcast i16* %7470 to <16 x i16>*
  %7472 = load <16 x i16>, <16 x i16>* %7471, align 2, !tbaa !399
  %7473 = add nsw i64 %7250, %.pre-phi3532
  %7474 = getelementptr inbounds i16, i16* %blur_x, i64 %7473
  %7475 = bitcast i16* %7474 to <16 x i16>*
  %7476 = load <16 x i16>, <16 x i16>* %7475, align 2, !tbaa !399
  %7477 = getelementptr inbounds i16, i16* %7474, i64 16
  %7478 = bitcast i16* %7477 to <16 x i16>*
  %7479 = load <16 x i16>, <16 x i16>* %7478, align 2, !tbaa !399
  %7480 = add nsw i64 %7253, %.pre-phi3532
  %7481 = getelementptr inbounds i16, i16* %blur_x, i64 %7480
  %7482 = bitcast i16* %7481 to <16 x i16>*
  %7483 = load <16 x i16>, <16 x i16>* %7482, align 2, !tbaa !399
  %7484 = getelementptr inbounds i16, i16* %7481, i64 16
  %7485 = bitcast i16* %7484 to <16 x i16>*
  %7486 = load <16 x i16>, <16 x i16>* %7485, align 2, !tbaa !399
  %7487 = add nsw i64 %7256, %.pre-phi3532
  %7488 = getelementptr inbounds i16, i16* %blur_x, i64 %7487
  %7489 = bitcast i16* %7488 to <16 x i16>*
  %7490 = load <16 x i16>, <16 x i16>* %7489, align 2, !tbaa !399
  %7491 = getelementptr inbounds i16, i16* %7488, i64 16
  %7492 = bitcast i16* %7491 to <16 x i16>*
  %7493 = load <16 x i16>, <16 x i16>* %7492, align 2, !tbaa !399
  %7494 = add nsw i64 %7259, %.pre-phi3532
  %7495 = getelementptr inbounds i16, i16* %blur_x, i64 %7494
  %7496 = bitcast i16* %7495 to <16 x i16>*
  %7497 = load <16 x i16>, <16 x i16>* %7496, align 2, !tbaa !399
  %7498 = getelementptr inbounds i16, i16* %7495, i64 16
  %7499 = bitcast i16* %7498 to <16 x i16>*
  %7500 = load <16 x i16>, <16 x i16>* %7499, align 2, !tbaa !399
  %7501 = add <16 x i16> %7476, %7469
  %7502 = add <16 x i16> %7501, %7483
  %7503 = add <16 x i16> %7502, %7490
  %7504 = add <16 x i16> %7503, %7497
  %7505 = add <16 x i16> %7479, %7472
  %7506 = add <16 x i16> %7505, %7486
  %7507 = add <16 x i16> %7506, %7493
  %7508 = add <16 x i16> %7507, %7500
  %7509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7504, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7508, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7511 = shufflevector <16 x i16> %7509, <16 x i16> %7510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7512 = lshr <32 x i16> %7511, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7513 = shufflevector <32 x i16> %7512, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7514 = add nsw i64 %7263, %.pre-phi3532
  %7515 = getelementptr inbounds i16, i16* %66, i64 %7514
  %7516 = bitcast i16* %7515 to <16 x i16>*
  store <16 x i16> %7513, <16 x i16>* %7516, align 2, !tbaa !401
  %7517 = shufflevector <32 x i16> %7512, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7518 = getelementptr inbounds i16, i16* %7515, i64 16
  %7519 = bitcast i16* %7518 to <16 x i16>*
  store <16 x i16> %7517, <16 x i16>* %7519, align 2, !tbaa !401
  %indvars.iv.next3299 = add nuw nsw i64 %indvars.iv3298, 1
  %.not2731 = icmp eq i64 %indvars.iv.next3299, %184
  br i1 %.not2731, label %"end for blur_y.s0.x.x.rebased383", label %"for blur_y.s0.x.x.rebased382"

"for blur_y.s0.x.x.rebased390":                   ; preds = %"for blur_y.s0.x.x.rebased390.preheader", %"consume blur_x398"
  %blur_y.s0.x.x.rebased392 = phi i32 [ %7632, %"consume blur_x398" ], [ 0, %"for blur_y.s0.x.x.rebased390.preheader" ]
  %7520 = add nsw i32 %blur_y.s0.x.x.rebased392, %t1626
  %a196 = shl nsw i32 %7520, 5
  %7521 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %7521, i32 %a196, i32 %a14
  %7522 = icmp slt i32 %7520, 1
  %7523 = icmp sgt i32 %4, %a196
  %7524 = or i1 %7522, %7523
  br i1 %7524, label %"produce blur_x396", label %"consume blur_x398"

"end for blur_y.s0.x.x.rebased391":               ; preds = %"consume blur_x398", %"end for blur_y.s0.x.x.rebased383"
  br i1 %34, label %"produce blur_x402", label %after_bb399

"produce blur_x396":                              ; preds = %"for blur_y.s0.x.x.rebased390"
  %7525 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s397 = select i1 %7525, i32 %b202, i32 %4
  %t925 = add nsw i32 %blur_x.s0.x.v1.base.s397, %t1913
  %7526 = sext i32 %t925 to i64
  %7527 = getelementptr inbounds i16, i16* %read_input, i64 %7526
  %7528 = getelementptr inbounds i16, i16* %7527, i64 1
  %7529 = bitcast i16* %7528 to <16 x i16>*
  %7530 = load <16 x i16>, <16 x i16>* %7529, align 2, !tbaa !396
  %7531 = getelementptr inbounds i16, i16* %7527, i64 17
  %7532 = bitcast i16* %7531 to <16 x i16>*
  %7533 = load <16 x i16>, <16 x i16>* %7532, align 2, !tbaa !396
  %7534 = bitcast i16* %7527 to <16 x i16>*
  %7535 = load <16 x i16>, <16 x i16>* %7534, align 2, !tbaa !396
  %7536 = getelementptr inbounds i16, i16* %7527, i64 16
  %7537 = bitcast i16* %7536 to <16 x i16>*
  %7538 = load <16 x i16>, <16 x i16>* %7537, align 2, !tbaa !396
  %7539 = getelementptr inbounds i16, i16* %7527, i64 2
  %7540 = bitcast i16* %7539 to <16 x i16>*
  %7541 = load <16 x i16>, <16 x i16>* %7540, align 2, !tbaa !396
  %7542 = getelementptr inbounds i16, i16* %7527, i64 18
  %7543 = bitcast i16* %7542 to <16 x i16>*
  %7544 = load <16 x i16>, <16 x i16>* %7543, align 2, !tbaa !396
  %7545 = getelementptr inbounds i16, i16* %7527, i64 4
  %7546 = bitcast i16* %7545 to <16 x i16>*
  %7547 = load <16 x i16>, <16 x i16>* %7546, align 2, !tbaa !396
  %7548 = getelementptr inbounds i16, i16* %7527, i64 20
  %7549 = bitcast i16* %7548 to <16 x i16>*
  %7550 = load <16 x i16>, <16 x i16>* %7549, align 2, !tbaa !396
  %7551 = getelementptr inbounds i16, i16* %7527, i64 3
  %7552 = bitcast i16* %7551 to <16 x i16>*
  %7553 = load <16 x i16>, <16 x i16>* %7552, align 2, !tbaa !396
  %7554 = getelementptr inbounds i16, i16* %7527, i64 19
  %7555 = bitcast i16* %7554 to <16 x i16>*
  %7556 = load <16 x i16>, <16 x i16>* %7555, align 2, !tbaa !396
  %7557 = add <16 x i16> %7535, %7530
  %7558 = add <16 x i16> %7557, %7541
  %7559 = add <16 x i16> %7558, %7547
  %7560 = add <16 x i16> %7559, %7553
  %7561 = add <16 x i16> %7538, %7533
  %7562 = add <16 x i16> %7561, %7544
  %7563 = add <16 x i16> %7562, %7550
  %7564 = add <16 x i16> %7563, %7556
  %7565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7560, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7564, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7567 = shufflevector <16 x i16> %7565, <16 x i16> %7566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7568 = lshr <32 x i16> %7567, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7569 = shufflevector <32 x i16> %7568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7570 = sext i32 %blur_x.s0.x.v1.base.s397 to i64
  %7571 = add nsw i64 %7570, %7395
  %7572 = getelementptr inbounds i16, i16* %blur_x, i64 %7571
  %7573 = bitcast i16* %7572 to <16 x i16>*
  store <16 x i16> %7569, <16 x i16>* %7573, align 2, !tbaa !399
  %7574 = shufflevector <32 x i16> %7568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7575 = getelementptr inbounds i16, i16* %7572, i64 16
  %7576 = bitcast i16* %7575 to <16 x i16>*
  store <16 x i16> %7574, <16 x i16>* %7576, align 2, !tbaa !399
  br label %"consume blur_x398"

"consume blur_x398":                              ; preds = %"for blur_y.s0.x.x.rebased390", %"produce blur_x396"
  %7577 = sext i32 %b202 to i64
  %7578 = add nsw i64 %7398, %7577
  %7579 = getelementptr inbounds i16, i16* %blur_x, i64 %7578
  %7580 = bitcast i16* %7579 to <16 x i16>*
  %7581 = load <16 x i16>, <16 x i16>* %7580, align 2, !tbaa !399
  %7582 = getelementptr inbounds i16, i16* %7579, i64 16
  %7583 = bitcast i16* %7582 to <16 x i16>*
  %7584 = load <16 x i16>, <16 x i16>* %7583, align 2, !tbaa !399
  %7585 = add nsw i64 %7401, %7577
  %7586 = getelementptr inbounds i16, i16* %blur_x, i64 %7585
  %7587 = bitcast i16* %7586 to <16 x i16>*
  %7588 = load <16 x i16>, <16 x i16>* %7587, align 2, !tbaa !399
  %7589 = getelementptr inbounds i16, i16* %7586, i64 16
  %7590 = bitcast i16* %7589 to <16 x i16>*
  %7591 = load <16 x i16>, <16 x i16>* %7590, align 2, !tbaa !399
  %7592 = add nsw i64 %7404, %7577
  %7593 = getelementptr inbounds i16, i16* %blur_x, i64 %7592
  %7594 = bitcast i16* %7593 to <16 x i16>*
  %7595 = load <16 x i16>, <16 x i16>* %7594, align 2, !tbaa !399
  %7596 = getelementptr inbounds i16, i16* %7593, i64 16
  %7597 = bitcast i16* %7596 to <16 x i16>*
  %7598 = load <16 x i16>, <16 x i16>* %7597, align 2, !tbaa !399
  %7599 = add nsw i64 %7407, %7577
  %7600 = getelementptr inbounds i16, i16* %blur_x, i64 %7599
  %7601 = bitcast i16* %7600 to <16 x i16>*
  %7602 = load <16 x i16>, <16 x i16>* %7601, align 2, !tbaa !399
  %7603 = getelementptr inbounds i16, i16* %7600, i64 16
  %7604 = bitcast i16* %7603 to <16 x i16>*
  %7605 = load <16 x i16>, <16 x i16>* %7604, align 2, !tbaa !399
  %7606 = add nsw i64 %7410, %7577
  %7607 = getelementptr inbounds i16, i16* %blur_x, i64 %7606
  %7608 = bitcast i16* %7607 to <16 x i16>*
  %7609 = load <16 x i16>, <16 x i16>* %7608, align 2, !tbaa !399
  %7610 = getelementptr inbounds i16, i16* %7607, i64 16
  %7611 = bitcast i16* %7610 to <16 x i16>*
  %7612 = load <16 x i16>, <16 x i16>* %7611, align 2, !tbaa !399
  %7613 = add <16 x i16> %7588, %7581
  %7614 = add <16 x i16> %7613, %7595
  %7615 = add <16 x i16> %7614, %7602
  %7616 = add <16 x i16> %7615, %7609
  %7617 = add <16 x i16> %7591, %7584
  %7618 = add <16 x i16> %7617, %7598
  %7619 = add <16 x i16> %7618, %7605
  %7620 = add <16 x i16> %7619, %7612
  %7621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7616, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7620, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7623 = shufflevector <16 x i16> %7621, <16 x i16> %7622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7624 = lshr <32 x i16> %7623, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7625 = shufflevector <32 x i16> %7624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7626 = add nsw i64 %7414, %7577
  %7627 = getelementptr inbounds i16, i16* %66, i64 %7626
  %7628 = bitcast i16* %7627 to <16 x i16>*
  store <16 x i16> %7625, <16 x i16>* %7628, align 2, !tbaa !401
  %7629 = shufflevector <32 x i16> %7624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7630 = getelementptr inbounds i16, i16* %7627, i64 16
  %7631 = bitcast i16* %7630 to <16 x i16>*
  store <16 x i16> %7629, <16 x i16>* %7631, align 2, !tbaa !401
  %7632 = add nuw nsw i32 %blur_y.s0.x.x.rebased392, 1
  %.not2730 = icmp eq i32 %7632, %t1683
  br i1 %.not2730, label %"end for blur_y.s0.x.x.rebased391", label %"for blur_y.s0.x.x.rebased390"

after_bb399:                                      ; preds = %"end for blur_y.s0.x.x.rebased391", %"produce blur_x402"
  br i1 %100, label %"for blur_y.s0.x.x.rebased404.preheader", label %"end for blur_y.s0.x.x.rebased405", !prof !386

"for blur_y.s0.x.x.rebased404.preheader":         ; preds = %after_bb399
  %7633 = sext i32 %t1694 to i64
  %7634 = zext i32 %.pre-phi3510 to i64
  %7635 = mul nsw i64 %7634, %112
  %7636 = sub nsw i64 %7635, %96
  %7637 = zext i32 %.pre-phi3504 to i64
  %7638 = mul nsw i64 %7637, %112
  %7639 = sub nsw i64 %7638, %96
  %7640 = zext i32 %.pre-phi to i64
  %7641 = mul nsw i64 %7640, %112
  %7642 = sub nsw i64 %7641, %96
  %7643 = zext i32 %.pre-phi3484 to i64
  %7644 = mul nsw i64 %7643, %112
  %7645 = sub nsw i64 %7644, %96
  %7646 = zext i32 %.pre-phi3480 to i64
  %7647 = mul nsw i64 %7646, %112
  %7648 = sub nsw i64 %7647, %96
  %7649 = sext i32 %a26 to i64
  %7650 = add nsw i64 %7649, 14
  %7651 = mul nsw i64 %7650, %113
  %7652 = add nsw i64 %7651, %116
  br label %"for blur_y.s0.x.x.rebased404"

"produce blur_x402":                              ; preds = %"end for blur_y.s0.x.x.rebased391"
  %7653 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %7654 = getelementptr inbounds i16, i16* %7653, i64 -31
  %7655 = bitcast i16* %7654 to <16 x i16>*
  %7656 = load <16 x i16>, <16 x i16>* %7655, align 2, !tbaa !396
  %7657 = getelementptr inbounds i16, i16* %7653, i64 -15
  %7658 = bitcast i16* %7657 to <16 x i16>*
  %7659 = load <16 x i16>, <16 x i16>* %7658, align 2, !tbaa !396
  %7660 = getelementptr inbounds i16, i16* %7653, i64 -32
  %7661 = bitcast i16* %7660 to <16 x i16>*
  %7662 = load <16 x i16>, <16 x i16>* %7661, align 2, !tbaa !396
  %7663 = getelementptr inbounds i16, i16* %7653, i64 -16
  %7664 = bitcast i16* %7663 to <16 x i16>*
  %7665 = load <16 x i16>, <16 x i16>* %7664, align 2, !tbaa !396
  %7666 = getelementptr inbounds i16, i16* %7653, i64 -30
  %7667 = bitcast i16* %7666 to <16 x i16>*
  %7668 = load <16 x i16>, <16 x i16>* %7667, align 2, !tbaa !396
  %7669 = getelementptr inbounds i16, i16* %7653, i64 -14
  %7670 = bitcast i16* %7669 to <16 x i16>*
  %7671 = load <16 x i16>, <16 x i16>* %7670, align 2, !tbaa !396
  %7672 = getelementptr inbounds i16, i16* %7653, i64 -28
  %7673 = bitcast i16* %7672 to <16 x i16>*
  %7674 = load <16 x i16>, <16 x i16>* %7673, align 2, !tbaa !396
  %7675 = getelementptr inbounds i16, i16* %7653, i64 -12
  %7676 = bitcast i16* %7675 to <16 x i16>*
  %7677 = load <16 x i16>, <16 x i16>* %7676, align 2, !tbaa !396
  %7678 = getelementptr inbounds i16, i16* %7653, i64 -29
  %7679 = bitcast i16* %7678 to <16 x i16>*
  %7680 = load <16 x i16>, <16 x i16>* %7679, align 2, !tbaa !396
  %7681 = getelementptr inbounds i16, i16* %7653, i64 -13
  %7682 = bitcast i16* %7681 to <16 x i16>*
  %7683 = load <16 x i16>, <16 x i16>* %7682, align 2, !tbaa !396
  %7684 = add <16 x i16> %7662, %7656
  %7685 = add <16 x i16> %7684, %7668
  %7686 = add <16 x i16> %7685, %7674
  %7687 = add <16 x i16> %7686, %7680
  %7688 = add <16 x i16> %7665, %7659
  %7689 = add <16 x i16> %7688, %7671
  %7690 = add <16 x i16> %7689, %7677
  %7691 = add <16 x i16> %7690, %7683
  %7692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7687, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7691, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7694 = shufflevector <16 x i16> %7692, <16 x i16> %7693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7695 = lshr <32 x i16> %7694, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7696 = shufflevector <32 x i16> %7695, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7697 = zext i32 %.pre-phi3484 to i64
  %7698 = mul nsw i64 %97, %7697
  %7699 = add nsw i64 %99, %7698
  %7700 = getelementptr inbounds i16, i16* %blur_x, i64 %7699
  %7701 = getelementptr inbounds i16, i16* %7700, i64 -32
  %7702 = bitcast i16* %7701 to <16 x i16>*
  store <16 x i16> %7696, <16 x i16>* %7702, align 2, !tbaa !399
  %7703 = shufflevector <32 x i16> %7695, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7704 = getelementptr inbounds i16, i16* %7700, i64 -16
  %7705 = bitcast i16* %7704 to <16 x i16>*
  store <16 x i16> %7703, <16 x i16>* %7705, align 2, !tbaa !399
  %7706 = zext i32 %.pre-phi3510 to i64
  %7707 = mul nsw i64 %7706, %112
  %7708 = add nsw i64 %7707, %94
  %7709 = getelementptr inbounds i16, i16* %blur_x, i64 %7708
  %7710 = getelementptr inbounds i16, i16* %7709, i64 -32
  %7711 = bitcast i16* %7710 to <16 x i16>*
  %7712 = load <16 x i16>, <16 x i16>* %7711, align 2, !tbaa !399
  %7713 = getelementptr inbounds i16, i16* %7709, i64 -16
  %7714 = bitcast i16* %7713 to <16 x i16>*
  %7715 = load <16 x i16>, <16 x i16>* %7714, align 2, !tbaa !399
  %7716 = zext i32 %.pre-phi3504 to i64
  %7717 = mul nsw i64 %7716, %112
  %7718 = add nsw i64 %7717, %94
  %7719 = getelementptr inbounds i16, i16* %blur_x, i64 %7718
  %7720 = getelementptr inbounds i16, i16* %7719, i64 -32
  %7721 = bitcast i16* %7720 to <16 x i16>*
  %7722 = load <16 x i16>, <16 x i16>* %7721, align 2, !tbaa !399
  %7723 = getelementptr inbounds i16, i16* %7719, i64 -16
  %7724 = bitcast i16* %7723 to <16 x i16>*
  %7725 = load <16 x i16>, <16 x i16>* %7724, align 2, !tbaa !399
  %7726 = zext i32 %.pre-phi to i64
  %7727 = mul nsw i64 %7726, %112
  %7728 = add nsw i64 %7727, %94
  %7729 = getelementptr inbounds i16, i16* %blur_x, i64 %7728
  %7730 = getelementptr inbounds i16, i16* %7729, i64 -32
  %7731 = bitcast i16* %7730 to <16 x i16>*
  %7732 = load <16 x i16>, <16 x i16>* %7731, align 2, !tbaa !399
  %7733 = getelementptr inbounds i16, i16* %7729, i64 -16
  %7734 = bitcast i16* %7733 to <16 x i16>*
  %7735 = load <16 x i16>, <16 x i16>* %7734, align 2, !tbaa !399
  %7736 = mul nsw i64 %7697, %112
  %7737 = add nsw i64 %7736, %94
  %7738 = getelementptr inbounds i16, i16* %blur_x, i64 %7737
  %7739 = getelementptr inbounds i16, i16* %7738, i64 -32
  %7740 = bitcast i16* %7739 to <16 x i16>*
  %7741 = load <16 x i16>, <16 x i16>* %7740, align 2, !tbaa !399
  %7742 = getelementptr inbounds i16, i16* %7738, i64 -16
  %7743 = bitcast i16* %7742 to <16 x i16>*
  %7744 = load <16 x i16>, <16 x i16>* %7743, align 2, !tbaa !399
  %7745 = zext i32 %.pre-phi3480 to i64
  %7746 = mul nsw i64 %7745, %112
  %7747 = add nsw i64 %7746, %94
  %7748 = getelementptr inbounds i16, i16* %blur_x, i64 %7747
  %7749 = getelementptr inbounds i16, i16* %7748, i64 -32
  %7750 = bitcast i16* %7749 to <16 x i16>*
  %7751 = load <16 x i16>, <16 x i16>* %7750, align 2, !tbaa !399
  %7752 = getelementptr inbounds i16, i16* %7748, i64 -16
  %7753 = bitcast i16* %7752 to <16 x i16>*
  %7754 = load <16 x i16>, <16 x i16>* %7753, align 2, !tbaa !399
  %7755 = add <16 x i16> %7722, %7712
  %7756 = add <16 x i16> %7755, %7732
  %7757 = add <16 x i16> %7756, %7741
  %7758 = add <16 x i16> %7757, %7751
  %7759 = add <16 x i16> %7725, %7715
  %7760 = add <16 x i16> %7759, %7735
  %7761 = add <16 x i16> %7760, %7744
  %7762 = add <16 x i16> %7761, %7754
  %7763 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7758, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7762, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7765 = shufflevector <16 x i16> %7763, <16 x i16> %7764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7766 = lshr <32 x i16> %7765, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7767 = shufflevector <32 x i16> %7766, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7768 = sext i32 %a26 to i64
  %7769 = add nsw i64 %7768, 14
  %7770 = mul nsw i64 %7769, %113
  %7771 = add nsw i64 %115, %7770
  %7772 = getelementptr inbounds i16, i16* %66, i64 %7771
  %7773 = getelementptr inbounds i16, i16* %7772, i64 -32
  %7774 = bitcast i16* %7773 to <16 x i16>*
  store <16 x i16> %7767, <16 x i16>* %7774, align 2, !tbaa !401
  %7775 = shufflevector <32 x i16> %7766, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7776 = getelementptr inbounds i16, i16* %7772, i64 -16
  %7777 = bitcast i16* %7776 to <16 x i16>*
  store <16 x i16> %7775, <16 x i16>* %7777, align 2, !tbaa !401
  br label %after_bb399

"for blur_y.s0.x.x.rebased404":                   ; preds = %"for blur_y.s0.x.x.rebased404.preheader", %"consume blur_x411"
  %indvars.iv3301 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased404.preheader" ], [ %indvars.iv.next3302, %"consume blur_x411" ]
  %7778 = add nsw i64 %indvars.iv3301, %101
  %7779 = icmp slt i64 %7778, 1
  %7780 = trunc i64 %7778 to i32
  %7781 = shl nsw i32 %7780, 5
  %7782 = icmp sgt i32 %4, %7781
  %7783 = or i1 %7779, %7782
  br i1 %7783, label %"produce blur_x410", label %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge"

"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased404"
  %.pre3533 = shl nsw i64 %7778, 5
  br label %"consume blur_x411"

"end for blur_y.s0.x.x.rebased405":               ; preds = %"consume blur_x411", %after_bb399
  br i1 %102, label %"for blur_y.s0.x.x.rebased412.preheader", label %"end for blur_y.s0.x.x.rebased413", !prof !386

"for blur_y.s0.x.x.rebased412.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased405"
  %7784 = sext i32 %t1694 to i64
  %7785 = zext i32 %.pre-phi3510 to i64
  %7786 = mul nsw i64 %7785, %112
  %7787 = sub nsw i64 %7786, %96
  %7788 = zext i32 %.pre-phi3504 to i64
  %7789 = mul nsw i64 %7788, %112
  %7790 = sub nsw i64 %7789, %96
  %7791 = zext i32 %.pre-phi to i64
  %7792 = mul nsw i64 %7791, %112
  %7793 = sub nsw i64 %7792, %96
  %7794 = zext i32 %.pre-phi3484 to i64
  %7795 = mul nsw i64 %7794, %112
  %7796 = sub nsw i64 %7795, %96
  %7797 = zext i32 %.pre-phi3480 to i64
  %7798 = mul nsw i64 %7797, %112
  %7799 = sub nsw i64 %7798, %96
  %7800 = sext i32 %a26 to i64
  %7801 = add nsw i64 %7800, 14
  %7802 = mul nsw i64 %7801, %113
  %7803 = add nsw i64 %7802, %116
  br label %"for blur_y.s0.x.x.rebased412"

"produce blur_x410":                              ; preds = %"for blur_y.s0.x.x.rebased404"
  %t936 = add nsw i32 %7781, %t1929
  %7804 = sext i32 %t936 to i64
  %7805 = getelementptr inbounds i16, i16* %read_input, i64 %7804
  %7806 = getelementptr inbounds i16, i16* %7805, i64 1
  %7807 = bitcast i16* %7806 to <16 x i16>*
  %7808 = load <16 x i16>, <16 x i16>* %7807, align 2, !tbaa !396
  %7809 = getelementptr inbounds i16, i16* %7805, i64 17
  %7810 = bitcast i16* %7809 to <16 x i16>*
  %7811 = load <16 x i16>, <16 x i16>* %7810, align 2, !tbaa !396
  %7812 = bitcast i16* %7805 to <16 x i16>*
  %7813 = load <16 x i16>, <16 x i16>* %7812, align 2, !tbaa !396
  %7814 = getelementptr inbounds i16, i16* %7805, i64 16
  %7815 = bitcast i16* %7814 to <16 x i16>*
  %7816 = load <16 x i16>, <16 x i16>* %7815, align 2, !tbaa !396
  %7817 = getelementptr inbounds i16, i16* %7805, i64 2
  %7818 = bitcast i16* %7817 to <16 x i16>*
  %7819 = load <16 x i16>, <16 x i16>* %7818, align 2, !tbaa !396
  %7820 = getelementptr inbounds i16, i16* %7805, i64 18
  %7821 = bitcast i16* %7820 to <16 x i16>*
  %7822 = load <16 x i16>, <16 x i16>* %7821, align 2, !tbaa !396
  %7823 = getelementptr inbounds i16, i16* %7805, i64 4
  %7824 = bitcast i16* %7823 to <16 x i16>*
  %7825 = load <16 x i16>, <16 x i16>* %7824, align 2, !tbaa !396
  %7826 = getelementptr inbounds i16, i16* %7805, i64 20
  %7827 = bitcast i16* %7826 to <16 x i16>*
  %7828 = load <16 x i16>, <16 x i16>* %7827, align 2, !tbaa !396
  %7829 = getelementptr inbounds i16, i16* %7805, i64 3
  %7830 = bitcast i16* %7829 to <16 x i16>*
  %7831 = load <16 x i16>, <16 x i16>* %7830, align 2, !tbaa !396
  %7832 = getelementptr inbounds i16, i16* %7805, i64 19
  %7833 = bitcast i16* %7832 to <16 x i16>*
  %7834 = load <16 x i16>, <16 x i16>* %7833, align 2, !tbaa !396
  %7835 = add <16 x i16> %7813, %7808
  %7836 = add <16 x i16> %7835, %7819
  %7837 = add <16 x i16> %7836, %7825
  %7838 = add <16 x i16> %7837, %7831
  %7839 = add <16 x i16> %7816, %7811
  %7840 = add <16 x i16> %7839, %7822
  %7841 = add <16 x i16> %7840, %7828
  %7842 = add <16 x i16> %7841, %7834
  %7843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7838, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7842, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7845 = shufflevector <16 x i16> %7843, <16 x i16> %7844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7846 = lshr <32 x i16> %7845, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7847 = shufflevector <32 x i16> %7846, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7848 = shl nsw i64 %7778, 5
  %7849 = add nsw i64 %7848, %7633
  %7850 = getelementptr inbounds i16, i16* %blur_x, i64 %7849
  %7851 = bitcast i16* %7850 to <16 x i16>*
  store <16 x i16> %7847, <16 x i16>* %7851, align 2, !tbaa !399
  %7852 = shufflevector <32 x i16> %7846, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7853 = getelementptr inbounds i16, i16* %7850, i64 16
  %7854 = bitcast i16* %7853 to <16 x i16>*
  store <16 x i16> %7852, <16 x i16>* %7854, align 2, !tbaa !399
  br label %"consume blur_x411"

"consume blur_x411":                              ; preds = %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge", %"produce blur_x410"
  %.pre-phi3534 = phi i64 [ %.pre3533, %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge" ], [ %7848, %"produce blur_x410" ]
  %7855 = add nsw i64 %7636, %.pre-phi3534
  %7856 = getelementptr inbounds i16, i16* %blur_x, i64 %7855
  %7857 = bitcast i16* %7856 to <16 x i16>*
  %7858 = load <16 x i16>, <16 x i16>* %7857, align 2, !tbaa !399
  %7859 = getelementptr inbounds i16, i16* %7856, i64 16
  %7860 = bitcast i16* %7859 to <16 x i16>*
  %7861 = load <16 x i16>, <16 x i16>* %7860, align 2, !tbaa !399
  %7862 = add nsw i64 %7639, %.pre-phi3534
  %7863 = getelementptr inbounds i16, i16* %blur_x, i64 %7862
  %7864 = bitcast i16* %7863 to <16 x i16>*
  %7865 = load <16 x i16>, <16 x i16>* %7864, align 2, !tbaa !399
  %7866 = getelementptr inbounds i16, i16* %7863, i64 16
  %7867 = bitcast i16* %7866 to <16 x i16>*
  %7868 = load <16 x i16>, <16 x i16>* %7867, align 2, !tbaa !399
  %7869 = add nsw i64 %7642, %.pre-phi3534
  %7870 = getelementptr inbounds i16, i16* %blur_x, i64 %7869
  %7871 = bitcast i16* %7870 to <16 x i16>*
  %7872 = load <16 x i16>, <16 x i16>* %7871, align 2, !tbaa !399
  %7873 = getelementptr inbounds i16, i16* %7870, i64 16
  %7874 = bitcast i16* %7873 to <16 x i16>*
  %7875 = load <16 x i16>, <16 x i16>* %7874, align 2, !tbaa !399
  %7876 = add nsw i64 %7645, %.pre-phi3534
  %7877 = getelementptr inbounds i16, i16* %blur_x, i64 %7876
  %7878 = bitcast i16* %7877 to <16 x i16>*
  %7879 = load <16 x i16>, <16 x i16>* %7878, align 2, !tbaa !399
  %7880 = getelementptr inbounds i16, i16* %7877, i64 16
  %7881 = bitcast i16* %7880 to <16 x i16>*
  %7882 = load <16 x i16>, <16 x i16>* %7881, align 2, !tbaa !399
  %7883 = add nsw i64 %7648, %.pre-phi3534
  %7884 = getelementptr inbounds i16, i16* %blur_x, i64 %7883
  %7885 = bitcast i16* %7884 to <16 x i16>*
  %7886 = load <16 x i16>, <16 x i16>* %7885, align 2, !tbaa !399
  %7887 = getelementptr inbounds i16, i16* %7884, i64 16
  %7888 = bitcast i16* %7887 to <16 x i16>*
  %7889 = load <16 x i16>, <16 x i16>* %7888, align 2, !tbaa !399
  %7890 = add <16 x i16> %7865, %7858
  %7891 = add <16 x i16> %7890, %7872
  %7892 = add <16 x i16> %7891, %7879
  %7893 = add <16 x i16> %7892, %7886
  %7894 = add <16 x i16> %7868, %7861
  %7895 = add <16 x i16> %7894, %7875
  %7896 = add <16 x i16> %7895, %7882
  %7897 = add <16 x i16> %7896, %7889
  %7898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7893, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7897, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7900 = shufflevector <16 x i16> %7898, <16 x i16> %7899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7901 = lshr <32 x i16> %7900, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7902 = shufflevector <32 x i16> %7901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7903 = add nsw i64 %7652, %.pre-phi3534
  %7904 = getelementptr inbounds i16, i16* %66, i64 %7903
  %7905 = bitcast i16* %7904 to <16 x i16>*
  store <16 x i16> %7902, <16 x i16>* %7905, align 2, !tbaa !401
  %7906 = shufflevector <32 x i16> %7901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7907 = getelementptr inbounds i16, i16* %7904, i64 16
  %7908 = bitcast i16* %7907 to <16 x i16>*
  store <16 x i16> %7906, <16 x i16>* %7908, align 2, !tbaa !401
  %indvars.iv.next3302 = add nuw nsw i64 %indvars.iv3301, 1
  %.not2729 = icmp eq i64 %indvars.iv.next3302, %184
  br i1 %.not2729, label %"end for blur_y.s0.x.x.rebased405", label %"for blur_y.s0.x.x.rebased404"

"for blur_y.s0.x.x.rebased412":                   ; preds = %"for blur_y.s0.x.x.rebased412.preheader", %"consume blur_x420"
  %blur_y.s0.x.x.rebased414 = phi i32 [ %8021, %"consume blur_x420" ], [ 0, %"for blur_y.s0.x.x.rebased412.preheader" ]
  %7909 = add nsw i32 %blur_y.s0.x.x.rebased414, %t1626
  %a203 = shl nsw i32 %7909, 5
  %7910 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %7910, i32 %a203, i32 %a14
  %7911 = icmp slt i32 %7909, 1
  %7912 = icmp sgt i32 %4, %a203
  %7913 = or i1 %7911, %7912
  br i1 %7913, label %"produce blur_x418", label %"consume blur_x420"

"end for blur_y.s0.x.x.rebased413":               ; preds = %"consume blur_x420", %"end for blur_y.s0.x.x.rebased405"
  br i1 %34, label %"produce blur_x424", label %after_bb421

"produce blur_x418":                              ; preds = %"for blur_y.s0.x.x.rebased412"
  %7914 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s419 = select i1 %7914, i32 %b209, i32 %4
  %t941 = add nsw i32 %blur_x.s0.x.v1.base.s419, %t1929
  %7915 = sext i32 %t941 to i64
  %7916 = getelementptr inbounds i16, i16* %read_input, i64 %7915
  %7917 = getelementptr inbounds i16, i16* %7916, i64 1
  %7918 = bitcast i16* %7917 to <16 x i16>*
  %7919 = load <16 x i16>, <16 x i16>* %7918, align 2, !tbaa !396
  %7920 = getelementptr inbounds i16, i16* %7916, i64 17
  %7921 = bitcast i16* %7920 to <16 x i16>*
  %7922 = load <16 x i16>, <16 x i16>* %7921, align 2, !tbaa !396
  %7923 = bitcast i16* %7916 to <16 x i16>*
  %7924 = load <16 x i16>, <16 x i16>* %7923, align 2, !tbaa !396
  %7925 = getelementptr inbounds i16, i16* %7916, i64 16
  %7926 = bitcast i16* %7925 to <16 x i16>*
  %7927 = load <16 x i16>, <16 x i16>* %7926, align 2, !tbaa !396
  %7928 = getelementptr inbounds i16, i16* %7916, i64 2
  %7929 = bitcast i16* %7928 to <16 x i16>*
  %7930 = load <16 x i16>, <16 x i16>* %7929, align 2, !tbaa !396
  %7931 = getelementptr inbounds i16, i16* %7916, i64 18
  %7932 = bitcast i16* %7931 to <16 x i16>*
  %7933 = load <16 x i16>, <16 x i16>* %7932, align 2, !tbaa !396
  %7934 = getelementptr inbounds i16, i16* %7916, i64 4
  %7935 = bitcast i16* %7934 to <16 x i16>*
  %7936 = load <16 x i16>, <16 x i16>* %7935, align 2, !tbaa !396
  %7937 = getelementptr inbounds i16, i16* %7916, i64 20
  %7938 = bitcast i16* %7937 to <16 x i16>*
  %7939 = load <16 x i16>, <16 x i16>* %7938, align 2, !tbaa !396
  %7940 = getelementptr inbounds i16, i16* %7916, i64 3
  %7941 = bitcast i16* %7940 to <16 x i16>*
  %7942 = load <16 x i16>, <16 x i16>* %7941, align 2, !tbaa !396
  %7943 = getelementptr inbounds i16, i16* %7916, i64 19
  %7944 = bitcast i16* %7943 to <16 x i16>*
  %7945 = load <16 x i16>, <16 x i16>* %7944, align 2, !tbaa !396
  %7946 = add <16 x i16> %7924, %7919
  %7947 = add <16 x i16> %7946, %7930
  %7948 = add <16 x i16> %7947, %7936
  %7949 = add <16 x i16> %7948, %7942
  %7950 = add <16 x i16> %7927, %7922
  %7951 = add <16 x i16> %7950, %7933
  %7952 = add <16 x i16> %7951, %7939
  %7953 = add <16 x i16> %7952, %7945
  %7954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7949, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7953, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7956 = shufflevector <16 x i16> %7954, <16 x i16> %7955, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7957 = lshr <32 x i16> %7956, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7958 = shufflevector <32 x i16> %7957, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7959 = sext i32 %blur_x.s0.x.v1.base.s419 to i64
  %7960 = add nsw i64 %7959, %7784
  %7961 = getelementptr inbounds i16, i16* %blur_x, i64 %7960
  %7962 = bitcast i16* %7961 to <16 x i16>*
  store <16 x i16> %7958, <16 x i16>* %7962, align 2, !tbaa !399
  %7963 = shufflevector <32 x i16> %7957, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7964 = getelementptr inbounds i16, i16* %7961, i64 16
  %7965 = bitcast i16* %7964 to <16 x i16>*
  store <16 x i16> %7963, <16 x i16>* %7965, align 2, !tbaa !399
  br label %"consume blur_x420"

"consume blur_x420":                              ; preds = %"for blur_y.s0.x.x.rebased412", %"produce blur_x418"
  %7966 = sext i32 %b209 to i64
  %7967 = add nsw i64 %7787, %7966
  %7968 = getelementptr inbounds i16, i16* %blur_x, i64 %7967
  %7969 = bitcast i16* %7968 to <16 x i16>*
  %7970 = load <16 x i16>, <16 x i16>* %7969, align 2, !tbaa !399
  %7971 = getelementptr inbounds i16, i16* %7968, i64 16
  %7972 = bitcast i16* %7971 to <16 x i16>*
  %7973 = load <16 x i16>, <16 x i16>* %7972, align 2, !tbaa !399
  %7974 = add nsw i64 %7790, %7966
  %7975 = getelementptr inbounds i16, i16* %blur_x, i64 %7974
  %7976 = bitcast i16* %7975 to <16 x i16>*
  %7977 = load <16 x i16>, <16 x i16>* %7976, align 2, !tbaa !399
  %7978 = getelementptr inbounds i16, i16* %7975, i64 16
  %7979 = bitcast i16* %7978 to <16 x i16>*
  %7980 = load <16 x i16>, <16 x i16>* %7979, align 2, !tbaa !399
  %7981 = add nsw i64 %7793, %7966
  %7982 = getelementptr inbounds i16, i16* %blur_x, i64 %7981
  %7983 = bitcast i16* %7982 to <16 x i16>*
  %7984 = load <16 x i16>, <16 x i16>* %7983, align 2, !tbaa !399
  %7985 = getelementptr inbounds i16, i16* %7982, i64 16
  %7986 = bitcast i16* %7985 to <16 x i16>*
  %7987 = load <16 x i16>, <16 x i16>* %7986, align 2, !tbaa !399
  %7988 = add nsw i64 %7796, %7966
  %7989 = getelementptr inbounds i16, i16* %blur_x, i64 %7988
  %7990 = bitcast i16* %7989 to <16 x i16>*
  %7991 = load <16 x i16>, <16 x i16>* %7990, align 2, !tbaa !399
  %7992 = getelementptr inbounds i16, i16* %7989, i64 16
  %7993 = bitcast i16* %7992 to <16 x i16>*
  %7994 = load <16 x i16>, <16 x i16>* %7993, align 2, !tbaa !399
  %7995 = add nsw i64 %7799, %7966
  %7996 = getelementptr inbounds i16, i16* %blur_x, i64 %7995
  %7997 = bitcast i16* %7996 to <16 x i16>*
  %7998 = load <16 x i16>, <16 x i16>* %7997, align 2, !tbaa !399
  %7999 = getelementptr inbounds i16, i16* %7996, i64 16
  %8000 = bitcast i16* %7999 to <16 x i16>*
  %8001 = load <16 x i16>, <16 x i16>* %8000, align 2, !tbaa !399
  %8002 = add <16 x i16> %7977, %7970
  %8003 = add <16 x i16> %8002, %7984
  %8004 = add <16 x i16> %8003, %7991
  %8005 = add <16 x i16> %8004, %7998
  %8006 = add <16 x i16> %7980, %7973
  %8007 = add <16 x i16> %8006, %7987
  %8008 = add <16 x i16> %8007, %7994
  %8009 = add <16 x i16> %8008, %8001
  %8010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8005, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8009, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8012 = shufflevector <16 x i16> %8010, <16 x i16> %8011, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8013 = lshr <32 x i16> %8012, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8014 = shufflevector <32 x i16> %8013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8015 = add nsw i64 %7803, %7966
  %8016 = getelementptr inbounds i16, i16* %66, i64 %8015
  %8017 = bitcast i16* %8016 to <16 x i16>*
  store <16 x i16> %8014, <16 x i16>* %8017, align 2, !tbaa !401
  %8018 = shufflevector <32 x i16> %8013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8019 = getelementptr inbounds i16, i16* %8016, i64 16
  %8020 = bitcast i16* %8019 to <16 x i16>*
  store <16 x i16> %8018, <16 x i16>* %8020, align 2, !tbaa !401
  %8021 = add nuw nsw i32 %blur_y.s0.x.x.rebased414, 1
  %.not2728 = icmp eq i32 %8021, %t1683
  br i1 %.not2728, label %"end for blur_y.s0.x.x.rebased413", label %"for blur_y.s0.x.x.rebased412"

after_bb421:                                      ; preds = %"end for blur_y.s0.x.x.rebased413", %"produce blur_x424"
  br i1 %100, label %"for blur_y.s0.x.x.rebased426.preheader", label %"end for blur_y.s0.x.x.rebased427", !prof !386

"for blur_y.s0.x.x.rebased426.preheader":         ; preds = %after_bb421
  %8022 = sext i32 %t1700 to i64
  %8023 = zext i32 %.pre-phi to i64
  %8024 = mul nsw i64 %8023, %112
  %8025 = sub nsw i64 %8024, %96
  %8026 = zext i32 %.pre-phi3510 to i64
  %8027 = mul nsw i64 %8026, %112
  %8028 = sub nsw i64 %8027, %96
  %8029 = zext i32 %.pre-phi3480 to i64
  %8030 = mul nsw i64 %8029, %112
  %8031 = sub nsw i64 %8030, %96
  %8032 = zext i32 %.pre-phi3488 to i64
  %8033 = mul nsw i64 %8032, %112
  %8034 = sub nsw i64 %8033, %96
  %8035 = zext i32 %.pre-phi3484 to i64
  %8036 = mul nsw i64 %8035, %112
  %8037 = sub nsw i64 %8036, %96
  %8038 = sext i32 %a26 to i64
  %8039 = add nsw i64 %8038, 15
  %8040 = mul nsw i64 %8039, %113
  %8041 = add nsw i64 %8040, %116
  br label %"for blur_y.s0.x.x.rebased426"

"produce blur_x424":                              ; preds = %"end for blur_y.s0.x.x.rebased413"
  %8042 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %8043 = getelementptr inbounds i16, i16* %8042, i64 -31
  %8044 = bitcast i16* %8043 to <16 x i16>*
  %8045 = load <16 x i16>, <16 x i16>* %8044, align 2, !tbaa !396
  %8046 = getelementptr inbounds i16, i16* %8042, i64 -15
  %8047 = bitcast i16* %8046 to <16 x i16>*
  %8048 = load <16 x i16>, <16 x i16>* %8047, align 2, !tbaa !396
  %8049 = getelementptr inbounds i16, i16* %8042, i64 -32
  %8050 = bitcast i16* %8049 to <16 x i16>*
  %8051 = load <16 x i16>, <16 x i16>* %8050, align 2, !tbaa !396
  %8052 = getelementptr inbounds i16, i16* %8042, i64 -16
  %8053 = bitcast i16* %8052 to <16 x i16>*
  %8054 = load <16 x i16>, <16 x i16>* %8053, align 2, !tbaa !396
  %8055 = getelementptr inbounds i16, i16* %8042, i64 -30
  %8056 = bitcast i16* %8055 to <16 x i16>*
  %8057 = load <16 x i16>, <16 x i16>* %8056, align 2, !tbaa !396
  %8058 = getelementptr inbounds i16, i16* %8042, i64 -14
  %8059 = bitcast i16* %8058 to <16 x i16>*
  %8060 = load <16 x i16>, <16 x i16>* %8059, align 2, !tbaa !396
  %8061 = getelementptr inbounds i16, i16* %8042, i64 -28
  %8062 = bitcast i16* %8061 to <16 x i16>*
  %8063 = load <16 x i16>, <16 x i16>* %8062, align 2, !tbaa !396
  %8064 = getelementptr inbounds i16, i16* %8042, i64 -12
  %8065 = bitcast i16* %8064 to <16 x i16>*
  %8066 = load <16 x i16>, <16 x i16>* %8065, align 2, !tbaa !396
  %8067 = getelementptr inbounds i16, i16* %8042, i64 -29
  %8068 = bitcast i16* %8067 to <16 x i16>*
  %8069 = load <16 x i16>, <16 x i16>* %8068, align 2, !tbaa !396
  %8070 = getelementptr inbounds i16, i16* %8042, i64 -13
  %8071 = bitcast i16* %8070 to <16 x i16>*
  %8072 = load <16 x i16>, <16 x i16>* %8071, align 2, !tbaa !396
  %8073 = add <16 x i16> %8051, %8045
  %8074 = add <16 x i16> %8073, %8057
  %8075 = add <16 x i16> %8074, %8063
  %8076 = add <16 x i16> %8075, %8069
  %8077 = add <16 x i16> %8054, %8048
  %8078 = add <16 x i16> %8077, %8060
  %8079 = add <16 x i16> %8078, %8066
  %8080 = add <16 x i16> %8079, %8072
  %8081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8076, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8080, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8083 = shufflevector <16 x i16> %8081, <16 x i16> %8082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8084 = lshr <32 x i16> %8083, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8085 = shufflevector <32 x i16> %8084, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8086 = zext i32 %.pre-phi3488 to i64
  %8087 = mul nsw i64 %97, %8086
  %8088 = add nsw i64 %99, %8087
  %8089 = getelementptr inbounds i16, i16* %blur_x, i64 %8088
  %8090 = getelementptr inbounds i16, i16* %8089, i64 -32
  %8091 = bitcast i16* %8090 to <16 x i16>*
  store <16 x i16> %8085, <16 x i16>* %8091, align 2, !tbaa !399
  %8092 = shufflevector <32 x i16> %8084, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8093 = getelementptr inbounds i16, i16* %8089, i64 -16
  %8094 = bitcast i16* %8093 to <16 x i16>*
  store <16 x i16> %8092, <16 x i16>* %8094, align 2, !tbaa !399
  %8095 = zext i32 %.pre-phi to i64
  %8096 = mul nsw i64 %8095, %112
  %8097 = add nsw i64 %8096, %94
  %8098 = getelementptr inbounds i16, i16* %blur_x, i64 %8097
  %8099 = getelementptr inbounds i16, i16* %8098, i64 -32
  %8100 = bitcast i16* %8099 to <16 x i16>*
  %8101 = load <16 x i16>, <16 x i16>* %8100, align 2, !tbaa !399
  %8102 = getelementptr inbounds i16, i16* %8098, i64 -16
  %8103 = bitcast i16* %8102 to <16 x i16>*
  %8104 = load <16 x i16>, <16 x i16>* %8103, align 2, !tbaa !399
  %8105 = zext i32 %.pre-phi3510 to i64
  %8106 = mul nsw i64 %8105, %112
  %8107 = add nsw i64 %8106, %94
  %8108 = getelementptr inbounds i16, i16* %blur_x, i64 %8107
  %8109 = getelementptr inbounds i16, i16* %8108, i64 -32
  %8110 = bitcast i16* %8109 to <16 x i16>*
  %8111 = load <16 x i16>, <16 x i16>* %8110, align 2, !tbaa !399
  %8112 = getelementptr inbounds i16, i16* %8108, i64 -16
  %8113 = bitcast i16* %8112 to <16 x i16>*
  %8114 = load <16 x i16>, <16 x i16>* %8113, align 2, !tbaa !399
  %8115 = zext i32 %.pre-phi3480 to i64
  %8116 = mul nsw i64 %8115, %112
  %8117 = add nsw i64 %8116, %94
  %8118 = getelementptr inbounds i16, i16* %blur_x, i64 %8117
  %8119 = getelementptr inbounds i16, i16* %8118, i64 -32
  %8120 = bitcast i16* %8119 to <16 x i16>*
  %8121 = load <16 x i16>, <16 x i16>* %8120, align 2, !tbaa !399
  %8122 = getelementptr inbounds i16, i16* %8118, i64 -16
  %8123 = bitcast i16* %8122 to <16 x i16>*
  %8124 = load <16 x i16>, <16 x i16>* %8123, align 2, !tbaa !399
  %8125 = mul nsw i64 %8086, %112
  %8126 = add nsw i64 %8125, %94
  %8127 = getelementptr inbounds i16, i16* %blur_x, i64 %8126
  %8128 = getelementptr inbounds i16, i16* %8127, i64 -32
  %8129 = bitcast i16* %8128 to <16 x i16>*
  %8130 = load <16 x i16>, <16 x i16>* %8129, align 2, !tbaa !399
  %8131 = getelementptr inbounds i16, i16* %8127, i64 -16
  %8132 = bitcast i16* %8131 to <16 x i16>*
  %8133 = load <16 x i16>, <16 x i16>* %8132, align 2, !tbaa !399
  %8134 = zext i32 %.pre-phi3484 to i64
  %8135 = mul nsw i64 %8134, %112
  %8136 = add nsw i64 %8135, %94
  %8137 = getelementptr inbounds i16, i16* %blur_x, i64 %8136
  %8138 = getelementptr inbounds i16, i16* %8137, i64 -32
  %8139 = bitcast i16* %8138 to <16 x i16>*
  %8140 = load <16 x i16>, <16 x i16>* %8139, align 2, !tbaa !399
  %8141 = getelementptr inbounds i16, i16* %8137, i64 -16
  %8142 = bitcast i16* %8141 to <16 x i16>*
  %8143 = load <16 x i16>, <16 x i16>* %8142, align 2, !tbaa !399
  %8144 = add <16 x i16> %8111, %8101
  %8145 = add <16 x i16> %8144, %8121
  %8146 = add <16 x i16> %8145, %8130
  %8147 = add <16 x i16> %8146, %8140
  %8148 = add <16 x i16> %8114, %8104
  %8149 = add <16 x i16> %8148, %8124
  %8150 = add <16 x i16> %8149, %8133
  %8151 = add <16 x i16> %8150, %8143
  %8152 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8147, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8153 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8151, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8154 = shufflevector <16 x i16> %8152, <16 x i16> %8153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8155 = lshr <32 x i16> %8154, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8156 = shufflevector <32 x i16> %8155, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8157 = sext i32 %a26 to i64
  %8158 = add nsw i64 %8157, 15
  %8159 = mul nsw i64 %8158, %113
  %8160 = add nsw i64 %115, %8159
  %8161 = getelementptr inbounds i16, i16* %66, i64 %8160
  %8162 = getelementptr inbounds i16, i16* %8161, i64 -32
  %8163 = bitcast i16* %8162 to <16 x i16>*
  store <16 x i16> %8156, <16 x i16>* %8163, align 2, !tbaa !401
  %8164 = shufflevector <32 x i16> %8155, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8165 = getelementptr inbounds i16, i16* %8161, i64 -16
  %8166 = bitcast i16* %8165 to <16 x i16>*
  store <16 x i16> %8164, <16 x i16>* %8166, align 2, !tbaa !401
  br label %after_bb421

"for blur_y.s0.x.x.rebased426":                   ; preds = %"for blur_y.s0.x.x.rebased426.preheader", %"consume blur_x433"
  %indvars.iv3304 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased426.preheader" ], [ %indvars.iv.next3305, %"consume blur_x433" ]
  %8167 = add nsw i64 %indvars.iv3304, %101
  %8168 = icmp slt i64 %8167, 1
  %8169 = trunc i64 %8167 to i32
  %8170 = shl nsw i32 %8169, 5
  %8171 = icmp sgt i32 %4, %8170
  %8172 = or i1 %8168, %8171
  br i1 %8172, label %"produce blur_x432", label %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge"

"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased426"
  %.pre3535 = shl nsw i64 %8167, 5
  br label %"consume blur_x433"

"end for blur_y.s0.x.x.rebased427":               ; preds = %"consume blur_x433", %after_bb421
  br i1 %102, label %"for blur_y.s0.x.x.rebased434.preheader", label %"end for blur_y.s0.x.x.rebased435", !prof !386

"for blur_y.s0.x.x.rebased434.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased427"
  %8173 = sext i32 %t1700 to i64
  %8174 = zext i32 %.pre-phi to i64
  %8175 = mul nsw i64 %8174, %112
  %8176 = sub nsw i64 %8175, %96
  %8177 = zext i32 %.pre-phi3510 to i64
  %8178 = mul nsw i64 %8177, %112
  %8179 = sub nsw i64 %8178, %96
  %8180 = zext i32 %.pre-phi3480 to i64
  %8181 = mul nsw i64 %8180, %112
  %8182 = sub nsw i64 %8181, %96
  %8183 = zext i32 %.pre-phi3488 to i64
  %8184 = mul nsw i64 %8183, %112
  %8185 = sub nsw i64 %8184, %96
  %8186 = zext i32 %.pre-phi3484 to i64
  %8187 = mul nsw i64 %8186, %112
  %8188 = sub nsw i64 %8187, %96
  %8189 = sext i32 %a26 to i64
  %8190 = add nsw i64 %8189, 15
  %8191 = mul nsw i64 %8190, %113
  %8192 = add nsw i64 %8191, %116
  br label %"for blur_y.s0.x.x.rebased434"

"produce blur_x432":                              ; preds = %"for blur_y.s0.x.x.rebased426"
  %t952 = add nsw i32 %8170, %t1945
  %8193 = sext i32 %t952 to i64
  %8194 = getelementptr inbounds i16, i16* %read_input, i64 %8193
  %8195 = getelementptr inbounds i16, i16* %8194, i64 1
  %8196 = bitcast i16* %8195 to <16 x i16>*
  %8197 = load <16 x i16>, <16 x i16>* %8196, align 2, !tbaa !396
  %8198 = getelementptr inbounds i16, i16* %8194, i64 17
  %8199 = bitcast i16* %8198 to <16 x i16>*
  %8200 = load <16 x i16>, <16 x i16>* %8199, align 2, !tbaa !396
  %8201 = bitcast i16* %8194 to <16 x i16>*
  %8202 = load <16 x i16>, <16 x i16>* %8201, align 2, !tbaa !396
  %8203 = getelementptr inbounds i16, i16* %8194, i64 16
  %8204 = bitcast i16* %8203 to <16 x i16>*
  %8205 = load <16 x i16>, <16 x i16>* %8204, align 2, !tbaa !396
  %8206 = getelementptr inbounds i16, i16* %8194, i64 2
  %8207 = bitcast i16* %8206 to <16 x i16>*
  %8208 = load <16 x i16>, <16 x i16>* %8207, align 2, !tbaa !396
  %8209 = getelementptr inbounds i16, i16* %8194, i64 18
  %8210 = bitcast i16* %8209 to <16 x i16>*
  %8211 = load <16 x i16>, <16 x i16>* %8210, align 2, !tbaa !396
  %8212 = getelementptr inbounds i16, i16* %8194, i64 4
  %8213 = bitcast i16* %8212 to <16 x i16>*
  %8214 = load <16 x i16>, <16 x i16>* %8213, align 2, !tbaa !396
  %8215 = getelementptr inbounds i16, i16* %8194, i64 20
  %8216 = bitcast i16* %8215 to <16 x i16>*
  %8217 = load <16 x i16>, <16 x i16>* %8216, align 2, !tbaa !396
  %8218 = getelementptr inbounds i16, i16* %8194, i64 3
  %8219 = bitcast i16* %8218 to <16 x i16>*
  %8220 = load <16 x i16>, <16 x i16>* %8219, align 2, !tbaa !396
  %8221 = getelementptr inbounds i16, i16* %8194, i64 19
  %8222 = bitcast i16* %8221 to <16 x i16>*
  %8223 = load <16 x i16>, <16 x i16>* %8222, align 2, !tbaa !396
  %8224 = add <16 x i16> %8202, %8197
  %8225 = add <16 x i16> %8224, %8208
  %8226 = add <16 x i16> %8225, %8214
  %8227 = add <16 x i16> %8226, %8220
  %8228 = add <16 x i16> %8205, %8200
  %8229 = add <16 x i16> %8228, %8211
  %8230 = add <16 x i16> %8229, %8217
  %8231 = add <16 x i16> %8230, %8223
  %8232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8227, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8231, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8234 = shufflevector <16 x i16> %8232, <16 x i16> %8233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8235 = lshr <32 x i16> %8234, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8236 = shufflevector <32 x i16> %8235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8237 = shl nsw i64 %8167, 5
  %8238 = add nsw i64 %8237, %8022
  %8239 = getelementptr inbounds i16, i16* %blur_x, i64 %8238
  %8240 = bitcast i16* %8239 to <16 x i16>*
  store <16 x i16> %8236, <16 x i16>* %8240, align 2, !tbaa !399
  %8241 = shufflevector <32 x i16> %8235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8242 = getelementptr inbounds i16, i16* %8239, i64 16
  %8243 = bitcast i16* %8242 to <16 x i16>*
  store <16 x i16> %8241, <16 x i16>* %8243, align 2, !tbaa !399
  br label %"consume blur_x433"

"consume blur_x433":                              ; preds = %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge", %"produce blur_x432"
  %.pre-phi3536 = phi i64 [ %.pre3535, %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge" ], [ %8237, %"produce blur_x432" ]
  %8244 = add nsw i64 %8025, %.pre-phi3536
  %8245 = getelementptr inbounds i16, i16* %blur_x, i64 %8244
  %8246 = bitcast i16* %8245 to <16 x i16>*
  %8247 = load <16 x i16>, <16 x i16>* %8246, align 2, !tbaa !399
  %8248 = getelementptr inbounds i16, i16* %8245, i64 16
  %8249 = bitcast i16* %8248 to <16 x i16>*
  %8250 = load <16 x i16>, <16 x i16>* %8249, align 2, !tbaa !399
  %8251 = add nsw i64 %8028, %.pre-phi3536
  %8252 = getelementptr inbounds i16, i16* %blur_x, i64 %8251
  %8253 = bitcast i16* %8252 to <16 x i16>*
  %8254 = load <16 x i16>, <16 x i16>* %8253, align 2, !tbaa !399
  %8255 = getelementptr inbounds i16, i16* %8252, i64 16
  %8256 = bitcast i16* %8255 to <16 x i16>*
  %8257 = load <16 x i16>, <16 x i16>* %8256, align 2, !tbaa !399
  %8258 = add nsw i64 %8031, %.pre-phi3536
  %8259 = getelementptr inbounds i16, i16* %blur_x, i64 %8258
  %8260 = bitcast i16* %8259 to <16 x i16>*
  %8261 = load <16 x i16>, <16 x i16>* %8260, align 2, !tbaa !399
  %8262 = getelementptr inbounds i16, i16* %8259, i64 16
  %8263 = bitcast i16* %8262 to <16 x i16>*
  %8264 = load <16 x i16>, <16 x i16>* %8263, align 2, !tbaa !399
  %8265 = add nsw i64 %8034, %.pre-phi3536
  %8266 = getelementptr inbounds i16, i16* %blur_x, i64 %8265
  %8267 = bitcast i16* %8266 to <16 x i16>*
  %8268 = load <16 x i16>, <16 x i16>* %8267, align 2, !tbaa !399
  %8269 = getelementptr inbounds i16, i16* %8266, i64 16
  %8270 = bitcast i16* %8269 to <16 x i16>*
  %8271 = load <16 x i16>, <16 x i16>* %8270, align 2, !tbaa !399
  %8272 = add nsw i64 %8037, %.pre-phi3536
  %8273 = getelementptr inbounds i16, i16* %blur_x, i64 %8272
  %8274 = bitcast i16* %8273 to <16 x i16>*
  %8275 = load <16 x i16>, <16 x i16>* %8274, align 2, !tbaa !399
  %8276 = getelementptr inbounds i16, i16* %8273, i64 16
  %8277 = bitcast i16* %8276 to <16 x i16>*
  %8278 = load <16 x i16>, <16 x i16>* %8277, align 2, !tbaa !399
  %8279 = add <16 x i16> %8254, %8247
  %8280 = add <16 x i16> %8279, %8261
  %8281 = add <16 x i16> %8280, %8268
  %8282 = add <16 x i16> %8281, %8275
  %8283 = add <16 x i16> %8257, %8250
  %8284 = add <16 x i16> %8283, %8264
  %8285 = add <16 x i16> %8284, %8271
  %8286 = add <16 x i16> %8285, %8278
  %8287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8282, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8286, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8289 = shufflevector <16 x i16> %8287, <16 x i16> %8288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8290 = lshr <32 x i16> %8289, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8291 = shufflevector <32 x i16> %8290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8292 = add nsw i64 %8041, %.pre-phi3536
  %8293 = getelementptr inbounds i16, i16* %66, i64 %8292
  %8294 = bitcast i16* %8293 to <16 x i16>*
  store <16 x i16> %8291, <16 x i16>* %8294, align 2, !tbaa !401
  %8295 = shufflevector <32 x i16> %8290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8296 = getelementptr inbounds i16, i16* %8293, i64 16
  %8297 = bitcast i16* %8296 to <16 x i16>*
  store <16 x i16> %8295, <16 x i16>* %8297, align 2, !tbaa !401
  %indvars.iv.next3305 = add nuw nsw i64 %indvars.iv3304, 1
  %.not2727 = icmp eq i64 %indvars.iv.next3305, %184
  br i1 %.not2727, label %"end for blur_y.s0.x.x.rebased427", label %"for blur_y.s0.x.x.rebased426"

"for blur_y.s0.x.x.rebased434":                   ; preds = %"for blur_y.s0.x.x.rebased434.preheader", %"consume blur_x442"
  %blur_y.s0.x.x.rebased436 = phi i32 [ %8410, %"consume blur_x442" ], [ 0, %"for blur_y.s0.x.x.rebased434.preheader" ]
  %8298 = add nsw i32 %blur_y.s0.x.x.rebased436, %t1626
  %a210 = shl nsw i32 %8298, 5
  %8299 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %8299, i32 %a210, i32 %a14
  %8300 = icmp slt i32 %8298, 1
  %8301 = icmp sgt i32 %4, %a210
  %8302 = or i1 %8300, %8301
  br i1 %8302, label %"produce blur_x440", label %"consume blur_x442"

"end for blur_y.s0.x.x.rebased435":               ; preds = %"consume blur_x442", %"end for blur_y.s0.x.x.rebased427"
  br i1 %34, label %"produce blur_x446", label %after_bb443

"produce blur_x440":                              ; preds = %"for blur_y.s0.x.x.rebased434"
  %8303 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s441 = select i1 %8303, i32 %b216, i32 %4
  %t957 = add nsw i32 %blur_x.s0.x.v1.base.s441, %t1945
  %8304 = sext i32 %t957 to i64
  %8305 = getelementptr inbounds i16, i16* %read_input, i64 %8304
  %8306 = getelementptr inbounds i16, i16* %8305, i64 1
  %8307 = bitcast i16* %8306 to <16 x i16>*
  %8308 = load <16 x i16>, <16 x i16>* %8307, align 2, !tbaa !396
  %8309 = getelementptr inbounds i16, i16* %8305, i64 17
  %8310 = bitcast i16* %8309 to <16 x i16>*
  %8311 = load <16 x i16>, <16 x i16>* %8310, align 2, !tbaa !396
  %8312 = bitcast i16* %8305 to <16 x i16>*
  %8313 = load <16 x i16>, <16 x i16>* %8312, align 2, !tbaa !396
  %8314 = getelementptr inbounds i16, i16* %8305, i64 16
  %8315 = bitcast i16* %8314 to <16 x i16>*
  %8316 = load <16 x i16>, <16 x i16>* %8315, align 2, !tbaa !396
  %8317 = getelementptr inbounds i16, i16* %8305, i64 2
  %8318 = bitcast i16* %8317 to <16 x i16>*
  %8319 = load <16 x i16>, <16 x i16>* %8318, align 2, !tbaa !396
  %8320 = getelementptr inbounds i16, i16* %8305, i64 18
  %8321 = bitcast i16* %8320 to <16 x i16>*
  %8322 = load <16 x i16>, <16 x i16>* %8321, align 2, !tbaa !396
  %8323 = getelementptr inbounds i16, i16* %8305, i64 4
  %8324 = bitcast i16* %8323 to <16 x i16>*
  %8325 = load <16 x i16>, <16 x i16>* %8324, align 2, !tbaa !396
  %8326 = getelementptr inbounds i16, i16* %8305, i64 20
  %8327 = bitcast i16* %8326 to <16 x i16>*
  %8328 = load <16 x i16>, <16 x i16>* %8327, align 2, !tbaa !396
  %8329 = getelementptr inbounds i16, i16* %8305, i64 3
  %8330 = bitcast i16* %8329 to <16 x i16>*
  %8331 = load <16 x i16>, <16 x i16>* %8330, align 2, !tbaa !396
  %8332 = getelementptr inbounds i16, i16* %8305, i64 19
  %8333 = bitcast i16* %8332 to <16 x i16>*
  %8334 = load <16 x i16>, <16 x i16>* %8333, align 2, !tbaa !396
  %8335 = add <16 x i16> %8313, %8308
  %8336 = add <16 x i16> %8335, %8319
  %8337 = add <16 x i16> %8336, %8325
  %8338 = add <16 x i16> %8337, %8331
  %8339 = add <16 x i16> %8316, %8311
  %8340 = add <16 x i16> %8339, %8322
  %8341 = add <16 x i16> %8340, %8328
  %8342 = add <16 x i16> %8341, %8334
  %8343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8338, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8342, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8345 = shufflevector <16 x i16> %8343, <16 x i16> %8344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8346 = lshr <32 x i16> %8345, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8347 = shufflevector <32 x i16> %8346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8348 = sext i32 %blur_x.s0.x.v1.base.s441 to i64
  %8349 = add nsw i64 %8348, %8173
  %8350 = getelementptr inbounds i16, i16* %blur_x, i64 %8349
  %8351 = bitcast i16* %8350 to <16 x i16>*
  store <16 x i16> %8347, <16 x i16>* %8351, align 2, !tbaa !399
  %8352 = shufflevector <32 x i16> %8346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8353 = getelementptr inbounds i16, i16* %8350, i64 16
  %8354 = bitcast i16* %8353 to <16 x i16>*
  store <16 x i16> %8352, <16 x i16>* %8354, align 2, !tbaa !399
  br label %"consume blur_x442"

"consume blur_x442":                              ; preds = %"for blur_y.s0.x.x.rebased434", %"produce blur_x440"
  %8355 = sext i32 %b216 to i64
  %8356 = add nsw i64 %8176, %8355
  %8357 = getelementptr inbounds i16, i16* %blur_x, i64 %8356
  %8358 = bitcast i16* %8357 to <16 x i16>*
  %8359 = load <16 x i16>, <16 x i16>* %8358, align 2, !tbaa !399
  %8360 = getelementptr inbounds i16, i16* %8357, i64 16
  %8361 = bitcast i16* %8360 to <16 x i16>*
  %8362 = load <16 x i16>, <16 x i16>* %8361, align 2, !tbaa !399
  %8363 = add nsw i64 %8179, %8355
  %8364 = getelementptr inbounds i16, i16* %blur_x, i64 %8363
  %8365 = bitcast i16* %8364 to <16 x i16>*
  %8366 = load <16 x i16>, <16 x i16>* %8365, align 2, !tbaa !399
  %8367 = getelementptr inbounds i16, i16* %8364, i64 16
  %8368 = bitcast i16* %8367 to <16 x i16>*
  %8369 = load <16 x i16>, <16 x i16>* %8368, align 2, !tbaa !399
  %8370 = add nsw i64 %8182, %8355
  %8371 = getelementptr inbounds i16, i16* %blur_x, i64 %8370
  %8372 = bitcast i16* %8371 to <16 x i16>*
  %8373 = load <16 x i16>, <16 x i16>* %8372, align 2, !tbaa !399
  %8374 = getelementptr inbounds i16, i16* %8371, i64 16
  %8375 = bitcast i16* %8374 to <16 x i16>*
  %8376 = load <16 x i16>, <16 x i16>* %8375, align 2, !tbaa !399
  %8377 = add nsw i64 %8185, %8355
  %8378 = getelementptr inbounds i16, i16* %blur_x, i64 %8377
  %8379 = bitcast i16* %8378 to <16 x i16>*
  %8380 = load <16 x i16>, <16 x i16>* %8379, align 2, !tbaa !399
  %8381 = getelementptr inbounds i16, i16* %8378, i64 16
  %8382 = bitcast i16* %8381 to <16 x i16>*
  %8383 = load <16 x i16>, <16 x i16>* %8382, align 2, !tbaa !399
  %8384 = add nsw i64 %8188, %8355
  %8385 = getelementptr inbounds i16, i16* %blur_x, i64 %8384
  %8386 = bitcast i16* %8385 to <16 x i16>*
  %8387 = load <16 x i16>, <16 x i16>* %8386, align 2, !tbaa !399
  %8388 = getelementptr inbounds i16, i16* %8385, i64 16
  %8389 = bitcast i16* %8388 to <16 x i16>*
  %8390 = load <16 x i16>, <16 x i16>* %8389, align 2, !tbaa !399
  %8391 = add <16 x i16> %8366, %8359
  %8392 = add <16 x i16> %8391, %8373
  %8393 = add <16 x i16> %8392, %8380
  %8394 = add <16 x i16> %8393, %8387
  %8395 = add <16 x i16> %8369, %8362
  %8396 = add <16 x i16> %8395, %8376
  %8397 = add <16 x i16> %8396, %8383
  %8398 = add <16 x i16> %8397, %8390
  %8399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8394, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8398, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8401 = shufflevector <16 x i16> %8399, <16 x i16> %8400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8402 = lshr <32 x i16> %8401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8403 = shufflevector <32 x i16> %8402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8404 = add nsw i64 %8192, %8355
  %8405 = getelementptr inbounds i16, i16* %66, i64 %8404
  %8406 = bitcast i16* %8405 to <16 x i16>*
  store <16 x i16> %8403, <16 x i16>* %8406, align 2, !tbaa !401
  %8407 = shufflevector <32 x i16> %8402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8408 = getelementptr inbounds i16, i16* %8405, i64 16
  %8409 = bitcast i16* %8408 to <16 x i16>*
  store <16 x i16> %8407, <16 x i16>* %8409, align 2, !tbaa !401
  %8410 = add nuw nsw i32 %blur_y.s0.x.x.rebased436, 1
  %.not2726 = icmp eq i32 %8410, %t1683
  br i1 %.not2726, label %"end for blur_y.s0.x.x.rebased435", label %"for blur_y.s0.x.x.rebased434"

after_bb443:                                      ; preds = %"end for blur_y.s0.x.x.rebased435", %"produce blur_x446"
  br i1 %100, label %"for blur_y.s0.x.x.rebased448.preheader", label %"end for blur_y.s0.x.x.rebased449", !prof !386

"for blur_y.s0.x.x.rebased448.preheader":         ; preds = %after_bb443
  %8411 = sext i32 %t1706 to i64
  %8412 = zext i32 %.pre-phi3480 to i64
  %8413 = mul nsw i64 %8412, %112
  %8414 = sub nsw i64 %8413, %96
  %8415 = zext i32 %.pre-phi to i64
  %8416 = mul nsw i64 %8415, %112
  %8417 = sub nsw i64 %8416, %96
  %8418 = zext i32 %.pre-phi3484 to i64
  %8419 = mul nsw i64 %8418, %112
  %8420 = sub nsw i64 %8419, %96
  %8421 = zext i32 %.pre-phi3492 to i64
  %8422 = mul nsw i64 %8421, %112
  %8423 = sub nsw i64 %8422, %96
  %8424 = zext i32 %.pre-phi3488 to i64
  %8425 = mul nsw i64 %8424, %112
  %8426 = sub nsw i64 %8425, %96
  %8427 = sext i32 %a26 to i64
  %8428 = add nsw i64 %8427, 16
  %8429 = mul nsw i64 %8428, %113
  %8430 = add nsw i64 %8429, %116
  br label %"for blur_y.s0.x.x.rebased448"

"produce blur_x446":                              ; preds = %"end for blur_y.s0.x.x.rebased435"
  %8431 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %8432 = getelementptr inbounds i16, i16* %8431, i64 -31
  %8433 = bitcast i16* %8432 to <16 x i16>*
  %8434 = load <16 x i16>, <16 x i16>* %8433, align 2, !tbaa !396
  %8435 = getelementptr inbounds i16, i16* %8431, i64 -15
  %8436 = bitcast i16* %8435 to <16 x i16>*
  %8437 = load <16 x i16>, <16 x i16>* %8436, align 2, !tbaa !396
  %8438 = getelementptr inbounds i16, i16* %8431, i64 -32
  %8439 = bitcast i16* %8438 to <16 x i16>*
  %8440 = load <16 x i16>, <16 x i16>* %8439, align 2, !tbaa !396
  %8441 = getelementptr inbounds i16, i16* %8431, i64 -16
  %8442 = bitcast i16* %8441 to <16 x i16>*
  %8443 = load <16 x i16>, <16 x i16>* %8442, align 2, !tbaa !396
  %8444 = getelementptr inbounds i16, i16* %8431, i64 -30
  %8445 = bitcast i16* %8444 to <16 x i16>*
  %8446 = load <16 x i16>, <16 x i16>* %8445, align 2, !tbaa !396
  %8447 = getelementptr inbounds i16, i16* %8431, i64 -14
  %8448 = bitcast i16* %8447 to <16 x i16>*
  %8449 = load <16 x i16>, <16 x i16>* %8448, align 2, !tbaa !396
  %8450 = getelementptr inbounds i16, i16* %8431, i64 -28
  %8451 = bitcast i16* %8450 to <16 x i16>*
  %8452 = load <16 x i16>, <16 x i16>* %8451, align 2, !tbaa !396
  %8453 = getelementptr inbounds i16, i16* %8431, i64 -12
  %8454 = bitcast i16* %8453 to <16 x i16>*
  %8455 = load <16 x i16>, <16 x i16>* %8454, align 2, !tbaa !396
  %8456 = getelementptr inbounds i16, i16* %8431, i64 -29
  %8457 = bitcast i16* %8456 to <16 x i16>*
  %8458 = load <16 x i16>, <16 x i16>* %8457, align 2, !tbaa !396
  %8459 = getelementptr inbounds i16, i16* %8431, i64 -13
  %8460 = bitcast i16* %8459 to <16 x i16>*
  %8461 = load <16 x i16>, <16 x i16>* %8460, align 2, !tbaa !396
  %8462 = add <16 x i16> %8440, %8434
  %8463 = add <16 x i16> %8462, %8446
  %8464 = add <16 x i16> %8463, %8452
  %8465 = add <16 x i16> %8464, %8458
  %8466 = add <16 x i16> %8443, %8437
  %8467 = add <16 x i16> %8466, %8449
  %8468 = add <16 x i16> %8467, %8455
  %8469 = add <16 x i16> %8468, %8461
  %8470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8465, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8469, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8472 = shufflevector <16 x i16> %8470, <16 x i16> %8471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8473 = lshr <32 x i16> %8472, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8474 = shufflevector <32 x i16> %8473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8475 = zext i32 %.pre-phi3492 to i64
  %8476 = mul nsw i64 %97, %8475
  %8477 = add nsw i64 %99, %8476
  %8478 = getelementptr inbounds i16, i16* %blur_x, i64 %8477
  %8479 = getelementptr inbounds i16, i16* %8478, i64 -32
  %8480 = bitcast i16* %8479 to <16 x i16>*
  store <16 x i16> %8474, <16 x i16>* %8480, align 2, !tbaa !399
  %8481 = shufflevector <32 x i16> %8473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8482 = getelementptr inbounds i16, i16* %8478, i64 -16
  %8483 = bitcast i16* %8482 to <16 x i16>*
  store <16 x i16> %8481, <16 x i16>* %8483, align 2, !tbaa !399
  %8484 = zext i32 %.pre-phi3480 to i64
  %8485 = mul nsw i64 %8484, %112
  %8486 = add nsw i64 %8485, %94
  %8487 = getelementptr inbounds i16, i16* %blur_x, i64 %8486
  %8488 = getelementptr inbounds i16, i16* %8487, i64 -32
  %8489 = bitcast i16* %8488 to <16 x i16>*
  %8490 = load <16 x i16>, <16 x i16>* %8489, align 2, !tbaa !399
  %8491 = getelementptr inbounds i16, i16* %8487, i64 -16
  %8492 = bitcast i16* %8491 to <16 x i16>*
  %8493 = load <16 x i16>, <16 x i16>* %8492, align 2, !tbaa !399
  %8494 = zext i32 %.pre-phi to i64
  %8495 = mul nsw i64 %8494, %112
  %8496 = add nsw i64 %8495, %94
  %8497 = getelementptr inbounds i16, i16* %blur_x, i64 %8496
  %8498 = getelementptr inbounds i16, i16* %8497, i64 -32
  %8499 = bitcast i16* %8498 to <16 x i16>*
  %8500 = load <16 x i16>, <16 x i16>* %8499, align 2, !tbaa !399
  %8501 = getelementptr inbounds i16, i16* %8497, i64 -16
  %8502 = bitcast i16* %8501 to <16 x i16>*
  %8503 = load <16 x i16>, <16 x i16>* %8502, align 2, !tbaa !399
  %8504 = zext i32 %.pre-phi3484 to i64
  %8505 = mul nsw i64 %8504, %112
  %8506 = add nsw i64 %8505, %94
  %8507 = getelementptr inbounds i16, i16* %blur_x, i64 %8506
  %8508 = getelementptr inbounds i16, i16* %8507, i64 -32
  %8509 = bitcast i16* %8508 to <16 x i16>*
  %8510 = load <16 x i16>, <16 x i16>* %8509, align 2, !tbaa !399
  %8511 = getelementptr inbounds i16, i16* %8507, i64 -16
  %8512 = bitcast i16* %8511 to <16 x i16>*
  %8513 = load <16 x i16>, <16 x i16>* %8512, align 2, !tbaa !399
  %8514 = mul nsw i64 %8475, %112
  %8515 = add nsw i64 %8514, %94
  %8516 = getelementptr inbounds i16, i16* %blur_x, i64 %8515
  %8517 = getelementptr inbounds i16, i16* %8516, i64 -32
  %8518 = bitcast i16* %8517 to <16 x i16>*
  %8519 = load <16 x i16>, <16 x i16>* %8518, align 2, !tbaa !399
  %8520 = getelementptr inbounds i16, i16* %8516, i64 -16
  %8521 = bitcast i16* %8520 to <16 x i16>*
  %8522 = load <16 x i16>, <16 x i16>* %8521, align 2, !tbaa !399
  %8523 = zext i32 %.pre-phi3488 to i64
  %8524 = mul nsw i64 %8523, %112
  %8525 = add nsw i64 %8524, %94
  %8526 = getelementptr inbounds i16, i16* %blur_x, i64 %8525
  %8527 = getelementptr inbounds i16, i16* %8526, i64 -32
  %8528 = bitcast i16* %8527 to <16 x i16>*
  %8529 = load <16 x i16>, <16 x i16>* %8528, align 2, !tbaa !399
  %8530 = getelementptr inbounds i16, i16* %8526, i64 -16
  %8531 = bitcast i16* %8530 to <16 x i16>*
  %8532 = load <16 x i16>, <16 x i16>* %8531, align 2, !tbaa !399
  %8533 = add <16 x i16> %8500, %8490
  %8534 = add <16 x i16> %8533, %8510
  %8535 = add <16 x i16> %8534, %8519
  %8536 = add <16 x i16> %8535, %8529
  %8537 = add <16 x i16> %8503, %8493
  %8538 = add <16 x i16> %8537, %8513
  %8539 = add <16 x i16> %8538, %8522
  %8540 = add <16 x i16> %8539, %8532
  %8541 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8536, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8542 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8540, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8543 = shufflevector <16 x i16> %8541, <16 x i16> %8542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8544 = lshr <32 x i16> %8543, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8545 = shufflevector <32 x i16> %8544, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8546 = sext i32 %a26 to i64
  %8547 = add nsw i64 %8546, 16
  %8548 = mul nsw i64 %8547, %113
  %8549 = add nsw i64 %115, %8548
  %8550 = getelementptr inbounds i16, i16* %66, i64 %8549
  %8551 = getelementptr inbounds i16, i16* %8550, i64 -32
  %8552 = bitcast i16* %8551 to <16 x i16>*
  store <16 x i16> %8545, <16 x i16>* %8552, align 2, !tbaa !401
  %8553 = shufflevector <32 x i16> %8544, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8554 = getelementptr inbounds i16, i16* %8550, i64 -16
  %8555 = bitcast i16* %8554 to <16 x i16>*
  store <16 x i16> %8553, <16 x i16>* %8555, align 2, !tbaa !401
  br label %after_bb443

"for blur_y.s0.x.x.rebased448":                   ; preds = %"for blur_y.s0.x.x.rebased448.preheader", %"consume blur_x455"
  %indvars.iv3307 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased448.preheader" ], [ %indvars.iv.next3308, %"consume blur_x455" ]
  %8556 = add nsw i64 %indvars.iv3307, %101
  %8557 = icmp slt i64 %8556, 1
  %8558 = trunc i64 %8556 to i32
  %8559 = shl nsw i32 %8558, 5
  %8560 = icmp sgt i32 %4, %8559
  %8561 = or i1 %8557, %8560
  br i1 %8561, label %"produce blur_x454", label %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge"

"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased448"
  %.pre3537 = shl nsw i64 %8556, 5
  br label %"consume blur_x455"

"end for blur_y.s0.x.x.rebased449":               ; preds = %"consume blur_x455", %after_bb443
  br i1 %102, label %"for blur_y.s0.x.x.rebased456.preheader", label %"end for blur_y.s0.x.x.rebased457", !prof !386

"for blur_y.s0.x.x.rebased456.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased449"
  %8562 = sext i32 %t1706 to i64
  %8563 = zext i32 %.pre-phi3480 to i64
  %8564 = mul nsw i64 %8563, %112
  %8565 = sub nsw i64 %8564, %96
  %8566 = zext i32 %.pre-phi to i64
  %8567 = mul nsw i64 %8566, %112
  %8568 = sub nsw i64 %8567, %96
  %8569 = zext i32 %.pre-phi3484 to i64
  %8570 = mul nsw i64 %8569, %112
  %8571 = sub nsw i64 %8570, %96
  %8572 = zext i32 %.pre-phi3492 to i64
  %8573 = mul nsw i64 %8572, %112
  %8574 = sub nsw i64 %8573, %96
  %8575 = zext i32 %.pre-phi3488 to i64
  %8576 = mul nsw i64 %8575, %112
  %8577 = sub nsw i64 %8576, %96
  %8578 = sext i32 %a26 to i64
  %8579 = add nsw i64 %8578, 16
  %8580 = mul nsw i64 %8579, %113
  %8581 = add nsw i64 %8580, %116
  br label %"for blur_y.s0.x.x.rebased456"

"produce blur_x454":                              ; preds = %"for blur_y.s0.x.x.rebased448"
  %t968 = add nsw i32 %8559, %t1961
  %8582 = sext i32 %t968 to i64
  %8583 = getelementptr inbounds i16, i16* %read_input, i64 %8582
  %8584 = getelementptr inbounds i16, i16* %8583, i64 1
  %8585 = bitcast i16* %8584 to <16 x i16>*
  %8586 = load <16 x i16>, <16 x i16>* %8585, align 2, !tbaa !396
  %8587 = getelementptr inbounds i16, i16* %8583, i64 17
  %8588 = bitcast i16* %8587 to <16 x i16>*
  %8589 = load <16 x i16>, <16 x i16>* %8588, align 2, !tbaa !396
  %8590 = bitcast i16* %8583 to <16 x i16>*
  %8591 = load <16 x i16>, <16 x i16>* %8590, align 2, !tbaa !396
  %8592 = getelementptr inbounds i16, i16* %8583, i64 16
  %8593 = bitcast i16* %8592 to <16 x i16>*
  %8594 = load <16 x i16>, <16 x i16>* %8593, align 2, !tbaa !396
  %8595 = getelementptr inbounds i16, i16* %8583, i64 2
  %8596 = bitcast i16* %8595 to <16 x i16>*
  %8597 = load <16 x i16>, <16 x i16>* %8596, align 2, !tbaa !396
  %8598 = getelementptr inbounds i16, i16* %8583, i64 18
  %8599 = bitcast i16* %8598 to <16 x i16>*
  %8600 = load <16 x i16>, <16 x i16>* %8599, align 2, !tbaa !396
  %8601 = getelementptr inbounds i16, i16* %8583, i64 4
  %8602 = bitcast i16* %8601 to <16 x i16>*
  %8603 = load <16 x i16>, <16 x i16>* %8602, align 2, !tbaa !396
  %8604 = getelementptr inbounds i16, i16* %8583, i64 20
  %8605 = bitcast i16* %8604 to <16 x i16>*
  %8606 = load <16 x i16>, <16 x i16>* %8605, align 2, !tbaa !396
  %8607 = getelementptr inbounds i16, i16* %8583, i64 3
  %8608 = bitcast i16* %8607 to <16 x i16>*
  %8609 = load <16 x i16>, <16 x i16>* %8608, align 2, !tbaa !396
  %8610 = getelementptr inbounds i16, i16* %8583, i64 19
  %8611 = bitcast i16* %8610 to <16 x i16>*
  %8612 = load <16 x i16>, <16 x i16>* %8611, align 2, !tbaa !396
  %8613 = add <16 x i16> %8591, %8586
  %8614 = add <16 x i16> %8613, %8597
  %8615 = add <16 x i16> %8614, %8603
  %8616 = add <16 x i16> %8615, %8609
  %8617 = add <16 x i16> %8594, %8589
  %8618 = add <16 x i16> %8617, %8600
  %8619 = add <16 x i16> %8618, %8606
  %8620 = add <16 x i16> %8619, %8612
  %8621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8616, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8620, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8623 = shufflevector <16 x i16> %8621, <16 x i16> %8622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8624 = lshr <32 x i16> %8623, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8625 = shufflevector <32 x i16> %8624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8626 = shl nsw i64 %8556, 5
  %8627 = add nsw i64 %8626, %8411
  %8628 = getelementptr inbounds i16, i16* %blur_x, i64 %8627
  %8629 = bitcast i16* %8628 to <16 x i16>*
  store <16 x i16> %8625, <16 x i16>* %8629, align 2, !tbaa !399
  %8630 = shufflevector <32 x i16> %8624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8631 = getelementptr inbounds i16, i16* %8628, i64 16
  %8632 = bitcast i16* %8631 to <16 x i16>*
  store <16 x i16> %8630, <16 x i16>* %8632, align 2, !tbaa !399
  br label %"consume blur_x455"

"consume blur_x455":                              ; preds = %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge", %"produce blur_x454"
  %.pre-phi3538 = phi i64 [ %.pre3537, %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge" ], [ %8626, %"produce blur_x454" ]
  %8633 = add nsw i64 %8414, %.pre-phi3538
  %8634 = getelementptr inbounds i16, i16* %blur_x, i64 %8633
  %8635 = bitcast i16* %8634 to <16 x i16>*
  %8636 = load <16 x i16>, <16 x i16>* %8635, align 2, !tbaa !399
  %8637 = getelementptr inbounds i16, i16* %8634, i64 16
  %8638 = bitcast i16* %8637 to <16 x i16>*
  %8639 = load <16 x i16>, <16 x i16>* %8638, align 2, !tbaa !399
  %8640 = add nsw i64 %8417, %.pre-phi3538
  %8641 = getelementptr inbounds i16, i16* %blur_x, i64 %8640
  %8642 = bitcast i16* %8641 to <16 x i16>*
  %8643 = load <16 x i16>, <16 x i16>* %8642, align 2, !tbaa !399
  %8644 = getelementptr inbounds i16, i16* %8641, i64 16
  %8645 = bitcast i16* %8644 to <16 x i16>*
  %8646 = load <16 x i16>, <16 x i16>* %8645, align 2, !tbaa !399
  %8647 = add nsw i64 %8420, %.pre-phi3538
  %8648 = getelementptr inbounds i16, i16* %blur_x, i64 %8647
  %8649 = bitcast i16* %8648 to <16 x i16>*
  %8650 = load <16 x i16>, <16 x i16>* %8649, align 2, !tbaa !399
  %8651 = getelementptr inbounds i16, i16* %8648, i64 16
  %8652 = bitcast i16* %8651 to <16 x i16>*
  %8653 = load <16 x i16>, <16 x i16>* %8652, align 2, !tbaa !399
  %8654 = add nsw i64 %8423, %.pre-phi3538
  %8655 = getelementptr inbounds i16, i16* %blur_x, i64 %8654
  %8656 = bitcast i16* %8655 to <16 x i16>*
  %8657 = load <16 x i16>, <16 x i16>* %8656, align 2, !tbaa !399
  %8658 = getelementptr inbounds i16, i16* %8655, i64 16
  %8659 = bitcast i16* %8658 to <16 x i16>*
  %8660 = load <16 x i16>, <16 x i16>* %8659, align 2, !tbaa !399
  %8661 = add nsw i64 %8426, %.pre-phi3538
  %8662 = getelementptr inbounds i16, i16* %blur_x, i64 %8661
  %8663 = bitcast i16* %8662 to <16 x i16>*
  %8664 = load <16 x i16>, <16 x i16>* %8663, align 2, !tbaa !399
  %8665 = getelementptr inbounds i16, i16* %8662, i64 16
  %8666 = bitcast i16* %8665 to <16 x i16>*
  %8667 = load <16 x i16>, <16 x i16>* %8666, align 2, !tbaa !399
  %8668 = add <16 x i16> %8643, %8636
  %8669 = add <16 x i16> %8668, %8650
  %8670 = add <16 x i16> %8669, %8657
  %8671 = add <16 x i16> %8670, %8664
  %8672 = add <16 x i16> %8646, %8639
  %8673 = add <16 x i16> %8672, %8653
  %8674 = add <16 x i16> %8673, %8660
  %8675 = add <16 x i16> %8674, %8667
  %8676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8671, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8675, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8678 = shufflevector <16 x i16> %8676, <16 x i16> %8677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8679 = lshr <32 x i16> %8678, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8680 = shufflevector <32 x i16> %8679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8681 = add nsw i64 %8430, %.pre-phi3538
  %8682 = getelementptr inbounds i16, i16* %66, i64 %8681
  %8683 = bitcast i16* %8682 to <16 x i16>*
  store <16 x i16> %8680, <16 x i16>* %8683, align 2, !tbaa !401
  %8684 = shufflevector <32 x i16> %8679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8685 = getelementptr inbounds i16, i16* %8682, i64 16
  %8686 = bitcast i16* %8685 to <16 x i16>*
  store <16 x i16> %8684, <16 x i16>* %8686, align 2, !tbaa !401
  %indvars.iv.next3308 = add nuw nsw i64 %indvars.iv3307, 1
  %.not2725 = icmp eq i64 %indvars.iv.next3308, %184
  br i1 %.not2725, label %"end for blur_y.s0.x.x.rebased449", label %"for blur_y.s0.x.x.rebased448"

"for blur_y.s0.x.x.rebased456":                   ; preds = %"for blur_y.s0.x.x.rebased456.preheader", %"consume blur_x464"
  %blur_y.s0.x.x.rebased458 = phi i32 [ %8799, %"consume blur_x464" ], [ 0, %"for blur_y.s0.x.x.rebased456.preheader" ]
  %8687 = add nsw i32 %blur_y.s0.x.x.rebased458, %t1626
  %a217 = shl nsw i32 %8687, 5
  %8688 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %8688, i32 %a217, i32 %a14
  %8689 = icmp slt i32 %8687, 1
  %8690 = icmp sgt i32 %4, %a217
  %8691 = or i1 %8689, %8690
  br i1 %8691, label %"produce blur_x462", label %"consume blur_x464"

"end for blur_y.s0.x.x.rebased457":               ; preds = %"consume blur_x464", %"end for blur_y.s0.x.x.rebased449"
  br i1 %34, label %"produce blur_x468", label %after_bb465

"produce blur_x462":                              ; preds = %"for blur_y.s0.x.x.rebased456"
  %8692 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s463 = select i1 %8692, i32 %b223, i32 %4
  %t973 = add nsw i32 %blur_x.s0.x.v1.base.s463, %t1961
  %8693 = sext i32 %t973 to i64
  %8694 = getelementptr inbounds i16, i16* %read_input, i64 %8693
  %8695 = getelementptr inbounds i16, i16* %8694, i64 1
  %8696 = bitcast i16* %8695 to <16 x i16>*
  %8697 = load <16 x i16>, <16 x i16>* %8696, align 2, !tbaa !396
  %8698 = getelementptr inbounds i16, i16* %8694, i64 17
  %8699 = bitcast i16* %8698 to <16 x i16>*
  %8700 = load <16 x i16>, <16 x i16>* %8699, align 2, !tbaa !396
  %8701 = bitcast i16* %8694 to <16 x i16>*
  %8702 = load <16 x i16>, <16 x i16>* %8701, align 2, !tbaa !396
  %8703 = getelementptr inbounds i16, i16* %8694, i64 16
  %8704 = bitcast i16* %8703 to <16 x i16>*
  %8705 = load <16 x i16>, <16 x i16>* %8704, align 2, !tbaa !396
  %8706 = getelementptr inbounds i16, i16* %8694, i64 2
  %8707 = bitcast i16* %8706 to <16 x i16>*
  %8708 = load <16 x i16>, <16 x i16>* %8707, align 2, !tbaa !396
  %8709 = getelementptr inbounds i16, i16* %8694, i64 18
  %8710 = bitcast i16* %8709 to <16 x i16>*
  %8711 = load <16 x i16>, <16 x i16>* %8710, align 2, !tbaa !396
  %8712 = getelementptr inbounds i16, i16* %8694, i64 4
  %8713 = bitcast i16* %8712 to <16 x i16>*
  %8714 = load <16 x i16>, <16 x i16>* %8713, align 2, !tbaa !396
  %8715 = getelementptr inbounds i16, i16* %8694, i64 20
  %8716 = bitcast i16* %8715 to <16 x i16>*
  %8717 = load <16 x i16>, <16 x i16>* %8716, align 2, !tbaa !396
  %8718 = getelementptr inbounds i16, i16* %8694, i64 3
  %8719 = bitcast i16* %8718 to <16 x i16>*
  %8720 = load <16 x i16>, <16 x i16>* %8719, align 2, !tbaa !396
  %8721 = getelementptr inbounds i16, i16* %8694, i64 19
  %8722 = bitcast i16* %8721 to <16 x i16>*
  %8723 = load <16 x i16>, <16 x i16>* %8722, align 2, !tbaa !396
  %8724 = add <16 x i16> %8702, %8697
  %8725 = add <16 x i16> %8724, %8708
  %8726 = add <16 x i16> %8725, %8714
  %8727 = add <16 x i16> %8726, %8720
  %8728 = add <16 x i16> %8705, %8700
  %8729 = add <16 x i16> %8728, %8711
  %8730 = add <16 x i16> %8729, %8717
  %8731 = add <16 x i16> %8730, %8723
  %8732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8727, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8731, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8734 = shufflevector <16 x i16> %8732, <16 x i16> %8733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8735 = lshr <32 x i16> %8734, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8736 = shufflevector <32 x i16> %8735, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8737 = sext i32 %blur_x.s0.x.v1.base.s463 to i64
  %8738 = add nsw i64 %8737, %8562
  %8739 = getelementptr inbounds i16, i16* %blur_x, i64 %8738
  %8740 = bitcast i16* %8739 to <16 x i16>*
  store <16 x i16> %8736, <16 x i16>* %8740, align 2, !tbaa !399
  %8741 = shufflevector <32 x i16> %8735, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8742 = getelementptr inbounds i16, i16* %8739, i64 16
  %8743 = bitcast i16* %8742 to <16 x i16>*
  store <16 x i16> %8741, <16 x i16>* %8743, align 2, !tbaa !399
  br label %"consume blur_x464"

"consume blur_x464":                              ; preds = %"for blur_y.s0.x.x.rebased456", %"produce blur_x462"
  %8744 = sext i32 %b223 to i64
  %8745 = add nsw i64 %8565, %8744
  %8746 = getelementptr inbounds i16, i16* %blur_x, i64 %8745
  %8747 = bitcast i16* %8746 to <16 x i16>*
  %8748 = load <16 x i16>, <16 x i16>* %8747, align 2, !tbaa !399
  %8749 = getelementptr inbounds i16, i16* %8746, i64 16
  %8750 = bitcast i16* %8749 to <16 x i16>*
  %8751 = load <16 x i16>, <16 x i16>* %8750, align 2, !tbaa !399
  %8752 = add nsw i64 %8568, %8744
  %8753 = getelementptr inbounds i16, i16* %blur_x, i64 %8752
  %8754 = bitcast i16* %8753 to <16 x i16>*
  %8755 = load <16 x i16>, <16 x i16>* %8754, align 2, !tbaa !399
  %8756 = getelementptr inbounds i16, i16* %8753, i64 16
  %8757 = bitcast i16* %8756 to <16 x i16>*
  %8758 = load <16 x i16>, <16 x i16>* %8757, align 2, !tbaa !399
  %8759 = add nsw i64 %8571, %8744
  %8760 = getelementptr inbounds i16, i16* %blur_x, i64 %8759
  %8761 = bitcast i16* %8760 to <16 x i16>*
  %8762 = load <16 x i16>, <16 x i16>* %8761, align 2, !tbaa !399
  %8763 = getelementptr inbounds i16, i16* %8760, i64 16
  %8764 = bitcast i16* %8763 to <16 x i16>*
  %8765 = load <16 x i16>, <16 x i16>* %8764, align 2, !tbaa !399
  %8766 = add nsw i64 %8574, %8744
  %8767 = getelementptr inbounds i16, i16* %blur_x, i64 %8766
  %8768 = bitcast i16* %8767 to <16 x i16>*
  %8769 = load <16 x i16>, <16 x i16>* %8768, align 2, !tbaa !399
  %8770 = getelementptr inbounds i16, i16* %8767, i64 16
  %8771 = bitcast i16* %8770 to <16 x i16>*
  %8772 = load <16 x i16>, <16 x i16>* %8771, align 2, !tbaa !399
  %8773 = add nsw i64 %8577, %8744
  %8774 = getelementptr inbounds i16, i16* %blur_x, i64 %8773
  %8775 = bitcast i16* %8774 to <16 x i16>*
  %8776 = load <16 x i16>, <16 x i16>* %8775, align 2, !tbaa !399
  %8777 = getelementptr inbounds i16, i16* %8774, i64 16
  %8778 = bitcast i16* %8777 to <16 x i16>*
  %8779 = load <16 x i16>, <16 x i16>* %8778, align 2, !tbaa !399
  %8780 = add <16 x i16> %8755, %8748
  %8781 = add <16 x i16> %8780, %8762
  %8782 = add <16 x i16> %8781, %8769
  %8783 = add <16 x i16> %8782, %8776
  %8784 = add <16 x i16> %8758, %8751
  %8785 = add <16 x i16> %8784, %8765
  %8786 = add <16 x i16> %8785, %8772
  %8787 = add <16 x i16> %8786, %8779
  %8788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8787, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8790 = shufflevector <16 x i16> %8788, <16 x i16> %8789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8791 = lshr <32 x i16> %8790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8792 = shufflevector <32 x i16> %8791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8793 = add nsw i64 %8581, %8744
  %8794 = getelementptr inbounds i16, i16* %66, i64 %8793
  %8795 = bitcast i16* %8794 to <16 x i16>*
  store <16 x i16> %8792, <16 x i16>* %8795, align 2, !tbaa !401
  %8796 = shufflevector <32 x i16> %8791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8797 = getelementptr inbounds i16, i16* %8794, i64 16
  %8798 = bitcast i16* %8797 to <16 x i16>*
  store <16 x i16> %8796, <16 x i16>* %8798, align 2, !tbaa !401
  %8799 = add nuw nsw i32 %blur_y.s0.x.x.rebased458, 1
  %.not2724 = icmp eq i32 %8799, %t1683
  br i1 %.not2724, label %"end for blur_y.s0.x.x.rebased457", label %"for blur_y.s0.x.x.rebased456"

after_bb465:                                      ; preds = %"end for blur_y.s0.x.x.rebased457", %"produce blur_x468"
  br i1 %100, label %"for blur_y.s0.x.x.rebased470.preheader", label %"end for blur_y.s0.x.x.rebased471", !prof !386

"for blur_y.s0.x.x.rebased470.preheader":         ; preds = %after_bb465
  %8800 = sext i32 %t1722 to i64
  %8801 = zext i32 %.pre-phi3484 to i64
  %8802 = mul nsw i64 %8801, %112
  %8803 = sub nsw i64 %8802, %96
  %8804 = zext i32 %.pre-phi3480 to i64
  %8805 = mul nsw i64 %8804, %112
  %8806 = sub nsw i64 %8805, %96
  %8807 = zext i32 %.pre-phi3488 to i64
  %8808 = mul nsw i64 %8807, %112
  %8809 = sub nsw i64 %8808, %96
  %8810 = zext i32 %.pre-phi3498 to i64
  %8811 = mul nsw i64 %8810, %112
  %8812 = sub nsw i64 %8811, %96
  %8813 = zext i32 %.pre-phi3492 to i64
  %8814 = mul nsw i64 %8813, %112
  %8815 = sub nsw i64 %8814, %96
  %8816 = sext i32 %a26 to i64
  %8817 = add nsw i64 %8816, 17
  %8818 = mul nsw i64 %8817, %113
  %8819 = add nsw i64 %8818, %116
  br label %"for blur_y.s0.x.x.rebased470"

"produce blur_x468":                              ; preds = %"end for blur_y.s0.x.x.rebased457"
  %8820 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %8821 = getelementptr inbounds i16, i16* %8820, i64 -31
  %8822 = bitcast i16* %8821 to <16 x i16>*
  %8823 = load <16 x i16>, <16 x i16>* %8822, align 2, !tbaa !396
  %8824 = getelementptr inbounds i16, i16* %8820, i64 -15
  %8825 = bitcast i16* %8824 to <16 x i16>*
  %8826 = load <16 x i16>, <16 x i16>* %8825, align 2, !tbaa !396
  %8827 = getelementptr inbounds i16, i16* %8820, i64 -32
  %8828 = bitcast i16* %8827 to <16 x i16>*
  %8829 = load <16 x i16>, <16 x i16>* %8828, align 2, !tbaa !396
  %8830 = getelementptr inbounds i16, i16* %8820, i64 -16
  %8831 = bitcast i16* %8830 to <16 x i16>*
  %8832 = load <16 x i16>, <16 x i16>* %8831, align 2, !tbaa !396
  %8833 = getelementptr inbounds i16, i16* %8820, i64 -30
  %8834 = bitcast i16* %8833 to <16 x i16>*
  %8835 = load <16 x i16>, <16 x i16>* %8834, align 2, !tbaa !396
  %8836 = getelementptr inbounds i16, i16* %8820, i64 -14
  %8837 = bitcast i16* %8836 to <16 x i16>*
  %8838 = load <16 x i16>, <16 x i16>* %8837, align 2, !tbaa !396
  %8839 = getelementptr inbounds i16, i16* %8820, i64 -28
  %8840 = bitcast i16* %8839 to <16 x i16>*
  %8841 = load <16 x i16>, <16 x i16>* %8840, align 2, !tbaa !396
  %8842 = getelementptr inbounds i16, i16* %8820, i64 -12
  %8843 = bitcast i16* %8842 to <16 x i16>*
  %8844 = load <16 x i16>, <16 x i16>* %8843, align 2, !tbaa !396
  %8845 = getelementptr inbounds i16, i16* %8820, i64 -29
  %8846 = bitcast i16* %8845 to <16 x i16>*
  %8847 = load <16 x i16>, <16 x i16>* %8846, align 2, !tbaa !396
  %8848 = getelementptr inbounds i16, i16* %8820, i64 -13
  %8849 = bitcast i16* %8848 to <16 x i16>*
  %8850 = load <16 x i16>, <16 x i16>* %8849, align 2, !tbaa !396
  %8851 = add <16 x i16> %8829, %8823
  %8852 = add <16 x i16> %8851, %8835
  %8853 = add <16 x i16> %8852, %8841
  %8854 = add <16 x i16> %8853, %8847
  %8855 = add <16 x i16> %8832, %8826
  %8856 = add <16 x i16> %8855, %8838
  %8857 = add <16 x i16> %8856, %8844
  %8858 = add <16 x i16> %8857, %8850
  %8859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8854, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8858, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8861 = shufflevector <16 x i16> %8859, <16 x i16> %8860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8862 = lshr <32 x i16> %8861, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8863 = shufflevector <32 x i16> %8862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8864 = zext i32 %.pre-phi3498 to i64
  %8865 = mul nsw i64 %97, %8864
  %8866 = add nsw i64 %99, %8865
  %8867 = getelementptr inbounds i16, i16* %blur_x, i64 %8866
  %8868 = getelementptr inbounds i16, i16* %8867, i64 -32
  %8869 = bitcast i16* %8868 to <16 x i16>*
  store <16 x i16> %8863, <16 x i16>* %8869, align 2, !tbaa !399
  %8870 = shufflevector <32 x i16> %8862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8871 = getelementptr inbounds i16, i16* %8867, i64 -16
  %8872 = bitcast i16* %8871 to <16 x i16>*
  store <16 x i16> %8870, <16 x i16>* %8872, align 2, !tbaa !399
  %8873 = zext i32 %.pre-phi3484 to i64
  %8874 = mul nsw i64 %8873, %112
  %8875 = add nsw i64 %8874, %94
  %8876 = getelementptr inbounds i16, i16* %blur_x, i64 %8875
  %8877 = getelementptr inbounds i16, i16* %8876, i64 -32
  %8878 = bitcast i16* %8877 to <16 x i16>*
  %8879 = load <16 x i16>, <16 x i16>* %8878, align 2, !tbaa !399
  %8880 = getelementptr inbounds i16, i16* %8876, i64 -16
  %8881 = bitcast i16* %8880 to <16 x i16>*
  %8882 = load <16 x i16>, <16 x i16>* %8881, align 2, !tbaa !399
  %8883 = zext i32 %.pre-phi3480 to i64
  %8884 = mul nsw i64 %8883, %112
  %8885 = add nsw i64 %8884, %94
  %8886 = getelementptr inbounds i16, i16* %blur_x, i64 %8885
  %8887 = getelementptr inbounds i16, i16* %8886, i64 -32
  %8888 = bitcast i16* %8887 to <16 x i16>*
  %8889 = load <16 x i16>, <16 x i16>* %8888, align 2, !tbaa !399
  %8890 = getelementptr inbounds i16, i16* %8886, i64 -16
  %8891 = bitcast i16* %8890 to <16 x i16>*
  %8892 = load <16 x i16>, <16 x i16>* %8891, align 2, !tbaa !399
  %8893 = zext i32 %.pre-phi3488 to i64
  %8894 = mul nsw i64 %8893, %112
  %8895 = add nsw i64 %8894, %94
  %8896 = getelementptr inbounds i16, i16* %blur_x, i64 %8895
  %8897 = getelementptr inbounds i16, i16* %8896, i64 -32
  %8898 = bitcast i16* %8897 to <16 x i16>*
  %8899 = load <16 x i16>, <16 x i16>* %8898, align 2, !tbaa !399
  %8900 = getelementptr inbounds i16, i16* %8896, i64 -16
  %8901 = bitcast i16* %8900 to <16 x i16>*
  %8902 = load <16 x i16>, <16 x i16>* %8901, align 2, !tbaa !399
  %8903 = mul nsw i64 %8864, %112
  %8904 = add nsw i64 %8903, %94
  %8905 = getelementptr inbounds i16, i16* %blur_x, i64 %8904
  %8906 = getelementptr inbounds i16, i16* %8905, i64 -32
  %8907 = bitcast i16* %8906 to <16 x i16>*
  %8908 = load <16 x i16>, <16 x i16>* %8907, align 2, !tbaa !399
  %8909 = getelementptr inbounds i16, i16* %8905, i64 -16
  %8910 = bitcast i16* %8909 to <16 x i16>*
  %8911 = load <16 x i16>, <16 x i16>* %8910, align 2, !tbaa !399
  %8912 = zext i32 %.pre-phi3492 to i64
  %8913 = mul nsw i64 %8912, %112
  %8914 = add nsw i64 %8913, %94
  %8915 = getelementptr inbounds i16, i16* %blur_x, i64 %8914
  %8916 = getelementptr inbounds i16, i16* %8915, i64 -32
  %8917 = bitcast i16* %8916 to <16 x i16>*
  %8918 = load <16 x i16>, <16 x i16>* %8917, align 2, !tbaa !399
  %8919 = getelementptr inbounds i16, i16* %8915, i64 -16
  %8920 = bitcast i16* %8919 to <16 x i16>*
  %8921 = load <16 x i16>, <16 x i16>* %8920, align 2, !tbaa !399
  %8922 = add <16 x i16> %8889, %8879
  %8923 = add <16 x i16> %8922, %8899
  %8924 = add <16 x i16> %8923, %8908
  %8925 = add <16 x i16> %8924, %8918
  %8926 = add <16 x i16> %8892, %8882
  %8927 = add <16 x i16> %8926, %8902
  %8928 = add <16 x i16> %8927, %8911
  %8929 = add <16 x i16> %8928, %8921
  %8930 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8925, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8931 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8929, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8932 = shufflevector <16 x i16> %8930, <16 x i16> %8931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8933 = lshr <32 x i16> %8932, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8934 = shufflevector <32 x i16> %8933, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8935 = sext i32 %a26 to i64
  %8936 = add nsw i64 %8935, 17
  %8937 = mul nsw i64 %8936, %113
  %8938 = add nsw i64 %115, %8937
  %8939 = getelementptr inbounds i16, i16* %66, i64 %8938
  %8940 = getelementptr inbounds i16, i16* %8939, i64 -32
  %8941 = bitcast i16* %8940 to <16 x i16>*
  store <16 x i16> %8934, <16 x i16>* %8941, align 2, !tbaa !401
  %8942 = shufflevector <32 x i16> %8933, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8943 = getelementptr inbounds i16, i16* %8939, i64 -16
  %8944 = bitcast i16* %8943 to <16 x i16>*
  store <16 x i16> %8942, <16 x i16>* %8944, align 2, !tbaa !401
  br label %after_bb465

"for blur_y.s0.x.x.rebased470":                   ; preds = %"for blur_y.s0.x.x.rebased470.preheader", %"consume blur_x477"
  %indvars.iv3310 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased470.preheader" ], [ %indvars.iv.next3311, %"consume blur_x477" ]
  %8945 = add nsw i64 %indvars.iv3310, %101
  %8946 = icmp slt i64 %8945, 1
  %8947 = trunc i64 %8945 to i32
  %8948 = shl nsw i32 %8947, 5
  %8949 = icmp sgt i32 %4, %8948
  %8950 = or i1 %8946, %8949
  br i1 %8950, label %"produce blur_x476", label %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge"

"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased470"
  %.pre3539 = shl nsw i64 %8945, 5
  br label %"consume blur_x477"

"end for blur_y.s0.x.x.rebased471":               ; preds = %"consume blur_x477", %after_bb465
  br i1 %102, label %"for blur_y.s0.x.x.rebased478.preheader", label %"end for blur_y.s0.x.x.rebased479", !prof !386

"for blur_y.s0.x.x.rebased478.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased471"
  %8951 = sext i32 %t1722 to i64
  %8952 = zext i32 %.pre-phi3484 to i64
  %8953 = mul nsw i64 %8952, %112
  %8954 = sub nsw i64 %8953, %96
  %8955 = zext i32 %.pre-phi3480 to i64
  %8956 = mul nsw i64 %8955, %112
  %8957 = sub nsw i64 %8956, %96
  %8958 = zext i32 %.pre-phi3488 to i64
  %8959 = mul nsw i64 %8958, %112
  %8960 = sub nsw i64 %8959, %96
  %8961 = zext i32 %.pre-phi3498 to i64
  %8962 = mul nsw i64 %8961, %112
  %8963 = sub nsw i64 %8962, %96
  %8964 = zext i32 %.pre-phi3492 to i64
  %8965 = mul nsw i64 %8964, %112
  %8966 = sub nsw i64 %8965, %96
  %8967 = sext i32 %a26 to i64
  %8968 = add nsw i64 %8967, 17
  %8969 = mul nsw i64 %8968, %113
  %8970 = add nsw i64 %8969, %116
  br label %"for blur_y.s0.x.x.rebased478"

"produce blur_x476":                              ; preds = %"for blur_y.s0.x.x.rebased470"
  %t984 = add nsw i32 %8948, %t1977
  %8971 = sext i32 %t984 to i64
  %8972 = getelementptr inbounds i16, i16* %read_input, i64 %8971
  %8973 = getelementptr inbounds i16, i16* %8972, i64 1
  %8974 = bitcast i16* %8973 to <16 x i16>*
  %8975 = load <16 x i16>, <16 x i16>* %8974, align 2, !tbaa !396
  %8976 = getelementptr inbounds i16, i16* %8972, i64 17
  %8977 = bitcast i16* %8976 to <16 x i16>*
  %8978 = load <16 x i16>, <16 x i16>* %8977, align 2, !tbaa !396
  %8979 = bitcast i16* %8972 to <16 x i16>*
  %8980 = load <16 x i16>, <16 x i16>* %8979, align 2, !tbaa !396
  %8981 = getelementptr inbounds i16, i16* %8972, i64 16
  %8982 = bitcast i16* %8981 to <16 x i16>*
  %8983 = load <16 x i16>, <16 x i16>* %8982, align 2, !tbaa !396
  %8984 = getelementptr inbounds i16, i16* %8972, i64 2
  %8985 = bitcast i16* %8984 to <16 x i16>*
  %8986 = load <16 x i16>, <16 x i16>* %8985, align 2, !tbaa !396
  %8987 = getelementptr inbounds i16, i16* %8972, i64 18
  %8988 = bitcast i16* %8987 to <16 x i16>*
  %8989 = load <16 x i16>, <16 x i16>* %8988, align 2, !tbaa !396
  %8990 = getelementptr inbounds i16, i16* %8972, i64 4
  %8991 = bitcast i16* %8990 to <16 x i16>*
  %8992 = load <16 x i16>, <16 x i16>* %8991, align 2, !tbaa !396
  %8993 = getelementptr inbounds i16, i16* %8972, i64 20
  %8994 = bitcast i16* %8993 to <16 x i16>*
  %8995 = load <16 x i16>, <16 x i16>* %8994, align 2, !tbaa !396
  %8996 = getelementptr inbounds i16, i16* %8972, i64 3
  %8997 = bitcast i16* %8996 to <16 x i16>*
  %8998 = load <16 x i16>, <16 x i16>* %8997, align 2, !tbaa !396
  %8999 = getelementptr inbounds i16, i16* %8972, i64 19
  %9000 = bitcast i16* %8999 to <16 x i16>*
  %9001 = load <16 x i16>, <16 x i16>* %9000, align 2, !tbaa !396
  %9002 = add <16 x i16> %8980, %8975
  %9003 = add <16 x i16> %9002, %8986
  %9004 = add <16 x i16> %9003, %8992
  %9005 = add <16 x i16> %9004, %8998
  %9006 = add <16 x i16> %8983, %8978
  %9007 = add <16 x i16> %9006, %8989
  %9008 = add <16 x i16> %9007, %8995
  %9009 = add <16 x i16> %9008, %9001
  %9010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9005, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9009, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9012 = shufflevector <16 x i16> %9010, <16 x i16> %9011, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9013 = lshr <32 x i16> %9012, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9014 = shufflevector <32 x i16> %9013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9015 = shl nsw i64 %8945, 5
  %9016 = add nsw i64 %9015, %8800
  %9017 = getelementptr inbounds i16, i16* %blur_x, i64 %9016
  %9018 = bitcast i16* %9017 to <16 x i16>*
  store <16 x i16> %9014, <16 x i16>* %9018, align 2, !tbaa !399
  %9019 = shufflevector <32 x i16> %9013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9020 = getelementptr inbounds i16, i16* %9017, i64 16
  %9021 = bitcast i16* %9020 to <16 x i16>*
  store <16 x i16> %9019, <16 x i16>* %9021, align 2, !tbaa !399
  br label %"consume blur_x477"

"consume blur_x477":                              ; preds = %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge", %"produce blur_x476"
  %.pre-phi3540 = phi i64 [ %.pre3539, %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge" ], [ %9015, %"produce blur_x476" ]
  %9022 = add nsw i64 %8803, %.pre-phi3540
  %9023 = getelementptr inbounds i16, i16* %blur_x, i64 %9022
  %9024 = bitcast i16* %9023 to <16 x i16>*
  %9025 = load <16 x i16>, <16 x i16>* %9024, align 2, !tbaa !399
  %9026 = getelementptr inbounds i16, i16* %9023, i64 16
  %9027 = bitcast i16* %9026 to <16 x i16>*
  %9028 = load <16 x i16>, <16 x i16>* %9027, align 2, !tbaa !399
  %9029 = add nsw i64 %8806, %.pre-phi3540
  %9030 = getelementptr inbounds i16, i16* %blur_x, i64 %9029
  %9031 = bitcast i16* %9030 to <16 x i16>*
  %9032 = load <16 x i16>, <16 x i16>* %9031, align 2, !tbaa !399
  %9033 = getelementptr inbounds i16, i16* %9030, i64 16
  %9034 = bitcast i16* %9033 to <16 x i16>*
  %9035 = load <16 x i16>, <16 x i16>* %9034, align 2, !tbaa !399
  %9036 = add nsw i64 %8809, %.pre-phi3540
  %9037 = getelementptr inbounds i16, i16* %blur_x, i64 %9036
  %9038 = bitcast i16* %9037 to <16 x i16>*
  %9039 = load <16 x i16>, <16 x i16>* %9038, align 2, !tbaa !399
  %9040 = getelementptr inbounds i16, i16* %9037, i64 16
  %9041 = bitcast i16* %9040 to <16 x i16>*
  %9042 = load <16 x i16>, <16 x i16>* %9041, align 2, !tbaa !399
  %9043 = add nsw i64 %8812, %.pre-phi3540
  %9044 = getelementptr inbounds i16, i16* %blur_x, i64 %9043
  %9045 = bitcast i16* %9044 to <16 x i16>*
  %9046 = load <16 x i16>, <16 x i16>* %9045, align 2, !tbaa !399
  %9047 = getelementptr inbounds i16, i16* %9044, i64 16
  %9048 = bitcast i16* %9047 to <16 x i16>*
  %9049 = load <16 x i16>, <16 x i16>* %9048, align 2, !tbaa !399
  %9050 = add nsw i64 %8815, %.pre-phi3540
  %9051 = getelementptr inbounds i16, i16* %blur_x, i64 %9050
  %9052 = bitcast i16* %9051 to <16 x i16>*
  %9053 = load <16 x i16>, <16 x i16>* %9052, align 2, !tbaa !399
  %9054 = getelementptr inbounds i16, i16* %9051, i64 16
  %9055 = bitcast i16* %9054 to <16 x i16>*
  %9056 = load <16 x i16>, <16 x i16>* %9055, align 2, !tbaa !399
  %9057 = add <16 x i16> %9032, %9025
  %9058 = add <16 x i16> %9057, %9039
  %9059 = add <16 x i16> %9058, %9046
  %9060 = add <16 x i16> %9059, %9053
  %9061 = add <16 x i16> %9035, %9028
  %9062 = add <16 x i16> %9061, %9042
  %9063 = add <16 x i16> %9062, %9049
  %9064 = add <16 x i16> %9063, %9056
  %9065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9060, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9064, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9067 = shufflevector <16 x i16> %9065, <16 x i16> %9066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9068 = lshr <32 x i16> %9067, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9069 = shufflevector <32 x i16> %9068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9070 = add nsw i64 %8819, %.pre-phi3540
  %9071 = getelementptr inbounds i16, i16* %66, i64 %9070
  %9072 = bitcast i16* %9071 to <16 x i16>*
  store <16 x i16> %9069, <16 x i16>* %9072, align 2, !tbaa !401
  %9073 = shufflevector <32 x i16> %9068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9074 = getelementptr inbounds i16, i16* %9071, i64 16
  %9075 = bitcast i16* %9074 to <16 x i16>*
  store <16 x i16> %9073, <16 x i16>* %9075, align 2, !tbaa !401
  %indvars.iv.next3311 = add nuw nsw i64 %indvars.iv3310, 1
  %.not2723 = icmp eq i64 %indvars.iv.next3311, %184
  br i1 %.not2723, label %"end for blur_y.s0.x.x.rebased471", label %"for blur_y.s0.x.x.rebased470"

"for blur_y.s0.x.x.rebased478":                   ; preds = %"for blur_y.s0.x.x.rebased478.preheader", %"consume blur_x486"
  %blur_y.s0.x.x.rebased480 = phi i32 [ %9188, %"consume blur_x486" ], [ 0, %"for blur_y.s0.x.x.rebased478.preheader" ]
  %9076 = add nsw i32 %blur_y.s0.x.x.rebased480, %t1626
  %a224 = shl nsw i32 %9076, 5
  %9077 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %9077, i32 %a224, i32 %a14
  %9078 = icmp slt i32 %9076, 1
  %9079 = icmp sgt i32 %4, %a224
  %9080 = or i1 %9078, %9079
  br i1 %9080, label %"produce blur_x484", label %"consume blur_x486"

"end for blur_y.s0.x.x.rebased479":               ; preds = %"consume blur_x486", %"end for blur_y.s0.x.x.rebased471"
  br i1 %34, label %"produce blur_x490", label %after_bb487

"produce blur_x484":                              ; preds = %"for blur_y.s0.x.x.rebased478"
  %9081 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s485 = select i1 %9081, i32 %b230, i32 %4
  %t989 = add nsw i32 %blur_x.s0.x.v1.base.s485, %t1977
  %9082 = sext i32 %t989 to i64
  %9083 = getelementptr inbounds i16, i16* %read_input, i64 %9082
  %9084 = getelementptr inbounds i16, i16* %9083, i64 1
  %9085 = bitcast i16* %9084 to <16 x i16>*
  %9086 = load <16 x i16>, <16 x i16>* %9085, align 2, !tbaa !396
  %9087 = getelementptr inbounds i16, i16* %9083, i64 17
  %9088 = bitcast i16* %9087 to <16 x i16>*
  %9089 = load <16 x i16>, <16 x i16>* %9088, align 2, !tbaa !396
  %9090 = bitcast i16* %9083 to <16 x i16>*
  %9091 = load <16 x i16>, <16 x i16>* %9090, align 2, !tbaa !396
  %9092 = getelementptr inbounds i16, i16* %9083, i64 16
  %9093 = bitcast i16* %9092 to <16 x i16>*
  %9094 = load <16 x i16>, <16 x i16>* %9093, align 2, !tbaa !396
  %9095 = getelementptr inbounds i16, i16* %9083, i64 2
  %9096 = bitcast i16* %9095 to <16 x i16>*
  %9097 = load <16 x i16>, <16 x i16>* %9096, align 2, !tbaa !396
  %9098 = getelementptr inbounds i16, i16* %9083, i64 18
  %9099 = bitcast i16* %9098 to <16 x i16>*
  %9100 = load <16 x i16>, <16 x i16>* %9099, align 2, !tbaa !396
  %9101 = getelementptr inbounds i16, i16* %9083, i64 4
  %9102 = bitcast i16* %9101 to <16 x i16>*
  %9103 = load <16 x i16>, <16 x i16>* %9102, align 2, !tbaa !396
  %9104 = getelementptr inbounds i16, i16* %9083, i64 20
  %9105 = bitcast i16* %9104 to <16 x i16>*
  %9106 = load <16 x i16>, <16 x i16>* %9105, align 2, !tbaa !396
  %9107 = getelementptr inbounds i16, i16* %9083, i64 3
  %9108 = bitcast i16* %9107 to <16 x i16>*
  %9109 = load <16 x i16>, <16 x i16>* %9108, align 2, !tbaa !396
  %9110 = getelementptr inbounds i16, i16* %9083, i64 19
  %9111 = bitcast i16* %9110 to <16 x i16>*
  %9112 = load <16 x i16>, <16 x i16>* %9111, align 2, !tbaa !396
  %9113 = add <16 x i16> %9091, %9086
  %9114 = add <16 x i16> %9113, %9097
  %9115 = add <16 x i16> %9114, %9103
  %9116 = add <16 x i16> %9115, %9109
  %9117 = add <16 x i16> %9094, %9089
  %9118 = add <16 x i16> %9117, %9100
  %9119 = add <16 x i16> %9118, %9106
  %9120 = add <16 x i16> %9119, %9112
  %9121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9116, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9120, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9123 = shufflevector <16 x i16> %9121, <16 x i16> %9122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9124 = lshr <32 x i16> %9123, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9125 = shufflevector <32 x i16> %9124, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9126 = sext i32 %blur_x.s0.x.v1.base.s485 to i64
  %9127 = add nsw i64 %9126, %8951
  %9128 = getelementptr inbounds i16, i16* %blur_x, i64 %9127
  %9129 = bitcast i16* %9128 to <16 x i16>*
  store <16 x i16> %9125, <16 x i16>* %9129, align 2, !tbaa !399
  %9130 = shufflevector <32 x i16> %9124, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9131 = getelementptr inbounds i16, i16* %9128, i64 16
  %9132 = bitcast i16* %9131 to <16 x i16>*
  store <16 x i16> %9130, <16 x i16>* %9132, align 2, !tbaa !399
  br label %"consume blur_x486"

"consume blur_x486":                              ; preds = %"for blur_y.s0.x.x.rebased478", %"produce blur_x484"
  %9133 = sext i32 %b230 to i64
  %9134 = add nsw i64 %8954, %9133
  %9135 = getelementptr inbounds i16, i16* %blur_x, i64 %9134
  %9136 = bitcast i16* %9135 to <16 x i16>*
  %9137 = load <16 x i16>, <16 x i16>* %9136, align 2, !tbaa !399
  %9138 = getelementptr inbounds i16, i16* %9135, i64 16
  %9139 = bitcast i16* %9138 to <16 x i16>*
  %9140 = load <16 x i16>, <16 x i16>* %9139, align 2, !tbaa !399
  %9141 = add nsw i64 %8957, %9133
  %9142 = getelementptr inbounds i16, i16* %blur_x, i64 %9141
  %9143 = bitcast i16* %9142 to <16 x i16>*
  %9144 = load <16 x i16>, <16 x i16>* %9143, align 2, !tbaa !399
  %9145 = getelementptr inbounds i16, i16* %9142, i64 16
  %9146 = bitcast i16* %9145 to <16 x i16>*
  %9147 = load <16 x i16>, <16 x i16>* %9146, align 2, !tbaa !399
  %9148 = add nsw i64 %8960, %9133
  %9149 = getelementptr inbounds i16, i16* %blur_x, i64 %9148
  %9150 = bitcast i16* %9149 to <16 x i16>*
  %9151 = load <16 x i16>, <16 x i16>* %9150, align 2, !tbaa !399
  %9152 = getelementptr inbounds i16, i16* %9149, i64 16
  %9153 = bitcast i16* %9152 to <16 x i16>*
  %9154 = load <16 x i16>, <16 x i16>* %9153, align 2, !tbaa !399
  %9155 = add nsw i64 %8963, %9133
  %9156 = getelementptr inbounds i16, i16* %blur_x, i64 %9155
  %9157 = bitcast i16* %9156 to <16 x i16>*
  %9158 = load <16 x i16>, <16 x i16>* %9157, align 2, !tbaa !399
  %9159 = getelementptr inbounds i16, i16* %9156, i64 16
  %9160 = bitcast i16* %9159 to <16 x i16>*
  %9161 = load <16 x i16>, <16 x i16>* %9160, align 2, !tbaa !399
  %9162 = add nsw i64 %8966, %9133
  %9163 = getelementptr inbounds i16, i16* %blur_x, i64 %9162
  %9164 = bitcast i16* %9163 to <16 x i16>*
  %9165 = load <16 x i16>, <16 x i16>* %9164, align 2, !tbaa !399
  %9166 = getelementptr inbounds i16, i16* %9163, i64 16
  %9167 = bitcast i16* %9166 to <16 x i16>*
  %9168 = load <16 x i16>, <16 x i16>* %9167, align 2, !tbaa !399
  %9169 = add <16 x i16> %9144, %9137
  %9170 = add <16 x i16> %9169, %9151
  %9171 = add <16 x i16> %9170, %9158
  %9172 = add <16 x i16> %9171, %9165
  %9173 = add <16 x i16> %9147, %9140
  %9174 = add <16 x i16> %9173, %9154
  %9175 = add <16 x i16> %9174, %9161
  %9176 = add <16 x i16> %9175, %9168
  %9177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9172, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9176, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9179 = shufflevector <16 x i16> %9177, <16 x i16> %9178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9180 = lshr <32 x i16> %9179, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9181 = shufflevector <32 x i16> %9180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9182 = add nsw i64 %8970, %9133
  %9183 = getelementptr inbounds i16, i16* %66, i64 %9182
  %9184 = bitcast i16* %9183 to <16 x i16>*
  store <16 x i16> %9181, <16 x i16>* %9184, align 2, !tbaa !401
  %9185 = shufflevector <32 x i16> %9180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9186 = getelementptr inbounds i16, i16* %9183, i64 16
  %9187 = bitcast i16* %9186 to <16 x i16>*
  store <16 x i16> %9185, <16 x i16>* %9187, align 2, !tbaa !401
  %9188 = add nuw nsw i32 %blur_y.s0.x.x.rebased480, 1
  %.not2722 = icmp eq i32 %9188, %t1683
  br i1 %.not2722, label %"end for blur_y.s0.x.x.rebased479", label %"for blur_y.s0.x.x.rebased478"

after_bb487:                                      ; preds = %"end for blur_y.s0.x.x.rebased479", %"produce blur_x490"
  br i1 %100, label %"for blur_y.s0.x.x.rebased492.preheader", label %"end for blur_y.s0.x.x.rebased493", !prof !386

"for blur_y.s0.x.x.rebased492.preheader":         ; preds = %after_bb487
  %9189 = sext i32 %t1738 to i64
  %9190 = zext i32 %.pre-phi3488 to i64
  %9191 = mul nsw i64 %9190, %112
  %9192 = sub nsw i64 %9191, %96
  %9193 = zext i32 %.pre-phi3484 to i64
  %9194 = mul nsw i64 %9193, %112
  %9195 = sub nsw i64 %9194, %96
  %9196 = zext i32 %.pre-phi3492 to i64
  %9197 = mul nsw i64 %9196, %112
  %9198 = sub nsw i64 %9197, %96
  %9199 = zext i32 %.pre-phi3504 to i64
  %9200 = mul nsw i64 %9199, %112
  %9201 = sub nsw i64 %9200, %96
  %9202 = zext i32 %.pre-phi3498 to i64
  %9203 = mul nsw i64 %9202, %112
  %9204 = sub nsw i64 %9203, %96
  %9205 = sext i32 %a26 to i64
  %9206 = add nsw i64 %9205, 18
  %9207 = mul nsw i64 %9206, %113
  %9208 = add nsw i64 %9207, %116
  br label %"for blur_y.s0.x.x.rebased492"

"produce blur_x490":                              ; preds = %"end for blur_y.s0.x.x.rebased479"
  %9209 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %9210 = getelementptr inbounds i16, i16* %9209, i64 -31
  %9211 = bitcast i16* %9210 to <16 x i16>*
  %9212 = load <16 x i16>, <16 x i16>* %9211, align 2, !tbaa !396
  %9213 = getelementptr inbounds i16, i16* %9209, i64 -15
  %9214 = bitcast i16* %9213 to <16 x i16>*
  %9215 = load <16 x i16>, <16 x i16>* %9214, align 2, !tbaa !396
  %9216 = getelementptr inbounds i16, i16* %9209, i64 -32
  %9217 = bitcast i16* %9216 to <16 x i16>*
  %9218 = load <16 x i16>, <16 x i16>* %9217, align 2, !tbaa !396
  %9219 = getelementptr inbounds i16, i16* %9209, i64 -16
  %9220 = bitcast i16* %9219 to <16 x i16>*
  %9221 = load <16 x i16>, <16 x i16>* %9220, align 2, !tbaa !396
  %9222 = getelementptr inbounds i16, i16* %9209, i64 -30
  %9223 = bitcast i16* %9222 to <16 x i16>*
  %9224 = load <16 x i16>, <16 x i16>* %9223, align 2, !tbaa !396
  %9225 = getelementptr inbounds i16, i16* %9209, i64 -14
  %9226 = bitcast i16* %9225 to <16 x i16>*
  %9227 = load <16 x i16>, <16 x i16>* %9226, align 2, !tbaa !396
  %9228 = getelementptr inbounds i16, i16* %9209, i64 -28
  %9229 = bitcast i16* %9228 to <16 x i16>*
  %9230 = load <16 x i16>, <16 x i16>* %9229, align 2, !tbaa !396
  %9231 = getelementptr inbounds i16, i16* %9209, i64 -12
  %9232 = bitcast i16* %9231 to <16 x i16>*
  %9233 = load <16 x i16>, <16 x i16>* %9232, align 2, !tbaa !396
  %9234 = getelementptr inbounds i16, i16* %9209, i64 -29
  %9235 = bitcast i16* %9234 to <16 x i16>*
  %9236 = load <16 x i16>, <16 x i16>* %9235, align 2, !tbaa !396
  %9237 = getelementptr inbounds i16, i16* %9209, i64 -13
  %9238 = bitcast i16* %9237 to <16 x i16>*
  %9239 = load <16 x i16>, <16 x i16>* %9238, align 2, !tbaa !396
  %9240 = add <16 x i16> %9218, %9212
  %9241 = add <16 x i16> %9240, %9224
  %9242 = add <16 x i16> %9241, %9230
  %9243 = add <16 x i16> %9242, %9236
  %9244 = add <16 x i16> %9221, %9215
  %9245 = add <16 x i16> %9244, %9227
  %9246 = add <16 x i16> %9245, %9233
  %9247 = add <16 x i16> %9246, %9239
  %9248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9243, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9247, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9250 = shufflevector <16 x i16> %9248, <16 x i16> %9249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9251 = lshr <32 x i16> %9250, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9252 = shufflevector <32 x i16> %9251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9253 = zext i32 %.pre-phi3504 to i64
  %9254 = mul nsw i64 %97, %9253
  %9255 = add nsw i64 %99, %9254
  %9256 = getelementptr inbounds i16, i16* %blur_x, i64 %9255
  %9257 = getelementptr inbounds i16, i16* %9256, i64 -32
  %9258 = bitcast i16* %9257 to <16 x i16>*
  store <16 x i16> %9252, <16 x i16>* %9258, align 2, !tbaa !399
  %9259 = shufflevector <32 x i16> %9251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9260 = getelementptr inbounds i16, i16* %9256, i64 -16
  %9261 = bitcast i16* %9260 to <16 x i16>*
  store <16 x i16> %9259, <16 x i16>* %9261, align 2, !tbaa !399
  %9262 = zext i32 %.pre-phi3488 to i64
  %9263 = mul nsw i64 %9262, %112
  %9264 = add nsw i64 %9263, %94
  %9265 = getelementptr inbounds i16, i16* %blur_x, i64 %9264
  %9266 = getelementptr inbounds i16, i16* %9265, i64 -32
  %9267 = bitcast i16* %9266 to <16 x i16>*
  %9268 = load <16 x i16>, <16 x i16>* %9267, align 2, !tbaa !399
  %9269 = getelementptr inbounds i16, i16* %9265, i64 -16
  %9270 = bitcast i16* %9269 to <16 x i16>*
  %9271 = load <16 x i16>, <16 x i16>* %9270, align 2, !tbaa !399
  %9272 = zext i32 %.pre-phi3484 to i64
  %9273 = mul nsw i64 %9272, %112
  %9274 = add nsw i64 %9273, %94
  %9275 = getelementptr inbounds i16, i16* %blur_x, i64 %9274
  %9276 = getelementptr inbounds i16, i16* %9275, i64 -32
  %9277 = bitcast i16* %9276 to <16 x i16>*
  %9278 = load <16 x i16>, <16 x i16>* %9277, align 2, !tbaa !399
  %9279 = getelementptr inbounds i16, i16* %9275, i64 -16
  %9280 = bitcast i16* %9279 to <16 x i16>*
  %9281 = load <16 x i16>, <16 x i16>* %9280, align 2, !tbaa !399
  %9282 = zext i32 %.pre-phi3492 to i64
  %9283 = mul nsw i64 %9282, %112
  %9284 = add nsw i64 %9283, %94
  %9285 = getelementptr inbounds i16, i16* %blur_x, i64 %9284
  %9286 = getelementptr inbounds i16, i16* %9285, i64 -32
  %9287 = bitcast i16* %9286 to <16 x i16>*
  %9288 = load <16 x i16>, <16 x i16>* %9287, align 2, !tbaa !399
  %9289 = getelementptr inbounds i16, i16* %9285, i64 -16
  %9290 = bitcast i16* %9289 to <16 x i16>*
  %9291 = load <16 x i16>, <16 x i16>* %9290, align 2, !tbaa !399
  %9292 = mul nsw i64 %9253, %112
  %9293 = add nsw i64 %9292, %94
  %9294 = getelementptr inbounds i16, i16* %blur_x, i64 %9293
  %9295 = getelementptr inbounds i16, i16* %9294, i64 -32
  %9296 = bitcast i16* %9295 to <16 x i16>*
  %9297 = load <16 x i16>, <16 x i16>* %9296, align 2, !tbaa !399
  %9298 = getelementptr inbounds i16, i16* %9294, i64 -16
  %9299 = bitcast i16* %9298 to <16 x i16>*
  %9300 = load <16 x i16>, <16 x i16>* %9299, align 2, !tbaa !399
  %9301 = zext i32 %.pre-phi3498 to i64
  %9302 = mul nsw i64 %9301, %112
  %9303 = add nsw i64 %9302, %94
  %9304 = getelementptr inbounds i16, i16* %blur_x, i64 %9303
  %9305 = getelementptr inbounds i16, i16* %9304, i64 -32
  %9306 = bitcast i16* %9305 to <16 x i16>*
  %9307 = load <16 x i16>, <16 x i16>* %9306, align 2, !tbaa !399
  %9308 = getelementptr inbounds i16, i16* %9304, i64 -16
  %9309 = bitcast i16* %9308 to <16 x i16>*
  %9310 = load <16 x i16>, <16 x i16>* %9309, align 2, !tbaa !399
  %9311 = add <16 x i16> %9278, %9268
  %9312 = add <16 x i16> %9311, %9288
  %9313 = add <16 x i16> %9312, %9297
  %9314 = add <16 x i16> %9313, %9307
  %9315 = add <16 x i16> %9281, %9271
  %9316 = add <16 x i16> %9315, %9291
  %9317 = add <16 x i16> %9316, %9300
  %9318 = add <16 x i16> %9317, %9310
  %9319 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9314, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9320 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9318, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9321 = shufflevector <16 x i16> %9319, <16 x i16> %9320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9322 = lshr <32 x i16> %9321, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9323 = shufflevector <32 x i16> %9322, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9324 = sext i32 %a26 to i64
  %9325 = add nsw i64 %9324, 18
  %9326 = mul nsw i64 %9325, %113
  %9327 = add nsw i64 %115, %9326
  %9328 = getelementptr inbounds i16, i16* %66, i64 %9327
  %9329 = getelementptr inbounds i16, i16* %9328, i64 -32
  %9330 = bitcast i16* %9329 to <16 x i16>*
  store <16 x i16> %9323, <16 x i16>* %9330, align 2, !tbaa !401
  %9331 = shufflevector <32 x i16> %9322, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9332 = getelementptr inbounds i16, i16* %9328, i64 -16
  %9333 = bitcast i16* %9332 to <16 x i16>*
  store <16 x i16> %9331, <16 x i16>* %9333, align 2, !tbaa !401
  br label %after_bb487

"for blur_y.s0.x.x.rebased492":                   ; preds = %"for blur_y.s0.x.x.rebased492.preheader", %"consume blur_x499"
  %indvars.iv3313 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased492.preheader" ], [ %indvars.iv.next3314, %"consume blur_x499" ]
  %9334 = add nsw i64 %indvars.iv3313, %101
  %9335 = icmp slt i64 %9334, 1
  %9336 = trunc i64 %9334 to i32
  %9337 = shl nsw i32 %9336, 5
  %9338 = icmp sgt i32 %4, %9337
  %9339 = or i1 %9335, %9338
  br i1 %9339, label %"produce blur_x498", label %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge"

"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased492"
  %.pre3541 = shl nsw i64 %9334, 5
  br label %"consume blur_x499"

"end for blur_y.s0.x.x.rebased493":               ; preds = %"consume blur_x499", %after_bb487
  br i1 %102, label %"for blur_y.s0.x.x.rebased500.preheader", label %"end for blur_y.s0.x.x.rebased501", !prof !386

"for blur_y.s0.x.x.rebased500.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased493"
  %9340 = sext i32 %t1738 to i64
  %9341 = zext i32 %.pre-phi3488 to i64
  %9342 = mul nsw i64 %9341, %112
  %9343 = sub nsw i64 %9342, %96
  %9344 = zext i32 %.pre-phi3484 to i64
  %9345 = mul nsw i64 %9344, %112
  %9346 = sub nsw i64 %9345, %96
  %9347 = zext i32 %.pre-phi3492 to i64
  %9348 = mul nsw i64 %9347, %112
  %9349 = sub nsw i64 %9348, %96
  %9350 = zext i32 %.pre-phi3504 to i64
  %9351 = mul nsw i64 %9350, %112
  %9352 = sub nsw i64 %9351, %96
  %9353 = zext i32 %.pre-phi3498 to i64
  %9354 = mul nsw i64 %9353, %112
  %9355 = sub nsw i64 %9354, %96
  %9356 = sext i32 %a26 to i64
  %9357 = add nsw i64 %9356, 18
  %9358 = mul nsw i64 %9357, %113
  %9359 = add nsw i64 %9358, %116
  br label %"for blur_y.s0.x.x.rebased500"

"produce blur_x498":                              ; preds = %"for blur_y.s0.x.x.rebased492"
  %t1000 = add nsw i32 %9337, %t1993
  %9360 = sext i32 %t1000 to i64
  %9361 = getelementptr inbounds i16, i16* %read_input, i64 %9360
  %9362 = getelementptr inbounds i16, i16* %9361, i64 1
  %9363 = bitcast i16* %9362 to <16 x i16>*
  %9364 = load <16 x i16>, <16 x i16>* %9363, align 2, !tbaa !396
  %9365 = getelementptr inbounds i16, i16* %9361, i64 17
  %9366 = bitcast i16* %9365 to <16 x i16>*
  %9367 = load <16 x i16>, <16 x i16>* %9366, align 2, !tbaa !396
  %9368 = bitcast i16* %9361 to <16 x i16>*
  %9369 = load <16 x i16>, <16 x i16>* %9368, align 2, !tbaa !396
  %9370 = getelementptr inbounds i16, i16* %9361, i64 16
  %9371 = bitcast i16* %9370 to <16 x i16>*
  %9372 = load <16 x i16>, <16 x i16>* %9371, align 2, !tbaa !396
  %9373 = getelementptr inbounds i16, i16* %9361, i64 2
  %9374 = bitcast i16* %9373 to <16 x i16>*
  %9375 = load <16 x i16>, <16 x i16>* %9374, align 2, !tbaa !396
  %9376 = getelementptr inbounds i16, i16* %9361, i64 18
  %9377 = bitcast i16* %9376 to <16 x i16>*
  %9378 = load <16 x i16>, <16 x i16>* %9377, align 2, !tbaa !396
  %9379 = getelementptr inbounds i16, i16* %9361, i64 4
  %9380 = bitcast i16* %9379 to <16 x i16>*
  %9381 = load <16 x i16>, <16 x i16>* %9380, align 2, !tbaa !396
  %9382 = getelementptr inbounds i16, i16* %9361, i64 20
  %9383 = bitcast i16* %9382 to <16 x i16>*
  %9384 = load <16 x i16>, <16 x i16>* %9383, align 2, !tbaa !396
  %9385 = getelementptr inbounds i16, i16* %9361, i64 3
  %9386 = bitcast i16* %9385 to <16 x i16>*
  %9387 = load <16 x i16>, <16 x i16>* %9386, align 2, !tbaa !396
  %9388 = getelementptr inbounds i16, i16* %9361, i64 19
  %9389 = bitcast i16* %9388 to <16 x i16>*
  %9390 = load <16 x i16>, <16 x i16>* %9389, align 2, !tbaa !396
  %9391 = add <16 x i16> %9369, %9364
  %9392 = add <16 x i16> %9391, %9375
  %9393 = add <16 x i16> %9392, %9381
  %9394 = add <16 x i16> %9393, %9387
  %9395 = add <16 x i16> %9372, %9367
  %9396 = add <16 x i16> %9395, %9378
  %9397 = add <16 x i16> %9396, %9384
  %9398 = add <16 x i16> %9397, %9390
  %9399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9394, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9398, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9401 = shufflevector <16 x i16> %9399, <16 x i16> %9400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9402 = lshr <32 x i16> %9401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9403 = shufflevector <32 x i16> %9402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9404 = shl nsw i64 %9334, 5
  %9405 = add nsw i64 %9404, %9189
  %9406 = getelementptr inbounds i16, i16* %blur_x, i64 %9405
  %9407 = bitcast i16* %9406 to <16 x i16>*
  store <16 x i16> %9403, <16 x i16>* %9407, align 2, !tbaa !399
  %9408 = shufflevector <32 x i16> %9402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9409 = getelementptr inbounds i16, i16* %9406, i64 16
  %9410 = bitcast i16* %9409 to <16 x i16>*
  store <16 x i16> %9408, <16 x i16>* %9410, align 2, !tbaa !399
  br label %"consume blur_x499"

"consume blur_x499":                              ; preds = %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge", %"produce blur_x498"
  %.pre-phi3542 = phi i64 [ %.pre3541, %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge" ], [ %9404, %"produce blur_x498" ]
  %9411 = add nsw i64 %9192, %.pre-phi3542
  %9412 = getelementptr inbounds i16, i16* %blur_x, i64 %9411
  %9413 = bitcast i16* %9412 to <16 x i16>*
  %9414 = load <16 x i16>, <16 x i16>* %9413, align 2, !tbaa !399
  %9415 = getelementptr inbounds i16, i16* %9412, i64 16
  %9416 = bitcast i16* %9415 to <16 x i16>*
  %9417 = load <16 x i16>, <16 x i16>* %9416, align 2, !tbaa !399
  %9418 = add nsw i64 %9195, %.pre-phi3542
  %9419 = getelementptr inbounds i16, i16* %blur_x, i64 %9418
  %9420 = bitcast i16* %9419 to <16 x i16>*
  %9421 = load <16 x i16>, <16 x i16>* %9420, align 2, !tbaa !399
  %9422 = getelementptr inbounds i16, i16* %9419, i64 16
  %9423 = bitcast i16* %9422 to <16 x i16>*
  %9424 = load <16 x i16>, <16 x i16>* %9423, align 2, !tbaa !399
  %9425 = add nsw i64 %9198, %.pre-phi3542
  %9426 = getelementptr inbounds i16, i16* %blur_x, i64 %9425
  %9427 = bitcast i16* %9426 to <16 x i16>*
  %9428 = load <16 x i16>, <16 x i16>* %9427, align 2, !tbaa !399
  %9429 = getelementptr inbounds i16, i16* %9426, i64 16
  %9430 = bitcast i16* %9429 to <16 x i16>*
  %9431 = load <16 x i16>, <16 x i16>* %9430, align 2, !tbaa !399
  %9432 = add nsw i64 %9201, %.pre-phi3542
  %9433 = getelementptr inbounds i16, i16* %blur_x, i64 %9432
  %9434 = bitcast i16* %9433 to <16 x i16>*
  %9435 = load <16 x i16>, <16 x i16>* %9434, align 2, !tbaa !399
  %9436 = getelementptr inbounds i16, i16* %9433, i64 16
  %9437 = bitcast i16* %9436 to <16 x i16>*
  %9438 = load <16 x i16>, <16 x i16>* %9437, align 2, !tbaa !399
  %9439 = add nsw i64 %9204, %.pre-phi3542
  %9440 = getelementptr inbounds i16, i16* %blur_x, i64 %9439
  %9441 = bitcast i16* %9440 to <16 x i16>*
  %9442 = load <16 x i16>, <16 x i16>* %9441, align 2, !tbaa !399
  %9443 = getelementptr inbounds i16, i16* %9440, i64 16
  %9444 = bitcast i16* %9443 to <16 x i16>*
  %9445 = load <16 x i16>, <16 x i16>* %9444, align 2, !tbaa !399
  %9446 = add <16 x i16> %9421, %9414
  %9447 = add <16 x i16> %9446, %9428
  %9448 = add <16 x i16> %9447, %9435
  %9449 = add <16 x i16> %9448, %9442
  %9450 = add <16 x i16> %9424, %9417
  %9451 = add <16 x i16> %9450, %9431
  %9452 = add <16 x i16> %9451, %9438
  %9453 = add <16 x i16> %9452, %9445
  %9454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9449, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9453, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9456 = shufflevector <16 x i16> %9454, <16 x i16> %9455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9457 = lshr <32 x i16> %9456, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9458 = shufflevector <32 x i16> %9457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9459 = add nsw i64 %9208, %.pre-phi3542
  %9460 = getelementptr inbounds i16, i16* %66, i64 %9459
  %9461 = bitcast i16* %9460 to <16 x i16>*
  store <16 x i16> %9458, <16 x i16>* %9461, align 2, !tbaa !401
  %9462 = shufflevector <32 x i16> %9457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9463 = getelementptr inbounds i16, i16* %9460, i64 16
  %9464 = bitcast i16* %9463 to <16 x i16>*
  store <16 x i16> %9462, <16 x i16>* %9464, align 2, !tbaa !401
  %indvars.iv.next3314 = add nuw nsw i64 %indvars.iv3313, 1
  %.not2721 = icmp eq i64 %indvars.iv.next3314, %184
  br i1 %.not2721, label %"end for blur_y.s0.x.x.rebased493", label %"for blur_y.s0.x.x.rebased492"

"for blur_y.s0.x.x.rebased500":                   ; preds = %"for blur_y.s0.x.x.rebased500.preheader", %"consume blur_x508"
  %blur_y.s0.x.x.rebased502 = phi i32 [ %9577, %"consume blur_x508" ], [ 0, %"for blur_y.s0.x.x.rebased500.preheader" ]
  %9465 = add nsw i32 %blur_y.s0.x.x.rebased502, %t1626
  %a231 = shl nsw i32 %9465, 5
  %9466 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %9466, i32 %a231, i32 %a14
  %9467 = icmp slt i32 %9465, 1
  %9468 = icmp sgt i32 %4, %a231
  %9469 = or i1 %9467, %9468
  br i1 %9469, label %"produce blur_x506", label %"consume blur_x508"

"end for blur_y.s0.x.x.rebased501":               ; preds = %"consume blur_x508", %"end for blur_y.s0.x.x.rebased493"
  br i1 %34, label %"produce blur_x512", label %after_bb509

"produce blur_x506":                              ; preds = %"for blur_y.s0.x.x.rebased500"
  %9470 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s507 = select i1 %9470, i32 %b237, i32 %4
  %t1005 = add nsw i32 %blur_x.s0.x.v1.base.s507, %t1993
  %9471 = sext i32 %t1005 to i64
  %9472 = getelementptr inbounds i16, i16* %read_input, i64 %9471
  %9473 = getelementptr inbounds i16, i16* %9472, i64 1
  %9474 = bitcast i16* %9473 to <16 x i16>*
  %9475 = load <16 x i16>, <16 x i16>* %9474, align 2, !tbaa !396
  %9476 = getelementptr inbounds i16, i16* %9472, i64 17
  %9477 = bitcast i16* %9476 to <16 x i16>*
  %9478 = load <16 x i16>, <16 x i16>* %9477, align 2, !tbaa !396
  %9479 = bitcast i16* %9472 to <16 x i16>*
  %9480 = load <16 x i16>, <16 x i16>* %9479, align 2, !tbaa !396
  %9481 = getelementptr inbounds i16, i16* %9472, i64 16
  %9482 = bitcast i16* %9481 to <16 x i16>*
  %9483 = load <16 x i16>, <16 x i16>* %9482, align 2, !tbaa !396
  %9484 = getelementptr inbounds i16, i16* %9472, i64 2
  %9485 = bitcast i16* %9484 to <16 x i16>*
  %9486 = load <16 x i16>, <16 x i16>* %9485, align 2, !tbaa !396
  %9487 = getelementptr inbounds i16, i16* %9472, i64 18
  %9488 = bitcast i16* %9487 to <16 x i16>*
  %9489 = load <16 x i16>, <16 x i16>* %9488, align 2, !tbaa !396
  %9490 = getelementptr inbounds i16, i16* %9472, i64 4
  %9491 = bitcast i16* %9490 to <16 x i16>*
  %9492 = load <16 x i16>, <16 x i16>* %9491, align 2, !tbaa !396
  %9493 = getelementptr inbounds i16, i16* %9472, i64 20
  %9494 = bitcast i16* %9493 to <16 x i16>*
  %9495 = load <16 x i16>, <16 x i16>* %9494, align 2, !tbaa !396
  %9496 = getelementptr inbounds i16, i16* %9472, i64 3
  %9497 = bitcast i16* %9496 to <16 x i16>*
  %9498 = load <16 x i16>, <16 x i16>* %9497, align 2, !tbaa !396
  %9499 = getelementptr inbounds i16, i16* %9472, i64 19
  %9500 = bitcast i16* %9499 to <16 x i16>*
  %9501 = load <16 x i16>, <16 x i16>* %9500, align 2, !tbaa !396
  %9502 = add <16 x i16> %9480, %9475
  %9503 = add <16 x i16> %9502, %9486
  %9504 = add <16 x i16> %9503, %9492
  %9505 = add <16 x i16> %9504, %9498
  %9506 = add <16 x i16> %9483, %9478
  %9507 = add <16 x i16> %9506, %9489
  %9508 = add <16 x i16> %9507, %9495
  %9509 = add <16 x i16> %9508, %9501
  %9510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9505, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9509, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9512 = shufflevector <16 x i16> %9510, <16 x i16> %9511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9513 = lshr <32 x i16> %9512, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9514 = shufflevector <32 x i16> %9513, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9515 = sext i32 %blur_x.s0.x.v1.base.s507 to i64
  %9516 = add nsw i64 %9515, %9340
  %9517 = getelementptr inbounds i16, i16* %blur_x, i64 %9516
  %9518 = bitcast i16* %9517 to <16 x i16>*
  store <16 x i16> %9514, <16 x i16>* %9518, align 2, !tbaa !399
  %9519 = shufflevector <32 x i16> %9513, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9520 = getelementptr inbounds i16, i16* %9517, i64 16
  %9521 = bitcast i16* %9520 to <16 x i16>*
  store <16 x i16> %9519, <16 x i16>* %9521, align 2, !tbaa !399
  br label %"consume blur_x508"

"consume blur_x508":                              ; preds = %"for blur_y.s0.x.x.rebased500", %"produce blur_x506"
  %9522 = sext i32 %b237 to i64
  %9523 = add nsw i64 %9343, %9522
  %9524 = getelementptr inbounds i16, i16* %blur_x, i64 %9523
  %9525 = bitcast i16* %9524 to <16 x i16>*
  %9526 = load <16 x i16>, <16 x i16>* %9525, align 2, !tbaa !399
  %9527 = getelementptr inbounds i16, i16* %9524, i64 16
  %9528 = bitcast i16* %9527 to <16 x i16>*
  %9529 = load <16 x i16>, <16 x i16>* %9528, align 2, !tbaa !399
  %9530 = add nsw i64 %9346, %9522
  %9531 = getelementptr inbounds i16, i16* %blur_x, i64 %9530
  %9532 = bitcast i16* %9531 to <16 x i16>*
  %9533 = load <16 x i16>, <16 x i16>* %9532, align 2, !tbaa !399
  %9534 = getelementptr inbounds i16, i16* %9531, i64 16
  %9535 = bitcast i16* %9534 to <16 x i16>*
  %9536 = load <16 x i16>, <16 x i16>* %9535, align 2, !tbaa !399
  %9537 = add nsw i64 %9349, %9522
  %9538 = getelementptr inbounds i16, i16* %blur_x, i64 %9537
  %9539 = bitcast i16* %9538 to <16 x i16>*
  %9540 = load <16 x i16>, <16 x i16>* %9539, align 2, !tbaa !399
  %9541 = getelementptr inbounds i16, i16* %9538, i64 16
  %9542 = bitcast i16* %9541 to <16 x i16>*
  %9543 = load <16 x i16>, <16 x i16>* %9542, align 2, !tbaa !399
  %9544 = add nsw i64 %9352, %9522
  %9545 = getelementptr inbounds i16, i16* %blur_x, i64 %9544
  %9546 = bitcast i16* %9545 to <16 x i16>*
  %9547 = load <16 x i16>, <16 x i16>* %9546, align 2, !tbaa !399
  %9548 = getelementptr inbounds i16, i16* %9545, i64 16
  %9549 = bitcast i16* %9548 to <16 x i16>*
  %9550 = load <16 x i16>, <16 x i16>* %9549, align 2, !tbaa !399
  %9551 = add nsw i64 %9355, %9522
  %9552 = getelementptr inbounds i16, i16* %blur_x, i64 %9551
  %9553 = bitcast i16* %9552 to <16 x i16>*
  %9554 = load <16 x i16>, <16 x i16>* %9553, align 2, !tbaa !399
  %9555 = getelementptr inbounds i16, i16* %9552, i64 16
  %9556 = bitcast i16* %9555 to <16 x i16>*
  %9557 = load <16 x i16>, <16 x i16>* %9556, align 2, !tbaa !399
  %9558 = add <16 x i16> %9533, %9526
  %9559 = add <16 x i16> %9558, %9540
  %9560 = add <16 x i16> %9559, %9547
  %9561 = add <16 x i16> %9560, %9554
  %9562 = add <16 x i16> %9536, %9529
  %9563 = add <16 x i16> %9562, %9543
  %9564 = add <16 x i16> %9563, %9550
  %9565 = add <16 x i16> %9564, %9557
  %9566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9561, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9565, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9568 = shufflevector <16 x i16> %9566, <16 x i16> %9567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9569 = lshr <32 x i16> %9568, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9570 = shufflevector <32 x i16> %9569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9571 = add nsw i64 %9359, %9522
  %9572 = getelementptr inbounds i16, i16* %66, i64 %9571
  %9573 = bitcast i16* %9572 to <16 x i16>*
  store <16 x i16> %9570, <16 x i16>* %9573, align 2, !tbaa !401
  %9574 = shufflevector <32 x i16> %9569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9575 = getelementptr inbounds i16, i16* %9572, i64 16
  %9576 = bitcast i16* %9575 to <16 x i16>*
  store <16 x i16> %9574, <16 x i16>* %9576, align 2, !tbaa !401
  %9577 = add nuw nsw i32 %blur_y.s0.x.x.rebased502, 1
  %.not2720 = icmp eq i32 %9577, %t1683
  br i1 %.not2720, label %"end for blur_y.s0.x.x.rebased501", label %"for blur_y.s0.x.x.rebased500"

after_bb509:                                      ; preds = %"end for blur_y.s0.x.x.rebased501", %"produce blur_x512"
  br i1 %100, label %"for blur_y.s0.x.x.rebased514.preheader", label %"end for blur_y.s0.x.x.rebased515", !prof !386

"for blur_y.s0.x.x.rebased514.preheader":         ; preds = %after_bb509
  %9578 = sext i32 %t1754 to i64
  %9579 = zext i32 %.pre-phi3492 to i64
  %9580 = mul nsw i64 %9579, %112
  %9581 = sub nsw i64 %9580, %96
  %9582 = zext i32 %.pre-phi3488 to i64
  %9583 = mul nsw i64 %9582, %112
  %9584 = sub nsw i64 %9583, %96
  %9585 = zext i32 %.pre-phi3498 to i64
  %9586 = mul nsw i64 %9585, %112
  %9587 = sub nsw i64 %9586, %96
  %9588 = zext i32 %.pre-phi3510 to i64
  %9589 = mul nsw i64 %9588, %112
  %9590 = sub nsw i64 %9589, %96
  %9591 = zext i32 %.pre-phi3504 to i64
  %9592 = mul nsw i64 %9591, %112
  %9593 = sub nsw i64 %9592, %96
  %9594 = sext i32 %a26 to i64
  %9595 = add nsw i64 %9594, 19
  %9596 = mul nsw i64 %9595, %113
  %9597 = add nsw i64 %9596, %116
  br label %"for blur_y.s0.x.x.rebased514"

"produce blur_x512":                              ; preds = %"end for blur_y.s0.x.x.rebased501"
  %9598 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %9599 = getelementptr inbounds i16, i16* %9598, i64 -31
  %9600 = bitcast i16* %9599 to <16 x i16>*
  %9601 = load <16 x i16>, <16 x i16>* %9600, align 2, !tbaa !396
  %9602 = getelementptr inbounds i16, i16* %9598, i64 -15
  %9603 = bitcast i16* %9602 to <16 x i16>*
  %9604 = load <16 x i16>, <16 x i16>* %9603, align 2, !tbaa !396
  %9605 = getelementptr inbounds i16, i16* %9598, i64 -32
  %9606 = bitcast i16* %9605 to <16 x i16>*
  %9607 = load <16 x i16>, <16 x i16>* %9606, align 2, !tbaa !396
  %9608 = getelementptr inbounds i16, i16* %9598, i64 -16
  %9609 = bitcast i16* %9608 to <16 x i16>*
  %9610 = load <16 x i16>, <16 x i16>* %9609, align 2, !tbaa !396
  %9611 = getelementptr inbounds i16, i16* %9598, i64 -30
  %9612 = bitcast i16* %9611 to <16 x i16>*
  %9613 = load <16 x i16>, <16 x i16>* %9612, align 2, !tbaa !396
  %9614 = getelementptr inbounds i16, i16* %9598, i64 -14
  %9615 = bitcast i16* %9614 to <16 x i16>*
  %9616 = load <16 x i16>, <16 x i16>* %9615, align 2, !tbaa !396
  %9617 = getelementptr inbounds i16, i16* %9598, i64 -28
  %9618 = bitcast i16* %9617 to <16 x i16>*
  %9619 = load <16 x i16>, <16 x i16>* %9618, align 2, !tbaa !396
  %9620 = getelementptr inbounds i16, i16* %9598, i64 -12
  %9621 = bitcast i16* %9620 to <16 x i16>*
  %9622 = load <16 x i16>, <16 x i16>* %9621, align 2, !tbaa !396
  %9623 = getelementptr inbounds i16, i16* %9598, i64 -29
  %9624 = bitcast i16* %9623 to <16 x i16>*
  %9625 = load <16 x i16>, <16 x i16>* %9624, align 2, !tbaa !396
  %9626 = getelementptr inbounds i16, i16* %9598, i64 -13
  %9627 = bitcast i16* %9626 to <16 x i16>*
  %9628 = load <16 x i16>, <16 x i16>* %9627, align 2, !tbaa !396
  %9629 = add <16 x i16> %9607, %9601
  %9630 = add <16 x i16> %9629, %9613
  %9631 = add <16 x i16> %9630, %9619
  %9632 = add <16 x i16> %9631, %9625
  %9633 = add <16 x i16> %9610, %9604
  %9634 = add <16 x i16> %9633, %9616
  %9635 = add <16 x i16> %9634, %9622
  %9636 = add <16 x i16> %9635, %9628
  %9637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9632, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9636, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9639 = shufflevector <16 x i16> %9637, <16 x i16> %9638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9640 = lshr <32 x i16> %9639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9641 = shufflevector <32 x i16> %9640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9642 = zext i32 %.pre-phi3510 to i64
  %9643 = mul nsw i64 %97, %9642
  %9644 = add nsw i64 %99, %9643
  %9645 = getelementptr inbounds i16, i16* %blur_x, i64 %9644
  %9646 = getelementptr inbounds i16, i16* %9645, i64 -32
  %9647 = bitcast i16* %9646 to <16 x i16>*
  store <16 x i16> %9641, <16 x i16>* %9647, align 2, !tbaa !399
  %9648 = shufflevector <32 x i16> %9640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9649 = getelementptr inbounds i16, i16* %9645, i64 -16
  %9650 = bitcast i16* %9649 to <16 x i16>*
  store <16 x i16> %9648, <16 x i16>* %9650, align 2, !tbaa !399
  %9651 = zext i32 %.pre-phi3492 to i64
  %9652 = mul nsw i64 %9651, %112
  %9653 = add nsw i64 %9652, %94
  %9654 = getelementptr inbounds i16, i16* %blur_x, i64 %9653
  %9655 = getelementptr inbounds i16, i16* %9654, i64 -32
  %9656 = bitcast i16* %9655 to <16 x i16>*
  %9657 = load <16 x i16>, <16 x i16>* %9656, align 2, !tbaa !399
  %9658 = getelementptr inbounds i16, i16* %9654, i64 -16
  %9659 = bitcast i16* %9658 to <16 x i16>*
  %9660 = load <16 x i16>, <16 x i16>* %9659, align 2, !tbaa !399
  %9661 = zext i32 %.pre-phi3488 to i64
  %9662 = mul nsw i64 %9661, %112
  %9663 = add nsw i64 %9662, %94
  %9664 = getelementptr inbounds i16, i16* %blur_x, i64 %9663
  %9665 = getelementptr inbounds i16, i16* %9664, i64 -32
  %9666 = bitcast i16* %9665 to <16 x i16>*
  %9667 = load <16 x i16>, <16 x i16>* %9666, align 2, !tbaa !399
  %9668 = getelementptr inbounds i16, i16* %9664, i64 -16
  %9669 = bitcast i16* %9668 to <16 x i16>*
  %9670 = load <16 x i16>, <16 x i16>* %9669, align 2, !tbaa !399
  %9671 = zext i32 %.pre-phi3498 to i64
  %9672 = mul nsw i64 %9671, %112
  %9673 = add nsw i64 %9672, %94
  %9674 = getelementptr inbounds i16, i16* %blur_x, i64 %9673
  %9675 = getelementptr inbounds i16, i16* %9674, i64 -32
  %9676 = bitcast i16* %9675 to <16 x i16>*
  %9677 = load <16 x i16>, <16 x i16>* %9676, align 2, !tbaa !399
  %9678 = getelementptr inbounds i16, i16* %9674, i64 -16
  %9679 = bitcast i16* %9678 to <16 x i16>*
  %9680 = load <16 x i16>, <16 x i16>* %9679, align 2, !tbaa !399
  %9681 = mul nsw i64 %9642, %112
  %9682 = add nsw i64 %9681, %94
  %9683 = getelementptr inbounds i16, i16* %blur_x, i64 %9682
  %9684 = getelementptr inbounds i16, i16* %9683, i64 -32
  %9685 = bitcast i16* %9684 to <16 x i16>*
  %9686 = load <16 x i16>, <16 x i16>* %9685, align 2, !tbaa !399
  %9687 = getelementptr inbounds i16, i16* %9683, i64 -16
  %9688 = bitcast i16* %9687 to <16 x i16>*
  %9689 = load <16 x i16>, <16 x i16>* %9688, align 2, !tbaa !399
  %9690 = zext i32 %.pre-phi3504 to i64
  %9691 = mul nsw i64 %9690, %112
  %9692 = add nsw i64 %9691, %94
  %9693 = getelementptr inbounds i16, i16* %blur_x, i64 %9692
  %9694 = getelementptr inbounds i16, i16* %9693, i64 -32
  %9695 = bitcast i16* %9694 to <16 x i16>*
  %9696 = load <16 x i16>, <16 x i16>* %9695, align 2, !tbaa !399
  %9697 = getelementptr inbounds i16, i16* %9693, i64 -16
  %9698 = bitcast i16* %9697 to <16 x i16>*
  %9699 = load <16 x i16>, <16 x i16>* %9698, align 2, !tbaa !399
  %9700 = add <16 x i16> %9667, %9657
  %9701 = add <16 x i16> %9700, %9677
  %9702 = add <16 x i16> %9701, %9686
  %9703 = add <16 x i16> %9702, %9696
  %9704 = add <16 x i16> %9670, %9660
  %9705 = add <16 x i16> %9704, %9680
  %9706 = add <16 x i16> %9705, %9689
  %9707 = add <16 x i16> %9706, %9699
  %9708 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9703, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9707, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9710 = shufflevector <16 x i16> %9708, <16 x i16> %9709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9711 = lshr <32 x i16> %9710, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9712 = shufflevector <32 x i16> %9711, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9713 = sext i32 %a26 to i64
  %9714 = add nsw i64 %9713, 19
  %9715 = mul nsw i64 %9714, %113
  %9716 = add nsw i64 %115, %9715
  %9717 = getelementptr inbounds i16, i16* %66, i64 %9716
  %9718 = getelementptr inbounds i16, i16* %9717, i64 -32
  %9719 = bitcast i16* %9718 to <16 x i16>*
  store <16 x i16> %9712, <16 x i16>* %9719, align 2, !tbaa !401
  %9720 = shufflevector <32 x i16> %9711, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9721 = getelementptr inbounds i16, i16* %9717, i64 -16
  %9722 = bitcast i16* %9721 to <16 x i16>*
  store <16 x i16> %9720, <16 x i16>* %9722, align 2, !tbaa !401
  br label %after_bb509

"for blur_y.s0.x.x.rebased514":                   ; preds = %"for blur_y.s0.x.x.rebased514.preheader", %"consume blur_x521"
  %indvars.iv3316 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased514.preheader" ], [ %indvars.iv.next3317, %"consume blur_x521" ]
  %9723 = add nsw i64 %indvars.iv3316, %101
  %9724 = icmp slt i64 %9723, 1
  %9725 = trunc i64 %9723 to i32
  %9726 = shl nsw i32 %9725, 5
  %9727 = icmp sgt i32 %4, %9726
  %9728 = or i1 %9724, %9727
  br i1 %9728, label %"produce blur_x520", label %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge"

"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased514"
  %.pre3543 = shl nsw i64 %9723, 5
  br label %"consume blur_x521"

"end for blur_y.s0.x.x.rebased515":               ; preds = %"consume blur_x521", %after_bb509
  br i1 %102, label %"for blur_y.s0.x.x.rebased522.preheader", label %"end for blur_y.s0.x.x.rebased523", !prof !386

"for blur_y.s0.x.x.rebased522.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased515"
  %9729 = sext i32 %t1754 to i64
  %9730 = zext i32 %.pre-phi3492 to i64
  %9731 = mul nsw i64 %9730, %112
  %9732 = sub nsw i64 %9731, %96
  %9733 = zext i32 %.pre-phi3488 to i64
  %9734 = mul nsw i64 %9733, %112
  %9735 = sub nsw i64 %9734, %96
  %9736 = zext i32 %.pre-phi3498 to i64
  %9737 = mul nsw i64 %9736, %112
  %9738 = sub nsw i64 %9737, %96
  %9739 = zext i32 %.pre-phi3510 to i64
  %9740 = mul nsw i64 %9739, %112
  %9741 = sub nsw i64 %9740, %96
  %9742 = zext i32 %.pre-phi3504 to i64
  %9743 = mul nsw i64 %9742, %112
  %9744 = sub nsw i64 %9743, %96
  %9745 = sext i32 %a26 to i64
  %9746 = add nsw i64 %9745, 19
  %9747 = mul nsw i64 %9746, %113
  %9748 = add nsw i64 %9747, %116
  br label %"for blur_y.s0.x.x.rebased522"

"produce blur_x520":                              ; preds = %"for blur_y.s0.x.x.rebased514"
  %t1016 = add nsw i32 %9726, %t2009
  %9749 = sext i32 %t1016 to i64
  %9750 = getelementptr inbounds i16, i16* %read_input, i64 %9749
  %9751 = getelementptr inbounds i16, i16* %9750, i64 1
  %9752 = bitcast i16* %9751 to <16 x i16>*
  %9753 = load <16 x i16>, <16 x i16>* %9752, align 2, !tbaa !396
  %9754 = getelementptr inbounds i16, i16* %9750, i64 17
  %9755 = bitcast i16* %9754 to <16 x i16>*
  %9756 = load <16 x i16>, <16 x i16>* %9755, align 2, !tbaa !396
  %9757 = bitcast i16* %9750 to <16 x i16>*
  %9758 = load <16 x i16>, <16 x i16>* %9757, align 2, !tbaa !396
  %9759 = getelementptr inbounds i16, i16* %9750, i64 16
  %9760 = bitcast i16* %9759 to <16 x i16>*
  %9761 = load <16 x i16>, <16 x i16>* %9760, align 2, !tbaa !396
  %9762 = getelementptr inbounds i16, i16* %9750, i64 2
  %9763 = bitcast i16* %9762 to <16 x i16>*
  %9764 = load <16 x i16>, <16 x i16>* %9763, align 2, !tbaa !396
  %9765 = getelementptr inbounds i16, i16* %9750, i64 18
  %9766 = bitcast i16* %9765 to <16 x i16>*
  %9767 = load <16 x i16>, <16 x i16>* %9766, align 2, !tbaa !396
  %9768 = getelementptr inbounds i16, i16* %9750, i64 4
  %9769 = bitcast i16* %9768 to <16 x i16>*
  %9770 = load <16 x i16>, <16 x i16>* %9769, align 2, !tbaa !396
  %9771 = getelementptr inbounds i16, i16* %9750, i64 20
  %9772 = bitcast i16* %9771 to <16 x i16>*
  %9773 = load <16 x i16>, <16 x i16>* %9772, align 2, !tbaa !396
  %9774 = getelementptr inbounds i16, i16* %9750, i64 3
  %9775 = bitcast i16* %9774 to <16 x i16>*
  %9776 = load <16 x i16>, <16 x i16>* %9775, align 2, !tbaa !396
  %9777 = getelementptr inbounds i16, i16* %9750, i64 19
  %9778 = bitcast i16* %9777 to <16 x i16>*
  %9779 = load <16 x i16>, <16 x i16>* %9778, align 2, !tbaa !396
  %9780 = add <16 x i16> %9758, %9753
  %9781 = add <16 x i16> %9780, %9764
  %9782 = add <16 x i16> %9781, %9770
  %9783 = add <16 x i16> %9782, %9776
  %9784 = add <16 x i16> %9761, %9756
  %9785 = add <16 x i16> %9784, %9767
  %9786 = add <16 x i16> %9785, %9773
  %9787 = add <16 x i16> %9786, %9779
  %9788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9787, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9790 = shufflevector <16 x i16> %9788, <16 x i16> %9789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9791 = lshr <32 x i16> %9790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9792 = shufflevector <32 x i16> %9791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9793 = shl nsw i64 %9723, 5
  %9794 = add nsw i64 %9793, %9578
  %9795 = getelementptr inbounds i16, i16* %blur_x, i64 %9794
  %9796 = bitcast i16* %9795 to <16 x i16>*
  store <16 x i16> %9792, <16 x i16>* %9796, align 2, !tbaa !399
  %9797 = shufflevector <32 x i16> %9791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9798 = getelementptr inbounds i16, i16* %9795, i64 16
  %9799 = bitcast i16* %9798 to <16 x i16>*
  store <16 x i16> %9797, <16 x i16>* %9799, align 2, !tbaa !399
  br label %"consume blur_x521"

"consume blur_x521":                              ; preds = %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge", %"produce blur_x520"
  %.pre-phi3544 = phi i64 [ %.pre3543, %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge" ], [ %9793, %"produce blur_x520" ]
  %9800 = add nsw i64 %9581, %.pre-phi3544
  %9801 = getelementptr inbounds i16, i16* %blur_x, i64 %9800
  %9802 = bitcast i16* %9801 to <16 x i16>*
  %9803 = load <16 x i16>, <16 x i16>* %9802, align 2, !tbaa !399
  %9804 = getelementptr inbounds i16, i16* %9801, i64 16
  %9805 = bitcast i16* %9804 to <16 x i16>*
  %9806 = load <16 x i16>, <16 x i16>* %9805, align 2, !tbaa !399
  %9807 = add nsw i64 %9584, %.pre-phi3544
  %9808 = getelementptr inbounds i16, i16* %blur_x, i64 %9807
  %9809 = bitcast i16* %9808 to <16 x i16>*
  %9810 = load <16 x i16>, <16 x i16>* %9809, align 2, !tbaa !399
  %9811 = getelementptr inbounds i16, i16* %9808, i64 16
  %9812 = bitcast i16* %9811 to <16 x i16>*
  %9813 = load <16 x i16>, <16 x i16>* %9812, align 2, !tbaa !399
  %9814 = add nsw i64 %9587, %.pre-phi3544
  %9815 = getelementptr inbounds i16, i16* %blur_x, i64 %9814
  %9816 = bitcast i16* %9815 to <16 x i16>*
  %9817 = load <16 x i16>, <16 x i16>* %9816, align 2, !tbaa !399
  %9818 = getelementptr inbounds i16, i16* %9815, i64 16
  %9819 = bitcast i16* %9818 to <16 x i16>*
  %9820 = load <16 x i16>, <16 x i16>* %9819, align 2, !tbaa !399
  %9821 = add nsw i64 %9590, %.pre-phi3544
  %9822 = getelementptr inbounds i16, i16* %blur_x, i64 %9821
  %9823 = bitcast i16* %9822 to <16 x i16>*
  %9824 = load <16 x i16>, <16 x i16>* %9823, align 2, !tbaa !399
  %9825 = getelementptr inbounds i16, i16* %9822, i64 16
  %9826 = bitcast i16* %9825 to <16 x i16>*
  %9827 = load <16 x i16>, <16 x i16>* %9826, align 2, !tbaa !399
  %9828 = add nsw i64 %9593, %.pre-phi3544
  %9829 = getelementptr inbounds i16, i16* %blur_x, i64 %9828
  %9830 = bitcast i16* %9829 to <16 x i16>*
  %9831 = load <16 x i16>, <16 x i16>* %9830, align 2, !tbaa !399
  %9832 = getelementptr inbounds i16, i16* %9829, i64 16
  %9833 = bitcast i16* %9832 to <16 x i16>*
  %9834 = load <16 x i16>, <16 x i16>* %9833, align 2, !tbaa !399
  %9835 = add <16 x i16> %9810, %9803
  %9836 = add <16 x i16> %9835, %9817
  %9837 = add <16 x i16> %9836, %9824
  %9838 = add <16 x i16> %9837, %9831
  %9839 = add <16 x i16> %9813, %9806
  %9840 = add <16 x i16> %9839, %9820
  %9841 = add <16 x i16> %9840, %9827
  %9842 = add <16 x i16> %9841, %9834
  %9843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9838, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9842, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9845 = shufflevector <16 x i16> %9843, <16 x i16> %9844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9846 = lshr <32 x i16> %9845, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9847 = shufflevector <32 x i16> %9846, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9848 = add nsw i64 %9597, %.pre-phi3544
  %9849 = getelementptr inbounds i16, i16* %66, i64 %9848
  %9850 = bitcast i16* %9849 to <16 x i16>*
  store <16 x i16> %9847, <16 x i16>* %9850, align 2, !tbaa !401
  %9851 = shufflevector <32 x i16> %9846, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9852 = getelementptr inbounds i16, i16* %9849, i64 16
  %9853 = bitcast i16* %9852 to <16 x i16>*
  store <16 x i16> %9851, <16 x i16>* %9853, align 2, !tbaa !401
  %indvars.iv.next3317 = add nuw nsw i64 %indvars.iv3316, 1
  %.not2719 = icmp eq i64 %indvars.iv.next3317, %184
  br i1 %.not2719, label %"end for blur_y.s0.x.x.rebased515", label %"for blur_y.s0.x.x.rebased514"

"for blur_y.s0.x.x.rebased522":                   ; preds = %"for blur_y.s0.x.x.rebased522.preheader", %"consume blur_x530"
  %blur_y.s0.x.x.rebased524 = phi i32 [ %9966, %"consume blur_x530" ], [ 0, %"for blur_y.s0.x.x.rebased522.preheader" ]
  %9854 = add nsw i32 %blur_y.s0.x.x.rebased524, %t1626
  %a238 = shl nsw i32 %9854, 5
  %9855 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %9855, i32 %a238, i32 %a14
  %9856 = icmp slt i32 %9854, 1
  %9857 = icmp sgt i32 %4, %a238
  %9858 = or i1 %9856, %9857
  br i1 %9858, label %"produce blur_x528", label %"consume blur_x530"

"end for blur_y.s0.x.x.rebased523":               ; preds = %"consume blur_x530", %"end for blur_y.s0.x.x.rebased515"
  br i1 %34, label %"produce blur_x534", label %after_bb531

"produce blur_x528":                              ; preds = %"for blur_y.s0.x.x.rebased522"
  %9859 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s529 = select i1 %9859, i32 %b244, i32 %4
  %t1021 = add nsw i32 %blur_x.s0.x.v1.base.s529, %t2009
  %9860 = sext i32 %t1021 to i64
  %9861 = getelementptr inbounds i16, i16* %read_input, i64 %9860
  %9862 = getelementptr inbounds i16, i16* %9861, i64 1
  %9863 = bitcast i16* %9862 to <16 x i16>*
  %9864 = load <16 x i16>, <16 x i16>* %9863, align 2, !tbaa !396
  %9865 = getelementptr inbounds i16, i16* %9861, i64 17
  %9866 = bitcast i16* %9865 to <16 x i16>*
  %9867 = load <16 x i16>, <16 x i16>* %9866, align 2, !tbaa !396
  %9868 = bitcast i16* %9861 to <16 x i16>*
  %9869 = load <16 x i16>, <16 x i16>* %9868, align 2, !tbaa !396
  %9870 = getelementptr inbounds i16, i16* %9861, i64 16
  %9871 = bitcast i16* %9870 to <16 x i16>*
  %9872 = load <16 x i16>, <16 x i16>* %9871, align 2, !tbaa !396
  %9873 = getelementptr inbounds i16, i16* %9861, i64 2
  %9874 = bitcast i16* %9873 to <16 x i16>*
  %9875 = load <16 x i16>, <16 x i16>* %9874, align 2, !tbaa !396
  %9876 = getelementptr inbounds i16, i16* %9861, i64 18
  %9877 = bitcast i16* %9876 to <16 x i16>*
  %9878 = load <16 x i16>, <16 x i16>* %9877, align 2, !tbaa !396
  %9879 = getelementptr inbounds i16, i16* %9861, i64 4
  %9880 = bitcast i16* %9879 to <16 x i16>*
  %9881 = load <16 x i16>, <16 x i16>* %9880, align 2, !tbaa !396
  %9882 = getelementptr inbounds i16, i16* %9861, i64 20
  %9883 = bitcast i16* %9882 to <16 x i16>*
  %9884 = load <16 x i16>, <16 x i16>* %9883, align 2, !tbaa !396
  %9885 = getelementptr inbounds i16, i16* %9861, i64 3
  %9886 = bitcast i16* %9885 to <16 x i16>*
  %9887 = load <16 x i16>, <16 x i16>* %9886, align 2, !tbaa !396
  %9888 = getelementptr inbounds i16, i16* %9861, i64 19
  %9889 = bitcast i16* %9888 to <16 x i16>*
  %9890 = load <16 x i16>, <16 x i16>* %9889, align 2, !tbaa !396
  %9891 = add <16 x i16> %9869, %9864
  %9892 = add <16 x i16> %9891, %9875
  %9893 = add <16 x i16> %9892, %9881
  %9894 = add <16 x i16> %9893, %9887
  %9895 = add <16 x i16> %9872, %9867
  %9896 = add <16 x i16> %9895, %9878
  %9897 = add <16 x i16> %9896, %9884
  %9898 = add <16 x i16> %9897, %9890
  %9899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9894, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9898, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9901 = shufflevector <16 x i16> %9899, <16 x i16> %9900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9902 = lshr <32 x i16> %9901, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9903 = shufflevector <32 x i16> %9902, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9904 = sext i32 %blur_x.s0.x.v1.base.s529 to i64
  %9905 = add nsw i64 %9904, %9729
  %9906 = getelementptr inbounds i16, i16* %blur_x, i64 %9905
  %9907 = bitcast i16* %9906 to <16 x i16>*
  store <16 x i16> %9903, <16 x i16>* %9907, align 2, !tbaa !399
  %9908 = shufflevector <32 x i16> %9902, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9909 = getelementptr inbounds i16, i16* %9906, i64 16
  %9910 = bitcast i16* %9909 to <16 x i16>*
  store <16 x i16> %9908, <16 x i16>* %9910, align 2, !tbaa !399
  br label %"consume blur_x530"

"consume blur_x530":                              ; preds = %"for blur_y.s0.x.x.rebased522", %"produce blur_x528"
  %9911 = sext i32 %b244 to i64
  %9912 = add nsw i64 %9732, %9911
  %9913 = getelementptr inbounds i16, i16* %blur_x, i64 %9912
  %9914 = bitcast i16* %9913 to <16 x i16>*
  %9915 = load <16 x i16>, <16 x i16>* %9914, align 2, !tbaa !399
  %9916 = getelementptr inbounds i16, i16* %9913, i64 16
  %9917 = bitcast i16* %9916 to <16 x i16>*
  %9918 = load <16 x i16>, <16 x i16>* %9917, align 2, !tbaa !399
  %9919 = add nsw i64 %9735, %9911
  %9920 = getelementptr inbounds i16, i16* %blur_x, i64 %9919
  %9921 = bitcast i16* %9920 to <16 x i16>*
  %9922 = load <16 x i16>, <16 x i16>* %9921, align 2, !tbaa !399
  %9923 = getelementptr inbounds i16, i16* %9920, i64 16
  %9924 = bitcast i16* %9923 to <16 x i16>*
  %9925 = load <16 x i16>, <16 x i16>* %9924, align 2, !tbaa !399
  %9926 = add nsw i64 %9738, %9911
  %9927 = getelementptr inbounds i16, i16* %blur_x, i64 %9926
  %9928 = bitcast i16* %9927 to <16 x i16>*
  %9929 = load <16 x i16>, <16 x i16>* %9928, align 2, !tbaa !399
  %9930 = getelementptr inbounds i16, i16* %9927, i64 16
  %9931 = bitcast i16* %9930 to <16 x i16>*
  %9932 = load <16 x i16>, <16 x i16>* %9931, align 2, !tbaa !399
  %9933 = add nsw i64 %9741, %9911
  %9934 = getelementptr inbounds i16, i16* %blur_x, i64 %9933
  %9935 = bitcast i16* %9934 to <16 x i16>*
  %9936 = load <16 x i16>, <16 x i16>* %9935, align 2, !tbaa !399
  %9937 = getelementptr inbounds i16, i16* %9934, i64 16
  %9938 = bitcast i16* %9937 to <16 x i16>*
  %9939 = load <16 x i16>, <16 x i16>* %9938, align 2, !tbaa !399
  %9940 = add nsw i64 %9744, %9911
  %9941 = getelementptr inbounds i16, i16* %blur_x, i64 %9940
  %9942 = bitcast i16* %9941 to <16 x i16>*
  %9943 = load <16 x i16>, <16 x i16>* %9942, align 2, !tbaa !399
  %9944 = getelementptr inbounds i16, i16* %9941, i64 16
  %9945 = bitcast i16* %9944 to <16 x i16>*
  %9946 = load <16 x i16>, <16 x i16>* %9945, align 2, !tbaa !399
  %9947 = add <16 x i16> %9922, %9915
  %9948 = add <16 x i16> %9947, %9929
  %9949 = add <16 x i16> %9948, %9936
  %9950 = add <16 x i16> %9949, %9943
  %9951 = add <16 x i16> %9925, %9918
  %9952 = add <16 x i16> %9951, %9932
  %9953 = add <16 x i16> %9952, %9939
  %9954 = add <16 x i16> %9953, %9946
  %9955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9950, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9954, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9957 = shufflevector <16 x i16> %9955, <16 x i16> %9956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9958 = lshr <32 x i16> %9957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9959 = shufflevector <32 x i16> %9958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9960 = add nsw i64 %9748, %9911
  %9961 = getelementptr inbounds i16, i16* %66, i64 %9960
  %9962 = bitcast i16* %9961 to <16 x i16>*
  store <16 x i16> %9959, <16 x i16>* %9962, align 2, !tbaa !401
  %9963 = shufflevector <32 x i16> %9958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9964 = getelementptr inbounds i16, i16* %9961, i64 16
  %9965 = bitcast i16* %9964 to <16 x i16>*
  store <16 x i16> %9963, <16 x i16>* %9965, align 2, !tbaa !401
  %9966 = add nuw nsw i32 %blur_y.s0.x.x.rebased524, 1
  %.not2718 = icmp eq i32 %9966, %t1683
  br i1 %.not2718, label %"end for blur_y.s0.x.x.rebased523", label %"for blur_y.s0.x.x.rebased522"

after_bb531:                                      ; preds = %"end for blur_y.s0.x.x.rebased523", %"produce blur_x534"
  br i1 %100, label %"for blur_y.s0.x.x.rebased536.preheader", label %"end for blur_y.s0.x.x.rebased537", !prof !386

"for blur_y.s0.x.x.rebased536.preheader":         ; preds = %after_bb531
  %9967 = sext i32 %t1682 to i64
  %9968 = zext i32 %.pre-phi3498 to i64
  %9969 = mul nsw i64 %9968, %112
  %9970 = sub nsw i64 %9969, %96
  %9971 = zext i32 %.pre-phi3492 to i64
  %9972 = mul nsw i64 %9971, %112
  %9973 = sub nsw i64 %9972, %96
  %9974 = zext i32 %.pre-phi3504 to i64
  %9975 = mul nsw i64 %9974, %112
  %9976 = sub nsw i64 %9975, %96
  %9977 = zext i32 %.pre-phi to i64
  %9978 = mul nsw i64 %9977, %112
  %9979 = sub nsw i64 %9978, %96
  %9980 = zext i32 %.pre-phi3510 to i64
  %9981 = mul nsw i64 %9980, %112
  %9982 = sub nsw i64 %9981, %96
  %9983 = sext i32 %a26 to i64
  %9984 = add nsw i64 %9983, 20
  %9985 = mul nsw i64 %9984, %113
  %9986 = add nsw i64 %9985, %116
  br label %"for blur_y.s0.x.x.rebased536"

"produce blur_x534":                              ; preds = %"end for blur_y.s0.x.x.rebased523"
  %9987 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %9988 = getelementptr inbounds i16, i16* %9987, i64 -31
  %9989 = bitcast i16* %9988 to <16 x i16>*
  %9990 = load <16 x i16>, <16 x i16>* %9989, align 2, !tbaa !396
  %9991 = getelementptr inbounds i16, i16* %9987, i64 -15
  %9992 = bitcast i16* %9991 to <16 x i16>*
  %9993 = load <16 x i16>, <16 x i16>* %9992, align 2, !tbaa !396
  %9994 = getelementptr inbounds i16, i16* %9987, i64 -32
  %9995 = bitcast i16* %9994 to <16 x i16>*
  %9996 = load <16 x i16>, <16 x i16>* %9995, align 2, !tbaa !396
  %9997 = getelementptr inbounds i16, i16* %9987, i64 -16
  %9998 = bitcast i16* %9997 to <16 x i16>*
  %9999 = load <16 x i16>, <16 x i16>* %9998, align 2, !tbaa !396
  %10000 = getelementptr inbounds i16, i16* %9987, i64 -30
  %10001 = bitcast i16* %10000 to <16 x i16>*
  %10002 = load <16 x i16>, <16 x i16>* %10001, align 2, !tbaa !396
  %10003 = getelementptr inbounds i16, i16* %9987, i64 -14
  %10004 = bitcast i16* %10003 to <16 x i16>*
  %10005 = load <16 x i16>, <16 x i16>* %10004, align 2, !tbaa !396
  %10006 = getelementptr inbounds i16, i16* %9987, i64 -28
  %10007 = bitcast i16* %10006 to <16 x i16>*
  %10008 = load <16 x i16>, <16 x i16>* %10007, align 2, !tbaa !396
  %10009 = getelementptr inbounds i16, i16* %9987, i64 -12
  %10010 = bitcast i16* %10009 to <16 x i16>*
  %10011 = load <16 x i16>, <16 x i16>* %10010, align 2, !tbaa !396
  %10012 = getelementptr inbounds i16, i16* %9987, i64 -29
  %10013 = bitcast i16* %10012 to <16 x i16>*
  %10014 = load <16 x i16>, <16 x i16>* %10013, align 2, !tbaa !396
  %10015 = getelementptr inbounds i16, i16* %9987, i64 -13
  %10016 = bitcast i16* %10015 to <16 x i16>*
  %10017 = load <16 x i16>, <16 x i16>* %10016, align 2, !tbaa !396
  %10018 = add <16 x i16> %9996, %9990
  %10019 = add <16 x i16> %10018, %10002
  %10020 = add <16 x i16> %10019, %10008
  %10021 = add <16 x i16> %10020, %10014
  %10022 = add <16 x i16> %9999, %9993
  %10023 = add <16 x i16> %10022, %10005
  %10024 = add <16 x i16> %10023, %10011
  %10025 = add <16 x i16> %10024, %10017
  %10026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10021, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10025, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10028 = shufflevector <16 x i16> %10026, <16 x i16> %10027, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10029 = lshr <32 x i16> %10028, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10030 = shufflevector <32 x i16> %10029, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10031 = zext i32 %.pre-phi to i64
  %10032 = mul nsw i64 %97, %10031
  %10033 = add nsw i64 %99, %10032
  %10034 = getelementptr inbounds i16, i16* %blur_x, i64 %10033
  %10035 = getelementptr inbounds i16, i16* %10034, i64 -32
  %10036 = bitcast i16* %10035 to <16 x i16>*
  store <16 x i16> %10030, <16 x i16>* %10036, align 2, !tbaa !399
  %10037 = shufflevector <32 x i16> %10029, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10038 = getelementptr inbounds i16, i16* %10034, i64 -16
  %10039 = bitcast i16* %10038 to <16 x i16>*
  store <16 x i16> %10037, <16 x i16>* %10039, align 2, !tbaa !399
  %10040 = zext i32 %.pre-phi3498 to i64
  %10041 = mul nsw i64 %10040, %112
  %10042 = add nsw i64 %10041, %94
  %10043 = getelementptr inbounds i16, i16* %blur_x, i64 %10042
  %10044 = getelementptr inbounds i16, i16* %10043, i64 -32
  %10045 = bitcast i16* %10044 to <16 x i16>*
  %10046 = load <16 x i16>, <16 x i16>* %10045, align 2, !tbaa !399
  %10047 = getelementptr inbounds i16, i16* %10043, i64 -16
  %10048 = bitcast i16* %10047 to <16 x i16>*
  %10049 = load <16 x i16>, <16 x i16>* %10048, align 2, !tbaa !399
  %10050 = zext i32 %.pre-phi3492 to i64
  %10051 = mul nsw i64 %10050, %112
  %10052 = add nsw i64 %10051, %94
  %10053 = getelementptr inbounds i16, i16* %blur_x, i64 %10052
  %10054 = getelementptr inbounds i16, i16* %10053, i64 -32
  %10055 = bitcast i16* %10054 to <16 x i16>*
  %10056 = load <16 x i16>, <16 x i16>* %10055, align 2, !tbaa !399
  %10057 = getelementptr inbounds i16, i16* %10053, i64 -16
  %10058 = bitcast i16* %10057 to <16 x i16>*
  %10059 = load <16 x i16>, <16 x i16>* %10058, align 2, !tbaa !399
  %10060 = zext i32 %.pre-phi3504 to i64
  %10061 = mul nsw i64 %10060, %112
  %10062 = add nsw i64 %10061, %94
  %10063 = getelementptr inbounds i16, i16* %blur_x, i64 %10062
  %10064 = getelementptr inbounds i16, i16* %10063, i64 -32
  %10065 = bitcast i16* %10064 to <16 x i16>*
  %10066 = load <16 x i16>, <16 x i16>* %10065, align 2, !tbaa !399
  %10067 = getelementptr inbounds i16, i16* %10063, i64 -16
  %10068 = bitcast i16* %10067 to <16 x i16>*
  %10069 = load <16 x i16>, <16 x i16>* %10068, align 2, !tbaa !399
  %10070 = mul nsw i64 %10031, %112
  %10071 = add nsw i64 %10070, %94
  %10072 = getelementptr inbounds i16, i16* %blur_x, i64 %10071
  %10073 = getelementptr inbounds i16, i16* %10072, i64 -32
  %10074 = bitcast i16* %10073 to <16 x i16>*
  %10075 = load <16 x i16>, <16 x i16>* %10074, align 2, !tbaa !399
  %10076 = getelementptr inbounds i16, i16* %10072, i64 -16
  %10077 = bitcast i16* %10076 to <16 x i16>*
  %10078 = load <16 x i16>, <16 x i16>* %10077, align 2, !tbaa !399
  %10079 = zext i32 %.pre-phi3510 to i64
  %10080 = mul nsw i64 %10079, %112
  %10081 = add nsw i64 %10080, %94
  %10082 = getelementptr inbounds i16, i16* %blur_x, i64 %10081
  %10083 = getelementptr inbounds i16, i16* %10082, i64 -32
  %10084 = bitcast i16* %10083 to <16 x i16>*
  %10085 = load <16 x i16>, <16 x i16>* %10084, align 2, !tbaa !399
  %10086 = getelementptr inbounds i16, i16* %10082, i64 -16
  %10087 = bitcast i16* %10086 to <16 x i16>*
  %10088 = load <16 x i16>, <16 x i16>* %10087, align 2, !tbaa !399
  %10089 = add <16 x i16> %10056, %10046
  %10090 = add <16 x i16> %10089, %10066
  %10091 = add <16 x i16> %10090, %10075
  %10092 = add <16 x i16> %10091, %10085
  %10093 = add <16 x i16> %10059, %10049
  %10094 = add <16 x i16> %10093, %10069
  %10095 = add <16 x i16> %10094, %10078
  %10096 = add <16 x i16> %10095, %10088
  %10097 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10092, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10098 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10096, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10099 = shufflevector <16 x i16> %10097, <16 x i16> %10098, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10100 = lshr <32 x i16> %10099, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10101 = shufflevector <32 x i16> %10100, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10102 = sext i32 %a26 to i64
  %10103 = add nsw i64 %10102, 20
  %10104 = mul nsw i64 %10103, %113
  %10105 = add nsw i64 %115, %10104
  %10106 = getelementptr inbounds i16, i16* %66, i64 %10105
  %10107 = getelementptr inbounds i16, i16* %10106, i64 -32
  %10108 = bitcast i16* %10107 to <16 x i16>*
  store <16 x i16> %10101, <16 x i16>* %10108, align 2, !tbaa !401
  %10109 = shufflevector <32 x i16> %10100, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10110 = getelementptr inbounds i16, i16* %10106, i64 -16
  %10111 = bitcast i16* %10110 to <16 x i16>*
  store <16 x i16> %10109, <16 x i16>* %10111, align 2, !tbaa !401
  br label %after_bb531

"for blur_y.s0.x.x.rebased536":                   ; preds = %"for blur_y.s0.x.x.rebased536.preheader", %"consume blur_x543"
  %indvars.iv3319 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased536.preheader" ], [ %indvars.iv.next3320, %"consume blur_x543" ]
  %10112 = add nsw i64 %indvars.iv3319, %101
  %10113 = icmp slt i64 %10112, 1
  %10114 = trunc i64 %10112 to i32
  %10115 = shl nsw i32 %10114, 5
  %10116 = icmp sgt i32 %4, %10115
  %10117 = or i1 %10113, %10116
  br i1 %10117, label %"produce blur_x542", label %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge"

"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased536"
  %.pre3545 = shl nsw i64 %10112, 5
  br label %"consume blur_x543"

"end for blur_y.s0.x.x.rebased537":               ; preds = %"consume blur_x543", %after_bb531
  br i1 %102, label %"for blur_y.s0.x.x.rebased544.preheader", label %"end for blur_y.s0.x.x.rebased545", !prof !386

"for blur_y.s0.x.x.rebased544.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased537"
  %10118 = sext i32 %t1682 to i64
  %10119 = zext i32 %.pre-phi3498 to i64
  %10120 = mul nsw i64 %10119, %112
  %10121 = sub nsw i64 %10120, %96
  %10122 = zext i32 %.pre-phi3492 to i64
  %10123 = mul nsw i64 %10122, %112
  %10124 = sub nsw i64 %10123, %96
  %10125 = zext i32 %.pre-phi3504 to i64
  %10126 = mul nsw i64 %10125, %112
  %10127 = sub nsw i64 %10126, %96
  %10128 = zext i32 %.pre-phi to i64
  %10129 = mul nsw i64 %10128, %112
  %10130 = sub nsw i64 %10129, %96
  %10131 = zext i32 %.pre-phi3510 to i64
  %10132 = mul nsw i64 %10131, %112
  %10133 = sub nsw i64 %10132, %96
  %10134 = sext i32 %a26 to i64
  %10135 = add nsw i64 %10134, 20
  %10136 = mul nsw i64 %10135, %113
  %10137 = add nsw i64 %10136, %116
  br label %"for blur_y.s0.x.x.rebased544"

"produce blur_x542":                              ; preds = %"for blur_y.s0.x.x.rebased536"
  %t1032 = add nsw i32 %10115, %t2025
  %10138 = sext i32 %t1032 to i64
  %10139 = getelementptr inbounds i16, i16* %read_input, i64 %10138
  %10140 = getelementptr inbounds i16, i16* %10139, i64 1
  %10141 = bitcast i16* %10140 to <16 x i16>*
  %10142 = load <16 x i16>, <16 x i16>* %10141, align 2, !tbaa !396
  %10143 = getelementptr inbounds i16, i16* %10139, i64 17
  %10144 = bitcast i16* %10143 to <16 x i16>*
  %10145 = load <16 x i16>, <16 x i16>* %10144, align 2, !tbaa !396
  %10146 = bitcast i16* %10139 to <16 x i16>*
  %10147 = load <16 x i16>, <16 x i16>* %10146, align 2, !tbaa !396
  %10148 = getelementptr inbounds i16, i16* %10139, i64 16
  %10149 = bitcast i16* %10148 to <16 x i16>*
  %10150 = load <16 x i16>, <16 x i16>* %10149, align 2, !tbaa !396
  %10151 = getelementptr inbounds i16, i16* %10139, i64 2
  %10152 = bitcast i16* %10151 to <16 x i16>*
  %10153 = load <16 x i16>, <16 x i16>* %10152, align 2, !tbaa !396
  %10154 = getelementptr inbounds i16, i16* %10139, i64 18
  %10155 = bitcast i16* %10154 to <16 x i16>*
  %10156 = load <16 x i16>, <16 x i16>* %10155, align 2, !tbaa !396
  %10157 = getelementptr inbounds i16, i16* %10139, i64 4
  %10158 = bitcast i16* %10157 to <16 x i16>*
  %10159 = load <16 x i16>, <16 x i16>* %10158, align 2, !tbaa !396
  %10160 = getelementptr inbounds i16, i16* %10139, i64 20
  %10161 = bitcast i16* %10160 to <16 x i16>*
  %10162 = load <16 x i16>, <16 x i16>* %10161, align 2, !tbaa !396
  %10163 = getelementptr inbounds i16, i16* %10139, i64 3
  %10164 = bitcast i16* %10163 to <16 x i16>*
  %10165 = load <16 x i16>, <16 x i16>* %10164, align 2, !tbaa !396
  %10166 = getelementptr inbounds i16, i16* %10139, i64 19
  %10167 = bitcast i16* %10166 to <16 x i16>*
  %10168 = load <16 x i16>, <16 x i16>* %10167, align 2, !tbaa !396
  %10169 = add <16 x i16> %10147, %10142
  %10170 = add <16 x i16> %10169, %10153
  %10171 = add <16 x i16> %10170, %10159
  %10172 = add <16 x i16> %10171, %10165
  %10173 = add <16 x i16> %10150, %10145
  %10174 = add <16 x i16> %10173, %10156
  %10175 = add <16 x i16> %10174, %10162
  %10176 = add <16 x i16> %10175, %10168
  %10177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10172, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10176, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10179 = shufflevector <16 x i16> %10177, <16 x i16> %10178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10180 = lshr <32 x i16> %10179, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10181 = shufflevector <32 x i16> %10180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10182 = shl nsw i64 %10112, 5
  %10183 = add nsw i64 %10182, %9967
  %10184 = getelementptr inbounds i16, i16* %blur_x, i64 %10183
  %10185 = bitcast i16* %10184 to <16 x i16>*
  store <16 x i16> %10181, <16 x i16>* %10185, align 2, !tbaa !399
  %10186 = shufflevector <32 x i16> %10180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10187 = getelementptr inbounds i16, i16* %10184, i64 16
  %10188 = bitcast i16* %10187 to <16 x i16>*
  store <16 x i16> %10186, <16 x i16>* %10188, align 2, !tbaa !399
  br label %"consume blur_x543"

"consume blur_x543":                              ; preds = %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge", %"produce blur_x542"
  %.pre-phi3546 = phi i64 [ %.pre3545, %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge" ], [ %10182, %"produce blur_x542" ]
  %10189 = add nsw i64 %9970, %.pre-phi3546
  %10190 = getelementptr inbounds i16, i16* %blur_x, i64 %10189
  %10191 = bitcast i16* %10190 to <16 x i16>*
  %10192 = load <16 x i16>, <16 x i16>* %10191, align 2, !tbaa !399
  %10193 = getelementptr inbounds i16, i16* %10190, i64 16
  %10194 = bitcast i16* %10193 to <16 x i16>*
  %10195 = load <16 x i16>, <16 x i16>* %10194, align 2, !tbaa !399
  %10196 = add nsw i64 %9973, %.pre-phi3546
  %10197 = getelementptr inbounds i16, i16* %blur_x, i64 %10196
  %10198 = bitcast i16* %10197 to <16 x i16>*
  %10199 = load <16 x i16>, <16 x i16>* %10198, align 2, !tbaa !399
  %10200 = getelementptr inbounds i16, i16* %10197, i64 16
  %10201 = bitcast i16* %10200 to <16 x i16>*
  %10202 = load <16 x i16>, <16 x i16>* %10201, align 2, !tbaa !399
  %10203 = add nsw i64 %9976, %.pre-phi3546
  %10204 = getelementptr inbounds i16, i16* %blur_x, i64 %10203
  %10205 = bitcast i16* %10204 to <16 x i16>*
  %10206 = load <16 x i16>, <16 x i16>* %10205, align 2, !tbaa !399
  %10207 = getelementptr inbounds i16, i16* %10204, i64 16
  %10208 = bitcast i16* %10207 to <16 x i16>*
  %10209 = load <16 x i16>, <16 x i16>* %10208, align 2, !tbaa !399
  %10210 = add nsw i64 %9979, %.pre-phi3546
  %10211 = getelementptr inbounds i16, i16* %blur_x, i64 %10210
  %10212 = bitcast i16* %10211 to <16 x i16>*
  %10213 = load <16 x i16>, <16 x i16>* %10212, align 2, !tbaa !399
  %10214 = getelementptr inbounds i16, i16* %10211, i64 16
  %10215 = bitcast i16* %10214 to <16 x i16>*
  %10216 = load <16 x i16>, <16 x i16>* %10215, align 2, !tbaa !399
  %10217 = add nsw i64 %9982, %.pre-phi3546
  %10218 = getelementptr inbounds i16, i16* %blur_x, i64 %10217
  %10219 = bitcast i16* %10218 to <16 x i16>*
  %10220 = load <16 x i16>, <16 x i16>* %10219, align 2, !tbaa !399
  %10221 = getelementptr inbounds i16, i16* %10218, i64 16
  %10222 = bitcast i16* %10221 to <16 x i16>*
  %10223 = load <16 x i16>, <16 x i16>* %10222, align 2, !tbaa !399
  %10224 = add <16 x i16> %10199, %10192
  %10225 = add <16 x i16> %10224, %10206
  %10226 = add <16 x i16> %10225, %10213
  %10227 = add <16 x i16> %10226, %10220
  %10228 = add <16 x i16> %10202, %10195
  %10229 = add <16 x i16> %10228, %10209
  %10230 = add <16 x i16> %10229, %10216
  %10231 = add <16 x i16> %10230, %10223
  %10232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10227, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10231, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10234 = shufflevector <16 x i16> %10232, <16 x i16> %10233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10235 = lshr <32 x i16> %10234, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10236 = shufflevector <32 x i16> %10235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10237 = add nsw i64 %9986, %.pre-phi3546
  %10238 = getelementptr inbounds i16, i16* %66, i64 %10237
  %10239 = bitcast i16* %10238 to <16 x i16>*
  store <16 x i16> %10236, <16 x i16>* %10239, align 2, !tbaa !401
  %10240 = shufflevector <32 x i16> %10235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10241 = getelementptr inbounds i16, i16* %10238, i64 16
  %10242 = bitcast i16* %10241 to <16 x i16>*
  store <16 x i16> %10240, <16 x i16>* %10242, align 2, !tbaa !401
  %indvars.iv.next3320 = add nuw nsw i64 %indvars.iv3319, 1
  %.not2717 = icmp eq i64 %indvars.iv.next3320, %184
  br i1 %.not2717, label %"end for blur_y.s0.x.x.rebased537", label %"for blur_y.s0.x.x.rebased536"

"for blur_y.s0.x.x.rebased544":                   ; preds = %"for blur_y.s0.x.x.rebased544.preheader", %"consume blur_x552"
  %blur_y.s0.x.x.rebased546 = phi i32 [ %10355, %"consume blur_x552" ], [ 0, %"for blur_y.s0.x.x.rebased544.preheader" ]
  %10243 = add nsw i32 %blur_y.s0.x.x.rebased546, %t1626
  %a245 = shl nsw i32 %10243, 5
  %10244 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %10244, i32 %a245, i32 %a14
  %10245 = icmp slt i32 %10243, 1
  %10246 = icmp sgt i32 %4, %a245
  %10247 = or i1 %10245, %10246
  br i1 %10247, label %"produce blur_x550", label %"consume blur_x552"

"end for blur_y.s0.x.x.rebased545":               ; preds = %"consume blur_x552", %"end for blur_y.s0.x.x.rebased537"
  br i1 %34, label %"produce blur_x556", label %after_bb553

"produce blur_x550":                              ; preds = %"for blur_y.s0.x.x.rebased544"
  %10248 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s551 = select i1 %10248, i32 %b251, i32 %4
  %t1037 = add nsw i32 %blur_x.s0.x.v1.base.s551, %t2025
  %10249 = sext i32 %t1037 to i64
  %10250 = getelementptr inbounds i16, i16* %read_input, i64 %10249
  %10251 = getelementptr inbounds i16, i16* %10250, i64 1
  %10252 = bitcast i16* %10251 to <16 x i16>*
  %10253 = load <16 x i16>, <16 x i16>* %10252, align 2, !tbaa !396
  %10254 = getelementptr inbounds i16, i16* %10250, i64 17
  %10255 = bitcast i16* %10254 to <16 x i16>*
  %10256 = load <16 x i16>, <16 x i16>* %10255, align 2, !tbaa !396
  %10257 = bitcast i16* %10250 to <16 x i16>*
  %10258 = load <16 x i16>, <16 x i16>* %10257, align 2, !tbaa !396
  %10259 = getelementptr inbounds i16, i16* %10250, i64 16
  %10260 = bitcast i16* %10259 to <16 x i16>*
  %10261 = load <16 x i16>, <16 x i16>* %10260, align 2, !tbaa !396
  %10262 = getelementptr inbounds i16, i16* %10250, i64 2
  %10263 = bitcast i16* %10262 to <16 x i16>*
  %10264 = load <16 x i16>, <16 x i16>* %10263, align 2, !tbaa !396
  %10265 = getelementptr inbounds i16, i16* %10250, i64 18
  %10266 = bitcast i16* %10265 to <16 x i16>*
  %10267 = load <16 x i16>, <16 x i16>* %10266, align 2, !tbaa !396
  %10268 = getelementptr inbounds i16, i16* %10250, i64 4
  %10269 = bitcast i16* %10268 to <16 x i16>*
  %10270 = load <16 x i16>, <16 x i16>* %10269, align 2, !tbaa !396
  %10271 = getelementptr inbounds i16, i16* %10250, i64 20
  %10272 = bitcast i16* %10271 to <16 x i16>*
  %10273 = load <16 x i16>, <16 x i16>* %10272, align 2, !tbaa !396
  %10274 = getelementptr inbounds i16, i16* %10250, i64 3
  %10275 = bitcast i16* %10274 to <16 x i16>*
  %10276 = load <16 x i16>, <16 x i16>* %10275, align 2, !tbaa !396
  %10277 = getelementptr inbounds i16, i16* %10250, i64 19
  %10278 = bitcast i16* %10277 to <16 x i16>*
  %10279 = load <16 x i16>, <16 x i16>* %10278, align 2, !tbaa !396
  %10280 = add <16 x i16> %10258, %10253
  %10281 = add <16 x i16> %10280, %10264
  %10282 = add <16 x i16> %10281, %10270
  %10283 = add <16 x i16> %10282, %10276
  %10284 = add <16 x i16> %10261, %10256
  %10285 = add <16 x i16> %10284, %10267
  %10286 = add <16 x i16> %10285, %10273
  %10287 = add <16 x i16> %10286, %10279
  %10288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10283, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10287, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10290 = shufflevector <16 x i16> %10288, <16 x i16> %10289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10291 = lshr <32 x i16> %10290, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10292 = shufflevector <32 x i16> %10291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10293 = sext i32 %blur_x.s0.x.v1.base.s551 to i64
  %10294 = add nsw i64 %10293, %10118
  %10295 = getelementptr inbounds i16, i16* %blur_x, i64 %10294
  %10296 = bitcast i16* %10295 to <16 x i16>*
  store <16 x i16> %10292, <16 x i16>* %10296, align 2, !tbaa !399
  %10297 = shufflevector <32 x i16> %10291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10298 = getelementptr inbounds i16, i16* %10295, i64 16
  %10299 = bitcast i16* %10298 to <16 x i16>*
  store <16 x i16> %10297, <16 x i16>* %10299, align 2, !tbaa !399
  br label %"consume blur_x552"

"consume blur_x552":                              ; preds = %"for blur_y.s0.x.x.rebased544", %"produce blur_x550"
  %10300 = sext i32 %b251 to i64
  %10301 = add nsw i64 %10121, %10300
  %10302 = getelementptr inbounds i16, i16* %blur_x, i64 %10301
  %10303 = bitcast i16* %10302 to <16 x i16>*
  %10304 = load <16 x i16>, <16 x i16>* %10303, align 2, !tbaa !399
  %10305 = getelementptr inbounds i16, i16* %10302, i64 16
  %10306 = bitcast i16* %10305 to <16 x i16>*
  %10307 = load <16 x i16>, <16 x i16>* %10306, align 2, !tbaa !399
  %10308 = add nsw i64 %10124, %10300
  %10309 = getelementptr inbounds i16, i16* %blur_x, i64 %10308
  %10310 = bitcast i16* %10309 to <16 x i16>*
  %10311 = load <16 x i16>, <16 x i16>* %10310, align 2, !tbaa !399
  %10312 = getelementptr inbounds i16, i16* %10309, i64 16
  %10313 = bitcast i16* %10312 to <16 x i16>*
  %10314 = load <16 x i16>, <16 x i16>* %10313, align 2, !tbaa !399
  %10315 = add nsw i64 %10127, %10300
  %10316 = getelementptr inbounds i16, i16* %blur_x, i64 %10315
  %10317 = bitcast i16* %10316 to <16 x i16>*
  %10318 = load <16 x i16>, <16 x i16>* %10317, align 2, !tbaa !399
  %10319 = getelementptr inbounds i16, i16* %10316, i64 16
  %10320 = bitcast i16* %10319 to <16 x i16>*
  %10321 = load <16 x i16>, <16 x i16>* %10320, align 2, !tbaa !399
  %10322 = add nsw i64 %10130, %10300
  %10323 = getelementptr inbounds i16, i16* %blur_x, i64 %10322
  %10324 = bitcast i16* %10323 to <16 x i16>*
  %10325 = load <16 x i16>, <16 x i16>* %10324, align 2, !tbaa !399
  %10326 = getelementptr inbounds i16, i16* %10323, i64 16
  %10327 = bitcast i16* %10326 to <16 x i16>*
  %10328 = load <16 x i16>, <16 x i16>* %10327, align 2, !tbaa !399
  %10329 = add nsw i64 %10133, %10300
  %10330 = getelementptr inbounds i16, i16* %blur_x, i64 %10329
  %10331 = bitcast i16* %10330 to <16 x i16>*
  %10332 = load <16 x i16>, <16 x i16>* %10331, align 2, !tbaa !399
  %10333 = getelementptr inbounds i16, i16* %10330, i64 16
  %10334 = bitcast i16* %10333 to <16 x i16>*
  %10335 = load <16 x i16>, <16 x i16>* %10334, align 2, !tbaa !399
  %10336 = add <16 x i16> %10311, %10304
  %10337 = add <16 x i16> %10336, %10318
  %10338 = add <16 x i16> %10337, %10325
  %10339 = add <16 x i16> %10338, %10332
  %10340 = add <16 x i16> %10314, %10307
  %10341 = add <16 x i16> %10340, %10321
  %10342 = add <16 x i16> %10341, %10328
  %10343 = add <16 x i16> %10342, %10335
  %10344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10339, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10343, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10346 = shufflevector <16 x i16> %10344, <16 x i16> %10345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10347 = lshr <32 x i16> %10346, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10348 = shufflevector <32 x i16> %10347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10349 = add nsw i64 %10137, %10300
  %10350 = getelementptr inbounds i16, i16* %66, i64 %10349
  %10351 = bitcast i16* %10350 to <16 x i16>*
  store <16 x i16> %10348, <16 x i16>* %10351, align 2, !tbaa !401
  %10352 = shufflevector <32 x i16> %10347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10353 = getelementptr inbounds i16, i16* %10350, i64 16
  %10354 = bitcast i16* %10353 to <16 x i16>*
  store <16 x i16> %10352, <16 x i16>* %10354, align 2, !tbaa !401
  %10355 = add nuw nsw i32 %blur_y.s0.x.x.rebased546, 1
  %.not2716 = icmp eq i32 %10355, %t1683
  br i1 %.not2716, label %"end for blur_y.s0.x.x.rebased545", label %"for blur_y.s0.x.x.rebased544"

after_bb553:                                      ; preds = %"end for blur_y.s0.x.x.rebased545", %"produce blur_x556"
  br i1 %100, label %"for blur_y.s0.x.x.rebased558.preheader", label %"end for blur_y.s0.x.x.rebased559", !prof !386

"for blur_y.s0.x.x.rebased558.preheader":         ; preds = %after_bb553
  %10356 = sext i32 %t1688 to i64
  %10357 = zext i32 %.pre-phi3504 to i64
  %10358 = mul nsw i64 %10357, %112
  %10359 = sub nsw i64 %10358, %96
  %10360 = zext i32 %.pre-phi3498 to i64
  %10361 = mul nsw i64 %10360, %112
  %10362 = sub nsw i64 %10361, %96
  %10363 = zext i32 %.pre-phi3510 to i64
  %10364 = mul nsw i64 %10363, %112
  %10365 = sub nsw i64 %10364, %96
  %10366 = zext i32 %.pre-phi3480 to i64
  %10367 = mul nsw i64 %10366, %112
  %10368 = sub nsw i64 %10367, %96
  %10369 = zext i32 %.pre-phi to i64
  %10370 = mul nsw i64 %10369, %112
  %10371 = sub nsw i64 %10370, %96
  %10372 = sext i32 %a26 to i64
  %10373 = add nsw i64 %10372, 21
  %10374 = mul nsw i64 %10373, %113
  %10375 = add nsw i64 %10374, %116
  br label %"for blur_y.s0.x.x.rebased558"

"produce blur_x556":                              ; preds = %"end for blur_y.s0.x.x.rebased545"
  %10376 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %10377 = getelementptr inbounds i16, i16* %10376, i64 -31
  %10378 = bitcast i16* %10377 to <16 x i16>*
  %10379 = load <16 x i16>, <16 x i16>* %10378, align 2, !tbaa !396
  %10380 = getelementptr inbounds i16, i16* %10376, i64 -15
  %10381 = bitcast i16* %10380 to <16 x i16>*
  %10382 = load <16 x i16>, <16 x i16>* %10381, align 2, !tbaa !396
  %10383 = getelementptr inbounds i16, i16* %10376, i64 -32
  %10384 = bitcast i16* %10383 to <16 x i16>*
  %10385 = load <16 x i16>, <16 x i16>* %10384, align 2, !tbaa !396
  %10386 = getelementptr inbounds i16, i16* %10376, i64 -16
  %10387 = bitcast i16* %10386 to <16 x i16>*
  %10388 = load <16 x i16>, <16 x i16>* %10387, align 2, !tbaa !396
  %10389 = getelementptr inbounds i16, i16* %10376, i64 -30
  %10390 = bitcast i16* %10389 to <16 x i16>*
  %10391 = load <16 x i16>, <16 x i16>* %10390, align 2, !tbaa !396
  %10392 = getelementptr inbounds i16, i16* %10376, i64 -14
  %10393 = bitcast i16* %10392 to <16 x i16>*
  %10394 = load <16 x i16>, <16 x i16>* %10393, align 2, !tbaa !396
  %10395 = getelementptr inbounds i16, i16* %10376, i64 -28
  %10396 = bitcast i16* %10395 to <16 x i16>*
  %10397 = load <16 x i16>, <16 x i16>* %10396, align 2, !tbaa !396
  %10398 = getelementptr inbounds i16, i16* %10376, i64 -12
  %10399 = bitcast i16* %10398 to <16 x i16>*
  %10400 = load <16 x i16>, <16 x i16>* %10399, align 2, !tbaa !396
  %10401 = getelementptr inbounds i16, i16* %10376, i64 -29
  %10402 = bitcast i16* %10401 to <16 x i16>*
  %10403 = load <16 x i16>, <16 x i16>* %10402, align 2, !tbaa !396
  %10404 = getelementptr inbounds i16, i16* %10376, i64 -13
  %10405 = bitcast i16* %10404 to <16 x i16>*
  %10406 = load <16 x i16>, <16 x i16>* %10405, align 2, !tbaa !396
  %10407 = add <16 x i16> %10385, %10379
  %10408 = add <16 x i16> %10407, %10391
  %10409 = add <16 x i16> %10408, %10397
  %10410 = add <16 x i16> %10409, %10403
  %10411 = add <16 x i16> %10388, %10382
  %10412 = add <16 x i16> %10411, %10394
  %10413 = add <16 x i16> %10412, %10400
  %10414 = add <16 x i16> %10413, %10406
  %10415 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10410, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10416 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10414, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10417 = shufflevector <16 x i16> %10415, <16 x i16> %10416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10418 = lshr <32 x i16> %10417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10419 = shufflevector <32 x i16> %10418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10420 = zext i32 %.pre-phi3480 to i64
  %10421 = mul nsw i64 %97, %10420
  %10422 = add nsw i64 %99, %10421
  %10423 = getelementptr inbounds i16, i16* %blur_x, i64 %10422
  %10424 = getelementptr inbounds i16, i16* %10423, i64 -32
  %10425 = bitcast i16* %10424 to <16 x i16>*
  store <16 x i16> %10419, <16 x i16>* %10425, align 2, !tbaa !399
  %10426 = shufflevector <32 x i16> %10418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10427 = getelementptr inbounds i16, i16* %10423, i64 -16
  %10428 = bitcast i16* %10427 to <16 x i16>*
  store <16 x i16> %10426, <16 x i16>* %10428, align 2, !tbaa !399
  %10429 = zext i32 %.pre-phi3504 to i64
  %10430 = mul nsw i64 %10429, %112
  %10431 = add nsw i64 %10430, %94
  %10432 = getelementptr inbounds i16, i16* %blur_x, i64 %10431
  %10433 = getelementptr inbounds i16, i16* %10432, i64 -32
  %10434 = bitcast i16* %10433 to <16 x i16>*
  %10435 = load <16 x i16>, <16 x i16>* %10434, align 2, !tbaa !399
  %10436 = getelementptr inbounds i16, i16* %10432, i64 -16
  %10437 = bitcast i16* %10436 to <16 x i16>*
  %10438 = load <16 x i16>, <16 x i16>* %10437, align 2, !tbaa !399
  %10439 = zext i32 %.pre-phi3498 to i64
  %10440 = mul nsw i64 %10439, %112
  %10441 = add nsw i64 %10440, %94
  %10442 = getelementptr inbounds i16, i16* %blur_x, i64 %10441
  %10443 = getelementptr inbounds i16, i16* %10442, i64 -32
  %10444 = bitcast i16* %10443 to <16 x i16>*
  %10445 = load <16 x i16>, <16 x i16>* %10444, align 2, !tbaa !399
  %10446 = getelementptr inbounds i16, i16* %10442, i64 -16
  %10447 = bitcast i16* %10446 to <16 x i16>*
  %10448 = load <16 x i16>, <16 x i16>* %10447, align 2, !tbaa !399
  %10449 = zext i32 %.pre-phi3510 to i64
  %10450 = mul nsw i64 %10449, %112
  %10451 = add nsw i64 %10450, %94
  %10452 = getelementptr inbounds i16, i16* %blur_x, i64 %10451
  %10453 = getelementptr inbounds i16, i16* %10452, i64 -32
  %10454 = bitcast i16* %10453 to <16 x i16>*
  %10455 = load <16 x i16>, <16 x i16>* %10454, align 2, !tbaa !399
  %10456 = getelementptr inbounds i16, i16* %10452, i64 -16
  %10457 = bitcast i16* %10456 to <16 x i16>*
  %10458 = load <16 x i16>, <16 x i16>* %10457, align 2, !tbaa !399
  %10459 = mul nsw i64 %10420, %112
  %10460 = add nsw i64 %10459, %94
  %10461 = getelementptr inbounds i16, i16* %blur_x, i64 %10460
  %10462 = getelementptr inbounds i16, i16* %10461, i64 -32
  %10463 = bitcast i16* %10462 to <16 x i16>*
  %10464 = load <16 x i16>, <16 x i16>* %10463, align 2, !tbaa !399
  %10465 = getelementptr inbounds i16, i16* %10461, i64 -16
  %10466 = bitcast i16* %10465 to <16 x i16>*
  %10467 = load <16 x i16>, <16 x i16>* %10466, align 2, !tbaa !399
  %10468 = zext i32 %.pre-phi to i64
  %10469 = mul nsw i64 %10468, %112
  %10470 = add nsw i64 %10469, %94
  %10471 = getelementptr inbounds i16, i16* %blur_x, i64 %10470
  %10472 = getelementptr inbounds i16, i16* %10471, i64 -32
  %10473 = bitcast i16* %10472 to <16 x i16>*
  %10474 = load <16 x i16>, <16 x i16>* %10473, align 2, !tbaa !399
  %10475 = getelementptr inbounds i16, i16* %10471, i64 -16
  %10476 = bitcast i16* %10475 to <16 x i16>*
  %10477 = load <16 x i16>, <16 x i16>* %10476, align 2, !tbaa !399
  %10478 = add <16 x i16> %10445, %10435
  %10479 = add <16 x i16> %10478, %10455
  %10480 = add <16 x i16> %10479, %10464
  %10481 = add <16 x i16> %10480, %10474
  %10482 = add <16 x i16> %10448, %10438
  %10483 = add <16 x i16> %10482, %10458
  %10484 = add <16 x i16> %10483, %10467
  %10485 = add <16 x i16> %10484, %10477
  %10486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10481, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10485, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10488 = shufflevector <16 x i16> %10486, <16 x i16> %10487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10489 = lshr <32 x i16> %10488, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10490 = shufflevector <32 x i16> %10489, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10491 = sext i32 %a26 to i64
  %10492 = add nsw i64 %10491, 21
  %10493 = mul nsw i64 %10492, %113
  %10494 = add nsw i64 %115, %10493
  %10495 = getelementptr inbounds i16, i16* %66, i64 %10494
  %10496 = getelementptr inbounds i16, i16* %10495, i64 -32
  %10497 = bitcast i16* %10496 to <16 x i16>*
  store <16 x i16> %10490, <16 x i16>* %10497, align 2, !tbaa !401
  %10498 = shufflevector <32 x i16> %10489, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10499 = getelementptr inbounds i16, i16* %10495, i64 -16
  %10500 = bitcast i16* %10499 to <16 x i16>*
  store <16 x i16> %10498, <16 x i16>* %10500, align 2, !tbaa !401
  br label %after_bb553

"for blur_y.s0.x.x.rebased558":                   ; preds = %"for blur_y.s0.x.x.rebased558.preheader", %"consume blur_x565"
  %indvars.iv3322 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased558.preheader" ], [ %indvars.iv.next3323, %"consume blur_x565" ]
  %10501 = add nsw i64 %indvars.iv3322, %101
  %10502 = icmp slt i64 %10501, 1
  %10503 = trunc i64 %10501 to i32
  %10504 = shl nsw i32 %10503, 5
  %10505 = icmp sgt i32 %4, %10504
  %10506 = or i1 %10502, %10505
  br i1 %10506, label %"produce blur_x564", label %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge"

"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased558"
  %.pre3547 = shl nsw i64 %10501, 5
  br label %"consume blur_x565"

"end for blur_y.s0.x.x.rebased559":               ; preds = %"consume blur_x565", %after_bb553
  br i1 %102, label %"for blur_y.s0.x.x.rebased566.preheader", label %"end for blur_y.s0.x.x.rebased567", !prof !386

"for blur_y.s0.x.x.rebased566.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased559"
  %10507 = sext i32 %t1688 to i64
  %10508 = zext i32 %.pre-phi3504 to i64
  %10509 = mul nsw i64 %10508, %112
  %10510 = sub nsw i64 %10509, %96
  %10511 = zext i32 %.pre-phi3498 to i64
  %10512 = mul nsw i64 %10511, %112
  %10513 = sub nsw i64 %10512, %96
  %10514 = zext i32 %.pre-phi3510 to i64
  %10515 = mul nsw i64 %10514, %112
  %10516 = sub nsw i64 %10515, %96
  %10517 = zext i32 %.pre-phi3480 to i64
  %10518 = mul nsw i64 %10517, %112
  %10519 = sub nsw i64 %10518, %96
  %10520 = zext i32 %.pre-phi to i64
  %10521 = mul nsw i64 %10520, %112
  %10522 = sub nsw i64 %10521, %96
  %10523 = sext i32 %a26 to i64
  %10524 = add nsw i64 %10523, 21
  %10525 = mul nsw i64 %10524, %113
  %10526 = add nsw i64 %10525, %116
  br label %"for blur_y.s0.x.x.rebased566"

"produce blur_x564":                              ; preds = %"for blur_y.s0.x.x.rebased558"
  %t1048 = add nsw i32 %10504, %t2041
  %10527 = sext i32 %t1048 to i64
  %10528 = getelementptr inbounds i16, i16* %read_input, i64 %10527
  %10529 = getelementptr inbounds i16, i16* %10528, i64 1
  %10530 = bitcast i16* %10529 to <16 x i16>*
  %10531 = load <16 x i16>, <16 x i16>* %10530, align 2, !tbaa !396
  %10532 = getelementptr inbounds i16, i16* %10528, i64 17
  %10533 = bitcast i16* %10532 to <16 x i16>*
  %10534 = load <16 x i16>, <16 x i16>* %10533, align 2, !tbaa !396
  %10535 = bitcast i16* %10528 to <16 x i16>*
  %10536 = load <16 x i16>, <16 x i16>* %10535, align 2, !tbaa !396
  %10537 = getelementptr inbounds i16, i16* %10528, i64 16
  %10538 = bitcast i16* %10537 to <16 x i16>*
  %10539 = load <16 x i16>, <16 x i16>* %10538, align 2, !tbaa !396
  %10540 = getelementptr inbounds i16, i16* %10528, i64 2
  %10541 = bitcast i16* %10540 to <16 x i16>*
  %10542 = load <16 x i16>, <16 x i16>* %10541, align 2, !tbaa !396
  %10543 = getelementptr inbounds i16, i16* %10528, i64 18
  %10544 = bitcast i16* %10543 to <16 x i16>*
  %10545 = load <16 x i16>, <16 x i16>* %10544, align 2, !tbaa !396
  %10546 = getelementptr inbounds i16, i16* %10528, i64 4
  %10547 = bitcast i16* %10546 to <16 x i16>*
  %10548 = load <16 x i16>, <16 x i16>* %10547, align 2, !tbaa !396
  %10549 = getelementptr inbounds i16, i16* %10528, i64 20
  %10550 = bitcast i16* %10549 to <16 x i16>*
  %10551 = load <16 x i16>, <16 x i16>* %10550, align 2, !tbaa !396
  %10552 = getelementptr inbounds i16, i16* %10528, i64 3
  %10553 = bitcast i16* %10552 to <16 x i16>*
  %10554 = load <16 x i16>, <16 x i16>* %10553, align 2, !tbaa !396
  %10555 = getelementptr inbounds i16, i16* %10528, i64 19
  %10556 = bitcast i16* %10555 to <16 x i16>*
  %10557 = load <16 x i16>, <16 x i16>* %10556, align 2, !tbaa !396
  %10558 = add <16 x i16> %10536, %10531
  %10559 = add <16 x i16> %10558, %10542
  %10560 = add <16 x i16> %10559, %10548
  %10561 = add <16 x i16> %10560, %10554
  %10562 = add <16 x i16> %10539, %10534
  %10563 = add <16 x i16> %10562, %10545
  %10564 = add <16 x i16> %10563, %10551
  %10565 = add <16 x i16> %10564, %10557
  %10566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10561, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10565, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10568 = shufflevector <16 x i16> %10566, <16 x i16> %10567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10569 = lshr <32 x i16> %10568, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10570 = shufflevector <32 x i16> %10569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10571 = shl nsw i64 %10501, 5
  %10572 = add nsw i64 %10571, %10356
  %10573 = getelementptr inbounds i16, i16* %blur_x, i64 %10572
  %10574 = bitcast i16* %10573 to <16 x i16>*
  store <16 x i16> %10570, <16 x i16>* %10574, align 2, !tbaa !399
  %10575 = shufflevector <32 x i16> %10569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10576 = getelementptr inbounds i16, i16* %10573, i64 16
  %10577 = bitcast i16* %10576 to <16 x i16>*
  store <16 x i16> %10575, <16 x i16>* %10577, align 2, !tbaa !399
  br label %"consume blur_x565"

"consume blur_x565":                              ; preds = %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge", %"produce blur_x564"
  %.pre-phi3548 = phi i64 [ %.pre3547, %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge" ], [ %10571, %"produce blur_x564" ]
  %10578 = add nsw i64 %10359, %.pre-phi3548
  %10579 = getelementptr inbounds i16, i16* %blur_x, i64 %10578
  %10580 = bitcast i16* %10579 to <16 x i16>*
  %10581 = load <16 x i16>, <16 x i16>* %10580, align 2, !tbaa !399
  %10582 = getelementptr inbounds i16, i16* %10579, i64 16
  %10583 = bitcast i16* %10582 to <16 x i16>*
  %10584 = load <16 x i16>, <16 x i16>* %10583, align 2, !tbaa !399
  %10585 = add nsw i64 %10362, %.pre-phi3548
  %10586 = getelementptr inbounds i16, i16* %blur_x, i64 %10585
  %10587 = bitcast i16* %10586 to <16 x i16>*
  %10588 = load <16 x i16>, <16 x i16>* %10587, align 2, !tbaa !399
  %10589 = getelementptr inbounds i16, i16* %10586, i64 16
  %10590 = bitcast i16* %10589 to <16 x i16>*
  %10591 = load <16 x i16>, <16 x i16>* %10590, align 2, !tbaa !399
  %10592 = add nsw i64 %10365, %.pre-phi3548
  %10593 = getelementptr inbounds i16, i16* %blur_x, i64 %10592
  %10594 = bitcast i16* %10593 to <16 x i16>*
  %10595 = load <16 x i16>, <16 x i16>* %10594, align 2, !tbaa !399
  %10596 = getelementptr inbounds i16, i16* %10593, i64 16
  %10597 = bitcast i16* %10596 to <16 x i16>*
  %10598 = load <16 x i16>, <16 x i16>* %10597, align 2, !tbaa !399
  %10599 = add nsw i64 %10368, %.pre-phi3548
  %10600 = getelementptr inbounds i16, i16* %blur_x, i64 %10599
  %10601 = bitcast i16* %10600 to <16 x i16>*
  %10602 = load <16 x i16>, <16 x i16>* %10601, align 2, !tbaa !399
  %10603 = getelementptr inbounds i16, i16* %10600, i64 16
  %10604 = bitcast i16* %10603 to <16 x i16>*
  %10605 = load <16 x i16>, <16 x i16>* %10604, align 2, !tbaa !399
  %10606 = add nsw i64 %10371, %.pre-phi3548
  %10607 = getelementptr inbounds i16, i16* %blur_x, i64 %10606
  %10608 = bitcast i16* %10607 to <16 x i16>*
  %10609 = load <16 x i16>, <16 x i16>* %10608, align 2, !tbaa !399
  %10610 = getelementptr inbounds i16, i16* %10607, i64 16
  %10611 = bitcast i16* %10610 to <16 x i16>*
  %10612 = load <16 x i16>, <16 x i16>* %10611, align 2, !tbaa !399
  %10613 = add <16 x i16> %10588, %10581
  %10614 = add <16 x i16> %10613, %10595
  %10615 = add <16 x i16> %10614, %10602
  %10616 = add <16 x i16> %10615, %10609
  %10617 = add <16 x i16> %10591, %10584
  %10618 = add <16 x i16> %10617, %10598
  %10619 = add <16 x i16> %10618, %10605
  %10620 = add <16 x i16> %10619, %10612
  %10621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10616, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10620, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10623 = shufflevector <16 x i16> %10621, <16 x i16> %10622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10624 = lshr <32 x i16> %10623, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10625 = shufflevector <32 x i16> %10624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10626 = add nsw i64 %10375, %.pre-phi3548
  %10627 = getelementptr inbounds i16, i16* %66, i64 %10626
  %10628 = bitcast i16* %10627 to <16 x i16>*
  store <16 x i16> %10625, <16 x i16>* %10628, align 2, !tbaa !401
  %10629 = shufflevector <32 x i16> %10624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10630 = getelementptr inbounds i16, i16* %10627, i64 16
  %10631 = bitcast i16* %10630 to <16 x i16>*
  store <16 x i16> %10629, <16 x i16>* %10631, align 2, !tbaa !401
  %indvars.iv.next3323 = add nuw nsw i64 %indvars.iv3322, 1
  %.not2715 = icmp eq i64 %indvars.iv.next3323, %184
  br i1 %.not2715, label %"end for blur_y.s0.x.x.rebased559", label %"for blur_y.s0.x.x.rebased558"

"for blur_y.s0.x.x.rebased566":                   ; preds = %"for blur_y.s0.x.x.rebased566.preheader", %"consume blur_x574"
  %blur_y.s0.x.x.rebased568 = phi i32 [ %10744, %"consume blur_x574" ], [ 0, %"for blur_y.s0.x.x.rebased566.preheader" ]
  %10632 = add nsw i32 %blur_y.s0.x.x.rebased568, %t1626
  %a252 = shl nsw i32 %10632, 5
  %10633 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %10633, i32 %a252, i32 %a14
  %10634 = icmp slt i32 %10632, 1
  %10635 = icmp sgt i32 %4, %a252
  %10636 = or i1 %10634, %10635
  br i1 %10636, label %"produce blur_x572", label %"consume blur_x574"

"end for blur_y.s0.x.x.rebased567":               ; preds = %"consume blur_x574", %"end for blur_y.s0.x.x.rebased559"
  br i1 %34, label %"produce blur_x578", label %after_bb575

"produce blur_x572":                              ; preds = %"for blur_y.s0.x.x.rebased566"
  %10637 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s573 = select i1 %10637, i32 %b258, i32 %4
  %t1053 = add nsw i32 %blur_x.s0.x.v1.base.s573, %t2041
  %10638 = sext i32 %t1053 to i64
  %10639 = getelementptr inbounds i16, i16* %read_input, i64 %10638
  %10640 = getelementptr inbounds i16, i16* %10639, i64 1
  %10641 = bitcast i16* %10640 to <16 x i16>*
  %10642 = load <16 x i16>, <16 x i16>* %10641, align 2, !tbaa !396
  %10643 = getelementptr inbounds i16, i16* %10639, i64 17
  %10644 = bitcast i16* %10643 to <16 x i16>*
  %10645 = load <16 x i16>, <16 x i16>* %10644, align 2, !tbaa !396
  %10646 = bitcast i16* %10639 to <16 x i16>*
  %10647 = load <16 x i16>, <16 x i16>* %10646, align 2, !tbaa !396
  %10648 = getelementptr inbounds i16, i16* %10639, i64 16
  %10649 = bitcast i16* %10648 to <16 x i16>*
  %10650 = load <16 x i16>, <16 x i16>* %10649, align 2, !tbaa !396
  %10651 = getelementptr inbounds i16, i16* %10639, i64 2
  %10652 = bitcast i16* %10651 to <16 x i16>*
  %10653 = load <16 x i16>, <16 x i16>* %10652, align 2, !tbaa !396
  %10654 = getelementptr inbounds i16, i16* %10639, i64 18
  %10655 = bitcast i16* %10654 to <16 x i16>*
  %10656 = load <16 x i16>, <16 x i16>* %10655, align 2, !tbaa !396
  %10657 = getelementptr inbounds i16, i16* %10639, i64 4
  %10658 = bitcast i16* %10657 to <16 x i16>*
  %10659 = load <16 x i16>, <16 x i16>* %10658, align 2, !tbaa !396
  %10660 = getelementptr inbounds i16, i16* %10639, i64 20
  %10661 = bitcast i16* %10660 to <16 x i16>*
  %10662 = load <16 x i16>, <16 x i16>* %10661, align 2, !tbaa !396
  %10663 = getelementptr inbounds i16, i16* %10639, i64 3
  %10664 = bitcast i16* %10663 to <16 x i16>*
  %10665 = load <16 x i16>, <16 x i16>* %10664, align 2, !tbaa !396
  %10666 = getelementptr inbounds i16, i16* %10639, i64 19
  %10667 = bitcast i16* %10666 to <16 x i16>*
  %10668 = load <16 x i16>, <16 x i16>* %10667, align 2, !tbaa !396
  %10669 = add <16 x i16> %10647, %10642
  %10670 = add <16 x i16> %10669, %10653
  %10671 = add <16 x i16> %10670, %10659
  %10672 = add <16 x i16> %10671, %10665
  %10673 = add <16 x i16> %10650, %10645
  %10674 = add <16 x i16> %10673, %10656
  %10675 = add <16 x i16> %10674, %10662
  %10676 = add <16 x i16> %10675, %10668
  %10677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10672, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10676, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10679 = shufflevector <16 x i16> %10677, <16 x i16> %10678, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10680 = lshr <32 x i16> %10679, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10681 = shufflevector <32 x i16> %10680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10682 = sext i32 %blur_x.s0.x.v1.base.s573 to i64
  %10683 = add nsw i64 %10682, %10507
  %10684 = getelementptr inbounds i16, i16* %blur_x, i64 %10683
  %10685 = bitcast i16* %10684 to <16 x i16>*
  store <16 x i16> %10681, <16 x i16>* %10685, align 2, !tbaa !399
  %10686 = shufflevector <32 x i16> %10680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10687 = getelementptr inbounds i16, i16* %10684, i64 16
  %10688 = bitcast i16* %10687 to <16 x i16>*
  store <16 x i16> %10686, <16 x i16>* %10688, align 2, !tbaa !399
  br label %"consume blur_x574"

"consume blur_x574":                              ; preds = %"for blur_y.s0.x.x.rebased566", %"produce blur_x572"
  %10689 = sext i32 %b258 to i64
  %10690 = add nsw i64 %10510, %10689
  %10691 = getelementptr inbounds i16, i16* %blur_x, i64 %10690
  %10692 = bitcast i16* %10691 to <16 x i16>*
  %10693 = load <16 x i16>, <16 x i16>* %10692, align 2, !tbaa !399
  %10694 = getelementptr inbounds i16, i16* %10691, i64 16
  %10695 = bitcast i16* %10694 to <16 x i16>*
  %10696 = load <16 x i16>, <16 x i16>* %10695, align 2, !tbaa !399
  %10697 = add nsw i64 %10513, %10689
  %10698 = getelementptr inbounds i16, i16* %blur_x, i64 %10697
  %10699 = bitcast i16* %10698 to <16 x i16>*
  %10700 = load <16 x i16>, <16 x i16>* %10699, align 2, !tbaa !399
  %10701 = getelementptr inbounds i16, i16* %10698, i64 16
  %10702 = bitcast i16* %10701 to <16 x i16>*
  %10703 = load <16 x i16>, <16 x i16>* %10702, align 2, !tbaa !399
  %10704 = add nsw i64 %10516, %10689
  %10705 = getelementptr inbounds i16, i16* %blur_x, i64 %10704
  %10706 = bitcast i16* %10705 to <16 x i16>*
  %10707 = load <16 x i16>, <16 x i16>* %10706, align 2, !tbaa !399
  %10708 = getelementptr inbounds i16, i16* %10705, i64 16
  %10709 = bitcast i16* %10708 to <16 x i16>*
  %10710 = load <16 x i16>, <16 x i16>* %10709, align 2, !tbaa !399
  %10711 = add nsw i64 %10519, %10689
  %10712 = getelementptr inbounds i16, i16* %blur_x, i64 %10711
  %10713 = bitcast i16* %10712 to <16 x i16>*
  %10714 = load <16 x i16>, <16 x i16>* %10713, align 2, !tbaa !399
  %10715 = getelementptr inbounds i16, i16* %10712, i64 16
  %10716 = bitcast i16* %10715 to <16 x i16>*
  %10717 = load <16 x i16>, <16 x i16>* %10716, align 2, !tbaa !399
  %10718 = add nsw i64 %10522, %10689
  %10719 = getelementptr inbounds i16, i16* %blur_x, i64 %10718
  %10720 = bitcast i16* %10719 to <16 x i16>*
  %10721 = load <16 x i16>, <16 x i16>* %10720, align 2, !tbaa !399
  %10722 = getelementptr inbounds i16, i16* %10719, i64 16
  %10723 = bitcast i16* %10722 to <16 x i16>*
  %10724 = load <16 x i16>, <16 x i16>* %10723, align 2, !tbaa !399
  %10725 = add <16 x i16> %10700, %10693
  %10726 = add <16 x i16> %10725, %10707
  %10727 = add <16 x i16> %10726, %10714
  %10728 = add <16 x i16> %10727, %10721
  %10729 = add <16 x i16> %10703, %10696
  %10730 = add <16 x i16> %10729, %10710
  %10731 = add <16 x i16> %10730, %10717
  %10732 = add <16 x i16> %10731, %10724
  %10733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10728, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10732, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10735 = shufflevector <16 x i16> %10733, <16 x i16> %10734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10736 = lshr <32 x i16> %10735, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10737 = shufflevector <32 x i16> %10736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10738 = add nsw i64 %10526, %10689
  %10739 = getelementptr inbounds i16, i16* %66, i64 %10738
  %10740 = bitcast i16* %10739 to <16 x i16>*
  store <16 x i16> %10737, <16 x i16>* %10740, align 2, !tbaa !401
  %10741 = shufflevector <32 x i16> %10736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10742 = getelementptr inbounds i16, i16* %10739, i64 16
  %10743 = bitcast i16* %10742 to <16 x i16>*
  store <16 x i16> %10741, <16 x i16>* %10743, align 2, !tbaa !401
  %10744 = add nuw nsw i32 %blur_y.s0.x.x.rebased568, 1
  %.not2714 = icmp eq i32 %10744, %t1683
  br i1 %.not2714, label %"end for blur_y.s0.x.x.rebased567", label %"for blur_y.s0.x.x.rebased566"

after_bb575:                                      ; preds = %"end for blur_y.s0.x.x.rebased567", %"produce blur_x578"
  br i1 %100, label %"for blur_y.s0.x.x.rebased580.preheader", label %"end for blur_y.s0.x.x.rebased581", !prof !386

"for blur_y.s0.x.x.rebased580.preheader":         ; preds = %after_bb575
  %10745 = sext i32 %t1694 to i64
  %10746 = zext i32 %.pre-phi3510 to i64
  %10747 = mul nsw i64 %10746, %112
  %10748 = sub nsw i64 %10747, %96
  %10749 = zext i32 %.pre-phi3504 to i64
  %10750 = mul nsw i64 %10749, %112
  %10751 = sub nsw i64 %10750, %96
  %10752 = zext i32 %.pre-phi to i64
  %10753 = mul nsw i64 %10752, %112
  %10754 = sub nsw i64 %10753, %96
  %10755 = zext i32 %.pre-phi3484 to i64
  %10756 = mul nsw i64 %10755, %112
  %10757 = sub nsw i64 %10756, %96
  %10758 = zext i32 %.pre-phi3480 to i64
  %10759 = mul nsw i64 %10758, %112
  %10760 = sub nsw i64 %10759, %96
  %10761 = sext i32 %a26 to i64
  %10762 = add nsw i64 %10761, 22
  %10763 = mul nsw i64 %10762, %113
  %10764 = add nsw i64 %10763, %116
  br label %"for blur_y.s0.x.x.rebased580"

"produce blur_x578":                              ; preds = %"end for blur_y.s0.x.x.rebased567"
  %10765 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %10766 = getelementptr inbounds i16, i16* %10765, i64 -31
  %10767 = bitcast i16* %10766 to <16 x i16>*
  %10768 = load <16 x i16>, <16 x i16>* %10767, align 2, !tbaa !396
  %10769 = getelementptr inbounds i16, i16* %10765, i64 -15
  %10770 = bitcast i16* %10769 to <16 x i16>*
  %10771 = load <16 x i16>, <16 x i16>* %10770, align 2, !tbaa !396
  %10772 = getelementptr inbounds i16, i16* %10765, i64 -32
  %10773 = bitcast i16* %10772 to <16 x i16>*
  %10774 = load <16 x i16>, <16 x i16>* %10773, align 2, !tbaa !396
  %10775 = getelementptr inbounds i16, i16* %10765, i64 -16
  %10776 = bitcast i16* %10775 to <16 x i16>*
  %10777 = load <16 x i16>, <16 x i16>* %10776, align 2, !tbaa !396
  %10778 = getelementptr inbounds i16, i16* %10765, i64 -30
  %10779 = bitcast i16* %10778 to <16 x i16>*
  %10780 = load <16 x i16>, <16 x i16>* %10779, align 2, !tbaa !396
  %10781 = getelementptr inbounds i16, i16* %10765, i64 -14
  %10782 = bitcast i16* %10781 to <16 x i16>*
  %10783 = load <16 x i16>, <16 x i16>* %10782, align 2, !tbaa !396
  %10784 = getelementptr inbounds i16, i16* %10765, i64 -28
  %10785 = bitcast i16* %10784 to <16 x i16>*
  %10786 = load <16 x i16>, <16 x i16>* %10785, align 2, !tbaa !396
  %10787 = getelementptr inbounds i16, i16* %10765, i64 -12
  %10788 = bitcast i16* %10787 to <16 x i16>*
  %10789 = load <16 x i16>, <16 x i16>* %10788, align 2, !tbaa !396
  %10790 = getelementptr inbounds i16, i16* %10765, i64 -29
  %10791 = bitcast i16* %10790 to <16 x i16>*
  %10792 = load <16 x i16>, <16 x i16>* %10791, align 2, !tbaa !396
  %10793 = getelementptr inbounds i16, i16* %10765, i64 -13
  %10794 = bitcast i16* %10793 to <16 x i16>*
  %10795 = load <16 x i16>, <16 x i16>* %10794, align 2, !tbaa !396
  %10796 = add <16 x i16> %10774, %10768
  %10797 = add <16 x i16> %10796, %10780
  %10798 = add <16 x i16> %10797, %10786
  %10799 = add <16 x i16> %10798, %10792
  %10800 = add <16 x i16> %10777, %10771
  %10801 = add <16 x i16> %10800, %10783
  %10802 = add <16 x i16> %10801, %10789
  %10803 = add <16 x i16> %10802, %10795
  %10804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10799, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10803, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10806 = shufflevector <16 x i16> %10804, <16 x i16> %10805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10807 = lshr <32 x i16> %10806, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10808 = shufflevector <32 x i16> %10807, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10809 = zext i32 %.pre-phi3484 to i64
  %10810 = mul nsw i64 %97, %10809
  %10811 = add nsw i64 %99, %10810
  %10812 = getelementptr inbounds i16, i16* %blur_x, i64 %10811
  %10813 = getelementptr inbounds i16, i16* %10812, i64 -32
  %10814 = bitcast i16* %10813 to <16 x i16>*
  store <16 x i16> %10808, <16 x i16>* %10814, align 2, !tbaa !399
  %10815 = shufflevector <32 x i16> %10807, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10816 = getelementptr inbounds i16, i16* %10812, i64 -16
  %10817 = bitcast i16* %10816 to <16 x i16>*
  store <16 x i16> %10815, <16 x i16>* %10817, align 2, !tbaa !399
  %10818 = zext i32 %.pre-phi3510 to i64
  %10819 = mul nsw i64 %10818, %112
  %10820 = add nsw i64 %10819, %94
  %10821 = getelementptr inbounds i16, i16* %blur_x, i64 %10820
  %10822 = getelementptr inbounds i16, i16* %10821, i64 -32
  %10823 = bitcast i16* %10822 to <16 x i16>*
  %10824 = load <16 x i16>, <16 x i16>* %10823, align 2, !tbaa !399
  %10825 = getelementptr inbounds i16, i16* %10821, i64 -16
  %10826 = bitcast i16* %10825 to <16 x i16>*
  %10827 = load <16 x i16>, <16 x i16>* %10826, align 2, !tbaa !399
  %10828 = zext i32 %.pre-phi3504 to i64
  %10829 = mul nsw i64 %10828, %112
  %10830 = add nsw i64 %10829, %94
  %10831 = getelementptr inbounds i16, i16* %blur_x, i64 %10830
  %10832 = getelementptr inbounds i16, i16* %10831, i64 -32
  %10833 = bitcast i16* %10832 to <16 x i16>*
  %10834 = load <16 x i16>, <16 x i16>* %10833, align 2, !tbaa !399
  %10835 = getelementptr inbounds i16, i16* %10831, i64 -16
  %10836 = bitcast i16* %10835 to <16 x i16>*
  %10837 = load <16 x i16>, <16 x i16>* %10836, align 2, !tbaa !399
  %10838 = zext i32 %.pre-phi to i64
  %10839 = mul nsw i64 %10838, %112
  %10840 = add nsw i64 %10839, %94
  %10841 = getelementptr inbounds i16, i16* %blur_x, i64 %10840
  %10842 = getelementptr inbounds i16, i16* %10841, i64 -32
  %10843 = bitcast i16* %10842 to <16 x i16>*
  %10844 = load <16 x i16>, <16 x i16>* %10843, align 2, !tbaa !399
  %10845 = getelementptr inbounds i16, i16* %10841, i64 -16
  %10846 = bitcast i16* %10845 to <16 x i16>*
  %10847 = load <16 x i16>, <16 x i16>* %10846, align 2, !tbaa !399
  %10848 = mul nsw i64 %10809, %112
  %10849 = add nsw i64 %10848, %94
  %10850 = getelementptr inbounds i16, i16* %blur_x, i64 %10849
  %10851 = getelementptr inbounds i16, i16* %10850, i64 -32
  %10852 = bitcast i16* %10851 to <16 x i16>*
  %10853 = load <16 x i16>, <16 x i16>* %10852, align 2, !tbaa !399
  %10854 = getelementptr inbounds i16, i16* %10850, i64 -16
  %10855 = bitcast i16* %10854 to <16 x i16>*
  %10856 = load <16 x i16>, <16 x i16>* %10855, align 2, !tbaa !399
  %10857 = zext i32 %.pre-phi3480 to i64
  %10858 = mul nsw i64 %10857, %112
  %10859 = add nsw i64 %10858, %94
  %10860 = getelementptr inbounds i16, i16* %blur_x, i64 %10859
  %10861 = getelementptr inbounds i16, i16* %10860, i64 -32
  %10862 = bitcast i16* %10861 to <16 x i16>*
  %10863 = load <16 x i16>, <16 x i16>* %10862, align 2, !tbaa !399
  %10864 = getelementptr inbounds i16, i16* %10860, i64 -16
  %10865 = bitcast i16* %10864 to <16 x i16>*
  %10866 = load <16 x i16>, <16 x i16>* %10865, align 2, !tbaa !399
  %10867 = add <16 x i16> %10834, %10824
  %10868 = add <16 x i16> %10867, %10844
  %10869 = add <16 x i16> %10868, %10853
  %10870 = add <16 x i16> %10869, %10863
  %10871 = add <16 x i16> %10837, %10827
  %10872 = add <16 x i16> %10871, %10847
  %10873 = add <16 x i16> %10872, %10856
  %10874 = add <16 x i16> %10873, %10866
  %10875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10870, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10874, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10877 = shufflevector <16 x i16> %10875, <16 x i16> %10876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10878 = lshr <32 x i16> %10877, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10879 = shufflevector <32 x i16> %10878, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10880 = sext i32 %a26 to i64
  %10881 = add nsw i64 %10880, 22
  %10882 = mul nsw i64 %10881, %113
  %10883 = add nsw i64 %115, %10882
  %10884 = getelementptr inbounds i16, i16* %66, i64 %10883
  %10885 = getelementptr inbounds i16, i16* %10884, i64 -32
  %10886 = bitcast i16* %10885 to <16 x i16>*
  store <16 x i16> %10879, <16 x i16>* %10886, align 2, !tbaa !401
  %10887 = shufflevector <32 x i16> %10878, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10888 = getelementptr inbounds i16, i16* %10884, i64 -16
  %10889 = bitcast i16* %10888 to <16 x i16>*
  store <16 x i16> %10887, <16 x i16>* %10889, align 2, !tbaa !401
  br label %after_bb575

"for blur_y.s0.x.x.rebased580":                   ; preds = %"for blur_y.s0.x.x.rebased580.preheader", %"consume blur_x587"
  %indvars.iv3325 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased580.preheader" ], [ %indvars.iv.next3326, %"consume blur_x587" ]
  %10890 = add nsw i64 %indvars.iv3325, %101
  %10891 = icmp slt i64 %10890, 1
  %10892 = trunc i64 %10890 to i32
  %10893 = shl nsw i32 %10892, 5
  %10894 = icmp sgt i32 %4, %10893
  %10895 = or i1 %10891, %10894
  br i1 %10895, label %"produce blur_x586", label %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge"

"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased580"
  %.pre3549 = shl nsw i64 %10890, 5
  br label %"consume blur_x587"

"end for blur_y.s0.x.x.rebased581":               ; preds = %"consume blur_x587", %after_bb575
  br i1 %102, label %"for blur_y.s0.x.x.rebased588.preheader", label %"end for blur_y.s0.x.x.rebased589", !prof !386

"for blur_y.s0.x.x.rebased588.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased581"
  %10896 = sext i32 %t1694 to i64
  %10897 = zext i32 %.pre-phi3510 to i64
  %10898 = mul nsw i64 %10897, %112
  %10899 = sub nsw i64 %10898, %96
  %10900 = zext i32 %.pre-phi3504 to i64
  %10901 = mul nsw i64 %10900, %112
  %10902 = sub nsw i64 %10901, %96
  %10903 = zext i32 %.pre-phi to i64
  %10904 = mul nsw i64 %10903, %112
  %10905 = sub nsw i64 %10904, %96
  %10906 = zext i32 %.pre-phi3484 to i64
  %10907 = mul nsw i64 %10906, %112
  %10908 = sub nsw i64 %10907, %96
  %10909 = zext i32 %.pre-phi3480 to i64
  %10910 = mul nsw i64 %10909, %112
  %10911 = sub nsw i64 %10910, %96
  %10912 = sext i32 %a26 to i64
  %10913 = add nsw i64 %10912, 22
  %10914 = mul nsw i64 %10913, %113
  %10915 = add nsw i64 %10914, %116
  br label %"for blur_y.s0.x.x.rebased588"

"produce blur_x586":                              ; preds = %"for blur_y.s0.x.x.rebased580"
  %t1064 = add nsw i32 %10893, %t2057
  %10916 = sext i32 %t1064 to i64
  %10917 = getelementptr inbounds i16, i16* %read_input, i64 %10916
  %10918 = getelementptr inbounds i16, i16* %10917, i64 1
  %10919 = bitcast i16* %10918 to <16 x i16>*
  %10920 = load <16 x i16>, <16 x i16>* %10919, align 2, !tbaa !396
  %10921 = getelementptr inbounds i16, i16* %10917, i64 17
  %10922 = bitcast i16* %10921 to <16 x i16>*
  %10923 = load <16 x i16>, <16 x i16>* %10922, align 2, !tbaa !396
  %10924 = bitcast i16* %10917 to <16 x i16>*
  %10925 = load <16 x i16>, <16 x i16>* %10924, align 2, !tbaa !396
  %10926 = getelementptr inbounds i16, i16* %10917, i64 16
  %10927 = bitcast i16* %10926 to <16 x i16>*
  %10928 = load <16 x i16>, <16 x i16>* %10927, align 2, !tbaa !396
  %10929 = getelementptr inbounds i16, i16* %10917, i64 2
  %10930 = bitcast i16* %10929 to <16 x i16>*
  %10931 = load <16 x i16>, <16 x i16>* %10930, align 2, !tbaa !396
  %10932 = getelementptr inbounds i16, i16* %10917, i64 18
  %10933 = bitcast i16* %10932 to <16 x i16>*
  %10934 = load <16 x i16>, <16 x i16>* %10933, align 2, !tbaa !396
  %10935 = getelementptr inbounds i16, i16* %10917, i64 4
  %10936 = bitcast i16* %10935 to <16 x i16>*
  %10937 = load <16 x i16>, <16 x i16>* %10936, align 2, !tbaa !396
  %10938 = getelementptr inbounds i16, i16* %10917, i64 20
  %10939 = bitcast i16* %10938 to <16 x i16>*
  %10940 = load <16 x i16>, <16 x i16>* %10939, align 2, !tbaa !396
  %10941 = getelementptr inbounds i16, i16* %10917, i64 3
  %10942 = bitcast i16* %10941 to <16 x i16>*
  %10943 = load <16 x i16>, <16 x i16>* %10942, align 2, !tbaa !396
  %10944 = getelementptr inbounds i16, i16* %10917, i64 19
  %10945 = bitcast i16* %10944 to <16 x i16>*
  %10946 = load <16 x i16>, <16 x i16>* %10945, align 2, !tbaa !396
  %10947 = add <16 x i16> %10925, %10920
  %10948 = add <16 x i16> %10947, %10931
  %10949 = add <16 x i16> %10948, %10937
  %10950 = add <16 x i16> %10949, %10943
  %10951 = add <16 x i16> %10928, %10923
  %10952 = add <16 x i16> %10951, %10934
  %10953 = add <16 x i16> %10952, %10940
  %10954 = add <16 x i16> %10953, %10946
  %10955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10950, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10954, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10957 = shufflevector <16 x i16> %10955, <16 x i16> %10956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10958 = lshr <32 x i16> %10957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10959 = shufflevector <32 x i16> %10958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10960 = shl nsw i64 %10890, 5
  %10961 = add nsw i64 %10960, %10745
  %10962 = getelementptr inbounds i16, i16* %blur_x, i64 %10961
  %10963 = bitcast i16* %10962 to <16 x i16>*
  store <16 x i16> %10959, <16 x i16>* %10963, align 2, !tbaa !399
  %10964 = shufflevector <32 x i16> %10958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10965 = getelementptr inbounds i16, i16* %10962, i64 16
  %10966 = bitcast i16* %10965 to <16 x i16>*
  store <16 x i16> %10964, <16 x i16>* %10966, align 2, !tbaa !399
  br label %"consume blur_x587"

"consume blur_x587":                              ; preds = %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge", %"produce blur_x586"
  %.pre-phi3550 = phi i64 [ %.pre3549, %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge" ], [ %10960, %"produce blur_x586" ]
  %10967 = add nsw i64 %10748, %.pre-phi3550
  %10968 = getelementptr inbounds i16, i16* %blur_x, i64 %10967
  %10969 = bitcast i16* %10968 to <16 x i16>*
  %10970 = load <16 x i16>, <16 x i16>* %10969, align 2, !tbaa !399
  %10971 = getelementptr inbounds i16, i16* %10968, i64 16
  %10972 = bitcast i16* %10971 to <16 x i16>*
  %10973 = load <16 x i16>, <16 x i16>* %10972, align 2, !tbaa !399
  %10974 = add nsw i64 %10751, %.pre-phi3550
  %10975 = getelementptr inbounds i16, i16* %blur_x, i64 %10974
  %10976 = bitcast i16* %10975 to <16 x i16>*
  %10977 = load <16 x i16>, <16 x i16>* %10976, align 2, !tbaa !399
  %10978 = getelementptr inbounds i16, i16* %10975, i64 16
  %10979 = bitcast i16* %10978 to <16 x i16>*
  %10980 = load <16 x i16>, <16 x i16>* %10979, align 2, !tbaa !399
  %10981 = add nsw i64 %10754, %.pre-phi3550
  %10982 = getelementptr inbounds i16, i16* %blur_x, i64 %10981
  %10983 = bitcast i16* %10982 to <16 x i16>*
  %10984 = load <16 x i16>, <16 x i16>* %10983, align 2, !tbaa !399
  %10985 = getelementptr inbounds i16, i16* %10982, i64 16
  %10986 = bitcast i16* %10985 to <16 x i16>*
  %10987 = load <16 x i16>, <16 x i16>* %10986, align 2, !tbaa !399
  %10988 = add nsw i64 %10757, %.pre-phi3550
  %10989 = getelementptr inbounds i16, i16* %blur_x, i64 %10988
  %10990 = bitcast i16* %10989 to <16 x i16>*
  %10991 = load <16 x i16>, <16 x i16>* %10990, align 2, !tbaa !399
  %10992 = getelementptr inbounds i16, i16* %10989, i64 16
  %10993 = bitcast i16* %10992 to <16 x i16>*
  %10994 = load <16 x i16>, <16 x i16>* %10993, align 2, !tbaa !399
  %10995 = add nsw i64 %10760, %.pre-phi3550
  %10996 = getelementptr inbounds i16, i16* %blur_x, i64 %10995
  %10997 = bitcast i16* %10996 to <16 x i16>*
  %10998 = load <16 x i16>, <16 x i16>* %10997, align 2, !tbaa !399
  %10999 = getelementptr inbounds i16, i16* %10996, i64 16
  %11000 = bitcast i16* %10999 to <16 x i16>*
  %11001 = load <16 x i16>, <16 x i16>* %11000, align 2, !tbaa !399
  %11002 = add <16 x i16> %10977, %10970
  %11003 = add <16 x i16> %11002, %10984
  %11004 = add <16 x i16> %11003, %10991
  %11005 = add <16 x i16> %11004, %10998
  %11006 = add <16 x i16> %10980, %10973
  %11007 = add <16 x i16> %11006, %10987
  %11008 = add <16 x i16> %11007, %10994
  %11009 = add <16 x i16> %11008, %11001
  %11010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11005, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11009, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11012 = shufflevector <16 x i16> %11010, <16 x i16> %11011, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11013 = lshr <32 x i16> %11012, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11014 = shufflevector <32 x i16> %11013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11015 = add nsw i64 %10764, %.pre-phi3550
  %11016 = getelementptr inbounds i16, i16* %66, i64 %11015
  %11017 = bitcast i16* %11016 to <16 x i16>*
  store <16 x i16> %11014, <16 x i16>* %11017, align 2, !tbaa !401
  %11018 = shufflevector <32 x i16> %11013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11019 = getelementptr inbounds i16, i16* %11016, i64 16
  %11020 = bitcast i16* %11019 to <16 x i16>*
  store <16 x i16> %11018, <16 x i16>* %11020, align 2, !tbaa !401
  %indvars.iv.next3326 = add nuw nsw i64 %indvars.iv3325, 1
  %.not2713 = icmp eq i64 %indvars.iv.next3326, %184
  br i1 %.not2713, label %"end for blur_y.s0.x.x.rebased581", label %"for blur_y.s0.x.x.rebased580"

"for blur_y.s0.x.x.rebased588":                   ; preds = %"for blur_y.s0.x.x.rebased588.preheader", %"consume blur_x596"
  %blur_y.s0.x.x.rebased590 = phi i32 [ %11133, %"consume blur_x596" ], [ 0, %"for blur_y.s0.x.x.rebased588.preheader" ]
  %11021 = add nsw i32 %blur_y.s0.x.x.rebased590, %t1626
  %a259 = shl nsw i32 %11021, 5
  %11022 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %11022, i32 %a259, i32 %a14
  %11023 = icmp slt i32 %11021, 1
  %11024 = icmp sgt i32 %4, %a259
  %11025 = or i1 %11023, %11024
  br i1 %11025, label %"produce blur_x594", label %"consume blur_x596"

"end for blur_y.s0.x.x.rebased589":               ; preds = %"consume blur_x596", %"end for blur_y.s0.x.x.rebased581"
  br i1 %34, label %"produce blur_x600", label %after_bb597

"produce blur_x594":                              ; preds = %"for blur_y.s0.x.x.rebased588"
  %11026 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s595 = select i1 %11026, i32 %b265, i32 %4
  %t1069 = add nsw i32 %blur_x.s0.x.v1.base.s595, %t2057
  %11027 = sext i32 %t1069 to i64
  %11028 = getelementptr inbounds i16, i16* %read_input, i64 %11027
  %11029 = getelementptr inbounds i16, i16* %11028, i64 1
  %11030 = bitcast i16* %11029 to <16 x i16>*
  %11031 = load <16 x i16>, <16 x i16>* %11030, align 2, !tbaa !396
  %11032 = getelementptr inbounds i16, i16* %11028, i64 17
  %11033 = bitcast i16* %11032 to <16 x i16>*
  %11034 = load <16 x i16>, <16 x i16>* %11033, align 2, !tbaa !396
  %11035 = bitcast i16* %11028 to <16 x i16>*
  %11036 = load <16 x i16>, <16 x i16>* %11035, align 2, !tbaa !396
  %11037 = getelementptr inbounds i16, i16* %11028, i64 16
  %11038 = bitcast i16* %11037 to <16 x i16>*
  %11039 = load <16 x i16>, <16 x i16>* %11038, align 2, !tbaa !396
  %11040 = getelementptr inbounds i16, i16* %11028, i64 2
  %11041 = bitcast i16* %11040 to <16 x i16>*
  %11042 = load <16 x i16>, <16 x i16>* %11041, align 2, !tbaa !396
  %11043 = getelementptr inbounds i16, i16* %11028, i64 18
  %11044 = bitcast i16* %11043 to <16 x i16>*
  %11045 = load <16 x i16>, <16 x i16>* %11044, align 2, !tbaa !396
  %11046 = getelementptr inbounds i16, i16* %11028, i64 4
  %11047 = bitcast i16* %11046 to <16 x i16>*
  %11048 = load <16 x i16>, <16 x i16>* %11047, align 2, !tbaa !396
  %11049 = getelementptr inbounds i16, i16* %11028, i64 20
  %11050 = bitcast i16* %11049 to <16 x i16>*
  %11051 = load <16 x i16>, <16 x i16>* %11050, align 2, !tbaa !396
  %11052 = getelementptr inbounds i16, i16* %11028, i64 3
  %11053 = bitcast i16* %11052 to <16 x i16>*
  %11054 = load <16 x i16>, <16 x i16>* %11053, align 2, !tbaa !396
  %11055 = getelementptr inbounds i16, i16* %11028, i64 19
  %11056 = bitcast i16* %11055 to <16 x i16>*
  %11057 = load <16 x i16>, <16 x i16>* %11056, align 2, !tbaa !396
  %11058 = add <16 x i16> %11036, %11031
  %11059 = add <16 x i16> %11058, %11042
  %11060 = add <16 x i16> %11059, %11048
  %11061 = add <16 x i16> %11060, %11054
  %11062 = add <16 x i16> %11039, %11034
  %11063 = add <16 x i16> %11062, %11045
  %11064 = add <16 x i16> %11063, %11051
  %11065 = add <16 x i16> %11064, %11057
  %11066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11061, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11065, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11068 = shufflevector <16 x i16> %11066, <16 x i16> %11067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11069 = lshr <32 x i16> %11068, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11070 = shufflevector <32 x i16> %11069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11071 = sext i32 %blur_x.s0.x.v1.base.s595 to i64
  %11072 = add nsw i64 %11071, %10896
  %11073 = getelementptr inbounds i16, i16* %blur_x, i64 %11072
  %11074 = bitcast i16* %11073 to <16 x i16>*
  store <16 x i16> %11070, <16 x i16>* %11074, align 2, !tbaa !399
  %11075 = shufflevector <32 x i16> %11069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11076 = getelementptr inbounds i16, i16* %11073, i64 16
  %11077 = bitcast i16* %11076 to <16 x i16>*
  store <16 x i16> %11075, <16 x i16>* %11077, align 2, !tbaa !399
  br label %"consume blur_x596"

"consume blur_x596":                              ; preds = %"for blur_y.s0.x.x.rebased588", %"produce blur_x594"
  %11078 = sext i32 %b265 to i64
  %11079 = add nsw i64 %10899, %11078
  %11080 = getelementptr inbounds i16, i16* %blur_x, i64 %11079
  %11081 = bitcast i16* %11080 to <16 x i16>*
  %11082 = load <16 x i16>, <16 x i16>* %11081, align 2, !tbaa !399
  %11083 = getelementptr inbounds i16, i16* %11080, i64 16
  %11084 = bitcast i16* %11083 to <16 x i16>*
  %11085 = load <16 x i16>, <16 x i16>* %11084, align 2, !tbaa !399
  %11086 = add nsw i64 %10902, %11078
  %11087 = getelementptr inbounds i16, i16* %blur_x, i64 %11086
  %11088 = bitcast i16* %11087 to <16 x i16>*
  %11089 = load <16 x i16>, <16 x i16>* %11088, align 2, !tbaa !399
  %11090 = getelementptr inbounds i16, i16* %11087, i64 16
  %11091 = bitcast i16* %11090 to <16 x i16>*
  %11092 = load <16 x i16>, <16 x i16>* %11091, align 2, !tbaa !399
  %11093 = add nsw i64 %10905, %11078
  %11094 = getelementptr inbounds i16, i16* %blur_x, i64 %11093
  %11095 = bitcast i16* %11094 to <16 x i16>*
  %11096 = load <16 x i16>, <16 x i16>* %11095, align 2, !tbaa !399
  %11097 = getelementptr inbounds i16, i16* %11094, i64 16
  %11098 = bitcast i16* %11097 to <16 x i16>*
  %11099 = load <16 x i16>, <16 x i16>* %11098, align 2, !tbaa !399
  %11100 = add nsw i64 %10908, %11078
  %11101 = getelementptr inbounds i16, i16* %blur_x, i64 %11100
  %11102 = bitcast i16* %11101 to <16 x i16>*
  %11103 = load <16 x i16>, <16 x i16>* %11102, align 2, !tbaa !399
  %11104 = getelementptr inbounds i16, i16* %11101, i64 16
  %11105 = bitcast i16* %11104 to <16 x i16>*
  %11106 = load <16 x i16>, <16 x i16>* %11105, align 2, !tbaa !399
  %11107 = add nsw i64 %10911, %11078
  %11108 = getelementptr inbounds i16, i16* %blur_x, i64 %11107
  %11109 = bitcast i16* %11108 to <16 x i16>*
  %11110 = load <16 x i16>, <16 x i16>* %11109, align 2, !tbaa !399
  %11111 = getelementptr inbounds i16, i16* %11108, i64 16
  %11112 = bitcast i16* %11111 to <16 x i16>*
  %11113 = load <16 x i16>, <16 x i16>* %11112, align 2, !tbaa !399
  %11114 = add <16 x i16> %11089, %11082
  %11115 = add <16 x i16> %11114, %11096
  %11116 = add <16 x i16> %11115, %11103
  %11117 = add <16 x i16> %11116, %11110
  %11118 = add <16 x i16> %11092, %11085
  %11119 = add <16 x i16> %11118, %11099
  %11120 = add <16 x i16> %11119, %11106
  %11121 = add <16 x i16> %11120, %11113
  %11122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11117, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11121, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11124 = shufflevector <16 x i16> %11122, <16 x i16> %11123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11125 = lshr <32 x i16> %11124, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11126 = shufflevector <32 x i16> %11125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11127 = add nsw i64 %10915, %11078
  %11128 = getelementptr inbounds i16, i16* %66, i64 %11127
  %11129 = bitcast i16* %11128 to <16 x i16>*
  store <16 x i16> %11126, <16 x i16>* %11129, align 2, !tbaa !401
  %11130 = shufflevector <32 x i16> %11125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11131 = getelementptr inbounds i16, i16* %11128, i64 16
  %11132 = bitcast i16* %11131 to <16 x i16>*
  store <16 x i16> %11130, <16 x i16>* %11132, align 2, !tbaa !401
  %11133 = add nuw nsw i32 %blur_y.s0.x.x.rebased590, 1
  %.not2712 = icmp eq i32 %11133, %t1683
  br i1 %.not2712, label %"end for blur_y.s0.x.x.rebased589", label %"for blur_y.s0.x.x.rebased588"

after_bb597:                                      ; preds = %"end for blur_y.s0.x.x.rebased589", %"produce blur_x600"
  br i1 %100, label %"for blur_y.s0.x.x.rebased602.preheader", label %"end for blur_y.s0.x.x.rebased603", !prof !386

"for blur_y.s0.x.x.rebased602.preheader":         ; preds = %after_bb597
  %11134 = sext i32 %t1700 to i64
  %11135 = zext i32 %.pre-phi to i64
  %11136 = mul nsw i64 %11135, %112
  %11137 = sub nsw i64 %11136, %96
  %11138 = zext i32 %.pre-phi3510 to i64
  %11139 = mul nsw i64 %11138, %112
  %11140 = sub nsw i64 %11139, %96
  %11141 = zext i32 %.pre-phi3480 to i64
  %11142 = mul nsw i64 %11141, %112
  %11143 = sub nsw i64 %11142, %96
  %11144 = zext i32 %.pre-phi3488 to i64
  %11145 = mul nsw i64 %11144, %112
  %11146 = sub nsw i64 %11145, %96
  %11147 = zext i32 %.pre-phi3484 to i64
  %11148 = mul nsw i64 %11147, %112
  %11149 = sub nsw i64 %11148, %96
  %11150 = sext i32 %a26 to i64
  %11151 = add nsw i64 %11150, 23
  %11152 = mul nsw i64 %11151, %113
  %11153 = add nsw i64 %11152, %116
  br label %"for blur_y.s0.x.x.rebased602"

"produce blur_x600":                              ; preds = %"end for blur_y.s0.x.x.rebased589"
  %11154 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %11155 = getelementptr inbounds i16, i16* %11154, i64 -31
  %11156 = bitcast i16* %11155 to <16 x i16>*
  %11157 = load <16 x i16>, <16 x i16>* %11156, align 2, !tbaa !396
  %11158 = getelementptr inbounds i16, i16* %11154, i64 -15
  %11159 = bitcast i16* %11158 to <16 x i16>*
  %11160 = load <16 x i16>, <16 x i16>* %11159, align 2, !tbaa !396
  %11161 = getelementptr inbounds i16, i16* %11154, i64 -32
  %11162 = bitcast i16* %11161 to <16 x i16>*
  %11163 = load <16 x i16>, <16 x i16>* %11162, align 2, !tbaa !396
  %11164 = getelementptr inbounds i16, i16* %11154, i64 -16
  %11165 = bitcast i16* %11164 to <16 x i16>*
  %11166 = load <16 x i16>, <16 x i16>* %11165, align 2, !tbaa !396
  %11167 = getelementptr inbounds i16, i16* %11154, i64 -30
  %11168 = bitcast i16* %11167 to <16 x i16>*
  %11169 = load <16 x i16>, <16 x i16>* %11168, align 2, !tbaa !396
  %11170 = getelementptr inbounds i16, i16* %11154, i64 -14
  %11171 = bitcast i16* %11170 to <16 x i16>*
  %11172 = load <16 x i16>, <16 x i16>* %11171, align 2, !tbaa !396
  %11173 = getelementptr inbounds i16, i16* %11154, i64 -28
  %11174 = bitcast i16* %11173 to <16 x i16>*
  %11175 = load <16 x i16>, <16 x i16>* %11174, align 2, !tbaa !396
  %11176 = getelementptr inbounds i16, i16* %11154, i64 -12
  %11177 = bitcast i16* %11176 to <16 x i16>*
  %11178 = load <16 x i16>, <16 x i16>* %11177, align 2, !tbaa !396
  %11179 = getelementptr inbounds i16, i16* %11154, i64 -29
  %11180 = bitcast i16* %11179 to <16 x i16>*
  %11181 = load <16 x i16>, <16 x i16>* %11180, align 2, !tbaa !396
  %11182 = getelementptr inbounds i16, i16* %11154, i64 -13
  %11183 = bitcast i16* %11182 to <16 x i16>*
  %11184 = load <16 x i16>, <16 x i16>* %11183, align 2, !tbaa !396
  %11185 = add <16 x i16> %11163, %11157
  %11186 = add <16 x i16> %11185, %11169
  %11187 = add <16 x i16> %11186, %11175
  %11188 = add <16 x i16> %11187, %11181
  %11189 = add <16 x i16> %11166, %11160
  %11190 = add <16 x i16> %11189, %11172
  %11191 = add <16 x i16> %11190, %11178
  %11192 = add <16 x i16> %11191, %11184
  %11193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11188, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11194 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11192, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11195 = shufflevector <16 x i16> %11193, <16 x i16> %11194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11196 = lshr <32 x i16> %11195, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11197 = shufflevector <32 x i16> %11196, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11198 = zext i32 %.pre-phi3488 to i64
  %11199 = mul nsw i64 %97, %11198
  %11200 = add nsw i64 %99, %11199
  %11201 = getelementptr inbounds i16, i16* %blur_x, i64 %11200
  %11202 = getelementptr inbounds i16, i16* %11201, i64 -32
  %11203 = bitcast i16* %11202 to <16 x i16>*
  store <16 x i16> %11197, <16 x i16>* %11203, align 2, !tbaa !399
  %11204 = shufflevector <32 x i16> %11196, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11205 = getelementptr inbounds i16, i16* %11201, i64 -16
  %11206 = bitcast i16* %11205 to <16 x i16>*
  store <16 x i16> %11204, <16 x i16>* %11206, align 2, !tbaa !399
  %11207 = zext i32 %.pre-phi to i64
  %11208 = mul nsw i64 %11207, %112
  %11209 = add nsw i64 %11208, %94
  %11210 = getelementptr inbounds i16, i16* %blur_x, i64 %11209
  %11211 = getelementptr inbounds i16, i16* %11210, i64 -32
  %11212 = bitcast i16* %11211 to <16 x i16>*
  %11213 = load <16 x i16>, <16 x i16>* %11212, align 2, !tbaa !399
  %11214 = getelementptr inbounds i16, i16* %11210, i64 -16
  %11215 = bitcast i16* %11214 to <16 x i16>*
  %11216 = load <16 x i16>, <16 x i16>* %11215, align 2, !tbaa !399
  %11217 = zext i32 %.pre-phi3510 to i64
  %11218 = mul nsw i64 %11217, %112
  %11219 = add nsw i64 %11218, %94
  %11220 = getelementptr inbounds i16, i16* %blur_x, i64 %11219
  %11221 = getelementptr inbounds i16, i16* %11220, i64 -32
  %11222 = bitcast i16* %11221 to <16 x i16>*
  %11223 = load <16 x i16>, <16 x i16>* %11222, align 2, !tbaa !399
  %11224 = getelementptr inbounds i16, i16* %11220, i64 -16
  %11225 = bitcast i16* %11224 to <16 x i16>*
  %11226 = load <16 x i16>, <16 x i16>* %11225, align 2, !tbaa !399
  %11227 = zext i32 %.pre-phi3480 to i64
  %11228 = mul nsw i64 %11227, %112
  %11229 = add nsw i64 %11228, %94
  %11230 = getelementptr inbounds i16, i16* %blur_x, i64 %11229
  %11231 = getelementptr inbounds i16, i16* %11230, i64 -32
  %11232 = bitcast i16* %11231 to <16 x i16>*
  %11233 = load <16 x i16>, <16 x i16>* %11232, align 2, !tbaa !399
  %11234 = getelementptr inbounds i16, i16* %11230, i64 -16
  %11235 = bitcast i16* %11234 to <16 x i16>*
  %11236 = load <16 x i16>, <16 x i16>* %11235, align 2, !tbaa !399
  %11237 = mul nsw i64 %11198, %112
  %11238 = add nsw i64 %11237, %94
  %11239 = getelementptr inbounds i16, i16* %blur_x, i64 %11238
  %11240 = getelementptr inbounds i16, i16* %11239, i64 -32
  %11241 = bitcast i16* %11240 to <16 x i16>*
  %11242 = load <16 x i16>, <16 x i16>* %11241, align 2, !tbaa !399
  %11243 = getelementptr inbounds i16, i16* %11239, i64 -16
  %11244 = bitcast i16* %11243 to <16 x i16>*
  %11245 = load <16 x i16>, <16 x i16>* %11244, align 2, !tbaa !399
  %11246 = zext i32 %.pre-phi3484 to i64
  %11247 = mul nsw i64 %11246, %112
  %11248 = add nsw i64 %11247, %94
  %11249 = getelementptr inbounds i16, i16* %blur_x, i64 %11248
  %11250 = getelementptr inbounds i16, i16* %11249, i64 -32
  %11251 = bitcast i16* %11250 to <16 x i16>*
  %11252 = load <16 x i16>, <16 x i16>* %11251, align 2, !tbaa !399
  %11253 = getelementptr inbounds i16, i16* %11249, i64 -16
  %11254 = bitcast i16* %11253 to <16 x i16>*
  %11255 = load <16 x i16>, <16 x i16>* %11254, align 2, !tbaa !399
  %11256 = add <16 x i16> %11223, %11213
  %11257 = add <16 x i16> %11256, %11233
  %11258 = add <16 x i16> %11257, %11242
  %11259 = add <16 x i16> %11258, %11252
  %11260 = add <16 x i16> %11226, %11216
  %11261 = add <16 x i16> %11260, %11236
  %11262 = add <16 x i16> %11261, %11245
  %11263 = add <16 x i16> %11262, %11255
  %11264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11259, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11263, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11266 = shufflevector <16 x i16> %11264, <16 x i16> %11265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11267 = lshr <32 x i16> %11266, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11268 = shufflevector <32 x i16> %11267, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11269 = sext i32 %a26 to i64
  %11270 = add nsw i64 %11269, 23
  %11271 = mul nsw i64 %11270, %113
  %11272 = add nsw i64 %115, %11271
  %11273 = getelementptr inbounds i16, i16* %66, i64 %11272
  %11274 = getelementptr inbounds i16, i16* %11273, i64 -32
  %11275 = bitcast i16* %11274 to <16 x i16>*
  store <16 x i16> %11268, <16 x i16>* %11275, align 2, !tbaa !401
  %11276 = shufflevector <32 x i16> %11267, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11277 = getelementptr inbounds i16, i16* %11273, i64 -16
  %11278 = bitcast i16* %11277 to <16 x i16>*
  store <16 x i16> %11276, <16 x i16>* %11278, align 2, !tbaa !401
  br label %after_bb597

"for blur_y.s0.x.x.rebased602":                   ; preds = %"for blur_y.s0.x.x.rebased602.preheader", %"consume blur_x609"
  %indvars.iv3328 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased602.preheader" ], [ %indvars.iv.next3329, %"consume blur_x609" ]
  %11279 = add nsw i64 %indvars.iv3328, %101
  %11280 = icmp slt i64 %11279, 1
  %11281 = trunc i64 %11279 to i32
  %11282 = shl nsw i32 %11281, 5
  %11283 = icmp sgt i32 %4, %11282
  %11284 = or i1 %11280, %11283
  br i1 %11284, label %"produce blur_x608", label %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge"

"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased602"
  %.pre3551 = shl nsw i64 %11279, 5
  br label %"consume blur_x609"

"end for blur_y.s0.x.x.rebased603":               ; preds = %"consume blur_x609", %after_bb597
  br i1 %102, label %"for blur_y.s0.x.x.rebased610.preheader", label %"end for blur_y.s0.x.x.rebased611", !prof !386

"for blur_y.s0.x.x.rebased610.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased603"
  %11285 = sext i32 %t1700 to i64
  %11286 = zext i32 %.pre-phi to i64
  %11287 = mul nsw i64 %11286, %112
  %11288 = sub nsw i64 %11287, %96
  %11289 = zext i32 %.pre-phi3510 to i64
  %11290 = mul nsw i64 %11289, %112
  %11291 = sub nsw i64 %11290, %96
  %11292 = zext i32 %.pre-phi3480 to i64
  %11293 = mul nsw i64 %11292, %112
  %11294 = sub nsw i64 %11293, %96
  %11295 = zext i32 %.pre-phi3488 to i64
  %11296 = mul nsw i64 %11295, %112
  %11297 = sub nsw i64 %11296, %96
  %11298 = zext i32 %.pre-phi3484 to i64
  %11299 = mul nsw i64 %11298, %112
  %11300 = sub nsw i64 %11299, %96
  %11301 = sext i32 %a26 to i64
  %11302 = add nsw i64 %11301, 23
  %11303 = mul nsw i64 %11302, %113
  %11304 = add nsw i64 %11303, %116
  br label %"for blur_y.s0.x.x.rebased610"

"produce blur_x608":                              ; preds = %"for blur_y.s0.x.x.rebased602"
  %t1080 = add nsw i32 %11282, %t2073
  %11305 = sext i32 %t1080 to i64
  %11306 = getelementptr inbounds i16, i16* %read_input, i64 %11305
  %11307 = getelementptr inbounds i16, i16* %11306, i64 1
  %11308 = bitcast i16* %11307 to <16 x i16>*
  %11309 = load <16 x i16>, <16 x i16>* %11308, align 2, !tbaa !396
  %11310 = getelementptr inbounds i16, i16* %11306, i64 17
  %11311 = bitcast i16* %11310 to <16 x i16>*
  %11312 = load <16 x i16>, <16 x i16>* %11311, align 2, !tbaa !396
  %11313 = bitcast i16* %11306 to <16 x i16>*
  %11314 = load <16 x i16>, <16 x i16>* %11313, align 2, !tbaa !396
  %11315 = getelementptr inbounds i16, i16* %11306, i64 16
  %11316 = bitcast i16* %11315 to <16 x i16>*
  %11317 = load <16 x i16>, <16 x i16>* %11316, align 2, !tbaa !396
  %11318 = getelementptr inbounds i16, i16* %11306, i64 2
  %11319 = bitcast i16* %11318 to <16 x i16>*
  %11320 = load <16 x i16>, <16 x i16>* %11319, align 2, !tbaa !396
  %11321 = getelementptr inbounds i16, i16* %11306, i64 18
  %11322 = bitcast i16* %11321 to <16 x i16>*
  %11323 = load <16 x i16>, <16 x i16>* %11322, align 2, !tbaa !396
  %11324 = getelementptr inbounds i16, i16* %11306, i64 4
  %11325 = bitcast i16* %11324 to <16 x i16>*
  %11326 = load <16 x i16>, <16 x i16>* %11325, align 2, !tbaa !396
  %11327 = getelementptr inbounds i16, i16* %11306, i64 20
  %11328 = bitcast i16* %11327 to <16 x i16>*
  %11329 = load <16 x i16>, <16 x i16>* %11328, align 2, !tbaa !396
  %11330 = getelementptr inbounds i16, i16* %11306, i64 3
  %11331 = bitcast i16* %11330 to <16 x i16>*
  %11332 = load <16 x i16>, <16 x i16>* %11331, align 2, !tbaa !396
  %11333 = getelementptr inbounds i16, i16* %11306, i64 19
  %11334 = bitcast i16* %11333 to <16 x i16>*
  %11335 = load <16 x i16>, <16 x i16>* %11334, align 2, !tbaa !396
  %11336 = add <16 x i16> %11314, %11309
  %11337 = add <16 x i16> %11336, %11320
  %11338 = add <16 x i16> %11337, %11326
  %11339 = add <16 x i16> %11338, %11332
  %11340 = add <16 x i16> %11317, %11312
  %11341 = add <16 x i16> %11340, %11323
  %11342 = add <16 x i16> %11341, %11329
  %11343 = add <16 x i16> %11342, %11335
  %11344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11339, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11343, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11346 = shufflevector <16 x i16> %11344, <16 x i16> %11345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11347 = lshr <32 x i16> %11346, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11348 = shufflevector <32 x i16> %11347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11349 = shl nsw i64 %11279, 5
  %11350 = add nsw i64 %11349, %11134
  %11351 = getelementptr inbounds i16, i16* %blur_x, i64 %11350
  %11352 = bitcast i16* %11351 to <16 x i16>*
  store <16 x i16> %11348, <16 x i16>* %11352, align 2, !tbaa !399
  %11353 = shufflevector <32 x i16> %11347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11354 = getelementptr inbounds i16, i16* %11351, i64 16
  %11355 = bitcast i16* %11354 to <16 x i16>*
  store <16 x i16> %11353, <16 x i16>* %11355, align 2, !tbaa !399
  br label %"consume blur_x609"

"consume blur_x609":                              ; preds = %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge", %"produce blur_x608"
  %.pre-phi3552 = phi i64 [ %.pre3551, %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge" ], [ %11349, %"produce blur_x608" ]
  %11356 = add nsw i64 %11137, %.pre-phi3552
  %11357 = getelementptr inbounds i16, i16* %blur_x, i64 %11356
  %11358 = bitcast i16* %11357 to <16 x i16>*
  %11359 = load <16 x i16>, <16 x i16>* %11358, align 2, !tbaa !399
  %11360 = getelementptr inbounds i16, i16* %11357, i64 16
  %11361 = bitcast i16* %11360 to <16 x i16>*
  %11362 = load <16 x i16>, <16 x i16>* %11361, align 2, !tbaa !399
  %11363 = add nsw i64 %11140, %.pre-phi3552
  %11364 = getelementptr inbounds i16, i16* %blur_x, i64 %11363
  %11365 = bitcast i16* %11364 to <16 x i16>*
  %11366 = load <16 x i16>, <16 x i16>* %11365, align 2, !tbaa !399
  %11367 = getelementptr inbounds i16, i16* %11364, i64 16
  %11368 = bitcast i16* %11367 to <16 x i16>*
  %11369 = load <16 x i16>, <16 x i16>* %11368, align 2, !tbaa !399
  %11370 = add nsw i64 %11143, %.pre-phi3552
  %11371 = getelementptr inbounds i16, i16* %blur_x, i64 %11370
  %11372 = bitcast i16* %11371 to <16 x i16>*
  %11373 = load <16 x i16>, <16 x i16>* %11372, align 2, !tbaa !399
  %11374 = getelementptr inbounds i16, i16* %11371, i64 16
  %11375 = bitcast i16* %11374 to <16 x i16>*
  %11376 = load <16 x i16>, <16 x i16>* %11375, align 2, !tbaa !399
  %11377 = add nsw i64 %11146, %.pre-phi3552
  %11378 = getelementptr inbounds i16, i16* %blur_x, i64 %11377
  %11379 = bitcast i16* %11378 to <16 x i16>*
  %11380 = load <16 x i16>, <16 x i16>* %11379, align 2, !tbaa !399
  %11381 = getelementptr inbounds i16, i16* %11378, i64 16
  %11382 = bitcast i16* %11381 to <16 x i16>*
  %11383 = load <16 x i16>, <16 x i16>* %11382, align 2, !tbaa !399
  %11384 = add nsw i64 %11149, %.pre-phi3552
  %11385 = getelementptr inbounds i16, i16* %blur_x, i64 %11384
  %11386 = bitcast i16* %11385 to <16 x i16>*
  %11387 = load <16 x i16>, <16 x i16>* %11386, align 2, !tbaa !399
  %11388 = getelementptr inbounds i16, i16* %11385, i64 16
  %11389 = bitcast i16* %11388 to <16 x i16>*
  %11390 = load <16 x i16>, <16 x i16>* %11389, align 2, !tbaa !399
  %11391 = add <16 x i16> %11366, %11359
  %11392 = add <16 x i16> %11391, %11373
  %11393 = add <16 x i16> %11392, %11380
  %11394 = add <16 x i16> %11393, %11387
  %11395 = add <16 x i16> %11369, %11362
  %11396 = add <16 x i16> %11395, %11376
  %11397 = add <16 x i16> %11396, %11383
  %11398 = add <16 x i16> %11397, %11390
  %11399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11394, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11398, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11401 = shufflevector <16 x i16> %11399, <16 x i16> %11400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11402 = lshr <32 x i16> %11401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11403 = shufflevector <32 x i16> %11402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11404 = add nsw i64 %11153, %.pre-phi3552
  %11405 = getelementptr inbounds i16, i16* %66, i64 %11404
  %11406 = bitcast i16* %11405 to <16 x i16>*
  store <16 x i16> %11403, <16 x i16>* %11406, align 2, !tbaa !401
  %11407 = shufflevector <32 x i16> %11402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11408 = getelementptr inbounds i16, i16* %11405, i64 16
  %11409 = bitcast i16* %11408 to <16 x i16>*
  store <16 x i16> %11407, <16 x i16>* %11409, align 2, !tbaa !401
  %indvars.iv.next3329 = add nuw nsw i64 %indvars.iv3328, 1
  %.not2711 = icmp eq i64 %indvars.iv.next3329, %184
  br i1 %.not2711, label %"end for blur_y.s0.x.x.rebased603", label %"for blur_y.s0.x.x.rebased602"

"for blur_y.s0.x.x.rebased610":                   ; preds = %"for blur_y.s0.x.x.rebased610.preheader", %"consume blur_x618"
  %blur_y.s0.x.x.rebased612 = phi i32 [ %11522, %"consume blur_x618" ], [ 0, %"for blur_y.s0.x.x.rebased610.preheader" ]
  %11410 = add nsw i32 %blur_y.s0.x.x.rebased612, %t1626
  %a266 = shl nsw i32 %11410, 5
  %11411 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %11411, i32 %a266, i32 %a14
  %11412 = icmp slt i32 %11410, 1
  %11413 = icmp sgt i32 %4, %a266
  %11414 = or i1 %11412, %11413
  br i1 %11414, label %"produce blur_x616", label %"consume blur_x618"

"end for blur_y.s0.x.x.rebased611":               ; preds = %"consume blur_x618", %"end for blur_y.s0.x.x.rebased603"
  br i1 %34, label %"produce blur_x622", label %after_bb619

"produce blur_x616":                              ; preds = %"for blur_y.s0.x.x.rebased610"
  %11415 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s617 = select i1 %11415, i32 %b272, i32 %4
  %t1085 = add nsw i32 %blur_x.s0.x.v1.base.s617, %t2073
  %11416 = sext i32 %t1085 to i64
  %11417 = getelementptr inbounds i16, i16* %read_input, i64 %11416
  %11418 = getelementptr inbounds i16, i16* %11417, i64 1
  %11419 = bitcast i16* %11418 to <16 x i16>*
  %11420 = load <16 x i16>, <16 x i16>* %11419, align 2, !tbaa !396
  %11421 = getelementptr inbounds i16, i16* %11417, i64 17
  %11422 = bitcast i16* %11421 to <16 x i16>*
  %11423 = load <16 x i16>, <16 x i16>* %11422, align 2, !tbaa !396
  %11424 = bitcast i16* %11417 to <16 x i16>*
  %11425 = load <16 x i16>, <16 x i16>* %11424, align 2, !tbaa !396
  %11426 = getelementptr inbounds i16, i16* %11417, i64 16
  %11427 = bitcast i16* %11426 to <16 x i16>*
  %11428 = load <16 x i16>, <16 x i16>* %11427, align 2, !tbaa !396
  %11429 = getelementptr inbounds i16, i16* %11417, i64 2
  %11430 = bitcast i16* %11429 to <16 x i16>*
  %11431 = load <16 x i16>, <16 x i16>* %11430, align 2, !tbaa !396
  %11432 = getelementptr inbounds i16, i16* %11417, i64 18
  %11433 = bitcast i16* %11432 to <16 x i16>*
  %11434 = load <16 x i16>, <16 x i16>* %11433, align 2, !tbaa !396
  %11435 = getelementptr inbounds i16, i16* %11417, i64 4
  %11436 = bitcast i16* %11435 to <16 x i16>*
  %11437 = load <16 x i16>, <16 x i16>* %11436, align 2, !tbaa !396
  %11438 = getelementptr inbounds i16, i16* %11417, i64 20
  %11439 = bitcast i16* %11438 to <16 x i16>*
  %11440 = load <16 x i16>, <16 x i16>* %11439, align 2, !tbaa !396
  %11441 = getelementptr inbounds i16, i16* %11417, i64 3
  %11442 = bitcast i16* %11441 to <16 x i16>*
  %11443 = load <16 x i16>, <16 x i16>* %11442, align 2, !tbaa !396
  %11444 = getelementptr inbounds i16, i16* %11417, i64 19
  %11445 = bitcast i16* %11444 to <16 x i16>*
  %11446 = load <16 x i16>, <16 x i16>* %11445, align 2, !tbaa !396
  %11447 = add <16 x i16> %11425, %11420
  %11448 = add <16 x i16> %11447, %11431
  %11449 = add <16 x i16> %11448, %11437
  %11450 = add <16 x i16> %11449, %11443
  %11451 = add <16 x i16> %11428, %11423
  %11452 = add <16 x i16> %11451, %11434
  %11453 = add <16 x i16> %11452, %11440
  %11454 = add <16 x i16> %11453, %11446
  %11455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11450, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11454, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11457 = shufflevector <16 x i16> %11455, <16 x i16> %11456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11458 = lshr <32 x i16> %11457, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11459 = shufflevector <32 x i16> %11458, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11460 = sext i32 %blur_x.s0.x.v1.base.s617 to i64
  %11461 = add nsw i64 %11460, %11285
  %11462 = getelementptr inbounds i16, i16* %blur_x, i64 %11461
  %11463 = bitcast i16* %11462 to <16 x i16>*
  store <16 x i16> %11459, <16 x i16>* %11463, align 2, !tbaa !399
  %11464 = shufflevector <32 x i16> %11458, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11465 = getelementptr inbounds i16, i16* %11462, i64 16
  %11466 = bitcast i16* %11465 to <16 x i16>*
  store <16 x i16> %11464, <16 x i16>* %11466, align 2, !tbaa !399
  br label %"consume blur_x618"

"consume blur_x618":                              ; preds = %"for blur_y.s0.x.x.rebased610", %"produce blur_x616"
  %11467 = sext i32 %b272 to i64
  %11468 = add nsw i64 %11288, %11467
  %11469 = getelementptr inbounds i16, i16* %blur_x, i64 %11468
  %11470 = bitcast i16* %11469 to <16 x i16>*
  %11471 = load <16 x i16>, <16 x i16>* %11470, align 2, !tbaa !399
  %11472 = getelementptr inbounds i16, i16* %11469, i64 16
  %11473 = bitcast i16* %11472 to <16 x i16>*
  %11474 = load <16 x i16>, <16 x i16>* %11473, align 2, !tbaa !399
  %11475 = add nsw i64 %11291, %11467
  %11476 = getelementptr inbounds i16, i16* %blur_x, i64 %11475
  %11477 = bitcast i16* %11476 to <16 x i16>*
  %11478 = load <16 x i16>, <16 x i16>* %11477, align 2, !tbaa !399
  %11479 = getelementptr inbounds i16, i16* %11476, i64 16
  %11480 = bitcast i16* %11479 to <16 x i16>*
  %11481 = load <16 x i16>, <16 x i16>* %11480, align 2, !tbaa !399
  %11482 = add nsw i64 %11294, %11467
  %11483 = getelementptr inbounds i16, i16* %blur_x, i64 %11482
  %11484 = bitcast i16* %11483 to <16 x i16>*
  %11485 = load <16 x i16>, <16 x i16>* %11484, align 2, !tbaa !399
  %11486 = getelementptr inbounds i16, i16* %11483, i64 16
  %11487 = bitcast i16* %11486 to <16 x i16>*
  %11488 = load <16 x i16>, <16 x i16>* %11487, align 2, !tbaa !399
  %11489 = add nsw i64 %11297, %11467
  %11490 = getelementptr inbounds i16, i16* %blur_x, i64 %11489
  %11491 = bitcast i16* %11490 to <16 x i16>*
  %11492 = load <16 x i16>, <16 x i16>* %11491, align 2, !tbaa !399
  %11493 = getelementptr inbounds i16, i16* %11490, i64 16
  %11494 = bitcast i16* %11493 to <16 x i16>*
  %11495 = load <16 x i16>, <16 x i16>* %11494, align 2, !tbaa !399
  %11496 = add nsw i64 %11300, %11467
  %11497 = getelementptr inbounds i16, i16* %blur_x, i64 %11496
  %11498 = bitcast i16* %11497 to <16 x i16>*
  %11499 = load <16 x i16>, <16 x i16>* %11498, align 2, !tbaa !399
  %11500 = getelementptr inbounds i16, i16* %11497, i64 16
  %11501 = bitcast i16* %11500 to <16 x i16>*
  %11502 = load <16 x i16>, <16 x i16>* %11501, align 2, !tbaa !399
  %11503 = add <16 x i16> %11478, %11471
  %11504 = add <16 x i16> %11503, %11485
  %11505 = add <16 x i16> %11504, %11492
  %11506 = add <16 x i16> %11505, %11499
  %11507 = add <16 x i16> %11481, %11474
  %11508 = add <16 x i16> %11507, %11488
  %11509 = add <16 x i16> %11508, %11495
  %11510 = add <16 x i16> %11509, %11502
  %11511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11506, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11510, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11513 = shufflevector <16 x i16> %11511, <16 x i16> %11512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11514 = lshr <32 x i16> %11513, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11515 = shufflevector <32 x i16> %11514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11516 = add nsw i64 %11304, %11467
  %11517 = getelementptr inbounds i16, i16* %66, i64 %11516
  %11518 = bitcast i16* %11517 to <16 x i16>*
  store <16 x i16> %11515, <16 x i16>* %11518, align 2, !tbaa !401
  %11519 = shufflevector <32 x i16> %11514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11520 = getelementptr inbounds i16, i16* %11517, i64 16
  %11521 = bitcast i16* %11520 to <16 x i16>*
  store <16 x i16> %11519, <16 x i16>* %11521, align 2, !tbaa !401
  %11522 = add nuw nsw i32 %blur_y.s0.x.x.rebased612, 1
  %.not2710 = icmp eq i32 %11522, %t1683
  br i1 %.not2710, label %"end for blur_y.s0.x.x.rebased611", label %"for blur_y.s0.x.x.rebased610"

after_bb619:                                      ; preds = %"end for blur_y.s0.x.x.rebased611", %"produce blur_x622"
  br i1 %100, label %"for blur_y.s0.x.x.rebased624.preheader", label %"end for blur_y.s0.x.x.rebased625", !prof !386

"for blur_y.s0.x.x.rebased624.preheader":         ; preds = %after_bb619
  %11523 = sext i32 %t1706 to i64
  %11524 = zext i32 %.pre-phi3480 to i64
  %11525 = mul nsw i64 %11524, %112
  %11526 = sub nsw i64 %11525, %96
  %11527 = zext i32 %.pre-phi to i64
  %11528 = mul nsw i64 %11527, %112
  %11529 = sub nsw i64 %11528, %96
  %11530 = zext i32 %.pre-phi3484 to i64
  %11531 = mul nsw i64 %11530, %112
  %11532 = sub nsw i64 %11531, %96
  %11533 = zext i32 %.pre-phi3492 to i64
  %11534 = mul nsw i64 %11533, %112
  %11535 = sub nsw i64 %11534, %96
  %11536 = zext i32 %.pre-phi3488 to i64
  %11537 = mul nsw i64 %11536, %112
  %11538 = sub nsw i64 %11537, %96
  %11539 = sext i32 %a26 to i64
  %11540 = add nsw i64 %11539, 24
  %11541 = mul nsw i64 %11540, %113
  %11542 = add nsw i64 %11541, %116
  br label %"for blur_y.s0.x.x.rebased624"

"produce blur_x622":                              ; preds = %"end for blur_y.s0.x.x.rebased611"
  %11543 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %11544 = getelementptr inbounds i16, i16* %11543, i64 -31
  %11545 = bitcast i16* %11544 to <16 x i16>*
  %11546 = load <16 x i16>, <16 x i16>* %11545, align 2, !tbaa !396
  %11547 = getelementptr inbounds i16, i16* %11543, i64 -15
  %11548 = bitcast i16* %11547 to <16 x i16>*
  %11549 = load <16 x i16>, <16 x i16>* %11548, align 2, !tbaa !396
  %11550 = getelementptr inbounds i16, i16* %11543, i64 -32
  %11551 = bitcast i16* %11550 to <16 x i16>*
  %11552 = load <16 x i16>, <16 x i16>* %11551, align 2, !tbaa !396
  %11553 = getelementptr inbounds i16, i16* %11543, i64 -16
  %11554 = bitcast i16* %11553 to <16 x i16>*
  %11555 = load <16 x i16>, <16 x i16>* %11554, align 2, !tbaa !396
  %11556 = getelementptr inbounds i16, i16* %11543, i64 -30
  %11557 = bitcast i16* %11556 to <16 x i16>*
  %11558 = load <16 x i16>, <16 x i16>* %11557, align 2, !tbaa !396
  %11559 = getelementptr inbounds i16, i16* %11543, i64 -14
  %11560 = bitcast i16* %11559 to <16 x i16>*
  %11561 = load <16 x i16>, <16 x i16>* %11560, align 2, !tbaa !396
  %11562 = getelementptr inbounds i16, i16* %11543, i64 -28
  %11563 = bitcast i16* %11562 to <16 x i16>*
  %11564 = load <16 x i16>, <16 x i16>* %11563, align 2, !tbaa !396
  %11565 = getelementptr inbounds i16, i16* %11543, i64 -12
  %11566 = bitcast i16* %11565 to <16 x i16>*
  %11567 = load <16 x i16>, <16 x i16>* %11566, align 2, !tbaa !396
  %11568 = getelementptr inbounds i16, i16* %11543, i64 -29
  %11569 = bitcast i16* %11568 to <16 x i16>*
  %11570 = load <16 x i16>, <16 x i16>* %11569, align 2, !tbaa !396
  %11571 = getelementptr inbounds i16, i16* %11543, i64 -13
  %11572 = bitcast i16* %11571 to <16 x i16>*
  %11573 = load <16 x i16>, <16 x i16>* %11572, align 2, !tbaa !396
  %11574 = add <16 x i16> %11552, %11546
  %11575 = add <16 x i16> %11574, %11558
  %11576 = add <16 x i16> %11575, %11564
  %11577 = add <16 x i16> %11576, %11570
  %11578 = add <16 x i16> %11555, %11549
  %11579 = add <16 x i16> %11578, %11561
  %11580 = add <16 x i16> %11579, %11567
  %11581 = add <16 x i16> %11580, %11573
  %11582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11577, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11581, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11584 = shufflevector <16 x i16> %11582, <16 x i16> %11583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11585 = lshr <32 x i16> %11584, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11586 = shufflevector <32 x i16> %11585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11587 = zext i32 %.pre-phi3492 to i64
  %11588 = mul nsw i64 %97, %11587
  %11589 = add nsw i64 %99, %11588
  %11590 = getelementptr inbounds i16, i16* %blur_x, i64 %11589
  %11591 = getelementptr inbounds i16, i16* %11590, i64 -32
  %11592 = bitcast i16* %11591 to <16 x i16>*
  store <16 x i16> %11586, <16 x i16>* %11592, align 2, !tbaa !399
  %11593 = shufflevector <32 x i16> %11585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11594 = getelementptr inbounds i16, i16* %11590, i64 -16
  %11595 = bitcast i16* %11594 to <16 x i16>*
  store <16 x i16> %11593, <16 x i16>* %11595, align 2, !tbaa !399
  %11596 = zext i32 %.pre-phi3480 to i64
  %11597 = mul nsw i64 %11596, %112
  %11598 = add nsw i64 %11597, %94
  %11599 = getelementptr inbounds i16, i16* %blur_x, i64 %11598
  %11600 = getelementptr inbounds i16, i16* %11599, i64 -32
  %11601 = bitcast i16* %11600 to <16 x i16>*
  %11602 = load <16 x i16>, <16 x i16>* %11601, align 2, !tbaa !399
  %11603 = getelementptr inbounds i16, i16* %11599, i64 -16
  %11604 = bitcast i16* %11603 to <16 x i16>*
  %11605 = load <16 x i16>, <16 x i16>* %11604, align 2, !tbaa !399
  %11606 = zext i32 %.pre-phi to i64
  %11607 = mul nsw i64 %11606, %112
  %11608 = add nsw i64 %11607, %94
  %11609 = getelementptr inbounds i16, i16* %blur_x, i64 %11608
  %11610 = getelementptr inbounds i16, i16* %11609, i64 -32
  %11611 = bitcast i16* %11610 to <16 x i16>*
  %11612 = load <16 x i16>, <16 x i16>* %11611, align 2, !tbaa !399
  %11613 = getelementptr inbounds i16, i16* %11609, i64 -16
  %11614 = bitcast i16* %11613 to <16 x i16>*
  %11615 = load <16 x i16>, <16 x i16>* %11614, align 2, !tbaa !399
  %11616 = zext i32 %.pre-phi3484 to i64
  %11617 = mul nsw i64 %11616, %112
  %11618 = add nsw i64 %11617, %94
  %11619 = getelementptr inbounds i16, i16* %blur_x, i64 %11618
  %11620 = getelementptr inbounds i16, i16* %11619, i64 -32
  %11621 = bitcast i16* %11620 to <16 x i16>*
  %11622 = load <16 x i16>, <16 x i16>* %11621, align 2, !tbaa !399
  %11623 = getelementptr inbounds i16, i16* %11619, i64 -16
  %11624 = bitcast i16* %11623 to <16 x i16>*
  %11625 = load <16 x i16>, <16 x i16>* %11624, align 2, !tbaa !399
  %11626 = mul nsw i64 %11587, %112
  %11627 = add nsw i64 %11626, %94
  %11628 = getelementptr inbounds i16, i16* %blur_x, i64 %11627
  %11629 = getelementptr inbounds i16, i16* %11628, i64 -32
  %11630 = bitcast i16* %11629 to <16 x i16>*
  %11631 = load <16 x i16>, <16 x i16>* %11630, align 2, !tbaa !399
  %11632 = getelementptr inbounds i16, i16* %11628, i64 -16
  %11633 = bitcast i16* %11632 to <16 x i16>*
  %11634 = load <16 x i16>, <16 x i16>* %11633, align 2, !tbaa !399
  %11635 = zext i32 %.pre-phi3488 to i64
  %11636 = mul nsw i64 %11635, %112
  %11637 = add nsw i64 %11636, %94
  %11638 = getelementptr inbounds i16, i16* %blur_x, i64 %11637
  %11639 = getelementptr inbounds i16, i16* %11638, i64 -32
  %11640 = bitcast i16* %11639 to <16 x i16>*
  %11641 = load <16 x i16>, <16 x i16>* %11640, align 2, !tbaa !399
  %11642 = getelementptr inbounds i16, i16* %11638, i64 -16
  %11643 = bitcast i16* %11642 to <16 x i16>*
  %11644 = load <16 x i16>, <16 x i16>* %11643, align 2, !tbaa !399
  %11645 = add <16 x i16> %11612, %11602
  %11646 = add <16 x i16> %11645, %11622
  %11647 = add <16 x i16> %11646, %11631
  %11648 = add <16 x i16> %11647, %11641
  %11649 = add <16 x i16> %11615, %11605
  %11650 = add <16 x i16> %11649, %11625
  %11651 = add <16 x i16> %11650, %11634
  %11652 = add <16 x i16> %11651, %11644
  %11653 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11648, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11652, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11655 = shufflevector <16 x i16> %11653, <16 x i16> %11654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11656 = lshr <32 x i16> %11655, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11657 = shufflevector <32 x i16> %11656, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11658 = sext i32 %a26 to i64
  %11659 = add nsw i64 %11658, 24
  %11660 = mul nsw i64 %11659, %113
  %11661 = add nsw i64 %115, %11660
  %11662 = getelementptr inbounds i16, i16* %66, i64 %11661
  %11663 = getelementptr inbounds i16, i16* %11662, i64 -32
  %11664 = bitcast i16* %11663 to <16 x i16>*
  store <16 x i16> %11657, <16 x i16>* %11664, align 2, !tbaa !401
  %11665 = shufflevector <32 x i16> %11656, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11666 = getelementptr inbounds i16, i16* %11662, i64 -16
  %11667 = bitcast i16* %11666 to <16 x i16>*
  store <16 x i16> %11665, <16 x i16>* %11667, align 2, !tbaa !401
  br label %after_bb619

"for blur_y.s0.x.x.rebased624":                   ; preds = %"for blur_y.s0.x.x.rebased624.preheader", %"consume blur_x631"
  %indvars.iv3331 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased624.preheader" ], [ %indvars.iv.next3332, %"consume blur_x631" ]
  %11668 = add nsw i64 %indvars.iv3331, %101
  %11669 = icmp slt i64 %11668, 1
  %11670 = trunc i64 %11668 to i32
  %11671 = shl nsw i32 %11670, 5
  %11672 = icmp sgt i32 %4, %11671
  %11673 = or i1 %11669, %11672
  br i1 %11673, label %"produce blur_x630", label %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge"

"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased624"
  %.pre3553 = shl nsw i64 %11668, 5
  br label %"consume blur_x631"

"end for blur_y.s0.x.x.rebased625":               ; preds = %"consume blur_x631", %after_bb619
  br i1 %102, label %"for blur_y.s0.x.x.rebased632.preheader", label %"end for blur_y.s0.x.x.rebased633", !prof !386

"for blur_y.s0.x.x.rebased632.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased625"
  %11674 = sext i32 %t1706 to i64
  %11675 = zext i32 %.pre-phi3480 to i64
  %11676 = mul nsw i64 %11675, %112
  %11677 = sub nsw i64 %11676, %96
  %11678 = zext i32 %.pre-phi to i64
  %11679 = mul nsw i64 %11678, %112
  %11680 = sub nsw i64 %11679, %96
  %11681 = zext i32 %.pre-phi3484 to i64
  %11682 = mul nsw i64 %11681, %112
  %11683 = sub nsw i64 %11682, %96
  %11684 = zext i32 %.pre-phi3492 to i64
  %11685 = mul nsw i64 %11684, %112
  %11686 = sub nsw i64 %11685, %96
  %11687 = zext i32 %.pre-phi3488 to i64
  %11688 = mul nsw i64 %11687, %112
  %11689 = sub nsw i64 %11688, %96
  %11690 = sext i32 %a26 to i64
  %11691 = add nsw i64 %11690, 24
  %11692 = mul nsw i64 %11691, %113
  %11693 = add nsw i64 %11692, %116
  br label %"for blur_y.s0.x.x.rebased632"

"produce blur_x630":                              ; preds = %"for blur_y.s0.x.x.rebased624"
  %t1096 = add nsw i32 %11671, %t2089
  %11694 = sext i32 %t1096 to i64
  %11695 = getelementptr inbounds i16, i16* %read_input, i64 %11694
  %11696 = getelementptr inbounds i16, i16* %11695, i64 1
  %11697 = bitcast i16* %11696 to <16 x i16>*
  %11698 = load <16 x i16>, <16 x i16>* %11697, align 2, !tbaa !396
  %11699 = getelementptr inbounds i16, i16* %11695, i64 17
  %11700 = bitcast i16* %11699 to <16 x i16>*
  %11701 = load <16 x i16>, <16 x i16>* %11700, align 2, !tbaa !396
  %11702 = bitcast i16* %11695 to <16 x i16>*
  %11703 = load <16 x i16>, <16 x i16>* %11702, align 2, !tbaa !396
  %11704 = getelementptr inbounds i16, i16* %11695, i64 16
  %11705 = bitcast i16* %11704 to <16 x i16>*
  %11706 = load <16 x i16>, <16 x i16>* %11705, align 2, !tbaa !396
  %11707 = getelementptr inbounds i16, i16* %11695, i64 2
  %11708 = bitcast i16* %11707 to <16 x i16>*
  %11709 = load <16 x i16>, <16 x i16>* %11708, align 2, !tbaa !396
  %11710 = getelementptr inbounds i16, i16* %11695, i64 18
  %11711 = bitcast i16* %11710 to <16 x i16>*
  %11712 = load <16 x i16>, <16 x i16>* %11711, align 2, !tbaa !396
  %11713 = getelementptr inbounds i16, i16* %11695, i64 4
  %11714 = bitcast i16* %11713 to <16 x i16>*
  %11715 = load <16 x i16>, <16 x i16>* %11714, align 2, !tbaa !396
  %11716 = getelementptr inbounds i16, i16* %11695, i64 20
  %11717 = bitcast i16* %11716 to <16 x i16>*
  %11718 = load <16 x i16>, <16 x i16>* %11717, align 2, !tbaa !396
  %11719 = getelementptr inbounds i16, i16* %11695, i64 3
  %11720 = bitcast i16* %11719 to <16 x i16>*
  %11721 = load <16 x i16>, <16 x i16>* %11720, align 2, !tbaa !396
  %11722 = getelementptr inbounds i16, i16* %11695, i64 19
  %11723 = bitcast i16* %11722 to <16 x i16>*
  %11724 = load <16 x i16>, <16 x i16>* %11723, align 2, !tbaa !396
  %11725 = add <16 x i16> %11703, %11698
  %11726 = add <16 x i16> %11725, %11709
  %11727 = add <16 x i16> %11726, %11715
  %11728 = add <16 x i16> %11727, %11721
  %11729 = add <16 x i16> %11706, %11701
  %11730 = add <16 x i16> %11729, %11712
  %11731 = add <16 x i16> %11730, %11718
  %11732 = add <16 x i16> %11731, %11724
  %11733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11728, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11732, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11735 = shufflevector <16 x i16> %11733, <16 x i16> %11734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11736 = lshr <32 x i16> %11735, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11737 = shufflevector <32 x i16> %11736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11738 = shl nsw i64 %11668, 5
  %11739 = add nsw i64 %11738, %11523
  %11740 = getelementptr inbounds i16, i16* %blur_x, i64 %11739
  %11741 = bitcast i16* %11740 to <16 x i16>*
  store <16 x i16> %11737, <16 x i16>* %11741, align 2, !tbaa !399
  %11742 = shufflevector <32 x i16> %11736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11743 = getelementptr inbounds i16, i16* %11740, i64 16
  %11744 = bitcast i16* %11743 to <16 x i16>*
  store <16 x i16> %11742, <16 x i16>* %11744, align 2, !tbaa !399
  br label %"consume blur_x631"

"consume blur_x631":                              ; preds = %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge", %"produce blur_x630"
  %.pre-phi3554 = phi i64 [ %.pre3553, %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge" ], [ %11738, %"produce blur_x630" ]
  %11745 = add nsw i64 %11526, %.pre-phi3554
  %11746 = getelementptr inbounds i16, i16* %blur_x, i64 %11745
  %11747 = bitcast i16* %11746 to <16 x i16>*
  %11748 = load <16 x i16>, <16 x i16>* %11747, align 2, !tbaa !399
  %11749 = getelementptr inbounds i16, i16* %11746, i64 16
  %11750 = bitcast i16* %11749 to <16 x i16>*
  %11751 = load <16 x i16>, <16 x i16>* %11750, align 2, !tbaa !399
  %11752 = add nsw i64 %11529, %.pre-phi3554
  %11753 = getelementptr inbounds i16, i16* %blur_x, i64 %11752
  %11754 = bitcast i16* %11753 to <16 x i16>*
  %11755 = load <16 x i16>, <16 x i16>* %11754, align 2, !tbaa !399
  %11756 = getelementptr inbounds i16, i16* %11753, i64 16
  %11757 = bitcast i16* %11756 to <16 x i16>*
  %11758 = load <16 x i16>, <16 x i16>* %11757, align 2, !tbaa !399
  %11759 = add nsw i64 %11532, %.pre-phi3554
  %11760 = getelementptr inbounds i16, i16* %blur_x, i64 %11759
  %11761 = bitcast i16* %11760 to <16 x i16>*
  %11762 = load <16 x i16>, <16 x i16>* %11761, align 2, !tbaa !399
  %11763 = getelementptr inbounds i16, i16* %11760, i64 16
  %11764 = bitcast i16* %11763 to <16 x i16>*
  %11765 = load <16 x i16>, <16 x i16>* %11764, align 2, !tbaa !399
  %11766 = add nsw i64 %11535, %.pre-phi3554
  %11767 = getelementptr inbounds i16, i16* %blur_x, i64 %11766
  %11768 = bitcast i16* %11767 to <16 x i16>*
  %11769 = load <16 x i16>, <16 x i16>* %11768, align 2, !tbaa !399
  %11770 = getelementptr inbounds i16, i16* %11767, i64 16
  %11771 = bitcast i16* %11770 to <16 x i16>*
  %11772 = load <16 x i16>, <16 x i16>* %11771, align 2, !tbaa !399
  %11773 = add nsw i64 %11538, %.pre-phi3554
  %11774 = getelementptr inbounds i16, i16* %blur_x, i64 %11773
  %11775 = bitcast i16* %11774 to <16 x i16>*
  %11776 = load <16 x i16>, <16 x i16>* %11775, align 2, !tbaa !399
  %11777 = getelementptr inbounds i16, i16* %11774, i64 16
  %11778 = bitcast i16* %11777 to <16 x i16>*
  %11779 = load <16 x i16>, <16 x i16>* %11778, align 2, !tbaa !399
  %11780 = add <16 x i16> %11755, %11748
  %11781 = add <16 x i16> %11780, %11762
  %11782 = add <16 x i16> %11781, %11769
  %11783 = add <16 x i16> %11782, %11776
  %11784 = add <16 x i16> %11758, %11751
  %11785 = add <16 x i16> %11784, %11765
  %11786 = add <16 x i16> %11785, %11772
  %11787 = add <16 x i16> %11786, %11779
  %11788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11787, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11790 = shufflevector <16 x i16> %11788, <16 x i16> %11789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11791 = lshr <32 x i16> %11790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11792 = shufflevector <32 x i16> %11791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11793 = add nsw i64 %11542, %.pre-phi3554
  %11794 = getelementptr inbounds i16, i16* %66, i64 %11793
  %11795 = bitcast i16* %11794 to <16 x i16>*
  store <16 x i16> %11792, <16 x i16>* %11795, align 2, !tbaa !401
  %11796 = shufflevector <32 x i16> %11791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11797 = getelementptr inbounds i16, i16* %11794, i64 16
  %11798 = bitcast i16* %11797 to <16 x i16>*
  store <16 x i16> %11796, <16 x i16>* %11798, align 2, !tbaa !401
  %indvars.iv.next3332 = add nuw nsw i64 %indvars.iv3331, 1
  %.not2709 = icmp eq i64 %indvars.iv.next3332, %184
  br i1 %.not2709, label %"end for blur_y.s0.x.x.rebased625", label %"for blur_y.s0.x.x.rebased624"

"for blur_y.s0.x.x.rebased632":                   ; preds = %"for blur_y.s0.x.x.rebased632.preheader", %"consume blur_x640"
  %blur_y.s0.x.x.rebased634 = phi i32 [ %11911, %"consume blur_x640" ], [ 0, %"for blur_y.s0.x.x.rebased632.preheader" ]
  %11799 = add nsw i32 %blur_y.s0.x.x.rebased634, %t1626
  %a273 = shl nsw i32 %11799, 5
  %11800 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %11800, i32 %a273, i32 %a14
  %11801 = icmp slt i32 %11799, 1
  %11802 = icmp sgt i32 %4, %a273
  %11803 = or i1 %11801, %11802
  br i1 %11803, label %"produce blur_x638", label %"consume blur_x640"

"end for blur_y.s0.x.x.rebased633":               ; preds = %"consume blur_x640", %"end for blur_y.s0.x.x.rebased625"
  br i1 %34, label %"produce blur_x644", label %after_bb641

"produce blur_x638":                              ; preds = %"for blur_y.s0.x.x.rebased632"
  %11804 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s639 = select i1 %11804, i32 %b279, i32 %4
  %t1101 = add nsw i32 %blur_x.s0.x.v1.base.s639, %t2089
  %11805 = sext i32 %t1101 to i64
  %11806 = getelementptr inbounds i16, i16* %read_input, i64 %11805
  %11807 = getelementptr inbounds i16, i16* %11806, i64 1
  %11808 = bitcast i16* %11807 to <16 x i16>*
  %11809 = load <16 x i16>, <16 x i16>* %11808, align 2, !tbaa !396
  %11810 = getelementptr inbounds i16, i16* %11806, i64 17
  %11811 = bitcast i16* %11810 to <16 x i16>*
  %11812 = load <16 x i16>, <16 x i16>* %11811, align 2, !tbaa !396
  %11813 = bitcast i16* %11806 to <16 x i16>*
  %11814 = load <16 x i16>, <16 x i16>* %11813, align 2, !tbaa !396
  %11815 = getelementptr inbounds i16, i16* %11806, i64 16
  %11816 = bitcast i16* %11815 to <16 x i16>*
  %11817 = load <16 x i16>, <16 x i16>* %11816, align 2, !tbaa !396
  %11818 = getelementptr inbounds i16, i16* %11806, i64 2
  %11819 = bitcast i16* %11818 to <16 x i16>*
  %11820 = load <16 x i16>, <16 x i16>* %11819, align 2, !tbaa !396
  %11821 = getelementptr inbounds i16, i16* %11806, i64 18
  %11822 = bitcast i16* %11821 to <16 x i16>*
  %11823 = load <16 x i16>, <16 x i16>* %11822, align 2, !tbaa !396
  %11824 = getelementptr inbounds i16, i16* %11806, i64 4
  %11825 = bitcast i16* %11824 to <16 x i16>*
  %11826 = load <16 x i16>, <16 x i16>* %11825, align 2, !tbaa !396
  %11827 = getelementptr inbounds i16, i16* %11806, i64 20
  %11828 = bitcast i16* %11827 to <16 x i16>*
  %11829 = load <16 x i16>, <16 x i16>* %11828, align 2, !tbaa !396
  %11830 = getelementptr inbounds i16, i16* %11806, i64 3
  %11831 = bitcast i16* %11830 to <16 x i16>*
  %11832 = load <16 x i16>, <16 x i16>* %11831, align 2, !tbaa !396
  %11833 = getelementptr inbounds i16, i16* %11806, i64 19
  %11834 = bitcast i16* %11833 to <16 x i16>*
  %11835 = load <16 x i16>, <16 x i16>* %11834, align 2, !tbaa !396
  %11836 = add <16 x i16> %11814, %11809
  %11837 = add <16 x i16> %11836, %11820
  %11838 = add <16 x i16> %11837, %11826
  %11839 = add <16 x i16> %11838, %11832
  %11840 = add <16 x i16> %11817, %11812
  %11841 = add <16 x i16> %11840, %11823
  %11842 = add <16 x i16> %11841, %11829
  %11843 = add <16 x i16> %11842, %11835
  %11844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11839, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11843, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11846 = shufflevector <16 x i16> %11844, <16 x i16> %11845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11847 = lshr <32 x i16> %11846, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11848 = shufflevector <32 x i16> %11847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11849 = sext i32 %blur_x.s0.x.v1.base.s639 to i64
  %11850 = add nsw i64 %11849, %11674
  %11851 = getelementptr inbounds i16, i16* %blur_x, i64 %11850
  %11852 = bitcast i16* %11851 to <16 x i16>*
  store <16 x i16> %11848, <16 x i16>* %11852, align 2, !tbaa !399
  %11853 = shufflevector <32 x i16> %11847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11854 = getelementptr inbounds i16, i16* %11851, i64 16
  %11855 = bitcast i16* %11854 to <16 x i16>*
  store <16 x i16> %11853, <16 x i16>* %11855, align 2, !tbaa !399
  br label %"consume blur_x640"

"consume blur_x640":                              ; preds = %"for blur_y.s0.x.x.rebased632", %"produce blur_x638"
  %11856 = sext i32 %b279 to i64
  %11857 = add nsw i64 %11677, %11856
  %11858 = getelementptr inbounds i16, i16* %blur_x, i64 %11857
  %11859 = bitcast i16* %11858 to <16 x i16>*
  %11860 = load <16 x i16>, <16 x i16>* %11859, align 2, !tbaa !399
  %11861 = getelementptr inbounds i16, i16* %11858, i64 16
  %11862 = bitcast i16* %11861 to <16 x i16>*
  %11863 = load <16 x i16>, <16 x i16>* %11862, align 2, !tbaa !399
  %11864 = add nsw i64 %11680, %11856
  %11865 = getelementptr inbounds i16, i16* %blur_x, i64 %11864
  %11866 = bitcast i16* %11865 to <16 x i16>*
  %11867 = load <16 x i16>, <16 x i16>* %11866, align 2, !tbaa !399
  %11868 = getelementptr inbounds i16, i16* %11865, i64 16
  %11869 = bitcast i16* %11868 to <16 x i16>*
  %11870 = load <16 x i16>, <16 x i16>* %11869, align 2, !tbaa !399
  %11871 = add nsw i64 %11683, %11856
  %11872 = getelementptr inbounds i16, i16* %blur_x, i64 %11871
  %11873 = bitcast i16* %11872 to <16 x i16>*
  %11874 = load <16 x i16>, <16 x i16>* %11873, align 2, !tbaa !399
  %11875 = getelementptr inbounds i16, i16* %11872, i64 16
  %11876 = bitcast i16* %11875 to <16 x i16>*
  %11877 = load <16 x i16>, <16 x i16>* %11876, align 2, !tbaa !399
  %11878 = add nsw i64 %11686, %11856
  %11879 = getelementptr inbounds i16, i16* %blur_x, i64 %11878
  %11880 = bitcast i16* %11879 to <16 x i16>*
  %11881 = load <16 x i16>, <16 x i16>* %11880, align 2, !tbaa !399
  %11882 = getelementptr inbounds i16, i16* %11879, i64 16
  %11883 = bitcast i16* %11882 to <16 x i16>*
  %11884 = load <16 x i16>, <16 x i16>* %11883, align 2, !tbaa !399
  %11885 = add nsw i64 %11689, %11856
  %11886 = getelementptr inbounds i16, i16* %blur_x, i64 %11885
  %11887 = bitcast i16* %11886 to <16 x i16>*
  %11888 = load <16 x i16>, <16 x i16>* %11887, align 2, !tbaa !399
  %11889 = getelementptr inbounds i16, i16* %11886, i64 16
  %11890 = bitcast i16* %11889 to <16 x i16>*
  %11891 = load <16 x i16>, <16 x i16>* %11890, align 2, !tbaa !399
  %11892 = add <16 x i16> %11867, %11860
  %11893 = add <16 x i16> %11892, %11874
  %11894 = add <16 x i16> %11893, %11881
  %11895 = add <16 x i16> %11894, %11888
  %11896 = add <16 x i16> %11870, %11863
  %11897 = add <16 x i16> %11896, %11877
  %11898 = add <16 x i16> %11897, %11884
  %11899 = add <16 x i16> %11898, %11891
  %11900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11895, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11899, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11902 = shufflevector <16 x i16> %11900, <16 x i16> %11901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11903 = lshr <32 x i16> %11902, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11904 = shufflevector <32 x i16> %11903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11905 = add nsw i64 %11693, %11856
  %11906 = getelementptr inbounds i16, i16* %66, i64 %11905
  %11907 = bitcast i16* %11906 to <16 x i16>*
  store <16 x i16> %11904, <16 x i16>* %11907, align 2, !tbaa !401
  %11908 = shufflevector <32 x i16> %11903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11909 = getelementptr inbounds i16, i16* %11906, i64 16
  %11910 = bitcast i16* %11909 to <16 x i16>*
  store <16 x i16> %11908, <16 x i16>* %11910, align 2, !tbaa !401
  %11911 = add nuw nsw i32 %blur_y.s0.x.x.rebased634, 1
  %.not2708 = icmp eq i32 %11911, %t1683
  br i1 %.not2708, label %"end for blur_y.s0.x.x.rebased633", label %"for blur_y.s0.x.x.rebased632"

after_bb641:                                      ; preds = %"end for blur_y.s0.x.x.rebased633", %"produce blur_x644"
  br i1 %100, label %"for blur_y.s0.x.x.rebased646.preheader", label %"end for blur_y.s0.x.x.rebased647", !prof !386

"for blur_y.s0.x.x.rebased646.preheader":         ; preds = %after_bb641
  %11912 = sext i32 %t1722 to i64
  %11913 = zext i32 %.pre-phi3484 to i64
  %11914 = mul nsw i64 %11913, %112
  %11915 = sub nsw i64 %11914, %96
  %11916 = zext i32 %.pre-phi3480 to i64
  %11917 = mul nsw i64 %11916, %112
  %11918 = sub nsw i64 %11917, %96
  %11919 = zext i32 %.pre-phi3488 to i64
  %11920 = mul nsw i64 %11919, %112
  %11921 = sub nsw i64 %11920, %96
  %11922 = zext i32 %.pre-phi3498 to i64
  %11923 = mul nsw i64 %11922, %112
  %11924 = sub nsw i64 %11923, %96
  %11925 = zext i32 %.pre-phi3492 to i64
  %11926 = mul nsw i64 %11925, %112
  %11927 = sub nsw i64 %11926, %96
  %11928 = sext i32 %a26 to i64
  %11929 = add nsw i64 %11928, 25
  %11930 = mul nsw i64 %11929, %113
  %11931 = add nsw i64 %11930, %116
  br label %"for blur_y.s0.x.x.rebased646"

"produce blur_x644":                              ; preds = %"end for blur_y.s0.x.x.rebased633"
  %11932 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %11933 = getelementptr inbounds i16, i16* %11932, i64 -31
  %11934 = bitcast i16* %11933 to <16 x i16>*
  %11935 = load <16 x i16>, <16 x i16>* %11934, align 2, !tbaa !396
  %11936 = getelementptr inbounds i16, i16* %11932, i64 -15
  %11937 = bitcast i16* %11936 to <16 x i16>*
  %11938 = load <16 x i16>, <16 x i16>* %11937, align 2, !tbaa !396
  %11939 = getelementptr inbounds i16, i16* %11932, i64 -32
  %11940 = bitcast i16* %11939 to <16 x i16>*
  %11941 = load <16 x i16>, <16 x i16>* %11940, align 2, !tbaa !396
  %11942 = getelementptr inbounds i16, i16* %11932, i64 -16
  %11943 = bitcast i16* %11942 to <16 x i16>*
  %11944 = load <16 x i16>, <16 x i16>* %11943, align 2, !tbaa !396
  %11945 = getelementptr inbounds i16, i16* %11932, i64 -30
  %11946 = bitcast i16* %11945 to <16 x i16>*
  %11947 = load <16 x i16>, <16 x i16>* %11946, align 2, !tbaa !396
  %11948 = getelementptr inbounds i16, i16* %11932, i64 -14
  %11949 = bitcast i16* %11948 to <16 x i16>*
  %11950 = load <16 x i16>, <16 x i16>* %11949, align 2, !tbaa !396
  %11951 = getelementptr inbounds i16, i16* %11932, i64 -28
  %11952 = bitcast i16* %11951 to <16 x i16>*
  %11953 = load <16 x i16>, <16 x i16>* %11952, align 2, !tbaa !396
  %11954 = getelementptr inbounds i16, i16* %11932, i64 -12
  %11955 = bitcast i16* %11954 to <16 x i16>*
  %11956 = load <16 x i16>, <16 x i16>* %11955, align 2, !tbaa !396
  %11957 = getelementptr inbounds i16, i16* %11932, i64 -29
  %11958 = bitcast i16* %11957 to <16 x i16>*
  %11959 = load <16 x i16>, <16 x i16>* %11958, align 2, !tbaa !396
  %11960 = getelementptr inbounds i16, i16* %11932, i64 -13
  %11961 = bitcast i16* %11960 to <16 x i16>*
  %11962 = load <16 x i16>, <16 x i16>* %11961, align 2, !tbaa !396
  %11963 = add <16 x i16> %11941, %11935
  %11964 = add <16 x i16> %11963, %11947
  %11965 = add <16 x i16> %11964, %11953
  %11966 = add <16 x i16> %11965, %11959
  %11967 = add <16 x i16> %11944, %11938
  %11968 = add <16 x i16> %11967, %11950
  %11969 = add <16 x i16> %11968, %11956
  %11970 = add <16 x i16> %11969, %11962
  %11971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11966, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11970, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11973 = shufflevector <16 x i16> %11971, <16 x i16> %11972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11974 = lshr <32 x i16> %11973, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11975 = shufflevector <32 x i16> %11974, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11976 = zext i32 %.pre-phi3498 to i64
  %11977 = mul nsw i64 %97, %11976
  %11978 = add nsw i64 %99, %11977
  %11979 = getelementptr inbounds i16, i16* %blur_x, i64 %11978
  %11980 = getelementptr inbounds i16, i16* %11979, i64 -32
  %11981 = bitcast i16* %11980 to <16 x i16>*
  store <16 x i16> %11975, <16 x i16>* %11981, align 2, !tbaa !399
  %11982 = shufflevector <32 x i16> %11974, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11983 = getelementptr inbounds i16, i16* %11979, i64 -16
  %11984 = bitcast i16* %11983 to <16 x i16>*
  store <16 x i16> %11982, <16 x i16>* %11984, align 2, !tbaa !399
  %11985 = zext i32 %.pre-phi3484 to i64
  %11986 = mul nsw i64 %11985, %112
  %11987 = add nsw i64 %11986, %94
  %11988 = getelementptr inbounds i16, i16* %blur_x, i64 %11987
  %11989 = getelementptr inbounds i16, i16* %11988, i64 -32
  %11990 = bitcast i16* %11989 to <16 x i16>*
  %11991 = load <16 x i16>, <16 x i16>* %11990, align 2, !tbaa !399
  %11992 = getelementptr inbounds i16, i16* %11988, i64 -16
  %11993 = bitcast i16* %11992 to <16 x i16>*
  %11994 = load <16 x i16>, <16 x i16>* %11993, align 2, !tbaa !399
  %11995 = zext i32 %.pre-phi3480 to i64
  %11996 = mul nsw i64 %11995, %112
  %11997 = add nsw i64 %11996, %94
  %11998 = getelementptr inbounds i16, i16* %blur_x, i64 %11997
  %11999 = getelementptr inbounds i16, i16* %11998, i64 -32
  %12000 = bitcast i16* %11999 to <16 x i16>*
  %12001 = load <16 x i16>, <16 x i16>* %12000, align 2, !tbaa !399
  %12002 = getelementptr inbounds i16, i16* %11998, i64 -16
  %12003 = bitcast i16* %12002 to <16 x i16>*
  %12004 = load <16 x i16>, <16 x i16>* %12003, align 2, !tbaa !399
  %12005 = zext i32 %.pre-phi3488 to i64
  %12006 = mul nsw i64 %12005, %112
  %12007 = add nsw i64 %12006, %94
  %12008 = getelementptr inbounds i16, i16* %blur_x, i64 %12007
  %12009 = getelementptr inbounds i16, i16* %12008, i64 -32
  %12010 = bitcast i16* %12009 to <16 x i16>*
  %12011 = load <16 x i16>, <16 x i16>* %12010, align 2, !tbaa !399
  %12012 = getelementptr inbounds i16, i16* %12008, i64 -16
  %12013 = bitcast i16* %12012 to <16 x i16>*
  %12014 = load <16 x i16>, <16 x i16>* %12013, align 2, !tbaa !399
  %12015 = mul nsw i64 %11976, %112
  %12016 = add nsw i64 %12015, %94
  %12017 = getelementptr inbounds i16, i16* %blur_x, i64 %12016
  %12018 = getelementptr inbounds i16, i16* %12017, i64 -32
  %12019 = bitcast i16* %12018 to <16 x i16>*
  %12020 = load <16 x i16>, <16 x i16>* %12019, align 2, !tbaa !399
  %12021 = getelementptr inbounds i16, i16* %12017, i64 -16
  %12022 = bitcast i16* %12021 to <16 x i16>*
  %12023 = load <16 x i16>, <16 x i16>* %12022, align 2, !tbaa !399
  %12024 = zext i32 %.pre-phi3492 to i64
  %12025 = mul nsw i64 %12024, %112
  %12026 = add nsw i64 %12025, %94
  %12027 = getelementptr inbounds i16, i16* %blur_x, i64 %12026
  %12028 = getelementptr inbounds i16, i16* %12027, i64 -32
  %12029 = bitcast i16* %12028 to <16 x i16>*
  %12030 = load <16 x i16>, <16 x i16>* %12029, align 2, !tbaa !399
  %12031 = getelementptr inbounds i16, i16* %12027, i64 -16
  %12032 = bitcast i16* %12031 to <16 x i16>*
  %12033 = load <16 x i16>, <16 x i16>* %12032, align 2, !tbaa !399
  %12034 = add <16 x i16> %12001, %11991
  %12035 = add <16 x i16> %12034, %12011
  %12036 = add <16 x i16> %12035, %12020
  %12037 = add <16 x i16> %12036, %12030
  %12038 = add <16 x i16> %12004, %11994
  %12039 = add <16 x i16> %12038, %12014
  %12040 = add <16 x i16> %12039, %12023
  %12041 = add <16 x i16> %12040, %12033
  %12042 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12037, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12043 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12041, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12044 = shufflevector <16 x i16> %12042, <16 x i16> %12043, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12045 = lshr <32 x i16> %12044, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12046 = shufflevector <32 x i16> %12045, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12047 = sext i32 %a26 to i64
  %12048 = add nsw i64 %12047, 25
  %12049 = mul nsw i64 %12048, %113
  %12050 = add nsw i64 %115, %12049
  %12051 = getelementptr inbounds i16, i16* %66, i64 %12050
  %12052 = getelementptr inbounds i16, i16* %12051, i64 -32
  %12053 = bitcast i16* %12052 to <16 x i16>*
  store <16 x i16> %12046, <16 x i16>* %12053, align 2, !tbaa !401
  %12054 = shufflevector <32 x i16> %12045, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12055 = getelementptr inbounds i16, i16* %12051, i64 -16
  %12056 = bitcast i16* %12055 to <16 x i16>*
  store <16 x i16> %12054, <16 x i16>* %12056, align 2, !tbaa !401
  br label %after_bb641

"for blur_y.s0.x.x.rebased646":                   ; preds = %"for blur_y.s0.x.x.rebased646.preheader", %"consume blur_x653"
  %indvars.iv3334 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased646.preheader" ], [ %indvars.iv.next3335, %"consume blur_x653" ]
  %12057 = add nsw i64 %indvars.iv3334, %101
  %12058 = icmp slt i64 %12057, 1
  %12059 = trunc i64 %12057 to i32
  %12060 = shl nsw i32 %12059, 5
  %12061 = icmp sgt i32 %4, %12060
  %12062 = or i1 %12058, %12061
  br i1 %12062, label %"produce blur_x652", label %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge"

"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased646"
  %.pre3555 = shl nsw i64 %12057, 5
  br label %"consume blur_x653"

"end for blur_y.s0.x.x.rebased647":               ; preds = %"consume blur_x653", %after_bb641
  br i1 %102, label %"for blur_y.s0.x.x.rebased654.preheader", label %"end for blur_y.s0.x.x.rebased655", !prof !386

"for blur_y.s0.x.x.rebased654.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased647"
  %12063 = sext i32 %t1722 to i64
  %12064 = zext i32 %.pre-phi3484 to i64
  %12065 = mul nsw i64 %12064, %112
  %12066 = sub nsw i64 %12065, %96
  %12067 = zext i32 %.pre-phi3480 to i64
  %12068 = mul nsw i64 %12067, %112
  %12069 = sub nsw i64 %12068, %96
  %12070 = zext i32 %.pre-phi3488 to i64
  %12071 = mul nsw i64 %12070, %112
  %12072 = sub nsw i64 %12071, %96
  %12073 = zext i32 %.pre-phi3498 to i64
  %12074 = mul nsw i64 %12073, %112
  %12075 = sub nsw i64 %12074, %96
  %12076 = zext i32 %.pre-phi3492 to i64
  %12077 = mul nsw i64 %12076, %112
  %12078 = sub nsw i64 %12077, %96
  %12079 = sext i32 %a26 to i64
  %12080 = add nsw i64 %12079, 25
  %12081 = mul nsw i64 %12080, %113
  %12082 = add nsw i64 %12081, %116
  br label %"for blur_y.s0.x.x.rebased654"

"produce blur_x652":                              ; preds = %"for blur_y.s0.x.x.rebased646"
  %t1112 = add nsw i32 %12060, %t2105
  %12083 = sext i32 %t1112 to i64
  %12084 = getelementptr inbounds i16, i16* %read_input, i64 %12083
  %12085 = getelementptr inbounds i16, i16* %12084, i64 1
  %12086 = bitcast i16* %12085 to <16 x i16>*
  %12087 = load <16 x i16>, <16 x i16>* %12086, align 2, !tbaa !396
  %12088 = getelementptr inbounds i16, i16* %12084, i64 17
  %12089 = bitcast i16* %12088 to <16 x i16>*
  %12090 = load <16 x i16>, <16 x i16>* %12089, align 2, !tbaa !396
  %12091 = bitcast i16* %12084 to <16 x i16>*
  %12092 = load <16 x i16>, <16 x i16>* %12091, align 2, !tbaa !396
  %12093 = getelementptr inbounds i16, i16* %12084, i64 16
  %12094 = bitcast i16* %12093 to <16 x i16>*
  %12095 = load <16 x i16>, <16 x i16>* %12094, align 2, !tbaa !396
  %12096 = getelementptr inbounds i16, i16* %12084, i64 2
  %12097 = bitcast i16* %12096 to <16 x i16>*
  %12098 = load <16 x i16>, <16 x i16>* %12097, align 2, !tbaa !396
  %12099 = getelementptr inbounds i16, i16* %12084, i64 18
  %12100 = bitcast i16* %12099 to <16 x i16>*
  %12101 = load <16 x i16>, <16 x i16>* %12100, align 2, !tbaa !396
  %12102 = getelementptr inbounds i16, i16* %12084, i64 4
  %12103 = bitcast i16* %12102 to <16 x i16>*
  %12104 = load <16 x i16>, <16 x i16>* %12103, align 2, !tbaa !396
  %12105 = getelementptr inbounds i16, i16* %12084, i64 20
  %12106 = bitcast i16* %12105 to <16 x i16>*
  %12107 = load <16 x i16>, <16 x i16>* %12106, align 2, !tbaa !396
  %12108 = getelementptr inbounds i16, i16* %12084, i64 3
  %12109 = bitcast i16* %12108 to <16 x i16>*
  %12110 = load <16 x i16>, <16 x i16>* %12109, align 2, !tbaa !396
  %12111 = getelementptr inbounds i16, i16* %12084, i64 19
  %12112 = bitcast i16* %12111 to <16 x i16>*
  %12113 = load <16 x i16>, <16 x i16>* %12112, align 2, !tbaa !396
  %12114 = add <16 x i16> %12092, %12087
  %12115 = add <16 x i16> %12114, %12098
  %12116 = add <16 x i16> %12115, %12104
  %12117 = add <16 x i16> %12116, %12110
  %12118 = add <16 x i16> %12095, %12090
  %12119 = add <16 x i16> %12118, %12101
  %12120 = add <16 x i16> %12119, %12107
  %12121 = add <16 x i16> %12120, %12113
  %12122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12117, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12121, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12124 = shufflevector <16 x i16> %12122, <16 x i16> %12123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12125 = lshr <32 x i16> %12124, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12126 = shufflevector <32 x i16> %12125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12127 = shl nsw i64 %12057, 5
  %12128 = add nsw i64 %12127, %11912
  %12129 = getelementptr inbounds i16, i16* %blur_x, i64 %12128
  %12130 = bitcast i16* %12129 to <16 x i16>*
  store <16 x i16> %12126, <16 x i16>* %12130, align 2, !tbaa !399
  %12131 = shufflevector <32 x i16> %12125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12132 = getelementptr inbounds i16, i16* %12129, i64 16
  %12133 = bitcast i16* %12132 to <16 x i16>*
  store <16 x i16> %12131, <16 x i16>* %12133, align 2, !tbaa !399
  br label %"consume blur_x653"

"consume blur_x653":                              ; preds = %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge", %"produce blur_x652"
  %.pre-phi3556 = phi i64 [ %.pre3555, %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge" ], [ %12127, %"produce blur_x652" ]
  %12134 = add nsw i64 %11915, %.pre-phi3556
  %12135 = getelementptr inbounds i16, i16* %blur_x, i64 %12134
  %12136 = bitcast i16* %12135 to <16 x i16>*
  %12137 = load <16 x i16>, <16 x i16>* %12136, align 2, !tbaa !399
  %12138 = getelementptr inbounds i16, i16* %12135, i64 16
  %12139 = bitcast i16* %12138 to <16 x i16>*
  %12140 = load <16 x i16>, <16 x i16>* %12139, align 2, !tbaa !399
  %12141 = add nsw i64 %11918, %.pre-phi3556
  %12142 = getelementptr inbounds i16, i16* %blur_x, i64 %12141
  %12143 = bitcast i16* %12142 to <16 x i16>*
  %12144 = load <16 x i16>, <16 x i16>* %12143, align 2, !tbaa !399
  %12145 = getelementptr inbounds i16, i16* %12142, i64 16
  %12146 = bitcast i16* %12145 to <16 x i16>*
  %12147 = load <16 x i16>, <16 x i16>* %12146, align 2, !tbaa !399
  %12148 = add nsw i64 %11921, %.pre-phi3556
  %12149 = getelementptr inbounds i16, i16* %blur_x, i64 %12148
  %12150 = bitcast i16* %12149 to <16 x i16>*
  %12151 = load <16 x i16>, <16 x i16>* %12150, align 2, !tbaa !399
  %12152 = getelementptr inbounds i16, i16* %12149, i64 16
  %12153 = bitcast i16* %12152 to <16 x i16>*
  %12154 = load <16 x i16>, <16 x i16>* %12153, align 2, !tbaa !399
  %12155 = add nsw i64 %11924, %.pre-phi3556
  %12156 = getelementptr inbounds i16, i16* %blur_x, i64 %12155
  %12157 = bitcast i16* %12156 to <16 x i16>*
  %12158 = load <16 x i16>, <16 x i16>* %12157, align 2, !tbaa !399
  %12159 = getelementptr inbounds i16, i16* %12156, i64 16
  %12160 = bitcast i16* %12159 to <16 x i16>*
  %12161 = load <16 x i16>, <16 x i16>* %12160, align 2, !tbaa !399
  %12162 = add nsw i64 %11927, %.pre-phi3556
  %12163 = getelementptr inbounds i16, i16* %blur_x, i64 %12162
  %12164 = bitcast i16* %12163 to <16 x i16>*
  %12165 = load <16 x i16>, <16 x i16>* %12164, align 2, !tbaa !399
  %12166 = getelementptr inbounds i16, i16* %12163, i64 16
  %12167 = bitcast i16* %12166 to <16 x i16>*
  %12168 = load <16 x i16>, <16 x i16>* %12167, align 2, !tbaa !399
  %12169 = add <16 x i16> %12144, %12137
  %12170 = add <16 x i16> %12169, %12151
  %12171 = add <16 x i16> %12170, %12158
  %12172 = add <16 x i16> %12171, %12165
  %12173 = add <16 x i16> %12147, %12140
  %12174 = add <16 x i16> %12173, %12154
  %12175 = add <16 x i16> %12174, %12161
  %12176 = add <16 x i16> %12175, %12168
  %12177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12172, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12176, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12179 = shufflevector <16 x i16> %12177, <16 x i16> %12178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12180 = lshr <32 x i16> %12179, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12181 = shufflevector <32 x i16> %12180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12182 = add nsw i64 %11931, %.pre-phi3556
  %12183 = getelementptr inbounds i16, i16* %66, i64 %12182
  %12184 = bitcast i16* %12183 to <16 x i16>*
  store <16 x i16> %12181, <16 x i16>* %12184, align 2, !tbaa !401
  %12185 = shufflevector <32 x i16> %12180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12186 = getelementptr inbounds i16, i16* %12183, i64 16
  %12187 = bitcast i16* %12186 to <16 x i16>*
  store <16 x i16> %12185, <16 x i16>* %12187, align 2, !tbaa !401
  %indvars.iv.next3335 = add nuw nsw i64 %indvars.iv3334, 1
  %.not2707 = icmp eq i64 %indvars.iv.next3335, %184
  br i1 %.not2707, label %"end for blur_y.s0.x.x.rebased647", label %"for blur_y.s0.x.x.rebased646"

"for blur_y.s0.x.x.rebased654":                   ; preds = %"for blur_y.s0.x.x.rebased654.preheader", %"consume blur_x662"
  %blur_y.s0.x.x.rebased656 = phi i32 [ %12300, %"consume blur_x662" ], [ 0, %"for blur_y.s0.x.x.rebased654.preheader" ]
  %12188 = add nsw i32 %blur_y.s0.x.x.rebased656, %t1626
  %a280 = shl nsw i32 %12188, 5
  %12189 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %12189, i32 %a280, i32 %a14
  %12190 = icmp slt i32 %12188, 1
  %12191 = icmp sgt i32 %4, %a280
  %12192 = or i1 %12190, %12191
  br i1 %12192, label %"produce blur_x660", label %"consume blur_x662"

"end for blur_y.s0.x.x.rebased655":               ; preds = %"consume blur_x662", %"end for blur_y.s0.x.x.rebased647"
  br i1 %34, label %"produce blur_x666", label %after_bb663

"produce blur_x660":                              ; preds = %"for blur_y.s0.x.x.rebased654"
  %12193 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s661 = select i1 %12193, i32 %b286, i32 %4
  %t1117 = add nsw i32 %blur_x.s0.x.v1.base.s661, %t2105
  %12194 = sext i32 %t1117 to i64
  %12195 = getelementptr inbounds i16, i16* %read_input, i64 %12194
  %12196 = getelementptr inbounds i16, i16* %12195, i64 1
  %12197 = bitcast i16* %12196 to <16 x i16>*
  %12198 = load <16 x i16>, <16 x i16>* %12197, align 2, !tbaa !396
  %12199 = getelementptr inbounds i16, i16* %12195, i64 17
  %12200 = bitcast i16* %12199 to <16 x i16>*
  %12201 = load <16 x i16>, <16 x i16>* %12200, align 2, !tbaa !396
  %12202 = bitcast i16* %12195 to <16 x i16>*
  %12203 = load <16 x i16>, <16 x i16>* %12202, align 2, !tbaa !396
  %12204 = getelementptr inbounds i16, i16* %12195, i64 16
  %12205 = bitcast i16* %12204 to <16 x i16>*
  %12206 = load <16 x i16>, <16 x i16>* %12205, align 2, !tbaa !396
  %12207 = getelementptr inbounds i16, i16* %12195, i64 2
  %12208 = bitcast i16* %12207 to <16 x i16>*
  %12209 = load <16 x i16>, <16 x i16>* %12208, align 2, !tbaa !396
  %12210 = getelementptr inbounds i16, i16* %12195, i64 18
  %12211 = bitcast i16* %12210 to <16 x i16>*
  %12212 = load <16 x i16>, <16 x i16>* %12211, align 2, !tbaa !396
  %12213 = getelementptr inbounds i16, i16* %12195, i64 4
  %12214 = bitcast i16* %12213 to <16 x i16>*
  %12215 = load <16 x i16>, <16 x i16>* %12214, align 2, !tbaa !396
  %12216 = getelementptr inbounds i16, i16* %12195, i64 20
  %12217 = bitcast i16* %12216 to <16 x i16>*
  %12218 = load <16 x i16>, <16 x i16>* %12217, align 2, !tbaa !396
  %12219 = getelementptr inbounds i16, i16* %12195, i64 3
  %12220 = bitcast i16* %12219 to <16 x i16>*
  %12221 = load <16 x i16>, <16 x i16>* %12220, align 2, !tbaa !396
  %12222 = getelementptr inbounds i16, i16* %12195, i64 19
  %12223 = bitcast i16* %12222 to <16 x i16>*
  %12224 = load <16 x i16>, <16 x i16>* %12223, align 2, !tbaa !396
  %12225 = add <16 x i16> %12203, %12198
  %12226 = add <16 x i16> %12225, %12209
  %12227 = add <16 x i16> %12226, %12215
  %12228 = add <16 x i16> %12227, %12221
  %12229 = add <16 x i16> %12206, %12201
  %12230 = add <16 x i16> %12229, %12212
  %12231 = add <16 x i16> %12230, %12218
  %12232 = add <16 x i16> %12231, %12224
  %12233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12228, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12232, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12235 = shufflevector <16 x i16> %12233, <16 x i16> %12234, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12236 = lshr <32 x i16> %12235, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12237 = shufflevector <32 x i16> %12236, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12238 = sext i32 %blur_x.s0.x.v1.base.s661 to i64
  %12239 = add nsw i64 %12238, %12063
  %12240 = getelementptr inbounds i16, i16* %blur_x, i64 %12239
  %12241 = bitcast i16* %12240 to <16 x i16>*
  store <16 x i16> %12237, <16 x i16>* %12241, align 2, !tbaa !399
  %12242 = shufflevector <32 x i16> %12236, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12243 = getelementptr inbounds i16, i16* %12240, i64 16
  %12244 = bitcast i16* %12243 to <16 x i16>*
  store <16 x i16> %12242, <16 x i16>* %12244, align 2, !tbaa !399
  br label %"consume blur_x662"

"consume blur_x662":                              ; preds = %"for blur_y.s0.x.x.rebased654", %"produce blur_x660"
  %12245 = sext i32 %b286 to i64
  %12246 = add nsw i64 %12066, %12245
  %12247 = getelementptr inbounds i16, i16* %blur_x, i64 %12246
  %12248 = bitcast i16* %12247 to <16 x i16>*
  %12249 = load <16 x i16>, <16 x i16>* %12248, align 2, !tbaa !399
  %12250 = getelementptr inbounds i16, i16* %12247, i64 16
  %12251 = bitcast i16* %12250 to <16 x i16>*
  %12252 = load <16 x i16>, <16 x i16>* %12251, align 2, !tbaa !399
  %12253 = add nsw i64 %12069, %12245
  %12254 = getelementptr inbounds i16, i16* %blur_x, i64 %12253
  %12255 = bitcast i16* %12254 to <16 x i16>*
  %12256 = load <16 x i16>, <16 x i16>* %12255, align 2, !tbaa !399
  %12257 = getelementptr inbounds i16, i16* %12254, i64 16
  %12258 = bitcast i16* %12257 to <16 x i16>*
  %12259 = load <16 x i16>, <16 x i16>* %12258, align 2, !tbaa !399
  %12260 = add nsw i64 %12072, %12245
  %12261 = getelementptr inbounds i16, i16* %blur_x, i64 %12260
  %12262 = bitcast i16* %12261 to <16 x i16>*
  %12263 = load <16 x i16>, <16 x i16>* %12262, align 2, !tbaa !399
  %12264 = getelementptr inbounds i16, i16* %12261, i64 16
  %12265 = bitcast i16* %12264 to <16 x i16>*
  %12266 = load <16 x i16>, <16 x i16>* %12265, align 2, !tbaa !399
  %12267 = add nsw i64 %12075, %12245
  %12268 = getelementptr inbounds i16, i16* %blur_x, i64 %12267
  %12269 = bitcast i16* %12268 to <16 x i16>*
  %12270 = load <16 x i16>, <16 x i16>* %12269, align 2, !tbaa !399
  %12271 = getelementptr inbounds i16, i16* %12268, i64 16
  %12272 = bitcast i16* %12271 to <16 x i16>*
  %12273 = load <16 x i16>, <16 x i16>* %12272, align 2, !tbaa !399
  %12274 = add nsw i64 %12078, %12245
  %12275 = getelementptr inbounds i16, i16* %blur_x, i64 %12274
  %12276 = bitcast i16* %12275 to <16 x i16>*
  %12277 = load <16 x i16>, <16 x i16>* %12276, align 2, !tbaa !399
  %12278 = getelementptr inbounds i16, i16* %12275, i64 16
  %12279 = bitcast i16* %12278 to <16 x i16>*
  %12280 = load <16 x i16>, <16 x i16>* %12279, align 2, !tbaa !399
  %12281 = add <16 x i16> %12256, %12249
  %12282 = add <16 x i16> %12281, %12263
  %12283 = add <16 x i16> %12282, %12270
  %12284 = add <16 x i16> %12283, %12277
  %12285 = add <16 x i16> %12259, %12252
  %12286 = add <16 x i16> %12285, %12266
  %12287 = add <16 x i16> %12286, %12273
  %12288 = add <16 x i16> %12287, %12280
  %12289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12284, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12288, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12291 = shufflevector <16 x i16> %12289, <16 x i16> %12290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12292 = lshr <32 x i16> %12291, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12293 = shufflevector <32 x i16> %12292, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12294 = add nsw i64 %12082, %12245
  %12295 = getelementptr inbounds i16, i16* %66, i64 %12294
  %12296 = bitcast i16* %12295 to <16 x i16>*
  store <16 x i16> %12293, <16 x i16>* %12296, align 2, !tbaa !401
  %12297 = shufflevector <32 x i16> %12292, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12298 = getelementptr inbounds i16, i16* %12295, i64 16
  %12299 = bitcast i16* %12298 to <16 x i16>*
  store <16 x i16> %12297, <16 x i16>* %12299, align 2, !tbaa !401
  %12300 = add nuw nsw i32 %blur_y.s0.x.x.rebased656, 1
  %.not2706 = icmp eq i32 %12300, %t1683
  br i1 %.not2706, label %"end for blur_y.s0.x.x.rebased655", label %"for blur_y.s0.x.x.rebased654"

after_bb663:                                      ; preds = %"end for blur_y.s0.x.x.rebased655", %"produce blur_x666"
  br i1 %100, label %"for blur_y.s0.x.x.rebased668.preheader", label %"end for blur_y.s0.x.x.rebased669", !prof !386

"for blur_y.s0.x.x.rebased668.preheader":         ; preds = %after_bb663
  %12301 = sext i32 %t1738 to i64
  %12302 = zext i32 %.pre-phi3488 to i64
  %12303 = mul nsw i64 %12302, %112
  %12304 = sub nsw i64 %12303, %96
  %12305 = zext i32 %.pre-phi3484 to i64
  %12306 = mul nsw i64 %12305, %112
  %12307 = sub nsw i64 %12306, %96
  %12308 = zext i32 %.pre-phi3492 to i64
  %12309 = mul nsw i64 %12308, %112
  %12310 = sub nsw i64 %12309, %96
  %12311 = zext i32 %.pre-phi3504 to i64
  %12312 = mul nsw i64 %12311, %112
  %12313 = sub nsw i64 %12312, %96
  %12314 = zext i32 %.pre-phi3498 to i64
  %12315 = mul nsw i64 %12314, %112
  %12316 = sub nsw i64 %12315, %96
  %12317 = sext i32 %a26 to i64
  %12318 = add nsw i64 %12317, 26
  %12319 = mul nsw i64 %12318, %113
  %12320 = add nsw i64 %12319, %116
  br label %"for blur_y.s0.x.x.rebased668"

"produce blur_x666":                              ; preds = %"end for blur_y.s0.x.x.rebased655"
  %12321 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %12322 = getelementptr inbounds i16, i16* %12321, i64 -31
  %12323 = bitcast i16* %12322 to <16 x i16>*
  %12324 = load <16 x i16>, <16 x i16>* %12323, align 2, !tbaa !396
  %12325 = getelementptr inbounds i16, i16* %12321, i64 -15
  %12326 = bitcast i16* %12325 to <16 x i16>*
  %12327 = load <16 x i16>, <16 x i16>* %12326, align 2, !tbaa !396
  %12328 = getelementptr inbounds i16, i16* %12321, i64 -32
  %12329 = bitcast i16* %12328 to <16 x i16>*
  %12330 = load <16 x i16>, <16 x i16>* %12329, align 2, !tbaa !396
  %12331 = getelementptr inbounds i16, i16* %12321, i64 -16
  %12332 = bitcast i16* %12331 to <16 x i16>*
  %12333 = load <16 x i16>, <16 x i16>* %12332, align 2, !tbaa !396
  %12334 = getelementptr inbounds i16, i16* %12321, i64 -30
  %12335 = bitcast i16* %12334 to <16 x i16>*
  %12336 = load <16 x i16>, <16 x i16>* %12335, align 2, !tbaa !396
  %12337 = getelementptr inbounds i16, i16* %12321, i64 -14
  %12338 = bitcast i16* %12337 to <16 x i16>*
  %12339 = load <16 x i16>, <16 x i16>* %12338, align 2, !tbaa !396
  %12340 = getelementptr inbounds i16, i16* %12321, i64 -28
  %12341 = bitcast i16* %12340 to <16 x i16>*
  %12342 = load <16 x i16>, <16 x i16>* %12341, align 2, !tbaa !396
  %12343 = getelementptr inbounds i16, i16* %12321, i64 -12
  %12344 = bitcast i16* %12343 to <16 x i16>*
  %12345 = load <16 x i16>, <16 x i16>* %12344, align 2, !tbaa !396
  %12346 = getelementptr inbounds i16, i16* %12321, i64 -29
  %12347 = bitcast i16* %12346 to <16 x i16>*
  %12348 = load <16 x i16>, <16 x i16>* %12347, align 2, !tbaa !396
  %12349 = getelementptr inbounds i16, i16* %12321, i64 -13
  %12350 = bitcast i16* %12349 to <16 x i16>*
  %12351 = load <16 x i16>, <16 x i16>* %12350, align 2, !tbaa !396
  %12352 = add <16 x i16> %12330, %12324
  %12353 = add <16 x i16> %12352, %12336
  %12354 = add <16 x i16> %12353, %12342
  %12355 = add <16 x i16> %12354, %12348
  %12356 = add <16 x i16> %12333, %12327
  %12357 = add <16 x i16> %12356, %12339
  %12358 = add <16 x i16> %12357, %12345
  %12359 = add <16 x i16> %12358, %12351
  %12360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12355, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12359, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12362 = shufflevector <16 x i16> %12360, <16 x i16> %12361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12363 = lshr <32 x i16> %12362, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12364 = shufflevector <32 x i16> %12363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12365 = zext i32 %.pre-phi3504 to i64
  %12366 = mul nsw i64 %97, %12365
  %12367 = add nsw i64 %99, %12366
  %12368 = getelementptr inbounds i16, i16* %blur_x, i64 %12367
  %12369 = getelementptr inbounds i16, i16* %12368, i64 -32
  %12370 = bitcast i16* %12369 to <16 x i16>*
  store <16 x i16> %12364, <16 x i16>* %12370, align 2, !tbaa !399
  %12371 = shufflevector <32 x i16> %12363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12372 = getelementptr inbounds i16, i16* %12368, i64 -16
  %12373 = bitcast i16* %12372 to <16 x i16>*
  store <16 x i16> %12371, <16 x i16>* %12373, align 2, !tbaa !399
  %12374 = zext i32 %.pre-phi3488 to i64
  %12375 = mul nsw i64 %12374, %112
  %12376 = add nsw i64 %12375, %94
  %12377 = getelementptr inbounds i16, i16* %blur_x, i64 %12376
  %12378 = getelementptr inbounds i16, i16* %12377, i64 -32
  %12379 = bitcast i16* %12378 to <16 x i16>*
  %12380 = load <16 x i16>, <16 x i16>* %12379, align 2, !tbaa !399
  %12381 = getelementptr inbounds i16, i16* %12377, i64 -16
  %12382 = bitcast i16* %12381 to <16 x i16>*
  %12383 = load <16 x i16>, <16 x i16>* %12382, align 2, !tbaa !399
  %12384 = zext i32 %.pre-phi3484 to i64
  %12385 = mul nsw i64 %12384, %112
  %12386 = add nsw i64 %12385, %94
  %12387 = getelementptr inbounds i16, i16* %blur_x, i64 %12386
  %12388 = getelementptr inbounds i16, i16* %12387, i64 -32
  %12389 = bitcast i16* %12388 to <16 x i16>*
  %12390 = load <16 x i16>, <16 x i16>* %12389, align 2, !tbaa !399
  %12391 = getelementptr inbounds i16, i16* %12387, i64 -16
  %12392 = bitcast i16* %12391 to <16 x i16>*
  %12393 = load <16 x i16>, <16 x i16>* %12392, align 2, !tbaa !399
  %12394 = zext i32 %.pre-phi3492 to i64
  %12395 = mul nsw i64 %12394, %112
  %12396 = add nsw i64 %12395, %94
  %12397 = getelementptr inbounds i16, i16* %blur_x, i64 %12396
  %12398 = getelementptr inbounds i16, i16* %12397, i64 -32
  %12399 = bitcast i16* %12398 to <16 x i16>*
  %12400 = load <16 x i16>, <16 x i16>* %12399, align 2, !tbaa !399
  %12401 = getelementptr inbounds i16, i16* %12397, i64 -16
  %12402 = bitcast i16* %12401 to <16 x i16>*
  %12403 = load <16 x i16>, <16 x i16>* %12402, align 2, !tbaa !399
  %12404 = mul nsw i64 %12365, %112
  %12405 = add nsw i64 %12404, %94
  %12406 = getelementptr inbounds i16, i16* %blur_x, i64 %12405
  %12407 = getelementptr inbounds i16, i16* %12406, i64 -32
  %12408 = bitcast i16* %12407 to <16 x i16>*
  %12409 = load <16 x i16>, <16 x i16>* %12408, align 2, !tbaa !399
  %12410 = getelementptr inbounds i16, i16* %12406, i64 -16
  %12411 = bitcast i16* %12410 to <16 x i16>*
  %12412 = load <16 x i16>, <16 x i16>* %12411, align 2, !tbaa !399
  %12413 = zext i32 %.pre-phi3498 to i64
  %12414 = mul nsw i64 %12413, %112
  %12415 = add nsw i64 %12414, %94
  %12416 = getelementptr inbounds i16, i16* %blur_x, i64 %12415
  %12417 = getelementptr inbounds i16, i16* %12416, i64 -32
  %12418 = bitcast i16* %12417 to <16 x i16>*
  %12419 = load <16 x i16>, <16 x i16>* %12418, align 2, !tbaa !399
  %12420 = getelementptr inbounds i16, i16* %12416, i64 -16
  %12421 = bitcast i16* %12420 to <16 x i16>*
  %12422 = load <16 x i16>, <16 x i16>* %12421, align 2, !tbaa !399
  %12423 = add <16 x i16> %12390, %12380
  %12424 = add <16 x i16> %12423, %12400
  %12425 = add <16 x i16> %12424, %12409
  %12426 = add <16 x i16> %12425, %12419
  %12427 = add <16 x i16> %12393, %12383
  %12428 = add <16 x i16> %12427, %12403
  %12429 = add <16 x i16> %12428, %12412
  %12430 = add <16 x i16> %12429, %12422
  %12431 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12426, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12430, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12433 = shufflevector <16 x i16> %12431, <16 x i16> %12432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12434 = lshr <32 x i16> %12433, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12435 = shufflevector <32 x i16> %12434, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12436 = sext i32 %a26 to i64
  %12437 = add nsw i64 %12436, 26
  %12438 = mul nsw i64 %12437, %113
  %12439 = add nsw i64 %115, %12438
  %12440 = getelementptr inbounds i16, i16* %66, i64 %12439
  %12441 = getelementptr inbounds i16, i16* %12440, i64 -32
  %12442 = bitcast i16* %12441 to <16 x i16>*
  store <16 x i16> %12435, <16 x i16>* %12442, align 2, !tbaa !401
  %12443 = shufflevector <32 x i16> %12434, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12444 = getelementptr inbounds i16, i16* %12440, i64 -16
  %12445 = bitcast i16* %12444 to <16 x i16>*
  store <16 x i16> %12443, <16 x i16>* %12445, align 2, !tbaa !401
  br label %after_bb663

"for blur_y.s0.x.x.rebased668":                   ; preds = %"for blur_y.s0.x.x.rebased668.preheader", %"consume blur_x675"
  %indvars.iv3337 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased668.preheader" ], [ %indvars.iv.next3338, %"consume blur_x675" ]
  %12446 = add nsw i64 %indvars.iv3337, %101
  %12447 = icmp slt i64 %12446, 1
  %12448 = trunc i64 %12446 to i32
  %12449 = shl nsw i32 %12448, 5
  %12450 = icmp sgt i32 %4, %12449
  %12451 = or i1 %12447, %12450
  br i1 %12451, label %"produce blur_x674", label %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge"

"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased668"
  %.pre3557 = shl nsw i64 %12446, 5
  br label %"consume blur_x675"

"end for blur_y.s0.x.x.rebased669":               ; preds = %"consume blur_x675", %after_bb663
  br i1 %102, label %"for blur_y.s0.x.x.rebased676.preheader", label %"end for blur_y.s0.x.x.rebased677", !prof !386

"for blur_y.s0.x.x.rebased676.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased669"
  %12452 = sext i32 %t1738 to i64
  %12453 = zext i32 %.pre-phi3488 to i64
  %12454 = mul nsw i64 %12453, %112
  %12455 = sub nsw i64 %12454, %96
  %12456 = zext i32 %.pre-phi3484 to i64
  %12457 = mul nsw i64 %12456, %112
  %12458 = sub nsw i64 %12457, %96
  %12459 = zext i32 %.pre-phi3492 to i64
  %12460 = mul nsw i64 %12459, %112
  %12461 = sub nsw i64 %12460, %96
  %12462 = zext i32 %.pre-phi3504 to i64
  %12463 = mul nsw i64 %12462, %112
  %12464 = sub nsw i64 %12463, %96
  %12465 = zext i32 %.pre-phi3498 to i64
  %12466 = mul nsw i64 %12465, %112
  %12467 = sub nsw i64 %12466, %96
  %12468 = sext i32 %a26 to i64
  %12469 = add nsw i64 %12468, 26
  %12470 = mul nsw i64 %12469, %113
  %12471 = add nsw i64 %12470, %116
  br label %"for blur_y.s0.x.x.rebased676"

"produce blur_x674":                              ; preds = %"for blur_y.s0.x.x.rebased668"
  %t1128 = add nsw i32 %12449, %t2121
  %12472 = sext i32 %t1128 to i64
  %12473 = getelementptr inbounds i16, i16* %read_input, i64 %12472
  %12474 = getelementptr inbounds i16, i16* %12473, i64 1
  %12475 = bitcast i16* %12474 to <16 x i16>*
  %12476 = load <16 x i16>, <16 x i16>* %12475, align 2, !tbaa !396
  %12477 = getelementptr inbounds i16, i16* %12473, i64 17
  %12478 = bitcast i16* %12477 to <16 x i16>*
  %12479 = load <16 x i16>, <16 x i16>* %12478, align 2, !tbaa !396
  %12480 = bitcast i16* %12473 to <16 x i16>*
  %12481 = load <16 x i16>, <16 x i16>* %12480, align 2, !tbaa !396
  %12482 = getelementptr inbounds i16, i16* %12473, i64 16
  %12483 = bitcast i16* %12482 to <16 x i16>*
  %12484 = load <16 x i16>, <16 x i16>* %12483, align 2, !tbaa !396
  %12485 = getelementptr inbounds i16, i16* %12473, i64 2
  %12486 = bitcast i16* %12485 to <16 x i16>*
  %12487 = load <16 x i16>, <16 x i16>* %12486, align 2, !tbaa !396
  %12488 = getelementptr inbounds i16, i16* %12473, i64 18
  %12489 = bitcast i16* %12488 to <16 x i16>*
  %12490 = load <16 x i16>, <16 x i16>* %12489, align 2, !tbaa !396
  %12491 = getelementptr inbounds i16, i16* %12473, i64 4
  %12492 = bitcast i16* %12491 to <16 x i16>*
  %12493 = load <16 x i16>, <16 x i16>* %12492, align 2, !tbaa !396
  %12494 = getelementptr inbounds i16, i16* %12473, i64 20
  %12495 = bitcast i16* %12494 to <16 x i16>*
  %12496 = load <16 x i16>, <16 x i16>* %12495, align 2, !tbaa !396
  %12497 = getelementptr inbounds i16, i16* %12473, i64 3
  %12498 = bitcast i16* %12497 to <16 x i16>*
  %12499 = load <16 x i16>, <16 x i16>* %12498, align 2, !tbaa !396
  %12500 = getelementptr inbounds i16, i16* %12473, i64 19
  %12501 = bitcast i16* %12500 to <16 x i16>*
  %12502 = load <16 x i16>, <16 x i16>* %12501, align 2, !tbaa !396
  %12503 = add <16 x i16> %12481, %12476
  %12504 = add <16 x i16> %12503, %12487
  %12505 = add <16 x i16> %12504, %12493
  %12506 = add <16 x i16> %12505, %12499
  %12507 = add <16 x i16> %12484, %12479
  %12508 = add <16 x i16> %12507, %12490
  %12509 = add <16 x i16> %12508, %12496
  %12510 = add <16 x i16> %12509, %12502
  %12511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12506, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12510, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12513 = shufflevector <16 x i16> %12511, <16 x i16> %12512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12514 = lshr <32 x i16> %12513, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12515 = shufflevector <32 x i16> %12514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12516 = shl nsw i64 %12446, 5
  %12517 = add nsw i64 %12516, %12301
  %12518 = getelementptr inbounds i16, i16* %blur_x, i64 %12517
  %12519 = bitcast i16* %12518 to <16 x i16>*
  store <16 x i16> %12515, <16 x i16>* %12519, align 2, !tbaa !399
  %12520 = shufflevector <32 x i16> %12514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12521 = getelementptr inbounds i16, i16* %12518, i64 16
  %12522 = bitcast i16* %12521 to <16 x i16>*
  store <16 x i16> %12520, <16 x i16>* %12522, align 2, !tbaa !399
  br label %"consume blur_x675"

"consume blur_x675":                              ; preds = %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge", %"produce blur_x674"
  %.pre-phi3558 = phi i64 [ %.pre3557, %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge" ], [ %12516, %"produce blur_x674" ]
  %12523 = add nsw i64 %12304, %.pre-phi3558
  %12524 = getelementptr inbounds i16, i16* %blur_x, i64 %12523
  %12525 = bitcast i16* %12524 to <16 x i16>*
  %12526 = load <16 x i16>, <16 x i16>* %12525, align 2, !tbaa !399
  %12527 = getelementptr inbounds i16, i16* %12524, i64 16
  %12528 = bitcast i16* %12527 to <16 x i16>*
  %12529 = load <16 x i16>, <16 x i16>* %12528, align 2, !tbaa !399
  %12530 = add nsw i64 %12307, %.pre-phi3558
  %12531 = getelementptr inbounds i16, i16* %blur_x, i64 %12530
  %12532 = bitcast i16* %12531 to <16 x i16>*
  %12533 = load <16 x i16>, <16 x i16>* %12532, align 2, !tbaa !399
  %12534 = getelementptr inbounds i16, i16* %12531, i64 16
  %12535 = bitcast i16* %12534 to <16 x i16>*
  %12536 = load <16 x i16>, <16 x i16>* %12535, align 2, !tbaa !399
  %12537 = add nsw i64 %12310, %.pre-phi3558
  %12538 = getelementptr inbounds i16, i16* %blur_x, i64 %12537
  %12539 = bitcast i16* %12538 to <16 x i16>*
  %12540 = load <16 x i16>, <16 x i16>* %12539, align 2, !tbaa !399
  %12541 = getelementptr inbounds i16, i16* %12538, i64 16
  %12542 = bitcast i16* %12541 to <16 x i16>*
  %12543 = load <16 x i16>, <16 x i16>* %12542, align 2, !tbaa !399
  %12544 = add nsw i64 %12313, %.pre-phi3558
  %12545 = getelementptr inbounds i16, i16* %blur_x, i64 %12544
  %12546 = bitcast i16* %12545 to <16 x i16>*
  %12547 = load <16 x i16>, <16 x i16>* %12546, align 2, !tbaa !399
  %12548 = getelementptr inbounds i16, i16* %12545, i64 16
  %12549 = bitcast i16* %12548 to <16 x i16>*
  %12550 = load <16 x i16>, <16 x i16>* %12549, align 2, !tbaa !399
  %12551 = add nsw i64 %12316, %.pre-phi3558
  %12552 = getelementptr inbounds i16, i16* %blur_x, i64 %12551
  %12553 = bitcast i16* %12552 to <16 x i16>*
  %12554 = load <16 x i16>, <16 x i16>* %12553, align 2, !tbaa !399
  %12555 = getelementptr inbounds i16, i16* %12552, i64 16
  %12556 = bitcast i16* %12555 to <16 x i16>*
  %12557 = load <16 x i16>, <16 x i16>* %12556, align 2, !tbaa !399
  %12558 = add <16 x i16> %12533, %12526
  %12559 = add <16 x i16> %12558, %12540
  %12560 = add <16 x i16> %12559, %12547
  %12561 = add <16 x i16> %12560, %12554
  %12562 = add <16 x i16> %12536, %12529
  %12563 = add <16 x i16> %12562, %12543
  %12564 = add <16 x i16> %12563, %12550
  %12565 = add <16 x i16> %12564, %12557
  %12566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12561, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12565, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12568 = shufflevector <16 x i16> %12566, <16 x i16> %12567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12569 = lshr <32 x i16> %12568, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12570 = shufflevector <32 x i16> %12569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12571 = add nsw i64 %12320, %.pre-phi3558
  %12572 = getelementptr inbounds i16, i16* %66, i64 %12571
  %12573 = bitcast i16* %12572 to <16 x i16>*
  store <16 x i16> %12570, <16 x i16>* %12573, align 2, !tbaa !401
  %12574 = shufflevector <32 x i16> %12569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12575 = getelementptr inbounds i16, i16* %12572, i64 16
  %12576 = bitcast i16* %12575 to <16 x i16>*
  store <16 x i16> %12574, <16 x i16>* %12576, align 2, !tbaa !401
  %indvars.iv.next3338 = add nuw nsw i64 %indvars.iv3337, 1
  %.not2705 = icmp eq i64 %indvars.iv.next3338, %184
  br i1 %.not2705, label %"end for blur_y.s0.x.x.rebased669", label %"for blur_y.s0.x.x.rebased668"

"for blur_y.s0.x.x.rebased676":                   ; preds = %"for blur_y.s0.x.x.rebased676.preheader", %"consume blur_x684"
  %blur_y.s0.x.x.rebased678 = phi i32 [ %12689, %"consume blur_x684" ], [ 0, %"for blur_y.s0.x.x.rebased676.preheader" ]
  %12577 = add nsw i32 %blur_y.s0.x.x.rebased678, %t1626
  %a287 = shl nsw i32 %12577, 5
  %12578 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %12578, i32 %a287, i32 %a14
  %12579 = icmp slt i32 %12577, 1
  %12580 = icmp sgt i32 %4, %a287
  %12581 = or i1 %12579, %12580
  br i1 %12581, label %"produce blur_x682", label %"consume blur_x684"

"end for blur_y.s0.x.x.rebased677":               ; preds = %"consume blur_x684", %"end for blur_y.s0.x.x.rebased669"
  br i1 %34, label %"produce blur_x688", label %after_bb685

"produce blur_x682":                              ; preds = %"for blur_y.s0.x.x.rebased676"
  %12582 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s683 = select i1 %12582, i32 %b293, i32 %4
  %t1133 = add nsw i32 %blur_x.s0.x.v1.base.s683, %t2121
  %12583 = sext i32 %t1133 to i64
  %12584 = getelementptr inbounds i16, i16* %read_input, i64 %12583
  %12585 = getelementptr inbounds i16, i16* %12584, i64 1
  %12586 = bitcast i16* %12585 to <16 x i16>*
  %12587 = load <16 x i16>, <16 x i16>* %12586, align 2, !tbaa !396
  %12588 = getelementptr inbounds i16, i16* %12584, i64 17
  %12589 = bitcast i16* %12588 to <16 x i16>*
  %12590 = load <16 x i16>, <16 x i16>* %12589, align 2, !tbaa !396
  %12591 = bitcast i16* %12584 to <16 x i16>*
  %12592 = load <16 x i16>, <16 x i16>* %12591, align 2, !tbaa !396
  %12593 = getelementptr inbounds i16, i16* %12584, i64 16
  %12594 = bitcast i16* %12593 to <16 x i16>*
  %12595 = load <16 x i16>, <16 x i16>* %12594, align 2, !tbaa !396
  %12596 = getelementptr inbounds i16, i16* %12584, i64 2
  %12597 = bitcast i16* %12596 to <16 x i16>*
  %12598 = load <16 x i16>, <16 x i16>* %12597, align 2, !tbaa !396
  %12599 = getelementptr inbounds i16, i16* %12584, i64 18
  %12600 = bitcast i16* %12599 to <16 x i16>*
  %12601 = load <16 x i16>, <16 x i16>* %12600, align 2, !tbaa !396
  %12602 = getelementptr inbounds i16, i16* %12584, i64 4
  %12603 = bitcast i16* %12602 to <16 x i16>*
  %12604 = load <16 x i16>, <16 x i16>* %12603, align 2, !tbaa !396
  %12605 = getelementptr inbounds i16, i16* %12584, i64 20
  %12606 = bitcast i16* %12605 to <16 x i16>*
  %12607 = load <16 x i16>, <16 x i16>* %12606, align 2, !tbaa !396
  %12608 = getelementptr inbounds i16, i16* %12584, i64 3
  %12609 = bitcast i16* %12608 to <16 x i16>*
  %12610 = load <16 x i16>, <16 x i16>* %12609, align 2, !tbaa !396
  %12611 = getelementptr inbounds i16, i16* %12584, i64 19
  %12612 = bitcast i16* %12611 to <16 x i16>*
  %12613 = load <16 x i16>, <16 x i16>* %12612, align 2, !tbaa !396
  %12614 = add <16 x i16> %12592, %12587
  %12615 = add <16 x i16> %12614, %12598
  %12616 = add <16 x i16> %12615, %12604
  %12617 = add <16 x i16> %12616, %12610
  %12618 = add <16 x i16> %12595, %12590
  %12619 = add <16 x i16> %12618, %12601
  %12620 = add <16 x i16> %12619, %12607
  %12621 = add <16 x i16> %12620, %12613
  %12622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12617, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12621, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12624 = shufflevector <16 x i16> %12622, <16 x i16> %12623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12625 = lshr <32 x i16> %12624, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12626 = shufflevector <32 x i16> %12625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12627 = sext i32 %blur_x.s0.x.v1.base.s683 to i64
  %12628 = add nsw i64 %12627, %12452
  %12629 = getelementptr inbounds i16, i16* %blur_x, i64 %12628
  %12630 = bitcast i16* %12629 to <16 x i16>*
  store <16 x i16> %12626, <16 x i16>* %12630, align 2, !tbaa !399
  %12631 = shufflevector <32 x i16> %12625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12632 = getelementptr inbounds i16, i16* %12629, i64 16
  %12633 = bitcast i16* %12632 to <16 x i16>*
  store <16 x i16> %12631, <16 x i16>* %12633, align 2, !tbaa !399
  br label %"consume blur_x684"

"consume blur_x684":                              ; preds = %"for blur_y.s0.x.x.rebased676", %"produce blur_x682"
  %12634 = sext i32 %b293 to i64
  %12635 = add nsw i64 %12455, %12634
  %12636 = getelementptr inbounds i16, i16* %blur_x, i64 %12635
  %12637 = bitcast i16* %12636 to <16 x i16>*
  %12638 = load <16 x i16>, <16 x i16>* %12637, align 2, !tbaa !399
  %12639 = getelementptr inbounds i16, i16* %12636, i64 16
  %12640 = bitcast i16* %12639 to <16 x i16>*
  %12641 = load <16 x i16>, <16 x i16>* %12640, align 2, !tbaa !399
  %12642 = add nsw i64 %12458, %12634
  %12643 = getelementptr inbounds i16, i16* %blur_x, i64 %12642
  %12644 = bitcast i16* %12643 to <16 x i16>*
  %12645 = load <16 x i16>, <16 x i16>* %12644, align 2, !tbaa !399
  %12646 = getelementptr inbounds i16, i16* %12643, i64 16
  %12647 = bitcast i16* %12646 to <16 x i16>*
  %12648 = load <16 x i16>, <16 x i16>* %12647, align 2, !tbaa !399
  %12649 = add nsw i64 %12461, %12634
  %12650 = getelementptr inbounds i16, i16* %blur_x, i64 %12649
  %12651 = bitcast i16* %12650 to <16 x i16>*
  %12652 = load <16 x i16>, <16 x i16>* %12651, align 2, !tbaa !399
  %12653 = getelementptr inbounds i16, i16* %12650, i64 16
  %12654 = bitcast i16* %12653 to <16 x i16>*
  %12655 = load <16 x i16>, <16 x i16>* %12654, align 2, !tbaa !399
  %12656 = add nsw i64 %12464, %12634
  %12657 = getelementptr inbounds i16, i16* %blur_x, i64 %12656
  %12658 = bitcast i16* %12657 to <16 x i16>*
  %12659 = load <16 x i16>, <16 x i16>* %12658, align 2, !tbaa !399
  %12660 = getelementptr inbounds i16, i16* %12657, i64 16
  %12661 = bitcast i16* %12660 to <16 x i16>*
  %12662 = load <16 x i16>, <16 x i16>* %12661, align 2, !tbaa !399
  %12663 = add nsw i64 %12467, %12634
  %12664 = getelementptr inbounds i16, i16* %blur_x, i64 %12663
  %12665 = bitcast i16* %12664 to <16 x i16>*
  %12666 = load <16 x i16>, <16 x i16>* %12665, align 2, !tbaa !399
  %12667 = getelementptr inbounds i16, i16* %12664, i64 16
  %12668 = bitcast i16* %12667 to <16 x i16>*
  %12669 = load <16 x i16>, <16 x i16>* %12668, align 2, !tbaa !399
  %12670 = add <16 x i16> %12645, %12638
  %12671 = add <16 x i16> %12670, %12652
  %12672 = add <16 x i16> %12671, %12659
  %12673 = add <16 x i16> %12672, %12666
  %12674 = add <16 x i16> %12648, %12641
  %12675 = add <16 x i16> %12674, %12655
  %12676 = add <16 x i16> %12675, %12662
  %12677 = add <16 x i16> %12676, %12669
  %12678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12673, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12677, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12680 = shufflevector <16 x i16> %12678, <16 x i16> %12679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12681 = lshr <32 x i16> %12680, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12682 = shufflevector <32 x i16> %12681, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12683 = add nsw i64 %12471, %12634
  %12684 = getelementptr inbounds i16, i16* %66, i64 %12683
  %12685 = bitcast i16* %12684 to <16 x i16>*
  store <16 x i16> %12682, <16 x i16>* %12685, align 2, !tbaa !401
  %12686 = shufflevector <32 x i16> %12681, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12687 = getelementptr inbounds i16, i16* %12684, i64 16
  %12688 = bitcast i16* %12687 to <16 x i16>*
  store <16 x i16> %12686, <16 x i16>* %12688, align 2, !tbaa !401
  %12689 = add nuw nsw i32 %blur_y.s0.x.x.rebased678, 1
  %.not2704 = icmp eq i32 %12689, %t1683
  br i1 %.not2704, label %"end for blur_y.s0.x.x.rebased677", label %"for blur_y.s0.x.x.rebased676"

after_bb685:                                      ; preds = %"end for blur_y.s0.x.x.rebased677", %"produce blur_x688"
  br i1 %100, label %"for blur_y.s0.x.x.rebased690.preheader", label %"end for blur_y.s0.x.x.rebased691", !prof !386

"for blur_y.s0.x.x.rebased690.preheader":         ; preds = %after_bb685
  %12690 = sext i32 %t1754 to i64
  %12691 = zext i32 %.pre-phi3492 to i64
  %12692 = mul nsw i64 %12691, %112
  %12693 = sub nsw i64 %12692, %96
  %12694 = zext i32 %.pre-phi3488 to i64
  %12695 = mul nsw i64 %12694, %112
  %12696 = sub nsw i64 %12695, %96
  %12697 = zext i32 %.pre-phi3498 to i64
  %12698 = mul nsw i64 %12697, %112
  %12699 = sub nsw i64 %12698, %96
  %12700 = zext i32 %.pre-phi3510 to i64
  %12701 = mul nsw i64 %12700, %112
  %12702 = sub nsw i64 %12701, %96
  %12703 = zext i32 %.pre-phi3504 to i64
  %12704 = mul nsw i64 %12703, %112
  %12705 = sub nsw i64 %12704, %96
  %12706 = sext i32 %a26 to i64
  %12707 = add nsw i64 %12706, 27
  %12708 = mul nsw i64 %12707, %113
  %12709 = add nsw i64 %12708, %116
  br label %"for blur_y.s0.x.x.rebased690"

"produce blur_x688":                              ; preds = %"end for blur_y.s0.x.x.rebased677"
  %12710 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %12711 = getelementptr inbounds i16, i16* %12710, i64 -31
  %12712 = bitcast i16* %12711 to <16 x i16>*
  %12713 = load <16 x i16>, <16 x i16>* %12712, align 2, !tbaa !396
  %12714 = getelementptr inbounds i16, i16* %12710, i64 -15
  %12715 = bitcast i16* %12714 to <16 x i16>*
  %12716 = load <16 x i16>, <16 x i16>* %12715, align 2, !tbaa !396
  %12717 = getelementptr inbounds i16, i16* %12710, i64 -32
  %12718 = bitcast i16* %12717 to <16 x i16>*
  %12719 = load <16 x i16>, <16 x i16>* %12718, align 2, !tbaa !396
  %12720 = getelementptr inbounds i16, i16* %12710, i64 -16
  %12721 = bitcast i16* %12720 to <16 x i16>*
  %12722 = load <16 x i16>, <16 x i16>* %12721, align 2, !tbaa !396
  %12723 = getelementptr inbounds i16, i16* %12710, i64 -30
  %12724 = bitcast i16* %12723 to <16 x i16>*
  %12725 = load <16 x i16>, <16 x i16>* %12724, align 2, !tbaa !396
  %12726 = getelementptr inbounds i16, i16* %12710, i64 -14
  %12727 = bitcast i16* %12726 to <16 x i16>*
  %12728 = load <16 x i16>, <16 x i16>* %12727, align 2, !tbaa !396
  %12729 = getelementptr inbounds i16, i16* %12710, i64 -28
  %12730 = bitcast i16* %12729 to <16 x i16>*
  %12731 = load <16 x i16>, <16 x i16>* %12730, align 2, !tbaa !396
  %12732 = getelementptr inbounds i16, i16* %12710, i64 -12
  %12733 = bitcast i16* %12732 to <16 x i16>*
  %12734 = load <16 x i16>, <16 x i16>* %12733, align 2, !tbaa !396
  %12735 = getelementptr inbounds i16, i16* %12710, i64 -29
  %12736 = bitcast i16* %12735 to <16 x i16>*
  %12737 = load <16 x i16>, <16 x i16>* %12736, align 2, !tbaa !396
  %12738 = getelementptr inbounds i16, i16* %12710, i64 -13
  %12739 = bitcast i16* %12738 to <16 x i16>*
  %12740 = load <16 x i16>, <16 x i16>* %12739, align 2, !tbaa !396
  %12741 = add <16 x i16> %12719, %12713
  %12742 = add <16 x i16> %12741, %12725
  %12743 = add <16 x i16> %12742, %12731
  %12744 = add <16 x i16> %12743, %12737
  %12745 = add <16 x i16> %12722, %12716
  %12746 = add <16 x i16> %12745, %12728
  %12747 = add <16 x i16> %12746, %12734
  %12748 = add <16 x i16> %12747, %12740
  %12749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12744, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12748, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12751 = shufflevector <16 x i16> %12749, <16 x i16> %12750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12752 = lshr <32 x i16> %12751, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12753 = shufflevector <32 x i16> %12752, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12754 = zext i32 %.pre-phi3510 to i64
  %12755 = mul nsw i64 %97, %12754
  %12756 = add nsw i64 %99, %12755
  %12757 = getelementptr inbounds i16, i16* %blur_x, i64 %12756
  %12758 = getelementptr inbounds i16, i16* %12757, i64 -32
  %12759 = bitcast i16* %12758 to <16 x i16>*
  store <16 x i16> %12753, <16 x i16>* %12759, align 2, !tbaa !399
  %12760 = shufflevector <32 x i16> %12752, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12761 = getelementptr inbounds i16, i16* %12757, i64 -16
  %12762 = bitcast i16* %12761 to <16 x i16>*
  store <16 x i16> %12760, <16 x i16>* %12762, align 2, !tbaa !399
  %12763 = zext i32 %.pre-phi3492 to i64
  %12764 = mul nsw i64 %12763, %112
  %12765 = add nsw i64 %12764, %94
  %12766 = getelementptr inbounds i16, i16* %blur_x, i64 %12765
  %12767 = getelementptr inbounds i16, i16* %12766, i64 -32
  %12768 = bitcast i16* %12767 to <16 x i16>*
  %12769 = load <16 x i16>, <16 x i16>* %12768, align 2, !tbaa !399
  %12770 = getelementptr inbounds i16, i16* %12766, i64 -16
  %12771 = bitcast i16* %12770 to <16 x i16>*
  %12772 = load <16 x i16>, <16 x i16>* %12771, align 2, !tbaa !399
  %12773 = zext i32 %.pre-phi3488 to i64
  %12774 = mul nsw i64 %12773, %112
  %12775 = add nsw i64 %12774, %94
  %12776 = getelementptr inbounds i16, i16* %blur_x, i64 %12775
  %12777 = getelementptr inbounds i16, i16* %12776, i64 -32
  %12778 = bitcast i16* %12777 to <16 x i16>*
  %12779 = load <16 x i16>, <16 x i16>* %12778, align 2, !tbaa !399
  %12780 = getelementptr inbounds i16, i16* %12776, i64 -16
  %12781 = bitcast i16* %12780 to <16 x i16>*
  %12782 = load <16 x i16>, <16 x i16>* %12781, align 2, !tbaa !399
  %12783 = zext i32 %.pre-phi3498 to i64
  %12784 = mul nsw i64 %12783, %112
  %12785 = add nsw i64 %12784, %94
  %12786 = getelementptr inbounds i16, i16* %blur_x, i64 %12785
  %12787 = getelementptr inbounds i16, i16* %12786, i64 -32
  %12788 = bitcast i16* %12787 to <16 x i16>*
  %12789 = load <16 x i16>, <16 x i16>* %12788, align 2, !tbaa !399
  %12790 = getelementptr inbounds i16, i16* %12786, i64 -16
  %12791 = bitcast i16* %12790 to <16 x i16>*
  %12792 = load <16 x i16>, <16 x i16>* %12791, align 2, !tbaa !399
  %12793 = mul nsw i64 %12754, %112
  %12794 = add nsw i64 %12793, %94
  %12795 = getelementptr inbounds i16, i16* %blur_x, i64 %12794
  %12796 = getelementptr inbounds i16, i16* %12795, i64 -32
  %12797 = bitcast i16* %12796 to <16 x i16>*
  %12798 = load <16 x i16>, <16 x i16>* %12797, align 2, !tbaa !399
  %12799 = getelementptr inbounds i16, i16* %12795, i64 -16
  %12800 = bitcast i16* %12799 to <16 x i16>*
  %12801 = load <16 x i16>, <16 x i16>* %12800, align 2, !tbaa !399
  %12802 = zext i32 %.pre-phi3504 to i64
  %12803 = mul nsw i64 %12802, %112
  %12804 = add nsw i64 %12803, %94
  %12805 = getelementptr inbounds i16, i16* %blur_x, i64 %12804
  %12806 = getelementptr inbounds i16, i16* %12805, i64 -32
  %12807 = bitcast i16* %12806 to <16 x i16>*
  %12808 = load <16 x i16>, <16 x i16>* %12807, align 2, !tbaa !399
  %12809 = getelementptr inbounds i16, i16* %12805, i64 -16
  %12810 = bitcast i16* %12809 to <16 x i16>*
  %12811 = load <16 x i16>, <16 x i16>* %12810, align 2, !tbaa !399
  %12812 = add <16 x i16> %12779, %12769
  %12813 = add <16 x i16> %12812, %12789
  %12814 = add <16 x i16> %12813, %12798
  %12815 = add <16 x i16> %12814, %12808
  %12816 = add <16 x i16> %12782, %12772
  %12817 = add <16 x i16> %12816, %12792
  %12818 = add <16 x i16> %12817, %12801
  %12819 = add <16 x i16> %12818, %12811
  %12820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12815, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12819, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12822 = shufflevector <16 x i16> %12820, <16 x i16> %12821, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12823 = lshr <32 x i16> %12822, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12824 = shufflevector <32 x i16> %12823, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12825 = sext i32 %a26 to i64
  %12826 = add nsw i64 %12825, 27
  %12827 = mul nsw i64 %12826, %113
  %12828 = add nsw i64 %115, %12827
  %12829 = getelementptr inbounds i16, i16* %66, i64 %12828
  %12830 = getelementptr inbounds i16, i16* %12829, i64 -32
  %12831 = bitcast i16* %12830 to <16 x i16>*
  store <16 x i16> %12824, <16 x i16>* %12831, align 2, !tbaa !401
  %12832 = shufflevector <32 x i16> %12823, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12833 = getelementptr inbounds i16, i16* %12829, i64 -16
  %12834 = bitcast i16* %12833 to <16 x i16>*
  store <16 x i16> %12832, <16 x i16>* %12834, align 2, !tbaa !401
  br label %after_bb685

"for blur_y.s0.x.x.rebased690":                   ; preds = %"for blur_y.s0.x.x.rebased690.preheader", %"consume blur_x697"
  %indvars.iv3340 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased690.preheader" ], [ %indvars.iv.next3341, %"consume blur_x697" ]
  %12835 = add nsw i64 %indvars.iv3340, %101
  %12836 = icmp slt i64 %12835, 1
  %12837 = trunc i64 %12835 to i32
  %12838 = shl nsw i32 %12837, 5
  %12839 = icmp sgt i32 %4, %12838
  %12840 = or i1 %12836, %12839
  br i1 %12840, label %"produce blur_x696", label %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge"

"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased690"
  %.pre3559 = shl nsw i64 %12835, 5
  br label %"consume blur_x697"

"end for blur_y.s0.x.x.rebased691":               ; preds = %"consume blur_x697", %after_bb685
  br i1 %102, label %"for blur_y.s0.x.x.rebased698.preheader", label %"end for blur_y.s0.x.x.rebased699", !prof !386

"for blur_y.s0.x.x.rebased698.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased691"
  %12841 = sext i32 %t1754 to i64
  %12842 = zext i32 %.pre-phi3492 to i64
  %12843 = mul nsw i64 %12842, %112
  %12844 = sub nsw i64 %12843, %96
  %12845 = zext i32 %.pre-phi3488 to i64
  %12846 = mul nsw i64 %12845, %112
  %12847 = sub nsw i64 %12846, %96
  %12848 = zext i32 %.pre-phi3498 to i64
  %12849 = mul nsw i64 %12848, %112
  %12850 = sub nsw i64 %12849, %96
  %12851 = zext i32 %.pre-phi3510 to i64
  %12852 = mul nsw i64 %12851, %112
  %12853 = sub nsw i64 %12852, %96
  %12854 = zext i32 %.pre-phi3504 to i64
  %12855 = mul nsw i64 %12854, %112
  %12856 = sub nsw i64 %12855, %96
  %12857 = sext i32 %a26 to i64
  %12858 = add nsw i64 %12857, 27
  %12859 = mul nsw i64 %12858, %113
  %12860 = add nsw i64 %12859, %116
  br label %"for blur_y.s0.x.x.rebased698"

"produce blur_x696":                              ; preds = %"for blur_y.s0.x.x.rebased690"
  %t1144 = add nsw i32 %12838, %t2137
  %12861 = sext i32 %t1144 to i64
  %12862 = getelementptr inbounds i16, i16* %read_input, i64 %12861
  %12863 = getelementptr inbounds i16, i16* %12862, i64 1
  %12864 = bitcast i16* %12863 to <16 x i16>*
  %12865 = load <16 x i16>, <16 x i16>* %12864, align 2, !tbaa !396
  %12866 = getelementptr inbounds i16, i16* %12862, i64 17
  %12867 = bitcast i16* %12866 to <16 x i16>*
  %12868 = load <16 x i16>, <16 x i16>* %12867, align 2, !tbaa !396
  %12869 = bitcast i16* %12862 to <16 x i16>*
  %12870 = load <16 x i16>, <16 x i16>* %12869, align 2, !tbaa !396
  %12871 = getelementptr inbounds i16, i16* %12862, i64 16
  %12872 = bitcast i16* %12871 to <16 x i16>*
  %12873 = load <16 x i16>, <16 x i16>* %12872, align 2, !tbaa !396
  %12874 = getelementptr inbounds i16, i16* %12862, i64 2
  %12875 = bitcast i16* %12874 to <16 x i16>*
  %12876 = load <16 x i16>, <16 x i16>* %12875, align 2, !tbaa !396
  %12877 = getelementptr inbounds i16, i16* %12862, i64 18
  %12878 = bitcast i16* %12877 to <16 x i16>*
  %12879 = load <16 x i16>, <16 x i16>* %12878, align 2, !tbaa !396
  %12880 = getelementptr inbounds i16, i16* %12862, i64 4
  %12881 = bitcast i16* %12880 to <16 x i16>*
  %12882 = load <16 x i16>, <16 x i16>* %12881, align 2, !tbaa !396
  %12883 = getelementptr inbounds i16, i16* %12862, i64 20
  %12884 = bitcast i16* %12883 to <16 x i16>*
  %12885 = load <16 x i16>, <16 x i16>* %12884, align 2, !tbaa !396
  %12886 = getelementptr inbounds i16, i16* %12862, i64 3
  %12887 = bitcast i16* %12886 to <16 x i16>*
  %12888 = load <16 x i16>, <16 x i16>* %12887, align 2, !tbaa !396
  %12889 = getelementptr inbounds i16, i16* %12862, i64 19
  %12890 = bitcast i16* %12889 to <16 x i16>*
  %12891 = load <16 x i16>, <16 x i16>* %12890, align 2, !tbaa !396
  %12892 = add <16 x i16> %12870, %12865
  %12893 = add <16 x i16> %12892, %12876
  %12894 = add <16 x i16> %12893, %12882
  %12895 = add <16 x i16> %12894, %12888
  %12896 = add <16 x i16> %12873, %12868
  %12897 = add <16 x i16> %12896, %12879
  %12898 = add <16 x i16> %12897, %12885
  %12899 = add <16 x i16> %12898, %12891
  %12900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12895, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12899, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12902 = shufflevector <16 x i16> %12900, <16 x i16> %12901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12903 = lshr <32 x i16> %12902, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12904 = shufflevector <32 x i16> %12903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12905 = shl nsw i64 %12835, 5
  %12906 = add nsw i64 %12905, %12690
  %12907 = getelementptr inbounds i16, i16* %blur_x, i64 %12906
  %12908 = bitcast i16* %12907 to <16 x i16>*
  store <16 x i16> %12904, <16 x i16>* %12908, align 2, !tbaa !399
  %12909 = shufflevector <32 x i16> %12903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12910 = getelementptr inbounds i16, i16* %12907, i64 16
  %12911 = bitcast i16* %12910 to <16 x i16>*
  store <16 x i16> %12909, <16 x i16>* %12911, align 2, !tbaa !399
  br label %"consume blur_x697"

"consume blur_x697":                              ; preds = %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge", %"produce blur_x696"
  %.pre-phi3560 = phi i64 [ %.pre3559, %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge" ], [ %12905, %"produce blur_x696" ]
  %12912 = add nsw i64 %12693, %.pre-phi3560
  %12913 = getelementptr inbounds i16, i16* %blur_x, i64 %12912
  %12914 = bitcast i16* %12913 to <16 x i16>*
  %12915 = load <16 x i16>, <16 x i16>* %12914, align 2, !tbaa !399
  %12916 = getelementptr inbounds i16, i16* %12913, i64 16
  %12917 = bitcast i16* %12916 to <16 x i16>*
  %12918 = load <16 x i16>, <16 x i16>* %12917, align 2, !tbaa !399
  %12919 = add nsw i64 %12696, %.pre-phi3560
  %12920 = getelementptr inbounds i16, i16* %blur_x, i64 %12919
  %12921 = bitcast i16* %12920 to <16 x i16>*
  %12922 = load <16 x i16>, <16 x i16>* %12921, align 2, !tbaa !399
  %12923 = getelementptr inbounds i16, i16* %12920, i64 16
  %12924 = bitcast i16* %12923 to <16 x i16>*
  %12925 = load <16 x i16>, <16 x i16>* %12924, align 2, !tbaa !399
  %12926 = add nsw i64 %12699, %.pre-phi3560
  %12927 = getelementptr inbounds i16, i16* %blur_x, i64 %12926
  %12928 = bitcast i16* %12927 to <16 x i16>*
  %12929 = load <16 x i16>, <16 x i16>* %12928, align 2, !tbaa !399
  %12930 = getelementptr inbounds i16, i16* %12927, i64 16
  %12931 = bitcast i16* %12930 to <16 x i16>*
  %12932 = load <16 x i16>, <16 x i16>* %12931, align 2, !tbaa !399
  %12933 = add nsw i64 %12702, %.pre-phi3560
  %12934 = getelementptr inbounds i16, i16* %blur_x, i64 %12933
  %12935 = bitcast i16* %12934 to <16 x i16>*
  %12936 = load <16 x i16>, <16 x i16>* %12935, align 2, !tbaa !399
  %12937 = getelementptr inbounds i16, i16* %12934, i64 16
  %12938 = bitcast i16* %12937 to <16 x i16>*
  %12939 = load <16 x i16>, <16 x i16>* %12938, align 2, !tbaa !399
  %12940 = add nsw i64 %12705, %.pre-phi3560
  %12941 = getelementptr inbounds i16, i16* %blur_x, i64 %12940
  %12942 = bitcast i16* %12941 to <16 x i16>*
  %12943 = load <16 x i16>, <16 x i16>* %12942, align 2, !tbaa !399
  %12944 = getelementptr inbounds i16, i16* %12941, i64 16
  %12945 = bitcast i16* %12944 to <16 x i16>*
  %12946 = load <16 x i16>, <16 x i16>* %12945, align 2, !tbaa !399
  %12947 = add <16 x i16> %12922, %12915
  %12948 = add <16 x i16> %12947, %12929
  %12949 = add <16 x i16> %12948, %12936
  %12950 = add <16 x i16> %12949, %12943
  %12951 = add <16 x i16> %12925, %12918
  %12952 = add <16 x i16> %12951, %12932
  %12953 = add <16 x i16> %12952, %12939
  %12954 = add <16 x i16> %12953, %12946
  %12955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12950, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12954, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12957 = shufflevector <16 x i16> %12955, <16 x i16> %12956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12958 = lshr <32 x i16> %12957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12959 = shufflevector <32 x i16> %12958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12960 = add nsw i64 %12709, %.pre-phi3560
  %12961 = getelementptr inbounds i16, i16* %66, i64 %12960
  %12962 = bitcast i16* %12961 to <16 x i16>*
  store <16 x i16> %12959, <16 x i16>* %12962, align 2, !tbaa !401
  %12963 = shufflevector <32 x i16> %12958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12964 = getelementptr inbounds i16, i16* %12961, i64 16
  %12965 = bitcast i16* %12964 to <16 x i16>*
  store <16 x i16> %12963, <16 x i16>* %12965, align 2, !tbaa !401
  %indvars.iv.next3341 = add nuw nsw i64 %indvars.iv3340, 1
  %.not2703 = icmp eq i64 %indvars.iv.next3341, %184
  br i1 %.not2703, label %"end for blur_y.s0.x.x.rebased691", label %"for blur_y.s0.x.x.rebased690"

"for blur_y.s0.x.x.rebased698":                   ; preds = %"for blur_y.s0.x.x.rebased698.preheader", %"consume blur_x706"
  %blur_y.s0.x.x.rebased700 = phi i32 [ %13078, %"consume blur_x706" ], [ 0, %"for blur_y.s0.x.x.rebased698.preheader" ]
  %12966 = add nsw i32 %blur_y.s0.x.x.rebased700, %t1626
  %a294 = shl nsw i32 %12966, 5
  %12967 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %12967, i32 %a294, i32 %a14
  %12968 = icmp slt i32 %12966, 1
  %12969 = icmp sgt i32 %4, %a294
  %12970 = or i1 %12968, %12969
  br i1 %12970, label %"produce blur_x704", label %"consume blur_x706"

"end for blur_y.s0.x.x.rebased699":               ; preds = %"consume blur_x706", %"end for blur_y.s0.x.x.rebased691"
  br i1 %34, label %"produce blur_x710", label %after_bb707

"produce blur_x704":                              ; preds = %"for blur_y.s0.x.x.rebased698"
  %12971 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s705 = select i1 %12971, i32 %b300, i32 %4
  %t1149 = add nsw i32 %blur_x.s0.x.v1.base.s705, %t2137
  %12972 = sext i32 %t1149 to i64
  %12973 = getelementptr inbounds i16, i16* %read_input, i64 %12972
  %12974 = getelementptr inbounds i16, i16* %12973, i64 1
  %12975 = bitcast i16* %12974 to <16 x i16>*
  %12976 = load <16 x i16>, <16 x i16>* %12975, align 2, !tbaa !396
  %12977 = getelementptr inbounds i16, i16* %12973, i64 17
  %12978 = bitcast i16* %12977 to <16 x i16>*
  %12979 = load <16 x i16>, <16 x i16>* %12978, align 2, !tbaa !396
  %12980 = bitcast i16* %12973 to <16 x i16>*
  %12981 = load <16 x i16>, <16 x i16>* %12980, align 2, !tbaa !396
  %12982 = getelementptr inbounds i16, i16* %12973, i64 16
  %12983 = bitcast i16* %12982 to <16 x i16>*
  %12984 = load <16 x i16>, <16 x i16>* %12983, align 2, !tbaa !396
  %12985 = getelementptr inbounds i16, i16* %12973, i64 2
  %12986 = bitcast i16* %12985 to <16 x i16>*
  %12987 = load <16 x i16>, <16 x i16>* %12986, align 2, !tbaa !396
  %12988 = getelementptr inbounds i16, i16* %12973, i64 18
  %12989 = bitcast i16* %12988 to <16 x i16>*
  %12990 = load <16 x i16>, <16 x i16>* %12989, align 2, !tbaa !396
  %12991 = getelementptr inbounds i16, i16* %12973, i64 4
  %12992 = bitcast i16* %12991 to <16 x i16>*
  %12993 = load <16 x i16>, <16 x i16>* %12992, align 2, !tbaa !396
  %12994 = getelementptr inbounds i16, i16* %12973, i64 20
  %12995 = bitcast i16* %12994 to <16 x i16>*
  %12996 = load <16 x i16>, <16 x i16>* %12995, align 2, !tbaa !396
  %12997 = getelementptr inbounds i16, i16* %12973, i64 3
  %12998 = bitcast i16* %12997 to <16 x i16>*
  %12999 = load <16 x i16>, <16 x i16>* %12998, align 2, !tbaa !396
  %13000 = getelementptr inbounds i16, i16* %12973, i64 19
  %13001 = bitcast i16* %13000 to <16 x i16>*
  %13002 = load <16 x i16>, <16 x i16>* %13001, align 2, !tbaa !396
  %13003 = add <16 x i16> %12981, %12976
  %13004 = add <16 x i16> %13003, %12987
  %13005 = add <16 x i16> %13004, %12993
  %13006 = add <16 x i16> %13005, %12999
  %13007 = add <16 x i16> %12984, %12979
  %13008 = add <16 x i16> %13007, %12990
  %13009 = add <16 x i16> %13008, %12996
  %13010 = add <16 x i16> %13009, %13002
  %13011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13006, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13010, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13013 = shufflevector <16 x i16> %13011, <16 x i16> %13012, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13014 = lshr <32 x i16> %13013, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13015 = shufflevector <32 x i16> %13014, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13016 = sext i32 %blur_x.s0.x.v1.base.s705 to i64
  %13017 = add nsw i64 %13016, %12841
  %13018 = getelementptr inbounds i16, i16* %blur_x, i64 %13017
  %13019 = bitcast i16* %13018 to <16 x i16>*
  store <16 x i16> %13015, <16 x i16>* %13019, align 2, !tbaa !399
  %13020 = shufflevector <32 x i16> %13014, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13021 = getelementptr inbounds i16, i16* %13018, i64 16
  %13022 = bitcast i16* %13021 to <16 x i16>*
  store <16 x i16> %13020, <16 x i16>* %13022, align 2, !tbaa !399
  br label %"consume blur_x706"

"consume blur_x706":                              ; preds = %"for blur_y.s0.x.x.rebased698", %"produce blur_x704"
  %13023 = sext i32 %b300 to i64
  %13024 = add nsw i64 %12844, %13023
  %13025 = getelementptr inbounds i16, i16* %blur_x, i64 %13024
  %13026 = bitcast i16* %13025 to <16 x i16>*
  %13027 = load <16 x i16>, <16 x i16>* %13026, align 2, !tbaa !399
  %13028 = getelementptr inbounds i16, i16* %13025, i64 16
  %13029 = bitcast i16* %13028 to <16 x i16>*
  %13030 = load <16 x i16>, <16 x i16>* %13029, align 2, !tbaa !399
  %13031 = add nsw i64 %12847, %13023
  %13032 = getelementptr inbounds i16, i16* %blur_x, i64 %13031
  %13033 = bitcast i16* %13032 to <16 x i16>*
  %13034 = load <16 x i16>, <16 x i16>* %13033, align 2, !tbaa !399
  %13035 = getelementptr inbounds i16, i16* %13032, i64 16
  %13036 = bitcast i16* %13035 to <16 x i16>*
  %13037 = load <16 x i16>, <16 x i16>* %13036, align 2, !tbaa !399
  %13038 = add nsw i64 %12850, %13023
  %13039 = getelementptr inbounds i16, i16* %blur_x, i64 %13038
  %13040 = bitcast i16* %13039 to <16 x i16>*
  %13041 = load <16 x i16>, <16 x i16>* %13040, align 2, !tbaa !399
  %13042 = getelementptr inbounds i16, i16* %13039, i64 16
  %13043 = bitcast i16* %13042 to <16 x i16>*
  %13044 = load <16 x i16>, <16 x i16>* %13043, align 2, !tbaa !399
  %13045 = add nsw i64 %12853, %13023
  %13046 = getelementptr inbounds i16, i16* %blur_x, i64 %13045
  %13047 = bitcast i16* %13046 to <16 x i16>*
  %13048 = load <16 x i16>, <16 x i16>* %13047, align 2, !tbaa !399
  %13049 = getelementptr inbounds i16, i16* %13046, i64 16
  %13050 = bitcast i16* %13049 to <16 x i16>*
  %13051 = load <16 x i16>, <16 x i16>* %13050, align 2, !tbaa !399
  %13052 = add nsw i64 %12856, %13023
  %13053 = getelementptr inbounds i16, i16* %blur_x, i64 %13052
  %13054 = bitcast i16* %13053 to <16 x i16>*
  %13055 = load <16 x i16>, <16 x i16>* %13054, align 2, !tbaa !399
  %13056 = getelementptr inbounds i16, i16* %13053, i64 16
  %13057 = bitcast i16* %13056 to <16 x i16>*
  %13058 = load <16 x i16>, <16 x i16>* %13057, align 2, !tbaa !399
  %13059 = add <16 x i16> %13034, %13027
  %13060 = add <16 x i16> %13059, %13041
  %13061 = add <16 x i16> %13060, %13048
  %13062 = add <16 x i16> %13061, %13055
  %13063 = add <16 x i16> %13037, %13030
  %13064 = add <16 x i16> %13063, %13044
  %13065 = add <16 x i16> %13064, %13051
  %13066 = add <16 x i16> %13065, %13058
  %13067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13062, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13066, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13069 = shufflevector <16 x i16> %13067, <16 x i16> %13068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13070 = lshr <32 x i16> %13069, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13071 = shufflevector <32 x i16> %13070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13072 = add nsw i64 %12860, %13023
  %13073 = getelementptr inbounds i16, i16* %66, i64 %13072
  %13074 = bitcast i16* %13073 to <16 x i16>*
  store <16 x i16> %13071, <16 x i16>* %13074, align 2, !tbaa !401
  %13075 = shufflevector <32 x i16> %13070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13076 = getelementptr inbounds i16, i16* %13073, i64 16
  %13077 = bitcast i16* %13076 to <16 x i16>*
  store <16 x i16> %13075, <16 x i16>* %13077, align 2, !tbaa !401
  %13078 = add nuw nsw i32 %blur_y.s0.x.x.rebased700, 1
  %.not2702 = icmp eq i32 %13078, %t1683
  br i1 %.not2702, label %"end for blur_y.s0.x.x.rebased699", label %"for blur_y.s0.x.x.rebased698"

after_bb707:                                      ; preds = %"end for blur_y.s0.x.x.rebased699", %"produce blur_x710"
  br i1 %100, label %"for blur_y.s0.x.x.rebased712.preheader", label %"end for blur_y.s0.x.x.rebased713", !prof !386

"for blur_y.s0.x.x.rebased712.preheader":         ; preds = %after_bb707
  %13079 = sext i32 %t1682 to i64
  %13080 = zext i32 %.pre-phi3498 to i64
  %13081 = mul nsw i64 %13080, %112
  %13082 = sub nsw i64 %13081, %96
  %13083 = zext i32 %.pre-phi3492 to i64
  %13084 = mul nsw i64 %13083, %112
  %13085 = sub nsw i64 %13084, %96
  %13086 = zext i32 %.pre-phi3504 to i64
  %13087 = mul nsw i64 %13086, %112
  %13088 = sub nsw i64 %13087, %96
  %13089 = zext i32 %.pre-phi to i64
  %13090 = mul nsw i64 %13089, %112
  %13091 = sub nsw i64 %13090, %96
  %13092 = zext i32 %.pre-phi3510 to i64
  %13093 = mul nsw i64 %13092, %112
  %13094 = sub nsw i64 %13093, %96
  %13095 = sext i32 %a26 to i64
  %13096 = add nsw i64 %13095, 28
  %13097 = mul nsw i64 %13096, %113
  %13098 = add nsw i64 %13097, %116
  br label %"for blur_y.s0.x.x.rebased712"

"produce blur_x710":                              ; preds = %"end for blur_y.s0.x.x.rebased699"
  %13099 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %13100 = getelementptr inbounds i16, i16* %13099, i64 -31
  %13101 = bitcast i16* %13100 to <16 x i16>*
  %13102 = load <16 x i16>, <16 x i16>* %13101, align 2, !tbaa !396
  %13103 = getelementptr inbounds i16, i16* %13099, i64 -15
  %13104 = bitcast i16* %13103 to <16 x i16>*
  %13105 = load <16 x i16>, <16 x i16>* %13104, align 2, !tbaa !396
  %13106 = getelementptr inbounds i16, i16* %13099, i64 -32
  %13107 = bitcast i16* %13106 to <16 x i16>*
  %13108 = load <16 x i16>, <16 x i16>* %13107, align 2, !tbaa !396
  %13109 = getelementptr inbounds i16, i16* %13099, i64 -16
  %13110 = bitcast i16* %13109 to <16 x i16>*
  %13111 = load <16 x i16>, <16 x i16>* %13110, align 2, !tbaa !396
  %13112 = getelementptr inbounds i16, i16* %13099, i64 -30
  %13113 = bitcast i16* %13112 to <16 x i16>*
  %13114 = load <16 x i16>, <16 x i16>* %13113, align 2, !tbaa !396
  %13115 = getelementptr inbounds i16, i16* %13099, i64 -14
  %13116 = bitcast i16* %13115 to <16 x i16>*
  %13117 = load <16 x i16>, <16 x i16>* %13116, align 2, !tbaa !396
  %13118 = getelementptr inbounds i16, i16* %13099, i64 -28
  %13119 = bitcast i16* %13118 to <16 x i16>*
  %13120 = load <16 x i16>, <16 x i16>* %13119, align 2, !tbaa !396
  %13121 = getelementptr inbounds i16, i16* %13099, i64 -12
  %13122 = bitcast i16* %13121 to <16 x i16>*
  %13123 = load <16 x i16>, <16 x i16>* %13122, align 2, !tbaa !396
  %13124 = getelementptr inbounds i16, i16* %13099, i64 -29
  %13125 = bitcast i16* %13124 to <16 x i16>*
  %13126 = load <16 x i16>, <16 x i16>* %13125, align 2, !tbaa !396
  %13127 = getelementptr inbounds i16, i16* %13099, i64 -13
  %13128 = bitcast i16* %13127 to <16 x i16>*
  %13129 = load <16 x i16>, <16 x i16>* %13128, align 2, !tbaa !396
  %13130 = add <16 x i16> %13108, %13102
  %13131 = add <16 x i16> %13130, %13114
  %13132 = add <16 x i16> %13131, %13120
  %13133 = add <16 x i16> %13132, %13126
  %13134 = add <16 x i16> %13111, %13105
  %13135 = add <16 x i16> %13134, %13117
  %13136 = add <16 x i16> %13135, %13123
  %13137 = add <16 x i16> %13136, %13129
  %13138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13133, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13137, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13140 = shufflevector <16 x i16> %13138, <16 x i16> %13139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13141 = lshr <32 x i16> %13140, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13142 = shufflevector <32 x i16> %13141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13143 = zext i32 %.pre-phi to i64
  %13144 = mul nsw i64 %97, %13143
  %13145 = add nsw i64 %99, %13144
  %13146 = getelementptr inbounds i16, i16* %blur_x, i64 %13145
  %13147 = getelementptr inbounds i16, i16* %13146, i64 -32
  %13148 = bitcast i16* %13147 to <16 x i16>*
  store <16 x i16> %13142, <16 x i16>* %13148, align 2, !tbaa !399
  %13149 = shufflevector <32 x i16> %13141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13150 = getelementptr inbounds i16, i16* %13146, i64 -16
  %13151 = bitcast i16* %13150 to <16 x i16>*
  store <16 x i16> %13149, <16 x i16>* %13151, align 2, !tbaa !399
  %13152 = zext i32 %.pre-phi3498 to i64
  %13153 = mul nsw i64 %13152, %112
  %13154 = add nsw i64 %13153, %94
  %13155 = getelementptr inbounds i16, i16* %blur_x, i64 %13154
  %13156 = getelementptr inbounds i16, i16* %13155, i64 -32
  %13157 = bitcast i16* %13156 to <16 x i16>*
  %13158 = load <16 x i16>, <16 x i16>* %13157, align 2, !tbaa !399
  %13159 = getelementptr inbounds i16, i16* %13155, i64 -16
  %13160 = bitcast i16* %13159 to <16 x i16>*
  %13161 = load <16 x i16>, <16 x i16>* %13160, align 2, !tbaa !399
  %13162 = zext i32 %.pre-phi3492 to i64
  %13163 = mul nsw i64 %13162, %112
  %13164 = add nsw i64 %13163, %94
  %13165 = getelementptr inbounds i16, i16* %blur_x, i64 %13164
  %13166 = getelementptr inbounds i16, i16* %13165, i64 -32
  %13167 = bitcast i16* %13166 to <16 x i16>*
  %13168 = load <16 x i16>, <16 x i16>* %13167, align 2, !tbaa !399
  %13169 = getelementptr inbounds i16, i16* %13165, i64 -16
  %13170 = bitcast i16* %13169 to <16 x i16>*
  %13171 = load <16 x i16>, <16 x i16>* %13170, align 2, !tbaa !399
  %13172 = zext i32 %.pre-phi3504 to i64
  %13173 = mul nsw i64 %13172, %112
  %13174 = add nsw i64 %13173, %94
  %13175 = getelementptr inbounds i16, i16* %blur_x, i64 %13174
  %13176 = getelementptr inbounds i16, i16* %13175, i64 -32
  %13177 = bitcast i16* %13176 to <16 x i16>*
  %13178 = load <16 x i16>, <16 x i16>* %13177, align 2, !tbaa !399
  %13179 = getelementptr inbounds i16, i16* %13175, i64 -16
  %13180 = bitcast i16* %13179 to <16 x i16>*
  %13181 = load <16 x i16>, <16 x i16>* %13180, align 2, !tbaa !399
  %13182 = mul nsw i64 %13143, %112
  %13183 = add nsw i64 %13182, %94
  %13184 = getelementptr inbounds i16, i16* %blur_x, i64 %13183
  %13185 = getelementptr inbounds i16, i16* %13184, i64 -32
  %13186 = bitcast i16* %13185 to <16 x i16>*
  %13187 = load <16 x i16>, <16 x i16>* %13186, align 2, !tbaa !399
  %13188 = getelementptr inbounds i16, i16* %13184, i64 -16
  %13189 = bitcast i16* %13188 to <16 x i16>*
  %13190 = load <16 x i16>, <16 x i16>* %13189, align 2, !tbaa !399
  %13191 = zext i32 %.pre-phi3510 to i64
  %13192 = mul nsw i64 %13191, %112
  %13193 = add nsw i64 %13192, %94
  %13194 = getelementptr inbounds i16, i16* %blur_x, i64 %13193
  %13195 = getelementptr inbounds i16, i16* %13194, i64 -32
  %13196 = bitcast i16* %13195 to <16 x i16>*
  %13197 = load <16 x i16>, <16 x i16>* %13196, align 2, !tbaa !399
  %13198 = getelementptr inbounds i16, i16* %13194, i64 -16
  %13199 = bitcast i16* %13198 to <16 x i16>*
  %13200 = load <16 x i16>, <16 x i16>* %13199, align 2, !tbaa !399
  %13201 = add <16 x i16> %13168, %13158
  %13202 = add <16 x i16> %13201, %13178
  %13203 = add <16 x i16> %13202, %13187
  %13204 = add <16 x i16> %13203, %13197
  %13205 = add <16 x i16> %13171, %13161
  %13206 = add <16 x i16> %13205, %13181
  %13207 = add <16 x i16> %13206, %13190
  %13208 = add <16 x i16> %13207, %13200
  %13209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13204, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13210 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13208, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13211 = shufflevector <16 x i16> %13209, <16 x i16> %13210, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13212 = lshr <32 x i16> %13211, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13213 = shufflevector <32 x i16> %13212, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13214 = sext i32 %a26 to i64
  %13215 = add nsw i64 %13214, 28
  %13216 = mul nsw i64 %13215, %113
  %13217 = add nsw i64 %115, %13216
  %13218 = getelementptr inbounds i16, i16* %66, i64 %13217
  %13219 = getelementptr inbounds i16, i16* %13218, i64 -32
  %13220 = bitcast i16* %13219 to <16 x i16>*
  store <16 x i16> %13213, <16 x i16>* %13220, align 2, !tbaa !401
  %13221 = shufflevector <32 x i16> %13212, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13222 = getelementptr inbounds i16, i16* %13218, i64 -16
  %13223 = bitcast i16* %13222 to <16 x i16>*
  store <16 x i16> %13221, <16 x i16>* %13223, align 2, !tbaa !401
  br label %after_bb707

"for blur_y.s0.x.x.rebased712":                   ; preds = %"for blur_y.s0.x.x.rebased712.preheader", %"consume blur_x719"
  %indvars.iv3343 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased712.preheader" ], [ %indvars.iv.next3344, %"consume blur_x719" ]
  %13224 = add nsw i64 %indvars.iv3343, %101
  %13225 = icmp slt i64 %13224, 1
  %13226 = trunc i64 %13224 to i32
  %13227 = shl nsw i32 %13226, 5
  %13228 = icmp sgt i32 %4, %13227
  %13229 = or i1 %13225, %13228
  br i1 %13229, label %"produce blur_x718", label %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge"

"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased712"
  %.pre3561 = shl nsw i64 %13224, 5
  br label %"consume blur_x719"

"end for blur_y.s0.x.x.rebased713":               ; preds = %"consume blur_x719", %after_bb707
  br i1 %102, label %"for blur_y.s0.x.x.rebased720.preheader", label %"end for blur_y.s0.x.x.rebased721", !prof !386

"for blur_y.s0.x.x.rebased720.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased713"
  %13230 = sext i32 %t1682 to i64
  %13231 = zext i32 %.pre-phi3498 to i64
  %13232 = mul nsw i64 %13231, %112
  %13233 = sub nsw i64 %13232, %96
  %13234 = zext i32 %.pre-phi3492 to i64
  %13235 = mul nsw i64 %13234, %112
  %13236 = sub nsw i64 %13235, %96
  %13237 = zext i32 %.pre-phi3504 to i64
  %13238 = mul nsw i64 %13237, %112
  %13239 = sub nsw i64 %13238, %96
  %13240 = zext i32 %.pre-phi to i64
  %13241 = mul nsw i64 %13240, %112
  %13242 = sub nsw i64 %13241, %96
  %13243 = zext i32 %.pre-phi3510 to i64
  %13244 = mul nsw i64 %13243, %112
  %13245 = sub nsw i64 %13244, %96
  %13246 = sext i32 %a26 to i64
  %13247 = add nsw i64 %13246, 28
  %13248 = mul nsw i64 %13247, %113
  %13249 = add nsw i64 %13248, %116
  br label %"for blur_y.s0.x.x.rebased720"

"produce blur_x718":                              ; preds = %"for blur_y.s0.x.x.rebased712"
  %t1160 = add nsw i32 %13227, %t2153
  %13250 = sext i32 %t1160 to i64
  %13251 = getelementptr inbounds i16, i16* %read_input, i64 %13250
  %13252 = getelementptr inbounds i16, i16* %13251, i64 1
  %13253 = bitcast i16* %13252 to <16 x i16>*
  %13254 = load <16 x i16>, <16 x i16>* %13253, align 2, !tbaa !396
  %13255 = getelementptr inbounds i16, i16* %13251, i64 17
  %13256 = bitcast i16* %13255 to <16 x i16>*
  %13257 = load <16 x i16>, <16 x i16>* %13256, align 2, !tbaa !396
  %13258 = bitcast i16* %13251 to <16 x i16>*
  %13259 = load <16 x i16>, <16 x i16>* %13258, align 2, !tbaa !396
  %13260 = getelementptr inbounds i16, i16* %13251, i64 16
  %13261 = bitcast i16* %13260 to <16 x i16>*
  %13262 = load <16 x i16>, <16 x i16>* %13261, align 2, !tbaa !396
  %13263 = getelementptr inbounds i16, i16* %13251, i64 2
  %13264 = bitcast i16* %13263 to <16 x i16>*
  %13265 = load <16 x i16>, <16 x i16>* %13264, align 2, !tbaa !396
  %13266 = getelementptr inbounds i16, i16* %13251, i64 18
  %13267 = bitcast i16* %13266 to <16 x i16>*
  %13268 = load <16 x i16>, <16 x i16>* %13267, align 2, !tbaa !396
  %13269 = getelementptr inbounds i16, i16* %13251, i64 4
  %13270 = bitcast i16* %13269 to <16 x i16>*
  %13271 = load <16 x i16>, <16 x i16>* %13270, align 2, !tbaa !396
  %13272 = getelementptr inbounds i16, i16* %13251, i64 20
  %13273 = bitcast i16* %13272 to <16 x i16>*
  %13274 = load <16 x i16>, <16 x i16>* %13273, align 2, !tbaa !396
  %13275 = getelementptr inbounds i16, i16* %13251, i64 3
  %13276 = bitcast i16* %13275 to <16 x i16>*
  %13277 = load <16 x i16>, <16 x i16>* %13276, align 2, !tbaa !396
  %13278 = getelementptr inbounds i16, i16* %13251, i64 19
  %13279 = bitcast i16* %13278 to <16 x i16>*
  %13280 = load <16 x i16>, <16 x i16>* %13279, align 2, !tbaa !396
  %13281 = add <16 x i16> %13259, %13254
  %13282 = add <16 x i16> %13281, %13265
  %13283 = add <16 x i16> %13282, %13271
  %13284 = add <16 x i16> %13283, %13277
  %13285 = add <16 x i16> %13262, %13257
  %13286 = add <16 x i16> %13285, %13268
  %13287 = add <16 x i16> %13286, %13274
  %13288 = add <16 x i16> %13287, %13280
  %13289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13284, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13288, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13291 = shufflevector <16 x i16> %13289, <16 x i16> %13290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13292 = lshr <32 x i16> %13291, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13293 = shufflevector <32 x i16> %13292, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13294 = shl nsw i64 %13224, 5
  %13295 = add nsw i64 %13294, %13079
  %13296 = getelementptr inbounds i16, i16* %blur_x, i64 %13295
  %13297 = bitcast i16* %13296 to <16 x i16>*
  store <16 x i16> %13293, <16 x i16>* %13297, align 2, !tbaa !399
  %13298 = shufflevector <32 x i16> %13292, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13299 = getelementptr inbounds i16, i16* %13296, i64 16
  %13300 = bitcast i16* %13299 to <16 x i16>*
  store <16 x i16> %13298, <16 x i16>* %13300, align 2, !tbaa !399
  br label %"consume blur_x719"

"consume blur_x719":                              ; preds = %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge", %"produce blur_x718"
  %.pre-phi3562 = phi i64 [ %.pre3561, %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge" ], [ %13294, %"produce blur_x718" ]
  %13301 = add nsw i64 %13082, %.pre-phi3562
  %13302 = getelementptr inbounds i16, i16* %blur_x, i64 %13301
  %13303 = bitcast i16* %13302 to <16 x i16>*
  %13304 = load <16 x i16>, <16 x i16>* %13303, align 2, !tbaa !399
  %13305 = getelementptr inbounds i16, i16* %13302, i64 16
  %13306 = bitcast i16* %13305 to <16 x i16>*
  %13307 = load <16 x i16>, <16 x i16>* %13306, align 2, !tbaa !399
  %13308 = add nsw i64 %13085, %.pre-phi3562
  %13309 = getelementptr inbounds i16, i16* %blur_x, i64 %13308
  %13310 = bitcast i16* %13309 to <16 x i16>*
  %13311 = load <16 x i16>, <16 x i16>* %13310, align 2, !tbaa !399
  %13312 = getelementptr inbounds i16, i16* %13309, i64 16
  %13313 = bitcast i16* %13312 to <16 x i16>*
  %13314 = load <16 x i16>, <16 x i16>* %13313, align 2, !tbaa !399
  %13315 = add nsw i64 %13088, %.pre-phi3562
  %13316 = getelementptr inbounds i16, i16* %blur_x, i64 %13315
  %13317 = bitcast i16* %13316 to <16 x i16>*
  %13318 = load <16 x i16>, <16 x i16>* %13317, align 2, !tbaa !399
  %13319 = getelementptr inbounds i16, i16* %13316, i64 16
  %13320 = bitcast i16* %13319 to <16 x i16>*
  %13321 = load <16 x i16>, <16 x i16>* %13320, align 2, !tbaa !399
  %13322 = add nsw i64 %13091, %.pre-phi3562
  %13323 = getelementptr inbounds i16, i16* %blur_x, i64 %13322
  %13324 = bitcast i16* %13323 to <16 x i16>*
  %13325 = load <16 x i16>, <16 x i16>* %13324, align 2, !tbaa !399
  %13326 = getelementptr inbounds i16, i16* %13323, i64 16
  %13327 = bitcast i16* %13326 to <16 x i16>*
  %13328 = load <16 x i16>, <16 x i16>* %13327, align 2, !tbaa !399
  %13329 = add nsw i64 %13094, %.pre-phi3562
  %13330 = getelementptr inbounds i16, i16* %blur_x, i64 %13329
  %13331 = bitcast i16* %13330 to <16 x i16>*
  %13332 = load <16 x i16>, <16 x i16>* %13331, align 2, !tbaa !399
  %13333 = getelementptr inbounds i16, i16* %13330, i64 16
  %13334 = bitcast i16* %13333 to <16 x i16>*
  %13335 = load <16 x i16>, <16 x i16>* %13334, align 2, !tbaa !399
  %13336 = add <16 x i16> %13311, %13304
  %13337 = add <16 x i16> %13336, %13318
  %13338 = add <16 x i16> %13337, %13325
  %13339 = add <16 x i16> %13338, %13332
  %13340 = add <16 x i16> %13314, %13307
  %13341 = add <16 x i16> %13340, %13321
  %13342 = add <16 x i16> %13341, %13328
  %13343 = add <16 x i16> %13342, %13335
  %13344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13339, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13343, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13346 = shufflevector <16 x i16> %13344, <16 x i16> %13345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13347 = lshr <32 x i16> %13346, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13348 = shufflevector <32 x i16> %13347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13349 = add nsw i64 %13098, %.pre-phi3562
  %13350 = getelementptr inbounds i16, i16* %66, i64 %13349
  %13351 = bitcast i16* %13350 to <16 x i16>*
  store <16 x i16> %13348, <16 x i16>* %13351, align 2, !tbaa !401
  %13352 = shufflevector <32 x i16> %13347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13353 = getelementptr inbounds i16, i16* %13350, i64 16
  %13354 = bitcast i16* %13353 to <16 x i16>*
  store <16 x i16> %13352, <16 x i16>* %13354, align 2, !tbaa !401
  %indvars.iv.next3344 = add nuw nsw i64 %indvars.iv3343, 1
  %.not2701 = icmp eq i64 %indvars.iv.next3344, %184
  br i1 %.not2701, label %"end for blur_y.s0.x.x.rebased713", label %"for blur_y.s0.x.x.rebased712"

"for blur_y.s0.x.x.rebased720":                   ; preds = %"for blur_y.s0.x.x.rebased720.preheader", %"consume blur_x728"
  %blur_y.s0.x.x.rebased722 = phi i32 [ %13467, %"consume blur_x728" ], [ 0, %"for blur_y.s0.x.x.rebased720.preheader" ]
  %13355 = add nsw i32 %blur_y.s0.x.x.rebased722, %t1626
  %a301 = shl nsw i32 %13355, 5
  %13356 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %13356, i32 %a301, i32 %a14
  %13357 = icmp slt i32 %13355, 1
  %13358 = icmp sgt i32 %4, %a301
  %13359 = or i1 %13357, %13358
  br i1 %13359, label %"produce blur_x726", label %"consume blur_x728"

"end for blur_y.s0.x.x.rebased721":               ; preds = %"consume blur_x728", %"end for blur_y.s0.x.x.rebased713"
  br i1 %34, label %"produce blur_x732", label %after_bb729

"produce blur_x726":                              ; preds = %"for blur_y.s0.x.x.rebased720"
  %13360 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s727 = select i1 %13360, i32 %b307, i32 %4
  %t1165 = add nsw i32 %blur_x.s0.x.v1.base.s727, %t2153
  %13361 = sext i32 %t1165 to i64
  %13362 = getelementptr inbounds i16, i16* %read_input, i64 %13361
  %13363 = getelementptr inbounds i16, i16* %13362, i64 1
  %13364 = bitcast i16* %13363 to <16 x i16>*
  %13365 = load <16 x i16>, <16 x i16>* %13364, align 2, !tbaa !396
  %13366 = getelementptr inbounds i16, i16* %13362, i64 17
  %13367 = bitcast i16* %13366 to <16 x i16>*
  %13368 = load <16 x i16>, <16 x i16>* %13367, align 2, !tbaa !396
  %13369 = bitcast i16* %13362 to <16 x i16>*
  %13370 = load <16 x i16>, <16 x i16>* %13369, align 2, !tbaa !396
  %13371 = getelementptr inbounds i16, i16* %13362, i64 16
  %13372 = bitcast i16* %13371 to <16 x i16>*
  %13373 = load <16 x i16>, <16 x i16>* %13372, align 2, !tbaa !396
  %13374 = getelementptr inbounds i16, i16* %13362, i64 2
  %13375 = bitcast i16* %13374 to <16 x i16>*
  %13376 = load <16 x i16>, <16 x i16>* %13375, align 2, !tbaa !396
  %13377 = getelementptr inbounds i16, i16* %13362, i64 18
  %13378 = bitcast i16* %13377 to <16 x i16>*
  %13379 = load <16 x i16>, <16 x i16>* %13378, align 2, !tbaa !396
  %13380 = getelementptr inbounds i16, i16* %13362, i64 4
  %13381 = bitcast i16* %13380 to <16 x i16>*
  %13382 = load <16 x i16>, <16 x i16>* %13381, align 2, !tbaa !396
  %13383 = getelementptr inbounds i16, i16* %13362, i64 20
  %13384 = bitcast i16* %13383 to <16 x i16>*
  %13385 = load <16 x i16>, <16 x i16>* %13384, align 2, !tbaa !396
  %13386 = getelementptr inbounds i16, i16* %13362, i64 3
  %13387 = bitcast i16* %13386 to <16 x i16>*
  %13388 = load <16 x i16>, <16 x i16>* %13387, align 2, !tbaa !396
  %13389 = getelementptr inbounds i16, i16* %13362, i64 19
  %13390 = bitcast i16* %13389 to <16 x i16>*
  %13391 = load <16 x i16>, <16 x i16>* %13390, align 2, !tbaa !396
  %13392 = add <16 x i16> %13370, %13365
  %13393 = add <16 x i16> %13392, %13376
  %13394 = add <16 x i16> %13393, %13382
  %13395 = add <16 x i16> %13394, %13388
  %13396 = add <16 x i16> %13373, %13368
  %13397 = add <16 x i16> %13396, %13379
  %13398 = add <16 x i16> %13397, %13385
  %13399 = add <16 x i16> %13398, %13391
  %13400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13395, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13399, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13402 = shufflevector <16 x i16> %13400, <16 x i16> %13401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13403 = lshr <32 x i16> %13402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13404 = shufflevector <32 x i16> %13403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13405 = sext i32 %blur_x.s0.x.v1.base.s727 to i64
  %13406 = add nsw i64 %13405, %13230
  %13407 = getelementptr inbounds i16, i16* %blur_x, i64 %13406
  %13408 = bitcast i16* %13407 to <16 x i16>*
  store <16 x i16> %13404, <16 x i16>* %13408, align 2, !tbaa !399
  %13409 = shufflevector <32 x i16> %13403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13410 = getelementptr inbounds i16, i16* %13407, i64 16
  %13411 = bitcast i16* %13410 to <16 x i16>*
  store <16 x i16> %13409, <16 x i16>* %13411, align 2, !tbaa !399
  br label %"consume blur_x728"

"consume blur_x728":                              ; preds = %"for blur_y.s0.x.x.rebased720", %"produce blur_x726"
  %13412 = sext i32 %b307 to i64
  %13413 = add nsw i64 %13233, %13412
  %13414 = getelementptr inbounds i16, i16* %blur_x, i64 %13413
  %13415 = bitcast i16* %13414 to <16 x i16>*
  %13416 = load <16 x i16>, <16 x i16>* %13415, align 2, !tbaa !399
  %13417 = getelementptr inbounds i16, i16* %13414, i64 16
  %13418 = bitcast i16* %13417 to <16 x i16>*
  %13419 = load <16 x i16>, <16 x i16>* %13418, align 2, !tbaa !399
  %13420 = add nsw i64 %13236, %13412
  %13421 = getelementptr inbounds i16, i16* %blur_x, i64 %13420
  %13422 = bitcast i16* %13421 to <16 x i16>*
  %13423 = load <16 x i16>, <16 x i16>* %13422, align 2, !tbaa !399
  %13424 = getelementptr inbounds i16, i16* %13421, i64 16
  %13425 = bitcast i16* %13424 to <16 x i16>*
  %13426 = load <16 x i16>, <16 x i16>* %13425, align 2, !tbaa !399
  %13427 = add nsw i64 %13239, %13412
  %13428 = getelementptr inbounds i16, i16* %blur_x, i64 %13427
  %13429 = bitcast i16* %13428 to <16 x i16>*
  %13430 = load <16 x i16>, <16 x i16>* %13429, align 2, !tbaa !399
  %13431 = getelementptr inbounds i16, i16* %13428, i64 16
  %13432 = bitcast i16* %13431 to <16 x i16>*
  %13433 = load <16 x i16>, <16 x i16>* %13432, align 2, !tbaa !399
  %13434 = add nsw i64 %13242, %13412
  %13435 = getelementptr inbounds i16, i16* %blur_x, i64 %13434
  %13436 = bitcast i16* %13435 to <16 x i16>*
  %13437 = load <16 x i16>, <16 x i16>* %13436, align 2, !tbaa !399
  %13438 = getelementptr inbounds i16, i16* %13435, i64 16
  %13439 = bitcast i16* %13438 to <16 x i16>*
  %13440 = load <16 x i16>, <16 x i16>* %13439, align 2, !tbaa !399
  %13441 = add nsw i64 %13245, %13412
  %13442 = getelementptr inbounds i16, i16* %blur_x, i64 %13441
  %13443 = bitcast i16* %13442 to <16 x i16>*
  %13444 = load <16 x i16>, <16 x i16>* %13443, align 2, !tbaa !399
  %13445 = getelementptr inbounds i16, i16* %13442, i64 16
  %13446 = bitcast i16* %13445 to <16 x i16>*
  %13447 = load <16 x i16>, <16 x i16>* %13446, align 2, !tbaa !399
  %13448 = add <16 x i16> %13423, %13416
  %13449 = add <16 x i16> %13448, %13430
  %13450 = add <16 x i16> %13449, %13437
  %13451 = add <16 x i16> %13450, %13444
  %13452 = add <16 x i16> %13426, %13419
  %13453 = add <16 x i16> %13452, %13433
  %13454 = add <16 x i16> %13453, %13440
  %13455 = add <16 x i16> %13454, %13447
  %13456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13451, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13455, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13458 = shufflevector <16 x i16> %13456, <16 x i16> %13457, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13459 = lshr <32 x i16> %13458, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13460 = shufflevector <32 x i16> %13459, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13461 = add nsw i64 %13249, %13412
  %13462 = getelementptr inbounds i16, i16* %66, i64 %13461
  %13463 = bitcast i16* %13462 to <16 x i16>*
  store <16 x i16> %13460, <16 x i16>* %13463, align 2, !tbaa !401
  %13464 = shufflevector <32 x i16> %13459, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13465 = getelementptr inbounds i16, i16* %13462, i64 16
  %13466 = bitcast i16* %13465 to <16 x i16>*
  store <16 x i16> %13464, <16 x i16>* %13466, align 2, !tbaa !401
  %13467 = add nuw nsw i32 %blur_y.s0.x.x.rebased722, 1
  %.not2700 = icmp eq i32 %13467, %t1683
  br i1 %.not2700, label %"end for blur_y.s0.x.x.rebased721", label %"for blur_y.s0.x.x.rebased720"

after_bb729:                                      ; preds = %"end for blur_y.s0.x.x.rebased721", %"produce blur_x732"
  br i1 %100, label %"for blur_y.s0.x.x.rebased734.preheader", label %"end for blur_y.s0.x.x.rebased735", !prof !386

"for blur_y.s0.x.x.rebased734.preheader":         ; preds = %after_bb729
  %13468 = sext i32 %t1688 to i64
  %13469 = zext i32 %.pre-phi3504 to i64
  %13470 = mul nsw i64 %13469, %112
  %13471 = sub nsw i64 %13470, %96
  %13472 = zext i32 %.pre-phi3498 to i64
  %13473 = mul nsw i64 %13472, %112
  %13474 = sub nsw i64 %13473, %96
  %13475 = zext i32 %.pre-phi3510 to i64
  %13476 = mul nsw i64 %13475, %112
  %13477 = sub nsw i64 %13476, %96
  %13478 = zext i32 %.pre-phi3480 to i64
  %13479 = mul nsw i64 %13478, %112
  %13480 = sub nsw i64 %13479, %96
  %13481 = zext i32 %.pre-phi to i64
  %13482 = mul nsw i64 %13481, %112
  %13483 = sub nsw i64 %13482, %96
  %13484 = sext i32 %a26 to i64
  %13485 = add nsw i64 %13484, 29
  %13486 = mul nsw i64 %13485, %113
  %13487 = add nsw i64 %13486, %116
  br label %"for blur_y.s0.x.x.rebased734"

"produce blur_x732":                              ; preds = %"end for blur_y.s0.x.x.rebased721"
  %13488 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %13489 = getelementptr inbounds i16, i16* %13488, i64 -31
  %13490 = bitcast i16* %13489 to <16 x i16>*
  %13491 = load <16 x i16>, <16 x i16>* %13490, align 2, !tbaa !396
  %13492 = getelementptr inbounds i16, i16* %13488, i64 -15
  %13493 = bitcast i16* %13492 to <16 x i16>*
  %13494 = load <16 x i16>, <16 x i16>* %13493, align 2, !tbaa !396
  %13495 = getelementptr inbounds i16, i16* %13488, i64 -32
  %13496 = bitcast i16* %13495 to <16 x i16>*
  %13497 = load <16 x i16>, <16 x i16>* %13496, align 2, !tbaa !396
  %13498 = getelementptr inbounds i16, i16* %13488, i64 -16
  %13499 = bitcast i16* %13498 to <16 x i16>*
  %13500 = load <16 x i16>, <16 x i16>* %13499, align 2, !tbaa !396
  %13501 = getelementptr inbounds i16, i16* %13488, i64 -30
  %13502 = bitcast i16* %13501 to <16 x i16>*
  %13503 = load <16 x i16>, <16 x i16>* %13502, align 2, !tbaa !396
  %13504 = getelementptr inbounds i16, i16* %13488, i64 -14
  %13505 = bitcast i16* %13504 to <16 x i16>*
  %13506 = load <16 x i16>, <16 x i16>* %13505, align 2, !tbaa !396
  %13507 = getelementptr inbounds i16, i16* %13488, i64 -28
  %13508 = bitcast i16* %13507 to <16 x i16>*
  %13509 = load <16 x i16>, <16 x i16>* %13508, align 2, !tbaa !396
  %13510 = getelementptr inbounds i16, i16* %13488, i64 -12
  %13511 = bitcast i16* %13510 to <16 x i16>*
  %13512 = load <16 x i16>, <16 x i16>* %13511, align 2, !tbaa !396
  %13513 = getelementptr inbounds i16, i16* %13488, i64 -29
  %13514 = bitcast i16* %13513 to <16 x i16>*
  %13515 = load <16 x i16>, <16 x i16>* %13514, align 2, !tbaa !396
  %13516 = getelementptr inbounds i16, i16* %13488, i64 -13
  %13517 = bitcast i16* %13516 to <16 x i16>*
  %13518 = load <16 x i16>, <16 x i16>* %13517, align 2, !tbaa !396
  %13519 = add <16 x i16> %13497, %13491
  %13520 = add <16 x i16> %13519, %13503
  %13521 = add <16 x i16> %13520, %13509
  %13522 = add <16 x i16> %13521, %13515
  %13523 = add <16 x i16> %13500, %13494
  %13524 = add <16 x i16> %13523, %13506
  %13525 = add <16 x i16> %13524, %13512
  %13526 = add <16 x i16> %13525, %13518
  %13527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13522, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13526, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13529 = shufflevector <16 x i16> %13527, <16 x i16> %13528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13530 = lshr <32 x i16> %13529, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13531 = shufflevector <32 x i16> %13530, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13532 = zext i32 %.pre-phi3480 to i64
  %13533 = mul nsw i64 %97, %13532
  %13534 = add nsw i64 %99, %13533
  %13535 = getelementptr inbounds i16, i16* %blur_x, i64 %13534
  %13536 = getelementptr inbounds i16, i16* %13535, i64 -32
  %13537 = bitcast i16* %13536 to <16 x i16>*
  store <16 x i16> %13531, <16 x i16>* %13537, align 2, !tbaa !399
  %13538 = shufflevector <32 x i16> %13530, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13539 = getelementptr inbounds i16, i16* %13535, i64 -16
  %13540 = bitcast i16* %13539 to <16 x i16>*
  store <16 x i16> %13538, <16 x i16>* %13540, align 2, !tbaa !399
  %13541 = zext i32 %.pre-phi3504 to i64
  %13542 = mul nsw i64 %13541, %112
  %13543 = add nsw i64 %13542, %94
  %13544 = getelementptr inbounds i16, i16* %blur_x, i64 %13543
  %13545 = getelementptr inbounds i16, i16* %13544, i64 -32
  %13546 = bitcast i16* %13545 to <16 x i16>*
  %13547 = load <16 x i16>, <16 x i16>* %13546, align 2, !tbaa !399
  %13548 = getelementptr inbounds i16, i16* %13544, i64 -16
  %13549 = bitcast i16* %13548 to <16 x i16>*
  %13550 = load <16 x i16>, <16 x i16>* %13549, align 2, !tbaa !399
  %13551 = zext i32 %.pre-phi3498 to i64
  %13552 = mul nsw i64 %13551, %112
  %13553 = add nsw i64 %13552, %94
  %13554 = getelementptr inbounds i16, i16* %blur_x, i64 %13553
  %13555 = getelementptr inbounds i16, i16* %13554, i64 -32
  %13556 = bitcast i16* %13555 to <16 x i16>*
  %13557 = load <16 x i16>, <16 x i16>* %13556, align 2, !tbaa !399
  %13558 = getelementptr inbounds i16, i16* %13554, i64 -16
  %13559 = bitcast i16* %13558 to <16 x i16>*
  %13560 = load <16 x i16>, <16 x i16>* %13559, align 2, !tbaa !399
  %13561 = zext i32 %.pre-phi3510 to i64
  %13562 = mul nsw i64 %13561, %112
  %13563 = add nsw i64 %13562, %94
  %13564 = getelementptr inbounds i16, i16* %blur_x, i64 %13563
  %13565 = getelementptr inbounds i16, i16* %13564, i64 -32
  %13566 = bitcast i16* %13565 to <16 x i16>*
  %13567 = load <16 x i16>, <16 x i16>* %13566, align 2, !tbaa !399
  %13568 = getelementptr inbounds i16, i16* %13564, i64 -16
  %13569 = bitcast i16* %13568 to <16 x i16>*
  %13570 = load <16 x i16>, <16 x i16>* %13569, align 2, !tbaa !399
  %13571 = mul nsw i64 %13532, %112
  %13572 = add nsw i64 %13571, %94
  %13573 = getelementptr inbounds i16, i16* %blur_x, i64 %13572
  %13574 = getelementptr inbounds i16, i16* %13573, i64 -32
  %13575 = bitcast i16* %13574 to <16 x i16>*
  %13576 = load <16 x i16>, <16 x i16>* %13575, align 2, !tbaa !399
  %13577 = getelementptr inbounds i16, i16* %13573, i64 -16
  %13578 = bitcast i16* %13577 to <16 x i16>*
  %13579 = load <16 x i16>, <16 x i16>* %13578, align 2, !tbaa !399
  %13580 = zext i32 %.pre-phi to i64
  %13581 = mul nsw i64 %13580, %112
  %13582 = add nsw i64 %13581, %94
  %13583 = getelementptr inbounds i16, i16* %blur_x, i64 %13582
  %13584 = getelementptr inbounds i16, i16* %13583, i64 -32
  %13585 = bitcast i16* %13584 to <16 x i16>*
  %13586 = load <16 x i16>, <16 x i16>* %13585, align 2, !tbaa !399
  %13587 = getelementptr inbounds i16, i16* %13583, i64 -16
  %13588 = bitcast i16* %13587 to <16 x i16>*
  %13589 = load <16 x i16>, <16 x i16>* %13588, align 2, !tbaa !399
  %13590 = add <16 x i16> %13557, %13547
  %13591 = add <16 x i16> %13590, %13567
  %13592 = add <16 x i16> %13591, %13576
  %13593 = add <16 x i16> %13592, %13586
  %13594 = add <16 x i16> %13560, %13550
  %13595 = add <16 x i16> %13594, %13570
  %13596 = add <16 x i16> %13595, %13579
  %13597 = add <16 x i16> %13596, %13589
  %13598 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13593, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13599 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13597, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13600 = shufflevector <16 x i16> %13598, <16 x i16> %13599, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13601 = lshr <32 x i16> %13600, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13602 = shufflevector <32 x i16> %13601, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13603 = sext i32 %a26 to i64
  %13604 = add nsw i64 %13603, 29
  %13605 = mul nsw i64 %13604, %113
  %13606 = add nsw i64 %115, %13605
  %13607 = getelementptr inbounds i16, i16* %66, i64 %13606
  %13608 = getelementptr inbounds i16, i16* %13607, i64 -32
  %13609 = bitcast i16* %13608 to <16 x i16>*
  store <16 x i16> %13602, <16 x i16>* %13609, align 2, !tbaa !401
  %13610 = shufflevector <32 x i16> %13601, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13611 = getelementptr inbounds i16, i16* %13607, i64 -16
  %13612 = bitcast i16* %13611 to <16 x i16>*
  store <16 x i16> %13610, <16 x i16>* %13612, align 2, !tbaa !401
  br label %after_bb729

"for blur_y.s0.x.x.rebased734":                   ; preds = %"for blur_y.s0.x.x.rebased734.preheader", %"consume blur_x741"
  %indvars.iv3346 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased734.preheader" ], [ %indvars.iv.next3347, %"consume blur_x741" ]
  %13613 = add nsw i64 %indvars.iv3346, %101
  %13614 = icmp slt i64 %13613, 1
  %13615 = trunc i64 %13613 to i32
  %13616 = shl nsw i32 %13615, 5
  %13617 = icmp sgt i32 %4, %13616
  %13618 = or i1 %13614, %13617
  br i1 %13618, label %"produce blur_x740", label %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge"

"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased734"
  %.pre3563 = shl nsw i64 %13613, 5
  br label %"consume blur_x741"

"end for blur_y.s0.x.x.rebased735":               ; preds = %"consume blur_x741", %after_bb729
  br i1 %102, label %"for blur_y.s0.x.x.rebased742.preheader", label %"end for blur_y.s0.x.x.rebased743", !prof !386

"for blur_y.s0.x.x.rebased742.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased735"
  %13619 = sext i32 %t1688 to i64
  %13620 = zext i32 %.pre-phi3504 to i64
  %13621 = mul nsw i64 %13620, %112
  %13622 = sub nsw i64 %13621, %96
  %13623 = zext i32 %.pre-phi3498 to i64
  %13624 = mul nsw i64 %13623, %112
  %13625 = sub nsw i64 %13624, %96
  %13626 = zext i32 %.pre-phi3510 to i64
  %13627 = mul nsw i64 %13626, %112
  %13628 = sub nsw i64 %13627, %96
  %13629 = zext i32 %.pre-phi3480 to i64
  %13630 = mul nsw i64 %13629, %112
  %13631 = sub nsw i64 %13630, %96
  %13632 = zext i32 %.pre-phi to i64
  %13633 = mul nsw i64 %13632, %112
  %13634 = sub nsw i64 %13633, %96
  %13635 = sext i32 %a26 to i64
  %13636 = add nsw i64 %13635, 29
  %13637 = mul nsw i64 %13636, %113
  %13638 = add nsw i64 %13637, %116
  br label %"for blur_y.s0.x.x.rebased742"

"produce blur_x740":                              ; preds = %"for blur_y.s0.x.x.rebased734"
  %t1176 = add nsw i32 %13616, %t2169
  %13639 = sext i32 %t1176 to i64
  %13640 = getelementptr inbounds i16, i16* %read_input, i64 %13639
  %13641 = getelementptr inbounds i16, i16* %13640, i64 1
  %13642 = bitcast i16* %13641 to <16 x i16>*
  %13643 = load <16 x i16>, <16 x i16>* %13642, align 2, !tbaa !396
  %13644 = getelementptr inbounds i16, i16* %13640, i64 17
  %13645 = bitcast i16* %13644 to <16 x i16>*
  %13646 = load <16 x i16>, <16 x i16>* %13645, align 2, !tbaa !396
  %13647 = bitcast i16* %13640 to <16 x i16>*
  %13648 = load <16 x i16>, <16 x i16>* %13647, align 2, !tbaa !396
  %13649 = getelementptr inbounds i16, i16* %13640, i64 16
  %13650 = bitcast i16* %13649 to <16 x i16>*
  %13651 = load <16 x i16>, <16 x i16>* %13650, align 2, !tbaa !396
  %13652 = getelementptr inbounds i16, i16* %13640, i64 2
  %13653 = bitcast i16* %13652 to <16 x i16>*
  %13654 = load <16 x i16>, <16 x i16>* %13653, align 2, !tbaa !396
  %13655 = getelementptr inbounds i16, i16* %13640, i64 18
  %13656 = bitcast i16* %13655 to <16 x i16>*
  %13657 = load <16 x i16>, <16 x i16>* %13656, align 2, !tbaa !396
  %13658 = getelementptr inbounds i16, i16* %13640, i64 4
  %13659 = bitcast i16* %13658 to <16 x i16>*
  %13660 = load <16 x i16>, <16 x i16>* %13659, align 2, !tbaa !396
  %13661 = getelementptr inbounds i16, i16* %13640, i64 20
  %13662 = bitcast i16* %13661 to <16 x i16>*
  %13663 = load <16 x i16>, <16 x i16>* %13662, align 2, !tbaa !396
  %13664 = getelementptr inbounds i16, i16* %13640, i64 3
  %13665 = bitcast i16* %13664 to <16 x i16>*
  %13666 = load <16 x i16>, <16 x i16>* %13665, align 2, !tbaa !396
  %13667 = getelementptr inbounds i16, i16* %13640, i64 19
  %13668 = bitcast i16* %13667 to <16 x i16>*
  %13669 = load <16 x i16>, <16 x i16>* %13668, align 2, !tbaa !396
  %13670 = add <16 x i16> %13648, %13643
  %13671 = add <16 x i16> %13670, %13654
  %13672 = add <16 x i16> %13671, %13660
  %13673 = add <16 x i16> %13672, %13666
  %13674 = add <16 x i16> %13651, %13646
  %13675 = add <16 x i16> %13674, %13657
  %13676 = add <16 x i16> %13675, %13663
  %13677 = add <16 x i16> %13676, %13669
  %13678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13673, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13677, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13680 = shufflevector <16 x i16> %13678, <16 x i16> %13679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13681 = lshr <32 x i16> %13680, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13682 = shufflevector <32 x i16> %13681, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13683 = shl nsw i64 %13613, 5
  %13684 = add nsw i64 %13683, %13468
  %13685 = getelementptr inbounds i16, i16* %blur_x, i64 %13684
  %13686 = bitcast i16* %13685 to <16 x i16>*
  store <16 x i16> %13682, <16 x i16>* %13686, align 2, !tbaa !399
  %13687 = shufflevector <32 x i16> %13681, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13688 = getelementptr inbounds i16, i16* %13685, i64 16
  %13689 = bitcast i16* %13688 to <16 x i16>*
  store <16 x i16> %13687, <16 x i16>* %13689, align 2, !tbaa !399
  br label %"consume blur_x741"

"consume blur_x741":                              ; preds = %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge", %"produce blur_x740"
  %.pre-phi3564 = phi i64 [ %.pre3563, %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge" ], [ %13683, %"produce blur_x740" ]
  %13690 = add nsw i64 %13471, %.pre-phi3564
  %13691 = getelementptr inbounds i16, i16* %blur_x, i64 %13690
  %13692 = bitcast i16* %13691 to <16 x i16>*
  %13693 = load <16 x i16>, <16 x i16>* %13692, align 2, !tbaa !399
  %13694 = getelementptr inbounds i16, i16* %13691, i64 16
  %13695 = bitcast i16* %13694 to <16 x i16>*
  %13696 = load <16 x i16>, <16 x i16>* %13695, align 2, !tbaa !399
  %13697 = add nsw i64 %13474, %.pre-phi3564
  %13698 = getelementptr inbounds i16, i16* %blur_x, i64 %13697
  %13699 = bitcast i16* %13698 to <16 x i16>*
  %13700 = load <16 x i16>, <16 x i16>* %13699, align 2, !tbaa !399
  %13701 = getelementptr inbounds i16, i16* %13698, i64 16
  %13702 = bitcast i16* %13701 to <16 x i16>*
  %13703 = load <16 x i16>, <16 x i16>* %13702, align 2, !tbaa !399
  %13704 = add nsw i64 %13477, %.pre-phi3564
  %13705 = getelementptr inbounds i16, i16* %blur_x, i64 %13704
  %13706 = bitcast i16* %13705 to <16 x i16>*
  %13707 = load <16 x i16>, <16 x i16>* %13706, align 2, !tbaa !399
  %13708 = getelementptr inbounds i16, i16* %13705, i64 16
  %13709 = bitcast i16* %13708 to <16 x i16>*
  %13710 = load <16 x i16>, <16 x i16>* %13709, align 2, !tbaa !399
  %13711 = add nsw i64 %13480, %.pre-phi3564
  %13712 = getelementptr inbounds i16, i16* %blur_x, i64 %13711
  %13713 = bitcast i16* %13712 to <16 x i16>*
  %13714 = load <16 x i16>, <16 x i16>* %13713, align 2, !tbaa !399
  %13715 = getelementptr inbounds i16, i16* %13712, i64 16
  %13716 = bitcast i16* %13715 to <16 x i16>*
  %13717 = load <16 x i16>, <16 x i16>* %13716, align 2, !tbaa !399
  %13718 = add nsw i64 %13483, %.pre-phi3564
  %13719 = getelementptr inbounds i16, i16* %blur_x, i64 %13718
  %13720 = bitcast i16* %13719 to <16 x i16>*
  %13721 = load <16 x i16>, <16 x i16>* %13720, align 2, !tbaa !399
  %13722 = getelementptr inbounds i16, i16* %13719, i64 16
  %13723 = bitcast i16* %13722 to <16 x i16>*
  %13724 = load <16 x i16>, <16 x i16>* %13723, align 2, !tbaa !399
  %13725 = add <16 x i16> %13700, %13693
  %13726 = add <16 x i16> %13725, %13707
  %13727 = add <16 x i16> %13726, %13714
  %13728 = add <16 x i16> %13727, %13721
  %13729 = add <16 x i16> %13703, %13696
  %13730 = add <16 x i16> %13729, %13710
  %13731 = add <16 x i16> %13730, %13717
  %13732 = add <16 x i16> %13731, %13724
  %13733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13728, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13732, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13735 = shufflevector <16 x i16> %13733, <16 x i16> %13734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13736 = lshr <32 x i16> %13735, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13737 = shufflevector <32 x i16> %13736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13738 = add nsw i64 %13487, %.pre-phi3564
  %13739 = getelementptr inbounds i16, i16* %66, i64 %13738
  %13740 = bitcast i16* %13739 to <16 x i16>*
  store <16 x i16> %13737, <16 x i16>* %13740, align 2, !tbaa !401
  %13741 = shufflevector <32 x i16> %13736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13742 = getelementptr inbounds i16, i16* %13739, i64 16
  %13743 = bitcast i16* %13742 to <16 x i16>*
  store <16 x i16> %13741, <16 x i16>* %13743, align 2, !tbaa !401
  %indvars.iv.next3347 = add nuw nsw i64 %indvars.iv3346, 1
  %.not2699 = icmp eq i64 %indvars.iv.next3347, %184
  br i1 %.not2699, label %"end for blur_y.s0.x.x.rebased735", label %"for blur_y.s0.x.x.rebased734"

"for blur_y.s0.x.x.rebased742":                   ; preds = %"for blur_y.s0.x.x.rebased742.preheader", %"consume blur_x750"
  %blur_y.s0.x.x.rebased744 = phi i32 [ %13856, %"consume blur_x750" ], [ 0, %"for blur_y.s0.x.x.rebased742.preheader" ]
  %13744 = add nsw i32 %blur_y.s0.x.x.rebased744, %t1626
  %a308 = shl nsw i32 %13744, 5
  %13745 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %13745, i32 %a308, i32 %a14
  %13746 = icmp slt i32 %13744, 1
  %13747 = icmp sgt i32 %4, %a308
  %13748 = or i1 %13746, %13747
  br i1 %13748, label %"produce blur_x748", label %"consume blur_x750"

"end for blur_y.s0.x.x.rebased743":               ; preds = %"consume blur_x750", %"end for blur_y.s0.x.x.rebased735"
  br i1 %34, label %"produce blur_x754", label %after_bb751

"produce blur_x748":                              ; preds = %"for blur_y.s0.x.x.rebased742"
  %13749 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s749 = select i1 %13749, i32 %b314, i32 %4
  %t1181 = add nsw i32 %blur_x.s0.x.v1.base.s749, %t2169
  %13750 = sext i32 %t1181 to i64
  %13751 = getelementptr inbounds i16, i16* %read_input, i64 %13750
  %13752 = getelementptr inbounds i16, i16* %13751, i64 1
  %13753 = bitcast i16* %13752 to <16 x i16>*
  %13754 = load <16 x i16>, <16 x i16>* %13753, align 2, !tbaa !396
  %13755 = getelementptr inbounds i16, i16* %13751, i64 17
  %13756 = bitcast i16* %13755 to <16 x i16>*
  %13757 = load <16 x i16>, <16 x i16>* %13756, align 2, !tbaa !396
  %13758 = bitcast i16* %13751 to <16 x i16>*
  %13759 = load <16 x i16>, <16 x i16>* %13758, align 2, !tbaa !396
  %13760 = getelementptr inbounds i16, i16* %13751, i64 16
  %13761 = bitcast i16* %13760 to <16 x i16>*
  %13762 = load <16 x i16>, <16 x i16>* %13761, align 2, !tbaa !396
  %13763 = getelementptr inbounds i16, i16* %13751, i64 2
  %13764 = bitcast i16* %13763 to <16 x i16>*
  %13765 = load <16 x i16>, <16 x i16>* %13764, align 2, !tbaa !396
  %13766 = getelementptr inbounds i16, i16* %13751, i64 18
  %13767 = bitcast i16* %13766 to <16 x i16>*
  %13768 = load <16 x i16>, <16 x i16>* %13767, align 2, !tbaa !396
  %13769 = getelementptr inbounds i16, i16* %13751, i64 4
  %13770 = bitcast i16* %13769 to <16 x i16>*
  %13771 = load <16 x i16>, <16 x i16>* %13770, align 2, !tbaa !396
  %13772 = getelementptr inbounds i16, i16* %13751, i64 20
  %13773 = bitcast i16* %13772 to <16 x i16>*
  %13774 = load <16 x i16>, <16 x i16>* %13773, align 2, !tbaa !396
  %13775 = getelementptr inbounds i16, i16* %13751, i64 3
  %13776 = bitcast i16* %13775 to <16 x i16>*
  %13777 = load <16 x i16>, <16 x i16>* %13776, align 2, !tbaa !396
  %13778 = getelementptr inbounds i16, i16* %13751, i64 19
  %13779 = bitcast i16* %13778 to <16 x i16>*
  %13780 = load <16 x i16>, <16 x i16>* %13779, align 2, !tbaa !396
  %13781 = add <16 x i16> %13759, %13754
  %13782 = add <16 x i16> %13781, %13765
  %13783 = add <16 x i16> %13782, %13771
  %13784 = add <16 x i16> %13783, %13777
  %13785 = add <16 x i16> %13762, %13757
  %13786 = add <16 x i16> %13785, %13768
  %13787 = add <16 x i16> %13786, %13774
  %13788 = add <16 x i16> %13787, %13780
  %13789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13784, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13788, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13791 = shufflevector <16 x i16> %13789, <16 x i16> %13790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13792 = lshr <32 x i16> %13791, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13793 = shufflevector <32 x i16> %13792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13794 = sext i32 %blur_x.s0.x.v1.base.s749 to i64
  %13795 = add nsw i64 %13794, %13619
  %13796 = getelementptr inbounds i16, i16* %blur_x, i64 %13795
  %13797 = bitcast i16* %13796 to <16 x i16>*
  store <16 x i16> %13793, <16 x i16>* %13797, align 2, !tbaa !399
  %13798 = shufflevector <32 x i16> %13792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13799 = getelementptr inbounds i16, i16* %13796, i64 16
  %13800 = bitcast i16* %13799 to <16 x i16>*
  store <16 x i16> %13798, <16 x i16>* %13800, align 2, !tbaa !399
  br label %"consume blur_x750"

"consume blur_x750":                              ; preds = %"for blur_y.s0.x.x.rebased742", %"produce blur_x748"
  %13801 = sext i32 %b314 to i64
  %13802 = add nsw i64 %13622, %13801
  %13803 = getelementptr inbounds i16, i16* %blur_x, i64 %13802
  %13804 = bitcast i16* %13803 to <16 x i16>*
  %13805 = load <16 x i16>, <16 x i16>* %13804, align 2, !tbaa !399
  %13806 = getelementptr inbounds i16, i16* %13803, i64 16
  %13807 = bitcast i16* %13806 to <16 x i16>*
  %13808 = load <16 x i16>, <16 x i16>* %13807, align 2, !tbaa !399
  %13809 = add nsw i64 %13625, %13801
  %13810 = getelementptr inbounds i16, i16* %blur_x, i64 %13809
  %13811 = bitcast i16* %13810 to <16 x i16>*
  %13812 = load <16 x i16>, <16 x i16>* %13811, align 2, !tbaa !399
  %13813 = getelementptr inbounds i16, i16* %13810, i64 16
  %13814 = bitcast i16* %13813 to <16 x i16>*
  %13815 = load <16 x i16>, <16 x i16>* %13814, align 2, !tbaa !399
  %13816 = add nsw i64 %13628, %13801
  %13817 = getelementptr inbounds i16, i16* %blur_x, i64 %13816
  %13818 = bitcast i16* %13817 to <16 x i16>*
  %13819 = load <16 x i16>, <16 x i16>* %13818, align 2, !tbaa !399
  %13820 = getelementptr inbounds i16, i16* %13817, i64 16
  %13821 = bitcast i16* %13820 to <16 x i16>*
  %13822 = load <16 x i16>, <16 x i16>* %13821, align 2, !tbaa !399
  %13823 = add nsw i64 %13631, %13801
  %13824 = getelementptr inbounds i16, i16* %blur_x, i64 %13823
  %13825 = bitcast i16* %13824 to <16 x i16>*
  %13826 = load <16 x i16>, <16 x i16>* %13825, align 2, !tbaa !399
  %13827 = getelementptr inbounds i16, i16* %13824, i64 16
  %13828 = bitcast i16* %13827 to <16 x i16>*
  %13829 = load <16 x i16>, <16 x i16>* %13828, align 2, !tbaa !399
  %13830 = add nsw i64 %13634, %13801
  %13831 = getelementptr inbounds i16, i16* %blur_x, i64 %13830
  %13832 = bitcast i16* %13831 to <16 x i16>*
  %13833 = load <16 x i16>, <16 x i16>* %13832, align 2, !tbaa !399
  %13834 = getelementptr inbounds i16, i16* %13831, i64 16
  %13835 = bitcast i16* %13834 to <16 x i16>*
  %13836 = load <16 x i16>, <16 x i16>* %13835, align 2, !tbaa !399
  %13837 = add <16 x i16> %13812, %13805
  %13838 = add <16 x i16> %13837, %13819
  %13839 = add <16 x i16> %13838, %13826
  %13840 = add <16 x i16> %13839, %13833
  %13841 = add <16 x i16> %13815, %13808
  %13842 = add <16 x i16> %13841, %13822
  %13843 = add <16 x i16> %13842, %13829
  %13844 = add <16 x i16> %13843, %13836
  %13845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13840, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13844, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13847 = shufflevector <16 x i16> %13845, <16 x i16> %13846, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13848 = lshr <32 x i16> %13847, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13849 = shufflevector <32 x i16> %13848, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13850 = add nsw i64 %13638, %13801
  %13851 = getelementptr inbounds i16, i16* %66, i64 %13850
  %13852 = bitcast i16* %13851 to <16 x i16>*
  store <16 x i16> %13849, <16 x i16>* %13852, align 2, !tbaa !401
  %13853 = shufflevector <32 x i16> %13848, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13854 = getelementptr inbounds i16, i16* %13851, i64 16
  %13855 = bitcast i16* %13854 to <16 x i16>*
  store <16 x i16> %13853, <16 x i16>* %13855, align 2, !tbaa !401
  %13856 = add nuw nsw i32 %blur_y.s0.x.x.rebased744, 1
  %.not2698 = icmp eq i32 %13856, %t1683
  br i1 %.not2698, label %"end for blur_y.s0.x.x.rebased743", label %"for blur_y.s0.x.x.rebased742"

after_bb751:                                      ; preds = %"end for blur_y.s0.x.x.rebased743", %"produce blur_x754"
  br i1 %100, label %"for blur_y.s0.x.x.rebased756.preheader", label %"end for blur_y.s0.x.x.rebased757", !prof !386

"for blur_y.s0.x.x.rebased756.preheader":         ; preds = %after_bb751
  %13857 = sext i32 %t1694 to i64
  %13858 = zext i32 %.pre-phi3510 to i64
  %13859 = mul nsw i64 %13858, %112
  %13860 = sub nsw i64 %13859, %96
  %13861 = zext i32 %.pre-phi3504 to i64
  %13862 = mul nsw i64 %13861, %112
  %13863 = sub nsw i64 %13862, %96
  %13864 = zext i32 %.pre-phi to i64
  %13865 = mul nsw i64 %13864, %112
  %13866 = sub nsw i64 %13865, %96
  %13867 = zext i32 %.pre-phi3484 to i64
  %13868 = mul nsw i64 %13867, %112
  %13869 = sub nsw i64 %13868, %96
  %13870 = zext i32 %.pre-phi3480 to i64
  %13871 = mul nsw i64 %13870, %112
  %13872 = sub nsw i64 %13871, %96
  %13873 = sext i32 %a26 to i64
  %13874 = add nsw i64 %13873, 30
  %13875 = mul nsw i64 %13874, %113
  %13876 = add nsw i64 %13875, %116
  br label %"for blur_y.s0.x.x.rebased756"

"produce blur_x754":                              ; preds = %"end for blur_y.s0.x.x.rebased743"
  %13877 = getelementptr inbounds i16, i16* %read_input, i64 %175
  %13878 = getelementptr inbounds i16, i16* %13877, i64 -31
  %13879 = bitcast i16* %13878 to <16 x i16>*
  %13880 = load <16 x i16>, <16 x i16>* %13879, align 2, !tbaa !396
  %13881 = getelementptr inbounds i16, i16* %13877, i64 -15
  %13882 = bitcast i16* %13881 to <16 x i16>*
  %13883 = load <16 x i16>, <16 x i16>* %13882, align 2, !tbaa !396
  %13884 = getelementptr inbounds i16, i16* %13877, i64 -32
  %13885 = bitcast i16* %13884 to <16 x i16>*
  %13886 = load <16 x i16>, <16 x i16>* %13885, align 2, !tbaa !396
  %13887 = getelementptr inbounds i16, i16* %13877, i64 -16
  %13888 = bitcast i16* %13887 to <16 x i16>*
  %13889 = load <16 x i16>, <16 x i16>* %13888, align 2, !tbaa !396
  %13890 = getelementptr inbounds i16, i16* %13877, i64 -30
  %13891 = bitcast i16* %13890 to <16 x i16>*
  %13892 = load <16 x i16>, <16 x i16>* %13891, align 2, !tbaa !396
  %13893 = getelementptr inbounds i16, i16* %13877, i64 -14
  %13894 = bitcast i16* %13893 to <16 x i16>*
  %13895 = load <16 x i16>, <16 x i16>* %13894, align 2, !tbaa !396
  %13896 = getelementptr inbounds i16, i16* %13877, i64 -28
  %13897 = bitcast i16* %13896 to <16 x i16>*
  %13898 = load <16 x i16>, <16 x i16>* %13897, align 2, !tbaa !396
  %13899 = getelementptr inbounds i16, i16* %13877, i64 -12
  %13900 = bitcast i16* %13899 to <16 x i16>*
  %13901 = load <16 x i16>, <16 x i16>* %13900, align 2, !tbaa !396
  %13902 = getelementptr inbounds i16, i16* %13877, i64 -29
  %13903 = bitcast i16* %13902 to <16 x i16>*
  %13904 = load <16 x i16>, <16 x i16>* %13903, align 2, !tbaa !396
  %13905 = getelementptr inbounds i16, i16* %13877, i64 -13
  %13906 = bitcast i16* %13905 to <16 x i16>*
  %13907 = load <16 x i16>, <16 x i16>* %13906, align 2, !tbaa !396
  %13908 = add <16 x i16> %13886, %13880
  %13909 = add <16 x i16> %13908, %13892
  %13910 = add <16 x i16> %13909, %13898
  %13911 = add <16 x i16> %13910, %13904
  %13912 = add <16 x i16> %13889, %13883
  %13913 = add <16 x i16> %13912, %13895
  %13914 = add <16 x i16> %13913, %13901
  %13915 = add <16 x i16> %13914, %13907
  %13916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13911, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13917 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13915, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13918 = shufflevector <16 x i16> %13916, <16 x i16> %13917, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13919 = lshr <32 x i16> %13918, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13920 = shufflevector <32 x i16> %13919, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13921 = zext i32 %.pre-phi3484 to i64
  %13922 = mul nsw i64 %97, %13921
  %13923 = add nsw i64 %99, %13922
  %13924 = getelementptr inbounds i16, i16* %blur_x, i64 %13923
  %13925 = getelementptr inbounds i16, i16* %13924, i64 -32
  %13926 = bitcast i16* %13925 to <16 x i16>*
  store <16 x i16> %13920, <16 x i16>* %13926, align 2, !tbaa !399
  %13927 = shufflevector <32 x i16> %13919, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13928 = getelementptr inbounds i16, i16* %13924, i64 -16
  %13929 = bitcast i16* %13928 to <16 x i16>*
  store <16 x i16> %13927, <16 x i16>* %13929, align 2, !tbaa !399
  %13930 = zext i32 %.pre-phi3510 to i64
  %13931 = mul nsw i64 %13930, %112
  %13932 = add nsw i64 %13931, %94
  %13933 = getelementptr inbounds i16, i16* %blur_x, i64 %13932
  %13934 = getelementptr inbounds i16, i16* %13933, i64 -32
  %13935 = bitcast i16* %13934 to <16 x i16>*
  %13936 = load <16 x i16>, <16 x i16>* %13935, align 2, !tbaa !399
  %13937 = getelementptr inbounds i16, i16* %13933, i64 -16
  %13938 = bitcast i16* %13937 to <16 x i16>*
  %13939 = load <16 x i16>, <16 x i16>* %13938, align 2, !tbaa !399
  %13940 = zext i32 %.pre-phi3504 to i64
  %13941 = mul nsw i64 %13940, %112
  %13942 = add nsw i64 %13941, %94
  %13943 = getelementptr inbounds i16, i16* %blur_x, i64 %13942
  %13944 = getelementptr inbounds i16, i16* %13943, i64 -32
  %13945 = bitcast i16* %13944 to <16 x i16>*
  %13946 = load <16 x i16>, <16 x i16>* %13945, align 2, !tbaa !399
  %13947 = getelementptr inbounds i16, i16* %13943, i64 -16
  %13948 = bitcast i16* %13947 to <16 x i16>*
  %13949 = load <16 x i16>, <16 x i16>* %13948, align 2, !tbaa !399
  %13950 = zext i32 %.pre-phi to i64
  %13951 = mul nsw i64 %13950, %112
  %13952 = add nsw i64 %13951, %94
  %13953 = getelementptr inbounds i16, i16* %blur_x, i64 %13952
  %13954 = getelementptr inbounds i16, i16* %13953, i64 -32
  %13955 = bitcast i16* %13954 to <16 x i16>*
  %13956 = load <16 x i16>, <16 x i16>* %13955, align 2, !tbaa !399
  %13957 = getelementptr inbounds i16, i16* %13953, i64 -16
  %13958 = bitcast i16* %13957 to <16 x i16>*
  %13959 = load <16 x i16>, <16 x i16>* %13958, align 2, !tbaa !399
  %13960 = mul nsw i64 %13921, %112
  %13961 = add nsw i64 %13960, %94
  %13962 = getelementptr inbounds i16, i16* %blur_x, i64 %13961
  %13963 = getelementptr inbounds i16, i16* %13962, i64 -32
  %13964 = bitcast i16* %13963 to <16 x i16>*
  %13965 = load <16 x i16>, <16 x i16>* %13964, align 2, !tbaa !399
  %13966 = getelementptr inbounds i16, i16* %13962, i64 -16
  %13967 = bitcast i16* %13966 to <16 x i16>*
  %13968 = load <16 x i16>, <16 x i16>* %13967, align 2, !tbaa !399
  %13969 = zext i32 %.pre-phi3480 to i64
  %13970 = mul nsw i64 %13969, %112
  %13971 = add nsw i64 %13970, %94
  %13972 = getelementptr inbounds i16, i16* %blur_x, i64 %13971
  %13973 = getelementptr inbounds i16, i16* %13972, i64 -32
  %13974 = bitcast i16* %13973 to <16 x i16>*
  %13975 = load <16 x i16>, <16 x i16>* %13974, align 2, !tbaa !399
  %13976 = getelementptr inbounds i16, i16* %13972, i64 -16
  %13977 = bitcast i16* %13976 to <16 x i16>*
  %13978 = load <16 x i16>, <16 x i16>* %13977, align 2, !tbaa !399
  %13979 = add <16 x i16> %13946, %13936
  %13980 = add <16 x i16> %13979, %13956
  %13981 = add <16 x i16> %13980, %13965
  %13982 = add <16 x i16> %13981, %13975
  %13983 = add <16 x i16> %13949, %13939
  %13984 = add <16 x i16> %13983, %13959
  %13985 = add <16 x i16> %13984, %13968
  %13986 = add <16 x i16> %13985, %13978
  %13987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13982, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13986, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13989 = shufflevector <16 x i16> %13987, <16 x i16> %13988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13990 = lshr <32 x i16> %13989, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13991 = shufflevector <32 x i16> %13990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13992 = sext i32 %a26 to i64
  %13993 = add nsw i64 %13992, 30
  %13994 = mul nsw i64 %13993, %113
  %13995 = add nsw i64 %115, %13994
  %13996 = getelementptr inbounds i16, i16* %66, i64 %13995
  %13997 = getelementptr inbounds i16, i16* %13996, i64 -32
  %13998 = bitcast i16* %13997 to <16 x i16>*
  store <16 x i16> %13991, <16 x i16>* %13998, align 2, !tbaa !401
  %13999 = shufflevector <32 x i16> %13990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14000 = getelementptr inbounds i16, i16* %13996, i64 -16
  %14001 = bitcast i16* %14000 to <16 x i16>*
  store <16 x i16> %13999, <16 x i16>* %14001, align 2, !tbaa !401
  br label %after_bb751

"for blur_y.s0.x.x.rebased756":                   ; preds = %"for blur_y.s0.x.x.rebased756.preheader", %"consume blur_x763"
  %indvars.iv3349 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased756.preheader" ], [ %indvars.iv.next3350, %"consume blur_x763" ]
  %14002 = add nsw i64 %indvars.iv3349, %101
  %14003 = icmp slt i64 %14002, 1
  %14004 = trunc i64 %14002 to i32
  %14005 = shl nsw i32 %14004, 5
  %14006 = icmp sgt i32 %4, %14005
  %14007 = or i1 %14003, %14006
  br i1 %14007, label %"produce blur_x762", label %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge"

"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased756"
  %.pre3565 = shl nsw i64 %14002, 5
  br label %"consume blur_x763"

"end for blur_y.s0.x.x.rebased757":               ; preds = %"consume blur_x763", %after_bb751
  br i1 %102, label %"for blur_y.s0.x.x.rebased764.preheader", label %"end for blur_y.s0.x.x.rebased765", !prof !386

"for blur_y.s0.x.x.rebased764.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased757"
  %14008 = sext i32 %t1694 to i64
  %14009 = zext i32 %.pre-phi3510 to i64
  %14010 = mul nsw i64 %14009, %112
  %14011 = sub nsw i64 %14010, %96
  %14012 = zext i32 %.pre-phi3504 to i64
  %14013 = mul nsw i64 %14012, %112
  %14014 = sub nsw i64 %14013, %96
  %14015 = zext i32 %.pre-phi to i64
  %14016 = mul nsw i64 %14015, %112
  %14017 = sub nsw i64 %14016, %96
  %14018 = zext i32 %.pre-phi3484 to i64
  %14019 = mul nsw i64 %14018, %112
  %14020 = sub nsw i64 %14019, %96
  %14021 = zext i32 %.pre-phi3480 to i64
  %14022 = mul nsw i64 %14021, %112
  %14023 = sub nsw i64 %14022, %96
  %14024 = sext i32 %a26 to i64
  %14025 = add nsw i64 %14024, 30
  %14026 = mul nsw i64 %14025, %113
  %14027 = add nsw i64 %14026, %116
  br label %"for blur_y.s0.x.x.rebased764"

"produce blur_x762":                              ; preds = %"for blur_y.s0.x.x.rebased756"
  %t1192 = add nsw i32 %14005, %t2185
  %14028 = sext i32 %t1192 to i64
  %14029 = getelementptr inbounds i16, i16* %read_input, i64 %14028
  %14030 = getelementptr inbounds i16, i16* %14029, i64 1
  %14031 = bitcast i16* %14030 to <16 x i16>*
  %14032 = load <16 x i16>, <16 x i16>* %14031, align 2, !tbaa !396
  %14033 = getelementptr inbounds i16, i16* %14029, i64 17
  %14034 = bitcast i16* %14033 to <16 x i16>*
  %14035 = load <16 x i16>, <16 x i16>* %14034, align 2, !tbaa !396
  %14036 = bitcast i16* %14029 to <16 x i16>*
  %14037 = load <16 x i16>, <16 x i16>* %14036, align 2, !tbaa !396
  %14038 = getelementptr inbounds i16, i16* %14029, i64 16
  %14039 = bitcast i16* %14038 to <16 x i16>*
  %14040 = load <16 x i16>, <16 x i16>* %14039, align 2, !tbaa !396
  %14041 = getelementptr inbounds i16, i16* %14029, i64 2
  %14042 = bitcast i16* %14041 to <16 x i16>*
  %14043 = load <16 x i16>, <16 x i16>* %14042, align 2, !tbaa !396
  %14044 = getelementptr inbounds i16, i16* %14029, i64 18
  %14045 = bitcast i16* %14044 to <16 x i16>*
  %14046 = load <16 x i16>, <16 x i16>* %14045, align 2, !tbaa !396
  %14047 = getelementptr inbounds i16, i16* %14029, i64 4
  %14048 = bitcast i16* %14047 to <16 x i16>*
  %14049 = load <16 x i16>, <16 x i16>* %14048, align 2, !tbaa !396
  %14050 = getelementptr inbounds i16, i16* %14029, i64 20
  %14051 = bitcast i16* %14050 to <16 x i16>*
  %14052 = load <16 x i16>, <16 x i16>* %14051, align 2, !tbaa !396
  %14053 = getelementptr inbounds i16, i16* %14029, i64 3
  %14054 = bitcast i16* %14053 to <16 x i16>*
  %14055 = load <16 x i16>, <16 x i16>* %14054, align 2, !tbaa !396
  %14056 = getelementptr inbounds i16, i16* %14029, i64 19
  %14057 = bitcast i16* %14056 to <16 x i16>*
  %14058 = load <16 x i16>, <16 x i16>* %14057, align 2, !tbaa !396
  %14059 = add <16 x i16> %14037, %14032
  %14060 = add <16 x i16> %14059, %14043
  %14061 = add <16 x i16> %14060, %14049
  %14062 = add <16 x i16> %14061, %14055
  %14063 = add <16 x i16> %14040, %14035
  %14064 = add <16 x i16> %14063, %14046
  %14065 = add <16 x i16> %14064, %14052
  %14066 = add <16 x i16> %14065, %14058
  %14067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14062, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14066, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14069 = shufflevector <16 x i16> %14067, <16 x i16> %14068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14070 = lshr <32 x i16> %14069, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14071 = shufflevector <32 x i16> %14070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14072 = shl nsw i64 %14002, 5
  %14073 = add nsw i64 %14072, %13857
  %14074 = getelementptr inbounds i16, i16* %blur_x, i64 %14073
  %14075 = bitcast i16* %14074 to <16 x i16>*
  store <16 x i16> %14071, <16 x i16>* %14075, align 2, !tbaa !399
  %14076 = shufflevector <32 x i16> %14070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14077 = getelementptr inbounds i16, i16* %14074, i64 16
  %14078 = bitcast i16* %14077 to <16 x i16>*
  store <16 x i16> %14076, <16 x i16>* %14078, align 2, !tbaa !399
  br label %"consume blur_x763"

"consume blur_x763":                              ; preds = %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge", %"produce blur_x762"
  %.pre-phi3566 = phi i64 [ %.pre3565, %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge" ], [ %14072, %"produce blur_x762" ]
  %14079 = add nsw i64 %13860, %.pre-phi3566
  %14080 = getelementptr inbounds i16, i16* %blur_x, i64 %14079
  %14081 = bitcast i16* %14080 to <16 x i16>*
  %14082 = load <16 x i16>, <16 x i16>* %14081, align 2, !tbaa !399
  %14083 = getelementptr inbounds i16, i16* %14080, i64 16
  %14084 = bitcast i16* %14083 to <16 x i16>*
  %14085 = load <16 x i16>, <16 x i16>* %14084, align 2, !tbaa !399
  %14086 = add nsw i64 %13863, %.pre-phi3566
  %14087 = getelementptr inbounds i16, i16* %blur_x, i64 %14086
  %14088 = bitcast i16* %14087 to <16 x i16>*
  %14089 = load <16 x i16>, <16 x i16>* %14088, align 2, !tbaa !399
  %14090 = getelementptr inbounds i16, i16* %14087, i64 16
  %14091 = bitcast i16* %14090 to <16 x i16>*
  %14092 = load <16 x i16>, <16 x i16>* %14091, align 2, !tbaa !399
  %14093 = add nsw i64 %13866, %.pre-phi3566
  %14094 = getelementptr inbounds i16, i16* %blur_x, i64 %14093
  %14095 = bitcast i16* %14094 to <16 x i16>*
  %14096 = load <16 x i16>, <16 x i16>* %14095, align 2, !tbaa !399
  %14097 = getelementptr inbounds i16, i16* %14094, i64 16
  %14098 = bitcast i16* %14097 to <16 x i16>*
  %14099 = load <16 x i16>, <16 x i16>* %14098, align 2, !tbaa !399
  %14100 = add nsw i64 %13869, %.pre-phi3566
  %14101 = getelementptr inbounds i16, i16* %blur_x, i64 %14100
  %14102 = bitcast i16* %14101 to <16 x i16>*
  %14103 = load <16 x i16>, <16 x i16>* %14102, align 2, !tbaa !399
  %14104 = getelementptr inbounds i16, i16* %14101, i64 16
  %14105 = bitcast i16* %14104 to <16 x i16>*
  %14106 = load <16 x i16>, <16 x i16>* %14105, align 2, !tbaa !399
  %14107 = add nsw i64 %13872, %.pre-phi3566
  %14108 = getelementptr inbounds i16, i16* %blur_x, i64 %14107
  %14109 = bitcast i16* %14108 to <16 x i16>*
  %14110 = load <16 x i16>, <16 x i16>* %14109, align 2, !tbaa !399
  %14111 = getelementptr inbounds i16, i16* %14108, i64 16
  %14112 = bitcast i16* %14111 to <16 x i16>*
  %14113 = load <16 x i16>, <16 x i16>* %14112, align 2, !tbaa !399
  %14114 = add <16 x i16> %14089, %14082
  %14115 = add <16 x i16> %14114, %14096
  %14116 = add <16 x i16> %14115, %14103
  %14117 = add <16 x i16> %14116, %14110
  %14118 = add <16 x i16> %14092, %14085
  %14119 = add <16 x i16> %14118, %14099
  %14120 = add <16 x i16> %14119, %14106
  %14121 = add <16 x i16> %14120, %14113
  %14122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14117, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14121, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14124 = shufflevector <16 x i16> %14122, <16 x i16> %14123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14125 = lshr <32 x i16> %14124, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14126 = shufflevector <32 x i16> %14125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14127 = add nsw i64 %13876, %.pre-phi3566
  %14128 = getelementptr inbounds i16, i16* %66, i64 %14127
  %14129 = bitcast i16* %14128 to <16 x i16>*
  store <16 x i16> %14126, <16 x i16>* %14129, align 2, !tbaa !401
  %14130 = shufflevector <32 x i16> %14125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14131 = getelementptr inbounds i16, i16* %14128, i64 16
  %14132 = bitcast i16* %14131 to <16 x i16>*
  store <16 x i16> %14130, <16 x i16>* %14132, align 2, !tbaa !401
  %indvars.iv.next3350 = add nuw nsw i64 %indvars.iv3349, 1
  %.not2697 = icmp eq i64 %indvars.iv.next3350, %184
  br i1 %.not2697, label %"end for blur_y.s0.x.x.rebased757", label %"for blur_y.s0.x.x.rebased756"

"for blur_y.s0.x.x.rebased764":                   ; preds = %"for blur_y.s0.x.x.rebased764.preheader", %"consume blur_x772"
  %blur_y.s0.x.x.rebased766 = phi i32 [ %14245, %"consume blur_x772" ], [ 0, %"for blur_y.s0.x.x.rebased764.preheader" ]
  %14133 = add nsw i32 %blur_y.s0.x.x.rebased766, %t1626
  %a315 = shl nsw i32 %14133, 5
  %14134 = icmp sgt i32 %a14, %a315
  %b321 = select i1 %14134, i32 %a315, i32 %a14
  %14135 = icmp slt i32 %14133, 1
  %14136 = icmp sgt i32 %4, %a315
  %14137 = or i1 %14135, %14136
  br i1 %14137, label %"produce blur_x770", label %"consume blur_x772"

"end for blur_y.s0.x.x.rebased765":               ; preds = %"consume blur_x772", %"end for blur_y.s0.x.x.rebased757"
  br i1 %34, label %"produce blur_x776", label %after_bb773

"produce blur_x770":                              ; preds = %"for blur_y.s0.x.x.rebased764"
  %14138 = icmp slt i32 %b321, %4
  %blur_x.s0.x.v1.base.s771 = select i1 %14138, i32 %b321, i32 %4
  %t1197 = add nsw i32 %blur_x.s0.x.v1.base.s771, %t2185
  %14139 = sext i32 %t1197 to i64
  %14140 = getelementptr inbounds i16, i16* %read_input, i64 %14139
  %14141 = getelementptr inbounds i16, i16* %14140, i64 1
  %14142 = bitcast i16* %14141 to <16 x i16>*
  %14143 = load <16 x i16>, <16 x i16>* %14142, align 2, !tbaa !396
  %14144 = getelementptr inbounds i16, i16* %14140, i64 17
  %14145 = bitcast i16* %14144 to <16 x i16>*
  %14146 = load <16 x i16>, <16 x i16>* %14145, align 2, !tbaa !396
  %14147 = bitcast i16* %14140 to <16 x i16>*
  %14148 = load <16 x i16>, <16 x i16>* %14147, align 2, !tbaa !396
  %14149 = getelementptr inbounds i16, i16* %14140, i64 16
  %14150 = bitcast i16* %14149 to <16 x i16>*
  %14151 = load <16 x i16>, <16 x i16>* %14150, align 2, !tbaa !396
  %14152 = getelementptr inbounds i16, i16* %14140, i64 2
  %14153 = bitcast i16* %14152 to <16 x i16>*
  %14154 = load <16 x i16>, <16 x i16>* %14153, align 2, !tbaa !396
  %14155 = getelementptr inbounds i16, i16* %14140, i64 18
  %14156 = bitcast i16* %14155 to <16 x i16>*
  %14157 = load <16 x i16>, <16 x i16>* %14156, align 2, !tbaa !396
  %14158 = getelementptr inbounds i16, i16* %14140, i64 4
  %14159 = bitcast i16* %14158 to <16 x i16>*
  %14160 = load <16 x i16>, <16 x i16>* %14159, align 2, !tbaa !396
  %14161 = getelementptr inbounds i16, i16* %14140, i64 20
  %14162 = bitcast i16* %14161 to <16 x i16>*
  %14163 = load <16 x i16>, <16 x i16>* %14162, align 2, !tbaa !396
  %14164 = getelementptr inbounds i16, i16* %14140, i64 3
  %14165 = bitcast i16* %14164 to <16 x i16>*
  %14166 = load <16 x i16>, <16 x i16>* %14165, align 2, !tbaa !396
  %14167 = getelementptr inbounds i16, i16* %14140, i64 19
  %14168 = bitcast i16* %14167 to <16 x i16>*
  %14169 = load <16 x i16>, <16 x i16>* %14168, align 2, !tbaa !396
  %14170 = add <16 x i16> %14148, %14143
  %14171 = add <16 x i16> %14170, %14154
  %14172 = add <16 x i16> %14171, %14160
  %14173 = add <16 x i16> %14172, %14166
  %14174 = add <16 x i16> %14151, %14146
  %14175 = add <16 x i16> %14174, %14157
  %14176 = add <16 x i16> %14175, %14163
  %14177 = add <16 x i16> %14176, %14169
  %14178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14173, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14177, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14180 = shufflevector <16 x i16> %14178, <16 x i16> %14179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14181 = lshr <32 x i16> %14180, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14182 = shufflevector <32 x i16> %14181, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14183 = sext i32 %blur_x.s0.x.v1.base.s771 to i64
  %14184 = add nsw i64 %14183, %14008
  %14185 = getelementptr inbounds i16, i16* %blur_x, i64 %14184
  %14186 = bitcast i16* %14185 to <16 x i16>*
  store <16 x i16> %14182, <16 x i16>* %14186, align 2, !tbaa !399
  %14187 = shufflevector <32 x i16> %14181, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14188 = getelementptr inbounds i16, i16* %14185, i64 16
  %14189 = bitcast i16* %14188 to <16 x i16>*
  store <16 x i16> %14187, <16 x i16>* %14189, align 2, !tbaa !399
  br label %"consume blur_x772"

"consume blur_x772":                              ; preds = %"for blur_y.s0.x.x.rebased764", %"produce blur_x770"
  %14190 = sext i32 %b321 to i64
  %14191 = add nsw i64 %14011, %14190
  %14192 = getelementptr inbounds i16, i16* %blur_x, i64 %14191
  %14193 = bitcast i16* %14192 to <16 x i16>*
  %14194 = load <16 x i16>, <16 x i16>* %14193, align 2, !tbaa !399
  %14195 = getelementptr inbounds i16, i16* %14192, i64 16
  %14196 = bitcast i16* %14195 to <16 x i16>*
  %14197 = load <16 x i16>, <16 x i16>* %14196, align 2, !tbaa !399
  %14198 = add nsw i64 %14014, %14190
  %14199 = getelementptr inbounds i16, i16* %blur_x, i64 %14198
  %14200 = bitcast i16* %14199 to <16 x i16>*
  %14201 = load <16 x i16>, <16 x i16>* %14200, align 2, !tbaa !399
  %14202 = getelementptr inbounds i16, i16* %14199, i64 16
  %14203 = bitcast i16* %14202 to <16 x i16>*
  %14204 = load <16 x i16>, <16 x i16>* %14203, align 2, !tbaa !399
  %14205 = add nsw i64 %14017, %14190
  %14206 = getelementptr inbounds i16, i16* %blur_x, i64 %14205
  %14207 = bitcast i16* %14206 to <16 x i16>*
  %14208 = load <16 x i16>, <16 x i16>* %14207, align 2, !tbaa !399
  %14209 = getelementptr inbounds i16, i16* %14206, i64 16
  %14210 = bitcast i16* %14209 to <16 x i16>*
  %14211 = load <16 x i16>, <16 x i16>* %14210, align 2, !tbaa !399
  %14212 = add nsw i64 %14020, %14190
  %14213 = getelementptr inbounds i16, i16* %blur_x, i64 %14212
  %14214 = bitcast i16* %14213 to <16 x i16>*
  %14215 = load <16 x i16>, <16 x i16>* %14214, align 2, !tbaa !399
  %14216 = getelementptr inbounds i16, i16* %14213, i64 16
  %14217 = bitcast i16* %14216 to <16 x i16>*
  %14218 = load <16 x i16>, <16 x i16>* %14217, align 2, !tbaa !399
  %14219 = add nsw i64 %14023, %14190
  %14220 = getelementptr inbounds i16, i16* %blur_x, i64 %14219
  %14221 = bitcast i16* %14220 to <16 x i16>*
  %14222 = load <16 x i16>, <16 x i16>* %14221, align 2, !tbaa !399
  %14223 = getelementptr inbounds i16, i16* %14220, i64 16
  %14224 = bitcast i16* %14223 to <16 x i16>*
  %14225 = load <16 x i16>, <16 x i16>* %14224, align 2, !tbaa !399
  %14226 = add <16 x i16> %14201, %14194
  %14227 = add <16 x i16> %14226, %14208
  %14228 = add <16 x i16> %14227, %14215
  %14229 = add <16 x i16> %14228, %14222
  %14230 = add <16 x i16> %14204, %14197
  %14231 = add <16 x i16> %14230, %14211
  %14232 = add <16 x i16> %14231, %14218
  %14233 = add <16 x i16> %14232, %14225
  %14234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14229, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14235 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14233, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14236 = shufflevector <16 x i16> %14234, <16 x i16> %14235, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14237 = lshr <32 x i16> %14236, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14238 = shufflevector <32 x i16> %14237, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14239 = add nsw i64 %14027, %14190
  %14240 = getelementptr inbounds i16, i16* %66, i64 %14239
  %14241 = bitcast i16* %14240 to <16 x i16>*
  store <16 x i16> %14238, <16 x i16>* %14241, align 2, !tbaa !401
  %14242 = shufflevector <32 x i16> %14237, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14243 = getelementptr inbounds i16, i16* %14240, i64 16
  %14244 = bitcast i16* %14243 to <16 x i16>*
  store <16 x i16> %14242, <16 x i16>* %14244, align 2, !tbaa !401
  %14245 = add nuw nsw i32 %blur_y.s0.x.x.rebased766, 1
  %.not2696 = icmp eq i32 %14245, %t1683
  br i1 %.not2696, label %"end for blur_y.s0.x.x.rebased765", label %"for blur_y.s0.x.x.rebased764"

after_bb773:                                      ; preds = %"end for blur_y.s0.x.x.rebased765", %"produce blur_x776"
  br i1 %100, label %"for blur_y.s0.x.x.rebased778.preheader", label %"end for blur_y.s0.x.x.rebased779", !prof !386

"for blur_y.s0.x.x.rebased778.preheader":         ; preds = %after_bb773
  %14246 = sext i32 %t1700 to i64
  %14247 = zext i32 %.pre-phi to i64
  %14248 = mul nsw i64 %14247, %112
  %14249 = sub nsw i64 %14248, %96
  %14250 = zext i32 %.pre-phi3510 to i64
  %14251 = mul nsw i64 %14250, %112
  %14252 = sub nsw i64 %14251, %96
  %14253 = zext i32 %.pre-phi3480 to i64
  %14254 = mul nsw i64 %14253, %112
  %14255 = sub nsw i64 %14254, %96
  %14256 = zext i32 %.pre-phi3488 to i64
  %14257 = mul nsw i64 %14256, %112
  %14258 = sub nsw i64 %14257, %96
  %14259 = zext i32 %.pre-phi3484 to i64
  %14260 = mul nsw i64 %14259, %112
  %14261 = sub nsw i64 %14260, %96
  %14262 = sext i32 %a26 to i64
  %14263 = add nsw i64 %14262, 31
  %14264 = mul nsw i64 %14263, %113
  %14265 = add nsw i64 %14264, %116
  br label %"for blur_y.s0.x.x.rebased778"

"produce blur_x776":                              ; preds = %"end for blur_y.s0.x.x.rebased765"
  %14266 = getelementptr inbounds i16, i16* %read_input, i64 %177
  %14267 = getelementptr inbounds i16, i16* %14266, i64 -31
  %14268 = bitcast i16* %14267 to <16 x i16>*
  %14269 = load <16 x i16>, <16 x i16>* %14268, align 2, !tbaa !396
  %14270 = getelementptr inbounds i16, i16* %14266, i64 -15
  %14271 = bitcast i16* %14270 to <16 x i16>*
  %14272 = load <16 x i16>, <16 x i16>* %14271, align 2, !tbaa !396
  %14273 = getelementptr inbounds i16, i16* %14266, i64 -32
  %14274 = bitcast i16* %14273 to <16 x i16>*
  %14275 = load <16 x i16>, <16 x i16>* %14274, align 2, !tbaa !396
  %14276 = getelementptr inbounds i16, i16* %14266, i64 -16
  %14277 = bitcast i16* %14276 to <16 x i16>*
  %14278 = load <16 x i16>, <16 x i16>* %14277, align 2, !tbaa !396
  %14279 = getelementptr inbounds i16, i16* %14266, i64 -30
  %14280 = bitcast i16* %14279 to <16 x i16>*
  %14281 = load <16 x i16>, <16 x i16>* %14280, align 2, !tbaa !396
  %14282 = getelementptr inbounds i16, i16* %14266, i64 -14
  %14283 = bitcast i16* %14282 to <16 x i16>*
  %14284 = load <16 x i16>, <16 x i16>* %14283, align 2, !tbaa !396
  %14285 = getelementptr inbounds i16, i16* %14266, i64 -28
  %14286 = bitcast i16* %14285 to <16 x i16>*
  %14287 = load <16 x i16>, <16 x i16>* %14286, align 2, !tbaa !396
  %14288 = getelementptr inbounds i16, i16* %14266, i64 -12
  %14289 = bitcast i16* %14288 to <16 x i16>*
  %14290 = load <16 x i16>, <16 x i16>* %14289, align 2, !tbaa !396
  %14291 = getelementptr inbounds i16, i16* %14266, i64 -29
  %14292 = bitcast i16* %14291 to <16 x i16>*
  %14293 = load <16 x i16>, <16 x i16>* %14292, align 2, !tbaa !396
  %14294 = getelementptr inbounds i16, i16* %14266, i64 -13
  %14295 = bitcast i16* %14294 to <16 x i16>*
  %14296 = load <16 x i16>, <16 x i16>* %14295, align 2, !tbaa !396
  %14297 = add <16 x i16> %14275, %14269
  %14298 = add <16 x i16> %14297, %14281
  %14299 = add <16 x i16> %14298, %14287
  %14300 = add <16 x i16> %14299, %14293
  %14301 = add <16 x i16> %14278, %14272
  %14302 = add <16 x i16> %14301, %14284
  %14303 = add <16 x i16> %14302, %14290
  %14304 = add <16 x i16> %14303, %14296
  %14305 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14300, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14304, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14307 = shufflevector <16 x i16> %14305, <16 x i16> %14306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14308 = lshr <32 x i16> %14307, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14309 = shufflevector <32 x i16> %14308, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14310 = zext i32 %.pre-phi3488 to i64
  %14311 = mul nsw i64 %97, %14310
  %14312 = add nsw i64 %99, %14311
  %14313 = getelementptr inbounds i16, i16* %blur_x, i64 %14312
  %14314 = getelementptr inbounds i16, i16* %14313, i64 -32
  %14315 = bitcast i16* %14314 to <16 x i16>*
  store <16 x i16> %14309, <16 x i16>* %14315, align 2, !tbaa !399
  %14316 = shufflevector <32 x i16> %14308, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14317 = getelementptr inbounds i16, i16* %14313, i64 -16
  %14318 = bitcast i16* %14317 to <16 x i16>*
  store <16 x i16> %14316, <16 x i16>* %14318, align 2, !tbaa !399
  %14319 = zext i32 %.pre-phi to i64
  %14320 = mul nsw i64 %14319, %112
  %14321 = add nsw i64 %14320, %94
  %14322 = getelementptr inbounds i16, i16* %blur_x, i64 %14321
  %14323 = getelementptr inbounds i16, i16* %14322, i64 -32
  %14324 = bitcast i16* %14323 to <16 x i16>*
  %14325 = load <16 x i16>, <16 x i16>* %14324, align 2, !tbaa !399
  %14326 = getelementptr inbounds i16, i16* %14322, i64 -16
  %14327 = bitcast i16* %14326 to <16 x i16>*
  %14328 = load <16 x i16>, <16 x i16>* %14327, align 2, !tbaa !399
  %14329 = zext i32 %.pre-phi3510 to i64
  %14330 = mul nsw i64 %14329, %112
  %14331 = add nsw i64 %14330, %94
  %14332 = getelementptr inbounds i16, i16* %blur_x, i64 %14331
  %14333 = getelementptr inbounds i16, i16* %14332, i64 -32
  %14334 = bitcast i16* %14333 to <16 x i16>*
  %14335 = load <16 x i16>, <16 x i16>* %14334, align 2, !tbaa !399
  %14336 = getelementptr inbounds i16, i16* %14332, i64 -16
  %14337 = bitcast i16* %14336 to <16 x i16>*
  %14338 = load <16 x i16>, <16 x i16>* %14337, align 2, !tbaa !399
  %14339 = zext i32 %.pre-phi3480 to i64
  %14340 = mul nsw i64 %14339, %112
  %14341 = add nsw i64 %14340, %94
  %14342 = getelementptr inbounds i16, i16* %blur_x, i64 %14341
  %14343 = getelementptr inbounds i16, i16* %14342, i64 -32
  %14344 = bitcast i16* %14343 to <16 x i16>*
  %14345 = load <16 x i16>, <16 x i16>* %14344, align 2, !tbaa !399
  %14346 = getelementptr inbounds i16, i16* %14342, i64 -16
  %14347 = bitcast i16* %14346 to <16 x i16>*
  %14348 = load <16 x i16>, <16 x i16>* %14347, align 2, !tbaa !399
  %14349 = mul nsw i64 %14310, %112
  %14350 = add nsw i64 %14349, %94
  %14351 = getelementptr inbounds i16, i16* %blur_x, i64 %14350
  %14352 = getelementptr inbounds i16, i16* %14351, i64 -32
  %14353 = bitcast i16* %14352 to <16 x i16>*
  %14354 = load <16 x i16>, <16 x i16>* %14353, align 2, !tbaa !399
  %14355 = getelementptr inbounds i16, i16* %14351, i64 -16
  %14356 = bitcast i16* %14355 to <16 x i16>*
  %14357 = load <16 x i16>, <16 x i16>* %14356, align 2, !tbaa !399
  %14358 = zext i32 %.pre-phi3484 to i64
  %14359 = mul nsw i64 %14358, %112
  %14360 = add nsw i64 %14359, %94
  %14361 = getelementptr inbounds i16, i16* %blur_x, i64 %14360
  %14362 = getelementptr inbounds i16, i16* %14361, i64 -32
  %14363 = bitcast i16* %14362 to <16 x i16>*
  %14364 = load <16 x i16>, <16 x i16>* %14363, align 2, !tbaa !399
  %14365 = getelementptr inbounds i16, i16* %14361, i64 -16
  %14366 = bitcast i16* %14365 to <16 x i16>*
  %14367 = load <16 x i16>, <16 x i16>* %14366, align 2, !tbaa !399
  %14368 = add <16 x i16> %14335, %14325
  %14369 = add <16 x i16> %14368, %14345
  %14370 = add <16 x i16> %14369, %14354
  %14371 = add <16 x i16> %14370, %14364
  %14372 = add <16 x i16> %14338, %14328
  %14373 = add <16 x i16> %14372, %14348
  %14374 = add <16 x i16> %14373, %14357
  %14375 = add <16 x i16> %14374, %14367
  %14376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14371, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14375, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14378 = shufflevector <16 x i16> %14376, <16 x i16> %14377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14379 = lshr <32 x i16> %14378, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14380 = shufflevector <32 x i16> %14379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14381 = sext i32 %a26 to i64
  %14382 = add nsw i64 %14381, 31
  %14383 = mul nsw i64 %14382, %113
  %14384 = add nsw i64 %115, %14383
  %14385 = getelementptr inbounds i16, i16* %66, i64 %14384
  %14386 = getelementptr inbounds i16, i16* %14385, i64 -32
  %14387 = bitcast i16* %14386 to <16 x i16>*
  store <16 x i16> %14380, <16 x i16>* %14387, align 2, !tbaa !401
  %14388 = shufflevector <32 x i16> %14379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14389 = getelementptr inbounds i16, i16* %14385, i64 -16
  %14390 = bitcast i16* %14389 to <16 x i16>*
  store <16 x i16> %14388, <16 x i16>* %14390, align 2, !tbaa !401
  br label %after_bb773

"for blur_y.s0.x.x.rebased778":                   ; preds = %"for blur_y.s0.x.x.rebased778.preheader", %"consume blur_x785"
  %indvars.iv3352 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased778.preheader" ], [ %indvars.iv.next3353, %"consume blur_x785" ]
  %14391 = add nsw i64 %indvars.iv3352, %101
  %14392 = icmp slt i64 %14391, 1
  %14393 = trunc i64 %14391 to i32
  %14394 = shl nsw i32 %14393, 5
  %14395 = icmp sgt i32 %4, %14394
  %14396 = or i1 %14392, %14395
  br i1 %14396, label %"produce blur_x784", label %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge"

"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased778"
  %.pre3567 = shl nsw i64 %14391, 5
  br label %"consume blur_x785"

"end for blur_y.s0.x.x.rebased779":               ; preds = %"consume blur_x785", %after_bb773
  br i1 %102, label %"for blur_y.s0.x.x.rebased786.preheader", label %"end for blur_y.s0.x.x.rebased787", !prof !386

"for blur_y.s0.x.x.rebased786.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased779"
  %14397 = sext i32 %t1700 to i64
  %14398 = zext i32 %.pre-phi to i64
  %14399 = mul nsw i64 %14398, %112
  %14400 = sub nsw i64 %14399, %96
  %14401 = zext i32 %.pre-phi3510 to i64
  %14402 = mul nsw i64 %14401, %112
  %14403 = sub nsw i64 %14402, %96
  %14404 = zext i32 %.pre-phi3480 to i64
  %14405 = mul nsw i64 %14404, %112
  %14406 = sub nsw i64 %14405, %96
  %14407 = zext i32 %.pre-phi3488 to i64
  %14408 = mul nsw i64 %14407, %112
  %14409 = sub nsw i64 %14408, %96
  %14410 = zext i32 %.pre-phi3484 to i64
  %14411 = mul nsw i64 %14410, %112
  %14412 = sub nsw i64 %14411, %96
  %14413 = sext i32 %a26 to i64
  %14414 = add nsw i64 %14413, 31
  %14415 = mul nsw i64 %14414, %113
  %14416 = add nsw i64 %14415, %116
  br label %"for blur_y.s0.x.x.rebased786"

"produce blur_x784":                              ; preds = %"for blur_y.s0.x.x.rebased778"
  %t1208 = add nsw i32 %14394, %t2201
  %14417 = sext i32 %t1208 to i64
  %14418 = getelementptr inbounds i16, i16* %read_input, i64 %14417
  %14419 = getelementptr inbounds i16, i16* %14418, i64 1
  %14420 = bitcast i16* %14419 to <16 x i16>*
  %14421 = load <16 x i16>, <16 x i16>* %14420, align 2, !tbaa !396
  %14422 = getelementptr inbounds i16, i16* %14418, i64 17
  %14423 = bitcast i16* %14422 to <16 x i16>*
  %14424 = load <16 x i16>, <16 x i16>* %14423, align 2, !tbaa !396
  %14425 = bitcast i16* %14418 to <16 x i16>*
  %14426 = load <16 x i16>, <16 x i16>* %14425, align 2, !tbaa !396
  %14427 = getelementptr inbounds i16, i16* %14418, i64 16
  %14428 = bitcast i16* %14427 to <16 x i16>*
  %14429 = load <16 x i16>, <16 x i16>* %14428, align 2, !tbaa !396
  %14430 = getelementptr inbounds i16, i16* %14418, i64 2
  %14431 = bitcast i16* %14430 to <16 x i16>*
  %14432 = load <16 x i16>, <16 x i16>* %14431, align 2, !tbaa !396
  %14433 = getelementptr inbounds i16, i16* %14418, i64 18
  %14434 = bitcast i16* %14433 to <16 x i16>*
  %14435 = load <16 x i16>, <16 x i16>* %14434, align 2, !tbaa !396
  %14436 = getelementptr inbounds i16, i16* %14418, i64 4
  %14437 = bitcast i16* %14436 to <16 x i16>*
  %14438 = load <16 x i16>, <16 x i16>* %14437, align 2, !tbaa !396
  %14439 = getelementptr inbounds i16, i16* %14418, i64 20
  %14440 = bitcast i16* %14439 to <16 x i16>*
  %14441 = load <16 x i16>, <16 x i16>* %14440, align 2, !tbaa !396
  %14442 = getelementptr inbounds i16, i16* %14418, i64 3
  %14443 = bitcast i16* %14442 to <16 x i16>*
  %14444 = load <16 x i16>, <16 x i16>* %14443, align 2, !tbaa !396
  %14445 = getelementptr inbounds i16, i16* %14418, i64 19
  %14446 = bitcast i16* %14445 to <16 x i16>*
  %14447 = load <16 x i16>, <16 x i16>* %14446, align 2, !tbaa !396
  %14448 = add <16 x i16> %14426, %14421
  %14449 = add <16 x i16> %14448, %14432
  %14450 = add <16 x i16> %14449, %14438
  %14451 = add <16 x i16> %14450, %14444
  %14452 = add <16 x i16> %14429, %14424
  %14453 = add <16 x i16> %14452, %14435
  %14454 = add <16 x i16> %14453, %14441
  %14455 = add <16 x i16> %14454, %14447
  %14456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14451, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14455, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14458 = shufflevector <16 x i16> %14456, <16 x i16> %14457, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14459 = lshr <32 x i16> %14458, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14460 = shufflevector <32 x i16> %14459, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14461 = shl nsw i64 %14391, 5
  %14462 = add nsw i64 %14461, %14246
  %14463 = getelementptr inbounds i16, i16* %blur_x, i64 %14462
  %14464 = bitcast i16* %14463 to <16 x i16>*
  store <16 x i16> %14460, <16 x i16>* %14464, align 2, !tbaa !399
  %14465 = shufflevector <32 x i16> %14459, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14466 = getelementptr inbounds i16, i16* %14463, i64 16
  %14467 = bitcast i16* %14466 to <16 x i16>*
  store <16 x i16> %14465, <16 x i16>* %14467, align 2, !tbaa !399
  br label %"consume blur_x785"

"consume blur_x785":                              ; preds = %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge", %"produce blur_x784"
  %.pre-phi3568 = phi i64 [ %.pre3567, %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge" ], [ %14461, %"produce blur_x784" ]
  %14468 = add nsw i64 %14249, %.pre-phi3568
  %14469 = getelementptr inbounds i16, i16* %blur_x, i64 %14468
  %14470 = bitcast i16* %14469 to <16 x i16>*
  %14471 = load <16 x i16>, <16 x i16>* %14470, align 2, !tbaa !399
  %14472 = getelementptr inbounds i16, i16* %14469, i64 16
  %14473 = bitcast i16* %14472 to <16 x i16>*
  %14474 = load <16 x i16>, <16 x i16>* %14473, align 2, !tbaa !399
  %14475 = add nsw i64 %14252, %.pre-phi3568
  %14476 = getelementptr inbounds i16, i16* %blur_x, i64 %14475
  %14477 = bitcast i16* %14476 to <16 x i16>*
  %14478 = load <16 x i16>, <16 x i16>* %14477, align 2, !tbaa !399
  %14479 = getelementptr inbounds i16, i16* %14476, i64 16
  %14480 = bitcast i16* %14479 to <16 x i16>*
  %14481 = load <16 x i16>, <16 x i16>* %14480, align 2, !tbaa !399
  %14482 = add nsw i64 %14255, %.pre-phi3568
  %14483 = getelementptr inbounds i16, i16* %blur_x, i64 %14482
  %14484 = bitcast i16* %14483 to <16 x i16>*
  %14485 = load <16 x i16>, <16 x i16>* %14484, align 2, !tbaa !399
  %14486 = getelementptr inbounds i16, i16* %14483, i64 16
  %14487 = bitcast i16* %14486 to <16 x i16>*
  %14488 = load <16 x i16>, <16 x i16>* %14487, align 2, !tbaa !399
  %14489 = add nsw i64 %14258, %.pre-phi3568
  %14490 = getelementptr inbounds i16, i16* %blur_x, i64 %14489
  %14491 = bitcast i16* %14490 to <16 x i16>*
  %14492 = load <16 x i16>, <16 x i16>* %14491, align 2, !tbaa !399
  %14493 = getelementptr inbounds i16, i16* %14490, i64 16
  %14494 = bitcast i16* %14493 to <16 x i16>*
  %14495 = load <16 x i16>, <16 x i16>* %14494, align 2, !tbaa !399
  %14496 = add nsw i64 %14261, %.pre-phi3568
  %14497 = getelementptr inbounds i16, i16* %blur_x, i64 %14496
  %14498 = bitcast i16* %14497 to <16 x i16>*
  %14499 = load <16 x i16>, <16 x i16>* %14498, align 2, !tbaa !399
  %14500 = getelementptr inbounds i16, i16* %14497, i64 16
  %14501 = bitcast i16* %14500 to <16 x i16>*
  %14502 = load <16 x i16>, <16 x i16>* %14501, align 2, !tbaa !399
  %14503 = add <16 x i16> %14478, %14471
  %14504 = add <16 x i16> %14503, %14485
  %14505 = add <16 x i16> %14504, %14492
  %14506 = add <16 x i16> %14505, %14499
  %14507 = add <16 x i16> %14481, %14474
  %14508 = add <16 x i16> %14507, %14488
  %14509 = add <16 x i16> %14508, %14495
  %14510 = add <16 x i16> %14509, %14502
  %14511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14506, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14510, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14513 = shufflevector <16 x i16> %14511, <16 x i16> %14512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14514 = lshr <32 x i16> %14513, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14515 = shufflevector <32 x i16> %14514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14516 = add nsw i64 %14265, %.pre-phi3568
  %14517 = getelementptr inbounds i16, i16* %66, i64 %14516
  %14518 = bitcast i16* %14517 to <16 x i16>*
  store <16 x i16> %14515, <16 x i16>* %14518, align 2, !tbaa !401
  %14519 = shufflevector <32 x i16> %14514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14520 = getelementptr inbounds i16, i16* %14517, i64 16
  %14521 = bitcast i16* %14520 to <16 x i16>*
  store <16 x i16> %14519, <16 x i16>* %14521, align 2, !tbaa !401
  %indvars.iv.next3353 = add nuw nsw i64 %indvars.iv3352, 1
  %.not2695 = icmp eq i64 %indvars.iv.next3353, %184
  br i1 %.not2695, label %"end for blur_y.s0.x.x.rebased779", label %"for blur_y.s0.x.x.rebased778"

"for blur_y.s0.x.x.rebased786":                   ; preds = %"for blur_y.s0.x.x.rebased786.preheader", %"consume blur_x794"
  %blur_y.s0.x.x.rebased788 = phi i32 [ %14635, %"consume blur_x794" ], [ 0, %"for blur_y.s0.x.x.rebased786.preheader" ]
  %14522 = add nsw i32 %blur_y.s0.x.x.rebased788, %t1626
  %a322 = shl nsw i32 %14522, 5
  %14523 = icmp sgt i32 %a14, %a322
  %b328 = select i1 %14523, i32 %a322, i32 %a14
  %14524 = icmp slt i32 %14522, 1
  %14525 = icmp sgt i32 %4, %a322
  %14526 = or i1 %14524, %14525
  br i1 %14526, label %"produce blur_x792", label %"consume blur_x794"

"end for blur_y.s0.x.x.rebased787":               ; preds = %"consume blur_x794", %"end for blur_y.s0.x.x.rebased779"
  %14527 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2693 = icmp eq i32 %14527, %t1612
  br i1 %.not2693, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x792":                              ; preds = %"for blur_y.s0.x.x.rebased786"
  %14528 = icmp slt i32 %b328, %4
  %blur_x.s0.x.v1.base.s793 = select i1 %14528, i32 %b328, i32 %4
  %t1213 = add nsw i32 %blur_x.s0.x.v1.base.s793, %t2201
  %14529 = sext i32 %t1213 to i64
  %14530 = getelementptr inbounds i16, i16* %read_input, i64 %14529
  %14531 = getelementptr inbounds i16, i16* %14530, i64 1
  %14532 = bitcast i16* %14531 to <16 x i16>*
  %14533 = load <16 x i16>, <16 x i16>* %14532, align 2, !tbaa !396
  %14534 = getelementptr inbounds i16, i16* %14530, i64 17
  %14535 = bitcast i16* %14534 to <16 x i16>*
  %14536 = load <16 x i16>, <16 x i16>* %14535, align 2, !tbaa !396
  %14537 = bitcast i16* %14530 to <16 x i16>*
  %14538 = load <16 x i16>, <16 x i16>* %14537, align 2, !tbaa !396
  %14539 = getelementptr inbounds i16, i16* %14530, i64 16
  %14540 = bitcast i16* %14539 to <16 x i16>*
  %14541 = load <16 x i16>, <16 x i16>* %14540, align 2, !tbaa !396
  %14542 = getelementptr inbounds i16, i16* %14530, i64 2
  %14543 = bitcast i16* %14542 to <16 x i16>*
  %14544 = load <16 x i16>, <16 x i16>* %14543, align 2, !tbaa !396
  %14545 = getelementptr inbounds i16, i16* %14530, i64 18
  %14546 = bitcast i16* %14545 to <16 x i16>*
  %14547 = load <16 x i16>, <16 x i16>* %14546, align 2, !tbaa !396
  %14548 = getelementptr inbounds i16, i16* %14530, i64 4
  %14549 = bitcast i16* %14548 to <16 x i16>*
  %14550 = load <16 x i16>, <16 x i16>* %14549, align 2, !tbaa !396
  %14551 = getelementptr inbounds i16, i16* %14530, i64 20
  %14552 = bitcast i16* %14551 to <16 x i16>*
  %14553 = load <16 x i16>, <16 x i16>* %14552, align 2, !tbaa !396
  %14554 = getelementptr inbounds i16, i16* %14530, i64 3
  %14555 = bitcast i16* %14554 to <16 x i16>*
  %14556 = load <16 x i16>, <16 x i16>* %14555, align 2, !tbaa !396
  %14557 = getelementptr inbounds i16, i16* %14530, i64 19
  %14558 = bitcast i16* %14557 to <16 x i16>*
  %14559 = load <16 x i16>, <16 x i16>* %14558, align 2, !tbaa !396
  %14560 = add <16 x i16> %14538, %14533
  %14561 = add <16 x i16> %14560, %14544
  %14562 = add <16 x i16> %14561, %14550
  %14563 = add <16 x i16> %14562, %14556
  %14564 = add <16 x i16> %14541, %14536
  %14565 = add <16 x i16> %14564, %14547
  %14566 = add <16 x i16> %14565, %14553
  %14567 = add <16 x i16> %14566, %14559
  %14568 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14563, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14567, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14570 = shufflevector <16 x i16> %14568, <16 x i16> %14569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14571 = lshr <32 x i16> %14570, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14572 = shufflevector <32 x i16> %14571, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14573 = sext i32 %blur_x.s0.x.v1.base.s793 to i64
  %14574 = add nsw i64 %14573, %14397
  %14575 = getelementptr inbounds i16, i16* %blur_x, i64 %14574
  %14576 = bitcast i16* %14575 to <16 x i16>*
  store <16 x i16> %14572, <16 x i16>* %14576, align 2, !tbaa !399
  %14577 = shufflevector <32 x i16> %14571, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14578 = getelementptr inbounds i16, i16* %14575, i64 16
  %14579 = bitcast i16* %14578 to <16 x i16>*
  store <16 x i16> %14577, <16 x i16>* %14579, align 2, !tbaa !399
  br label %"consume blur_x794"

"consume blur_x794":                              ; preds = %"for blur_y.s0.x.x.rebased786", %"produce blur_x792"
  %14580 = sext i32 %b328 to i64
  %14581 = add nsw i64 %14400, %14580
  %14582 = getelementptr inbounds i16, i16* %blur_x, i64 %14581
  %14583 = bitcast i16* %14582 to <16 x i16>*
  %14584 = load <16 x i16>, <16 x i16>* %14583, align 2, !tbaa !399
  %14585 = getelementptr inbounds i16, i16* %14582, i64 16
  %14586 = bitcast i16* %14585 to <16 x i16>*
  %14587 = load <16 x i16>, <16 x i16>* %14586, align 2, !tbaa !399
  %14588 = add nsw i64 %14403, %14580
  %14589 = getelementptr inbounds i16, i16* %blur_x, i64 %14588
  %14590 = bitcast i16* %14589 to <16 x i16>*
  %14591 = load <16 x i16>, <16 x i16>* %14590, align 2, !tbaa !399
  %14592 = getelementptr inbounds i16, i16* %14589, i64 16
  %14593 = bitcast i16* %14592 to <16 x i16>*
  %14594 = load <16 x i16>, <16 x i16>* %14593, align 2, !tbaa !399
  %14595 = add nsw i64 %14406, %14580
  %14596 = getelementptr inbounds i16, i16* %blur_x, i64 %14595
  %14597 = bitcast i16* %14596 to <16 x i16>*
  %14598 = load <16 x i16>, <16 x i16>* %14597, align 2, !tbaa !399
  %14599 = getelementptr inbounds i16, i16* %14596, i64 16
  %14600 = bitcast i16* %14599 to <16 x i16>*
  %14601 = load <16 x i16>, <16 x i16>* %14600, align 2, !tbaa !399
  %14602 = add nsw i64 %14409, %14580
  %14603 = getelementptr inbounds i16, i16* %blur_x, i64 %14602
  %14604 = bitcast i16* %14603 to <16 x i16>*
  %14605 = load <16 x i16>, <16 x i16>* %14604, align 2, !tbaa !399
  %14606 = getelementptr inbounds i16, i16* %14603, i64 16
  %14607 = bitcast i16* %14606 to <16 x i16>*
  %14608 = load <16 x i16>, <16 x i16>* %14607, align 2, !tbaa !399
  %14609 = add nsw i64 %14412, %14580
  %14610 = getelementptr inbounds i16, i16* %blur_x, i64 %14609
  %14611 = bitcast i16* %14610 to <16 x i16>*
  %14612 = load <16 x i16>, <16 x i16>* %14611, align 2, !tbaa !399
  %14613 = getelementptr inbounds i16, i16* %14610, i64 16
  %14614 = bitcast i16* %14613 to <16 x i16>*
  %14615 = load <16 x i16>, <16 x i16>* %14614, align 2, !tbaa !399
  %14616 = add <16 x i16> %14591, %14584
  %14617 = add <16 x i16> %14616, %14598
  %14618 = add <16 x i16> %14617, %14605
  %14619 = add <16 x i16> %14618, %14612
  %14620 = add <16 x i16> %14594, %14587
  %14621 = add <16 x i16> %14620, %14601
  %14622 = add <16 x i16> %14621, %14608
  %14623 = add <16 x i16> %14622, %14615
  %14624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14619, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14625 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14623, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14626 = shufflevector <16 x i16> %14624, <16 x i16> %14625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14627 = lshr <32 x i16> %14626, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14628 = shufflevector <32 x i16> %14627, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14629 = add nsw i64 %14416, %14580
  %14630 = getelementptr inbounds i16, i16* %66, i64 %14629
  %14631 = bitcast i16* %14630 to <16 x i16>*
  store <16 x i16> %14628, <16 x i16>* %14631, align 2, !tbaa !401
  %14632 = shufflevector <32 x i16> %14627, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14633 = getelementptr inbounds i16, i16* %14630, i64 16
  %14634 = bitcast i16* %14633 to <16 x i16>*
  store <16 x i16> %14632, <16 x i16>* %14634, align 2, !tbaa !401
  %14635 = add nuw nsw i32 %blur_y.s0.x.x.rebased788, 1
  %.not2694 = icmp eq i32 %14635, %t1683
  br i1 %.not2694, label %"end for blur_y.s0.x.x.rebased787", label %"for blur_y.s0.x.x.rebased786"

"for blur_y.s0.y.y816":                           ; preds = %"for blur_y.s0.y.y816.preheader", %"end for blur_y.s0.x.x.rebased2364"
  %blur_y.s0.y.y818 = phi i32 [ %28288, %"end for blur_y.s0.x.x.rebased2364" ], [ 0, %"for blur_y.s0.y.y816.preheader" ]
  %a375 = shl nsw i32 %blur_y.s0.y.y818, 5
  %14636 = icmp sgt i32 %b377, %a375
  %blur_y.s0.y.yi.base.s819 = select i1 %14636, i32 %a375, i32 %b377
  %14637 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2842 = icmp ult i64 %14637, %266
  %14638 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2842, label %if.then.i2845, label %pseudostack_alloc.exit2858, !prof !390

if.then.i2845:                                    ; preds = %"for blur_y.s0.y.y816"
  %tobool1.not.i2844 = icmp ne i8* %14638, null
  %14639 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2847 = icmp ugt i64 %14639, 16384
  %or.cond2912 = and i1 %tobool1.not.i2844, %cmp2.i2847
  br i1 %or.cond2912, label %if.then3.i2849, label %if.end.i2853

if.then3.i2849:                                   ; preds = %if.then.i2845
  call void @halide_free(i8* null, i8* nonnull %14638) #16
  %.pre3474 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2853

if.end.i2853:                                     ; preds = %if.then3.i2849, %if.then.i2845
  %14640 = phi i64 [ %.pre3474, %if.then3.i2849 ], [ %14639, %if.then.i2845 ]
  %add.i2851 = add i64 %14640, %266
  store i64 %add.i2851, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2852 = icmp ugt i64 %add.i2851, 16384
  br i1 %cmp7.i2852, label %if.then8.i2855, label %if.end11.i2857

if.then8.i2855:                                   ; preds = %if.end.i2853
  %call.i2854 = call i8* @halide_malloc(i8* null, i64 %266) #16
  br label %if.end11.i2857

if.end11.i2857:                                   ; preds = %if.then8.i2855, %if.end.i2853
  %storemerge.i2856 = phi i8* [ %call.i2854, %if.then8.i2855 ], [ null, %if.end.i2853 ]
  store i8* %storemerge.i2856, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %266, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2858

pseudostack_alloc.exit2858:                       ; preds = %"for blur_y.s0.y.y816", %if.end11.i2857
  %14641 = phi i8* [ %storemerge.i2856, %if.end11.i2857 ], [ %14638, %"for blur_y.s0.y.y816" ]
  %14642 = bitcast i8* %14641 to i16*
  %.not2536 = icmp eq i8* %14641, null
  br i1 %.not2536, label %then_bb821, label %"produce read_input823", !prof !392

"end for blur_y.s0.y.y817":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02901, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2859

if.then.i2859.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2364"
  %14643 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %14644 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2859

if.then.i2859:                                    ; preds = %if.then.i2859.loopexit, %"end for blur_y.s0.y.y817"
  %.12909 = phi i8* [ %.0, %"end for blur_y.s0.y.y817" ], [ %14643, %if.then.i2859.loopexit ]
  %.129022906 = phi i8* [ %.02901, %"end for blur_y.s0.y.y817" ], [ %14644, %if.then.i2859.loopexit ]
  %ptr1.i = bitcast i8* %.129022906 to i8**
  %14645 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2883 = icmp eq i8* %14645, null
  br i1 %tobool.not.i2883, label %pseudostack_free.exit, label %land.lhs.true.i2886

land.lhs.true.i2886:                              ; preds = %if.then.i2859
  %cumulative_size.i2884 = getelementptr inbounds i8, i8* %.129022906, i64 16
  %14646 = bitcast i8* %cumulative_size.i2884 to i64*
  %14647 = load i64, i64* %14646, align 8, !tbaa !391
  %cmp.i2885 = icmp ugt i64 %14647, 16384
  br i1 %cmp.i2885, label %if.then.i2887, label %pseudostack_free.exit

if.then.i2887:                                    ; preds = %land.lhs.true.i2886
  call void @halide_free(i8* null, i8* nonnull %14645) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2859, %land.lhs.true.i2886, %if.then.i2887
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.129022906, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y817", %pseudostack_free.exit
  %.12908 = phi i8* [ %.0, %"end for blur_y.s0.y.y817" ], [ %.12909, %pseudostack_free.exit ]
  %tobool.not.i2861.not = icmp eq i8* %.12908, null
  br i1 %tobool.not.i2861.not, label %call_destructor.exit2864, label %if.then.i2862

if.then.i2862:                                    ; preds = %call_destructor.exit
  %ptr1.i2890 = bitcast i8* %.12908 to i8**
  %14648 = load i8*, i8** %ptr1.i2890, align 8, !tbaa !389
  %tobool.not.i2891 = icmp eq i8* %14648, null
  br i1 %tobool.not.i2891, label %pseudostack_free.exit2899, label %land.lhs.true.i2894

land.lhs.true.i2894:                              ; preds = %if.then.i2862
  %cumulative_size.i2892 = getelementptr inbounds i8, i8* %.12908, i64 16
  %14649 = bitcast i8* %cumulative_size.i2892 to i64*
  %14650 = load i64, i64* %14649, align 8, !tbaa !391
  %cmp.i2893 = icmp ugt i64 %14650, 16384
  br i1 %cmp.i2893, label %if.then.i2895, label %pseudostack_free.exit2899

if.then.i2895:                                    ; preds = %land.lhs.true.i2894
  call void @halide_free(i8* null, i8* nonnull %14648) #16
  br label %pseudostack_free.exit2899

pseudostack_free.exit2899:                        ; preds = %if.then.i2862, %land.lhs.true.i2894, %if.then.i2895
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12908, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2864

call_destructor.exit2864:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2899
  ret i32 0

then_bb821:                                       ; preds = %pseudostack_alloc.exit2858
  %14651 = alloca i8*, i64 %266, align 32
  %14652 = bitcast i8** %14651 to i16*
  store i8** %14651, i8*** %267, align 8
  br label %"produce read_input823"

"produce read_input823":                          ; preds = %pseudostack_alloc.exit2858, %then_bb821
  %read_input822 = phi i16* [ %14652, %then_bb821 ], [ %14642, %pseudostack_alloc.exit2858 ]
  %a379 = add nsw i32 %blur_y.s0.y.yi.base.s819, %199
  %14653 = icmp sgt i32 %a379, %205
  %a378 = select i1 %14653, i32 %a379, i32 %205
  %b380 = add nsw i32 %a379, 36
  %14654 = icmp sgt i32 %b380, %a378
  %14655 = icmp sgt i32 %a378, %b385
  %a382 = select i1 %14655, i32 %a378, i32 %b385
  %14656 = icmp sgt i32 %b380, %a382
  %a388 = sub i32 %268, %blur_y.s0.y.yi.base.s819
  %14657 = icmp sgt i32 %a388, 0
  br i1 %14657, label %"for read_input.s0.y.rebased830.preheader", label %"end for read_input.s0.y.rebased831", !prof !386

"for read_input.s0.y.rebased830.preheader":       ; preds = %"produce read_input823"
  %14658 = icmp slt i32 %a388, 36
  %a387 = select i1 %14658, i32 %a388, i32 36
  %14659 = add nsw i32 %269, %blur_y.s0.y.yi.base.s819
  %14660 = sext i32 %14659 to i64
  %14661 = zext i32 %a387 to i64
  br label %"for read_input.s0.y.rebased830"

"for read_input.s0.y.rebased830":                 ; preds = %"for read_input.s0.y.rebased830.preheader", %"end for read_input.s0.x.x836"
  %indvars.iv3355 = phi i64 [ 0, %"for read_input.s0.y.rebased830.preheader" ], [ %indvars.iv.next3356, %"end for read_input.s0.x.x836" ]
  %14662 = add nsw i64 %indvars.iv3355, %14660
  %14663 = icmp slt i64 %14662, %524
  %14664 = trunc i64 %14662 to i32
  %a395 = select i1 %14663, i32 %14664, i32 %b398
  %14665 = trunc i64 %indvars.iv3355 to i32
  %14666 = mul i32 %a377, %14665
  %t1654834 = sub i32 %14666, %270
  %14667 = icmp sgt i32 %a395, 0
  %14668 = select i1 %14667, i32 %a395, i32 0
  %14669 = mul nsw i32 %14668, %207
  %t1653833 = sub nsw i32 %14669, %203
  %14670 = insertelement <32 x i32> undef, i32 %t1653833, i32 0
  %14671 = shufflevector <32 x i32> %14670, <32 x i32> undef, <32 x i32> zeroinitializer
  %14672 = sext i32 %t1654834 to i64
  br label %"for read_input.s0.x.x835"

"end for read_input.s0.y.rebased831":             ; preds = %"end for read_input.s0.x.x836", %"produce read_input823"
  %14673 = icmp sgt i32 %t1636, %a379
  %a424 = select i1 %14673, i32 %t1636, i32 %a379
  %14674 = icmp sgt i32 %b380, %a424
  %14675 = select i1 %14674, i32 %a424, i32 %b380
  %14676 = select i1 %14654, i32 %a378, i32 %b380
  %t1655840 = sub nsw i32 %14675, %14676
  %14677 = icmp sgt i32 %t1655840, 0
  br i1 %14677, label %"for read_input.s0.y.rebased845.preheader", label %"end for read_input.s0.y.rebased846", !prof !386

"for read_input.s0.y.rebased845.preheader":       ; preds = %"end for read_input.s0.y.rebased831"
  %14678 = sub i32 %14676, %205
  %14679 = sext i32 %blur_y.s0.y.yi.base.s819 to i64
  %a464 = sub nsw i64 %281, %14679
  %14680 = icmp slt i64 %a464, 36
  %a463 = select i1 %14680, i64 %a464, i64 36
  %14681 = icmp sgt i64 %a463, 0
  %14682 = select i1 %14681, i64 %a463, i64 0
  %14683 = sext i32 %14678 to i64
  %14684 = zext i32 %t1655840 to i64
  br label %"for read_input.s0.y.rebased845"

"for read_input.s0.x.x835":                       ; preds = %"for read_input.s0.y.rebased830", %"for read_input.s0.x.x835"
  %read_input.s0.x.x837 = phi i32 [ %14883, %"for read_input.s0.x.x835" ], [ 0, %"for read_input.s0.y.rebased830" ]
  %14685 = shl nsw i32 %read_input.s0.x.x837, 5
  %a417 = add nsw i32 %271, %14685
  %14686 = icmp sgt i32 %b419, %a417
  %read_input.s0.x.v2.base.s838 = select i1 %14686, i32 %a417, i32 %b419
  %14687 = add nsw i32 %read_input.s0.x.v2.base.s838, -32
  %14688 = insertelement <32 x i32> undef, i32 %14687, i32 0
  %14689 = shufflevector <32 x i32> %14688, <32 x i32> undef, <32 x i32> zeroinitializer
  %a420 = add nsw <32 x i32> %14689, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14690 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14691 = icmp sgt <8 x i32> %274, %14690
  %14692 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14693 = icmp sgt <8 x i32> %274, %14692
  %14694 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14695 = icmp sgt <8 x i32> %274, %14694
  %14696 = shufflevector <32 x i32> %a420, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14697 = icmp sgt <8 x i32> %274, %14696
  %14698 = select <8 x i1> %14691, <8 x i32> %14690, <8 x i32> %274
  %14699 = select <8 x i1> %14693, <8 x i32> %14692, <8 x i32> %274
  %14700 = select <8 x i1> %14695, <8 x i32> %14694, <8 x i32> %274
  %14701 = select <8 x i1> %14697, <8 x i32> %14696, <8 x i32> %274
  %14702 = icmp sgt <8 x i32> %14698, %276
  %14703 = icmp sgt <8 x i32> %14699, %276
  %14704 = icmp sgt <8 x i32> %14700, %276
  %14705 = icmp sgt <8 x i32> %14701, %276
  %14706 = select <8 x i1> %14702, <8 x i32> %14698, <8 x i32> %276
  %14707 = select <8 x i1> %14703, <8 x i32> %14699, <8 x i32> %276
  %14708 = select <8 x i1> %14704, <8 x i32> %14700, <8 x i32> %276
  %14709 = select <8 x i1> %14705, <8 x i32> %14701, <8 x i32> %276
  %14710 = shufflevector <8 x i32> %14706, <8 x i32> %14707, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14711 = shufflevector <8 x i32> %14708, <8 x i32> %14709, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14712 = shufflevector <16 x i32> %14710, <16 x i32> %14711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14713 = add nsw <32 x i32> %14712, %14671
  %14714 = extractelement <32 x i32> %14713, i32 0
  %14715 = sext i32 %14714 to i64
  %14716 = getelementptr inbounds i16, i16* %261, i64 %14715
  %14717 = load i16, i16* %14716, align 2, !tbaa !393
  %14718 = insertelement <32 x i16> undef, i16 %14717, i32 0
  %14719 = extractelement <32 x i32> %14713, i32 1
  %14720 = sext i32 %14719 to i64
  %14721 = getelementptr inbounds i16, i16* %261, i64 %14720
  %14722 = load i16, i16* %14721, align 2, !tbaa !393
  %14723 = insertelement <32 x i16> %14718, i16 %14722, i32 1
  %14724 = extractelement <32 x i32> %14713, i32 2
  %14725 = sext i32 %14724 to i64
  %14726 = getelementptr inbounds i16, i16* %261, i64 %14725
  %14727 = load i16, i16* %14726, align 2, !tbaa !393
  %14728 = insertelement <32 x i16> %14723, i16 %14727, i32 2
  %14729 = extractelement <32 x i32> %14713, i32 3
  %14730 = sext i32 %14729 to i64
  %14731 = getelementptr inbounds i16, i16* %261, i64 %14730
  %14732 = load i16, i16* %14731, align 2, !tbaa !393
  %14733 = insertelement <32 x i16> %14728, i16 %14732, i32 3
  %14734 = extractelement <32 x i32> %14713, i32 4
  %14735 = sext i32 %14734 to i64
  %14736 = getelementptr inbounds i16, i16* %261, i64 %14735
  %14737 = load i16, i16* %14736, align 2, !tbaa !393
  %14738 = insertelement <32 x i16> %14733, i16 %14737, i32 4
  %14739 = extractelement <32 x i32> %14713, i32 5
  %14740 = sext i32 %14739 to i64
  %14741 = getelementptr inbounds i16, i16* %261, i64 %14740
  %14742 = load i16, i16* %14741, align 2, !tbaa !393
  %14743 = insertelement <32 x i16> %14738, i16 %14742, i32 5
  %14744 = extractelement <32 x i32> %14713, i32 6
  %14745 = sext i32 %14744 to i64
  %14746 = getelementptr inbounds i16, i16* %261, i64 %14745
  %14747 = load i16, i16* %14746, align 2, !tbaa !393
  %14748 = insertelement <32 x i16> %14743, i16 %14747, i32 6
  %14749 = extractelement <32 x i32> %14713, i32 7
  %14750 = sext i32 %14749 to i64
  %14751 = getelementptr inbounds i16, i16* %261, i64 %14750
  %14752 = load i16, i16* %14751, align 2, !tbaa !393
  %14753 = insertelement <32 x i16> %14748, i16 %14752, i32 7
  %14754 = extractelement <32 x i32> %14713, i32 8
  %14755 = sext i32 %14754 to i64
  %14756 = getelementptr inbounds i16, i16* %261, i64 %14755
  %14757 = load i16, i16* %14756, align 2, !tbaa !393
  %14758 = insertelement <32 x i16> %14753, i16 %14757, i32 8
  %14759 = extractelement <32 x i32> %14713, i32 9
  %14760 = sext i32 %14759 to i64
  %14761 = getelementptr inbounds i16, i16* %261, i64 %14760
  %14762 = load i16, i16* %14761, align 2, !tbaa !393
  %14763 = insertelement <32 x i16> %14758, i16 %14762, i32 9
  %14764 = extractelement <32 x i32> %14713, i32 10
  %14765 = sext i32 %14764 to i64
  %14766 = getelementptr inbounds i16, i16* %261, i64 %14765
  %14767 = load i16, i16* %14766, align 2, !tbaa !393
  %14768 = insertelement <32 x i16> %14763, i16 %14767, i32 10
  %14769 = extractelement <32 x i32> %14713, i32 11
  %14770 = sext i32 %14769 to i64
  %14771 = getelementptr inbounds i16, i16* %261, i64 %14770
  %14772 = load i16, i16* %14771, align 2, !tbaa !393
  %14773 = insertelement <32 x i16> %14768, i16 %14772, i32 11
  %14774 = extractelement <32 x i32> %14713, i32 12
  %14775 = sext i32 %14774 to i64
  %14776 = getelementptr inbounds i16, i16* %261, i64 %14775
  %14777 = load i16, i16* %14776, align 2, !tbaa !393
  %14778 = insertelement <32 x i16> %14773, i16 %14777, i32 12
  %14779 = extractelement <32 x i32> %14713, i32 13
  %14780 = sext i32 %14779 to i64
  %14781 = getelementptr inbounds i16, i16* %261, i64 %14780
  %14782 = load i16, i16* %14781, align 2, !tbaa !393
  %14783 = insertelement <32 x i16> %14778, i16 %14782, i32 13
  %14784 = extractelement <32 x i32> %14713, i32 14
  %14785 = sext i32 %14784 to i64
  %14786 = getelementptr inbounds i16, i16* %261, i64 %14785
  %14787 = load i16, i16* %14786, align 2, !tbaa !393
  %14788 = insertelement <32 x i16> %14783, i16 %14787, i32 14
  %14789 = extractelement <32 x i32> %14713, i32 15
  %14790 = sext i32 %14789 to i64
  %14791 = getelementptr inbounds i16, i16* %261, i64 %14790
  %14792 = load i16, i16* %14791, align 2, !tbaa !393
  %14793 = insertelement <32 x i16> %14788, i16 %14792, i32 15
  %14794 = extractelement <32 x i32> %14713, i32 16
  %14795 = sext i32 %14794 to i64
  %14796 = getelementptr inbounds i16, i16* %261, i64 %14795
  %14797 = load i16, i16* %14796, align 2, !tbaa !393
  %14798 = insertelement <32 x i16> %14793, i16 %14797, i32 16
  %14799 = extractelement <32 x i32> %14713, i32 17
  %14800 = sext i32 %14799 to i64
  %14801 = getelementptr inbounds i16, i16* %261, i64 %14800
  %14802 = load i16, i16* %14801, align 2, !tbaa !393
  %14803 = insertelement <32 x i16> %14798, i16 %14802, i32 17
  %14804 = extractelement <32 x i32> %14713, i32 18
  %14805 = sext i32 %14804 to i64
  %14806 = getelementptr inbounds i16, i16* %261, i64 %14805
  %14807 = load i16, i16* %14806, align 2, !tbaa !393
  %14808 = insertelement <32 x i16> %14803, i16 %14807, i32 18
  %14809 = extractelement <32 x i32> %14713, i32 19
  %14810 = sext i32 %14809 to i64
  %14811 = getelementptr inbounds i16, i16* %261, i64 %14810
  %14812 = load i16, i16* %14811, align 2, !tbaa !393
  %14813 = insertelement <32 x i16> %14808, i16 %14812, i32 19
  %14814 = extractelement <32 x i32> %14713, i32 20
  %14815 = sext i32 %14814 to i64
  %14816 = getelementptr inbounds i16, i16* %261, i64 %14815
  %14817 = load i16, i16* %14816, align 2, !tbaa !393
  %14818 = insertelement <32 x i16> %14813, i16 %14817, i32 20
  %14819 = extractelement <32 x i32> %14713, i32 21
  %14820 = sext i32 %14819 to i64
  %14821 = getelementptr inbounds i16, i16* %261, i64 %14820
  %14822 = load i16, i16* %14821, align 2, !tbaa !393
  %14823 = insertelement <32 x i16> %14818, i16 %14822, i32 21
  %14824 = extractelement <32 x i32> %14713, i32 22
  %14825 = sext i32 %14824 to i64
  %14826 = getelementptr inbounds i16, i16* %261, i64 %14825
  %14827 = load i16, i16* %14826, align 2, !tbaa !393
  %14828 = insertelement <32 x i16> %14823, i16 %14827, i32 22
  %14829 = extractelement <32 x i32> %14713, i32 23
  %14830 = sext i32 %14829 to i64
  %14831 = getelementptr inbounds i16, i16* %261, i64 %14830
  %14832 = load i16, i16* %14831, align 2, !tbaa !393
  %14833 = insertelement <32 x i16> %14828, i16 %14832, i32 23
  %14834 = extractelement <32 x i32> %14713, i32 24
  %14835 = sext i32 %14834 to i64
  %14836 = getelementptr inbounds i16, i16* %261, i64 %14835
  %14837 = load i16, i16* %14836, align 2, !tbaa !393
  %14838 = insertelement <32 x i16> %14833, i16 %14837, i32 24
  %14839 = extractelement <32 x i32> %14713, i32 25
  %14840 = sext i32 %14839 to i64
  %14841 = getelementptr inbounds i16, i16* %261, i64 %14840
  %14842 = load i16, i16* %14841, align 2, !tbaa !393
  %14843 = insertelement <32 x i16> %14838, i16 %14842, i32 25
  %14844 = extractelement <32 x i32> %14713, i32 26
  %14845 = sext i32 %14844 to i64
  %14846 = getelementptr inbounds i16, i16* %261, i64 %14845
  %14847 = load i16, i16* %14846, align 2, !tbaa !393
  %14848 = insertelement <32 x i16> %14843, i16 %14847, i32 26
  %14849 = extractelement <32 x i32> %14713, i32 27
  %14850 = sext i32 %14849 to i64
  %14851 = getelementptr inbounds i16, i16* %261, i64 %14850
  %14852 = load i16, i16* %14851, align 2, !tbaa !393
  %14853 = insertelement <32 x i16> %14848, i16 %14852, i32 27
  %14854 = extractelement <32 x i32> %14713, i32 28
  %14855 = sext i32 %14854 to i64
  %14856 = getelementptr inbounds i16, i16* %261, i64 %14855
  %14857 = load i16, i16* %14856, align 2, !tbaa !393
  %14858 = insertelement <32 x i16> %14853, i16 %14857, i32 28
  %14859 = extractelement <32 x i32> %14713, i32 29
  %14860 = sext i32 %14859 to i64
  %14861 = getelementptr inbounds i16, i16* %261, i64 %14860
  %14862 = load i16, i16* %14861, align 2, !tbaa !393
  %14863 = insertelement <32 x i16> %14858, i16 %14862, i32 29
  %14864 = extractelement <32 x i32> %14713, i32 30
  %14865 = sext i32 %14864 to i64
  %14866 = getelementptr inbounds i16, i16* %261, i64 %14865
  %14867 = load i16, i16* %14866, align 2, !tbaa !393
  %14868 = insertelement <32 x i16> %14863, i16 %14867, i32 30
  %14869 = extractelement <32 x i32> %14713, i32 31
  %14870 = sext i32 %14869 to i64
  %14871 = getelementptr inbounds i16, i16* %261, i64 %14870
  %14872 = load i16, i16* %14871, align 2, !tbaa !393
  %14873 = insertelement <32 x i16> %14868, i16 %14872, i32 31
  %14874 = shufflevector <32 x i16> %14873, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14875 = sext i32 %read_input.s0.x.v2.base.s838 to i64
  %14876 = add nsw i64 %14875, %14672
  %14877 = getelementptr inbounds i16, i16* %read_input822, i64 %14876
  %14878 = getelementptr inbounds i16, i16* %14877, i64 -32
  %14879 = bitcast i16* %14878 to <16 x i16>*
  store <16 x i16> %14874, <16 x i16>* %14879, align 2, !tbaa !396
  %14880 = shufflevector <32 x i16> %14873, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14881 = getelementptr inbounds i16, i16* %14877, i64 -16
  %14882 = bitcast i16* %14881 to <16 x i16>*
  store <16 x i16> %14880, <16 x i16>* %14882, align 2, !tbaa !396
  %14883 = add nuw nsw i32 %read_input.s0.x.x837, 1
  %.not2689 = icmp eq i32 %14883, %215
  br i1 %.not2689, label %"end for read_input.s0.x.x836", label %"for read_input.s0.x.x835"

"end for read_input.s0.x.x836":                   ; preds = %"for read_input.s0.x.x835"
  %indvars.iv.next3356 = add nuw nsw i64 %indvars.iv3355, 1
  %.not2688 = icmp eq i64 %indvars.iv.next3356, %14661
  br i1 %.not2688, label %"end for read_input.s0.y.rebased831", label %"for read_input.s0.y.rebased830"

"for read_input.s0.y.rebased845":                 ; preds = %"for read_input.s0.y.rebased845.preheader", %"end for read_input.s0.x.x.rebased861"
  %indvars.iv3361 = phi i64 [ 0, %"for read_input.s0.y.rebased845.preheader" ], [ %indvars.iv.next3362, %"end for read_input.s0.x.x.rebased861" ]
  %14884 = add nsw i64 %indvars.iv3361, %14683
  %14885 = mul nsw i64 %14884, %528
  %14886 = sub nsw i64 %14885, %529
  br i1 %278, label %"for read_input.s0.x.x849.preheader", label %"end for read_input.s0.x.x850", !prof !386

"for read_input.s0.x.x849.preheader":             ; preds = %"for read_input.s0.y.rebased845"
  %14887 = trunc i64 %14886 to i32
  %14888 = insertelement <32 x i32> undef, i32 %14887, i32 0
  %14889 = shufflevector <32 x i32> %14888, <32 x i32> undef, <32 x i32> zeroinitializer
  %14890 = add nuw nsw i64 %14682, %indvars.iv3361
  %14891 = mul nsw i64 %14890, %282
  %14892 = sub i64 %14891, %283
  br label %"for read_input.s0.x.x849"

"end for read_input.s0.y.rebased846":             ; preds = %"end for read_input.s0.x.x.rebased861", %"end for read_input.s0.y.rebased831"
  %a524 = add nsw i32 %blur_y.s0.y.yi.base.s819, %286
  %14893 = icmp slt i32 %a524, 0
  %a523 = select i1 %14893, i32 %a524, i32 0
  %14894 = icmp sgt i32 %a523, -36
  br i1 %14894, label %"for read_input.s0.y.rebased869.preheader", label %"end for read_input.s0.y.rebased870", !prof !386

"for read_input.s0.y.rebased869.preheader":       ; preds = %"end for read_input.s0.y.rebased846"
  %14895 = select i1 %14656, i32 %a382, i32 %b380
  %14896 = sub nsw i32 %14895, %205
  %14897 = sext i32 %blur_y.s0.y.yi.base.s819 to i64
  %a548 = sub nsw i64 %288, %14897
  %14898 = icmp slt i64 %a548, 36
  %a547 = select i1 %14898, i64 %a548, i64 36
  %14899 = icmp sgt i64 %a547, 0
  %14900 = select i1 %14899, i64 %a547, i64 0
  %a523.op = add nsw i32 %a523, 35
  %14901 = zext i32 %a523.op to i64
  br label %"for read_input.s0.y.rebased869"

"for read_input.s0.x.x849":                       ; preds = %"for read_input.s0.x.x849.preheader", %"for read_input.s0.x.x849"
  %read_input.s0.x.x851 = phi i32 [ %15100, %"for read_input.s0.x.x849" ], [ 0, %"for read_input.s0.x.x849.preheader" ]
  %14902 = shl nsw i32 %read_input.s0.x.x851, 5
  %a459 = add nsw i32 %271, %14902
  %14903 = icmp sgt i32 %b419, %a459
  %read_input.s0.x.v2.base.s852 = select i1 %14903, i32 %a459, i32 %b419
  %14904 = add nsw i32 %read_input.s0.x.v2.base.s852, -32
  %14905 = insertelement <32 x i32> undef, i32 %14904, i32 0
  %14906 = shufflevector <32 x i32> %14905, <32 x i32> undef, <32 x i32> zeroinitializer
  %a462 = add nsw <32 x i32> %14906, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14907 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14908 = icmp sgt <8 x i32> %274, %14907
  %14909 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14910 = icmp sgt <8 x i32> %274, %14909
  %14911 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14912 = icmp sgt <8 x i32> %274, %14911
  %14913 = shufflevector <32 x i32> %a462, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14914 = icmp sgt <8 x i32> %274, %14913
  %14915 = select <8 x i1> %14908, <8 x i32> %14907, <8 x i32> %274
  %14916 = select <8 x i1> %14910, <8 x i32> %14909, <8 x i32> %274
  %14917 = select <8 x i1> %14912, <8 x i32> %14911, <8 x i32> %274
  %14918 = select <8 x i1> %14914, <8 x i32> %14913, <8 x i32> %274
  %14919 = icmp sgt <8 x i32> %14915, %276
  %14920 = icmp sgt <8 x i32> %14916, %276
  %14921 = icmp sgt <8 x i32> %14917, %276
  %14922 = icmp sgt <8 x i32> %14918, %276
  %14923 = select <8 x i1> %14919, <8 x i32> %14915, <8 x i32> %276
  %14924 = select <8 x i1> %14920, <8 x i32> %14916, <8 x i32> %276
  %14925 = select <8 x i1> %14921, <8 x i32> %14917, <8 x i32> %276
  %14926 = select <8 x i1> %14922, <8 x i32> %14918, <8 x i32> %276
  %14927 = shufflevector <8 x i32> %14923, <8 x i32> %14924, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14928 = shufflevector <8 x i32> %14925, <8 x i32> %14926, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14929 = shufflevector <16 x i32> %14927, <16 x i32> %14928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14930 = add nsw <32 x i32> %14929, %14889
  %14931 = extractelement <32 x i32> %14930, i32 0
  %14932 = sext i32 %14931 to i64
  %14933 = getelementptr inbounds i16, i16* %261, i64 %14932
  %14934 = load i16, i16* %14933, align 2, !tbaa !393
  %14935 = insertelement <32 x i16> undef, i16 %14934, i32 0
  %14936 = extractelement <32 x i32> %14930, i32 1
  %14937 = sext i32 %14936 to i64
  %14938 = getelementptr inbounds i16, i16* %261, i64 %14937
  %14939 = load i16, i16* %14938, align 2, !tbaa !393
  %14940 = insertelement <32 x i16> %14935, i16 %14939, i32 1
  %14941 = extractelement <32 x i32> %14930, i32 2
  %14942 = sext i32 %14941 to i64
  %14943 = getelementptr inbounds i16, i16* %261, i64 %14942
  %14944 = load i16, i16* %14943, align 2, !tbaa !393
  %14945 = insertelement <32 x i16> %14940, i16 %14944, i32 2
  %14946 = extractelement <32 x i32> %14930, i32 3
  %14947 = sext i32 %14946 to i64
  %14948 = getelementptr inbounds i16, i16* %261, i64 %14947
  %14949 = load i16, i16* %14948, align 2, !tbaa !393
  %14950 = insertelement <32 x i16> %14945, i16 %14949, i32 3
  %14951 = extractelement <32 x i32> %14930, i32 4
  %14952 = sext i32 %14951 to i64
  %14953 = getelementptr inbounds i16, i16* %261, i64 %14952
  %14954 = load i16, i16* %14953, align 2, !tbaa !393
  %14955 = insertelement <32 x i16> %14950, i16 %14954, i32 4
  %14956 = extractelement <32 x i32> %14930, i32 5
  %14957 = sext i32 %14956 to i64
  %14958 = getelementptr inbounds i16, i16* %261, i64 %14957
  %14959 = load i16, i16* %14958, align 2, !tbaa !393
  %14960 = insertelement <32 x i16> %14955, i16 %14959, i32 5
  %14961 = extractelement <32 x i32> %14930, i32 6
  %14962 = sext i32 %14961 to i64
  %14963 = getelementptr inbounds i16, i16* %261, i64 %14962
  %14964 = load i16, i16* %14963, align 2, !tbaa !393
  %14965 = insertelement <32 x i16> %14960, i16 %14964, i32 6
  %14966 = extractelement <32 x i32> %14930, i32 7
  %14967 = sext i32 %14966 to i64
  %14968 = getelementptr inbounds i16, i16* %261, i64 %14967
  %14969 = load i16, i16* %14968, align 2, !tbaa !393
  %14970 = insertelement <32 x i16> %14965, i16 %14969, i32 7
  %14971 = extractelement <32 x i32> %14930, i32 8
  %14972 = sext i32 %14971 to i64
  %14973 = getelementptr inbounds i16, i16* %261, i64 %14972
  %14974 = load i16, i16* %14973, align 2, !tbaa !393
  %14975 = insertelement <32 x i16> %14970, i16 %14974, i32 8
  %14976 = extractelement <32 x i32> %14930, i32 9
  %14977 = sext i32 %14976 to i64
  %14978 = getelementptr inbounds i16, i16* %261, i64 %14977
  %14979 = load i16, i16* %14978, align 2, !tbaa !393
  %14980 = insertelement <32 x i16> %14975, i16 %14979, i32 9
  %14981 = extractelement <32 x i32> %14930, i32 10
  %14982 = sext i32 %14981 to i64
  %14983 = getelementptr inbounds i16, i16* %261, i64 %14982
  %14984 = load i16, i16* %14983, align 2, !tbaa !393
  %14985 = insertelement <32 x i16> %14980, i16 %14984, i32 10
  %14986 = extractelement <32 x i32> %14930, i32 11
  %14987 = sext i32 %14986 to i64
  %14988 = getelementptr inbounds i16, i16* %261, i64 %14987
  %14989 = load i16, i16* %14988, align 2, !tbaa !393
  %14990 = insertelement <32 x i16> %14985, i16 %14989, i32 11
  %14991 = extractelement <32 x i32> %14930, i32 12
  %14992 = sext i32 %14991 to i64
  %14993 = getelementptr inbounds i16, i16* %261, i64 %14992
  %14994 = load i16, i16* %14993, align 2, !tbaa !393
  %14995 = insertelement <32 x i16> %14990, i16 %14994, i32 12
  %14996 = extractelement <32 x i32> %14930, i32 13
  %14997 = sext i32 %14996 to i64
  %14998 = getelementptr inbounds i16, i16* %261, i64 %14997
  %14999 = load i16, i16* %14998, align 2, !tbaa !393
  %15000 = insertelement <32 x i16> %14995, i16 %14999, i32 13
  %15001 = extractelement <32 x i32> %14930, i32 14
  %15002 = sext i32 %15001 to i64
  %15003 = getelementptr inbounds i16, i16* %261, i64 %15002
  %15004 = load i16, i16* %15003, align 2, !tbaa !393
  %15005 = insertelement <32 x i16> %15000, i16 %15004, i32 14
  %15006 = extractelement <32 x i32> %14930, i32 15
  %15007 = sext i32 %15006 to i64
  %15008 = getelementptr inbounds i16, i16* %261, i64 %15007
  %15009 = load i16, i16* %15008, align 2, !tbaa !393
  %15010 = insertelement <32 x i16> %15005, i16 %15009, i32 15
  %15011 = extractelement <32 x i32> %14930, i32 16
  %15012 = sext i32 %15011 to i64
  %15013 = getelementptr inbounds i16, i16* %261, i64 %15012
  %15014 = load i16, i16* %15013, align 2, !tbaa !393
  %15015 = insertelement <32 x i16> %15010, i16 %15014, i32 16
  %15016 = extractelement <32 x i32> %14930, i32 17
  %15017 = sext i32 %15016 to i64
  %15018 = getelementptr inbounds i16, i16* %261, i64 %15017
  %15019 = load i16, i16* %15018, align 2, !tbaa !393
  %15020 = insertelement <32 x i16> %15015, i16 %15019, i32 17
  %15021 = extractelement <32 x i32> %14930, i32 18
  %15022 = sext i32 %15021 to i64
  %15023 = getelementptr inbounds i16, i16* %261, i64 %15022
  %15024 = load i16, i16* %15023, align 2, !tbaa !393
  %15025 = insertelement <32 x i16> %15020, i16 %15024, i32 18
  %15026 = extractelement <32 x i32> %14930, i32 19
  %15027 = sext i32 %15026 to i64
  %15028 = getelementptr inbounds i16, i16* %261, i64 %15027
  %15029 = load i16, i16* %15028, align 2, !tbaa !393
  %15030 = insertelement <32 x i16> %15025, i16 %15029, i32 19
  %15031 = extractelement <32 x i32> %14930, i32 20
  %15032 = sext i32 %15031 to i64
  %15033 = getelementptr inbounds i16, i16* %261, i64 %15032
  %15034 = load i16, i16* %15033, align 2, !tbaa !393
  %15035 = insertelement <32 x i16> %15030, i16 %15034, i32 20
  %15036 = extractelement <32 x i32> %14930, i32 21
  %15037 = sext i32 %15036 to i64
  %15038 = getelementptr inbounds i16, i16* %261, i64 %15037
  %15039 = load i16, i16* %15038, align 2, !tbaa !393
  %15040 = insertelement <32 x i16> %15035, i16 %15039, i32 21
  %15041 = extractelement <32 x i32> %14930, i32 22
  %15042 = sext i32 %15041 to i64
  %15043 = getelementptr inbounds i16, i16* %261, i64 %15042
  %15044 = load i16, i16* %15043, align 2, !tbaa !393
  %15045 = insertelement <32 x i16> %15040, i16 %15044, i32 22
  %15046 = extractelement <32 x i32> %14930, i32 23
  %15047 = sext i32 %15046 to i64
  %15048 = getelementptr inbounds i16, i16* %261, i64 %15047
  %15049 = load i16, i16* %15048, align 2, !tbaa !393
  %15050 = insertelement <32 x i16> %15045, i16 %15049, i32 23
  %15051 = extractelement <32 x i32> %14930, i32 24
  %15052 = sext i32 %15051 to i64
  %15053 = getelementptr inbounds i16, i16* %261, i64 %15052
  %15054 = load i16, i16* %15053, align 2, !tbaa !393
  %15055 = insertelement <32 x i16> %15050, i16 %15054, i32 24
  %15056 = extractelement <32 x i32> %14930, i32 25
  %15057 = sext i32 %15056 to i64
  %15058 = getelementptr inbounds i16, i16* %261, i64 %15057
  %15059 = load i16, i16* %15058, align 2, !tbaa !393
  %15060 = insertelement <32 x i16> %15055, i16 %15059, i32 25
  %15061 = extractelement <32 x i32> %14930, i32 26
  %15062 = sext i32 %15061 to i64
  %15063 = getelementptr inbounds i16, i16* %261, i64 %15062
  %15064 = load i16, i16* %15063, align 2, !tbaa !393
  %15065 = insertelement <32 x i16> %15060, i16 %15064, i32 26
  %15066 = extractelement <32 x i32> %14930, i32 27
  %15067 = sext i32 %15066 to i64
  %15068 = getelementptr inbounds i16, i16* %261, i64 %15067
  %15069 = load i16, i16* %15068, align 2, !tbaa !393
  %15070 = insertelement <32 x i16> %15065, i16 %15069, i32 27
  %15071 = extractelement <32 x i32> %14930, i32 28
  %15072 = sext i32 %15071 to i64
  %15073 = getelementptr inbounds i16, i16* %261, i64 %15072
  %15074 = load i16, i16* %15073, align 2, !tbaa !393
  %15075 = insertelement <32 x i16> %15070, i16 %15074, i32 28
  %15076 = extractelement <32 x i32> %14930, i32 29
  %15077 = sext i32 %15076 to i64
  %15078 = getelementptr inbounds i16, i16* %261, i64 %15077
  %15079 = load i16, i16* %15078, align 2, !tbaa !393
  %15080 = insertelement <32 x i16> %15075, i16 %15079, i32 29
  %15081 = extractelement <32 x i32> %14930, i32 30
  %15082 = sext i32 %15081 to i64
  %15083 = getelementptr inbounds i16, i16* %261, i64 %15082
  %15084 = load i16, i16* %15083, align 2, !tbaa !393
  %15085 = insertelement <32 x i16> %15080, i16 %15084, i32 30
  %15086 = extractelement <32 x i32> %14930, i32 31
  %15087 = sext i32 %15086 to i64
  %15088 = getelementptr inbounds i16, i16* %261, i64 %15087
  %15089 = load i16, i16* %15088, align 2, !tbaa !393
  %15090 = insertelement <32 x i16> %15085, i16 %15089, i32 31
  %15091 = shufflevector <32 x i16> %15090, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15092 = sext i32 %read_input.s0.x.v2.base.s852 to i64
  %15093 = add nsw i64 %14892, %15092
  %15094 = getelementptr inbounds i16, i16* %read_input822, i64 %15093
  %15095 = getelementptr inbounds i16, i16* %15094, i64 -32
  %15096 = bitcast i16* %15095 to <16 x i16>*
  store <16 x i16> %15091, <16 x i16>* %15096, align 2, !tbaa !396
  %15097 = shufflevector <32 x i16> %15090, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15098 = getelementptr inbounds i16, i16* %15094, i64 -16
  %15099 = bitcast i16* %15098 to <16 x i16>*
  store <16 x i16> %15097, <16 x i16>* %15099, align 2, !tbaa !396
  %15100 = add nuw nsw i32 %read_input.s0.x.x851, 1
  %.not2686 = icmp eq i32 %15100, %t1642
  br i1 %.not2686, label %"end for read_input.s0.x.x850", label %"for read_input.s0.x.x849"

"end for read_input.s0.x.x850":                   ; preds = %"for read_input.s0.x.x849", %"for read_input.s0.y.rebased845"
  br i1 %284, label %"for read_input.s0.x.x.rebased855.preheader", label %"end for read_input.s0.x.x.rebased856", !prof !386

"for read_input.s0.x.x.rebased855.preheader":     ; preds = %"end for read_input.s0.x.x850"
  %15101 = add nuw nsw i64 %14682, %indvars.iv3361
  %15102 = mul nsw i64 %15101, %282
  %15103 = sub i64 %15102, %283
  br i1 %531, label %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased855"

"for read_input.s0.x.x.rebased855":               ; preds = %"for read_input.s0.x.x.rebased855.preheader", %"for read_input.s0.x.x.rebased855"
  %indvars.iv3358 = phi i64 [ %indvars.iv.next3359.3, %"for read_input.s0.x.x.rebased855" ], [ 0, %"for read_input.s0.x.x.rebased855.preheader" ]
  %niter3667 = phi i64 [ %niter3667.nsub.3, %"for read_input.s0.x.x.rebased855" ], [ %unroll_iter3666, %"for read_input.s0.x.x.rebased855.preheader" ]
  %15104 = add nuw nsw i64 %indvars.iv3358, %525
  %15105 = shl nsw i64 %15104, 5
  %15106 = add nsw i64 %15105, %526
  %15107 = add nsw i64 %15106, %14886
  %15108 = getelementptr inbounds i16, i16* %261, i64 %15107
  %15109 = getelementptr inbounds i16, i16* %15108, i64 -32
  %15110 = bitcast i16* %15109 to <16 x i16>*
  %15111 = load <16 x i16>, <16 x i16>* %15110, align 2, !tbaa !393
  %15112 = getelementptr inbounds i16, i16* %15108, i64 -16
  %15113 = bitcast i16* %15112 to <16 x i16>*
  %15114 = load <16 x i16>, <16 x i16>* %15113, align 2, !tbaa !393
  %15115 = add nsw i64 %15103, %15106
  %15116 = getelementptr inbounds i16, i16* %read_input822, i64 %15115
  %15117 = getelementptr inbounds i16, i16* %15116, i64 -32
  %15118 = bitcast i16* %15117 to <16 x i16>*
  store <16 x i16> %15111, <16 x i16>* %15118, align 2, !tbaa !396
  %15119 = getelementptr inbounds i16, i16* %15116, i64 -16
  %15120 = bitcast i16* %15119 to <16 x i16>*
  store <16 x i16> %15114, <16 x i16>* %15120, align 2, !tbaa !396
  %indvars.iv.next3359 = or i64 %indvars.iv3358, 1
  %15121 = add nuw nsw i64 %indvars.iv.next3359, %525
  %15122 = shl nsw i64 %15121, 5
  %15123 = add nsw i64 %15122, %526
  %15124 = add nsw i64 %15123, %14886
  %15125 = getelementptr inbounds i16, i16* %261, i64 %15124
  %15126 = getelementptr inbounds i16, i16* %15125, i64 -32
  %15127 = bitcast i16* %15126 to <16 x i16>*
  %15128 = load <16 x i16>, <16 x i16>* %15127, align 2, !tbaa !393
  %15129 = getelementptr inbounds i16, i16* %15125, i64 -16
  %15130 = bitcast i16* %15129 to <16 x i16>*
  %15131 = load <16 x i16>, <16 x i16>* %15130, align 2, !tbaa !393
  %15132 = add nsw i64 %15103, %15123
  %15133 = getelementptr inbounds i16, i16* %read_input822, i64 %15132
  %15134 = getelementptr inbounds i16, i16* %15133, i64 -32
  %15135 = bitcast i16* %15134 to <16 x i16>*
  store <16 x i16> %15128, <16 x i16>* %15135, align 2, !tbaa !396
  %15136 = getelementptr inbounds i16, i16* %15133, i64 -16
  %15137 = bitcast i16* %15136 to <16 x i16>*
  store <16 x i16> %15131, <16 x i16>* %15137, align 2, !tbaa !396
  %indvars.iv.next3359.1 = or i64 %indvars.iv3358, 2
  %15138 = add nuw nsw i64 %indvars.iv.next3359.1, %525
  %15139 = shl nsw i64 %15138, 5
  %15140 = add nsw i64 %15139, %526
  %15141 = add nsw i64 %15140, %14886
  %15142 = getelementptr inbounds i16, i16* %261, i64 %15141
  %15143 = getelementptr inbounds i16, i16* %15142, i64 -32
  %15144 = bitcast i16* %15143 to <16 x i16>*
  %15145 = load <16 x i16>, <16 x i16>* %15144, align 2, !tbaa !393
  %15146 = getelementptr inbounds i16, i16* %15142, i64 -16
  %15147 = bitcast i16* %15146 to <16 x i16>*
  %15148 = load <16 x i16>, <16 x i16>* %15147, align 2, !tbaa !393
  %15149 = add nsw i64 %15103, %15140
  %15150 = getelementptr inbounds i16, i16* %read_input822, i64 %15149
  %15151 = getelementptr inbounds i16, i16* %15150, i64 -32
  %15152 = bitcast i16* %15151 to <16 x i16>*
  store <16 x i16> %15145, <16 x i16>* %15152, align 2, !tbaa !396
  %15153 = getelementptr inbounds i16, i16* %15150, i64 -16
  %15154 = bitcast i16* %15153 to <16 x i16>*
  store <16 x i16> %15148, <16 x i16>* %15154, align 2, !tbaa !396
  %indvars.iv.next3359.2 = or i64 %indvars.iv3358, 3
  %15155 = add nuw nsw i64 %indvars.iv.next3359.2, %525
  %15156 = shl nsw i64 %15155, 5
  %15157 = add nsw i64 %15156, %526
  %15158 = add nsw i64 %15157, %14886
  %15159 = getelementptr inbounds i16, i16* %261, i64 %15158
  %15160 = getelementptr inbounds i16, i16* %15159, i64 -32
  %15161 = bitcast i16* %15160 to <16 x i16>*
  %15162 = load <16 x i16>, <16 x i16>* %15161, align 2, !tbaa !393
  %15163 = getelementptr inbounds i16, i16* %15159, i64 -16
  %15164 = bitcast i16* %15163 to <16 x i16>*
  %15165 = load <16 x i16>, <16 x i16>* %15164, align 2, !tbaa !393
  %15166 = add nsw i64 %15103, %15157
  %15167 = getelementptr inbounds i16, i16* %read_input822, i64 %15166
  %15168 = getelementptr inbounds i16, i16* %15167, i64 -32
  %15169 = bitcast i16* %15168 to <16 x i16>*
  store <16 x i16> %15162, <16 x i16>* %15169, align 2, !tbaa !396
  %15170 = getelementptr inbounds i16, i16* %15167, i64 -16
  %15171 = bitcast i16* %15170 to <16 x i16>*
  store <16 x i16> %15165, <16 x i16>* %15171, align 2, !tbaa !396
  %indvars.iv.next3359.3 = add nuw nsw i64 %indvars.iv3358, 4
  %niter3667.nsub.3 = add i64 %niter3667, -4
  %niter3667.ncmp.3 = icmp eq i64 %niter3667.nsub.3, 0
  br i1 %niter3667.ncmp.3, label %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased855"

"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased855", %"for read_input.s0.x.x.rebased855.preheader"
  %indvars.iv3358.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased855.preheader" ], [ %indvars.iv.next3359.3, %"for read_input.s0.x.x.rebased855" ]
  br i1 %lcmp.mod3665.not, label %"end for read_input.s0.x.x.rebased856", label %"for read_input.s0.x.x.rebased855.epil"

"for read_input.s0.x.x.rebased855.epil":          ; preds = %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased855.epil"
  %indvars.iv3358.epil = phi i64 [ %indvars.iv.next3359.epil, %"for read_input.s0.x.x.rebased855.epil" ], [ %indvars.iv3358.unr, %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa" ]
  %epil.iter3664 = phi i64 [ %epil.iter3664.sub, %"for read_input.s0.x.x.rebased855.epil" ], [ %xtraiter3663, %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa" ]
  %15172 = add nuw nsw i64 %indvars.iv3358.epil, %525
  %15173 = shl nsw i64 %15172, 5
  %15174 = add nsw i64 %15173, %526
  %15175 = add nsw i64 %15174, %14886
  %15176 = getelementptr inbounds i16, i16* %261, i64 %15175
  %15177 = getelementptr inbounds i16, i16* %15176, i64 -32
  %15178 = bitcast i16* %15177 to <16 x i16>*
  %15179 = load <16 x i16>, <16 x i16>* %15178, align 2, !tbaa !393
  %15180 = getelementptr inbounds i16, i16* %15176, i64 -16
  %15181 = bitcast i16* %15180 to <16 x i16>*
  %15182 = load <16 x i16>, <16 x i16>* %15181, align 2, !tbaa !393
  %15183 = add nsw i64 %15103, %15174
  %15184 = getelementptr inbounds i16, i16* %read_input822, i64 %15183
  %15185 = getelementptr inbounds i16, i16* %15184, i64 -32
  %15186 = bitcast i16* %15185 to <16 x i16>*
  store <16 x i16> %15179, <16 x i16>* %15186, align 2, !tbaa !396
  %15187 = getelementptr inbounds i16, i16* %15184, i64 -16
  %15188 = bitcast i16* %15187 to <16 x i16>*
  store <16 x i16> %15182, <16 x i16>* %15188, align 2, !tbaa !396
  %indvars.iv.next3359.epil = add nuw nsw i64 %indvars.iv3358.epil, 1
  %epil.iter3664.sub = add i64 %epil.iter3664, -1
  %epil.iter3664.cmp.not = icmp eq i64 %epil.iter3664.sub, 0
  br i1 %epil.iter3664.cmp.not, label %"end for read_input.s0.x.x.rebased856", label %"for read_input.s0.x.x.rebased855.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased856":           ; preds = %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased855.epil", %"end for read_input.s0.x.x850"
  br i1 %285, label %"for read_input.s0.x.x.rebased860.preheader", label %"end for read_input.s0.x.x.rebased861", !prof !386

"for read_input.s0.x.x.rebased860.preheader":     ; preds = %"end for read_input.s0.x.x.rebased856"
  %15189 = trunc i64 %14886 to i32
  %15190 = insertelement <32 x i32> undef, i32 %15189, i32 0
  %15191 = shufflevector <32 x i32> %15190, <32 x i32> undef, <32 x i32> zeroinitializer
  %15192 = add nuw nsw i64 %14682, %indvars.iv3361
  %15193 = mul nsw i64 %15192, %282
  %15194 = sub i64 %15193, %283
  br label %"for read_input.s0.x.x.rebased860"

"for read_input.s0.x.x.rebased860":               ; preds = %"for read_input.s0.x.x.rebased860.preheader", %"for read_input.s0.x.x.rebased860"
  %read_input.s0.x.x.rebased862 = phi i32 [ %15394, %"for read_input.s0.x.x.rebased860" ], [ 0, %"for read_input.s0.x.x.rebased860.preheader" ]
  %15195 = add nsw i32 %read_input.s0.x.x.rebased862, %277
  %15196 = shl nsw i32 %15195, 5
  %a501 = add nsw i32 %271, %15196
  %15197 = icmp sgt i32 %b419, %a501
  %read_input.s0.x.v2.base.s863 = select i1 %15197, i32 %a501, i32 %b419
  %15198 = add nsw i32 %read_input.s0.x.v2.base.s863, -32
  %15199 = insertelement <32 x i32> undef, i32 %15198, i32 0
  %15200 = shufflevector <32 x i32> %15199, <32 x i32> undef, <32 x i32> zeroinitializer
  %a517 = add nsw <32 x i32> %15200, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15201 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15202 = icmp sgt <8 x i32> %274, %15201
  %15203 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15204 = icmp sgt <8 x i32> %274, %15203
  %15205 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %15206 = icmp sgt <8 x i32> %274, %15205
  %15207 = shufflevector <32 x i32> %a517, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15208 = icmp sgt <8 x i32> %274, %15207
  %15209 = select <8 x i1> %15202, <8 x i32> %15201, <8 x i32> %274
  %15210 = select <8 x i1> %15204, <8 x i32> %15203, <8 x i32> %274
  %15211 = select <8 x i1> %15206, <8 x i32> %15205, <8 x i32> %274
  %15212 = select <8 x i1> %15208, <8 x i32> %15207, <8 x i32> %274
  %15213 = icmp sgt <8 x i32> %15209, %276
  %15214 = icmp sgt <8 x i32> %15210, %276
  %15215 = icmp sgt <8 x i32> %15211, %276
  %15216 = icmp sgt <8 x i32> %15212, %276
  %15217 = select <8 x i1> %15213, <8 x i32> %15209, <8 x i32> %276
  %15218 = select <8 x i1> %15214, <8 x i32> %15210, <8 x i32> %276
  %15219 = select <8 x i1> %15215, <8 x i32> %15211, <8 x i32> %276
  %15220 = select <8 x i1> %15216, <8 x i32> %15212, <8 x i32> %276
  %15221 = shufflevector <8 x i32> %15217, <8 x i32> %15218, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15222 = shufflevector <8 x i32> %15219, <8 x i32> %15220, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15223 = shufflevector <16 x i32> %15221, <16 x i32> %15222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15224 = add nsw <32 x i32> %15223, %15191
  %15225 = extractelement <32 x i32> %15224, i32 0
  %15226 = sext i32 %15225 to i64
  %15227 = getelementptr inbounds i16, i16* %261, i64 %15226
  %15228 = load i16, i16* %15227, align 2, !tbaa !393
  %15229 = insertelement <32 x i16> undef, i16 %15228, i32 0
  %15230 = extractelement <32 x i32> %15224, i32 1
  %15231 = sext i32 %15230 to i64
  %15232 = getelementptr inbounds i16, i16* %261, i64 %15231
  %15233 = load i16, i16* %15232, align 2, !tbaa !393
  %15234 = insertelement <32 x i16> %15229, i16 %15233, i32 1
  %15235 = extractelement <32 x i32> %15224, i32 2
  %15236 = sext i32 %15235 to i64
  %15237 = getelementptr inbounds i16, i16* %261, i64 %15236
  %15238 = load i16, i16* %15237, align 2, !tbaa !393
  %15239 = insertelement <32 x i16> %15234, i16 %15238, i32 2
  %15240 = extractelement <32 x i32> %15224, i32 3
  %15241 = sext i32 %15240 to i64
  %15242 = getelementptr inbounds i16, i16* %261, i64 %15241
  %15243 = load i16, i16* %15242, align 2, !tbaa !393
  %15244 = insertelement <32 x i16> %15239, i16 %15243, i32 3
  %15245 = extractelement <32 x i32> %15224, i32 4
  %15246 = sext i32 %15245 to i64
  %15247 = getelementptr inbounds i16, i16* %261, i64 %15246
  %15248 = load i16, i16* %15247, align 2, !tbaa !393
  %15249 = insertelement <32 x i16> %15244, i16 %15248, i32 4
  %15250 = extractelement <32 x i32> %15224, i32 5
  %15251 = sext i32 %15250 to i64
  %15252 = getelementptr inbounds i16, i16* %261, i64 %15251
  %15253 = load i16, i16* %15252, align 2, !tbaa !393
  %15254 = insertelement <32 x i16> %15249, i16 %15253, i32 5
  %15255 = extractelement <32 x i32> %15224, i32 6
  %15256 = sext i32 %15255 to i64
  %15257 = getelementptr inbounds i16, i16* %261, i64 %15256
  %15258 = load i16, i16* %15257, align 2, !tbaa !393
  %15259 = insertelement <32 x i16> %15254, i16 %15258, i32 6
  %15260 = extractelement <32 x i32> %15224, i32 7
  %15261 = sext i32 %15260 to i64
  %15262 = getelementptr inbounds i16, i16* %261, i64 %15261
  %15263 = load i16, i16* %15262, align 2, !tbaa !393
  %15264 = insertelement <32 x i16> %15259, i16 %15263, i32 7
  %15265 = extractelement <32 x i32> %15224, i32 8
  %15266 = sext i32 %15265 to i64
  %15267 = getelementptr inbounds i16, i16* %261, i64 %15266
  %15268 = load i16, i16* %15267, align 2, !tbaa !393
  %15269 = insertelement <32 x i16> %15264, i16 %15268, i32 8
  %15270 = extractelement <32 x i32> %15224, i32 9
  %15271 = sext i32 %15270 to i64
  %15272 = getelementptr inbounds i16, i16* %261, i64 %15271
  %15273 = load i16, i16* %15272, align 2, !tbaa !393
  %15274 = insertelement <32 x i16> %15269, i16 %15273, i32 9
  %15275 = extractelement <32 x i32> %15224, i32 10
  %15276 = sext i32 %15275 to i64
  %15277 = getelementptr inbounds i16, i16* %261, i64 %15276
  %15278 = load i16, i16* %15277, align 2, !tbaa !393
  %15279 = insertelement <32 x i16> %15274, i16 %15278, i32 10
  %15280 = extractelement <32 x i32> %15224, i32 11
  %15281 = sext i32 %15280 to i64
  %15282 = getelementptr inbounds i16, i16* %261, i64 %15281
  %15283 = load i16, i16* %15282, align 2, !tbaa !393
  %15284 = insertelement <32 x i16> %15279, i16 %15283, i32 11
  %15285 = extractelement <32 x i32> %15224, i32 12
  %15286 = sext i32 %15285 to i64
  %15287 = getelementptr inbounds i16, i16* %261, i64 %15286
  %15288 = load i16, i16* %15287, align 2, !tbaa !393
  %15289 = insertelement <32 x i16> %15284, i16 %15288, i32 12
  %15290 = extractelement <32 x i32> %15224, i32 13
  %15291 = sext i32 %15290 to i64
  %15292 = getelementptr inbounds i16, i16* %261, i64 %15291
  %15293 = load i16, i16* %15292, align 2, !tbaa !393
  %15294 = insertelement <32 x i16> %15289, i16 %15293, i32 13
  %15295 = extractelement <32 x i32> %15224, i32 14
  %15296 = sext i32 %15295 to i64
  %15297 = getelementptr inbounds i16, i16* %261, i64 %15296
  %15298 = load i16, i16* %15297, align 2, !tbaa !393
  %15299 = insertelement <32 x i16> %15294, i16 %15298, i32 14
  %15300 = extractelement <32 x i32> %15224, i32 15
  %15301 = sext i32 %15300 to i64
  %15302 = getelementptr inbounds i16, i16* %261, i64 %15301
  %15303 = load i16, i16* %15302, align 2, !tbaa !393
  %15304 = insertelement <32 x i16> %15299, i16 %15303, i32 15
  %15305 = extractelement <32 x i32> %15224, i32 16
  %15306 = sext i32 %15305 to i64
  %15307 = getelementptr inbounds i16, i16* %261, i64 %15306
  %15308 = load i16, i16* %15307, align 2, !tbaa !393
  %15309 = insertelement <32 x i16> %15304, i16 %15308, i32 16
  %15310 = extractelement <32 x i32> %15224, i32 17
  %15311 = sext i32 %15310 to i64
  %15312 = getelementptr inbounds i16, i16* %261, i64 %15311
  %15313 = load i16, i16* %15312, align 2, !tbaa !393
  %15314 = insertelement <32 x i16> %15309, i16 %15313, i32 17
  %15315 = extractelement <32 x i32> %15224, i32 18
  %15316 = sext i32 %15315 to i64
  %15317 = getelementptr inbounds i16, i16* %261, i64 %15316
  %15318 = load i16, i16* %15317, align 2, !tbaa !393
  %15319 = insertelement <32 x i16> %15314, i16 %15318, i32 18
  %15320 = extractelement <32 x i32> %15224, i32 19
  %15321 = sext i32 %15320 to i64
  %15322 = getelementptr inbounds i16, i16* %261, i64 %15321
  %15323 = load i16, i16* %15322, align 2, !tbaa !393
  %15324 = insertelement <32 x i16> %15319, i16 %15323, i32 19
  %15325 = extractelement <32 x i32> %15224, i32 20
  %15326 = sext i32 %15325 to i64
  %15327 = getelementptr inbounds i16, i16* %261, i64 %15326
  %15328 = load i16, i16* %15327, align 2, !tbaa !393
  %15329 = insertelement <32 x i16> %15324, i16 %15328, i32 20
  %15330 = extractelement <32 x i32> %15224, i32 21
  %15331 = sext i32 %15330 to i64
  %15332 = getelementptr inbounds i16, i16* %261, i64 %15331
  %15333 = load i16, i16* %15332, align 2, !tbaa !393
  %15334 = insertelement <32 x i16> %15329, i16 %15333, i32 21
  %15335 = extractelement <32 x i32> %15224, i32 22
  %15336 = sext i32 %15335 to i64
  %15337 = getelementptr inbounds i16, i16* %261, i64 %15336
  %15338 = load i16, i16* %15337, align 2, !tbaa !393
  %15339 = insertelement <32 x i16> %15334, i16 %15338, i32 22
  %15340 = extractelement <32 x i32> %15224, i32 23
  %15341 = sext i32 %15340 to i64
  %15342 = getelementptr inbounds i16, i16* %261, i64 %15341
  %15343 = load i16, i16* %15342, align 2, !tbaa !393
  %15344 = insertelement <32 x i16> %15339, i16 %15343, i32 23
  %15345 = extractelement <32 x i32> %15224, i32 24
  %15346 = sext i32 %15345 to i64
  %15347 = getelementptr inbounds i16, i16* %261, i64 %15346
  %15348 = load i16, i16* %15347, align 2, !tbaa !393
  %15349 = insertelement <32 x i16> %15344, i16 %15348, i32 24
  %15350 = extractelement <32 x i32> %15224, i32 25
  %15351 = sext i32 %15350 to i64
  %15352 = getelementptr inbounds i16, i16* %261, i64 %15351
  %15353 = load i16, i16* %15352, align 2, !tbaa !393
  %15354 = insertelement <32 x i16> %15349, i16 %15353, i32 25
  %15355 = extractelement <32 x i32> %15224, i32 26
  %15356 = sext i32 %15355 to i64
  %15357 = getelementptr inbounds i16, i16* %261, i64 %15356
  %15358 = load i16, i16* %15357, align 2, !tbaa !393
  %15359 = insertelement <32 x i16> %15354, i16 %15358, i32 26
  %15360 = extractelement <32 x i32> %15224, i32 27
  %15361 = sext i32 %15360 to i64
  %15362 = getelementptr inbounds i16, i16* %261, i64 %15361
  %15363 = load i16, i16* %15362, align 2, !tbaa !393
  %15364 = insertelement <32 x i16> %15359, i16 %15363, i32 27
  %15365 = extractelement <32 x i32> %15224, i32 28
  %15366 = sext i32 %15365 to i64
  %15367 = getelementptr inbounds i16, i16* %261, i64 %15366
  %15368 = load i16, i16* %15367, align 2, !tbaa !393
  %15369 = insertelement <32 x i16> %15364, i16 %15368, i32 28
  %15370 = extractelement <32 x i32> %15224, i32 29
  %15371 = sext i32 %15370 to i64
  %15372 = getelementptr inbounds i16, i16* %261, i64 %15371
  %15373 = load i16, i16* %15372, align 2, !tbaa !393
  %15374 = insertelement <32 x i16> %15369, i16 %15373, i32 29
  %15375 = extractelement <32 x i32> %15224, i32 30
  %15376 = sext i32 %15375 to i64
  %15377 = getelementptr inbounds i16, i16* %261, i64 %15376
  %15378 = load i16, i16* %15377, align 2, !tbaa !393
  %15379 = insertelement <32 x i16> %15374, i16 %15378, i32 30
  %15380 = extractelement <32 x i32> %15224, i32 31
  %15381 = sext i32 %15380 to i64
  %15382 = getelementptr inbounds i16, i16* %261, i64 %15381
  %15383 = load i16, i16* %15382, align 2, !tbaa !393
  %15384 = insertelement <32 x i16> %15379, i16 %15383, i32 31
  %15385 = shufflevector <32 x i16> %15384, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15386 = sext i32 %read_input.s0.x.v2.base.s863 to i64
  %15387 = add nsw i64 %15194, %15386
  %15388 = getelementptr inbounds i16, i16* %read_input822, i64 %15387
  %15389 = getelementptr inbounds i16, i16* %15388, i64 -32
  %15390 = bitcast i16* %15389 to <16 x i16>*
  store <16 x i16> %15385, <16 x i16>* %15390, align 2, !tbaa !396
  %15391 = shufflevector <32 x i16> %15384, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15392 = getelementptr inbounds i16, i16* %15388, i64 -16
  %15393 = bitcast i16* %15392 to <16 x i16>*
  store <16 x i16> %15391, <16 x i16>* %15393, align 2, !tbaa !396
  %15394 = add nuw nsw i32 %read_input.s0.x.x.rebased862, 1
  %.not2684 = icmp eq i32 %15394, %t1661841
  br i1 %.not2684, label %"end for read_input.s0.x.x.rebased861", label %"for read_input.s0.x.x.rebased860"

"end for read_input.s0.x.x.rebased861":           ; preds = %"for read_input.s0.x.x.rebased860", %"end for read_input.s0.x.x.rebased856"
  %indvars.iv.next3362 = add nuw nsw i64 %indvars.iv3361, 1
  %.not2683 = icmp eq i64 %indvars.iv.next3362, %14684
  br i1 %.not2683, label %"end for read_input.s0.y.rebased846", label %"for read_input.s0.y.rebased845"

"for read_input.s0.y.rebased869":                 ; preds = %"for read_input.s0.y.rebased869.preheader", %"end for read_input.s0.x.x874"
  %indvars.iv3364 = phi i64 [ 0, %"for read_input.s0.y.rebased869.preheader" ], [ %indvars.iv.next3365, %"end for read_input.s0.x.x874" ]
  %15395 = trunc i64 %indvars.iv3364 to i32
  %a537 = add nsw i32 %14896, %15395
  %15396 = icmp sgt i32 %b398, %a537
  %a536 = select i1 %15396, i32 %a537, i32 %b398
  %15397 = icmp sgt i32 %a536, 0
  %15398 = select i1 %15397, i32 %a536, i32 0
  %15399 = mul nsw i32 %15398, %207
  %t1679872 = sub nsw i32 %15399, %203
  %15400 = insertelement <32 x i32> undef, i32 %t1679872, i32 0
  %15401 = shufflevector <32 x i32> %15400, <32 x i32> undef, <32 x i32> zeroinitializer
  %15402 = add nuw nsw i64 %14900, %indvars.iv3364
  %15403 = mul nsw i64 %15402, %282
  %15404 = sub i64 %15403, %283
  br label %"for read_input.s0.x.x873"

"end for read_input.s0.y.rebased870":             ; preds = %"end for read_input.s0.x.x874", %"end for read_input.s0.y.rebased846"
  %15405 = load i64, i64* %.fca.1.gep2376, align 8, !tbaa !387
  %cmp.i2866 = icmp ult i64 %15405, %292
  %15406 = load i8*, i8** %.fca.0.gep2375, align 8, !tbaa !389
  br i1 %cmp.i2866, label %if.then.i2869, label %pseudostack_alloc.exit2882, !prof !390

if.then.i2869:                                    ; preds = %"end for read_input.s0.y.rebased870"
  %tobool1.not.i2868 = icmp ne i8* %15406, null
  %15407 = load i64, i64* %.fca.2.gep2377, align 8
  %cmp2.i2871 = icmp ugt i64 %15407, 16384
  %or.cond2913 = and i1 %tobool1.not.i2868, %cmp2.i2871
  br i1 %or.cond2913, label %if.then3.i2873, label %if.end.i2877

if.then3.i2873:                                   ; preds = %if.then.i2869
  call void @halide_free(i8* null, i8* nonnull %15406) #16
  %.pre3475 = load i64, i64* %.fca.2.gep2377, align 8, !tbaa !391
  br label %if.end.i2877

if.end.i2877:                                     ; preds = %if.then3.i2873, %if.then.i2869
  %15408 = phi i64 [ %.pre3475, %if.then3.i2873 ], [ %15407, %if.then.i2869 ]
  %add.i2875 = add i64 %15408, %292
  store i64 %add.i2875, i64* %.fca.2.gep2377, align 8, !tbaa !391
  %cmp7.i2876 = icmp ugt i64 %add.i2875, 16384
  br i1 %cmp7.i2876, label %if.then8.i2879, label %if.end11.i2881

if.then8.i2879:                                   ; preds = %if.end.i2877
  %call.i2878 = call i8* @halide_malloc(i8* null, i64 %292) #16
  br label %if.end11.i2881

if.end11.i2881:                                   ; preds = %if.then8.i2879, %if.end.i2877
  %storemerge.i2880 = phi i8* [ %call.i2878, %if.then8.i2879 ], [ null, %if.end.i2877 ]
  store i8* %storemerge.i2880, i8** %.fca.0.gep2375, align 8, !tbaa !389
  store i64 %292, i64* %.fca.1.gep2376, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2882

pseudostack_alloc.exit2882:                       ; preds = %"end for read_input.s0.y.rebased870", %if.end11.i2881
  %15409 = phi i8* [ %storemerge.i2880, %if.end11.i2881 ], [ %15406, %"end for read_input.s0.y.rebased870" ]
  %15410 = bitcast i8* %15409 to i16*
  %.not2537 = icmp eq i8* %15409, null
  br i1 %.not2537, label %then_bb878, label %"consume read_input880", !prof !392

"for read_input.s0.x.x873":                       ; preds = %"for read_input.s0.y.rebased869", %"for read_input.s0.x.x873"
  %read_input.s0.x.x875 = phi i32 [ %15609, %"for read_input.s0.x.x873" ], [ 0, %"for read_input.s0.y.rebased869" ]
  %15411 = shl nsw i32 %read_input.s0.x.x875, 5
  %a543 = add nsw i32 %271, %15411
  %15412 = icmp sgt i32 %b419, %a543
  %read_input.s0.x.v2.base.s876 = select i1 %15412, i32 %a543, i32 %b419
  %15413 = add nsw i32 %read_input.s0.x.v2.base.s876, -32
  %15414 = insertelement <32 x i32> undef, i32 %15413, i32 0
  %15415 = shufflevector <32 x i32> %15414, <32 x i32> undef, <32 x i32> zeroinitializer
  %a546 = add nsw <32 x i32> %15415, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15416 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15417 = icmp sgt <8 x i32> %274, %15416
  %15418 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15419 = icmp sgt <8 x i32> %274, %15418
  %15420 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %15421 = icmp sgt <8 x i32> %274, %15420
  %15422 = shufflevector <32 x i32> %a546, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15423 = icmp sgt <8 x i32> %274, %15422
  %15424 = select <8 x i1> %15417, <8 x i32> %15416, <8 x i32> %274
  %15425 = select <8 x i1> %15419, <8 x i32> %15418, <8 x i32> %274
  %15426 = select <8 x i1> %15421, <8 x i32> %15420, <8 x i32> %274
  %15427 = select <8 x i1> %15423, <8 x i32> %15422, <8 x i32> %274
  %15428 = icmp sgt <8 x i32> %15424, %276
  %15429 = icmp sgt <8 x i32> %15425, %276
  %15430 = icmp sgt <8 x i32> %15426, %276
  %15431 = icmp sgt <8 x i32> %15427, %276
  %15432 = select <8 x i1> %15428, <8 x i32> %15424, <8 x i32> %276
  %15433 = select <8 x i1> %15429, <8 x i32> %15425, <8 x i32> %276
  %15434 = select <8 x i1> %15430, <8 x i32> %15426, <8 x i32> %276
  %15435 = select <8 x i1> %15431, <8 x i32> %15427, <8 x i32> %276
  %15436 = shufflevector <8 x i32> %15432, <8 x i32> %15433, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15437 = shufflevector <8 x i32> %15434, <8 x i32> %15435, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15438 = shufflevector <16 x i32> %15436, <16 x i32> %15437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15439 = add nsw <32 x i32> %15438, %15401
  %15440 = extractelement <32 x i32> %15439, i32 0
  %15441 = sext i32 %15440 to i64
  %15442 = getelementptr inbounds i16, i16* %261, i64 %15441
  %15443 = load i16, i16* %15442, align 2, !tbaa !393
  %15444 = insertelement <32 x i16> undef, i16 %15443, i32 0
  %15445 = extractelement <32 x i32> %15439, i32 1
  %15446 = sext i32 %15445 to i64
  %15447 = getelementptr inbounds i16, i16* %261, i64 %15446
  %15448 = load i16, i16* %15447, align 2, !tbaa !393
  %15449 = insertelement <32 x i16> %15444, i16 %15448, i32 1
  %15450 = extractelement <32 x i32> %15439, i32 2
  %15451 = sext i32 %15450 to i64
  %15452 = getelementptr inbounds i16, i16* %261, i64 %15451
  %15453 = load i16, i16* %15452, align 2, !tbaa !393
  %15454 = insertelement <32 x i16> %15449, i16 %15453, i32 2
  %15455 = extractelement <32 x i32> %15439, i32 3
  %15456 = sext i32 %15455 to i64
  %15457 = getelementptr inbounds i16, i16* %261, i64 %15456
  %15458 = load i16, i16* %15457, align 2, !tbaa !393
  %15459 = insertelement <32 x i16> %15454, i16 %15458, i32 3
  %15460 = extractelement <32 x i32> %15439, i32 4
  %15461 = sext i32 %15460 to i64
  %15462 = getelementptr inbounds i16, i16* %261, i64 %15461
  %15463 = load i16, i16* %15462, align 2, !tbaa !393
  %15464 = insertelement <32 x i16> %15459, i16 %15463, i32 4
  %15465 = extractelement <32 x i32> %15439, i32 5
  %15466 = sext i32 %15465 to i64
  %15467 = getelementptr inbounds i16, i16* %261, i64 %15466
  %15468 = load i16, i16* %15467, align 2, !tbaa !393
  %15469 = insertelement <32 x i16> %15464, i16 %15468, i32 5
  %15470 = extractelement <32 x i32> %15439, i32 6
  %15471 = sext i32 %15470 to i64
  %15472 = getelementptr inbounds i16, i16* %261, i64 %15471
  %15473 = load i16, i16* %15472, align 2, !tbaa !393
  %15474 = insertelement <32 x i16> %15469, i16 %15473, i32 6
  %15475 = extractelement <32 x i32> %15439, i32 7
  %15476 = sext i32 %15475 to i64
  %15477 = getelementptr inbounds i16, i16* %261, i64 %15476
  %15478 = load i16, i16* %15477, align 2, !tbaa !393
  %15479 = insertelement <32 x i16> %15474, i16 %15478, i32 7
  %15480 = extractelement <32 x i32> %15439, i32 8
  %15481 = sext i32 %15480 to i64
  %15482 = getelementptr inbounds i16, i16* %261, i64 %15481
  %15483 = load i16, i16* %15482, align 2, !tbaa !393
  %15484 = insertelement <32 x i16> %15479, i16 %15483, i32 8
  %15485 = extractelement <32 x i32> %15439, i32 9
  %15486 = sext i32 %15485 to i64
  %15487 = getelementptr inbounds i16, i16* %261, i64 %15486
  %15488 = load i16, i16* %15487, align 2, !tbaa !393
  %15489 = insertelement <32 x i16> %15484, i16 %15488, i32 9
  %15490 = extractelement <32 x i32> %15439, i32 10
  %15491 = sext i32 %15490 to i64
  %15492 = getelementptr inbounds i16, i16* %261, i64 %15491
  %15493 = load i16, i16* %15492, align 2, !tbaa !393
  %15494 = insertelement <32 x i16> %15489, i16 %15493, i32 10
  %15495 = extractelement <32 x i32> %15439, i32 11
  %15496 = sext i32 %15495 to i64
  %15497 = getelementptr inbounds i16, i16* %261, i64 %15496
  %15498 = load i16, i16* %15497, align 2, !tbaa !393
  %15499 = insertelement <32 x i16> %15494, i16 %15498, i32 11
  %15500 = extractelement <32 x i32> %15439, i32 12
  %15501 = sext i32 %15500 to i64
  %15502 = getelementptr inbounds i16, i16* %261, i64 %15501
  %15503 = load i16, i16* %15502, align 2, !tbaa !393
  %15504 = insertelement <32 x i16> %15499, i16 %15503, i32 12
  %15505 = extractelement <32 x i32> %15439, i32 13
  %15506 = sext i32 %15505 to i64
  %15507 = getelementptr inbounds i16, i16* %261, i64 %15506
  %15508 = load i16, i16* %15507, align 2, !tbaa !393
  %15509 = insertelement <32 x i16> %15504, i16 %15508, i32 13
  %15510 = extractelement <32 x i32> %15439, i32 14
  %15511 = sext i32 %15510 to i64
  %15512 = getelementptr inbounds i16, i16* %261, i64 %15511
  %15513 = load i16, i16* %15512, align 2, !tbaa !393
  %15514 = insertelement <32 x i16> %15509, i16 %15513, i32 14
  %15515 = extractelement <32 x i32> %15439, i32 15
  %15516 = sext i32 %15515 to i64
  %15517 = getelementptr inbounds i16, i16* %261, i64 %15516
  %15518 = load i16, i16* %15517, align 2, !tbaa !393
  %15519 = insertelement <32 x i16> %15514, i16 %15518, i32 15
  %15520 = extractelement <32 x i32> %15439, i32 16
  %15521 = sext i32 %15520 to i64
  %15522 = getelementptr inbounds i16, i16* %261, i64 %15521
  %15523 = load i16, i16* %15522, align 2, !tbaa !393
  %15524 = insertelement <32 x i16> %15519, i16 %15523, i32 16
  %15525 = extractelement <32 x i32> %15439, i32 17
  %15526 = sext i32 %15525 to i64
  %15527 = getelementptr inbounds i16, i16* %261, i64 %15526
  %15528 = load i16, i16* %15527, align 2, !tbaa !393
  %15529 = insertelement <32 x i16> %15524, i16 %15528, i32 17
  %15530 = extractelement <32 x i32> %15439, i32 18
  %15531 = sext i32 %15530 to i64
  %15532 = getelementptr inbounds i16, i16* %261, i64 %15531
  %15533 = load i16, i16* %15532, align 2, !tbaa !393
  %15534 = insertelement <32 x i16> %15529, i16 %15533, i32 18
  %15535 = extractelement <32 x i32> %15439, i32 19
  %15536 = sext i32 %15535 to i64
  %15537 = getelementptr inbounds i16, i16* %261, i64 %15536
  %15538 = load i16, i16* %15537, align 2, !tbaa !393
  %15539 = insertelement <32 x i16> %15534, i16 %15538, i32 19
  %15540 = extractelement <32 x i32> %15439, i32 20
  %15541 = sext i32 %15540 to i64
  %15542 = getelementptr inbounds i16, i16* %261, i64 %15541
  %15543 = load i16, i16* %15542, align 2, !tbaa !393
  %15544 = insertelement <32 x i16> %15539, i16 %15543, i32 20
  %15545 = extractelement <32 x i32> %15439, i32 21
  %15546 = sext i32 %15545 to i64
  %15547 = getelementptr inbounds i16, i16* %261, i64 %15546
  %15548 = load i16, i16* %15547, align 2, !tbaa !393
  %15549 = insertelement <32 x i16> %15544, i16 %15548, i32 21
  %15550 = extractelement <32 x i32> %15439, i32 22
  %15551 = sext i32 %15550 to i64
  %15552 = getelementptr inbounds i16, i16* %261, i64 %15551
  %15553 = load i16, i16* %15552, align 2, !tbaa !393
  %15554 = insertelement <32 x i16> %15549, i16 %15553, i32 22
  %15555 = extractelement <32 x i32> %15439, i32 23
  %15556 = sext i32 %15555 to i64
  %15557 = getelementptr inbounds i16, i16* %261, i64 %15556
  %15558 = load i16, i16* %15557, align 2, !tbaa !393
  %15559 = insertelement <32 x i16> %15554, i16 %15558, i32 23
  %15560 = extractelement <32 x i32> %15439, i32 24
  %15561 = sext i32 %15560 to i64
  %15562 = getelementptr inbounds i16, i16* %261, i64 %15561
  %15563 = load i16, i16* %15562, align 2, !tbaa !393
  %15564 = insertelement <32 x i16> %15559, i16 %15563, i32 24
  %15565 = extractelement <32 x i32> %15439, i32 25
  %15566 = sext i32 %15565 to i64
  %15567 = getelementptr inbounds i16, i16* %261, i64 %15566
  %15568 = load i16, i16* %15567, align 2, !tbaa !393
  %15569 = insertelement <32 x i16> %15564, i16 %15568, i32 25
  %15570 = extractelement <32 x i32> %15439, i32 26
  %15571 = sext i32 %15570 to i64
  %15572 = getelementptr inbounds i16, i16* %261, i64 %15571
  %15573 = load i16, i16* %15572, align 2, !tbaa !393
  %15574 = insertelement <32 x i16> %15569, i16 %15573, i32 26
  %15575 = extractelement <32 x i32> %15439, i32 27
  %15576 = sext i32 %15575 to i64
  %15577 = getelementptr inbounds i16, i16* %261, i64 %15576
  %15578 = load i16, i16* %15577, align 2, !tbaa !393
  %15579 = insertelement <32 x i16> %15574, i16 %15578, i32 27
  %15580 = extractelement <32 x i32> %15439, i32 28
  %15581 = sext i32 %15580 to i64
  %15582 = getelementptr inbounds i16, i16* %261, i64 %15581
  %15583 = load i16, i16* %15582, align 2, !tbaa !393
  %15584 = insertelement <32 x i16> %15579, i16 %15583, i32 28
  %15585 = extractelement <32 x i32> %15439, i32 29
  %15586 = sext i32 %15585 to i64
  %15587 = getelementptr inbounds i16, i16* %261, i64 %15586
  %15588 = load i16, i16* %15587, align 2, !tbaa !393
  %15589 = insertelement <32 x i16> %15584, i16 %15588, i32 29
  %15590 = extractelement <32 x i32> %15439, i32 30
  %15591 = sext i32 %15590 to i64
  %15592 = getelementptr inbounds i16, i16* %261, i64 %15591
  %15593 = load i16, i16* %15592, align 2, !tbaa !393
  %15594 = insertelement <32 x i16> %15589, i16 %15593, i32 30
  %15595 = extractelement <32 x i32> %15439, i32 31
  %15596 = sext i32 %15595 to i64
  %15597 = getelementptr inbounds i16, i16* %261, i64 %15596
  %15598 = load i16, i16* %15597, align 2, !tbaa !393
  %15599 = insertelement <32 x i16> %15594, i16 %15598, i32 31
  %15600 = shufflevector <32 x i16> %15599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15601 = sext i32 %read_input.s0.x.v2.base.s876 to i64
  %15602 = add nsw i64 %15404, %15601
  %15603 = getelementptr inbounds i16, i16* %read_input822, i64 %15602
  %15604 = getelementptr inbounds i16, i16* %15603, i64 -32
  %15605 = bitcast i16* %15604 to <16 x i16>*
  store <16 x i16> %15600, <16 x i16>* %15605, align 2, !tbaa !396
  %15606 = shufflevector <32 x i16> %15599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15607 = getelementptr inbounds i16, i16* %15603, i64 -16
  %15608 = bitcast i16* %15607 to <16 x i16>*
  store <16 x i16> %15606, <16 x i16>* %15608, align 2, !tbaa !396
  %15609 = add nuw nsw i32 %read_input.s0.x.x875, 1
  %.not2682 = icmp eq i32 %15609, %215
  br i1 %.not2682, label %"end for read_input.s0.x.x874", label %"for read_input.s0.x.x873"

"end for read_input.s0.x.x874":                   ; preds = %"for read_input.s0.x.x873"
  %indvars.iv.next3365 = add nuw nsw i64 %indvars.iv3364, 1
  %.not2681 = icmp eq i64 %indvars.iv3364, %14901
  br i1 %.not2681, label %"end for read_input.s0.y.rebased870", label %"for read_input.s0.y.rebased869"

then_bb878:                                       ; preds = %pseudostack_alloc.exit2882
  %15610 = alloca i8*, i64 %292, align 32
  %15611 = bitcast i8** %15610 to i16*
  store i8** %15610, i8*** %293, align 8
  br label %"consume read_input880"

"consume read_input880":                          ; preds = %pseudostack_alloc.exit2882, %then_bb878
  %blur_x879 = phi i16* [ %15611, %then_bb878 ], [ %15410, %pseudostack_alloc.exit2882 ]
  br i1 %229, label %"produce blur_x884", label %"consume read_input880.after_bb881_crit_edge"

"consume read_input880.after_bb881_crit_edge":    ; preds = %"consume read_input880"
  %.pre3569 = and i32 %a379, 7
  br label %after_bb881

after_bb881:                                      ; preds = %"consume read_input880.after_bb881_crit_edge", %"produce blur_x884"
  %.pre-phi3570 = phi i32 [ %.pre3569, %"consume read_input880.after_bb881_crit_edge" ], [ %15656, %"produce blur_x884" ]
  %15612 = mul nsw i32 %.pre-phi3570, %a551
  %t1682886 = sub nsw i32 %15612, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased889.preheader", label %"end for blur_y.s0.x.x.rebased890", !prof !386

"for blur_y.s0.x.x.rebased889.preheader":         ; preds = %after_bb881
  %15613 = sext i32 %t1682886 to i64
  br label %"for blur_y.s0.x.x.rebased889"

"produce blur_x884":                              ; preds = %"consume read_input880"
  %15614 = getelementptr inbounds i16, i16* %read_input822, i64 %296
  %15615 = getelementptr inbounds i16, i16* %15614, i64 -31
  %15616 = bitcast i16* %15615 to <16 x i16>*
  %15617 = load <16 x i16>, <16 x i16>* %15616, align 2, !tbaa !396
  %15618 = getelementptr inbounds i16, i16* %15614, i64 -15
  %15619 = bitcast i16* %15618 to <16 x i16>*
  %15620 = load <16 x i16>, <16 x i16>* %15619, align 2, !tbaa !396
  %15621 = shufflevector <16 x i16> %15617, <16 x i16> %15620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15622 = getelementptr inbounds i16, i16* %15614, i64 -32
  %15623 = bitcast i16* %15622 to <16 x i16>*
  %15624 = load <16 x i16>, <16 x i16>* %15623, align 2, !tbaa !396
  %15625 = getelementptr inbounds i16, i16* %15614, i64 -16
  %15626 = bitcast i16* %15625 to <16 x i16>*
  %15627 = load <16 x i16>, <16 x i16>* %15626, align 2, !tbaa !396
  %15628 = shufflevector <16 x i16> %15624, <16 x i16> %15627, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15629 = getelementptr inbounds i16, i16* %15614, i64 -30
  %15630 = bitcast i16* %15629 to <16 x i16>*
  %15631 = load <16 x i16>, <16 x i16>* %15630, align 2, !tbaa !396
  %15632 = getelementptr inbounds i16, i16* %15614, i64 -14
  %15633 = bitcast i16* %15632 to <16 x i16>*
  %15634 = load <16 x i16>, <16 x i16>* %15633, align 2, !tbaa !396
  %15635 = shufflevector <16 x i16> %15631, <16 x i16> %15634, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15636 = getelementptr inbounds i16, i16* %15614, i64 -28
  %15637 = bitcast i16* %15636 to <16 x i16>*
  %15638 = load <16 x i16>, <16 x i16>* %15637, align 2, !tbaa !396
  %15639 = getelementptr inbounds i16, i16* %15614, i64 -12
  %15640 = bitcast i16* %15639 to <16 x i16>*
  %15641 = load <16 x i16>, <16 x i16>* %15640, align 2, !tbaa !396
  %15642 = shufflevector <16 x i16> %15638, <16 x i16> %15641, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15643 = getelementptr inbounds i16, i16* %15614, i64 -29
  %15644 = bitcast i16* %15643 to <16 x i16>*
  %15645 = load <16 x i16>, <16 x i16>* %15644, align 2, !tbaa !396
  %15646 = getelementptr inbounds i16, i16* %15614, i64 -13
  %15647 = bitcast i16* %15646 to <16 x i16>*
  %15648 = load <16 x i16>, <16 x i16>* %15647, align 2, !tbaa !396
  %15649 = shufflevector <16 x i16> %15645, <16 x i16> %15648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15650 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15628, <32 x i16> %15635, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15651 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15649, <32 x i16> %15642, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15652 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15650, <32 x i16> %15651, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15653 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15652, <32 x i16> %15621, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15654 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15653, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15655 = shufflevector <32 x i16> %15654, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15656 = and i32 %a379, 7
  %15657 = zext i32 %15656 to i64
  %15658 = mul nsw i64 %299, %15657
  %15659 = add nsw i64 %301, %15658
  %15660 = getelementptr inbounds i16, i16* %blur_x879, i64 %15659
  %15661 = getelementptr inbounds i16, i16* %15660, i64 -32
  %15662 = bitcast i16* %15661 to <16 x i16>*
  store <16 x i16> %15655, <16 x i16>* %15662, align 2, !tbaa !399
  %15663 = shufflevector <32 x i16> %15654, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15664 = getelementptr inbounds i16, i16* %15660, i64 -16
  %15665 = bitcast i16* %15664 to <16 x i16>*
  store <16 x i16> %15663, <16 x i16>* %15665, align 2, !tbaa !399
  br label %after_bb881

"for blur_y.s0.x.x.rebased889":                   ; preds = %"for blur_y.s0.x.x.rebased889.preheader", %after_bb892
  %indvars.iv3366 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased889.preheader" ], [ %indvars.iv.next3367, %after_bb892 ]
  %15666 = add nsw i64 %indvars.iv3366, %303
  %15667 = icmp slt i64 %15666, 1
  %15668 = trunc i64 %15666 to i32
  %15669 = shl nsw i32 %15668, 5
  %15670 = icmp sgt i32 %198, %15669
  %15671 = or i1 %15667, %15670
  br i1 %15671, label %"produce blur_x895", label %after_bb892

"end for blur_y.s0.x.x.rebased890":               ; preds = %after_bb892, %after_bb881
  br i1 %304, label %"for blur_y.s0.x.x.rebased900.preheader", label %"end for blur_y.s0.x.x.rebased901", !prof !386

"for blur_y.s0.x.x.rebased900.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased890"
  %15672 = sext i32 %t1682886 to i64
  br label %"for blur_y.s0.x.x.rebased900"

after_bb892:                                      ; preds = %"for blur_y.s0.x.x.rebased889", %"produce blur_x895"
  %indvars.iv.next3367 = add nuw nsw i64 %indvars.iv3366, 1
  %15673 = icmp eq i64 %indvars.iv.next3367, %zext
  br i1 %15673, label %"end for blur_y.s0.x.x.rebased890", label %"for blur_y.s0.x.x.rebased889"

"produce blur_x895":                              ; preds = %"for blur_y.s0.x.x.rebased889"
  %t684896 = sub i32 %15669, %t1645811
  %15674 = sext i32 %t684896 to i64
  %15675 = getelementptr inbounds i16, i16* %read_input822, i64 %15674
  %15676 = getelementptr inbounds i16, i16* %15675, i64 1
  %15677 = bitcast i16* %15676 to <16 x i16>*
  %15678 = load <16 x i16>, <16 x i16>* %15677, align 2, !tbaa !396
  %15679 = getelementptr inbounds i16, i16* %15675, i64 17
  %15680 = bitcast i16* %15679 to <16 x i16>*
  %15681 = load <16 x i16>, <16 x i16>* %15680, align 2, !tbaa !396
  %15682 = shufflevector <16 x i16> %15678, <16 x i16> %15681, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15683 = bitcast i16* %15675 to <16 x i16>*
  %15684 = load <16 x i16>, <16 x i16>* %15683, align 2, !tbaa !396
  %15685 = getelementptr inbounds i16, i16* %15675, i64 16
  %15686 = bitcast i16* %15685 to <16 x i16>*
  %15687 = load <16 x i16>, <16 x i16>* %15686, align 2, !tbaa !396
  %15688 = shufflevector <16 x i16> %15684, <16 x i16> %15687, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15689 = getelementptr inbounds i16, i16* %15675, i64 2
  %15690 = bitcast i16* %15689 to <16 x i16>*
  %15691 = load <16 x i16>, <16 x i16>* %15690, align 2, !tbaa !396
  %15692 = getelementptr inbounds i16, i16* %15675, i64 18
  %15693 = bitcast i16* %15692 to <16 x i16>*
  %15694 = load <16 x i16>, <16 x i16>* %15693, align 2, !tbaa !396
  %15695 = shufflevector <16 x i16> %15691, <16 x i16> %15694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15696 = getelementptr inbounds i16, i16* %15675, i64 4
  %15697 = bitcast i16* %15696 to <16 x i16>*
  %15698 = load <16 x i16>, <16 x i16>* %15697, align 2, !tbaa !396
  %15699 = getelementptr inbounds i16, i16* %15675, i64 20
  %15700 = bitcast i16* %15699 to <16 x i16>*
  %15701 = load <16 x i16>, <16 x i16>* %15700, align 2, !tbaa !396
  %15702 = shufflevector <16 x i16> %15698, <16 x i16> %15701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15703 = getelementptr inbounds i16, i16* %15675, i64 3
  %15704 = bitcast i16* %15703 to <16 x i16>*
  %15705 = load <16 x i16>, <16 x i16>* %15704, align 2, !tbaa !396
  %15706 = getelementptr inbounds i16, i16* %15675, i64 19
  %15707 = bitcast i16* %15706 to <16 x i16>*
  %15708 = load <16 x i16>, <16 x i16>* %15707, align 2, !tbaa !396
  %15709 = shufflevector <16 x i16> %15705, <16 x i16> %15708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15710 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15688, <32 x i16> %15695, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15711 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15709, <32 x i16> %15702, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15712 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15710, <32 x i16> %15711, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15713 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15712, <32 x i16> %15682, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15714 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15713, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15715 = shufflevector <32 x i16> %15714, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15716 = shl nsw i64 %15666, 5
  %15717 = add nsw i64 %15716, %15613
  %15718 = getelementptr inbounds i16, i16* %blur_x879, i64 %15717
  %15719 = bitcast i16* %15718 to <16 x i16>*
  store <16 x i16> %15715, <16 x i16>* %15719, align 2, !tbaa !399
  %15720 = shufflevector <32 x i16> %15714, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15721 = getelementptr inbounds i16, i16* %15718, i64 16
  %15722 = bitcast i16* %15721 to <16 x i16>*
  store <16 x i16> %15720, <16 x i16>* %15722, align 2, !tbaa !399
  br label %after_bb892

"for blur_y.s0.x.x.rebased900":                   ; preds = %"for blur_y.s0.x.x.rebased900.preheader", %after_bb903
  %blur_y.s0.x.x.rebased902 = phi i32 [ %15728, %after_bb903 ], [ 0, %"for blur_y.s0.x.x.rebased900.preheader" ]
  %15723 = add nsw i32 %blur_y.s0.x.x.rebased902, %t1626814
  %15724 = icmp slt i32 %15723, 1
  %15725 = shl nsw i32 %15723, 5
  %15726 = icmp sgt i32 %198, %15725
  %15727 = or i1 %15724, %15726
  br i1 %15727, label %then_bb904, label %after_bb903

"end for blur_y.s0.x.x.rebased901":               ; preds = %after_bb903, %"end for blur_y.s0.x.x.rebased890"
  br i1 %229, label %"produce blur_x912", label %"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge"

"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased901"
  %.pre3571 = add nsw i32 %a379, 1
  %.pre3573 = and i32 %.pre3571, 7
  br label %after_bb909

after_bb903:                                      ; preds = %"for blur_y.s0.x.x.rebased900", %then_bb904
  %15728 = add nuw nsw i32 %blur_y.s0.x.x.rebased902, 1
  %.not2678 = icmp eq i32 %15728, %t1683898
  br i1 %.not2678, label %"end for blur_y.s0.x.x.rebased901", label %"for blur_y.s0.x.x.rebased900"

then_bb904:                                       ; preds = %"for blur_y.s0.x.x.rebased900"
  %15729 = icmp sgt i32 %t1647, %15725
  %b598 = select i1 %15729, i32 %15725, i32 %t1647
  %15730 = icmp slt i32 %b598, %198
  %blur_x.s0.x.v1.base.s907 = select i1 %15730, i32 %b598, i32 %198
  %t686908 = sub i32 %blur_x.s0.x.v1.base.s907, %t1645811
  %15731 = sext i32 %t686908 to i64
  %15732 = getelementptr inbounds i16, i16* %read_input822, i64 %15731
  %15733 = getelementptr inbounds i16, i16* %15732, i64 1
  %15734 = bitcast i16* %15733 to <16 x i16>*
  %15735 = load <16 x i16>, <16 x i16>* %15734, align 2, !tbaa !396
  %15736 = getelementptr inbounds i16, i16* %15732, i64 17
  %15737 = bitcast i16* %15736 to <16 x i16>*
  %15738 = load <16 x i16>, <16 x i16>* %15737, align 2, !tbaa !396
  %15739 = shufflevector <16 x i16> %15735, <16 x i16> %15738, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15740 = bitcast i16* %15732 to <16 x i16>*
  %15741 = load <16 x i16>, <16 x i16>* %15740, align 2, !tbaa !396
  %15742 = getelementptr inbounds i16, i16* %15732, i64 16
  %15743 = bitcast i16* %15742 to <16 x i16>*
  %15744 = load <16 x i16>, <16 x i16>* %15743, align 2, !tbaa !396
  %15745 = shufflevector <16 x i16> %15741, <16 x i16> %15744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15746 = getelementptr inbounds i16, i16* %15732, i64 2
  %15747 = bitcast i16* %15746 to <16 x i16>*
  %15748 = load <16 x i16>, <16 x i16>* %15747, align 2, !tbaa !396
  %15749 = getelementptr inbounds i16, i16* %15732, i64 18
  %15750 = bitcast i16* %15749 to <16 x i16>*
  %15751 = load <16 x i16>, <16 x i16>* %15750, align 2, !tbaa !396
  %15752 = shufflevector <16 x i16> %15748, <16 x i16> %15751, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15753 = getelementptr inbounds i16, i16* %15732, i64 4
  %15754 = bitcast i16* %15753 to <16 x i16>*
  %15755 = load <16 x i16>, <16 x i16>* %15754, align 2, !tbaa !396
  %15756 = getelementptr inbounds i16, i16* %15732, i64 20
  %15757 = bitcast i16* %15756 to <16 x i16>*
  %15758 = load <16 x i16>, <16 x i16>* %15757, align 2, !tbaa !396
  %15759 = shufflevector <16 x i16> %15755, <16 x i16> %15758, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15760 = getelementptr inbounds i16, i16* %15732, i64 3
  %15761 = bitcast i16* %15760 to <16 x i16>*
  %15762 = load <16 x i16>, <16 x i16>* %15761, align 2, !tbaa !396
  %15763 = getelementptr inbounds i16, i16* %15732, i64 19
  %15764 = bitcast i16* %15763 to <16 x i16>*
  %15765 = load <16 x i16>, <16 x i16>* %15764, align 2, !tbaa !396
  %15766 = shufflevector <16 x i16> %15762, <16 x i16> %15765, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15767 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15745, <32 x i16> %15752, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15768 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15766, <32 x i16> %15759, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15769 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15767, <32 x i16> %15768, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15770 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15769, <32 x i16> %15739, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15771 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15770, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15772 = shufflevector <32 x i16> %15771, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15773 = sext i32 %blur_x.s0.x.v1.base.s907 to i64
  %15774 = add nsw i64 %15773, %15672
  %15775 = getelementptr inbounds i16, i16* %blur_x879, i64 %15774
  %15776 = bitcast i16* %15775 to <16 x i16>*
  store <16 x i16> %15772, <16 x i16>* %15776, align 2, !tbaa !399
  %15777 = shufflevector <32 x i16> %15771, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15778 = getelementptr inbounds i16, i16* %15775, i64 16
  %15779 = bitcast i16* %15778 to <16 x i16>*
  store <16 x i16> %15777, <16 x i16>* %15779, align 2, !tbaa !399
  br label %after_bb903

after_bb909:                                      ; preds = %"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge", %"produce blur_x912"
  %.pre-phi3574 = phi i32 [ %.pre3573, %"end for blur_y.s0.x.x.rebased901.after_bb909_crit_edge" ], [ %15825, %"produce blur_x912" ]
  %15780 = mul nsw i32 %.pre-phi3574, %a551
  %t1688914 = sub nsw i32 %15780, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased917.preheader", label %"end for blur_y.s0.x.x.rebased918", !prof !386

"for blur_y.s0.x.x.rebased917.preheader":         ; preds = %after_bb909
  %15781 = sext i32 %t1688914 to i64
  br label %"for blur_y.s0.x.x.rebased917"

"produce blur_x912":                              ; preds = %"end for blur_y.s0.x.x.rebased901"
  %15782 = getelementptr inbounds i16, i16* %read_input822, i64 %314
  %15783 = getelementptr inbounds i16, i16* %15782, i64 -31
  %15784 = bitcast i16* %15783 to <16 x i16>*
  %15785 = load <16 x i16>, <16 x i16>* %15784, align 2, !tbaa !396
  %15786 = getelementptr inbounds i16, i16* %15782, i64 -15
  %15787 = bitcast i16* %15786 to <16 x i16>*
  %15788 = load <16 x i16>, <16 x i16>* %15787, align 2, !tbaa !396
  %15789 = shufflevector <16 x i16> %15785, <16 x i16> %15788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15790 = getelementptr inbounds i16, i16* %15782, i64 -32
  %15791 = bitcast i16* %15790 to <16 x i16>*
  %15792 = load <16 x i16>, <16 x i16>* %15791, align 2, !tbaa !396
  %15793 = getelementptr inbounds i16, i16* %15782, i64 -16
  %15794 = bitcast i16* %15793 to <16 x i16>*
  %15795 = load <16 x i16>, <16 x i16>* %15794, align 2, !tbaa !396
  %15796 = shufflevector <16 x i16> %15792, <16 x i16> %15795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15797 = getelementptr inbounds i16, i16* %15782, i64 -30
  %15798 = bitcast i16* %15797 to <16 x i16>*
  %15799 = load <16 x i16>, <16 x i16>* %15798, align 2, !tbaa !396
  %15800 = getelementptr inbounds i16, i16* %15782, i64 -14
  %15801 = bitcast i16* %15800 to <16 x i16>*
  %15802 = load <16 x i16>, <16 x i16>* %15801, align 2, !tbaa !396
  %15803 = shufflevector <16 x i16> %15799, <16 x i16> %15802, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15804 = getelementptr inbounds i16, i16* %15782, i64 -28
  %15805 = bitcast i16* %15804 to <16 x i16>*
  %15806 = load <16 x i16>, <16 x i16>* %15805, align 2, !tbaa !396
  %15807 = getelementptr inbounds i16, i16* %15782, i64 -12
  %15808 = bitcast i16* %15807 to <16 x i16>*
  %15809 = load <16 x i16>, <16 x i16>* %15808, align 2, !tbaa !396
  %15810 = shufflevector <16 x i16> %15806, <16 x i16> %15809, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15811 = getelementptr inbounds i16, i16* %15782, i64 -29
  %15812 = bitcast i16* %15811 to <16 x i16>*
  %15813 = load <16 x i16>, <16 x i16>* %15812, align 2, !tbaa !396
  %15814 = getelementptr inbounds i16, i16* %15782, i64 -13
  %15815 = bitcast i16* %15814 to <16 x i16>*
  %15816 = load <16 x i16>, <16 x i16>* %15815, align 2, !tbaa !396
  %15817 = shufflevector <16 x i16> %15813, <16 x i16> %15816, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15818 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15796, <32 x i16> %15803, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15819 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15817, <32 x i16> %15810, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15820 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15818, <32 x i16> %15819, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15821 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15820, <32 x i16> %15789, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15822 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15821, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15823 = shufflevector <32 x i16> %15822, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15824 = add nsw i32 %a379, 1
  %15825 = and i32 %15824, 7
  %15826 = zext i32 %15825 to i64
  %15827 = mul nsw i64 %299, %15826
  %15828 = add nsw i64 %301, %15827
  %15829 = getelementptr inbounds i16, i16* %blur_x879, i64 %15828
  %15830 = getelementptr inbounds i16, i16* %15829, i64 -32
  %15831 = bitcast i16* %15830 to <16 x i16>*
  store <16 x i16> %15823, <16 x i16>* %15831, align 2, !tbaa !399
  %15832 = shufflevector <32 x i16> %15822, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15833 = getelementptr inbounds i16, i16* %15829, i64 -16
  %15834 = bitcast i16* %15833 to <16 x i16>*
  store <16 x i16> %15832, <16 x i16>* %15834, align 2, !tbaa !399
  br label %after_bb909

"for blur_y.s0.x.x.rebased917":                   ; preds = %"for blur_y.s0.x.x.rebased917.preheader", %after_bb920
  %indvars.iv3368 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased917.preheader" ], [ %indvars.iv.next3369, %after_bb920 ]
  %15835 = add nsw i64 %indvars.iv3368, %303
  %15836 = icmp slt i64 %15835, 1
  %15837 = trunc i64 %15835 to i32
  %15838 = shl nsw i32 %15837, 5
  %15839 = icmp sgt i32 %198, %15838
  %15840 = or i1 %15836, %15839
  br i1 %15840, label %"produce blur_x923", label %after_bb920

"end for blur_y.s0.x.x.rebased918":               ; preds = %after_bb920, %after_bb909
  br i1 %304, label %"for blur_y.s0.x.x.rebased928.preheader", label %"end for blur_y.s0.x.x.rebased929", !prof !386

"for blur_y.s0.x.x.rebased928.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased918"
  %15841 = sext i32 %t1688914 to i64
  br label %"for blur_y.s0.x.x.rebased928"

after_bb920:                                      ; preds = %"for blur_y.s0.x.x.rebased917", %"produce blur_x923"
  %indvars.iv.next3369 = add nuw nsw i64 %indvars.iv3368, 1
  %15842 = icmp eq i64 %indvars.iv.next3369, %zext3370
  br i1 %15842, label %"end for blur_y.s0.x.x.rebased918", label %"for blur_y.s0.x.x.rebased917"

"produce blur_x923":                              ; preds = %"for blur_y.s0.x.x.rebased917"
  %t690924 = add nsw i32 %315, %15838
  %15843 = sext i32 %t690924 to i64
  %15844 = getelementptr inbounds i16, i16* %read_input822, i64 %15843
  %15845 = getelementptr inbounds i16, i16* %15844, i64 1
  %15846 = bitcast i16* %15845 to <16 x i16>*
  %15847 = load <16 x i16>, <16 x i16>* %15846, align 2, !tbaa !396
  %15848 = getelementptr inbounds i16, i16* %15844, i64 17
  %15849 = bitcast i16* %15848 to <16 x i16>*
  %15850 = load <16 x i16>, <16 x i16>* %15849, align 2, !tbaa !396
  %15851 = shufflevector <16 x i16> %15847, <16 x i16> %15850, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15852 = bitcast i16* %15844 to <16 x i16>*
  %15853 = load <16 x i16>, <16 x i16>* %15852, align 2, !tbaa !396
  %15854 = getelementptr inbounds i16, i16* %15844, i64 16
  %15855 = bitcast i16* %15854 to <16 x i16>*
  %15856 = load <16 x i16>, <16 x i16>* %15855, align 2, !tbaa !396
  %15857 = shufflevector <16 x i16> %15853, <16 x i16> %15856, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15858 = getelementptr inbounds i16, i16* %15844, i64 2
  %15859 = bitcast i16* %15858 to <16 x i16>*
  %15860 = load <16 x i16>, <16 x i16>* %15859, align 2, !tbaa !396
  %15861 = getelementptr inbounds i16, i16* %15844, i64 18
  %15862 = bitcast i16* %15861 to <16 x i16>*
  %15863 = load <16 x i16>, <16 x i16>* %15862, align 2, !tbaa !396
  %15864 = shufflevector <16 x i16> %15860, <16 x i16> %15863, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15865 = getelementptr inbounds i16, i16* %15844, i64 4
  %15866 = bitcast i16* %15865 to <16 x i16>*
  %15867 = load <16 x i16>, <16 x i16>* %15866, align 2, !tbaa !396
  %15868 = getelementptr inbounds i16, i16* %15844, i64 20
  %15869 = bitcast i16* %15868 to <16 x i16>*
  %15870 = load <16 x i16>, <16 x i16>* %15869, align 2, !tbaa !396
  %15871 = shufflevector <16 x i16> %15867, <16 x i16> %15870, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15872 = getelementptr inbounds i16, i16* %15844, i64 3
  %15873 = bitcast i16* %15872 to <16 x i16>*
  %15874 = load <16 x i16>, <16 x i16>* %15873, align 2, !tbaa !396
  %15875 = getelementptr inbounds i16, i16* %15844, i64 19
  %15876 = bitcast i16* %15875 to <16 x i16>*
  %15877 = load <16 x i16>, <16 x i16>* %15876, align 2, !tbaa !396
  %15878 = shufflevector <16 x i16> %15874, <16 x i16> %15877, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15879 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15857, <32 x i16> %15864, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15880 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15878, <32 x i16> %15871, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15881 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15879, <32 x i16> %15880, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15882 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15881, <32 x i16> %15851, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15883 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15882, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15884 = shufflevector <32 x i16> %15883, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15885 = shl nsw i64 %15835, 5
  %15886 = add nsw i64 %15885, %15781
  %15887 = getelementptr inbounds i16, i16* %blur_x879, i64 %15886
  %15888 = bitcast i16* %15887 to <16 x i16>*
  store <16 x i16> %15884, <16 x i16>* %15888, align 2, !tbaa !399
  %15889 = shufflevector <32 x i16> %15883, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15890 = getelementptr inbounds i16, i16* %15887, i64 16
  %15891 = bitcast i16* %15890 to <16 x i16>*
  store <16 x i16> %15889, <16 x i16>* %15891, align 2, !tbaa !399
  br label %after_bb920

"for blur_y.s0.x.x.rebased928":                   ; preds = %"for blur_y.s0.x.x.rebased928.preheader", %after_bb931
  %blur_y.s0.x.x.rebased930 = phi i32 [ %15897, %after_bb931 ], [ 0, %"for blur_y.s0.x.x.rebased928.preheader" ]
  %15892 = add nsw i32 %blur_y.s0.x.x.rebased930, %t1626814
  %15893 = icmp slt i32 %15892, 1
  %15894 = shl nsw i32 %15892, 5
  %15895 = icmp sgt i32 %198, %15894
  %15896 = or i1 %15893, %15895
  br i1 %15896, label %then_bb932, label %after_bb931

"end for blur_y.s0.x.x.rebased929":               ; preds = %after_bb931, %"end for blur_y.s0.x.x.rebased918"
  br i1 %229, label %"produce blur_x942", label %"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge"

"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased929"
  %.pre3575 = add nsw i32 %a379, 2
  %.pre3577 = and i32 %.pre3575, 7
  br label %after_bb939

after_bb931:                                      ; preds = %"for blur_y.s0.x.x.rebased928", %then_bb932
  %15897 = add nuw nsw i32 %blur_y.s0.x.x.rebased930, 1
  %.not2674 = icmp eq i32 %15897, %t1683898
  br i1 %.not2674, label %"end for blur_y.s0.x.x.rebased929", label %"for blur_y.s0.x.x.rebased928"

then_bb932:                                       ; preds = %"for blur_y.s0.x.x.rebased928"
  %15898 = icmp sgt i32 %t1647, %15894
  %b722 = select i1 %15898, i32 %15894, i32 %t1647
  %15899 = icmp slt i32 %b722, %198
  %blur_x.s0.x.v1.base.s937 = select i1 %15899, i32 %b722, i32 %198
  %t692938 = add nsw i32 %315, %blur_x.s0.x.v1.base.s937
  %15900 = sext i32 %t692938 to i64
  %15901 = getelementptr inbounds i16, i16* %read_input822, i64 %15900
  %15902 = getelementptr inbounds i16, i16* %15901, i64 1
  %15903 = bitcast i16* %15902 to <16 x i16>*
  %15904 = load <16 x i16>, <16 x i16>* %15903, align 2, !tbaa !396
  %15905 = getelementptr inbounds i16, i16* %15901, i64 17
  %15906 = bitcast i16* %15905 to <16 x i16>*
  %15907 = load <16 x i16>, <16 x i16>* %15906, align 2, !tbaa !396
  %15908 = shufflevector <16 x i16> %15904, <16 x i16> %15907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15909 = bitcast i16* %15901 to <16 x i16>*
  %15910 = load <16 x i16>, <16 x i16>* %15909, align 2, !tbaa !396
  %15911 = getelementptr inbounds i16, i16* %15901, i64 16
  %15912 = bitcast i16* %15911 to <16 x i16>*
  %15913 = load <16 x i16>, <16 x i16>* %15912, align 2, !tbaa !396
  %15914 = shufflevector <16 x i16> %15910, <16 x i16> %15913, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15915 = getelementptr inbounds i16, i16* %15901, i64 2
  %15916 = bitcast i16* %15915 to <16 x i16>*
  %15917 = load <16 x i16>, <16 x i16>* %15916, align 2, !tbaa !396
  %15918 = getelementptr inbounds i16, i16* %15901, i64 18
  %15919 = bitcast i16* %15918 to <16 x i16>*
  %15920 = load <16 x i16>, <16 x i16>* %15919, align 2, !tbaa !396
  %15921 = shufflevector <16 x i16> %15917, <16 x i16> %15920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15922 = getelementptr inbounds i16, i16* %15901, i64 4
  %15923 = bitcast i16* %15922 to <16 x i16>*
  %15924 = load <16 x i16>, <16 x i16>* %15923, align 2, !tbaa !396
  %15925 = getelementptr inbounds i16, i16* %15901, i64 20
  %15926 = bitcast i16* %15925 to <16 x i16>*
  %15927 = load <16 x i16>, <16 x i16>* %15926, align 2, !tbaa !396
  %15928 = shufflevector <16 x i16> %15924, <16 x i16> %15927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15929 = getelementptr inbounds i16, i16* %15901, i64 3
  %15930 = bitcast i16* %15929 to <16 x i16>*
  %15931 = load <16 x i16>, <16 x i16>* %15930, align 2, !tbaa !396
  %15932 = getelementptr inbounds i16, i16* %15901, i64 19
  %15933 = bitcast i16* %15932 to <16 x i16>*
  %15934 = load <16 x i16>, <16 x i16>* %15933, align 2, !tbaa !396
  %15935 = shufflevector <16 x i16> %15931, <16 x i16> %15934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15936 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15914, <32 x i16> %15921, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15937 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15935, <32 x i16> %15928, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15938 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15936, <32 x i16> %15937, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15939 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15938, <32 x i16> %15908, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15940 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15939, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15941 = shufflevector <32 x i16> %15940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15942 = sext i32 %blur_x.s0.x.v1.base.s937 to i64
  %15943 = add nsw i64 %15942, %15841
  %15944 = getelementptr inbounds i16, i16* %blur_x879, i64 %15943
  %15945 = bitcast i16* %15944 to <16 x i16>*
  store <16 x i16> %15941, <16 x i16>* %15945, align 2, !tbaa !399
  %15946 = shufflevector <32 x i16> %15940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15947 = getelementptr inbounds i16, i16* %15944, i64 16
  %15948 = bitcast i16* %15947 to <16 x i16>*
  store <16 x i16> %15946, <16 x i16>* %15948, align 2, !tbaa !399
  br label %after_bb931

after_bb939:                                      ; preds = %"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge", %"produce blur_x942"
  %.pre-phi3578 = phi i32 [ %.pre3577, %"end for blur_y.s0.x.x.rebased929.after_bb939_crit_edge" ], [ %15994, %"produce blur_x942" ]
  %15949 = mul nsw i32 %.pre-phi3578, %a551
  %t1694944 = sub nsw i32 %15949, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased947.preheader", label %"end for blur_y.s0.x.x.rebased948", !prof !386

"for blur_y.s0.x.x.rebased947.preheader":         ; preds = %after_bb939
  %15950 = sext i32 %t1694944 to i64
  br label %"for blur_y.s0.x.x.rebased947"

"produce blur_x942":                              ; preds = %"end for blur_y.s0.x.x.rebased929"
  %15951 = getelementptr inbounds i16, i16* %read_input822, i64 %320
  %15952 = getelementptr inbounds i16, i16* %15951, i64 -31
  %15953 = bitcast i16* %15952 to <16 x i16>*
  %15954 = load <16 x i16>, <16 x i16>* %15953, align 2, !tbaa !396
  %15955 = getelementptr inbounds i16, i16* %15951, i64 -15
  %15956 = bitcast i16* %15955 to <16 x i16>*
  %15957 = load <16 x i16>, <16 x i16>* %15956, align 2, !tbaa !396
  %15958 = shufflevector <16 x i16> %15954, <16 x i16> %15957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15959 = getelementptr inbounds i16, i16* %15951, i64 -32
  %15960 = bitcast i16* %15959 to <16 x i16>*
  %15961 = load <16 x i16>, <16 x i16>* %15960, align 2, !tbaa !396
  %15962 = getelementptr inbounds i16, i16* %15951, i64 -16
  %15963 = bitcast i16* %15962 to <16 x i16>*
  %15964 = load <16 x i16>, <16 x i16>* %15963, align 2, !tbaa !396
  %15965 = shufflevector <16 x i16> %15961, <16 x i16> %15964, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15966 = getelementptr inbounds i16, i16* %15951, i64 -30
  %15967 = bitcast i16* %15966 to <16 x i16>*
  %15968 = load <16 x i16>, <16 x i16>* %15967, align 2, !tbaa !396
  %15969 = getelementptr inbounds i16, i16* %15951, i64 -14
  %15970 = bitcast i16* %15969 to <16 x i16>*
  %15971 = load <16 x i16>, <16 x i16>* %15970, align 2, !tbaa !396
  %15972 = shufflevector <16 x i16> %15968, <16 x i16> %15971, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15973 = getelementptr inbounds i16, i16* %15951, i64 -28
  %15974 = bitcast i16* %15973 to <16 x i16>*
  %15975 = load <16 x i16>, <16 x i16>* %15974, align 2, !tbaa !396
  %15976 = getelementptr inbounds i16, i16* %15951, i64 -12
  %15977 = bitcast i16* %15976 to <16 x i16>*
  %15978 = load <16 x i16>, <16 x i16>* %15977, align 2, !tbaa !396
  %15979 = shufflevector <16 x i16> %15975, <16 x i16> %15978, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15980 = getelementptr inbounds i16, i16* %15951, i64 -29
  %15981 = bitcast i16* %15980 to <16 x i16>*
  %15982 = load <16 x i16>, <16 x i16>* %15981, align 2, !tbaa !396
  %15983 = getelementptr inbounds i16, i16* %15951, i64 -13
  %15984 = bitcast i16* %15983 to <16 x i16>*
  %15985 = load <16 x i16>, <16 x i16>* %15984, align 2, !tbaa !396
  %15986 = shufflevector <16 x i16> %15982, <16 x i16> %15985, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15987 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15965, <32 x i16> %15972, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15988 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15986, <32 x i16> %15979, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15989 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15987, <32 x i16> %15988, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15990 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15989, <32 x i16> %15958, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15991 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15990, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15992 = shufflevector <32 x i16> %15991, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15993 = add nsw i32 %a379, 2
  %15994 = and i32 %15993, 7
  %15995 = zext i32 %15994 to i64
  %15996 = mul nsw i64 %299, %15995
  %15997 = add nsw i64 %301, %15996
  %15998 = getelementptr inbounds i16, i16* %blur_x879, i64 %15997
  %15999 = getelementptr inbounds i16, i16* %15998, i64 -32
  %16000 = bitcast i16* %15999 to <16 x i16>*
  store <16 x i16> %15992, <16 x i16>* %16000, align 2, !tbaa !399
  %16001 = shufflevector <32 x i16> %15991, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16002 = getelementptr inbounds i16, i16* %15998, i64 -16
  %16003 = bitcast i16* %16002 to <16 x i16>*
  store <16 x i16> %16001, <16 x i16>* %16003, align 2, !tbaa !399
  br label %after_bb939

"for blur_y.s0.x.x.rebased947":                   ; preds = %"for blur_y.s0.x.x.rebased947.preheader", %after_bb950
  %indvars.iv3371 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased947.preheader" ], [ %indvars.iv.next3372, %after_bb950 ]
  %16004 = add nsw i64 %indvars.iv3371, %303
  %16005 = icmp slt i64 %16004, 1
  %16006 = trunc i64 %16004 to i32
  %16007 = shl nsw i32 %16006, 5
  %16008 = icmp sgt i32 %198, %16007
  %16009 = or i1 %16005, %16008
  br i1 %16009, label %"produce blur_x953", label %after_bb950

"end for blur_y.s0.x.x.rebased948":               ; preds = %after_bb950, %after_bb939
  br i1 %304, label %"for blur_y.s0.x.x.rebased958.preheader", label %"end for blur_y.s0.x.x.rebased959", !prof !386

"for blur_y.s0.x.x.rebased958.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased948"
  %16010 = sext i32 %t1694944 to i64
  br label %"for blur_y.s0.x.x.rebased958"

after_bb950:                                      ; preds = %"for blur_y.s0.x.x.rebased947", %"produce blur_x953"
  %indvars.iv.next3372 = add nuw nsw i64 %indvars.iv3371, 1
  %16011 = icmp eq i64 %indvars.iv.next3372, %zext3373
  br i1 %16011, label %"end for blur_y.s0.x.x.rebased948", label %"for blur_y.s0.x.x.rebased947"

"produce blur_x953":                              ; preds = %"for blur_y.s0.x.x.rebased947"
  %t696954 = add nsw i32 %322, %16007
  %16012 = sext i32 %t696954 to i64
  %16013 = getelementptr inbounds i16, i16* %read_input822, i64 %16012
  %16014 = getelementptr inbounds i16, i16* %16013, i64 1
  %16015 = bitcast i16* %16014 to <16 x i16>*
  %16016 = load <16 x i16>, <16 x i16>* %16015, align 2, !tbaa !396
  %16017 = getelementptr inbounds i16, i16* %16013, i64 17
  %16018 = bitcast i16* %16017 to <16 x i16>*
  %16019 = load <16 x i16>, <16 x i16>* %16018, align 2, !tbaa !396
  %16020 = shufflevector <16 x i16> %16016, <16 x i16> %16019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16021 = bitcast i16* %16013 to <16 x i16>*
  %16022 = load <16 x i16>, <16 x i16>* %16021, align 2, !tbaa !396
  %16023 = getelementptr inbounds i16, i16* %16013, i64 16
  %16024 = bitcast i16* %16023 to <16 x i16>*
  %16025 = load <16 x i16>, <16 x i16>* %16024, align 2, !tbaa !396
  %16026 = shufflevector <16 x i16> %16022, <16 x i16> %16025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16027 = getelementptr inbounds i16, i16* %16013, i64 2
  %16028 = bitcast i16* %16027 to <16 x i16>*
  %16029 = load <16 x i16>, <16 x i16>* %16028, align 2, !tbaa !396
  %16030 = getelementptr inbounds i16, i16* %16013, i64 18
  %16031 = bitcast i16* %16030 to <16 x i16>*
  %16032 = load <16 x i16>, <16 x i16>* %16031, align 2, !tbaa !396
  %16033 = shufflevector <16 x i16> %16029, <16 x i16> %16032, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16034 = getelementptr inbounds i16, i16* %16013, i64 4
  %16035 = bitcast i16* %16034 to <16 x i16>*
  %16036 = load <16 x i16>, <16 x i16>* %16035, align 2, !tbaa !396
  %16037 = getelementptr inbounds i16, i16* %16013, i64 20
  %16038 = bitcast i16* %16037 to <16 x i16>*
  %16039 = load <16 x i16>, <16 x i16>* %16038, align 2, !tbaa !396
  %16040 = shufflevector <16 x i16> %16036, <16 x i16> %16039, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16041 = getelementptr inbounds i16, i16* %16013, i64 3
  %16042 = bitcast i16* %16041 to <16 x i16>*
  %16043 = load <16 x i16>, <16 x i16>* %16042, align 2, !tbaa !396
  %16044 = getelementptr inbounds i16, i16* %16013, i64 19
  %16045 = bitcast i16* %16044 to <16 x i16>*
  %16046 = load <16 x i16>, <16 x i16>* %16045, align 2, !tbaa !396
  %16047 = shufflevector <16 x i16> %16043, <16 x i16> %16046, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16048 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16026, <32 x i16> %16033, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16049 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16047, <32 x i16> %16040, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16050 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16048, <32 x i16> %16049, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16051 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16050, <32 x i16> %16020, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16052 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16051, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16053 = shufflevector <32 x i16> %16052, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16054 = shl nsw i64 %16004, 5
  %16055 = add nsw i64 %16054, %15950
  %16056 = getelementptr inbounds i16, i16* %blur_x879, i64 %16055
  %16057 = bitcast i16* %16056 to <16 x i16>*
  store <16 x i16> %16053, <16 x i16>* %16057, align 2, !tbaa !399
  %16058 = shufflevector <32 x i16> %16052, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16059 = getelementptr inbounds i16, i16* %16056, i64 16
  %16060 = bitcast i16* %16059 to <16 x i16>*
  store <16 x i16> %16058, <16 x i16>* %16060, align 2, !tbaa !399
  br label %after_bb950

"for blur_y.s0.x.x.rebased958":                   ; preds = %"for blur_y.s0.x.x.rebased958.preheader", %after_bb961
  %blur_y.s0.x.x.rebased960 = phi i32 [ %16066, %after_bb961 ], [ 0, %"for blur_y.s0.x.x.rebased958.preheader" ]
  %16061 = add nsw i32 %blur_y.s0.x.x.rebased960, %t1626814
  %16062 = icmp slt i32 %16061, 1
  %16063 = shl nsw i32 %16061, 5
  %16064 = icmp sgt i32 %198, %16063
  %16065 = or i1 %16062, %16064
  br i1 %16065, label %then_bb962, label %after_bb961

"end for blur_y.s0.x.x.rebased959":               ; preds = %after_bb961, %"end for blur_y.s0.x.x.rebased948"
  br i1 %229, label %"produce blur_x972", label %"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge"

"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased959"
  %.pre3579 = add nsw i32 %a379, 3
  %.pre3581 = and i32 %.pre3579, 7
  br label %after_bb969

after_bb961:                                      ; preds = %"for blur_y.s0.x.x.rebased958", %then_bb962
  %16066 = add nuw nsw i32 %blur_y.s0.x.x.rebased960, 1
  %.not2670 = icmp eq i32 %16066, %t1683898
  br i1 %.not2670, label %"end for blur_y.s0.x.x.rebased959", label %"for blur_y.s0.x.x.rebased958"

then_bb962:                                       ; preds = %"for blur_y.s0.x.x.rebased958"
  %16067 = icmp sgt i32 %t1647, %16063
  %b862 = select i1 %16067, i32 %16063, i32 %t1647
  %16068 = icmp slt i32 %b862, %198
  %blur_x.s0.x.v1.base.s967 = select i1 %16068, i32 %b862, i32 %198
  %t698968 = add nsw i32 %322, %blur_x.s0.x.v1.base.s967
  %16069 = sext i32 %t698968 to i64
  %16070 = getelementptr inbounds i16, i16* %read_input822, i64 %16069
  %16071 = getelementptr inbounds i16, i16* %16070, i64 1
  %16072 = bitcast i16* %16071 to <16 x i16>*
  %16073 = load <16 x i16>, <16 x i16>* %16072, align 2, !tbaa !396
  %16074 = getelementptr inbounds i16, i16* %16070, i64 17
  %16075 = bitcast i16* %16074 to <16 x i16>*
  %16076 = load <16 x i16>, <16 x i16>* %16075, align 2, !tbaa !396
  %16077 = shufflevector <16 x i16> %16073, <16 x i16> %16076, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16078 = bitcast i16* %16070 to <16 x i16>*
  %16079 = load <16 x i16>, <16 x i16>* %16078, align 2, !tbaa !396
  %16080 = getelementptr inbounds i16, i16* %16070, i64 16
  %16081 = bitcast i16* %16080 to <16 x i16>*
  %16082 = load <16 x i16>, <16 x i16>* %16081, align 2, !tbaa !396
  %16083 = shufflevector <16 x i16> %16079, <16 x i16> %16082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16084 = getelementptr inbounds i16, i16* %16070, i64 2
  %16085 = bitcast i16* %16084 to <16 x i16>*
  %16086 = load <16 x i16>, <16 x i16>* %16085, align 2, !tbaa !396
  %16087 = getelementptr inbounds i16, i16* %16070, i64 18
  %16088 = bitcast i16* %16087 to <16 x i16>*
  %16089 = load <16 x i16>, <16 x i16>* %16088, align 2, !tbaa !396
  %16090 = shufflevector <16 x i16> %16086, <16 x i16> %16089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16091 = getelementptr inbounds i16, i16* %16070, i64 4
  %16092 = bitcast i16* %16091 to <16 x i16>*
  %16093 = load <16 x i16>, <16 x i16>* %16092, align 2, !tbaa !396
  %16094 = getelementptr inbounds i16, i16* %16070, i64 20
  %16095 = bitcast i16* %16094 to <16 x i16>*
  %16096 = load <16 x i16>, <16 x i16>* %16095, align 2, !tbaa !396
  %16097 = shufflevector <16 x i16> %16093, <16 x i16> %16096, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16098 = getelementptr inbounds i16, i16* %16070, i64 3
  %16099 = bitcast i16* %16098 to <16 x i16>*
  %16100 = load <16 x i16>, <16 x i16>* %16099, align 2, !tbaa !396
  %16101 = getelementptr inbounds i16, i16* %16070, i64 19
  %16102 = bitcast i16* %16101 to <16 x i16>*
  %16103 = load <16 x i16>, <16 x i16>* %16102, align 2, !tbaa !396
  %16104 = shufflevector <16 x i16> %16100, <16 x i16> %16103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16105 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16083, <32 x i16> %16090, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16106 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16104, <32 x i16> %16097, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16107 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16105, <32 x i16> %16106, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16108 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16107, <32 x i16> %16077, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16109 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16108, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16110 = shufflevector <32 x i16> %16109, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16111 = sext i32 %blur_x.s0.x.v1.base.s967 to i64
  %16112 = add nsw i64 %16111, %16010
  %16113 = getelementptr inbounds i16, i16* %blur_x879, i64 %16112
  %16114 = bitcast i16* %16113 to <16 x i16>*
  store <16 x i16> %16110, <16 x i16>* %16114, align 2, !tbaa !399
  %16115 = shufflevector <32 x i16> %16109, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16116 = getelementptr inbounds i16, i16* %16113, i64 16
  %16117 = bitcast i16* %16116 to <16 x i16>*
  store <16 x i16> %16115, <16 x i16>* %16117, align 2, !tbaa !399
  br label %after_bb961

after_bb969:                                      ; preds = %"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge", %"produce blur_x972"
  %.pre-phi3582 = phi i32 [ %.pre3581, %"end for blur_y.s0.x.x.rebased959.after_bb969_crit_edge" ], [ %16163, %"produce blur_x972" ]
  %16118 = mul nsw i32 %.pre-phi3582, %a551
  %t1700974 = sub nsw i32 %16118, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased977.preheader", label %"end for blur_y.s0.x.x.rebased978", !prof !386

"for blur_y.s0.x.x.rebased977.preheader":         ; preds = %after_bb969
  %16119 = sext i32 %t1700974 to i64
  br label %"for blur_y.s0.x.x.rebased977"

"produce blur_x972":                              ; preds = %"end for blur_y.s0.x.x.rebased959"
  %16120 = getelementptr inbounds i16, i16* %read_input822, i64 %326
  %16121 = getelementptr inbounds i16, i16* %16120, i64 -31
  %16122 = bitcast i16* %16121 to <16 x i16>*
  %16123 = load <16 x i16>, <16 x i16>* %16122, align 2, !tbaa !396
  %16124 = getelementptr inbounds i16, i16* %16120, i64 -15
  %16125 = bitcast i16* %16124 to <16 x i16>*
  %16126 = load <16 x i16>, <16 x i16>* %16125, align 2, !tbaa !396
  %16127 = shufflevector <16 x i16> %16123, <16 x i16> %16126, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16128 = getelementptr inbounds i16, i16* %16120, i64 -32
  %16129 = bitcast i16* %16128 to <16 x i16>*
  %16130 = load <16 x i16>, <16 x i16>* %16129, align 2, !tbaa !396
  %16131 = getelementptr inbounds i16, i16* %16120, i64 -16
  %16132 = bitcast i16* %16131 to <16 x i16>*
  %16133 = load <16 x i16>, <16 x i16>* %16132, align 2, !tbaa !396
  %16134 = shufflevector <16 x i16> %16130, <16 x i16> %16133, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16135 = getelementptr inbounds i16, i16* %16120, i64 -30
  %16136 = bitcast i16* %16135 to <16 x i16>*
  %16137 = load <16 x i16>, <16 x i16>* %16136, align 2, !tbaa !396
  %16138 = getelementptr inbounds i16, i16* %16120, i64 -14
  %16139 = bitcast i16* %16138 to <16 x i16>*
  %16140 = load <16 x i16>, <16 x i16>* %16139, align 2, !tbaa !396
  %16141 = shufflevector <16 x i16> %16137, <16 x i16> %16140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16142 = getelementptr inbounds i16, i16* %16120, i64 -28
  %16143 = bitcast i16* %16142 to <16 x i16>*
  %16144 = load <16 x i16>, <16 x i16>* %16143, align 2, !tbaa !396
  %16145 = getelementptr inbounds i16, i16* %16120, i64 -12
  %16146 = bitcast i16* %16145 to <16 x i16>*
  %16147 = load <16 x i16>, <16 x i16>* %16146, align 2, !tbaa !396
  %16148 = shufflevector <16 x i16> %16144, <16 x i16> %16147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16149 = getelementptr inbounds i16, i16* %16120, i64 -29
  %16150 = bitcast i16* %16149 to <16 x i16>*
  %16151 = load <16 x i16>, <16 x i16>* %16150, align 2, !tbaa !396
  %16152 = getelementptr inbounds i16, i16* %16120, i64 -13
  %16153 = bitcast i16* %16152 to <16 x i16>*
  %16154 = load <16 x i16>, <16 x i16>* %16153, align 2, !tbaa !396
  %16155 = shufflevector <16 x i16> %16151, <16 x i16> %16154, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16156 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16134, <32 x i16> %16141, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16157 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16155, <32 x i16> %16148, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16158 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16156, <32 x i16> %16157, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16159 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16158, <32 x i16> %16127, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16160 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16159, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16161 = shufflevector <32 x i16> %16160, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16162 = add nsw i32 %a379, 3
  %16163 = and i32 %16162, 7
  %16164 = zext i32 %16163 to i64
  %16165 = mul nsw i64 %299, %16164
  %16166 = add nsw i64 %301, %16165
  %16167 = getelementptr inbounds i16, i16* %blur_x879, i64 %16166
  %16168 = getelementptr inbounds i16, i16* %16167, i64 -32
  %16169 = bitcast i16* %16168 to <16 x i16>*
  store <16 x i16> %16161, <16 x i16>* %16169, align 2, !tbaa !399
  %16170 = shufflevector <32 x i16> %16160, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16171 = getelementptr inbounds i16, i16* %16167, i64 -16
  %16172 = bitcast i16* %16171 to <16 x i16>*
  store <16 x i16> %16170, <16 x i16>* %16172, align 2, !tbaa !399
  br label %after_bb969

"for blur_y.s0.x.x.rebased977":                   ; preds = %"for blur_y.s0.x.x.rebased977.preheader", %after_bb980
  %indvars.iv3374 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased977.preheader" ], [ %indvars.iv.next3375, %after_bb980 ]
  %16173 = add nsw i64 %indvars.iv3374, %303
  %16174 = icmp slt i64 %16173, 1
  %16175 = trunc i64 %16173 to i32
  %16176 = shl nsw i32 %16175, 5
  %16177 = icmp sgt i32 %198, %16176
  %16178 = or i1 %16174, %16177
  br i1 %16178, label %"produce blur_x983", label %after_bb980

"end for blur_y.s0.x.x.rebased978":               ; preds = %after_bb980, %after_bb969
  br i1 %304, label %"for blur_y.s0.x.x.rebased988.preheader", label %"end for blur_y.s0.x.x.rebased989", !prof !386

"for blur_y.s0.x.x.rebased988.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased978"
  %16179 = sext i32 %t1700974 to i64
  br label %"for blur_y.s0.x.x.rebased988"

after_bb980:                                      ; preds = %"for blur_y.s0.x.x.rebased977", %"produce blur_x983"
  %indvars.iv.next3375 = add nuw nsw i64 %indvars.iv3374, 1
  %16180 = icmp eq i64 %indvars.iv.next3375, %zext3376
  br i1 %16180, label %"end for blur_y.s0.x.x.rebased978", label %"for blur_y.s0.x.x.rebased977"

"produce blur_x983":                              ; preds = %"for blur_y.s0.x.x.rebased977"
  %t702984 = add nsw i32 %329, %16176
  %16181 = sext i32 %t702984 to i64
  %16182 = getelementptr inbounds i16, i16* %read_input822, i64 %16181
  %16183 = getelementptr inbounds i16, i16* %16182, i64 1
  %16184 = bitcast i16* %16183 to <16 x i16>*
  %16185 = load <16 x i16>, <16 x i16>* %16184, align 2, !tbaa !396
  %16186 = getelementptr inbounds i16, i16* %16182, i64 17
  %16187 = bitcast i16* %16186 to <16 x i16>*
  %16188 = load <16 x i16>, <16 x i16>* %16187, align 2, !tbaa !396
  %16189 = shufflevector <16 x i16> %16185, <16 x i16> %16188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16190 = bitcast i16* %16182 to <16 x i16>*
  %16191 = load <16 x i16>, <16 x i16>* %16190, align 2, !tbaa !396
  %16192 = getelementptr inbounds i16, i16* %16182, i64 16
  %16193 = bitcast i16* %16192 to <16 x i16>*
  %16194 = load <16 x i16>, <16 x i16>* %16193, align 2, !tbaa !396
  %16195 = shufflevector <16 x i16> %16191, <16 x i16> %16194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16196 = getelementptr inbounds i16, i16* %16182, i64 2
  %16197 = bitcast i16* %16196 to <16 x i16>*
  %16198 = load <16 x i16>, <16 x i16>* %16197, align 2, !tbaa !396
  %16199 = getelementptr inbounds i16, i16* %16182, i64 18
  %16200 = bitcast i16* %16199 to <16 x i16>*
  %16201 = load <16 x i16>, <16 x i16>* %16200, align 2, !tbaa !396
  %16202 = shufflevector <16 x i16> %16198, <16 x i16> %16201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16203 = getelementptr inbounds i16, i16* %16182, i64 4
  %16204 = bitcast i16* %16203 to <16 x i16>*
  %16205 = load <16 x i16>, <16 x i16>* %16204, align 2, !tbaa !396
  %16206 = getelementptr inbounds i16, i16* %16182, i64 20
  %16207 = bitcast i16* %16206 to <16 x i16>*
  %16208 = load <16 x i16>, <16 x i16>* %16207, align 2, !tbaa !396
  %16209 = shufflevector <16 x i16> %16205, <16 x i16> %16208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16210 = getelementptr inbounds i16, i16* %16182, i64 3
  %16211 = bitcast i16* %16210 to <16 x i16>*
  %16212 = load <16 x i16>, <16 x i16>* %16211, align 2, !tbaa !396
  %16213 = getelementptr inbounds i16, i16* %16182, i64 19
  %16214 = bitcast i16* %16213 to <16 x i16>*
  %16215 = load <16 x i16>, <16 x i16>* %16214, align 2, !tbaa !396
  %16216 = shufflevector <16 x i16> %16212, <16 x i16> %16215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16217 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16195, <32 x i16> %16202, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16218 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16216, <32 x i16> %16209, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16219 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16217, <32 x i16> %16218, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16220 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16219, <32 x i16> %16189, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16221 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16220, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16222 = shufflevector <32 x i16> %16221, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16223 = shl nsw i64 %16173, 5
  %16224 = add nsw i64 %16223, %16119
  %16225 = getelementptr inbounds i16, i16* %blur_x879, i64 %16224
  %16226 = bitcast i16* %16225 to <16 x i16>*
  store <16 x i16> %16222, <16 x i16>* %16226, align 2, !tbaa !399
  %16227 = shufflevector <32 x i16> %16221, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16228 = getelementptr inbounds i16, i16* %16225, i64 16
  %16229 = bitcast i16* %16228 to <16 x i16>*
  store <16 x i16> %16227, <16 x i16>* %16229, align 2, !tbaa !399
  br label %after_bb980

"for blur_y.s0.x.x.rebased988":                   ; preds = %"for blur_y.s0.x.x.rebased988.preheader", %after_bb991
  %blur_y.s0.x.x.rebased990 = phi i32 [ %16235, %after_bb991 ], [ 0, %"for blur_y.s0.x.x.rebased988.preheader" ]
  %16230 = add nsw i32 %blur_y.s0.x.x.rebased990, %t1626814
  %16231 = icmp slt i32 %16230, 1
  %16232 = shl nsw i32 %16230, 5
  %16233 = icmp sgt i32 %198, %16232
  %16234 = or i1 %16231, %16233
  br i1 %16234, label %then_bb992, label %after_bb991

"end for blur_y.s0.x.x.rebased989":               ; preds = %after_bb991, %"end for blur_y.s0.x.x.rebased978"
  br i1 %229, label %"produce blur_x1002", label %"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge"

"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased989"
  %.pre3583 = add nsw i32 %a379, 4
  %.pre3585 = and i32 %.pre3583, 7
  br label %after_bb999

after_bb991:                                      ; preds = %"for blur_y.s0.x.x.rebased988", %then_bb992
  %16235 = add nuw nsw i32 %blur_y.s0.x.x.rebased990, 1
  %.not2666 = icmp eq i32 %16235, %t1683898
  br i1 %.not2666, label %"end for blur_y.s0.x.x.rebased989", label %"for blur_y.s0.x.x.rebased988"

then_bb992:                                       ; preds = %"for blur_y.s0.x.x.rebased988"
  %16236 = icmp sgt i32 %t1647, %16232
  %b1066 = select i1 %16236, i32 %16232, i32 %t1647
  %16237 = icmp slt i32 %b1066, %198
  %blur_x.s0.x.v1.base.s997 = select i1 %16237, i32 %b1066, i32 %198
  %t704998 = add nsw i32 %329, %blur_x.s0.x.v1.base.s997
  %16238 = sext i32 %t704998 to i64
  %16239 = getelementptr inbounds i16, i16* %read_input822, i64 %16238
  %16240 = getelementptr inbounds i16, i16* %16239, i64 1
  %16241 = bitcast i16* %16240 to <16 x i16>*
  %16242 = load <16 x i16>, <16 x i16>* %16241, align 2, !tbaa !396
  %16243 = getelementptr inbounds i16, i16* %16239, i64 17
  %16244 = bitcast i16* %16243 to <16 x i16>*
  %16245 = load <16 x i16>, <16 x i16>* %16244, align 2, !tbaa !396
  %16246 = shufflevector <16 x i16> %16242, <16 x i16> %16245, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16247 = bitcast i16* %16239 to <16 x i16>*
  %16248 = load <16 x i16>, <16 x i16>* %16247, align 2, !tbaa !396
  %16249 = getelementptr inbounds i16, i16* %16239, i64 16
  %16250 = bitcast i16* %16249 to <16 x i16>*
  %16251 = load <16 x i16>, <16 x i16>* %16250, align 2, !tbaa !396
  %16252 = shufflevector <16 x i16> %16248, <16 x i16> %16251, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16253 = getelementptr inbounds i16, i16* %16239, i64 2
  %16254 = bitcast i16* %16253 to <16 x i16>*
  %16255 = load <16 x i16>, <16 x i16>* %16254, align 2, !tbaa !396
  %16256 = getelementptr inbounds i16, i16* %16239, i64 18
  %16257 = bitcast i16* %16256 to <16 x i16>*
  %16258 = load <16 x i16>, <16 x i16>* %16257, align 2, !tbaa !396
  %16259 = shufflevector <16 x i16> %16255, <16 x i16> %16258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16260 = getelementptr inbounds i16, i16* %16239, i64 4
  %16261 = bitcast i16* %16260 to <16 x i16>*
  %16262 = load <16 x i16>, <16 x i16>* %16261, align 2, !tbaa !396
  %16263 = getelementptr inbounds i16, i16* %16239, i64 20
  %16264 = bitcast i16* %16263 to <16 x i16>*
  %16265 = load <16 x i16>, <16 x i16>* %16264, align 2, !tbaa !396
  %16266 = shufflevector <16 x i16> %16262, <16 x i16> %16265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16267 = getelementptr inbounds i16, i16* %16239, i64 3
  %16268 = bitcast i16* %16267 to <16 x i16>*
  %16269 = load <16 x i16>, <16 x i16>* %16268, align 2, !tbaa !396
  %16270 = getelementptr inbounds i16, i16* %16239, i64 19
  %16271 = bitcast i16* %16270 to <16 x i16>*
  %16272 = load <16 x i16>, <16 x i16>* %16271, align 2, !tbaa !396
  %16273 = shufflevector <16 x i16> %16269, <16 x i16> %16272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16274 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16252, <32 x i16> %16259, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16275 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16273, <32 x i16> %16266, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16276 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16274, <32 x i16> %16275, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16277 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16276, <32 x i16> %16246, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16278 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16277, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16279 = shufflevector <32 x i16> %16278, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16280 = sext i32 %blur_x.s0.x.v1.base.s997 to i64
  %16281 = add nsw i64 %16280, %16179
  %16282 = getelementptr inbounds i16, i16* %blur_x879, i64 %16281
  %16283 = bitcast i16* %16282 to <16 x i16>*
  store <16 x i16> %16279, <16 x i16>* %16283, align 2, !tbaa !399
  %16284 = shufflevector <32 x i16> %16278, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16285 = getelementptr inbounds i16, i16* %16282, i64 16
  %16286 = bitcast i16* %16285 to <16 x i16>*
  store <16 x i16> %16284, <16 x i16>* %16286, align 2, !tbaa !399
  br label %after_bb991

after_bb999:                                      ; preds = %"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge", %"produce blur_x1002"
  %.pre-phi3586 = phi i32 [ %.pre3585, %"end for blur_y.s0.x.x.rebased989.after_bb999_crit_edge" ], [ %16350, %"produce blur_x1002" ]
  %16287 = mul nsw i32 %.pre-phi3586, %a551
  %t17061010 = sub nsw i32 %16287, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1014.preheader", label %"end for blur_y.s0.x.x.rebased1015", !prof !386

"for blur_y.s0.x.x.rebased1014.preheader":        ; preds = %after_bb999
  %16288 = sext i32 %t17061010 to i64
  %16289 = zext i32 %.pre-phi3574 to i64
  %16290 = mul nsw i64 %16289, %337
  %16291 = sub nsw i64 %16290, %298
  %16292 = zext i32 %.pre-phi3570 to i64
  %16293 = mul nsw i64 %16292, %337
  %16294 = sub nsw i64 %16293, %298
  %16295 = zext i32 %.pre-phi3578 to i64
  %16296 = mul nsw i64 %16295, %337
  %16297 = sub nsw i64 %16296, %298
  %16298 = zext i32 %.pre-phi3586 to i64
  %16299 = mul nsw i64 %16298, %337
  %16300 = sub nsw i64 %16299, %298
  %16301 = zext i32 %.pre-phi3582 to i64
  %16302 = mul nsw i64 %16301, %337
  %16303 = sub nsw i64 %16302, %298
  %16304 = sext i32 %a379 to i64
  %16305 = mul nsw i64 %16304, %334
  %16306 = add nsw i64 %16305, %338
  br label %"for blur_y.s0.x.x.rebased1014"

"produce blur_x1002":                             ; preds = %"end for blur_y.s0.x.x.rebased989"
  %16307 = getelementptr inbounds i16, i16* %read_input822, i64 %332
  %16308 = getelementptr inbounds i16, i16* %16307, i64 -31
  %16309 = bitcast i16* %16308 to <16 x i16>*
  %16310 = load <16 x i16>, <16 x i16>* %16309, align 2, !tbaa !396
  %16311 = getelementptr inbounds i16, i16* %16307, i64 -15
  %16312 = bitcast i16* %16311 to <16 x i16>*
  %16313 = load <16 x i16>, <16 x i16>* %16312, align 2, !tbaa !396
  %16314 = shufflevector <16 x i16> %16310, <16 x i16> %16313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16315 = getelementptr inbounds i16, i16* %16307, i64 -32
  %16316 = bitcast i16* %16315 to <16 x i16>*
  %16317 = load <16 x i16>, <16 x i16>* %16316, align 2, !tbaa !396
  %16318 = getelementptr inbounds i16, i16* %16307, i64 -16
  %16319 = bitcast i16* %16318 to <16 x i16>*
  %16320 = load <16 x i16>, <16 x i16>* %16319, align 2, !tbaa !396
  %16321 = shufflevector <16 x i16> %16317, <16 x i16> %16320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16322 = getelementptr inbounds i16, i16* %16307, i64 -30
  %16323 = bitcast i16* %16322 to <16 x i16>*
  %16324 = load <16 x i16>, <16 x i16>* %16323, align 2, !tbaa !396
  %16325 = getelementptr inbounds i16, i16* %16307, i64 -14
  %16326 = bitcast i16* %16325 to <16 x i16>*
  %16327 = load <16 x i16>, <16 x i16>* %16326, align 2, !tbaa !396
  %16328 = shufflevector <16 x i16> %16324, <16 x i16> %16327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16329 = getelementptr inbounds i16, i16* %16307, i64 -28
  %16330 = bitcast i16* %16329 to <16 x i16>*
  %16331 = load <16 x i16>, <16 x i16>* %16330, align 2, !tbaa !396
  %16332 = getelementptr inbounds i16, i16* %16307, i64 -12
  %16333 = bitcast i16* %16332 to <16 x i16>*
  %16334 = load <16 x i16>, <16 x i16>* %16333, align 2, !tbaa !396
  %16335 = shufflevector <16 x i16> %16331, <16 x i16> %16334, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16336 = getelementptr inbounds i16, i16* %16307, i64 -29
  %16337 = bitcast i16* %16336 to <16 x i16>*
  %16338 = load <16 x i16>, <16 x i16>* %16337, align 2, !tbaa !396
  %16339 = getelementptr inbounds i16, i16* %16307, i64 -13
  %16340 = bitcast i16* %16339 to <16 x i16>*
  %16341 = load <16 x i16>, <16 x i16>* %16340, align 2, !tbaa !396
  %16342 = shufflevector <16 x i16> %16338, <16 x i16> %16341, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16343 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16321, <32 x i16> %16328, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16344 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16342, <32 x i16> %16335, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16345 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16343, <32 x i16> %16344, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16346 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16345, <32 x i16> %16314, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16347 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16346, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16348 = shufflevector <32 x i16> %16347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16349 = add nsw i32 %a379, 4
  %16350 = and i32 %16349, 7
  %16351 = zext i32 %16350 to i64
  %16352 = mul nsw i64 %299, %16351
  %16353 = add nsw i64 %301, %16352
  %16354 = getelementptr inbounds i16, i16* %blur_x879, i64 %16353
  %16355 = getelementptr inbounds i16, i16* %16354, i64 -32
  %16356 = bitcast i16* %16355 to <16 x i16>*
  store <16 x i16> %16348, <16 x i16>* %16356, align 2, !tbaa !399
  %16357 = shufflevector <32 x i16> %16347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16358 = getelementptr inbounds i16, i16* %16354, i64 -16
  %16359 = bitcast i16* %16358 to <16 x i16>*
  store <16 x i16> %16357, <16 x i16>* %16359, align 2, !tbaa !399
  %16360 = zext i32 %.pre-phi3574 to i64
  %16361 = mul nsw i64 %16360, %333
  %16362 = add nsw i64 %16361, %296
  %16363 = getelementptr inbounds i16, i16* %blur_x879, i64 %16362
  %16364 = getelementptr inbounds i16, i16* %16363, i64 -32
  %16365 = bitcast i16* %16364 to <16 x i16>*
  %16366 = load <16 x i16>, <16 x i16>* %16365, align 2, !tbaa !399
  %16367 = getelementptr inbounds i16, i16* %16363, i64 -16
  %16368 = bitcast i16* %16367 to <16 x i16>*
  %16369 = load <16 x i16>, <16 x i16>* %16368, align 2, !tbaa !399
  %16370 = shufflevector <16 x i16> %16366, <16 x i16> %16369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16371 = zext i32 %.pre-phi3570 to i64
  %16372 = mul nsw i64 %16371, %333
  %16373 = add nsw i64 %16372, %296
  %16374 = getelementptr inbounds i16, i16* %blur_x879, i64 %16373
  %16375 = getelementptr inbounds i16, i16* %16374, i64 -32
  %16376 = bitcast i16* %16375 to <16 x i16>*
  %16377 = load <16 x i16>, <16 x i16>* %16376, align 2, !tbaa !399
  %16378 = getelementptr inbounds i16, i16* %16374, i64 -16
  %16379 = bitcast i16* %16378 to <16 x i16>*
  %16380 = load <16 x i16>, <16 x i16>* %16379, align 2, !tbaa !399
  %16381 = shufflevector <16 x i16> %16377, <16 x i16> %16380, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16382 = zext i32 %.pre-phi3578 to i64
  %16383 = mul nsw i64 %16382, %333
  %16384 = add nsw i64 %16383, %296
  %16385 = getelementptr inbounds i16, i16* %blur_x879, i64 %16384
  %16386 = getelementptr inbounds i16, i16* %16385, i64 -32
  %16387 = bitcast i16* %16386 to <16 x i16>*
  %16388 = load <16 x i16>, <16 x i16>* %16387, align 2, !tbaa !399
  %16389 = getelementptr inbounds i16, i16* %16385, i64 -16
  %16390 = bitcast i16* %16389 to <16 x i16>*
  %16391 = load <16 x i16>, <16 x i16>* %16390, align 2, !tbaa !399
  %16392 = shufflevector <16 x i16> %16388, <16 x i16> %16391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16393 = mul nsw i64 %16351, %333
  %16394 = add nsw i64 %16393, %296
  %16395 = getelementptr inbounds i16, i16* %blur_x879, i64 %16394
  %16396 = getelementptr inbounds i16, i16* %16395, i64 -32
  %16397 = bitcast i16* %16396 to <16 x i16>*
  %16398 = load <16 x i16>, <16 x i16>* %16397, align 2, !tbaa !399
  %16399 = getelementptr inbounds i16, i16* %16395, i64 -16
  %16400 = bitcast i16* %16399 to <16 x i16>*
  %16401 = load <16 x i16>, <16 x i16>* %16400, align 2, !tbaa !399
  %16402 = shufflevector <16 x i16> %16398, <16 x i16> %16401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16403 = zext i32 %.pre-phi3582 to i64
  %16404 = mul nsw i64 %16403, %333
  %16405 = add nsw i64 %16404, %296
  %16406 = getelementptr inbounds i16, i16* %blur_x879, i64 %16405
  %16407 = getelementptr inbounds i16, i16* %16406, i64 -32
  %16408 = bitcast i16* %16407 to <16 x i16>*
  %16409 = load <16 x i16>, <16 x i16>* %16408, align 2, !tbaa !399
  %16410 = getelementptr inbounds i16, i16* %16406, i64 -16
  %16411 = bitcast i16* %16410 to <16 x i16>*
  %16412 = load <16 x i16>, <16 x i16>* %16411, align 2, !tbaa !399
  %16413 = shufflevector <16 x i16> %16409, <16 x i16> %16412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16414 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16381, <32 x i16> %16392, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16415 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16413, <32 x i16> %16402, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16416 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16414, <32 x i16> %16415, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16417 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16416, <32 x i16> %16370, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16418 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16417, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16419 = shufflevector <32 x i16> %16418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16420 = sext i32 %a379 to i64
  %16421 = mul nsw i64 %16420, %334
  %16422 = add nsw i64 %336, %16421
  %16423 = getelementptr inbounds i16, i16* %263, i64 %16422
  %16424 = getelementptr inbounds i16, i16* %16423, i64 -32
  %16425 = bitcast i16* %16424 to <16 x i16>*
  store <16 x i16> %16419, <16 x i16>* %16425, align 2, !tbaa !401
  %16426 = shufflevector <32 x i16> %16418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16427 = getelementptr inbounds i16, i16* %16423, i64 -16
  %16428 = bitcast i16* %16427 to <16 x i16>*
  store <16 x i16> %16426, <16 x i16>* %16428, align 2, !tbaa !401
  br label %after_bb999

"for blur_y.s0.x.x.rebased1014":                  ; preds = %"for blur_y.s0.x.x.rebased1014.preheader", %"consume blur_x1022"
  %indvars.iv3377 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1014.preheader" ], [ %indvars.iv.next3378, %"consume blur_x1022" ]
  %16429 = add nsw i64 %indvars.iv3377, %303
  %16430 = icmp slt i64 %16429, 1
  %16431 = trunc i64 %16429 to i32
  %16432 = shl nsw i32 %16431, 5
  %16433 = icmp sgt i32 %198, %16432
  %16434 = or i1 %16430, %16433
  br i1 %16434, label %"produce blur_x1020", label %"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge"

"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1014"
  %.pre3587 = shl nsw i64 %16429, 5
  br label %"consume blur_x1022"

"end for blur_y.s0.x.x.rebased1015":              ; preds = %"consume blur_x1022", %after_bb999
  br i1 %304, label %"for blur_y.s0.x.x.rebased1030.preheader", label %"end for blur_y.s0.x.x.rebased1031", !prof !386

"for blur_y.s0.x.x.rebased1030.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1015"
  %16435 = sext i32 %t17061010 to i64
  %16436 = zext i32 %.pre-phi3574 to i64
  %16437 = mul nsw i64 %16436, %337
  %16438 = sub nsw i64 %16437, %298
  %16439 = zext i32 %.pre-phi3570 to i64
  %16440 = mul nsw i64 %16439, %337
  %16441 = sub nsw i64 %16440, %298
  %16442 = zext i32 %.pre-phi3578 to i64
  %16443 = mul nsw i64 %16442, %337
  %16444 = sub nsw i64 %16443, %298
  %16445 = zext i32 %.pre-phi3586 to i64
  %16446 = mul nsw i64 %16445, %337
  %16447 = sub nsw i64 %16446, %298
  %16448 = zext i32 %.pre-phi3582 to i64
  %16449 = mul nsw i64 %16448, %337
  %16450 = sub nsw i64 %16449, %298
  %16451 = sext i32 %a379 to i64
  %16452 = mul nsw i64 %16451, %334
  %16453 = add nsw i64 %16452, %338
  br label %"for blur_y.s0.x.x.rebased1030"

"produce blur_x1020":                             ; preds = %"for blur_y.s0.x.x.rebased1014"
  %t7121021 = add nsw i32 %16432, %328
  %16454 = sext i32 %t7121021 to i64
  %16455 = getelementptr inbounds i16, i16* %read_input822, i64 %16454
  %16456 = getelementptr inbounds i16, i16* %16455, i64 1
  %16457 = bitcast i16* %16456 to <16 x i16>*
  %16458 = load <16 x i16>, <16 x i16>* %16457, align 2, !tbaa !396
  %16459 = getelementptr inbounds i16, i16* %16455, i64 17
  %16460 = bitcast i16* %16459 to <16 x i16>*
  %16461 = load <16 x i16>, <16 x i16>* %16460, align 2, !tbaa !396
  %16462 = shufflevector <16 x i16> %16458, <16 x i16> %16461, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16463 = bitcast i16* %16455 to <16 x i16>*
  %16464 = load <16 x i16>, <16 x i16>* %16463, align 2, !tbaa !396
  %16465 = getelementptr inbounds i16, i16* %16455, i64 16
  %16466 = bitcast i16* %16465 to <16 x i16>*
  %16467 = load <16 x i16>, <16 x i16>* %16466, align 2, !tbaa !396
  %16468 = shufflevector <16 x i16> %16464, <16 x i16> %16467, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16469 = getelementptr inbounds i16, i16* %16455, i64 2
  %16470 = bitcast i16* %16469 to <16 x i16>*
  %16471 = load <16 x i16>, <16 x i16>* %16470, align 2, !tbaa !396
  %16472 = getelementptr inbounds i16, i16* %16455, i64 18
  %16473 = bitcast i16* %16472 to <16 x i16>*
  %16474 = load <16 x i16>, <16 x i16>* %16473, align 2, !tbaa !396
  %16475 = shufflevector <16 x i16> %16471, <16 x i16> %16474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16476 = getelementptr inbounds i16, i16* %16455, i64 4
  %16477 = bitcast i16* %16476 to <16 x i16>*
  %16478 = load <16 x i16>, <16 x i16>* %16477, align 2, !tbaa !396
  %16479 = getelementptr inbounds i16, i16* %16455, i64 20
  %16480 = bitcast i16* %16479 to <16 x i16>*
  %16481 = load <16 x i16>, <16 x i16>* %16480, align 2, !tbaa !396
  %16482 = shufflevector <16 x i16> %16478, <16 x i16> %16481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16483 = getelementptr inbounds i16, i16* %16455, i64 3
  %16484 = bitcast i16* %16483 to <16 x i16>*
  %16485 = load <16 x i16>, <16 x i16>* %16484, align 2, !tbaa !396
  %16486 = getelementptr inbounds i16, i16* %16455, i64 19
  %16487 = bitcast i16* %16486 to <16 x i16>*
  %16488 = load <16 x i16>, <16 x i16>* %16487, align 2, !tbaa !396
  %16489 = shufflevector <16 x i16> %16485, <16 x i16> %16488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16490 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16468, <32 x i16> %16475, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16491 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16489, <32 x i16> %16482, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16492 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16490, <32 x i16> %16491, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16493 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16492, <32 x i16> %16462, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16494 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16493, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16495 = shufflevector <32 x i16> %16494, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16496 = shl nsw i64 %16429, 5
  %16497 = add nsw i64 %16496, %16288
  %16498 = getelementptr inbounds i16, i16* %blur_x879, i64 %16497
  %16499 = bitcast i16* %16498 to <16 x i16>*
  store <16 x i16> %16495, <16 x i16>* %16499, align 2, !tbaa !399
  %16500 = shufflevector <32 x i16> %16494, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16501 = getelementptr inbounds i16, i16* %16498, i64 16
  %16502 = bitcast i16* %16501 to <16 x i16>*
  store <16 x i16> %16500, <16 x i16>* %16502, align 2, !tbaa !399
  br label %"consume blur_x1022"

"consume blur_x1022":                             ; preds = %"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge", %"produce blur_x1020"
  %.pre-phi3588 = phi i64 [ %.pre3587, %"for blur_y.s0.x.x.rebased1014.consume blur_x1022_crit_edge" ], [ %16496, %"produce blur_x1020" ]
  %16503 = add nsw i64 %16291, %.pre-phi3588
  %16504 = getelementptr inbounds i16, i16* %blur_x879, i64 %16503
  %16505 = bitcast i16* %16504 to <16 x i16>*
  %16506 = load <16 x i16>, <16 x i16>* %16505, align 2, !tbaa !399
  %16507 = getelementptr inbounds i16, i16* %16504, i64 16
  %16508 = bitcast i16* %16507 to <16 x i16>*
  %16509 = load <16 x i16>, <16 x i16>* %16508, align 2, !tbaa !399
  %16510 = shufflevector <16 x i16> %16506, <16 x i16> %16509, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16511 = add nsw i64 %16294, %.pre-phi3588
  %16512 = getelementptr inbounds i16, i16* %blur_x879, i64 %16511
  %16513 = bitcast i16* %16512 to <16 x i16>*
  %16514 = load <16 x i16>, <16 x i16>* %16513, align 2, !tbaa !399
  %16515 = getelementptr inbounds i16, i16* %16512, i64 16
  %16516 = bitcast i16* %16515 to <16 x i16>*
  %16517 = load <16 x i16>, <16 x i16>* %16516, align 2, !tbaa !399
  %16518 = shufflevector <16 x i16> %16514, <16 x i16> %16517, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16519 = add nsw i64 %16297, %.pre-phi3588
  %16520 = getelementptr inbounds i16, i16* %blur_x879, i64 %16519
  %16521 = bitcast i16* %16520 to <16 x i16>*
  %16522 = load <16 x i16>, <16 x i16>* %16521, align 2, !tbaa !399
  %16523 = getelementptr inbounds i16, i16* %16520, i64 16
  %16524 = bitcast i16* %16523 to <16 x i16>*
  %16525 = load <16 x i16>, <16 x i16>* %16524, align 2, !tbaa !399
  %16526 = shufflevector <16 x i16> %16522, <16 x i16> %16525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16527 = add nsw i64 %16300, %.pre-phi3588
  %16528 = getelementptr inbounds i16, i16* %blur_x879, i64 %16527
  %16529 = bitcast i16* %16528 to <16 x i16>*
  %16530 = load <16 x i16>, <16 x i16>* %16529, align 2, !tbaa !399
  %16531 = getelementptr inbounds i16, i16* %16528, i64 16
  %16532 = bitcast i16* %16531 to <16 x i16>*
  %16533 = load <16 x i16>, <16 x i16>* %16532, align 2, !tbaa !399
  %16534 = shufflevector <16 x i16> %16530, <16 x i16> %16533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16535 = add nsw i64 %16303, %.pre-phi3588
  %16536 = getelementptr inbounds i16, i16* %blur_x879, i64 %16535
  %16537 = bitcast i16* %16536 to <16 x i16>*
  %16538 = load <16 x i16>, <16 x i16>* %16537, align 2, !tbaa !399
  %16539 = getelementptr inbounds i16, i16* %16536, i64 16
  %16540 = bitcast i16* %16539 to <16 x i16>*
  %16541 = load <16 x i16>, <16 x i16>* %16540, align 2, !tbaa !399
  %16542 = shufflevector <16 x i16> %16538, <16 x i16> %16541, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16543 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16518, <32 x i16> %16526, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16544 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16542, <32 x i16> %16534, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16545 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16543, <32 x i16> %16544, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16546 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16545, <32 x i16> %16510, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16547 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16546, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16548 = shufflevector <32 x i16> %16547, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16549 = add nsw i64 %16306, %.pre-phi3588
  %16550 = getelementptr inbounds i16, i16* %263, i64 %16549
  %16551 = bitcast i16* %16550 to <16 x i16>*
  store <16 x i16> %16548, <16 x i16>* %16551, align 2, !tbaa !401
  %16552 = shufflevector <32 x i16> %16547, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16553 = getelementptr inbounds i16, i16* %16550, i64 16
  %16554 = bitcast i16* %16553 to <16 x i16>*
  store <16 x i16> %16552, <16 x i16>* %16554, align 2, !tbaa !401
  %indvars.iv.next3378 = add nuw nsw i64 %indvars.iv3377, 1
  %16555 = icmp eq i64 %indvars.iv.next3378, %zext3379
  br i1 %16555, label %"end for blur_y.s0.x.x.rebased1015", label %"for blur_y.s0.x.x.rebased1014"

"for blur_y.s0.x.x.rebased1030":                  ; preds = %"for blur_y.s0.x.x.rebased1030.preheader", %"consume blur_x1041"
  %blur_y.s0.x.x.rebased1032 = phi i32 [ %16664, %"consume blur_x1041" ], [ 0, %"for blur_y.s0.x.x.rebased1030.preheader" ]
  %16556 = add nsw i32 %blur_y.s0.x.x.rebased1032, %t1626814
  %a1229 = shl nsw i32 %16556, 5
  %16557 = icmp sgt i32 %t1647, %a1229
  %blur_y.s0.x.v0.base.s1033 = select i1 %16557, i32 %a1229, i32 %t1647
  %16558 = icmp slt i32 %16556, 1
  %16559 = icmp sgt i32 %198, %a1229
  %16560 = or i1 %16558, %16559
  br i1 %16560, label %"produce blur_x1038", label %"consume blur_x1041"

"end for blur_y.s0.x.x.rebased1031":              ; preds = %"consume blur_x1041", %"end for blur_y.s0.x.x.rebased1015"
  br i1 %229, label %"produce blur_x1045", label %"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge"

"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1031"
  %.pre3589 = add nsw i32 %a379, 5
  %.pre3591 = and i32 %.pre3589, 7
  br label %after_bb1042

"produce blur_x1038":                             ; preds = %"for blur_y.s0.x.x.rebased1030"
  %16561 = icmp slt i32 %blur_y.s0.x.v0.base.s1033, %198
  %blur_x.s0.x.v1.base.s1039 = select i1 %16561, i32 %blur_y.s0.x.v0.base.s1033, i32 %198
  %t7171040 = add nsw i32 %blur_x.s0.x.v1.base.s1039, %328
  %16562 = sext i32 %t7171040 to i64
  %16563 = getelementptr inbounds i16, i16* %read_input822, i64 %16562
  %16564 = getelementptr inbounds i16, i16* %16563, i64 1
  %16565 = bitcast i16* %16564 to <16 x i16>*
  %16566 = load <16 x i16>, <16 x i16>* %16565, align 2, !tbaa !396
  %16567 = getelementptr inbounds i16, i16* %16563, i64 17
  %16568 = bitcast i16* %16567 to <16 x i16>*
  %16569 = load <16 x i16>, <16 x i16>* %16568, align 2, !tbaa !396
  %16570 = shufflevector <16 x i16> %16566, <16 x i16> %16569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16571 = bitcast i16* %16563 to <16 x i16>*
  %16572 = load <16 x i16>, <16 x i16>* %16571, align 2, !tbaa !396
  %16573 = getelementptr inbounds i16, i16* %16563, i64 16
  %16574 = bitcast i16* %16573 to <16 x i16>*
  %16575 = load <16 x i16>, <16 x i16>* %16574, align 2, !tbaa !396
  %16576 = shufflevector <16 x i16> %16572, <16 x i16> %16575, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16577 = getelementptr inbounds i16, i16* %16563, i64 2
  %16578 = bitcast i16* %16577 to <16 x i16>*
  %16579 = load <16 x i16>, <16 x i16>* %16578, align 2, !tbaa !396
  %16580 = getelementptr inbounds i16, i16* %16563, i64 18
  %16581 = bitcast i16* %16580 to <16 x i16>*
  %16582 = load <16 x i16>, <16 x i16>* %16581, align 2, !tbaa !396
  %16583 = shufflevector <16 x i16> %16579, <16 x i16> %16582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16584 = getelementptr inbounds i16, i16* %16563, i64 4
  %16585 = bitcast i16* %16584 to <16 x i16>*
  %16586 = load <16 x i16>, <16 x i16>* %16585, align 2, !tbaa !396
  %16587 = getelementptr inbounds i16, i16* %16563, i64 20
  %16588 = bitcast i16* %16587 to <16 x i16>*
  %16589 = load <16 x i16>, <16 x i16>* %16588, align 2, !tbaa !396
  %16590 = shufflevector <16 x i16> %16586, <16 x i16> %16589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16591 = getelementptr inbounds i16, i16* %16563, i64 3
  %16592 = bitcast i16* %16591 to <16 x i16>*
  %16593 = load <16 x i16>, <16 x i16>* %16592, align 2, !tbaa !396
  %16594 = getelementptr inbounds i16, i16* %16563, i64 19
  %16595 = bitcast i16* %16594 to <16 x i16>*
  %16596 = load <16 x i16>, <16 x i16>* %16595, align 2, !tbaa !396
  %16597 = shufflevector <16 x i16> %16593, <16 x i16> %16596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16598 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16576, <32 x i16> %16583, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16599 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16597, <32 x i16> %16590, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16600 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16598, <32 x i16> %16599, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16601 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16600, <32 x i16> %16570, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16602 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16601, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16603 = shufflevector <32 x i16> %16602, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16604 = sext i32 %blur_x.s0.x.v1.base.s1039 to i64
  %16605 = add nsw i64 %16604, %16435
  %16606 = getelementptr inbounds i16, i16* %blur_x879, i64 %16605
  %16607 = bitcast i16* %16606 to <16 x i16>*
  store <16 x i16> %16603, <16 x i16>* %16607, align 2, !tbaa !399
  %16608 = shufflevector <32 x i16> %16602, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16609 = getelementptr inbounds i16, i16* %16606, i64 16
  %16610 = bitcast i16* %16609 to <16 x i16>*
  store <16 x i16> %16608, <16 x i16>* %16610, align 2, !tbaa !399
  br label %"consume blur_x1041"

"consume blur_x1041":                             ; preds = %"for blur_y.s0.x.x.rebased1030", %"produce blur_x1038"
  %16611 = sext i32 %blur_y.s0.x.v0.base.s1033 to i64
  %16612 = add nsw i64 %16438, %16611
  %16613 = getelementptr inbounds i16, i16* %blur_x879, i64 %16612
  %16614 = bitcast i16* %16613 to <16 x i16>*
  %16615 = load <16 x i16>, <16 x i16>* %16614, align 2, !tbaa !399
  %16616 = getelementptr inbounds i16, i16* %16613, i64 16
  %16617 = bitcast i16* %16616 to <16 x i16>*
  %16618 = load <16 x i16>, <16 x i16>* %16617, align 2, !tbaa !399
  %16619 = shufflevector <16 x i16> %16615, <16 x i16> %16618, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16620 = add nsw i64 %16441, %16611
  %16621 = getelementptr inbounds i16, i16* %blur_x879, i64 %16620
  %16622 = bitcast i16* %16621 to <16 x i16>*
  %16623 = load <16 x i16>, <16 x i16>* %16622, align 2, !tbaa !399
  %16624 = getelementptr inbounds i16, i16* %16621, i64 16
  %16625 = bitcast i16* %16624 to <16 x i16>*
  %16626 = load <16 x i16>, <16 x i16>* %16625, align 2, !tbaa !399
  %16627 = shufflevector <16 x i16> %16623, <16 x i16> %16626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16628 = add nsw i64 %16444, %16611
  %16629 = getelementptr inbounds i16, i16* %blur_x879, i64 %16628
  %16630 = bitcast i16* %16629 to <16 x i16>*
  %16631 = load <16 x i16>, <16 x i16>* %16630, align 2, !tbaa !399
  %16632 = getelementptr inbounds i16, i16* %16629, i64 16
  %16633 = bitcast i16* %16632 to <16 x i16>*
  %16634 = load <16 x i16>, <16 x i16>* %16633, align 2, !tbaa !399
  %16635 = shufflevector <16 x i16> %16631, <16 x i16> %16634, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16636 = add nsw i64 %16447, %16611
  %16637 = getelementptr inbounds i16, i16* %blur_x879, i64 %16636
  %16638 = bitcast i16* %16637 to <16 x i16>*
  %16639 = load <16 x i16>, <16 x i16>* %16638, align 2, !tbaa !399
  %16640 = getelementptr inbounds i16, i16* %16637, i64 16
  %16641 = bitcast i16* %16640 to <16 x i16>*
  %16642 = load <16 x i16>, <16 x i16>* %16641, align 2, !tbaa !399
  %16643 = shufflevector <16 x i16> %16639, <16 x i16> %16642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16644 = add nsw i64 %16450, %16611
  %16645 = getelementptr inbounds i16, i16* %blur_x879, i64 %16644
  %16646 = bitcast i16* %16645 to <16 x i16>*
  %16647 = load <16 x i16>, <16 x i16>* %16646, align 2, !tbaa !399
  %16648 = getelementptr inbounds i16, i16* %16645, i64 16
  %16649 = bitcast i16* %16648 to <16 x i16>*
  %16650 = load <16 x i16>, <16 x i16>* %16649, align 2, !tbaa !399
  %16651 = shufflevector <16 x i16> %16647, <16 x i16> %16650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16652 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16627, <32 x i16> %16635, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16653 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16651, <32 x i16> %16643, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16654 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16652, <32 x i16> %16653, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16655 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16654, <32 x i16> %16619, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16656 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16655, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16657 = shufflevector <32 x i16> %16656, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16658 = add nsw i64 %16453, %16611
  %16659 = getelementptr inbounds i16, i16* %263, i64 %16658
  %16660 = bitcast i16* %16659 to <16 x i16>*
  store <16 x i16> %16657, <16 x i16>* %16660, align 2, !tbaa !401
  %16661 = shufflevector <32 x i16> %16656, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16662 = getelementptr inbounds i16, i16* %16659, i64 16
  %16663 = bitcast i16* %16662 to <16 x i16>*
  store <16 x i16> %16661, <16 x i16>* %16663, align 2, !tbaa !401
  %16664 = add nuw nsw i32 %blur_y.s0.x.x.rebased1032, 1
  %.not2662 = icmp eq i32 %16664, %t1683898
  br i1 %.not2662, label %"end for blur_y.s0.x.x.rebased1031", label %"for blur_y.s0.x.x.rebased1030"

after_bb1042:                                     ; preds = %"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge", %"produce blur_x1045"
  %.pre-phi3592 = phi i32 [ %.pre3591, %"end for blur_y.s0.x.x.rebased1031.after_bb1042_crit_edge" ], [ %16729, %"produce blur_x1045" ]
  %16665 = mul nsw i32 %.pre-phi3592, %a551
  %t17221053 = sub nsw i32 %16665, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1057.preheader", label %"end for blur_y.s0.x.x.rebased1058", !prof !386

"for blur_y.s0.x.x.rebased1057.preheader":        ; preds = %after_bb1042
  %16666 = sext i32 %t17221053 to i64
  %16667 = zext i32 %.pre-phi3578 to i64
  %16668 = mul nsw i64 %16667, %337
  %16669 = sub nsw i64 %16668, %298
  %16670 = zext i32 %.pre-phi3574 to i64
  %16671 = mul nsw i64 %16670, %337
  %16672 = sub nsw i64 %16671, %298
  %16673 = zext i32 %.pre-phi3582 to i64
  %16674 = mul nsw i64 %16673, %337
  %16675 = sub nsw i64 %16674, %298
  %16676 = zext i32 %.pre-phi3592 to i64
  %16677 = mul nsw i64 %16676, %337
  %16678 = sub nsw i64 %16677, %298
  %16679 = zext i32 %.pre-phi3586 to i64
  %16680 = mul nsw i64 %16679, %337
  %16681 = sub nsw i64 %16680, %298
  %16682 = sext i32 %a379 to i64
  %16683 = add nsw i64 %16682, 1
  %16684 = mul nsw i64 %16683, %334
  %16685 = add nsw i64 %16684, %338
  br label %"for blur_y.s0.x.x.rebased1057"

"produce blur_x1045":                             ; preds = %"end for blur_y.s0.x.x.rebased1031"
  %16686 = getelementptr inbounds i16, i16* %read_input822, i64 %342
  %16687 = getelementptr inbounds i16, i16* %16686, i64 -31
  %16688 = bitcast i16* %16687 to <16 x i16>*
  %16689 = load <16 x i16>, <16 x i16>* %16688, align 2, !tbaa !396
  %16690 = getelementptr inbounds i16, i16* %16686, i64 -15
  %16691 = bitcast i16* %16690 to <16 x i16>*
  %16692 = load <16 x i16>, <16 x i16>* %16691, align 2, !tbaa !396
  %16693 = shufflevector <16 x i16> %16689, <16 x i16> %16692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16694 = getelementptr inbounds i16, i16* %16686, i64 -32
  %16695 = bitcast i16* %16694 to <16 x i16>*
  %16696 = load <16 x i16>, <16 x i16>* %16695, align 2, !tbaa !396
  %16697 = getelementptr inbounds i16, i16* %16686, i64 -16
  %16698 = bitcast i16* %16697 to <16 x i16>*
  %16699 = load <16 x i16>, <16 x i16>* %16698, align 2, !tbaa !396
  %16700 = shufflevector <16 x i16> %16696, <16 x i16> %16699, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16701 = getelementptr inbounds i16, i16* %16686, i64 -30
  %16702 = bitcast i16* %16701 to <16 x i16>*
  %16703 = load <16 x i16>, <16 x i16>* %16702, align 2, !tbaa !396
  %16704 = getelementptr inbounds i16, i16* %16686, i64 -14
  %16705 = bitcast i16* %16704 to <16 x i16>*
  %16706 = load <16 x i16>, <16 x i16>* %16705, align 2, !tbaa !396
  %16707 = shufflevector <16 x i16> %16703, <16 x i16> %16706, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16708 = getelementptr inbounds i16, i16* %16686, i64 -28
  %16709 = bitcast i16* %16708 to <16 x i16>*
  %16710 = load <16 x i16>, <16 x i16>* %16709, align 2, !tbaa !396
  %16711 = getelementptr inbounds i16, i16* %16686, i64 -12
  %16712 = bitcast i16* %16711 to <16 x i16>*
  %16713 = load <16 x i16>, <16 x i16>* %16712, align 2, !tbaa !396
  %16714 = shufflevector <16 x i16> %16710, <16 x i16> %16713, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16715 = getelementptr inbounds i16, i16* %16686, i64 -29
  %16716 = bitcast i16* %16715 to <16 x i16>*
  %16717 = load <16 x i16>, <16 x i16>* %16716, align 2, !tbaa !396
  %16718 = getelementptr inbounds i16, i16* %16686, i64 -13
  %16719 = bitcast i16* %16718 to <16 x i16>*
  %16720 = load <16 x i16>, <16 x i16>* %16719, align 2, !tbaa !396
  %16721 = shufflevector <16 x i16> %16717, <16 x i16> %16720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16722 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16700, <32 x i16> %16707, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16723 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16721, <32 x i16> %16714, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16724 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16722, <32 x i16> %16723, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16725 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16724, <32 x i16> %16693, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16726 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16725, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16727 = shufflevector <32 x i16> %16726, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16728 = add nsw i32 %a379, 5
  %16729 = and i32 %16728, 7
  %16730 = zext i32 %16729 to i64
  %16731 = mul nsw i64 %299, %16730
  %16732 = add nsw i64 %301, %16731
  %16733 = getelementptr inbounds i16, i16* %blur_x879, i64 %16732
  %16734 = getelementptr inbounds i16, i16* %16733, i64 -32
  %16735 = bitcast i16* %16734 to <16 x i16>*
  store <16 x i16> %16727, <16 x i16>* %16735, align 2, !tbaa !399
  %16736 = shufflevector <32 x i16> %16726, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16737 = getelementptr inbounds i16, i16* %16733, i64 -16
  %16738 = bitcast i16* %16737 to <16 x i16>*
  store <16 x i16> %16736, <16 x i16>* %16738, align 2, !tbaa !399
  %16739 = zext i32 %.pre-phi3578 to i64
  %16740 = mul nsw i64 %16739, %333
  %16741 = add nsw i64 %16740, %296
  %16742 = getelementptr inbounds i16, i16* %blur_x879, i64 %16741
  %16743 = getelementptr inbounds i16, i16* %16742, i64 -32
  %16744 = bitcast i16* %16743 to <16 x i16>*
  %16745 = load <16 x i16>, <16 x i16>* %16744, align 2, !tbaa !399
  %16746 = getelementptr inbounds i16, i16* %16742, i64 -16
  %16747 = bitcast i16* %16746 to <16 x i16>*
  %16748 = load <16 x i16>, <16 x i16>* %16747, align 2, !tbaa !399
  %16749 = shufflevector <16 x i16> %16745, <16 x i16> %16748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16750 = zext i32 %.pre-phi3574 to i64
  %16751 = mul nsw i64 %16750, %333
  %16752 = add nsw i64 %16751, %296
  %16753 = getelementptr inbounds i16, i16* %blur_x879, i64 %16752
  %16754 = getelementptr inbounds i16, i16* %16753, i64 -32
  %16755 = bitcast i16* %16754 to <16 x i16>*
  %16756 = load <16 x i16>, <16 x i16>* %16755, align 2, !tbaa !399
  %16757 = getelementptr inbounds i16, i16* %16753, i64 -16
  %16758 = bitcast i16* %16757 to <16 x i16>*
  %16759 = load <16 x i16>, <16 x i16>* %16758, align 2, !tbaa !399
  %16760 = shufflevector <16 x i16> %16756, <16 x i16> %16759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16761 = zext i32 %.pre-phi3582 to i64
  %16762 = mul nsw i64 %16761, %333
  %16763 = add nsw i64 %16762, %296
  %16764 = getelementptr inbounds i16, i16* %blur_x879, i64 %16763
  %16765 = getelementptr inbounds i16, i16* %16764, i64 -32
  %16766 = bitcast i16* %16765 to <16 x i16>*
  %16767 = load <16 x i16>, <16 x i16>* %16766, align 2, !tbaa !399
  %16768 = getelementptr inbounds i16, i16* %16764, i64 -16
  %16769 = bitcast i16* %16768 to <16 x i16>*
  %16770 = load <16 x i16>, <16 x i16>* %16769, align 2, !tbaa !399
  %16771 = shufflevector <16 x i16> %16767, <16 x i16> %16770, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16772 = mul nsw i64 %16730, %333
  %16773 = add nsw i64 %16772, %296
  %16774 = getelementptr inbounds i16, i16* %blur_x879, i64 %16773
  %16775 = getelementptr inbounds i16, i16* %16774, i64 -32
  %16776 = bitcast i16* %16775 to <16 x i16>*
  %16777 = load <16 x i16>, <16 x i16>* %16776, align 2, !tbaa !399
  %16778 = getelementptr inbounds i16, i16* %16774, i64 -16
  %16779 = bitcast i16* %16778 to <16 x i16>*
  %16780 = load <16 x i16>, <16 x i16>* %16779, align 2, !tbaa !399
  %16781 = shufflevector <16 x i16> %16777, <16 x i16> %16780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16782 = zext i32 %.pre-phi3586 to i64
  %16783 = mul nsw i64 %16782, %333
  %16784 = add nsw i64 %16783, %296
  %16785 = getelementptr inbounds i16, i16* %blur_x879, i64 %16784
  %16786 = getelementptr inbounds i16, i16* %16785, i64 -32
  %16787 = bitcast i16* %16786 to <16 x i16>*
  %16788 = load <16 x i16>, <16 x i16>* %16787, align 2, !tbaa !399
  %16789 = getelementptr inbounds i16, i16* %16785, i64 -16
  %16790 = bitcast i16* %16789 to <16 x i16>*
  %16791 = load <16 x i16>, <16 x i16>* %16790, align 2, !tbaa !399
  %16792 = shufflevector <16 x i16> %16788, <16 x i16> %16791, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16793 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16760, <32 x i16> %16771, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16794 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16792, <32 x i16> %16781, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16795 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16793, <32 x i16> %16794, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16796 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16795, <32 x i16> %16749, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16797 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16796, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16798 = shufflevector <32 x i16> %16797, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16799 = sext i32 %a379 to i64
  %16800 = add nsw i64 %16799, 1
  %16801 = mul nsw i64 %16800, %334
  %16802 = add nsw i64 %336, %16801
  %16803 = getelementptr inbounds i16, i16* %263, i64 %16802
  %16804 = getelementptr inbounds i16, i16* %16803, i64 -32
  %16805 = bitcast i16* %16804 to <16 x i16>*
  store <16 x i16> %16798, <16 x i16>* %16805, align 2, !tbaa !401
  %16806 = shufflevector <32 x i16> %16797, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16807 = getelementptr inbounds i16, i16* %16803, i64 -16
  %16808 = bitcast i16* %16807 to <16 x i16>*
  store <16 x i16> %16806, <16 x i16>* %16808, align 2, !tbaa !401
  br label %after_bb1042

"for blur_y.s0.x.x.rebased1057":                  ; preds = %"for blur_y.s0.x.x.rebased1057.preheader", %"consume blur_x1065"
  %indvars.iv3380 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1057.preheader" ], [ %indvars.iv.next3381, %"consume blur_x1065" ]
  %16809 = add nsw i64 %indvars.iv3380, %303
  %16810 = icmp slt i64 %16809, 1
  %16811 = trunc i64 %16809 to i32
  %16812 = shl nsw i32 %16811, 5
  %16813 = icmp sgt i32 %198, %16812
  %16814 = or i1 %16810, %16813
  br i1 %16814, label %"produce blur_x1063", label %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge"

"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1057"
  %.pre3593 = shl nsw i64 %16809, 5
  br label %"consume blur_x1065"

"end for blur_y.s0.x.x.rebased1058":              ; preds = %"consume blur_x1065", %after_bb1042
  br i1 %304, label %"for blur_y.s0.x.x.rebased1073.preheader", label %"end for blur_y.s0.x.x.rebased1074", !prof !386

"for blur_y.s0.x.x.rebased1073.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1058"
  %16815 = sext i32 %t17221053 to i64
  %16816 = zext i32 %.pre-phi3578 to i64
  %16817 = mul nsw i64 %16816, %337
  %16818 = sub nsw i64 %16817, %298
  %16819 = zext i32 %.pre-phi3574 to i64
  %16820 = mul nsw i64 %16819, %337
  %16821 = sub nsw i64 %16820, %298
  %16822 = zext i32 %.pre-phi3582 to i64
  %16823 = mul nsw i64 %16822, %337
  %16824 = sub nsw i64 %16823, %298
  %16825 = zext i32 %.pre-phi3592 to i64
  %16826 = mul nsw i64 %16825, %337
  %16827 = sub nsw i64 %16826, %298
  %16828 = zext i32 %.pre-phi3586 to i64
  %16829 = mul nsw i64 %16828, %337
  %16830 = sub nsw i64 %16829, %298
  %16831 = sext i32 %a379 to i64
  %16832 = add nsw i64 %16831, 1
  %16833 = mul nsw i64 %16832, %334
  %16834 = add nsw i64 %16833, %338
  br label %"for blur_y.s0.x.x.rebased1073"

"produce blur_x1063":                             ; preds = %"for blur_y.s0.x.x.rebased1057"
  %t7281064 = add nsw i32 %343, %16812
  %16835 = sext i32 %t7281064 to i64
  %16836 = getelementptr inbounds i16, i16* %read_input822, i64 %16835
  %16837 = getelementptr inbounds i16, i16* %16836, i64 1
  %16838 = bitcast i16* %16837 to <16 x i16>*
  %16839 = load <16 x i16>, <16 x i16>* %16838, align 2, !tbaa !396
  %16840 = getelementptr inbounds i16, i16* %16836, i64 17
  %16841 = bitcast i16* %16840 to <16 x i16>*
  %16842 = load <16 x i16>, <16 x i16>* %16841, align 2, !tbaa !396
  %16843 = shufflevector <16 x i16> %16839, <16 x i16> %16842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16844 = bitcast i16* %16836 to <16 x i16>*
  %16845 = load <16 x i16>, <16 x i16>* %16844, align 2, !tbaa !396
  %16846 = getelementptr inbounds i16, i16* %16836, i64 16
  %16847 = bitcast i16* %16846 to <16 x i16>*
  %16848 = load <16 x i16>, <16 x i16>* %16847, align 2, !tbaa !396
  %16849 = shufflevector <16 x i16> %16845, <16 x i16> %16848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16850 = getelementptr inbounds i16, i16* %16836, i64 2
  %16851 = bitcast i16* %16850 to <16 x i16>*
  %16852 = load <16 x i16>, <16 x i16>* %16851, align 2, !tbaa !396
  %16853 = getelementptr inbounds i16, i16* %16836, i64 18
  %16854 = bitcast i16* %16853 to <16 x i16>*
  %16855 = load <16 x i16>, <16 x i16>* %16854, align 2, !tbaa !396
  %16856 = shufflevector <16 x i16> %16852, <16 x i16> %16855, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16857 = getelementptr inbounds i16, i16* %16836, i64 4
  %16858 = bitcast i16* %16857 to <16 x i16>*
  %16859 = load <16 x i16>, <16 x i16>* %16858, align 2, !tbaa !396
  %16860 = getelementptr inbounds i16, i16* %16836, i64 20
  %16861 = bitcast i16* %16860 to <16 x i16>*
  %16862 = load <16 x i16>, <16 x i16>* %16861, align 2, !tbaa !396
  %16863 = shufflevector <16 x i16> %16859, <16 x i16> %16862, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16864 = getelementptr inbounds i16, i16* %16836, i64 3
  %16865 = bitcast i16* %16864 to <16 x i16>*
  %16866 = load <16 x i16>, <16 x i16>* %16865, align 2, !tbaa !396
  %16867 = getelementptr inbounds i16, i16* %16836, i64 19
  %16868 = bitcast i16* %16867 to <16 x i16>*
  %16869 = load <16 x i16>, <16 x i16>* %16868, align 2, !tbaa !396
  %16870 = shufflevector <16 x i16> %16866, <16 x i16> %16869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16871 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16849, <32 x i16> %16856, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16872 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16870, <32 x i16> %16863, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16873 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16871, <32 x i16> %16872, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16874 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16873, <32 x i16> %16843, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16875 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16874, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16876 = shufflevector <32 x i16> %16875, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16877 = shl nsw i64 %16809, 5
  %16878 = add nsw i64 %16877, %16666
  %16879 = getelementptr inbounds i16, i16* %blur_x879, i64 %16878
  %16880 = bitcast i16* %16879 to <16 x i16>*
  store <16 x i16> %16876, <16 x i16>* %16880, align 2, !tbaa !399
  %16881 = shufflevector <32 x i16> %16875, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16882 = getelementptr inbounds i16, i16* %16879, i64 16
  %16883 = bitcast i16* %16882 to <16 x i16>*
  store <16 x i16> %16881, <16 x i16>* %16883, align 2, !tbaa !399
  br label %"consume blur_x1065"

"consume blur_x1065":                             ; preds = %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge", %"produce blur_x1063"
  %.pre-phi3594 = phi i64 [ %.pre3593, %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge" ], [ %16877, %"produce blur_x1063" ]
  %16884 = add nsw i64 %16669, %.pre-phi3594
  %16885 = getelementptr inbounds i16, i16* %blur_x879, i64 %16884
  %16886 = bitcast i16* %16885 to <16 x i16>*
  %16887 = load <16 x i16>, <16 x i16>* %16886, align 2, !tbaa !399
  %16888 = getelementptr inbounds i16, i16* %16885, i64 16
  %16889 = bitcast i16* %16888 to <16 x i16>*
  %16890 = load <16 x i16>, <16 x i16>* %16889, align 2, !tbaa !399
  %16891 = shufflevector <16 x i16> %16887, <16 x i16> %16890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16892 = add nsw i64 %16672, %.pre-phi3594
  %16893 = getelementptr inbounds i16, i16* %blur_x879, i64 %16892
  %16894 = bitcast i16* %16893 to <16 x i16>*
  %16895 = load <16 x i16>, <16 x i16>* %16894, align 2, !tbaa !399
  %16896 = getelementptr inbounds i16, i16* %16893, i64 16
  %16897 = bitcast i16* %16896 to <16 x i16>*
  %16898 = load <16 x i16>, <16 x i16>* %16897, align 2, !tbaa !399
  %16899 = shufflevector <16 x i16> %16895, <16 x i16> %16898, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16900 = add nsw i64 %16675, %.pre-phi3594
  %16901 = getelementptr inbounds i16, i16* %blur_x879, i64 %16900
  %16902 = bitcast i16* %16901 to <16 x i16>*
  %16903 = load <16 x i16>, <16 x i16>* %16902, align 2, !tbaa !399
  %16904 = getelementptr inbounds i16, i16* %16901, i64 16
  %16905 = bitcast i16* %16904 to <16 x i16>*
  %16906 = load <16 x i16>, <16 x i16>* %16905, align 2, !tbaa !399
  %16907 = shufflevector <16 x i16> %16903, <16 x i16> %16906, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16908 = add nsw i64 %16678, %.pre-phi3594
  %16909 = getelementptr inbounds i16, i16* %blur_x879, i64 %16908
  %16910 = bitcast i16* %16909 to <16 x i16>*
  %16911 = load <16 x i16>, <16 x i16>* %16910, align 2, !tbaa !399
  %16912 = getelementptr inbounds i16, i16* %16909, i64 16
  %16913 = bitcast i16* %16912 to <16 x i16>*
  %16914 = load <16 x i16>, <16 x i16>* %16913, align 2, !tbaa !399
  %16915 = shufflevector <16 x i16> %16911, <16 x i16> %16914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16916 = add nsw i64 %16681, %.pre-phi3594
  %16917 = getelementptr inbounds i16, i16* %blur_x879, i64 %16916
  %16918 = bitcast i16* %16917 to <16 x i16>*
  %16919 = load <16 x i16>, <16 x i16>* %16918, align 2, !tbaa !399
  %16920 = getelementptr inbounds i16, i16* %16917, i64 16
  %16921 = bitcast i16* %16920 to <16 x i16>*
  %16922 = load <16 x i16>, <16 x i16>* %16921, align 2, !tbaa !399
  %16923 = shufflevector <16 x i16> %16919, <16 x i16> %16922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16924 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16899, <32 x i16> %16907, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16925 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16923, <32 x i16> %16915, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16926 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16924, <32 x i16> %16925, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16927 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16926, <32 x i16> %16891, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16928 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16927, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16929 = shufflevector <32 x i16> %16928, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16930 = add nsw i64 %16685, %.pre-phi3594
  %16931 = getelementptr inbounds i16, i16* %263, i64 %16930
  %16932 = bitcast i16* %16931 to <16 x i16>*
  store <16 x i16> %16929, <16 x i16>* %16932, align 2, !tbaa !401
  %16933 = shufflevector <32 x i16> %16928, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16934 = getelementptr inbounds i16, i16* %16931, i64 16
  %16935 = bitcast i16* %16934 to <16 x i16>*
  store <16 x i16> %16933, <16 x i16>* %16935, align 2, !tbaa !401
  %indvars.iv.next3381 = add nuw nsw i64 %indvars.iv3380, 1
  %16936 = icmp eq i64 %indvars.iv.next3381, %zext3382
  br i1 %16936, label %"end for blur_y.s0.x.x.rebased1058", label %"for blur_y.s0.x.x.rebased1057"

"for blur_y.s0.x.x.rebased1073":                  ; preds = %"for blur_y.s0.x.x.rebased1073.preheader", %"consume blur_x1084"
  %blur_y.s0.x.x.rebased1075 = phi i32 [ %17045, %"consume blur_x1084" ], [ 0, %"for blur_y.s0.x.x.rebased1073.preheader" ]
  %16937 = add nsw i32 %blur_y.s0.x.x.rebased1075, %t1626814
  %a1450 = shl nsw i32 %16937, 5
  %16938 = icmp sgt i32 %t1647, %a1450
  %blur_y.s0.x.v0.base.s1076 = select i1 %16938, i32 %a1450, i32 %t1647
  %16939 = icmp slt i32 %16937, 1
  %16940 = icmp sgt i32 %198, %a1450
  %16941 = or i1 %16939, %16940
  br i1 %16941, label %"produce blur_x1081", label %"consume blur_x1084"

"end for blur_y.s0.x.x.rebased1074":              ; preds = %"consume blur_x1084", %"end for blur_y.s0.x.x.rebased1058"
  br i1 %229, label %"produce blur_x1088", label %"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge"

"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1074"
  %.pre3595 = add nsw i32 %a379, 6
  %.pre3597 = and i32 %.pre3595, 7
  br label %after_bb1085

"produce blur_x1081":                             ; preds = %"for blur_y.s0.x.x.rebased1073"
  %16942 = icmp slt i32 %blur_y.s0.x.v0.base.s1076, %198
  %blur_x.s0.x.v1.base.s1082 = select i1 %16942, i32 %blur_y.s0.x.v0.base.s1076, i32 %198
  %t7331083 = add nsw i32 %343, %blur_x.s0.x.v1.base.s1082
  %16943 = sext i32 %t7331083 to i64
  %16944 = getelementptr inbounds i16, i16* %read_input822, i64 %16943
  %16945 = getelementptr inbounds i16, i16* %16944, i64 1
  %16946 = bitcast i16* %16945 to <16 x i16>*
  %16947 = load <16 x i16>, <16 x i16>* %16946, align 2, !tbaa !396
  %16948 = getelementptr inbounds i16, i16* %16944, i64 17
  %16949 = bitcast i16* %16948 to <16 x i16>*
  %16950 = load <16 x i16>, <16 x i16>* %16949, align 2, !tbaa !396
  %16951 = shufflevector <16 x i16> %16947, <16 x i16> %16950, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16952 = bitcast i16* %16944 to <16 x i16>*
  %16953 = load <16 x i16>, <16 x i16>* %16952, align 2, !tbaa !396
  %16954 = getelementptr inbounds i16, i16* %16944, i64 16
  %16955 = bitcast i16* %16954 to <16 x i16>*
  %16956 = load <16 x i16>, <16 x i16>* %16955, align 2, !tbaa !396
  %16957 = shufflevector <16 x i16> %16953, <16 x i16> %16956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16958 = getelementptr inbounds i16, i16* %16944, i64 2
  %16959 = bitcast i16* %16958 to <16 x i16>*
  %16960 = load <16 x i16>, <16 x i16>* %16959, align 2, !tbaa !396
  %16961 = getelementptr inbounds i16, i16* %16944, i64 18
  %16962 = bitcast i16* %16961 to <16 x i16>*
  %16963 = load <16 x i16>, <16 x i16>* %16962, align 2, !tbaa !396
  %16964 = shufflevector <16 x i16> %16960, <16 x i16> %16963, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16965 = getelementptr inbounds i16, i16* %16944, i64 4
  %16966 = bitcast i16* %16965 to <16 x i16>*
  %16967 = load <16 x i16>, <16 x i16>* %16966, align 2, !tbaa !396
  %16968 = getelementptr inbounds i16, i16* %16944, i64 20
  %16969 = bitcast i16* %16968 to <16 x i16>*
  %16970 = load <16 x i16>, <16 x i16>* %16969, align 2, !tbaa !396
  %16971 = shufflevector <16 x i16> %16967, <16 x i16> %16970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16972 = getelementptr inbounds i16, i16* %16944, i64 3
  %16973 = bitcast i16* %16972 to <16 x i16>*
  %16974 = load <16 x i16>, <16 x i16>* %16973, align 2, !tbaa !396
  %16975 = getelementptr inbounds i16, i16* %16944, i64 19
  %16976 = bitcast i16* %16975 to <16 x i16>*
  %16977 = load <16 x i16>, <16 x i16>* %16976, align 2, !tbaa !396
  %16978 = shufflevector <16 x i16> %16974, <16 x i16> %16977, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16979 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16957, <32 x i16> %16964, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16980 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16978, <32 x i16> %16971, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16981 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16979, <32 x i16> %16980, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16982 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16981, <32 x i16> %16951, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16983 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16982, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16984 = shufflevector <32 x i16> %16983, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16985 = sext i32 %blur_x.s0.x.v1.base.s1082 to i64
  %16986 = add nsw i64 %16985, %16815
  %16987 = getelementptr inbounds i16, i16* %blur_x879, i64 %16986
  %16988 = bitcast i16* %16987 to <16 x i16>*
  store <16 x i16> %16984, <16 x i16>* %16988, align 2, !tbaa !399
  %16989 = shufflevector <32 x i16> %16983, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16990 = getelementptr inbounds i16, i16* %16987, i64 16
  %16991 = bitcast i16* %16990 to <16 x i16>*
  store <16 x i16> %16989, <16 x i16>* %16991, align 2, !tbaa !399
  br label %"consume blur_x1084"

"consume blur_x1084":                             ; preds = %"for blur_y.s0.x.x.rebased1073", %"produce blur_x1081"
  %16992 = sext i32 %blur_y.s0.x.v0.base.s1076 to i64
  %16993 = add nsw i64 %16818, %16992
  %16994 = getelementptr inbounds i16, i16* %blur_x879, i64 %16993
  %16995 = bitcast i16* %16994 to <16 x i16>*
  %16996 = load <16 x i16>, <16 x i16>* %16995, align 2, !tbaa !399
  %16997 = getelementptr inbounds i16, i16* %16994, i64 16
  %16998 = bitcast i16* %16997 to <16 x i16>*
  %16999 = load <16 x i16>, <16 x i16>* %16998, align 2, !tbaa !399
  %17000 = shufflevector <16 x i16> %16996, <16 x i16> %16999, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17001 = add nsw i64 %16821, %16992
  %17002 = getelementptr inbounds i16, i16* %blur_x879, i64 %17001
  %17003 = bitcast i16* %17002 to <16 x i16>*
  %17004 = load <16 x i16>, <16 x i16>* %17003, align 2, !tbaa !399
  %17005 = getelementptr inbounds i16, i16* %17002, i64 16
  %17006 = bitcast i16* %17005 to <16 x i16>*
  %17007 = load <16 x i16>, <16 x i16>* %17006, align 2, !tbaa !399
  %17008 = shufflevector <16 x i16> %17004, <16 x i16> %17007, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17009 = add nsw i64 %16824, %16992
  %17010 = getelementptr inbounds i16, i16* %blur_x879, i64 %17009
  %17011 = bitcast i16* %17010 to <16 x i16>*
  %17012 = load <16 x i16>, <16 x i16>* %17011, align 2, !tbaa !399
  %17013 = getelementptr inbounds i16, i16* %17010, i64 16
  %17014 = bitcast i16* %17013 to <16 x i16>*
  %17015 = load <16 x i16>, <16 x i16>* %17014, align 2, !tbaa !399
  %17016 = shufflevector <16 x i16> %17012, <16 x i16> %17015, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17017 = add nsw i64 %16827, %16992
  %17018 = getelementptr inbounds i16, i16* %blur_x879, i64 %17017
  %17019 = bitcast i16* %17018 to <16 x i16>*
  %17020 = load <16 x i16>, <16 x i16>* %17019, align 2, !tbaa !399
  %17021 = getelementptr inbounds i16, i16* %17018, i64 16
  %17022 = bitcast i16* %17021 to <16 x i16>*
  %17023 = load <16 x i16>, <16 x i16>* %17022, align 2, !tbaa !399
  %17024 = shufflevector <16 x i16> %17020, <16 x i16> %17023, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17025 = add nsw i64 %16830, %16992
  %17026 = getelementptr inbounds i16, i16* %blur_x879, i64 %17025
  %17027 = bitcast i16* %17026 to <16 x i16>*
  %17028 = load <16 x i16>, <16 x i16>* %17027, align 2, !tbaa !399
  %17029 = getelementptr inbounds i16, i16* %17026, i64 16
  %17030 = bitcast i16* %17029 to <16 x i16>*
  %17031 = load <16 x i16>, <16 x i16>* %17030, align 2, !tbaa !399
  %17032 = shufflevector <16 x i16> %17028, <16 x i16> %17031, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17033 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17008, <32 x i16> %17016, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17034 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17032, <32 x i16> %17024, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17035 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17033, <32 x i16> %17034, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17036 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17035, <32 x i16> %17000, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17037 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17036, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17038 = shufflevector <32 x i16> %17037, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17039 = add nsw i64 %16834, %16992
  %17040 = getelementptr inbounds i16, i16* %263, i64 %17039
  %17041 = bitcast i16* %17040 to <16 x i16>*
  store <16 x i16> %17038, <16 x i16>* %17041, align 2, !tbaa !401
  %17042 = shufflevector <32 x i16> %17037, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17043 = getelementptr inbounds i16, i16* %17040, i64 16
  %17044 = bitcast i16* %17043 to <16 x i16>*
  store <16 x i16> %17042, <16 x i16>* %17044, align 2, !tbaa !401
  %17045 = add nuw nsw i32 %blur_y.s0.x.x.rebased1075, 1
  %.not2658 = icmp eq i32 %17045, %t1683898
  br i1 %.not2658, label %"end for blur_y.s0.x.x.rebased1074", label %"for blur_y.s0.x.x.rebased1073"

after_bb1085:                                     ; preds = %"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge", %"produce blur_x1088"
  %.pre-phi3598 = phi i32 [ %.pre3597, %"end for blur_y.s0.x.x.rebased1074.after_bb1085_crit_edge" ], [ %17110, %"produce blur_x1088" ]
  %17046 = mul nsw i32 %.pre-phi3598, %a551
  %t17381096 = sub nsw i32 %17046, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1100.preheader", label %"end for blur_y.s0.x.x.rebased1101", !prof !386

"for blur_y.s0.x.x.rebased1100.preheader":        ; preds = %after_bb1085
  %17047 = sext i32 %t17381096 to i64
  %17048 = zext i32 %.pre-phi3582 to i64
  %17049 = mul nsw i64 %17048, %337
  %17050 = sub nsw i64 %17049, %298
  %17051 = zext i32 %.pre-phi3578 to i64
  %17052 = mul nsw i64 %17051, %337
  %17053 = sub nsw i64 %17052, %298
  %17054 = zext i32 %.pre-phi3586 to i64
  %17055 = mul nsw i64 %17054, %337
  %17056 = sub nsw i64 %17055, %298
  %17057 = zext i32 %.pre-phi3598 to i64
  %17058 = mul nsw i64 %17057, %337
  %17059 = sub nsw i64 %17058, %298
  %17060 = zext i32 %.pre-phi3592 to i64
  %17061 = mul nsw i64 %17060, %337
  %17062 = sub nsw i64 %17061, %298
  %17063 = sext i32 %a379 to i64
  %17064 = add nsw i64 %17063, 2
  %17065 = mul nsw i64 %17064, %334
  %17066 = add nsw i64 %17065, %338
  br label %"for blur_y.s0.x.x.rebased1100"

"produce blur_x1088":                             ; preds = %"end for blur_y.s0.x.x.rebased1074"
  %17067 = getelementptr inbounds i16, i16* %read_input822, i64 %347
  %17068 = getelementptr inbounds i16, i16* %17067, i64 -31
  %17069 = bitcast i16* %17068 to <16 x i16>*
  %17070 = load <16 x i16>, <16 x i16>* %17069, align 2, !tbaa !396
  %17071 = getelementptr inbounds i16, i16* %17067, i64 -15
  %17072 = bitcast i16* %17071 to <16 x i16>*
  %17073 = load <16 x i16>, <16 x i16>* %17072, align 2, !tbaa !396
  %17074 = shufflevector <16 x i16> %17070, <16 x i16> %17073, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17075 = getelementptr inbounds i16, i16* %17067, i64 -32
  %17076 = bitcast i16* %17075 to <16 x i16>*
  %17077 = load <16 x i16>, <16 x i16>* %17076, align 2, !tbaa !396
  %17078 = getelementptr inbounds i16, i16* %17067, i64 -16
  %17079 = bitcast i16* %17078 to <16 x i16>*
  %17080 = load <16 x i16>, <16 x i16>* %17079, align 2, !tbaa !396
  %17081 = shufflevector <16 x i16> %17077, <16 x i16> %17080, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17082 = getelementptr inbounds i16, i16* %17067, i64 -30
  %17083 = bitcast i16* %17082 to <16 x i16>*
  %17084 = load <16 x i16>, <16 x i16>* %17083, align 2, !tbaa !396
  %17085 = getelementptr inbounds i16, i16* %17067, i64 -14
  %17086 = bitcast i16* %17085 to <16 x i16>*
  %17087 = load <16 x i16>, <16 x i16>* %17086, align 2, !tbaa !396
  %17088 = shufflevector <16 x i16> %17084, <16 x i16> %17087, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17089 = getelementptr inbounds i16, i16* %17067, i64 -28
  %17090 = bitcast i16* %17089 to <16 x i16>*
  %17091 = load <16 x i16>, <16 x i16>* %17090, align 2, !tbaa !396
  %17092 = getelementptr inbounds i16, i16* %17067, i64 -12
  %17093 = bitcast i16* %17092 to <16 x i16>*
  %17094 = load <16 x i16>, <16 x i16>* %17093, align 2, !tbaa !396
  %17095 = shufflevector <16 x i16> %17091, <16 x i16> %17094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17096 = getelementptr inbounds i16, i16* %17067, i64 -29
  %17097 = bitcast i16* %17096 to <16 x i16>*
  %17098 = load <16 x i16>, <16 x i16>* %17097, align 2, !tbaa !396
  %17099 = getelementptr inbounds i16, i16* %17067, i64 -13
  %17100 = bitcast i16* %17099 to <16 x i16>*
  %17101 = load <16 x i16>, <16 x i16>* %17100, align 2, !tbaa !396
  %17102 = shufflevector <16 x i16> %17098, <16 x i16> %17101, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17103 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17081, <32 x i16> %17088, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17104 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17102, <32 x i16> %17095, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17105 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17103, <32 x i16> %17104, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17106 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17105, <32 x i16> %17074, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17107 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17106, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17108 = shufflevector <32 x i16> %17107, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17109 = add nsw i32 %a379, 6
  %17110 = and i32 %17109, 7
  %17111 = zext i32 %17110 to i64
  %17112 = mul nsw i64 %299, %17111
  %17113 = add nsw i64 %301, %17112
  %17114 = getelementptr inbounds i16, i16* %blur_x879, i64 %17113
  %17115 = getelementptr inbounds i16, i16* %17114, i64 -32
  %17116 = bitcast i16* %17115 to <16 x i16>*
  store <16 x i16> %17108, <16 x i16>* %17116, align 2, !tbaa !399
  %17117 = shufflevector <32 x i16> %17107, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17118 = getelementptr inbounds i16, i16* %17114, i64 -16
  %17119 = bitcast i16* %17118 to <16 x i16>*
  store <16 x i16> %17117, <16 x i16>* %17119, align 2, !tbaa !399
  %17120 = zext i32 %.pre-phi3582 to i64
  %17121 = mul nsw i64 %17120, %333
  %17122 = add nsw i64 %17121, %296
  %17123 = getelementptr inbounds i16, i16* %blur_x879, i64 %17122
  %17124 = getelementptr inbounds i16, i16* %17123, i64 -32
  %17125 = bitcast i16* %17124 to <16 x i16>*
  %17126 = load <16 x i16>, <16 x i16>* %17125, align 2, !tbaa !399
  %17127 = getelementptr inbounds i16, i16* %17123, i64 -16
  %17128 = bitcast i16* %17127 to <16 x i16>*
  %17129 = load <16 x i16>, <16 x i16>* %17128, align 2, !tbaa !399
  %17130 = shufflevector <16 x i16> %17126, <16 x i16> %17129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17131 = zext i32 %.pre-phi3578 to i64
  %17132 = mul nsw i64 %17131, %333
  %17133 = add nsw i64 %17132, %296
  %17134 = getelementptr inbounds i16, i16* %blur_x879, i64 %17133
  %17135 = getelementptr inbounds i16, i16* %17134, i64 -32
  %17136 = bitcast i16* %17135 to <16 x i16>*
  %17137 = load <16 x i16>, <16 x i16>* %17136, align 2, !tbaa !399
  %17138 = getelementptr inbounds i16, i16* %17134, i64 -16
  %17139 = bitcast i16* %17138 to <16 x i16>*
  %17140 = load <16 x i16>, <16 x i16>* %17139, align 2, !tbaa !399
  %17141 = shufflevector <16 x i16> %17137, <16 x i16> %17140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17142 = zext i32 %.pre-phi3586 to i64
  %17143 = mul nsw i64 %17142, %333
  %17144 = add nsw i64 %17143, %296
  %17145 = getelementptr inbounds i16, i16* %blur_x879, i64 %17144
  %17146 = getelementptr inbounds i16, i16* %17145, i64 -32
  %17147 = bitcast i16* %17146 to <16 x i16>*
  %17148 = load <16 x i16>, <16 x i16>* %17147, align 2, !tbaa !399
  %17149 = getelementptr inbounds i16, i16* %17145, i64 -16
  %17150 = bitcast i16* %17149 to <16 x i16>*
  %17151 = load <16 x i16>, <16 x i16>* %17150, align 2, !tbaa !399
  %17152 = shufflevector <16 x i16> %17148, <16 x i16> %17151, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17153 = mul nsw i64 %17111, %333
  %17154 = add nsw i64 %17153, %296
  %17155 = getelementptr inbounds i16, i16* %blur_x879, i64 %17154
  %17156 = getelementptr inbounds i16, i16* %17155, i64 -32
  %17157 = bitcast i16* %17156 to <16 x i16>*
  %17158 = load <16 x i16>, <16 x i16>* %17157, align 2, !tbaa !399
  %17159 = getelementptr inbounds i16, i16* %17155, i64 -16
  %17160 = bitcast i16* %17159 to <16 x i16>*
  %17161 = load <16 x i16>, <16 x i16>* %17160, align 2, !tbaa !399
  %17162 = shufflevector <16 x i16> %17158, <16 x i16> %17161, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17163 = zext i32 %.pre-phi3592 to i64
  %17164 = mul nsw i64 %17163, %333
  %17165 = add nsw i64 %17164, %296
  %17166 = getelementptr inbounds i16, i16* %blur_x879, i64 %17165
  %17167 = getelementptr inbounds i16, i16* %17166, i64 -32
  %17168 = bitcast i16* %17167 to <16 x i16>*
  %17169 = load <16 x i16>, <16 x i16>* %17168, align 2, !tbaa !399
  %17170 = getelementptr inbounds i16, i16* %17166, i64 -16
  %17171 = bitcast i16* %17170 to <16 x i16>*
  %17172 = load <16 x i16>, <16 x i16>* %17171, align 2, !tbaa !399
  %17173 = shufflevector <16 x i16> %17169, <16 x i16> %17172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17174 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17141, <32 x i16> %17152, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17175 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17173, <32 x i16> %17162, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17176 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17174, <32 x i16> %17175, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17177 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17176, <32 x i16> %17130, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17178 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17177, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17179 = shufflevector <32 x i16> %17178, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17180 = sext i32 %a379 to i64
  %17181 = add nsw i64 %17180, 2
  %17182 = mul nsw i64 %17181, %334
  %17183 = add nsw i64 %336, %17182
  %17184 = getelementptr inbounds i16, i16* %263, i64 %17183
  %17185 = getelementptr inbounds i16, i16* %17184, i64 -32
  %17186 = bitcast i16* %17185 to <16 x i16>*
  store <16 x i16> %17179, <16 x i16>* %17186, align 2, !tbaa !401
  %17187 = shufflevector <32 x i16> %17178, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17188 = getelementptr inbounds i16, i16* %17184, i64 -16
  %17189 = bitcast i16* %17188 to <16 x i16>*
  store <16 x i16> %17187, <16 x i16>* %17189, align 2, !tbaa !401
  br label %after_bb1085

"for blur_y.s0.x.x.rebased1100":                  ; preds = %"for blur_y.s0.x.x.rebased1100.preheader", %"consume blur_x1108"
  %indvars.iv3383 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1100.preheader" ], [ %indvars.iv.next3384, %"consume blur_x1108" ]
  %17190 = add nsw i64 %indvars.iv3383, %303
  %17191 = icmp slt i64 %17190, 1
  %17192 = trunc i64 %17190 to i32
  %17193 = shl nsw i32 %17192, 5
  %17194 = icmp sgt i32 %198, %17193
  %17195 = or i1 %17191, %17194
  br i1 %17195, label %"produce blur_x1106", label %"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge"

"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1100"
  %.pre3599 = shl nsw i64 %17190, 5
  br label %"consume blur_x1108"

"end for blur_y.s0.x.x.rebased1101":              ; preds = %"consume blur_x1108", %after_bb1085
  br i1 %304, label %"for blur_y.s0.x.x.rebased1116.preheader", label %"end for blur_y.s0.x.x.rebased1117", !prof !386

"for blur_y.s0.x.x.rebased1116.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1101"
  %17196 = sext i32 %t17381096 to i64
  %17197 = zext i32 %.pre-phi3582 to i64
  %17198 = mul nsw i64 %17197, %337
  %17199 = sub nsw i64 %17198, %298
  %17200 = zext i32 %.pre-phi3578 to i64
  %17201 = mul nsw i64 %17200, %337
  %17202 = sub nsw i64 %17201, %298
  %17203 = zext i32 %.pre-phi3586 to i64
  %17204 = mul nsw i64 %17203, %337
  %17205 = sub nsw i64 %17204, %298
  %17206 = zext i32 %.pre-phi3598 to i64
  %17207 = mul nsw i64 %17206, %337
  %17208 = sub nsw i64 %17207, %298
  %17209 = zext i32 %.pre-phi3592 to i64
  %17210 = mul nsw i64 %17209, %337
  %17211 = sub nsw i64 %17210, %298
  %17212 = sext i32 %a379 to i64
  %17213 = add nsw i64 %17212, 2
  %17214 = mul nsw i64 %17213, %334
  %17215 = add nsw i64 %17214, %338
  br label %"for blur_y.s0.x.x.rebased1116"

"produce blur_x1106":                             ; preds = %"for blur_y.s0.x.x.rebased1100"
  %t7441107 = add nsw i32 %349, %17193
  %17216 = sext i32 %t7441107 to i64
  %17217 = getelementptr inbounds i16, i16* %read_input822, i64 %17216
  %17218 = getelementptr inbounds i16, i16* %17217, i64 1
  %17219 = bitcast i16* %17218 to <16 x i16>*
  %17220 = load <16 x i16>, <16 x i16>* %17219, align 2, !tbaa !396
  %17221 = getelementptr inbounds i16, i16* %17217, i64 17
  %17222 = bitcast i16* %17221 to <16 x i16>*
  %17223 = load <16 x i16>, <16 x i16>* %17222, align 2, !tbaa !396
  %17224 = shufflevector <16 x i16> %17220, <16 x i16> %17223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17225 = bitcast i16* %17217 to <16 x i16>*
  %17226 = load <16 x i16>, <16 x i16>* %17225, align 2, !tbaa !396
  %17227 = getelementptr inbounds i16, i16* %17217, i64 16
  %17228 = bitcast i16* %17227 to <16 x i16>*
  %17229 = load <16 x i16>, <16 x i16>* %17228, align 2, !tbaa !396
  %17230 = shufflevector <16 x i16> %17226, <16 x i16> %17229, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17231 = getelementptr inbounds i16, i16* %17217, i64 2
  %17232 = bitcast i16* %17231 to <16 x i16>*
  %17233 = load <16 x i16>, <16 x i16>* %17232, align 2, !tbaa !396
  %17234 = getelementptr inbounds i16, i16* %17217, i64 18
  %17235 = bitcast i16* %17234 to <16 x i16>*
  %17236 = load <16 x i16>, <16 x i16>* %17235, align 2, !tbaa !396
  %17237 = shufflevector <16 x i16> %17233, <16 x i16> %17236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17238 = getelementptr inbounds i16, i16* %17217, i64 4
  %17239 = bitcast i16* %17238 to <16 x i16>*
  %17240 = load <16 x i16>, <16 x i16>* %17239, align 2, !tbaa !396
  %17241 = getelementptr inbounds i16, i16* %17217, i64 20
  %17242 = bitcast i16* %17241 to <16 x i16>*
  %17243 = load <16 x i16>, <16 x i16>* %17242, align 2, !tbaa !396
  %17244 = shufflevector <16 x i16> %17240, <16 x i16> %17243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17245 = getelementptr inbounds i16, i16* %17217, i64 3
  %17246 = bitcast i16* %17245 to <16 x i16>*
  %17247 = load <16 x i16>, <16 x i16>* %17246, align 2, !tbaa !396
  %17248 = getelementptr inbounds i16, i16* %17217, i64 19
  %17249 = bitcast i16* %17248 to <16 x i16>*
  %17250 = load <16 x i16>, <16 x i16>* %17249, align 2, !tbaa !396
  %17251 = shufflevector <16 x i16> %17247, <16 x i16> %17250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17252 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17230, <32 x i16> %17237, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17253 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17251, <32 x i16> %17244, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17254 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17252, <32 x i16> %17253, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17255 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17254, <32 x i16> %17224, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17256 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17255, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17257 = shufflevector <32 x i16> %17256, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17258 = shl nsw i64 %17190, 5
  %17259 = add nsw i64 %17258, %17047
  %17260 = getelementptr inbounds i16, i16* %blur_x879, i64 %17259
  %17261 = bitcast i16* %17260 to <16 x i16>*
  store <16 x i16> %17257, <16 x i16>* %17261, align 2, !tbaa !399
  %17262 = shufflevector <32 x i16> %17256, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17263 = getelementptr inbounds i16, i16* %17260, i64 16
  %17264 = bitcast i16* %17263 to <16 x i16>*
  store <16 x i16> %17262, <16 x i16>* %17264, align 2, !tbaa !399
  br label %"consume blur_x1108"

"consume blur_x1108":                             ; preds = %"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge", %"produce blur_x1106"
  %.pre-phi3600 = phi i64 [ %.pre3599, %"for blur_y.s0.x.x.rebased1100.consume blur_x1108_crit_edge" ], [ %17258, %"produce blur_x1106" ]
  %17265 = add nsw i64 %17050, %.pre-phi3600
  %17266 = getelementptr inbounds i16, i16* %blur_x879, i64 %17265
  %17267 = bitcast i16* %17266 to <16 x i16>*
  %17268 = load <16 x i16>, <16 x i16>* %17267, align 2, !tbaa !399
  %17269 = getelementptr inbounds i16, i16* %17266, i64 16
  %17270 = bitcast i16* %17269 to <16 x i16>*
  %17271 = load <16 x i16>, <16 x i16>* %17270, align 2, !tbaa !399
  %17272 = shufflevector <16 x i16> %17268, <16 x i16> %17271, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17273 = add nsw i64 %17053, %.pre-phi3600
  %17274 = getelementptr inbounds i16, i16* %blur_x879, i64 %17273
  %17275 = bitcast i16* %17274 to <16 x i16>*
  %17276 = load <16 x i16>, <16 x i16>* %17275, align 2, !tbaa !399
  %17277 = getelementptr inbounds i16, i16* %17274, i64 16
  %17278 = bitcast i16* %17277 to <16 x i16>*
  %17279 = load <16 x i16>, <16 x i16>* %17278, align 2, !tbaa !399
  %17280 = shufflevector <16 x i16> %17276, <16 x i16> %17279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17281 = add nsw i64 %17056, %.pre-phi3600
  %17282 = getelementptr inbounds i16, i16* %blur_x879, i64 %17281
  %17283 = bitcast i16* %17282 to <16 x i16>*
  %17284 = load <16 x i16>, <16 x i16>* %17283, align 2, !tbaa !399
  %17285 = getelementptr inbounds i16, i16* %17282, i64 16
  %17286 = bitcast i16* %17285 to <16 x i16>*
  %17287 = load <16 x i16>, <16 x i16>* %17286, align 2, !tbaa !399
  %17288 = shufflevector <16 x i16> %17284, <16 x i16> %17287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17289 = add nsw i64 %17059, %.pre-phi3600
  %17290 = getelementptr inbounds i16, i16* %blur_x879, i64 %17289
  %17291 = bitcast i16* %17290 to <16 x i16>*
  %17292 = load <16 x i16>, <16 x i16>* %17291, align 2, !tbaa !399
  %17293 = getelementptr inbounds i16, i16* %17290, i64 16
  %17294 = bitcast i16* %17293 to <16 x i16>*
  %17295 = load <16 x i16>, <16 x i16>* %17294, align 2, !tbaa !399
  %17296 = shufflevector <16 x i16> %17292, <16 x i16> %17295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17297 = add nsw i64 %17062, %.pre-phi3600
  %17298 = getelementptr inbounds i16, i16* %blur_x879, i64 %17297
  %17299 = bitcast i16* %17298 to <16 x i16>*
  %17300 = load <16 x i16>, <16 x i16>* %17299, align 2, !tbaa !399
  %17301 = getelementptr inbounds i16, i16* %17298, i64 16
  %17302 = bitcast i16* %17301 to <16 x i16>*
  %17303 = load <16 x i16>, <16 x i16>* %17302, align 2, !tbaa !399
  %17304 = shufflevector <16 x i16> %17300, <16 x i16> %17303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17305 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17280, <32 x i16> %17288, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17306 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17304, <32 x i16> %17296, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17307 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17305, <32 x i16> %17306, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17308 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17307, <32 x i16> %17272, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17309 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17308, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17310 = shufflevector <32 x i16> %17309, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17311 = add nsw i64 %17066, %.pre-phi3600
  %17312 = getelementptr inbounds i16, i16* %263, i64 %17311
  %17313 = bitcast i16* %17312 to <16 x i16>*
  store <16 x i16> %17310, <16 x i16>* %17313, align 2, !tbaa !401
  %17314 = shufflevector <32 x i16> %17309, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17315 = getelementptr inbounds i16, i16* %17312, i64 16
  %17316 = bitcast i16* %17315 to <16 x i16>*
  store <16 x i16> %17314, <16 x i16>* %17316, align 2, !tbaa !401
  %indvars.iv.next3384 = add nuw nsw i64 %indvars.iv3383, 1
  %17317 = icmp eq i64 %indvars.iv.next3384, %zext3385
  br i1 %17317, label %"end for blur_y.s0.x.x.rebased1101", label %"for blur_y.s0.x.x.rebased1100"

"for blur_y.s0.x.x.rebased1116":                  ; preds = %"for blur_y.s0.x.x.rebased1116.preheader", %"consume blur_x1127"
  %blur_y.s0.x.x.rebased1118 = phi i32 [ %17426, %"consume blur_x1127" ], [ 0, %"for blur_y.s0.x.x.rebased1116.preheader" ]
  %17318 = add nsw i32 %blur_y.s0.x.x.rebased1118, %t1626814
  %a1623 = shl nsw i32 %17318, 5
  %17319 = icmp sgt i32 %t1647, %a1623
  %blur_y.s0.x.v0.base.s1119 = select i1 %17319, i32 %a1623, i32 %t1647
  %17320 = icmp slt i32 %17318, 1
  %17321 = icmp sgt i32 %198, %a1623
  %17322 = or i1 %17320, %17321
  br i1 %17322, label %"produce blur_x1124", label %"consume blur_x1127"

"end for blur_y.s0.x.x.rebased1117":              ; preds = %"consume blur_x1127", %"end for blur_y.s0.x.x.rebased1101"
  br i1 %229, label %"produce blur_x1131", label %"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge"

"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1117"
  %.pre3601 = add nsw i32 %a379, 7
  %.pre3603 = and i32 %.pre3601, 7
  br label %after_bb1128

"produce blur_x1124":                             ; preds = %"for blur_y.s0.x.x.rebased1116"
  %17323 = icmp slt i32 %blur_y.s0.x.v0.base.s1119, %198
  %blur_x.s0.x.v1.base.s1125 = select i1 %17323, i32 %blur_y.s0.x.v0.base.s1119, i32 %198
  %t7491126 = add nsw i32 %349, %blur_x.s0.x.v1.base.s1125
  %17324 = sext i32 %t7491126 to i64
  %17325 = getelementptr inbounds i16, i16* %read_input822, i64 %17324
  %17326 = getelementptr inbounds i16, i16* %17325, i64 1
  %17327 = bitcast i16* %17326 to <16 x i16>*
  %17328 = load <16 x i16>, <16 x i16>* %17327, align 2, !tbaa !396
  %17329 = getelementptr inbounds i16, i16* %17325, i64 17
  %17330 = bitcast i16* %17329 to <16 x i16>*
  %17331 = load <16 x i16>, <16 x i16>* %17330, align 2, !tbaa !396
  %17332 = shufflevector <16 x i16> %17328, <16 x i16> %17331, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17333 = bitcast i16* %17325 to <16 x i16>*
  %17334 = load <16 x i16>, <16 x i16>* %17333, align 2, !tbaa !396
  %17335 = getelementptr inbounds i16, i16* %17325, i64 16
  %17336 = bitcast i16* %17335 to <16 x i16>*
  %17337 = load <16 x i16>, <16 x i16>* %17336, align 2, !tbaa !396
  %17338 = shufflevector <16 x i16> %17334, <16 x i16> %17337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17339 = getelementptr inbounds i16, i16* %17325, i64 2
  %17340 = bitcast i16* %17339 to <16 x i16>*
  %17341 = load <16 x i16>, <16 x i16>* %17340, align 2, !tbaa !396
  %17342 = getelementptr inbounds i16, i16* %17325, i64 18
  %17343 = bitcast i16* %17342 to <16 x i16>*
  %17344 = load <16 x i16>, <16 x i16>* %17343, align 2, !tbaa !396
  %17345 = shufflevector <16 x i16> %17341, <16 x i16> %17344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17346 = getelementptr inbounds i16, i16* %17325, i64 4
  %17347 = bitcast i16* %17346 to <16 x i16>*
  %17348 = load <16 x i16>, <16 x i16>* %17347, align 2, !tbaa !396
  %17349 = getelementptr inbounds i16, i16* %17325, i64 20
  %17350 = bitcast i16* %17349 to <16 x i16>*
  %17351 = load <16 x i16>, <16 x i16>* %17350, align 2, !tbaa !396
  %17352 = shufflevector <16 x i16> %17348, <16 x i16> %17351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17353 = getelementptr inbounds i16, i16* %17325, i64 3
  %17354 = bitcast i16* %17353 to <16 x i16>*
  %17355 = load <16 x i16>, <16 x i16>* %17354, align 2, !tbaa !396
  %17356 = getelementptr inbounds i16, i16* %17325, i64 19
  %17357 = bitcast i16* %17356 to <16 x i16>*
  %17358 = load <16 x i16>, <16 x i16>* %17357, align 2, !tbaa !396
  %17359 = shufflevector <16 x i16> %17355, <16 x i16> %17358, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17360 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17338, <32 x i16> %17345, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17361 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17359, <32 x i16> %17352, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17362 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17360, <32 x i16> %17361, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17363 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17362, <32 x i16> %17332, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17364 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17363, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17365 = shufflevector <32 x i16> %17364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17366 = sext i32 %blur_x.s0.x.v1.base.s1125 to i64
  %17367 = add nsw i64 %17366, %17196
  %17368 = getelementptr inbounds i16, i16* %blur_x879, i64 %17367
  %17369 = bitcast i16* %17368 to <16 x i16>*
  store <16 x i16> %17365, <16 x i16>* %17369, align 2, !tbaa !399
  %17370 = shufflevector <32 x i16> %17364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17371 = getelementptr inbounds i16, i16* %17368, i64 16
  %17372 = bitcast i16* %17371 to <16 x i16>*
  store <16 x i16> %17370, <16 x i16>* %17372, align 2, !tbaa !399
  br label %"consume blur_x1127"

"consume blur_x1127":                             ; preds = %"for blur_y.s0.x.x.rebased1116", %"produce blur_x1124"
  %17373 = sext i32 %blur_y.s0.x.v0.base.s1119 to i64
  %17374 = add nsw i64 %17199, %17373
  %17375 = getelementptr inbounds i16, i16* %blur_x879, i64 %17374
  %17376 = bitcast i16* %17375 to <16 x i16>*
  %17377 = load <16 x i16>, <16 x i16>* %17376, align 2, !tbaa !399
  %17378 = getelementptr inbounds i16, i16* %17375, i64 16
  %17379 = bitcast i16* %17378 to <16 x i16>*
  %17380 = load <16 x i16>, <16 x i16>* %17379, align 2, !tbaa !399
  %17381 = shufflevector <16 x i16> %17377, <16 x i16> %17380, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17382 = add nsw i64 %17202, %17373
  %17383 = getelementptr inbounds i16, i16* %blur_x879, i64 %17382
  %17384 = bitcast i16* %17383 to <16 x i16>*
  %17385 = load <16 x i16>, <16 x i16>* %17384, align 2, !tbaa !399
  %17386 = getelementptr inbounds i16, i16* %17383, i64 16
  %17387 = bitcast i16* %17386 to <16 x i16>*
  %17388 = load <16 x i16>, <16 x i16>* %17387, align 2, !tbaa !399
  %17389 = shufflevector <16 x i16> %17385, <16 x i16> %17388, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17390 = add nsw i64 %17205, %17373
  %17391 = getelementptr inbounds i16, i16* %blur_x879, i64 %17390
  %17392 = bitcast i16* %17391 to <16 x i16>*
  %17393 = load <16 x i16>, <16 x i16>* %17392, align 2, !tbaa !399
  %17394 = getelementptr inbounds i16, i16* %17391, i64 16
  %17395 = bitcast i16* %17394 to <16 x i16>*
  %17396 = load <16 x i16>, <16 x i16>* %17395, align 2, !tbaa !399
  %17397 = shufflevector <16 x i16> %17393, <16 x i16> %17396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17398 = add nsw i64 %17208, %17373
  %17399 = getelementptr inbounds i16, i16* %blur_x879, i64 %17398
  %17400 = bitcast i16* %17399 to <16 x i16>*
  %17401 = load <16 x i16>, <16 x i16>* %17400, align 2, !tbaa !399
  %17402 = getelementptr inbounds i16, i16* %17399, i64 16
  %17403 = bitcast i16* %17402 to <16 x i16>*
  %17404 = load <16 x i16>, <16 x i16>* %17403, align 2, !tbaa !399
  %17405 = shufflevector <16 x i16> %17401, <16 x i16> %17404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17406 = add nsw i64 %17211, %17373
  %17407 = getelementptr inbounds i16, i16* %blur_x879, i64 %17406
  %17408 = bitcast i16* %17407 to <16 x i16>*
  %17409 = load <16 x i16>, <16 x i16>* %17408, align 2, !tbaa !399
  %17410 = getelementptr inbounds i16, i16* %17407, i64 16
  %17411 = bitcast i16* %17410 to <16 x i16>*
  %17412 = load <16 x i16>, <16 x i16>* %17411, align 2, !tbaa !399
  %17413 = shufflevector <16 x i16> %17409, <16 x i16> %17412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17414 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17389, <32 x i16> %17397, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17415 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17413, <32 x i16> %17405, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17416 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17414, <32 x i16> %17415, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17417 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17416, <32 x i16> %17381, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17418 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17417, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17419 = shufflevector <32 x i16> %17418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17420 = add nsw i64 %17215, %17373
  %17421 = getelementptr inbounds i16, i16* %263, i64 %17420
  %17422 = bitcast i16* %17421 to <16 x i16>*
  store <16 x i16> %17419, <16 x i16>* %17422, align 2, !tbaa !401
  %17423 = shufflevector <32 x i16> %17418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17424 = getelementptr inbounds i16, i16* %17421, i64 16
  %17425 = bitcast i16* %17424 to <16 x i16>*
  store <16 x i16> %17423, <16 x i16>* %17425, align 2, !tbaa !401
  %17426 = add nuw nsw i32 %blur_y.s0.x.x.rebased1118, 1
  %.not2654 = icmp eq i32 %17426, %t1683898
  br i1 %.not2654, label %"end for blur_y.s0.x.x.rebased1117", label %"for blur_y.s0.x.x.rebased1116"

after_bb1128:                                     ; preds = %"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge", %"produce blur_x1131"
  %.pre-phi3604 = phi i32 [ %.pre3603, %"end for blur_y.s0.x.x.rebased1117.after_bb1128_crit_edge" ], [ %17491, %"produce blur_x1131" ]
  %17427 = mul nsw i32 %.pre-phi3604, %a551
  %t17541139 = sub nsw i32 %17427, %t1645811
  br i1 %302, label %"for blur_y.s0.x.x.rebased1143.preheader", label %"end for blur_y.s0.x.x.rebased1144", !prof !386

"for blur_y.s0.x.x.rebased1143.preheader":        ; preds = %after_bb1128
  %17428 = sext i32 %t17541139 to i64
  %17429 = zext i32 %.pre-phi3586 to i64
  %17430 = mul nsw i64 %17429, %337
  %17431 = sub nsw i64 %17430, %298
  %17432 = zext i32 %.pre-phi3582 to i64
  %17433 = mul nsw i64 %17432, %337
  %17434 = sub nsw i64 %17433, %298
  %17435 = zext i32 %.pre-phi3592 to i64
  %17436 = mul nsw i64 %17435, %337
  %17437 = sub nsw i64 %17436, %298
  %17438 = zext i32 %.pre-phi3604 to i64
  %17439 = mul nsw i64 %17438, %337
  %17440 = sub nsw i64 %17439, %298
  %17441 = zext i32 %.pre-phi3598 to i64
  %17442 = mul nsw i64 %17441, %337
  %17443 = sub nsw i64 %17442, %298
  %17444 = sext i32 %a379 to i64
  %17445 = add nsw i64 %17444, 3
  %17446 = mul nsw i64 %17445, %334
  %17447 = add nsw i64 %17446, %338
  br label %"for blur_y.s0.x.x.rebased1143"

"produce blur_x1131":                             ; preds = %"end for blur_y.s0.x.x.rebased1117"
  %17448 = getelementptr inbounds i16, i16* %read_input822, i64 %353
  %17449 = getelementptr inbounds i16, i16* %17448, i64 -31
  %17450 = bitcast i16* %17449 to <16 x i16>*
  %17451 = load <16 x i16>, <16 x i16>* %17450, align 2, !tbaa !396
  %17452 = getelementptr inbounds i16, i16* %17448, i64 -15
  %17453 = bitcast i16* %17452 to <16 x i16>*
  %17454 = load <16 x i16>, <16 x i16>* %17453, align 2, !tbaa !396
  %17455 = shufflevector <16 x i16> %17451, <16 x i16> %17454, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17456 = getelementptr inbounds i16, i16* %17448, i64 -32
  %17457 = bitcast i16* %17456 to <16 x i16>*
  %17458 = load <16 x i16>, <16 x i16>* %17457, align 2, !tbaa !396
  %17459 = getelementptr inbounds i16, i16* %17448, i64 -16
  %17460 = bitcast i16* %17459 to <16 x i16>*
  %17461 = load <16 x i16>, <16 x i16>* %17460, align 2, !tbaa !396
  %17462 = shufflevector <16 x i16> %17458, <16 x i16> %17461, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17463 = getelementptr inbounds i16, i16* %17448, i64 -30
  %17464 = bitcast i16* %17463 to <16 x i16>*
  %17465 = load <16 x i16>, <16 x i16>* %17464, align 2, !tbaa !396
  %17466 = getelementptr inbounds i16, i16* %17448, i64 -14
  %17467 = bitcast i16* %17466 to <16 x i16>*
  %17468 = load <16 x i16>, <16 x i16>* %17467, align 2, !tbaa !396
  %17469 = shufflevector <16 x i16> %17465, <16 x i16> %17468, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17470 = getelementptr inbounds i16, i16* %17448, i64 -28
  %17471 = bitcast i16* %17470 to <16 x i16>*
  %17472 = load <16 x i16>, <16 x i16>* %17471, align 2, !tbaa !396
  %17473 = getelementptr inbounds i16, i16* %17448, i64 -12
  %17474 = bitcast i16* %17473 to <16 x i16>*
  %17475 = load <16 x i16>, <16 x i16>* %17474, align 2, !tbaa !396
  %17476 = shufflevector <16 x i16> %17472, <16 x i16> %17475, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17477 = getelementptr inbounds i16, i16* %17448, i64 -29
  %17478 = bitcast i16* %17477 to <16 x i16>*
  %17479 = load <16 x i16>, <16 x i16>* %17478, align 2, !tbaa !396
  %17480 = getelementptr inbounds i16, i16* %17448, i64 -13
  %17481 = bitcast i16* %17480 to <16 x i16>*
  %17482 = load <16 x i16>, <16 x i16>* %17481, align 2, !tbaa !396
  %17483 = shufflevector <16 x i16> %17479, <16 x i16> %17482, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17484 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17462, <32 x i16> %17469, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17485 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17483, <32 x i16> %17476, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17486 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17484, <32 x i16> %17485, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17487 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17486, <32 x i16> %17455, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17488 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17487, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17489 = shufflevector <32 x i16> %17488, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17490 = add nsw i32 %a379, 7
  %17491 = and i32 %17490, 7
  %17492 = zext i32 %17491 to i64
  %17493 = mul nsw i64 %299, %17492
  %17494 = add nsw i64 %301, %17493
  %17495 = getelementptr inbounds i16, i16* %blur_x879, i64 %17494
  %17496 = getelementptr inbounds i16, i16* %17495, i64 -32
  %17497 = bitcast i16* %17496 to <16 x i16>*
  store <16 x i16> %17489, <16 x i16>* %17497, align 2, !tbaa !399
  %17498 = shufflevector <32 x i16> %17488, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17499 = getelementptr inbounds i16, i16* %17495, i64 -16
  %17500 = bitcast i16* %17499 to <16 x i16>*
  store <16 x i16> %17498, <16 x i16>* %17500, align 2, !tbaa !399
  %17501 = zext i32 %.pre-phi3586 to i64
  %17502 = mul nsw i64 %17501, %333
  %17503 = add nsw i64 %17502, %296
  %17504 = getelementptr inbounds i16, i16* %blur_x879, i64 %17503
  %17505 = getelementptr inbounds i16, i16* %17504, i64 -32
  %17506 = bitcast i16* %17505 to <16 x i16>*
  %17507 = load <16 x i16>, <16 x i16>* %17506, align 2, !tbaa !399
  %17508 = getelementptr inbounds i16, i16* %17504, i64 -16
  %17509 = bitcast i16* %17508 to <16 x i16>*
  %17510 = load <16 x i16>, <16 x i16>* %17509, align 2, !tbaa !399
  %17511 = shufflevector <16 x i16> %17507, <16 x i16> %17510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17512 = zext i32 %.pre-phi3582 to i64
  %17513 = mul nsw i64 %17512, %333
  %17514 = add nsw i64 %17513, %296
  %17515 = getelementptr inbounds i16, i16* %blur_x879, i64 %17514
  %17516 = getelementptr inbounds i16, i16* %17515, i64 -32
  %17517 = bitcast i16* %17516 to <16 x i16>*
  %17518 = load <16 x i16>, <16 x i16>* %17517, align 2, !tbaa !399
  %17519 = getelementptr inbounds i16, i16* %17515, i64 -16
  %17520 = bitcast i16* %17519 to <16 x i16>*
  %17521 = load <16 x i16>, <16 x i16>* %17520, align 2, !tbaa !399
  %17522 = shufflevector <16 x i16> %17518, <16 x i16> %17521, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17523 = zext i32 %.pre-phi3592 to i64
  %17524 = mul nsw i64 %17523, %333
  %17525 = add nsw i64 %17524, %296
  %17526 = getelementptr inbounds i16, i16* %blur_x879, i64 %17525
  %17527 = getelementptr inbounds i16, i16* %17526, i64 -32
  %17528 = bitcast i16* %17527 to <16 x i16>*
  %17529 = load <16 x i16>, <16 x i16>* %17528, align 2, !tbaa !399
  %17530 = getelementptr inbounds i16, i16* %17526, i64 -16
  %17531 = bitcast i16* %17530 to <16 x i16>*
  %17532 = load <16 x i16>, <16 x i16>* %17531, align 2, !tbaa !399
  %17533 = shufflevector <16 x i16> %17529, <16 x i16> %17532, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17534 = mul nsw i64 %17492, %333
  %17535 = add nsw i64 %17534, %296
  %17536 = getelementptr inbounds i16, i16* %blur_x879, i64 %17535
  %17537 = getelementptr inbounds i16, i16* %17536, i64 -32
  %17538 = bitcast i16* %17537 to <16 x i16>*
  %17539 = load <16 x i16>, <16 x i16>* %17538, align 2, !tbaa !399
  %17540 = getelementptr inbounds i16, i16* %17536, i64 -16
  %17541 = bitcast i16* %17540 to <16 x i16>*
  %17542 = load <16 x i16>, <16 x i16>* %17541, align 2, !tbaa !399
  %17543 = shufflevector <16 x i16> %17539, <16 x i16> %17542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17544 = zext i32 %.pre-phi3598 to i64
  %17545 = mul nsw i64 %17544, %333
  %17546 = add nsw i64 %17545, %296
  %17547 = getelementptr inbounds i16, i16* %blur_x879, i64 %17546
  %17548 = getelementptr inbounds i16, i16* %17547, i64 -32
  %17549 = bitcast i16* %17548 to <16 x i16>*
  %17550 = load <16 x i16>, <16 x i16>* %17549, align 2, !tbaa !399
  %17551 = getelementptr inbounds i16, i16* %17547, i64 -16
  %17552 = bitcast i16* %17551 to <16 x i16>*
  %17553 = load <16 x i16>, <16 x i16>* %17552, align 2, !tbaa !399
  %17554 = shufflevector <16 x i16> %17550, <16 x i16> %17553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17555 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17522, <32 x i16> %17533, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17556 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17554, <32 x i16> %17543, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17557 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17555, <32 x i16> %17556, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17558 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17557, <32 x i16> %17511, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17559 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17558, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17560 = shufflevector <32 x i16> %17559, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17561 = sext i32 %a379 to i64
  %17562 = add nsw i64 %17561, 3
  %17563 = mul nsw i64 %17562, %334
  %17564 = add nsw i64 %336, %17563
  %17565 = getelementptr inbounds i16, i16* %263, i64 %17564
  %17566 = getelementptr inbounds i16, i16* %17565, i64 -32
  %17567 = bitcast i16* %17566 to <16 x i16>*
  store <16 x i16> %17560, <16 x i16>* %17567, align 2, !tbaa !401
  %17568 = shufflevector <32 x i16> %17559, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17569 = getelementptr inbounds i16, i16* %17565, i64 -16
  %17570 = bitcast i16* %17569 to <16 x i16>*
  store <16 x i16> %17568, <16 x i16>* %17570, align 2, !tbaa !401
  br label %after_bb1128

"for blur_y.s0.x.x.rebased1143":                  ; preds = %"for blur_y.s0.x.x.rebased1143.preheader", %"consume blur_x1151"
  %indvars.iv3386 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1143.preheader" ], [ %indvars.iv.next3387, %"consume blur_x1151" ]
  %17571 = add nsw i64 %indvars.iv3386, %303
  %17572 = icmp slt i64 %17571, 1
  %17573 = trunc i64 %17571 to i32
  %17574 = shl nsw i32 %17573, 5
  %17575 = icmp sgt i32 %198, %17574
  %17576 = or i1 %17572, %17575
  br i1 %17576, label %"produce blur_x1149", label %"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge"

"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1143"
  %.pre3605 = shl nsw i64 %17571, 5
  br label %"consume blur_x1151"

"end for blur_y.s0.x.x.rebased1144":              ; preds = %"consume blur_x1151", %after_bb1128
  br i1 %304, label %"for blur_y.s0.x.x.rebased1159.preheader", label %"end for blur_y.s0.x.x.rebased1160", !prof !386

"for blur_y.s0.x.x.rebased1159.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1144"
  %17577 = sext i32 %t17541139 to i64
  %17578 = zext i32 %.pre-phi3586 to i64
  %17579 = mul nsw i64 %17578, %337
  %17580 = sub nsw i64 %17579, %298
  %17581 = zext i32 %.pre-phi3582 to i64
  %17582 = mul nsw i64 %17581, %337
  %17583 = sub nsw i64 %17582, %298
  %17584 = zext i32 %.pre-phi3592 to i64
  %17585 = mul nsw i64 %17584, %337
  %17586 = sub nsw i64 %17585, %298
  %17587 = zext i32 %.pre-phi3604 to i64
  %17588 = mul nsw i64 %17587, %337
  %17589 = sub nsw i64 %17588, %298
  %17590 = zext i32 %.pre-phi3598 to i64
  %17591 = mul nsw i64 %17590, %337
  %17592 = sub nsw i64 %17591, %298
  %17593 = sext i32 %a379 to i64
  %17594 = add nsw i64 %17593, 3
  %17595 = mul nsw i64 %17594, %334
  %17596 = add nsw i64 %17595, %338
  br label %"for blur_y.s0.x.x.rebased1159"

"produce blur_x1149":                             ; preds = %"for blur_y.s0.x.x.rebased1143"
  %t7601150 = add nsw i32 %355, %17574
  %17597 = sext i32 %t7601150 to i64
  %17598 = getelementptr inbounds i16, i16* %read_input822, i64 %17597
  %17599 = getelementptr inbounds i16, i16* %17598, i64 1
  %17600 = bitcast i16* %17599 to <16 x i16>*
  %17601 = load <16 x i16>, <16 x i16>* %17600, align 2, !tbaa !396
  %17602 = getelementptr inbounds i16, i16* %17598, i64 17
  %17603 = bitcast i16* %17602 to <16 x i16>*
  %17604 = load <16 x i16>, <16 x i16>* %17603, align 2, !tbaa !396
  %17605 = shufflevector <16 x i16> %17601, <16 x i16> %17604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17606 = bitcast i16* %17598 to <16 x i16>*
  %17607 = load <16 x i16>, <16 x i16>* %17606, align 2, !tbaa !396
  %17608 = getelementptr inbounds i16, i16* %17598, i64 16
  %17609 = bitcast i16* %17608 to <16 x i16>*
  %17610 = load <16 x i16>, <16 x i16>* %17609, align 2, !tbaa !396
  %17611 = shufflevector <16 x i16> %17607, <16 x i16> %17610, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17612 = getelementptr inbounds i16, i16* %17598, i64 2
  %17613 = bitcast i16* %17612 to <16 x i16>*
  %17614 = load <16 x i16>, <16 x i16>* %17613, align 2, !tbaa !396
  %17615 = getelementptr inbounds i16, i16* %17598, i64 18
  %17616 = bitcast i16* %17615 to <16 x i16>*
  %17617 = load <16 x i16>, <16 x i16>* %17616, align 2, !tbaa !396
  %17618 = shufflevector <16 x i16> %17614, <16 x i16> %17617, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17619 = getelementptr inbounds i16, i16* %17598, i64 4
  %17620 = bitcast i16* %17619 to <16 x i16>*
  %17621 = load <16 x i16>, <16 x i16>* %17620, align 2, !tbaa !396
  %17622 = getelementptr inbounds i16, i16* %17598, i64 20
  %17623 = bitcast i16* %17622 to <16 x i16>*
  %17624 = load <16 x i16>, <16 x i16>* %17623, align 2, !tbaa !396
  %17625 = shufflevector <16 x i16> %17621, <16 x i16> %17624, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17626 = getelementptr inbounds i16, i16* %17598, i64 3
  %17627 = bitcast i16* %17626 to <16 x i16>*
  %17628 = load <16 x i16>, <16 x i16>* %17627, align 2, !tbaa !396
  %17629 = getelementptr inbounds i16, i16* %17598, i64 19
  %17630 = bitcast i16* %17629 to <16 x i16>*
  %17631 = load <16 x i16>, <16 x i16>* %17630, align 2, !tbaa !396
  %17632 = shufflevector <16 x i16> %17628, <16 x i16> %17631, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17633 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17611, <32 x i16> %17618, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17634 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17632, <32 x i16> %17625, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17635 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17633, <32 x i16> %17634, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17636 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17635, <32 x i16> %17605, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17637 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17636, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17638 = shufflevector <32 x i16> %17637, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17639 = shl nsw i64 %17571, 5
  %17640 = add nsw i64 %17639, %17428
  %17641 = getelementptr inbounds i16, i16* %blur_x879, i64 %17640
  %17642 = bitcast i16* %17641 to <16 x i16>*
  store <16 x i16> %17638, <16 x i16>* %17642, align 2, !tbaa !399
  %17643 = shufflevector <32 x i16> %17637, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17644 = getelementptr inbounds i16, i16* %17641, i64 16
  %17645 = bitcast i16* %17644 to <16 x i16>*
  store <16 x i16> %17643, <16 x i16>* %17645, align 2, !tbaa !399
  br label %"consume blur_x1151"

"consume blur_x1151":                             ; preds = %"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge", %"produce blur_x1149"
  %.pre-phi3606 = phi i64 [ %.pre3605, %"for blur_y.s0.x.x.rebased1143.consume blur_x1151_crit_edge" ], [ %17639, %"produce blur_x1149" ]
  %17646 = add nsw i64 %17431, %.pre-phi3606
  %17647 = getelementptr inbounds i16, i16* %blur_x879, i64 %17646
  %17648 = bitcast i16* %17647 to <16 x i16>*
  %17649 = load <16 x i16>, <16 x i16>* %17648, align 2, !tbaa !399
  %17650 = getelementptr inbounds i16, i16* %17647, i64 16
  %17651 = bitcast i16* %17650 to <16 x i16>*
  %17652 = load <16 x i16>, <16 x i16>* %17651, align 2, !tbaa !399
  %17653 = shufflevector <16 x i16> %17649, <16 x i16> %17652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17654 = add nsw i64 %17434, %.pre-phi3606
  %17655 = getelementptr inbounds i16, i16* %blur_x879, i64 %17654
  %17656 = bitcast i16* %17655 to <16 x i16>*
  %17657 = load <16 x i16>, <16 x i16>* %17656, align 2, !tbaa !399
  %17658 = getelementptr inbounds i16, i16* %17655, i64 16
  %17659 = bitcast i16* %17658 to <16 x i16>*
  %17660 = load <16 x i16>, <16 x i16>* %17659, align 2, !tbaa !399
  %17661 = shufflevector <16 x i16> %17657, <16 x i16> %17660, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17662 = add nsw i64 %17437, %.pre-phi3606
  %17663 = getelementptr inbounds i16, i16* %blur_x879, i64 %17662
  %17664 = bitcast i16* %17663 to <16 x i16>*
  %17665 = load <16 x i16>, <16 x i16>* %17664, align 2, !tbaa !399
  %17666 = getelementptr inbounds i16, i16* %17663, i64 16
  %17667 = bitcast i16* %17666 to <16 x i16>*
  %17668 = load <16 x i16>, <16 x i16>* %17667, align 2, !tbaa !399
  %17669 = shufflevector <16 x i16> %17665, <16 x i16> %17668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17670 = add nsw i64 %17440, %.pre-phi3606
  %17671 = getelementptr inbounds i16, i16* %blur_x879, i64 %17670
  %17672 = bitcast i16* %17671 to <16 x i16>*
  %17673 = load <16 x i16>, <16 x i16>* %17672, align 2, !tbaa !399
  %17674 = getelementptr inbounds i16, i16* %17671, i64 16
  %17675 = bitcast i16* %17674 to <16 x i16>*
  %17676 = load <16 x i16>, <16 x i16>* %17675, align 2, !tbaa !399
  %17677 = shufflevector <16 x i16> %17673, <16 x i16> %17676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17678 = add nsw i64 %17443, %.pre-phi3606
  %17679 = getelementptr inbounds i16, i16* %blur_x879, i64 %17678
  %17680 = bitcast i16* %17679 to <16 x i16>*
  %17681 = load <16 x i16>, <16 x i16>* %17680, align 2, !tbaa !399
  %17682 = getelementptr inbounds i16, i16* %17679, i64 16
  %17683 = bitcast i16* %17682 to <16 x i16>*
  %17684 = load <16 x i16>, <16 x i16>* %17683, align 2, !tbaa !399
  %17685 = shufflevector <16 x i16> %17681, <16 x i16> %17684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17686 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17661, <32 x i16> %17669, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17687 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17685, <32 x i16> %17677, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17688 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17686, <32 x i16> %17687, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17689 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17688, <32 x i16> %17653, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17690 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17689, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17691 = shufflevector <32 x i16> %17690, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17692 = add nsw i64 %17447, %.pre-phi3606
  %17693 = getelementptr inbounds i16, i16* %263, i64 %17692
  %17694 = bitcast i16* %17693 to <16 x i16>*
  store <16 x i16> %17691, <16 x i16>* %17694, align 2, !tbaa !401
  %17695 = shufflevector <32 x i16> %17690, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17696 = getelementptr inbounds i16, i16* %17693, i64 16
  %17697 = bitcast i16* %17696 to <16 x i16>*
  store <16 x i16> %17695, <16 x i16>* %17697, align 2, !tbaa !401
  %indvars.iv.next3387 = add nuw nsw i64 %indvars.iv3386, 1
  %17698 = icmp eq i64 %indvars.iv.next3387, %zext3388
  br i1 %17698, label %"end for blur_y.s0.x.x.rebased1144", label %"for blur_y.s0.x.x.rebased1143"

"for blur_y.s0.x.x.rebased1159":                  ; preds = %"for blur_y.s0.x.x.rebased1159.preheader", %"consume blur_x1170"
  %blur_y.s0.x.x.rebased1161 = phi i32 [ %17807, %"consume blur_x1170" ], [ 0, %"for blur_y.s0.x.x.rebased1159.preheader" ]
  %17699 = add nsw i32 %blur_y.s0.x.x.rebased1161, %t1626814
  %a1780 = shl nsw i32 %17699, 5
  %17700 = icmp sgt i32 %t1647, %a1780
  %blur_y.s0.x.v0.base.s1162 = select i1 %17700, i32 %a1780, i32 %t1647
  %17701 = icmp slt i32 %17699, 1
  %17702 = icmp sgt i32 %198, %a1780
  %17703 = or i1 %17701, %17702
  br i1 %17703, label %"produce blur_x1167", label %"consume blur_x1170"

"end for blur_y.s0.x.x.rebased1160":              ; preds = %"consume blur_x1170", %"end for blur_y.s0.x.x.rebased1144"
  br i1 %229, label %"produce blur_x1174", label %after_bb1171

"produce blur_x1167":                             ; preds = %"for blur_y.s0.x.x.rebased1159"
  %17704 = icmp slt i32 %blur_y.s0.x.v0.base.s1162, %198
  %blur_x.s0.x.v1.base.s1168 = select i1 %17704, i32 %blur_y.s0.x.v0.base.s1162, i32 %198
  %t7651169 = add nsw i32 %355, %blur_x.s0.x.v1.base.s1168
  %17705 = sext i32 %t7651169 to i64
  %17706 = getelementptr inbounds i16, i16* %read_input822, i64 %17705
  %17707 = getelementptr inbounds i16, i16* %17706, i64 1
  %17708 = bitcast i16* %17707 to <16 x i16>*
  %17709 = load <16 x i16>, <16 x i16>* %17708, align 2, !tbaa !396
  %17710 = getelementptr inbounds i16, i16* %17706, i64 17
  %17711 = bitcast i16* %17710 to <16 x i16>*
  %17712 = load <16 x i16>, <16 x i16>* %17711, align 2, !tbaa !396
  %17713 = shufflevector <16 x i16> %17709, <16 x i16> %17712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17714 = bitcast i16* %17706 to <16 x i16>*
  %17715 = load <16 x i16>, <16 x i16>* %17714, align 2, !tbaa !396
  %17716 = getelementptr inbounds i16, i16* %17706, i64 16
  %17717 = bitcast i16* %17716 to <16 x i16>*
  %17718 = load <16 x i16>, <16 x i16>* %17717, align 2, !tbaa !396
  %17719 = shufflevector <16 x i16> %17715, <16 x i16> %17718, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17720 = getelementptr inbounds i16, i16* %17706, i64 2
  %17721 = bitcast i16* %17720 to <16 x i16>*
  %17722 = load <16 x i16>, <16 x i16>* %17721, align 2, !tbaa !396
  %17723 = getelementptr inbounds i16, i16* %17706, i64 18
  %17724 = bitcast i16* %17723 to <16 x i16>*
  %17725 = load <16 x i16>, <16 x i16>* %17724, align 2, !tbaa !396
  %17726 = shufflevector <16 x i16> %17722, <16 x i16> %17725, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17727 = getelementptr inbounds i16, i16* %17706, i64 4
  %17728 = bitcast i16* %17727 to <16 x i16>*
  %17729 = load <16 x i16>, <16 x i16>* %17728, align 2, !tbaa !396
  %17730 = getelementptr inbounds i16, i16* %17706, i64 20
  %17731 = bitcast i16* %17730 to <16 x i16>*
  %17732 = load <16 x i16>, <16 x i16>* %17731, align 2, !tbaa !396
  %17733 = shufflevector <16 x i16> %17729, <16 x i16> %17732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17734 = getelementptr inbounds i16, i16* %17706, i64 3
  %17735 = bitcast i16* %17734 to <16 x i16>*
  %17736 = load <16 x i16>, <16 x i16>* %17735, align 2, !tbaa !396
  %17737 = getelementptr inbounds i16, i16* %17706, i64 19
  %17738 = bitcast i16* %17737 to <16 x i16>*
  %17739 = load <16 x i16>, <16 x i16>* %17738, align 2, !tbaa !396
  %17740 = shufflevector <16 x i16> %17736, <16 x i16> %17739, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17741 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17719, <32 x i16> %17726, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17742 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17740, <32 x i16> %17733, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17743 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17741, <32 x i16> %17742, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17744 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17743, <32 x i16> %17713, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17745 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17744, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17746 = shufflevector <32 x i16> %17745, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17747 = sext i32 %blur_x.s0.x.v1.base.s1168 to i64
  %17748 = add nsw i64 %17747, %17577
  %17749 = getelementptr inbounds i16, i16* %blur_x879, i64 %17748
  %17750 = bitcast i16* %17749 to <16 x i16>*
  store <16 x i16> %17746, <16 x i16>* %17750, align 2, !tbaa !399
  %17751 = shufflevector <32 x i16> %17745, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17752 = getelementptr inbounds i16, i16* %17749, i64 16
  %17753 = bitcast i16* %17752 to <16 x i16>*
  store <16 x i16> %17751, <16 x i16>* %17753, align 2, !tbaa !399
  br label %"consume blur_x1170"

"consume blur_x1170":                             ; preds = %"for blur_y.s0.x.x.rebased1159", %"produce blur_x1167"
  %17754 = sext i32 %blur_y.s0.x.v0.base.s1162 to i64
  %17755 = add nsw i64 %17580, %17754
  %17756 = getelementptr inbounds i16, i16* %blur_x879, i64 %17755
  %17757 = bitcast i16* %17756 to <16 x i16>*
  %17758 = load <16 x i16>, <16 x i16>* %17757, align 2, !tbaa !399
  %17759 = getelementptr inbounds i16, i16* %17756, i64 16
  %17760 = bitcast i16* %17759 to <16 x i16>*
  %17761 = load <16 x i16>, <16 x i16>* %17760, align 2, !tbaa !399
  %17762 = shufflevector <16 x i16> %17758, <16 x i16> %17761, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17763 = add nsw i64 %17583, %17754
  %17764 = getelementptr inbounds i16, i16* %blur_x879, i64 %17763
  %17765 = bitcast i16* %17764 to <16 x i16>*
  %17766 = load <16 x i16>, <16 x i16>* %17765, align 2, !tbaa !399
  %17767 = getelementptr inbounds i16, i16* %17764, i64 16
  %17768 = bitcast i16* %17767 to <16 x i16>*
  %17769 = load <16 x i16>, <16 x i16>* %17768, align 2, !tbaa !399
  %17770 = shufflevector <16 x i16> %17766, <16 x i16> %17769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17771 = add nsw i64 %17586, %17754
  %17772 = getelementptr inbounds i16, i16* %blur_x879, i64 %17771
  %17773 = bitcast i16* %17772 to <16 x i16>*
  %17774 = load <16 x i16>, <16 x i16>* %17773, align 2, !tbaa !399
  %17775 = getelementptr inbounds i16, i16* %17772, i64 16
  %17776 = bitcast i16* %17775 to <16 x i16>*
  %17777 = load <16 x i16>, <16 x i16>* %17776, align 2, !tbaa !399
  %17778 = shufflevector <16 x i16> %17774, <16 x i16> %17777, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17779 = add nsw i64 %17589, %17754
  %17780 = getelementptr inbounds i16, i16* %blur_x879, i64 %17779
  %17781 = bitcast i16* %17780 to <16 x i16>*
  %17782 = load <16 x i16>, <16 x i16>* %17781, align 2, !tbaa !399
  %17783 = getelementptr inbounds i16, i16* %17780, i64 16
  %17784 = bitcast i16* %17783 to <16 x i16>*
  %17785 = load <16 x i16>, <16 x i16>* %17784, align 2, !tbaa !399
  %17786 = shufflevector <16 x i16> %17782, <16 x i16> %17785, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17787 = add nsw i64 %17592, %17754
  %17788 = getelementptr inbounds i16, i16* %blur_x879, i64 %17787
  %17789 = bitcast i16* %17788 to <16 x i16>*
  %17790 = load <16 x i16>, <16 x i16>* %17789, align 2, !tbaa !399
  %17791 = getelementptr inbounds i16, i16* %17788, i64 16
  %17792 = bitcast i16* %17791 to <16 x i16>*
  %17793 = load <16 x i16>, <16 x i16>* %17792, align 2, !tbaa !399
  %17794 = shufflevector <16 x i16> %17790, <16 x i16> %17793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17795 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17770, <32 x i16> %17778, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17796 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17794, <32 x i16> %17786, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17797 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17795, <32 x i16> %17796, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17798 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17797, <32 x i16> %17762, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17799 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17798, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17800 = shufflevector <32 x i16> %17799, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17801 = add nsw i64 %17596, %17754
  %17802 = getelementptr inbounds i16, i16* %263, i64 %17801
  %17803 = bitcast i16* %17802 to <16 x i16>*
  store <16 x i16> %17800, <16 x i16>* %17803, align 2, !tbaa !401
  %17804 = shufflevector <32 x i16> %17799, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17805 = getelementptr inbounds i16, i16* %17802, i64 16
  %17806 = bitcast i16* %17805 to <16 x i16>*
  store <16 x i16> %17804, <16 x i16>* %17806, align 2, !tbaa !401
  %17807 = add nuw nsw i32 %blur_y.s0.x.x.rebased1161, 1
  %.not2650 = icmp eq i32 %17807, %t1683898
  br i1 %.not2650, label %"end for blur_y.s0.x.x.rebased1160", label %"for blur_y.s0.x.x.rebased1159"

after_bb1171:                                     ; preds = %"end for blur_y.s0.x.x.rebased1160", %"produce blur_x1174"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1186.preheader", label %"end for blur_y.s0.x.x.rebased1187", !prof !386

"for blur_y.s0.x.x.rebased1186.preheader":        ; preds = %after_bb1171
  %17808 = sext i32 %t1682886 to i64
  %17809 = zext i32 %.pre-phi3592 to i64
  %17810 = mul nsw i64 %17809, %337
  %17811 = sub nsw i64 %17810, %298
  %17812 = zext i32 %.pre-phi3586 to i64
  %17813 = mul nsw i64 %17812, %337
  %17814 = sub nsw i64 %17813, %298
  %17815 = zext i32 %.pre-phi3598 to i64
  %17816 = mul nsw i64 %17815, %337
  %17817 = sub nsw i64 %17816, %298
  %17818 = zext i32 %.pre-phi3570 to i64
  %17819 = mul nsw i64 %17818, %337
  %17820 = sub nsw i64 %17819, %298
  %17821 = zext i32 %.pre-phi3604 to i64
  %17822 = mul nsw i64 %17821, %337
  %17823 = sub nsw i64 %17822, %298
  %17824 = sext i32 %a379 to i64
  %17825 = add nsw i64 %17824, 4
  %17826 = mul nsw i64 %17825, %334
  %17827 = add nsw i64 %17826, %338
  br label %"for blur_y.s0.x.x.rebased1186"

"produce blur_x1174":                             ; preds = %"end for blur_y.s0.x.x.rebased1160"
  %17828 = getelementptr inbounds i16, i16* %read_input822, i64 %359
  %17829 = getelementptr inbounds i16, i16* %17828, i64 -31
  %17830 = bitcast i16* %17829 to <16 x i16>*
  %17831 = load <16 x i16>, <16 x i16>* %17830, align 2, !tbaa !396
  %17832 = getelementptr inbounds i16, i16* %17828, i64 -15
  %17833 = bitcast i16* %17832 to <16 x i16>*
  %17834 = load <16 x i16>, <16 x i16>* %17833, align 2, !tbaa !396
  %17835 = shufflevector <16 x i16> %17831, <16 x i16> %17834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17836 = getelementptr inbounds i16, i16* %17828, i64 -32
  %17837 = bitcast i16* %17836 to <16 x i16>*
  %17838 = load <16 x i16>, <16 x i16>* %17837, align 2, !tbaa !396
  %17839 = getelementptr inbounds i16, i16* %17828, i64 -16
  %17840 = bitcast i16* %17839 to <16 x i16>*
  %17841 = load <16 x i16>, <16 x i16>* %17840, align 2, !tbaa !396
  %17842 = shufflevector <16 x i16> %17838, <16 x i16> %17841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17843 = getelementptr inbounds i16, i16* %17828, i64 -30
  %17844 = bitcast i16* %17843 to <16 x i16>*
  %17845 = load <16 x i16>, <16 x i16>* %17844, align 2, !tbaa !396
  %17846 = getelementptr inbounds i16, i16* %17828, i64 -14
  %17847 = bitcast i16* %17846 to <16 x i16>*
  %17848 = load <16 x i16>, <16 x i16>* %17847, align 2, !tbaa !396
  %17849 = shufflevector <16 x i16> %17845, <16 x i16> %17848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17850 = getelementptr inbounds i16, i16* %17828, i64 -28
  %17851 = bitcast i16* %17850 to <16 x i16>*
  %17852 = load <16 x i16>, <16 x i16>* %17851, align 2, !tbaa !396
  %17853 = getelementptr inbounds i16, i16* %17828, i64 -12
  %17854 = bitcast i16* %17853 to <16 x i16>*
  %17855 = load <16 x i16>, <16 x i16>* %17854, align 2, !tbaa !396
  %17856 = shufflevector <16 x i16> %17852, <16 x i16> %17855, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17857 = getelementptr inbounds i16, i16* %17828, i64 -29
  %17858 = bitcast i16* %17857 to <16 x i16>*
  %17859 = load <16 x i16>, <16 x i16>* %17858, align 2, !tbaa !396
  %17860 = getelementptr inbounds i16, i16* %17828, i64 -13
  %17861 = bitcast i16* %17860 to <16 x i16>*
  %17862 = load <16 x i16>, <16 x i16>* %17861, align 2, !tbaa !396
  %17863 = shufflevector <16 x i16> %17859, <16 x i16> %17862, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17864 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17842, <32 x i16> %17849, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17865 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17863, <32 x i16> %17856, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17866 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17864, <32 x i16> %17865, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17867 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17866, <32 x i16> %17835, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17868 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17867, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17869 = shufflevector <32 x i16> %17868, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17870 = zext i32 %.pre-phi3570 to i64
  %17871 = mul nsw i64 %299, %17870
  %17872 = add nsw i64 %301, %17871
  %17873 = getelementptr inbounds i16, i16* %blur_x879, i64 %17872
  %17874 = getelementptr inbounds i16, i16* %17873, i64 -32
  %17875 = bitcast i16* %17874 to <16 x i16>*
  store <16 x i16> %17869, <16 x i16>* %17875, align 2, !tbaa !399
  %17876 = shufflevector <32 x i16> %17868, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17877 = getelementptr inbounds i16, i16* %17873, i64 -16
  %17878 = bitcast i16* %17877 to <16 x i16>*
  store <16 x i16> %17876, <16 x i16>* %17878, align 2, !tbaa !399
  %17879 = zext i32 %.pre-phi3592 to i64
  %17880 = mul nsw i64 %17879, %333
  %17881 = add nsw i64 %17880, %296
  %17882 = getelementptr inbounds i16, i16* %blur_x879, i64 %17881
  %17883 = getelementptr inbounds i16, i16* %17882, i64 -32
  %17884 = bitcast i16* %17883 to <16 x i16>*
  %17885 = load <16 x i16>, <16 x i16>* %17884, align 2, !tbaa !399
  %17886 = getelementptr inbounds i16, i16* %17882, i64 -16
  %17887 = bitcast i16* %17886 to <16 x i16>*
  %17888 = load <16 x i16>, <16 x i16>* %17887, align 2, !tbaa !399
  %17889 = shufflevector <16 x i16> %17885, <16 x i16> %17888, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17890 = zext i32 %.pre-phi3586 to i64
  %17891 = mul nsw i64 %17890, %333
  %17892 = add nsw i64 %17891, %296
  %17893 = getelementptr inbounds i16, i16* %blur_x879, i64 %17892
  %17894 = getelementptr inbounds i16, i16* %17893, i64 -32
  %17895 = bitcast i16* %17894 to <16 x i16>*
  %17896 = load <16 x i16>, <16 x i16>* %17895, align 2, !tbaa !399
  %17897 = getelementptr inbounds i16, i16* %17893, i64 -16
  %17898 = bitcast i16* %17897 to <16 x i16>*
  %17899 = load <16 x i16>, <16 x i16>* %17898, align 2, !tbaa !399
  %17900 = shufflevector <16 x i16> %17896, <16 x i16> %17899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17901 = zext i32 %.pre-phi3598 to i64
  %17902 = mul nsw i64 %17901, %333
  %17903 = add nsw i64 %17902, %296
  %17904 = getelementptr inbounds i16, i16* %blur_x879, i64 %17903
  %17905 = getelementptr inbounds i16, i16* %17904, i64 -32
  %17906 = bitcast i16* %17905 to <16 x i16>*
  %17907 = load <16 x i16>, <16 x i16>* %17906, align 2, !tbaa !399
  %17908 = getelementptr inbounds i16, i16* %17904, i64 -16
  %17909 = bitcast i16* %17908 to <16 x i16>*
  %17910 = load <16 x i16>, <16 x i16>* %17909, align 2, !tbaa !399
  %17911 = shufflevector <16 x i16> %17907, <16 x i16> %17910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17912 = mul nsw i64 %17870, %333
  %17913 = add nsw i64 %17912, %296
  %17914 = getelementptr inbounds i16, i16* %blur_x879, i64 %17913
  %17915 = getelementptr inbounds i16, i16* %17914, i64 -32
  %17916 = bitcast i16* %17915 to <16 x i16>*
  %17917 = load <16 x i16>, <16 x i16>* %17916, align 2, !tbaa !399
  %17918 = getelementptr inbounds i16, i16* %17914, i64 -16
  %17919 = bitcast i16* %17918 to <16 x i16>*
  %17920 = load <16 x i16>, <16 x i16>* %17919, align 2, !tbaa !399
  %17921 = shufflevector <16 x i16> %17917, <16 x i16> %17920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17922 = zext i32 %.pre-phi3604 to i64
  %17923 = mul nsw i64 %17922, %333
  %17924 = add nsw i64 %17923, %296
  %17925 = getelementptr inbounds i16, i16* %blur_x879, i64 %17924
  %17926 = getelementptr inbounds i16, i16* %17925, i64 -32
  %17927 = bitcast i16* %17926 to <16 x i16>*
  %17928 = load <16 x i16>, <16 x i16>* %17927, align 2, !tbaa !399
  %17929 = getelementptr inbounds i16, i16* %17925, i64 -16
  %17930 = bitcast i16* %17929 to <16 x i16>*
  %17931 = load <16 x i16>, <16 x i16>* %17930, align 2, !tbaa !399
  %17932 = shufflevector <16 x i16> %17928, <16 x i16> %17931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17933 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17900, <32 x i16> %17911, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17934 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17932, <32 x i16> %17921, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17935 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17933, <32 x i16> %17934, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17936 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17935, <32 x i16> %17889, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17937 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17936, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17938 = shufflevector <32 x i16> %17937, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17939 = sext i32 %a379 to i64
  %17940 = add nsw i64 %17939, 4
  %17941 = mul nsw i64 %17940, %334
  %17942 = add nsw i64 %336, %17941
  %17943 = getelementptr inbounds i16, i16* %263, i64 %17942
  %17944 = getelementptr inbounds i16, i16* %17943, i64 -32
  %17945 = bitcast i16* %17944 to <16 x i16>*
  store <16 x i16> %17938, <16 x i16>* %17945, align 2, !tbaa !401
  %17946 = shufflevector <32 x i16> %17937, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17947 = getelementptr inbounds i16, i16* %17943, i64 -16
  %17948 = bitcast i16* %17947 to <16 x i16>*
  store <16 x i16> %17946, <16 x i16>* %17948, align 2, !tbaa !401
  br label %after_bb1171

"for blur_y.s0.x.x.rebased1186":                  ; preds = %"for blur_y.s0.x.x.rebased1186.preheader", %"consume blur_x1194"
  %indvars.iv3389 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1186.preheader" ], [ %indvars.iv.next3390, %"consume blur_x1194" ]
  %17949 = add nsw i64 %indvars.iv3389, %303
  %17950 = icmp slt i64 %17949, 1
  %17951 = trunc i64 %17949 to i32
  %17952 = shl nsw i32 %17951, 5
  %17953 = icmp sgt i32 %198, %17952
  %17954 = or i1 %17950, %17953
  br i1 %17954, label %"produce blur_x1192", label %"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge"

"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1186"
  %.pre3607 = shl nsw i64 %17949, 5
  br label %"consume blur_x1194"

"end for blur_y.s0.x.x.rebased1187":              ; preds = %"consume blur_x1194", %after_bb1171
  br i1 %304, label %"for blur_y.s0.x.x.rebased1202.preheader", label %"end for blur_y.s0.x.x.rebased1203", !prof !386

"for blur_y.s0.x.x.rebased1202.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1187"
  %17955 = sext i32 %t1682886 to i64
  %17956 = zext i32 %.pre-phi3592 to i64
  %17957 = mul nsw i64 %17956, %337
  %17958 = sub nsw i64 %17957, %298
  %17959 = zext i32 %.pre-phi3586 to i64
  %17960 = mul nsw i64 %17959, %337
  %17961 = sub nsw i64 %17960, %298
  %17962 = zext i32 %.pre-phi3598 to i64
  %17963 = mul nsw i64 %17962, %337
  %17964 = sub nsw i64 %17963, %298
  %17965 = zext i32 %.pre-phi3570 to i64
  %17966 = mul nsw i64 %17965, %337
  %17967 = sub nsw i64 %17966, %298
  %17968 = zext i32 %.pre-phi3604 to i64
  %17969 = mul nsw i64 %17968, %337
  %17970 = sub nsw i64 %17969, %298
  %17971 = sext i32 %a379 to i64
  %17972 = add nsw i64 %17971, 4
  %17973 = mul nsw i64 %17972, %334
  %17974 = add nsw i64 %17973, %338
  br label %"for blur_y.s0.x.x.rebased1202"

"produce blur_x1192":                             ; preds = %"for blur_y.s0.x.x.rebased1186"
  %t7761193 = add nsw i32 %361, %17952
  %17975 = sext i32 %t7761193 to i64
  %17976 = getelementptr inbounds i16, i16* %read_input822, i64 %17975
  %17977 = getelementptr inbounds i16, i16* %17976, i64 1
  %17978 = bitcast i16* %17977 to <16 x i16>*
  %17979 = load <16 x i16>, <16 x i16>* %17978, align 2, !tbaa !396
  %17980 = getelementptr inbounds i16, i16* %17976, i64 17
  %17981 = bitcast i16* %17980 to <16 x i16>*
  %17982 = load <16 x i16>, <16 x i16>* %17981, align 2, !tbaa !396
  %17983 = shufflevector <16 x i16> %17979, <16 x i16> %17982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17984 = bitcast i16* %17976 to <16 x i16>*
  %17985 = load <16 x i16>, <16 x i16>* %17984, align 2, !tbaa !396
  %17986 = getelementptr inbounds i16, i16* %17976, i64 16
  %17987 = bitcast i16* %17986 to <16 x i16>*
  %17988 = load <16 x i16>, <16 x i16>* %17987, align 2, !tbaa !396
  %17989 = shufflevector <16 x i16> %17985, <16 x i16> %17988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17990 = getelementptr inbounds i16, i16* %17976, i64 2
  %17991 = bitcast i16* %17990 to <16 x i16>*
  %17992 = load <16 x i16>, <16 x i16>* %17991, align 2, !tbaa !396
  %17993 = getelementptr inbounds i16, i16* %17976, i64 18
  %17994 = bitcast i16* %17993 to <16 x i16>*
  %17995 = load <16 x i16>, <16 x i16>* %17994, align 2, !tbaa !396
  %17996 = shufflevector <16 x i16> %17992, <16 x i16> %17995, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17997 = getelementptr inbounds i16, i16* %17976, i64 4
  %17998 = bitcast i16* %17997 to <16 x i16>*
  %17999 = load <16 x i16>, <16 x i16>* %17998, align 2, !tbaa !396
  %18000 = getelementptr inbounds i16, i16* %17976, i64 20
  %18001 = bitcast i16* %18000 to <16 x i16>*
  %18002 = load <16 x i16>, <16 x i16>* %18001, align 2, !tbaa !396
  %18003 = shufflevector <16 x i16> %17999, <16 x i16> %18002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18004 = getelementptr inbounds i16, i16* %17976, i64 3
  %18005 = bitcast i16* %18004 to <16 x i16>*
  %18006 = load <16 x i16>, <16 x i16>* %18005, align 2, !tbaa !396
  %18007 = getelementptr inbounds i16, i16* %17976, i64 19
  %18008 = bitcast i16* %18007 to <16 x i16>*
  %18009 = load <16 x i16>, <16 x i16>* %18008, align 2, !tbaa !396
  %18010 = shufflevector <16 x i16> %18006, <16 x i16> %18009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18011 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17989, <32 x i16> %17996, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18012 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18010, <32 x i16> %18003, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18013 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18011, <32 x i16> %18012, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18014 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18013, <32 x i16> %17983, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18015 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18014, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18016 = shufflevector <32 x i16> %18015, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18017 = shl nsw i64 %17949, 5
  %18018 = add nsw i64 %18017, %17808
  %18019 = getelementptr inbounds i16, i16* %blur_x879, i64 %18018
  %18020 = bitcast i16* %18019 to <16 x i16>*
  store <16 x i16> %18016, <16 x i16>* %18020, align 2, !tbaa !399
  %18021 = shufflevector <32 x i16> %18015, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18022 = getelementptr inbounds i16, i16* %18019, i64 16
  %18023 = bitcast i16* %18022 to <16 x i16>*
  store <16 x i16> %18021, <16 x i16>* %18023, align 2, !tbaa !399
  br label %"consume blur_x1194"

"consume blur_x1194":                             ; preds = %"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge", %"produce blur_x1192"
  %.pre-phi3608 = phi i64 [ %.pre3607, %"for blur_y.s0.x.x.rebased1186.consume blur_x1194_crit_edge" ], [ %18017, %"produce blur_x1192" ]
  %18024 = add nsw i64 %17811, %.pre-phi3608
  %18025 = getelementptr inbounds i16, i16* %blur_x879, i64 %18024
  %18026 = bitcast i16* %18025 to <16 x i16>*
  %18027 = load <16 x i16>, <16 x i16>* %18026, align 2, !tbaa !399
  %18028 = getelementptr inbounds i16, i16* %18025, i64 16
  %18029 = bitcast i16* %18028 to <16 x i16>*
  %18030 = load <16 x i16>, <16 x i16>* %18029, align 2, !tbaa !399
  %18031 = shufflevector <16 x i16> %18027, <16 x i16> %18030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18032 = add nsw i64 %17814, %.pre-phi3608
  %18033 = getelementptr inbounds i16, i16* %blur_x879, i64 %18032
  %18034 = bitcast i16* %18033 to <16 x i16>*
  %18035 = load <16 x i16>, <16 x i16>* %18034, align 2, !tbaa !399
  %18036 = getelementptr inbounds i16, i16* %18033, i64 16
  %18037 = bitcast i16* %18036 to <16 x i16>*
  %18038 = load <16 x i16>, <16 x i16>* %18037, align 2, !tbaa !399
  %18039 = shufflevector <16 x i16> %18035, <16 x i16> %18038, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18040 = add nsw i64 %17817, %.pre-phi3608
  %18041 = getelementptr inbounds i16, i16* %blur_x879, i64 %18040
  %18042 = bitcast i16* %18041 to <16 x i16>*
  %18043 = load <16 x i16>, <16 x i16>* %18042, align 2, !tbaa !399
  %18044 = getelementptr inbounds i16, i16* %18041, i64 16
  %18045 = bitcast i16* %18044 to <16 x i16>*
  %18046 = load <16 x i16>, <16 x i16>* %18045, align 2, !tbaa !399
  %18047 = shufflevector <16 x i16> %18043, <16 x i16> %18046, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18048 = add nsw i64 %17820, %.pre-phi3608
  %18049 = getelementptr inbounds i16, i16* %blur_x879, i64 %18048
  %18050 = bitcast i16* %18049 to <16 x i16>*
  %18051 = load <16 x i16>, <16 x i16>* %18050, align 2, !tbaa !399
  %18052 = getelementptr inbounds i16, i16* %18049, i64 16
  %18053 = bitcast i16* %18052 to <16 x i16>*
  %18054 = load <16 x i16>, <16 x i16>* %18053, align 2, !tbaa !399
  %18055 = shufflevector <16 x i16> %18051, <16 x i16> %18054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18056 = add nsw i64 %17823, %.pre-phi3608
  %18057 = getelementptr inbounds i16, i16* %blur_x879, i64 %18056
  %18058 = bitcast i16* %18057 to <16 x i16>*
  %18059 = load <16 x i16>, <16 x i16>* %18058, align 2, !tbaa !399
  %18060 = getelementptr inbounds i16, i16* %18057, i64 16
  %18061 = bitcast i16* %18060 to <16 x i16>*
  %18062 = load <16 x i16>, <16 x i16>* %18061, align 2, !tbaa !399
  %18063 = shufflevector <16 x i16> %18059, <16 x i16> %18062, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18064 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18039, <32 x i16> %18047, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18065 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18063, <32 x i16> %18055, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18066 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18064, <32 x i16> %18065, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18067 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18066, <32 x i16> %18031, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18068 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18067, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18069 = shufflevector <32 x i16> %18068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18070 = add nsw i64 %17827, %.pre-phi3608
  %18071 = getelementptr inbounds i16, i16* %263, i64 %18070
  %18072 = bitcast i16* %18071 to <16 x i16>*
  store <16 x i16> %18069, <16 x i16>* %18072, align 2, !tbaa !401
  %18073 = shufflevector <32 x i16> %18068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18074 = getelementptr inbounds i16, i16* %18071, i64 16
  %18075 = bitcast i16* %18074 to <16 x i16>*
  store <16 x i16> %18073, <16 x i16>* %18075, align 2, !tbaa !401
  %indvars.iv.next3390 = add nuw nsw i64 %indvars.iv3389, 1
  %18076 = icmp eq i64 %indvars.iv.next3390, %zext3391
  br i1 %18076, label %"end for blur_y.s0.x.x.rebased1187", label %"for blur_y.s0.x.x.rebased1186"

"for blur_y.s0.x.x.rebased1202":                  ; preds = %"for blur_y.s0.x.x.rebased1202.preheader", %"consume blur_x1213"
  %blur_y.s0.x.x.rebased1204 = phi i32 [ %18185, %"consume blur_x1213" ], [ 0, %"for blur_y.s0.x.x.rebased1202.preheader" ]
  %18077 = add nsw i32 %blur_y.s0.x.x.rebased1204, %t1626814
  %a1937 = shl nsw i32 %18077, 5
  %18078 = icmp sgt i32 %t1647, %a1937
  %blur_y.s0.x.v0.base.s1205 = select i1 %18078, i32 %a1937, i32 %t1647
  %18079 = icmp slt i32 %18077, 1
  %18080 = icmp sgt i32 %198, %a1937
  %18081 = or i1 %18079, %18080
  br i1 %18081, label %"produce blur_x1210", label %"consume blur_x1213"

"end for blur_y.s0.x.x.rebased1203":              ; preds = %"consume blur_x1213", %"end for blur_y.s0.x.x.rebased1187"
  br i1 %229, label %"produce blur_x1217", label %after_bb1214

"produce blur_x1210":                             ; preds = %"for blur_y.s0.x.x.rebased1202"
  %18082 = icmp slt i32 %blur_y.s0.x.v0.base.s1205, %198
  %blur_x.s0.x.v1.base.s1211 = select i1 %18082, i32 %blur_y.s0.x.v0.base.s1205, i32 %198
  %t7811212 = add nsw i32 %361, %blur_x.s0.x.v1.base.s1211
  %18083 = sext i32 %t7811212 to i64
  %18084 = getelementptr inbounds i16, i16* %read_input822, i64 %18083
  %18085 = getelementptr inbounds i16, i16* %18084, i64 1
  %18086 = bitcast i16* %18085 to <16 x i16>*
  %18087 = load <16 x i16>, <16 x i16>* %18086, align 2, !tbaa !396
  %18088 = getelementptr inbounds i16, i16* %18084, i64 17
  %18089 = bitcast i16* %18088 to <16 x i16>*
  %18090 = load <16 x i16>, <16 x i16>* %18089, align 2, !tbaa !396
  %18091 = shufflevector <16 x i16> %18087, <16 x i16> %18090, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18092 = bitcast i16* %18084 to <16 x i16>*
  %18093 = load <16 x i16>, <16 x i16>* %18092, align 2, !tbaa !396
  %18094 = getelementptr inbounds i16, i16* %18084, i64 16
  %18095 = bitcast i16* %18094 to <16 x i16>*
  %18096 = load <16 x i16>, <16 x i16>* %18095, align 2, !tbaa !396
  %18097 = shufflevector <16 x i16> %18093, <16 x i16> %18096, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18098 = getelementptr inbounds i16, i16* %18084, i64 2
  %18099 = bitcast i16* %18098 to <16 x i16>*
  %18100 = load <16 x i16>, <16 x i16>* %18099, align 2, !tbaa !396
  %18101 = getelementptr inbounds i16, i16* %18084, i64 18
  %18102 = bitcast i16* %18101 to <16 x i16>*
  %18103 = load <16 x i16>, <16 x i16>* %18102, align 2, !tbaa !396
  %18104 = shufflevector <16 x i16> %18100, <16 x i16> %18103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18105 = getelementptr inbounds i16, i16* %18084, i64 4
  %18106 = bitcast i16* %18105 to <16 x i16>*
  %18107 = load <16 x i16>, <16 x i16>* %18106, align 2, !tbaa !396
  %18108 = getelementptr inbounds i16, i16* %18084, i64 20
  %18109 = bitcast i16* %18108 to <16 x i16>*
  %18110 = load <16 x i16>, <16 x i16>* %18109, align 2, !tbaa !396
  %18111 = shufflevector <16 x i16> %18107, <16 x i16> %18110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18112 = getelementptr inbounds i16, i16* %18084, i64 3
  %18113 = bitcast i16* %18112 to <16 x i16>*
  %18114 = load <16 x i16>, <16 x i16>* %18113, align 2, !tbaa !396
  %18115 = getelementptr inbounds i16, i16* %18084, i64 19
  %18116 = bitcast i16* %18115 to <16 x i16>*
  %18117 = load <16 x i16>, <16 x i16>* %18116, align 2, !tbaa !396
  %18118 = shufflevector <16 x i16> %18114, <16 x i16> %18117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18119 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18097, <32 x i16> %18104, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18120 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18118, <32 x i16> %18111, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18121 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18119, <32 x i16> %18120, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18122 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18121, <32 x i16> %18091, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18123 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18122, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18124 = shufflevector <32 x i16> %18123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18125 = sext i32 %blur_x.s0.x.v1.base.s1211 to i64
  %18126 = add nsw i64 %18125, %17955
  %18127 = getelementptr inbounds i16, i16* %blur_x879, i64 %18126
  %18128 = bitcast i16* %18127 to <16 x i16>*
  store <16 x i16> %18124, <16 x i16>* %18128, align 2, !tbaa !399
  %18129 = shufflevector <32 x i16> %18123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18130 = getelementptr inbounds i16, i16* %18127, i64 16
  %18131 = bitcast i16* %18130 to <16 x i16>*
  store <16 x i16> %18129, <16 x i16>* %18131, align 2, !tbaa !399
  br label %"consume blur_x1213"

"consume blur_x1213":                             ; preds = %"for blur_y.s0.x.x.rebased1202", %"produce blur_x1210"
  %18132 = sext i32 %blur_y.s0.x.v0.base.s1205 to i64
  %18133 = add nsw i64 %17958, %18132
  %18134 = getelementptr inbounds i16, i16* %blur_x879, i64 %18133
  %18135 = bitcast i16* %18134 to <16 x i16>*
  %18136 = load <16 x i16>, <16 x i16>* %18135, align 2, !tbaa !399
  %18137 = getelementptr inbounds i16, i16* %18134, i64 16
  %18138 = bitcast i16* %18137 to <16 x i16>*
  %18139 = load <16 x i16>, <16 x i16>* %18138, align 2, !tbaa !399
  %18140 = shufflevector <16 x i16> %18136, <16 x i16> %18139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18141 = add nsw i64 %17961, %18132
  %18142 = getelementptr inbounds i16, i16* %blur_x879, i64 %18141
  %18143 = bitcast i16* %18142 to <16 x i16>*
  %18144 = load <16 x i16>, <16 x i16>* %18143, align 2, !tbaa !399
  %18145 = getelementptr inbounds i16, i16* %18142, i64 16
  %18146 = bitcast i16* %18145 to <16 x i16>*
  %18147 = load <16 x i16>, <16 x i16>* %18146, align 2, !tbaa !399
  %18148 = shufflevector <16 x i16> %18144, <16 x i16> %18147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18149 = add nsw i64 %17964, %18132
  %18150 = getelementptr inbounds i16, i16* %blur_x879, i64 %18149
  %18151 = bitcast i16* %18150 to <16 x i16>*
  %18152 = load <16 x i16>, <16 x i16>* %18151, align 2, !tbaa !399
  %18153 = getelementptr inbounds i16, i16* %18150, i64 16
  %18154 = bitcast i16* %18153 to <16 x i16>*
  %18155 = load <16 x i16>, <16 x i16>* %18154, align 2, !tbaa !399
  %18156 = shufflevector <16 x i16> %18152, <16 x i16> %18155, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18157 = add nsw i64 %17967, %18132
  %18158 = getelementptr inbounds i16, i16* %blur_x879, i64 %18157
  %18159 = bitcast i16* %18158 to <16 x i16>*
  %18160 = load <16 x i16>, <16 x i16>* %18159, align 2, !tbaa !399
  %18161 = getelementptr inbounds i16, i16* %18158, i64 16
  %18162 = bitcast i16* %18161 to <16 x i16>*
  %18163 = load <16 x i16>, <16 x i16>* %18162, align 2, !tbaa !399
  %18164 = shufflevector <16 x i16> %18160, <16 x i16> %18163, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18165 = add nsw i64 %17970, %18132
  %18166 = getelementptr inbounds i16, i16* %blur_x879, i64 %18165
  %18167 = bitcast i16* %18166 to <16 x i16>*
  %18168 = load <16 x i16>, <16 x i16>* %18167, align 2, !tbaa !399
  %18169 = getelementptr inbounds i16, i16* %18166, i64 16
  %18170 = bitcast i16* %18169 to <16 x i16>*
  %18171 = load <16 x i16>, <16 x i16>* %18170, align 2, !tbaa !399
  %18172 = shufflevector <16 x i16> %18168, <16 x i16> %18171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18173 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18148, <32 x i16> %18156, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18174 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18172, <32 x i16> %18164, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18175 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18173, <32 x i16> %18174, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18176 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18175, <32 x i16> %18140, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18177 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18176, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18178 = shufflevector <32 x i16> %18177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18179 = add nsw i64 %17974, %18132
  %18180 = getelementptr inbounds i16, i16* %263, i64 %18179
  %18181 = bitcast i16* %18180 to <16 x i16>*
  store <16 x i16> %18178, <16 x i16>* %18181, align 2, !tbaa !401
  %18182 = shufflevector <32 x i16> %18177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18183 = getelementptr inbounds i16, i16* %18180, i64 16
  %18184 = bitcast i16* %18183 to <16 x i16>*
  store <16 x i16> %18182, <16 x i16>* %18184, align 2, !tbaa !401
  %18185 = add nuw nsw i32 %blur_y.s0.x.x.rebased1204, 1
  %.not2646 = icmp eq i32 %18185, %t1683898
  br i1 %.not2646, label %"end for blur_y.s0.x.x.rebased1203", label %"for blur_y.s0.x.x.rebased1202"

after_bb1214:                                     ; preds = %"end for blur_y.s0.x.x.rebased1203", %"produce blur_x1217"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1229.preheader", label %"end for blur_y.s0.x.x.rebased1230", !prof !386

"for blur_y.s0.x.x.rebased1229.preheader":        ; preds = %after_bb1214
  %18186 = sext i32 %t1688914 to i64
  %18187 = zext i32 %.pre-phi3598 to i64
  %18188 = mul nsw i64 %18187, %337
  %18189 = sub nsw i64 %18188, %298
  %18190 = zext i32 %.pre-phi3592 to i64
  %18191 = mul nsw i64 %18190, %337
  %18192 = sub nsw i64 %18191, %298
  %18193 = zext i32 %.pre-phi3604 to i64
  %18194 = mul nsw i64 %18193, %337
  %18195 = sub nsw i64 %18194, %298
  %18196 = zext i32 %.pre-phi3574 to i64
  %18197 = mul nsw i64 %18196, %337
  %18198 = sub nsw i64 %18197, %298
  %18199 = zext i32 %.pre-phi3570 to i64
  %18200 = mul nsw i64 %18199, %337
  %18201 = sub nsw i64 %18200, %298
  %18202 = sext i32 %a379 to i64
  %18203 = add nsw i64 %18202, 5
  %18204 = mul nsw i64 %18203, %334
  %18205 = add nsw i64 %18204, %338
  br label %"for blur_y.s0.x.x.rebased1229"

"produce blur_x1217":                             ; preds = %"end for blur_y.s0.x.x.rebased1203"
  %18206 = getelementptr inbounds i16, i16* %read_input822, i64 %365
  %18207 = getelementptr inbounds i16, i16* %18206, i64 -31
  %18208 = bitcast i16* %18207 to <16 x i16>*
  %18209 = load <16 x i16>, <16 x i16>* %18208, align 2, !tbaa !396
  %18210 = getelementptr inbounds i16, i16* %18206, i64 -15
  %18211 = bitcast i16* %18210 to <16 x i16>*
  %18212 = load <16 x i16>, <16 x i16>* %18211, align 2, !tbaa !396
  %18213 = shufflevector <16 x i16> %18209, <16 x i16> %18212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18214 = getelementptr inbounds i16, i16* %18206, i64 -32
  %18215 = bitcast i16* %18214 to <16 x i16>*
  %18216 = load <16 x i16>, <16 x i16>* %18215, align 2, !tbaa !396
  %18217 = getelementptr inbounds i16, i16* %18206, i64 -16
  %18218 = bitcast i16* %18217 to <16 x i16>*
  %18219 = load <16 x i16>, <16 x i16>* %18218, align 2, !tbaa !396
  %18220 = shufflevector <16 x i16> %18216, <16 x i16> %18219, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18221 = getelementptr inbounds i16, i16* %18206, i64 -30
  %18222 = bitcast i16* %18221 to <16 x i16>*
  %18223 = load <16 x i16>, <16 x i16>* %18222, align 2, !tbaa !396
  %18224 = getelementptr inbounds i16, i16* %18206, i64 -14
  %18225 = bitcast i16* %18224 to <16 x i16>*
  %18226 = load <16 x i16>, <16 x i16>* %18225, align 2, !tbaa !396
  %18227 = shufflevector <16 x i16> %18223, <16 x i16> %18226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18228 = getelementptr inbounds i16, i16* %18206, i64 -28
  %18229 = bitcast i16* %18228 to <16 x i16>*
  %18230 = load <16 x i16>, <16 x i16>* %18229, align 2, !tbaa !396
  %18231 = getelementptr inbounds i16, i16* %18206, i64 -12
  %18232 = bitcast i16* %18231 to <16 x i16>*
  %18233 = load <16 x i16>, <16 x i16>* %18232, align 2, !tbaa !396
  %18234 = shufflevector <16 x i16> %18230, <16 x i16> %18233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18235 = getelementptr inbounds i16, i16* %18206, i64 -29
  %18236 = bitcast i16* %18235 to <16 x i16>*
  %18237 = load <16 x i16>, <16 x i16>* %18236, align 2, !tbaa !396
  %18238 = getelementptr inbounds i16, i16* %18206, i64 -13
  %18239 = bitcast i16* %18238 to <16 x i16>*
  %18240 = load <16 x i16>, <16 x i16>* %18239, align 2, !tbaa !396
  %18241 = shufflevector <16 x i16> %18237, <16 x i16> %18240, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18242 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18220, <32 x i16> %18227, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18243 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18241, <32 x i16> %18234, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18244 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18242, <32 x i16> %18243, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18245 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18244, <32 x i16> %18213, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18246 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18245, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18247 = shufflevector <32 x i16> %18246, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18248 = zext i32 %.pre-phi3574 to i64
  %18249 = mul nsw i64 %299, %18248
  %18250 = add nsw i64 %301, %18249
  %18251 = getelementptr inbounds i16, i16* %blur_x879, i64 %18250
  %18252 = getelementptr inbounds i16, i16* %18251, i64 -32
  %18253 = bitcast i16* %18252 to <16 x i16>*
  store <16 x i16> %18247, <16 x i16>* %18253, align 2, !tbaa !399
  %18254 = shufflevector <32 x i16> %18246, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18255 = getelementptr inbounds i16, i16* %18251, i64 -16
  %18256 = bitcast i16* %18255 to <16 x i16>*
  store <16 x i16> %18254, <16 x i16>* %18256, align 2, !tbaa !399
  %18257 = zext i32 %.pre-phi3598 to i64
  %18258 = mul nsw i64 %18257, %333
  %18259 = add nsw i64 %18258, %296
  %18260 = getelementptr inbounds i16, i16* %blur_x879, i64 %18259
  %18261 = getelementptr inbounds i16, i16* %18260, i64 -32
  %18262 = bitcast i16* %18261 to <16 x i16>*
  %18263 = load <16 x i16>, <16 x i16>* %18262, align 2, !tbaa !399
  %18264 = getelementptr inbounds i16, i16* %18260, i64 -16
  %18265 = bitcast i16* %18264 to <16 x i16>*
  %18266 = load <16 x i16>, <16 x i16>* %18265, align 2, !tbaa !399
  %18267 = shufflevector <16 x i16> %18263, <16 x i16> %18266, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18268 = zext i32 %.pre-phi3592 to i64
  %18269 = mul nsw i64 %18268, %333
  %18270 = add nsw i64 %18269, %296
  %18271 = getelementptr inbounds i16, i16* %blur_x879, i64 %18270
  %18272 = getelementptr inbounds i16, i16* %18271, i64 -32
  %18273 = bitcast i16* %18272 to <16 x i16>*
  %18274 = load <16 x i16>, <16 x i16>* %18273, align 2, !tbaa !399
  %18275 = getelementptr inbounds i16, i16* %18271, i64 -16
  %18276 = bitcast i16* %18275 to <16 x i16>*
  %18277 = load <16 x i16>, <16 x i16>* %18276, align 2, !tbaa !399
  %18278 = shufflevector <16 x i16> %18274, <16 x i16> %18277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18279 = zext i32 %.pre-phi3604 to i64
  %18280 = mul nsw i64 %18279, %333
  %18281 = add nsw i64 %18280, %296
  %18282 = getelementptr inbounds i16, i16* %blur_x879, i64 %18281
  %18283 = getelementptr inbounds i16, i16* %18282, i64 -32
  %18284 = bitcast i16* %18283 to <16 x i16>*
  %18285 = load <16 x i16>, <16 x i16>* %18284, align 2, !tbaa !399
  %18286 = getelementptr inbounds i16, i16* %18282, i64 -16
  %18287 = bitcast i16* %18286 to <16 x i16>*
  %18288 = load <16 x i16>, <16 x i16>* %18287, align 2, !tbaa !399
  %18289 = shufflevector <16 x i16> %18285, <16 x i16> %18288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18290 = mul nsw i64 %18248, %333
  %18291 = add nsw i64 %18290, %296
  %18292 = getelementptr inbounds i16, i16* %blur_x879, i64 %18291
  %18293 = getelementptr inbounds i16, i16* %18292, i64 -32
  %18294 = bitcast i16* %18293 to <16 x i16>*
  %18295 = load <16 x i16>, <16 x i16>* %18294, align 2, !tbaa !399
  %18296 = getelementptr inbounds i16, i16* %18292, i64 -16
  %18297 = bitcast i16* %18296 to <16 x i16>*
  %18298 = load <16 x i16>, <16 x i16>* %18297, align 2, !tbaa !399
  %18299 = shufflevector <16 x i16> %18295, <16 x i16> %18298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18300 = zext i32 %.pre-phi3570 to i64
  %18301 = mul nsw i64 %18300, %333
  %18302 = add nsw i64 %18301, %296
  %18303 = getelementptr inbounds i16, i16* %blur_x879, i64 %18302
  %18304 = getelementptr inbounds i16, i16* %18303, i64 -32
  %18305 = bitcast i16* %18304 to <16 x i16>*
  %18306 = load <16 x i16>, <16 x i16>* %18305, align 2, !tbaa !399
  %18307 = getelementptr inbounds i16, i16* %18303, i64 -16
  %18308 = bitcast i16* %18307 to <16 x i16>*
  %18309 = load <16 x i16>, <16 x i16>* %18308, align 2, !tbaa !399
  %18310 = shufflevector <16 x i16> %18306, <16 x i16> %18309, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18311 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18278, <32 x i16> %18289, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18312 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18310, <32 x i16> %18299, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18313 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18311, <32 x i16> %18312, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18314 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18313, <32 x i16> %18267, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18315 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18314, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18316 = shufflevector <32 x i16> %18315, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18317 = sext i32 %a379 to i64
  %18318 = add nsw i64 %18317, 5
  %18319 = mul nsw i64 %18318, %334
  %18320 = add nsw i64 %336, %18319
  %18321 = getelementptr inbounds i16, i16* %263, i64 %18320
  %18322 = getelementptr inbounds i16, i16* %18321, i64 -32
  %18323 = bitcast i16* %18322 to <16 x i16>*
  store <16 x i16> %18316, <16 x i16>* %18323, align 2, !tbaa !401
  %18324 = shufflevector <32 x i16> %18315, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18325 = getelementptr inbounds i16, i16* %18321, i64 -16
  %18326 = bitcast i16* %18325 to <16 x i16>*
  store <16 x i16> %18324, <16 x i16>* %18326, align 2, !tbaa !401
  br label %after_bb1214

"for blur_y.s0.x.x.rebased1229":                  ; preds = %"for blur_y.s0.x.x.rebased1229.preheader", %"consume blur_x1237"
  %indvars.iv3392 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1229.preheader" ], [ %indvars.iv.next3393, %"consume blur_x1237" ]
  %18327 = add nsw i64 %indvars.iv3392, %303
  %18328 = icmp slt i64 %18327, 1
  %18329 = trunc i64 %18327 to i32
  %18330 = shl nsw i32 %18329, 5
  %18331 = icmp sgt i32 %198, %18330
  %18332 = or i1 %18328, %18331
  br i1 %18332, label %"produce blur_x1235", label %"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge"

"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1229"
  %.pre3609 = shl nsw i64 %18327, 5
  br label %"consume blur_x1237"

"end for blur_y.s0.x.x.rebased1230":              ; preds = %"consume blur_x1237", %after_bb1214
  br i1 %304, label %"for blur_y.s0.x.x.rebased1245.preheader", label %"end for blur_y.s0.x.x.rebased1246", !prof !386

"for blur_y.s0.x.x.rebased1245.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1230"
  %18333 = sext i32 %t1688914 to i64
  %18334 = zext i32 %.pre-phi3598 to i64
  %18335 = mul nsw i64 %18334, %337
  %18336 = sub nsw i64 %18335, %298
  %18337 = zext i32 %.pre-phi3592 to i64
  %18338 = mul nsw i64 %18337, %337
  %18339 = sub nsw i64 %18338, %298
  %18340 = zext i32 %.pre-phi3604 to i64
  %18341 = mul nsw i64 %18340, %337
  %18342 = sub nsw i64 %18341, %298
  %18343 = zext i32 %.pre-phi3574 to i64
  %18344 = mul nsw i64 %18343, %337
  %18345 = sub nsw i64 %18344, %298
  %18346 = zext i32 %.pre-phi3570 to i64
  %18347 = mul nsw i64 %18346, %337
  %18348 = sub nsw i64 %18347, %298
  %18349 = sext i32 %a379 to i64
  %18350 = add nsw i64 %18349, 5
  %18351 = mul nsw i64 %18350, %334
  %18352 = add nsw i64 %18351, %338
  br label %"for blur_y.s0.x.x.rebased1245"

"produce blur_x1235":                             ; preds = %"for blur_y.s0.x.x.rebased1229"
  %t7921236 = add nsw i32 %367, %18330
  %18353 = sext i32 %t7921236 to i64
  %18354 = getelementptr inbounds i16, i16* %read_input822, i64 %18353
  %18355 = getelementptr inbounds i16, i16* %18354, i64 1
  %18356 = bitcast i16* %18355 to <16 x i16>*
  %18357 = load <16 x i16>, <16 x i16>* %18356, align 2, !tbaa !396
  %18358 = getelementptr inbounds i16, i16* %18354, i64 17
  %18359 = bitcast i16* %18358 to <16 x i16>*
  %18360 = load <16 x i16>, <16 x i16>* %18359, align 2, !tbaa !396
  %18361 = shufflevector <16 x i16> %18357, <16 x i16> %18360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18362 = bitcast i16* %18354 to <16 x i16>*
  %18363 = load <16 x i16>, <16 x i16>* %18362, align 2, !tbaa !396
  %18364 = getelementptr inbounds i16, i16* %18354, i64 16
  %18365 = bitcast i16* %18364 to <16 x i16>*
  %18366 = load <16 x i16>, <16 x i16>* %18365, align 2, !tbaa !396
  %18367 = shufflevector <16 x i16> %18363, <16 x i16> %18366, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18368 = getelementptr inbounds i16, i16* %18354, i64 2
  %18369 = bitcast i16* %18368 to <16 x i16>*
  %18370 = load <16 x i16>, <16 x i16>* %18369, align 2, !tbaa !396
  %18371 = getelementptr inbounds i16, i16* %18354, i64 18
  %18372 = bitcast i16* %18371 to <16 x i16>*
  %18373 = load <16 x i16>, <16 x i16>* %18372, align 2, !tbaa !396
  %18374 = shufflevector <16 x i16> %18370, <16 x i16> %18373, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18375 = getelementptr inbounds i16, i16* %18354, i64 4
  %18376 = bitcast i16* %18375 to <16 x i16>*
  %18377 = load <16 x i16>, <16 x i16>* %18376, align 2, !tbaa !396
  %18378 = getelementptr inbounds i16, i16* %18354, i64 20
  %18379 = bitcast i16* %18378 to <16 x i16>*
  %18380 = load <16 x i16>, <16 x i16>* %18379, align 2, !tbaa !396
  %18381 = shufflevector <16 x i16> %18377, <16 x i16> %18380, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18382 = getelementptr inbounds i16, i16* %18354, i64 3
  %18383 = bitcast i16* %18382 to <16 x i16>*
  %18384 = load <16 x i16>, <16 x i16>* %18383, align 2, !tbaa !396
  %18385 = getelementptr inbounds i16, i16* %18354, i64 19
  %18386 = bitcast i16* %18385 to <16 x i16>*
  %18387 = load <16 x i16>, <16 x i16>* %18386, align 2, !tbaa !396
  %18388 = shufflevector <16 x i16> %18384, <16 x i16> %18387, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18389 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18367, <32 x i16> %18374, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18390 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18388, <32 x i16> %18381, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18391 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18389, <32 x i16> %18390, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18392 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18391, <32 x i16> %18361, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18393 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18392, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18394 = shufflevector <32 x i16> %18393, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18395 = shl nsw i64 %18327, 5
  %18396 = add nsw i64 %18395, %18186
  %18397 = getelementptr inbounds i16, i16* %blur_x879, i64 %18396
  %18398 = bitcast i16* %18397 to <16 x i16>*
  store <16 x i16> %18394, <16 x i16>* %18398, align 2, !tbaa !399
  %18399 = shufflevector <32 x i16> %18393, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18400 = getelementptr inbounds i16, i16* %18397, i64 16
  %18401 = bitcast i16* %18400 to <16 x i16>*
  store <16 x i16> %18399, <16 x i16>* %18401, align 2, !tbaa !399
  br label %"consume blur_x1237"

"consume blur_x1237":                             ; preds = %"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge", %"produce blur_x1235"
  %.pre-phi3610 = phi i64 [ %.pre3609, %"for blur_y.s0.x.x.rebased1229.consume blur_x1237_crit_edge" ], [ %18395, %"produce blur_x1235" ]
  %18402 = add nsw i64 %18189, %.pre-phi3610
  %18403 = getelementptr inbounds i16, i16* %blur_x879, i64 %18402
  %18404 = bitcast i16* %18403 to <16 x i16>*
  %18405 = load <16 x i16>, <16 x i16>* %18404, align 2, !tbaa !399
  %18406 = getelementptr inbounds i16, i16* %18403, i64 16
  %18407 = bitcast i16* %18406 to <16 x i16>*
  %18408 = load <16 x i16>, <16 x i16>* %18407, align 2, !tbaa !399
  %18409 = shufflevector <16 x i16> %18405, <16 x i16> %18408, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18410 = add nsw i64 %18192, %.pre-phi3610
  %18411 = getelementptr inbounds i16, i16* %blur_x879, i64 %18410
  %18412 = bitcast i16* %18411 to <16 x i16>*
  %18413 = load <16 x i16>, <16 x i16>* %18412, align 2, !tbaa !399
  %18414 = getelementptr inbounds i16, i16* %18411, i64 16
  %18415 = bitcast i16* %18414 to <16 x i16>*
  %18416 = load <16 x i16>, <16 x i16>* %18415, align 2, !tbaa !399
  %18417 = shufflevector <16 x i16> %18413, <16 x i16> %18416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18418 = add nsw i64 %18195, %.pre-phi3610
  %18419 = getelementptr inbounds i16, i16* %blur_x879, i64 %18418
  %18420 = bitcast i16* %18419 to <16 x i16>*
  %18421 = load <16 x i16>, <16 x i16>* %18420, align 2, !tbaa !399
  %18422 = getelementptr inbounds i16, i16* %18419, i64 16
  %18423 = bitcast i16* %18422 to <16 x i16>*
  %18424 = load <16 x i16>, <16 x i16>* %18423, align 2, !tbaa !399
  %18425 = shufflevector <16 x i16> %18421, <16 x i16> %18424, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18426 = add nsw i64 %18198, %.pre-phi3610
  %18427 = getelementptr inbounds i16, i16* %blur_x879, i64 %18426
  %18428 = bitcast i16* %18427 to <16 x i16>*
  %18429 = load <16 x i16>, <16 x i16>* %18428, align 2, !tbaa !399
  %18430 = getelementptr inbounds i16, i16* %18427, i64 16
  %18431 = bitcast i16* %18430 to <16 x i16>*
  %18432 = load <16 x i16>, <16 x i16>* %18431, align 2, !tbaa !399
  %18433 = shufflevector <16 x i16> %18429, <16 x i16> %18432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18434 = add nsw i64 %18201, %.pre-phi3610
  %18435 = getelementptr inbounds i16, i16* %blur_x879, i64 %18434
  %18436 = bitcast i16* %18435 to <16 x i16>*
  %18437 = load <16 x i16>, <16 x i16>* %18436, align 2, !tbaa !399
  %18438 = getelementptr inbounds i16, i16* %18435, i64 16
  %18439 = bitcast i16* %18438 to <16 x i16>*
  %18440 = load <16 x i16>, <16 x i16>* %18439, align 2, !tbaa !399
  %18441 = shufflevector <16 x i16> %18437, <16 x i16> %18440, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18442 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18417, <32 x i16> %18425, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18443 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18441, <32 x i16> %18433, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18444 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18442, <32 x i16> %18443, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18445 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18444, <32 x i16> %18409, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18446 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18445, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18447 = shufflevector <32 x i16> %18446, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18448 = add nsw i64 %18205, %.pre-phi3610
  %18449 = getelementptr inbounds i16, i16* %263, i64 %18448
  %18450 = bitcast i16* %18449 to <16 x i16>*
  store <16 x i16> %18447, <16 x i16>* %18450, align 2, !tbaa !401
  %18451 = shufflevector <32 x i16> %18446, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18452 = getelementptr inbounds i16, i16* %18449, i64 16
  %18453 = bitcast i16* %18452 to <16 x i16>*
  store <16 x i16> %18451, <16 x i16>* %18453, align 2, !tbaa !401
  %indvars.iv.next3393 = add nuw nsw i64 %indvars.iv3392, 1
  %18454 = icmp eq i64 %indvars.iv.next3393, %zext3394
  br i1 %18454, label %"end for blur_y.s0.x.x.rebased1230", label %"for blur_y.s0.x.x.rebased1229"

"for blur_y.s0.x.x.rebased1245":                  ; preds = %"for blur_y.s0.x.x.rebased1245.preheader", %"consume blur_x1256"
  %blur_y.s0.x.x.rebased1247 = phi i32 [ %18563, %"consume blur_x1256" ], [ 0, %"for blur_y.s0.x.x.rebased1245.preheader" ]
  %18455 = add nsw i32 %blur_y.s0.x.x.rebased1247, %t1626814
  %a2094 = shl nsw i32 %18455, 5
  %18456 = icmp sgt i32 %t1647, %a2094
  %blur_y.s0.x.v0.base.s1248 = select i1 %18456, i32 %a2094, i32 %t1647
  %18457 = icmp slt i32 %18455, 1
  %18458 = icmp sgt i32 %198, %a2094
  %18459 = or i1 %18457, %18458
  br i1 %18459, label %"produce blur_x1253", label %"consume blur_x1256"

"end for blur_y.s0.x.x.rebased1246":              ; preds = %"consume blur_x1256", %"end for blur_y.s0.x.x.rebased1230"
  br i1 %229, label %"produce blur_x1260", label %after_bb1257

"produce blur_x1253":                             ; preds = %"for blur_y.s0.x.x.rebased1245"
  %18460 = icmp slt i32 %blur_y.s0.x.v0.base.s1248, %198
  %blur_x.s0.x.v1.base.s1254 = select i1 %18460, i32 %blur_y.s0.x.v0.base.s1248, i32 %198
  %t7971255 = add nsw i32 %367, %blur_x.s0.x.v1.base.s1254
  %18461 = sext i32 %t7971255 to i64
  %18462 = getelementptr inbounds i16, i16* %read_input822, i64 %18461
  %18463 = getelementptr inbounds i16, i16* %18462, i64 1
  %18464 = bitcast i16* %18463 to <16 x i16>*
  %18465 = load <16 x i16>, <16 x i16>* %18464, align 2, !tbaa !396
  %18466 = getelementptr inbounds i16, i16* %18462, i64 17
  %18467 = bitcast i16* %18466 to <16 x i16>*
  %18468 = load <16 x i16>, <16 x i16>* %18467, align 2, !tbaa !396
  %18469 = shufflevector <16 x i16> %18465, <16 x i16> %18468, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18470 = bitcast i16* %18462 to <16 x i16>*
  %18471 = load <16 x i16>, <16 x i16>* %18470, align 2, !tbaa !396
  %18472 = getelementptr inbounds i16, i16* %18462, i64 16
  %18473 = bitcast i16* %18472 to <16 x i16>*
  %18474 = load <16 x i16>, <16 x i16>* %18473, align 2, !tbaa !396
  %18475 = shufflevector <16 x i16> %18471, <16 x i16> %18474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18476 = getelementptr inbounds i16, i16* %18462, i64 2
  %18477 = bitcast i16* %18476 to <16 x i16>*
  %18478 = load <16 x i16>, <16 x i16>* %18477, align 2, !tbaa !396
  %18479 = getelementptr inbounds i16, i16* %18462, i64 18
  %18480 = bitcast i16* %18479 to <16 x i16>*
  %18481 = load <16 x i16>, <16 x i16>* %18480, align 2, !tbaa !396
  %18482 = shufflevector <16 x i16> %18478, <16 x i16> %18481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18483 = getelementptr inbounds i16, i16* %18462, i64 4
  %18484 = bitcast i16* %18483 to <16 x i16>*
  %18485 = load <16 x i16>, <16 x i16>* %18484, align 2, !tbaa !396
  %18486 = getelementptr inbounds i16, i16* %18462, i64 20
  %18487 = bitcast i16* %18486 to <16 x i16>*
  %18488 = load <16 x i16>, <16 x i16>* %18487, align 2, !tbaa !396
  %18489 = shufflevector <16 x i16> %18485, <16 x i16> %18488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18490 = getelementptr inbounds i16, i16* %18462, i64 3
  %18491 = bitcast i16* %18490 to <16 x i16>*
  %18492 = load <16 x i16>, <16 x i16>* %18491, align 2, !tbaa !396
  %18493 = getelementptr inbounds i16, i16* %18462, i64 19
  %18494 = bitcast i16* %18493 to <16 x i16>*
  %18495 = load <16 x i16>, <16 x i16>* %18494, align 2, !tbaa !396
  %18496 = shufflevector <16 x i16> %18492, <16 x i16> %18495, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18497 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18475, <32 x i16> %18482, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18498 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18496, <32 x i16> %18489, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18499 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18497, <32 x i16> %18498, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18500 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18499, <32 x i16> %18469, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18501 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18500, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18502 = shufflevector <32 x i16> %18501, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18503 = sext i32 %blur_x.s0.x.v1.base.s1254 to i64
  %18504 = add nsw i64 %18503, %18333
  %18505 = getelementptr inbounds i16, i16* %blur_x879, i64 %18504
  %18506 = bitcast i16* %18505 to <16 x i16>*
  store <16 x i16> %18502, <16 x i16>* %18506, align 2, !tbaa !399
  %18507 = shufflevector <32 x i16> %18501, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18508 = getelementptr inbounds i16, i16* %18505, i64 16
  %18509 = bitcast i16* %18508 to <16 x i16>*
  store <16 x i16> %18507, <16 x i16>* %18509, align 2, !tbaa !399
  br label %"consume blur_x1256"

"consume blur_x1256":                             ; preds = %"for blur_y.s0.x.x.rebased1245", %"produce blur_x1253"
  %18510 = sext i32 %blur_y.s0.x.v0.base.s1248 to i64
  %18511 = add nsw i64 %18336, %18510
  %18512 = getelementptr inbounds i16, i16* %blur_x879, i64 %18511
  %18513 = bitcast i16* %18512 to <16 x i16>*
  %18514 = load <16 x i16>, <16 x i16>* %18513, align 2, !tbaa !399
  %18515 = getelementptr inbounds i16, i16* %18512, i64 16
  %18516 = bitcast i16* %18515 to <16 x i16>*
  %18517 = load <16 x i16>, <16 x i16>* %18516, align 2, !tbaa !399
  %18518 = shufflevector <16 x i16> %18514, <16 x i16> %18517, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18519 = add nsw i64 %18339, %18510
  %18520 = getelementptr inbounds i16, i16* %blur_x879, i64 %18519
  %18521 = bitcast i16* %18520 to <16 x i16>*
  %18522 = load <16 x i16>, <16 x i16>* %18521, align 2, !tbaa !399
  %18523 = getelementptr inbounds i16, i16* %18520, i64 16
  %18524 = bitcast i16* %18523 to <16 x i16>*
  %18525 = load <16 x i16>, <16 x i16>* %18524, align 2, !tbaa !399
  %18526 = shufflevector <16 x i16> %18522, <16 x i16> %18525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18527 = add nsw i64 %18342, %18510
  %18528 = getelementptr inbounds i16, i16* %blur_x879, i64 %18527
  %18529 = bitcast i16* %18528 to <16 x i16>*
  %18530 = load <16 x i16>, <16 x i16>* %18529, align 2, !tbaa !399
  %18531 = getelementptr inbounds i16, i16* %18528, i64 16
  %18532 = bitcast i16* %18531 to <16 x i16>*
  %18533 = load <16 x i16>, <16 x i16>* %18532, align 2, !tbaa !399
  %18534 = shufflevector <16 x i16> %18530, <16 x i16> %18533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18535 = add nsw i64 %18345, %18510
  %18536 = getelementptr inbounds i16, i16* %blur_x879, i64 %18535
  %18537 = bitcast i16* %18536 to <16 x i16>*
  %18538 = load <16 x i16>, <16 x i16>* %18537, align 2, !tbaa !399
  %18539 = getelementptr inbounds i16, i16* %18536, i64 16
  %18540 = bitcast i16* %18539 to <16 x i16>*
  %18541 = load <16 x i16>, <16 x i16>* %18540, align 2, !tbaa !399
  %18542 = shufflevector <16 x i16> %18538, <16 x i16> %18541, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18543 = add nsw i64 %18348, %18510
  %18544 = getelementptr inbounds i16, i16* %blur_x879, i64 %18543
  %18545 = bitcast i16* %18544 to <16 x i16>*
  %18546 = load <16 x i16>, <16 x i16>* %18545, align 2, !tbaa !399
  %18547 = getelementptr inbounds i16, i16* %18544, i64 16
  %18548 = bitcast i16* %18547 to <16 x i16>*
  %18549 = load <16 x i16>, <16 x i16>* %18548, align 2, !tbaa !399
  %18550 = shufflevector <16 x i16> %18546, <16 x i16> %18549, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18551 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18526, <32 x i16> %18534, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18552 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18550, <32 x i16> %18542, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18553 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18551, <32 x i16> %18552, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18554 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18553, <32 x i16> %18518, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18555 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18554, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18556 = shufflevector <32 x i16> %18555, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18557 = add nsw i64 %18352, %18510
  %18558 = getelementptr inbounds i16, i16* %263, i64 %18557
  %18559 = bitcast i16* %18558 to <16 x i16>*
  store <16 x i16> %18556, <16 x i16>* %18559, align 2, !tbaa !401
  %18560 = shufflevector <32 x i16> %18555, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18561 = getelementptr inbounds i16, i16* %18558, i64 16
  %18562 = bitcast i16* %18561 to <16 x i16>*
  store <16 x i16> %18560, <16 x i16>* %18562, align 2, !tbaa !401
  %18563 = add nuw nsw i32 %blur_y.s0.x.x.rebased1247, 1
  %.not2642 = icmp eq i32 %18563, %t1683898
  br i1 %.not2642, label %"end for blur_y.s0.x.x.rebased1246", label %"for blur_y.s0.x.x.rebased1245"

after_bb1257:                                     ; preds = %"end for blur_y.s0.x.x.rebased1246", %"produce blur_x1260"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1272.preheader", label %"end for blur_y.s0.x.x.rebased1273", !prof !386

"for blur_y.s0.x.x.rebased1272.preheader":        ; preds = %after_bb1257
  %18564 = sext i32 %t1694944 to i64
  %18565 = zext i32 %.pre-phi3604 to i64
  %18566 = mul nsw i64 %18565, %337
  %18567 = sub nsw i64 %18566, %298
  %18568 = zext i32 %.pre-phi3598 to i64
  %18569 = mul nsw i64 %18568, %337
  %18570 = sub nsw i64 %18569, %298
  %18571 = zext i32 %.pre-phi3570 to i64
  %18572 = mul nsw i64 %18571, %337
  %18573 = sub nsw i64 %18572, %298
  %18574 = zext i32 %.pre-phi3578 to i64
  %18575 = mul nsw i64 %18574, %337
  %18576 = sub nsw i64 %18575, %298
  %18577 = zext i32 %.pre-phi3574 to i64
  %18578 = mul nsw i64 %18577, %337
  %18579 = sub nsw i64 %18578, %298
  %18580 = sext i32 %a379 to i64
  %18581 = add nsw i64 %18580, 6
  %18582 = mul nsw i64 %18581, %334
  %18583 = add nsw i64 %18582, %338
  br label %"for blur_y.s0.x.x.rebased1272"

"produce blur_x1260":                             ; preds = %"end for blur_y.s0.x.x.rebased1246"
  %18584 = getelementptr inbounds i16, i16* %read_input822, i64 %371
  %18585 = getelementptr inbounds i16, i16* %18584, i64 -31
  %18586 = bitcast i16* %18585 to <16 x i16>*
  %18587 = load <16 x i16>, <16 x i16>* %18586, align 2, !tbaa !396
  %18588 = getelementptr inbounds i16, i16* %18584, i64 -15
  %18589 = bitcast i16* %18588 to <16 x i16>*
  %18590 = load <16 x i16>, <16 x i16>* %18589, align 2, !tbaa !396
  %18591 = shufflevector <16 x i16> %18587, <16 x i16> %18590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18592 = getelementptr inbounds i16, i16* %18584, i64 -32
  %18593 = bitcast i16* %18592 to <16 x i16>*
  %18594 = load <16 x i16>, <16 x i16>* %18593, align 2, !tbaa !396
  %18595 = getelementptr inbounds i16, i16* %18584, i64 -16
  %18596 = bitcast i16* %18595 to <16 x i16>*
  %18597 = load <16 x i16>, <16 x i16>* %18596, align 2, !tbaa !396
  %18598 = shufflevector <16 x i16> %18594, <16 x i16> %18597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18599 = getelementptr inbounds i16, i16* %18584, i64 -30
  %18600 = bitcast i16* %18599 to <16 x i16>*
  %18601 = load <16 x i16>, <16 x i16>* %18600, align 2, !tbaa !396
  %18602 = getelementptr inbounds i16, i16* %18584, i64 -14
  %18603 = bitcast i16* %18602 to <16 x i16>*
  %18604 = load <16 x i16>, <16 x i16>* %18603, align 2, !tbaa !396
  %18605 = shufflevector <16 x i16> %18601, <16 x i16> %18604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18606 = getelementptr inbounds i16, i16* %18584, i64 -28
  %18607 = bitcast i16* %18606 to <16 x i16>*
  %18608 = load <16 x i16>, <16 x i16>* %18607, align 2, !tbaa !396
  %18609 = getelementptr inbounds i16, i16* %18584, i64 -12
  %18610 = bitcast i16* %18609 to <16 x i16>*
  %18611 = load <16 x i16>, <16 x i16>* %18610, align 2, !tbaa !396
  %18612 = shufflevector <16 x i16> %18608, <16 x i16> %18611, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18613 = getelementptr inbounds i16, i16* %18584, i64 -29
  %18614 = bitcast i16* %18613 to <16 x i16>*
  %18615 = load <16 x i16>, <16 x i16>* %18614, align 2, !tbaa !396
  %18616 = getelementptr inbounds i16, i16* %18584, i64 -13
  %18617 = bitcast i16* %18616 to <16 x i16>*
  %18618 = load <16 x i16>, <16 x i16>* %18617, align 2, !tbaa !396
  %18619 = shufflevector <16 x i16> %18615, <16 x i16> %18618, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18620 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18598, <32 x i16> %18605, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18621 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18619, <32 x i16> %18612, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18622 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18620, <32 x i16> %18621, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18623 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18622, <32 x i16> %18591, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18624 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18623, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18625 = shufflevector <32 x i16> %18624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18626 = zext i32 %.pre-phi3578 to i64
  %18627 = mul nsw i64 %299, %18626
  %18628 = add nsw i64 %301, %18627
  %18629 = getelementptr inbounds i16, i16* %blur_x879, i64 %18628
  %18630 = getelementptr inbounds i16, i16* %18629, i64 -32
  %18631 = bitcast i16* %18630 to <16 x i16>*
  store <16 x i16> %18625, <16 x i16>* %18631, align 2, !tbaa !399
  %18632 = shufflevector <32 x i16> %18624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18633 = getelementptr inbounds i16, i16* %18629, i64 -16
  %18634 = bitcast i16* %18633 to <16 x i16>*
  store <16 x i16> %18632, <16 x i16>* %18634, align 2, !tbaa !399
  %18635 = zext i32 %.pre-phi3604 to i64
  %18636 = mul nsw i64 %18635, %333
  %18637 = add nsw i64 %18636, %296
  %18638 = getelementptr inbounds i16, i16* %blur_x879, i64 %18637
  %18639 = getelementptr inbounds i16, i16* %18638, i64 -32
  %18640 = bitcast i16* %18639 to <16 x i16>*
  %18641 = load <16 x i16>, <16 x i16>* %18640, align 2, !tbaa !399
  %18642 = getelementptr inbounds i16, i16* %18638, i64 -16
  %18643 = bitcast i16* %18642 to <16 x i16>*
  %18644 = load <16 x i16>, <16 x i16>* %18643, align 2, !tbaa !399
  %18645 = shufflevector <16 x i16> %18641, <16 x i16> %18644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18646 = zext i32 %.pre-phi3598 to i64
  %18647 = mul nsw i64 %18646, %333
  %18648 = add nsw i64 %18647, %296
  %18649 = getelementptr inbounds i16, i16* %blur_x879, i64 %18648
  %18650 = getelementptr inbounds i16, i16* %18649, i64 -32
  %18651 = bitcast i16* %18650 to <16 x i16>*
  %18652 = load <16 x i16>, <16 x i16>* %18651, align 2, !tbaa !399
  %18653 = getelementptr inbounds i16, i16* %18649, i64 -16
  %18654 = bitcast i16* %18653 to <16 x i16>*
  %18655 = load <16 x i16>, <16 x i16>* %18654, align 2, !tbaa !399
  %18656 = shufflevector <16 x i16> %18652, <16 x i16> %18655, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18657 = zext i32 %.pre-phi3570 to i64
  %18658 = mul nsw i64 %18657, %333
  %18659 = add nsw i64 %18658, %296
  %18660 = getelementptr inbounds i16, i16* %blur_x879, i64 %18659
  %18661 = getelementptr inbounds i16, i16* %18660, i64 -32
  %18662 = bitcast i16* %18661 to <16 x i16>*
  %18663 = load <16 x i16>, <16 x i16>* %18662, align 2, !tbaa !399
  %18664 = getelementptr inbounds i16, i16* %18660, i64 -16
  %18665 = bitcast i16* %18664 to <16 x i16>*
  %18666 = load <16 x i16>, <16 x i16>* %18665, align 2, !tbaa !399
  %18667 = shufflevector <16 x i16> %18663, <16 x i16> %18666, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18668 = mul nsw i64 %18626, %333
  %18669 = add nsw i64 %18668, %296
  %18670 = getelementptr inbounds i16, i16* %blur_x879, i64 %18669
  %18671 = getelementptr inbounds i16, i16* %18670, i64 -32
  %18672 = bitcast i16* %18671 to <16 x i16>*
  %18673 = load <16 x i16>, <16 x i16>* %18672, align 2, !tbaa !399
  %18674 = getelementptr inbounds i16, i16* %18670, i64 -16
  %18675 = bitcast i16* %18674 to <16 x i16>*
  %18676 = load <16 x i16>, <16 x i16>* %18675, align 2, !tbaa !399
  %18677 = shufflevector <16 x i16> %18673, <16 x i16> %18676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18678 = zext i32 %.pre-phi3574 to i64
  %18679 = mul nsw i64 %18678, %333
  %18680 = add nsw i64 %18679, %296
  %18681 = getelementptr inbounds i16, i16* %blur_x879, i64 %18680
  %18682 = getelementptr inbounds i16, i16* %18681, i64 -32
  %18683 = bitcast i16* %18682 to <16 x i16>*
  %18684 = load <16 x i16>, <16 x i16>* %18683, align 2, !tbaa !399
  %18685 = getelementptr inbounds i16, i16* %18681, i64 -16
  %18686 = bitcast i16* %18685 to <16 x i16>*
  %18687 = load <16 x i16>, <16 x i16>* %18686, align 2, !tbaa !399
  %18688 = shufflevector <16 x i16> %18684, <16 x i16> %18687, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18689 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18656, <32 x i16> %18667, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18690 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18688, <32 x i16> %18677, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18691 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18689, <32 x i16> %18690, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18692 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18691, <32 x i16> %18645, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18693 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18692, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18694 = shufflevector <32 x i16> %18693, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18695 = sext i32 %a379 to i64
  %18696 = add nsw i64 %18695, 6
  %18697 = mul nsw i64 %18696, %334
  %18698 = add nsw i64 %336, %18697
  %18699 = getelementptr inbounds i16, i16* %263, i64 %18698
  %18700 = getelementptr inbounds i16, i16* %18699, i64 -32
  %18701 = bitcast i16* %18700 to <16 x i16>*
  store <16 x i16> %18694, <16 x i16>* %18701, align 2, !tbaa !401
  %18702 = shufflevector <32 x i16> %18693, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18703 = getelementptr inbounds i16, i16* %18699, i64 -16
  %18704 = bitcast i16* %18703 to <16 x i16>*
  store <16 x i16> %18702, <16 x i16>* %18704, align 2, !tbaa !401
  br label %after_bb1257

"for blur_y.s0.x.x.rebased1272":                  ; preds = %"for blur_y.s0.x.x.rebased1272.preheader", %"consume blur_x1280"
  %indvars.iv3395 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1272.preheader" ], [ %indvars.iv.next3396, %"consume blur_x1280" ]
  %18705 = add nsw i64 %indvars.iv3395, %303
  %18706 = icmp slt i64 %18705, 1
  %18707 = trunc i64 %18705 to i32
  %18708 = shl nsw i32 %18707, 5
  %18709 = icmp sgt i32 %198, %18708
  %18710 = or i1 %18706, %18709
  br i1 %18710, label %"produce blur_x1278", label %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge"

"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1272"
  %.pre3611 = shl nsw i64 %18705, 5
  br label %"consume blur_x1280"

"end for blur_y.s0.x.x.rebased1273":              ; preds = %"consume blur_x1280", %after_bb1257
  br i1 %304, label %"for blur_y.s0.x.x.rebased1288.preheader", label %"end for blur_y.s0.x.x.rebased1289", !prof !386

"for blur_y.s0.x.x.rebased1288.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1273"
  %18711 = sext i32 %t1694944 to i64
  %18712 = zext i32 %.pre-phi3604 to i64
  %18713 = mul nsw i64 %18712, %337
  %18714 = sub nsw i64 %18713, %298
  %18715 = zext i32 %.pre-phi3598 to i64
  %18716 = mul nsw i64 %18715, %337
  %18717 = sub nsw i64 %18716, %298
  %18718 = zext i32 %.pre-phi3570 to i64
  %18719 = mul nsw i64 %18718, %337
  %18720 = sub nsw i64 %18719, %298
  %18721 = zext i32 %.pre-phi3578 to i64
  %18722 = mul nsw i64 %18721, %337
  %18723 = sub nsw i64 %18722, %298
  %18724 = zext i32 %.pre-phi3574 to i64
  %18725 = mul nsw i64 %18724, %337
  %18726 = sub nsw i64 %18725, %298
  %18727 = sext i32 %a379 to i64
  %18728 = add nsw i64 %18727, 6
  %18729 = mul nsw i64 %18728, %334
  %18730 = add nsw i64 %18729, %338
  br label %"for blur_y.s0.x.x.rebased1288"

"produce blur_x1278":                             ; preds = %"for blur_y.s0.x.x.rebased1272"
  %t8081279 = add nsw i32 %373, %18708
  %18731 = sext i32 %t8081279 to i64
  %18732 = getelementptr inbounds i16, i16* %read_input822, i64 %18731
  %18733 = getelementptr inbounds i16, i16* %18732, i64 1
  %18734 = bitcast i16* %18733 to <16 x i16>*
  %18735 = load <16 x i16>, <16 x i16>* %18734, align 2, !tbaa !396
  %18736 = getelementptr inbounds i16, i16* %18732, i64 17
  %18737 = bitcast i16* %18736 to <16 x i16>*
  %18738 = load <16 x i16>, <16 x i16>* %18737, align 2, !tbaa !396
  %18739 = shufflevector <16 x i16> %18735, <16 x i16> %18738, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18740 = bitcast i16* %18732 to <16 x i16>*
  %18741 = load <16 x i16>, <16 x i16>* %18740, align 2, !tbaa !396
  %18742 = getelementptr inbounds i16, i16* %18732, i64 16
  %18743 = bitcast i16* %18742 to <16 x i16>*
  %18744 = load <16 x i16>, <16 x i16>* %18743, align 2, !tbaa !396
  %18745 = shufflevector <16 x i16> %18741, <16 x i16> %18744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18746 = getelementptr inbounds i16, i16* %18732, i64 2
  %18747 = bitcast i16* %18746 to <16 x i16>*
  %18748 = load <16 x i16>, <16 x i16>* %18747, align 2, !tbaa !396
  %18749 = getelementptr inbounds i16, i16* %18732, i64 18
  %18750 = bitcast i16* %18749 to <16 x i16>*
  %18751 = load <16 x i16>, <16 x i16>* %18750, align 2, !tbaa !396
  %18752 = shufflevector <16 x i16> %18748, <16 x i16> %18751, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18753 = getelementptr inbounds i16, i16* %18732, i64 4
  %18754 = bitcast i16* %18753 to <16 x i16>*
  %18755 = load <16 x i16>, <16 x i16>* %18754, align 2, !tbaa !396
  %18756 = getelementptr inbounds i16, i16* %18732, i64 20
  %18757 = bitcast i16* %18756 to <16 x i16>*
  %18758 = load <16 x i16>, <16 x i16>* %18757, align 2, !tbaa !396
  %18759 = shufflevector <16 x i16> %18755, <16 x i16> %18758, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18760 = getelementptr inbounds i16, i16* %18732, i64 3
  %18761 = bitcast i16* %18760 to <16 x i16>*
  %18762 = load <16 x i16>, <16 x i16>* %18761, align 2, !tbaa !396
  %18763 = getelementptr inbounds i16, i16* %18732, i64 19
  %18764 = bitcast i16* %18763 to <16 x i16>*
  %18765 = load <16 x i16>, <16 x i16>* %18764, align 2, !tbaa !396
  %18766 = shufflevector <16 x i16> %18762, <16 x i16> %18765, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18767 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18745, <32 x i16> %18752, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18768 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18766, <32 x i16> %18759, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18769 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18767, <32 x i16> %18768, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18770 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18769, <32 x i16> %18739, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18771 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18770, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18772 = shufflevector <32 x i16> %18771, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18773 = shl nsw i64 %18705, 5
  %18774 = add nsw i64 %18773, %18564
  %18775 = getelementptr inbounds i16, i16* %blur_x879, i64 %18774
  %18776 = bitcast i16* %18775 to <16 x i16>*
  store <16 x i16> %18772, <16 x i16>* %18776, align 2, !tbaa !399
  %18777 = shufflevector <32 x i16> %18771, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18778 = getelementptr inbounds i16, i16* %18775, i64 16
  %18779 = bitcast i16* %18778 to <16 x i16>*
  store <16 x i16> %18777, <16 x i16>* %18779, align 2, !tbaa !399
  br label %"consume blur_x1280"

"consume blur_x1280":                             ; preds = %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge", %"produce blur_x1278"
  %.pre-phi3612 = phi i64 [ %.pre3611, %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge" ], [ %18773, %"produce blur_x1278" ]
  %18780 = add nsw i64 %18567, %.pre-phi3612
  %18781 = getelementptr inbounds i16, i16* %blur_x879, i64 %18780
  %18782 = bitcast i16* %18781 to <16 x i16>*
  %18783 = load <16 x i16>, <16 x i16>* %18782, align 2, !tbaa !399
  %18784 = getelementptr inbounds i16, i16* %18781, i64 16
  %18785 = bitcast i16* %18784 to <16 x i16>*
  %18786 = load <16 x i16>, <16 x i16>* %18785, align 2, !tbaa !399
  %18787 = shufflevector <16 x i16> %18783, <16 x i16> %18786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18788 = add nsw i64 %18570, %.pre-phi3612
  %18789 = getelementptr inbounds i16, i16* %blur_x879, i64 %18788
  %18790 = bitcast i16* %18789 to <16 x i16>*
  %18791 = load <16 x i16>, <16 x i16>* %18790, align 2, !tbaa !399
  %18792 = getelementptr inbounds i16, i16* %18789, i64 16
  %18793 = bitcast i16* %18792 to <16 x i16>*
  %18794 = load <16 x i16>, <16 x i16>* %18793, align 2, !tbaa !399
  %18795 = shufflevector <16 x i16> %18791, <16 x i16> %18794, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18796 = add nsw i64 %18573, %.pre-phi3612
  %18797 = getelementptr inbounds i16, i16* %blur_x879, i64 %18796
  %18798 = bitcast i16* %18797 to <16 x i16>*
  %18799 = load <16 x i16>, <16 x i16>* %18798, align 2, !tbaa !399
  %18800 = getelementptr inbounds i16, i16* %18797, i64 16
  %18801 = bitcast i16* %18800 to <16 x i16>*
  %18802 = load <16 x i16>, <16 x i16>* %18801, align 2, !tbaa !399
  %18803 = shufflevector <16 x i16> %18799, <16 x i16> %18802, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18804 = add nsw i64 %18576, %.pre-phi3612
  %18805 = getelementptr inbounds i16, i16* %blur_x879, i64 %18804
  %18806 = bitcast i16* %18805 to <16 x i16>*
  %18807 = load <16 x i16>, <16 x i16>* %18806, align 2, !tbaa !399
  %18808 = getelementptr inbounds i16, i16* %18805, i64 16
  %18809 = bitcast i16* %18808 to <16 x i16>*
  %18810 = load <16 x i16>, <16 x i16>* %18809, align 2, !tbaa !399
  %18811 = shufflevector <16 x i16> %18807, <16 x i16> %18810, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18812 = add nsw i64 %18579, %.pre-phi3612
  %18813 = getelementptr inbounds i16, i16* %blur_x879, i64 %18812
  %18814 = bitcast i16* %18813 to <16 x i16>*
  %18815 = load <16 x i16>, <16 x i16>* %18814, align 2, !tbaa !399
  %18816 = getelementptr inbounds i16, i16* %18813, i64 16
  %18817 = bitcast i16* %18816 to <16 x i16>*
  %18818 = load <16 x i16>, <16 x i16>* %18817, align 2, !tbaa !399
  %18819 = shufflevector <16 x i16> %18815, <16 x i16> %18818, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18820 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18795, <32 x i16> %18803, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18821 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18819, <32 x i16> %18811, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18822 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18820, <32 x i16> %18821, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18823 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18822, <32 x i16> %18787, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18824 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18823, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18825 = shufflevector <32 x i16> %18824, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18826 = add nsw i64 %18583, %.pre-phi3612
  %18827 = getelementptr inbounds i16, i16* %263, i64 %18826
  %18828 = bitcast i16* %18827 to <16 x i16>*
  store <16 x i16> %18825, <16 x i16>* %18828, align 2, !tbaa !401
  %18829 = shufflevector <32 x i16> %18824, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18830 = getelementptr inbounds i16, i16* %18827, i64 16
  %18831 = bitcast i16* %18830 to <16 x i16>*
  store <16 x i16> %18829, <16 x i16>* %18831, align 2, !tbaa !401
  %indvars.iv.next3396 = add nuw nsw i64 %indvars.iv3395, 1
  %18832 = icmp eq i64 %indvars.iv.next3396, %zext3397
  br i1 %18832, label %"end for blur_y.s0.x.x.rebased1273", label %"for blur_y.s0.x.x.rebased1272"

"for blur_y.s0.x.x.rebased1288":                  ; preds = %"for blur_y.s0.x.x.rebased1288.preheader", %"consume blur_x1299"
  %blur_y.s0.x.x.rebased1290 = phi i32 [ %18941, %"consume blur_x1299" ], [ 0, %"for blur_y.s0.x.x.rebased1288.preheader" ]
  %18833 = add nsw i32 %blur_y.s0.x.x.rebased1290, %t1626814
  %a2251 = shl nsw i32 %18833, 5
  %18834 = icmp sgt i32 %t1647, %a2251
  %blur_y.s0.x.v0.base.s1291 = select i1 %18834, i32 %a2251, i32 %t1647
  %18835 = icmp slt i32 %18833, 1
  %18836 = icmp sgt i32 %198, %a2251
  %18837 = or i1 %18835, %18836
  br i1 %18837, label %"produce blur_x1296", label %"consume blur_x1299"

"end for blur_y.s0.x.x.rebased1289":              ; preds = %"consume blur_x1299", %"end for blur_y.s0.x.x.rebased1273"
  br i1 %229, label %"produce blur_x1303", label %after_bb1300

"produce blur_x1296":                             ; preds = %"for blur_y.s0.x.x.rebased1288"
  %18838 = icmp slt i32 %blur_y.s0.x.v0.base.s1291, %198
  %blur_x.s0.x.v1.base.s1297 = select i1 %18838, i32 %blur_y.s0.x.v0.base.s1291, i32 %198
  %t8131298 = add nsw i32 %373, %blur_x.s0.x.v1.base.s1297
  %18839 = sext i32 %t8131298 to i64
  %18840 = getelementptr inbounds i16, i16* %read_input822, i64 %18839
  %18841 = getelementptr inbounds i16, i16* %18840, i64 1
  %18842 = bitcast i16* %18841 to <16 x i16>*
  %18843 = load <16 x i16>, <16 x i16>* %18842, align 2, !tbaa !396
  %18844 = getelementptr inbounds i16, i16* %18840, i64 17
  %18845 = bitcast i16* %18844 to <16 x i16>*
  %18846 = load <16 x i16>, <16 x i16>* %18845, align 2, !tbaa !396
  %18847 = shufflevector <16 x i16> %18843, <16 x i16> %18846, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18848 = bitcast i16* %18840 to <16 x i16>*
  %18849 = load <16 x i16>, <16 x i16>* %18848, align 2, !tbaa !396
  %18850 = getelementptr inbounds i16, i16* %18840, i64 16
  %18851 = bitcast i16* %18850 to <16 x i16>*
  %18852 = load <16 x i16>, <16 x i16>* %18851, align 2, !tbaa !396
  %18853 = shufflevector <16 x i16> %18849, <16 x i16> %18852, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18854 = getelementptr inbounds i16, i16* %18840, i64 2
  %18855 = bitcast i16* %18854 to <16 x i16>*
  %18856 = load <16 x i16>, <16 x i16>* %18855, align 2, !tbaa !396
  %18857 = getelementptr inbounds i16, i16* %18840, i64 18
  %18858 = bitcast i16* %18857 to <16 x i16>*
  %18859 = load <16 x i16>, <16 x i16>* %18858, align 2, !tbaa !396
  %18860 = shufflevector <16 x i16> %18856, <16 x i16> %18859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18861 = getelementptr inbounds i16, i16* %18840, i64 4
  %18862 = bitcast i16* %18861 to <16 x i16>*
  %18863 = load <16 x i16>, <16 x i16>* %18862, align 2, !tbaa !396
  %18864 = getelementptr inbounds i16, i16* %18840, i64 20
  %18865 = bitcast i16* %18864 to <16 x i16>*
  %18866 = load <16 x i16>, <16 x i16>* %18865, align 2, !tbaa !396
  %18867 = shufflevector <16 x i16> %18863, <16 x i16> %18866, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18868 = getelementptr inbounds i16, i16* %18840, i64 3
  %18869 = bitcast i16* %18868 to <16 x i16>*
  %18870 = load <16 x i16>, <16 x i16>* %18869, align 2, !tbaa !396
  %18871 = getelementptr inbounds i16, i16* %18840, i64 19
  %18872 = bitcast i16* %18871 to <16 x i16>*
  %18873 = load <16 x i16>, <16 x i16>* %18872, align 2, !tbaa !396
  %18874 = shufflevector <16 x i16> %18870, <16 x i16> %18873, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18875 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18853, <32 x i16> %18860, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18876 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18874, <32 x i16> %18867, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18877 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18875, <32 x i16> %18876, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18878 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18877, <32 x i16> %18847, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18879 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18878, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18880 = shufflevector <32 x i16> %18879, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18881 = sext i32 %blur_x.s0.x.v1.base.s1297 to i64
  %18882 = add nsw i64 %18881, %18711
  %18883 = getelementptr inbounds i16, i16* %blur_x879, i64 %18882
  %18884 = bitcast i16* %18883 to <16 x i16>*
  store <16 x i16> %18880, <16 x i16>* %18884, align 2, !tbaa !399
  %18885 = shufflevector <32 x i16> %18879, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18886 = getelementptr inbounds i16, i16* %18883, i64 16
  %18887 = bitcast i16* %18886 to <16 x i16>*
  store <16 x i16> %18885, <16 x i16>* %18887, align 2, !tbaa !399
  br label %"consume blur_x1299"

"consume blur_x1299":                             ; preds = %"for blur_y.s0.x.x.rebased1288", %"produce blur_x1296"
  %18888 = sext i32 %blur_y.s0.x.v0.base.s1291 to i64
  %18889 = add nsw i64 %18714, %18888
  %18890 = getelementptr inbounds i16, i16* %blur_x879, i64 %18889
  %18891 = bitcast i16* %18890 to <16 x i16>*
  %18892 = load <16 x i16>, <16 x i16>* %18891, align 2, !tbaa !399
  %18893 = getelementptr inbounds i16, i16* %18890, i64 16
  %18894 = bitcast i16* %18893 to <16 x i16>*
  %18895 = load <16 x i16>, <16 x i16>* %18894, align 2, !tbaa !399
  %18896 = shufflevector <16 x i16> %18892, <16 x i16> %18895, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18897 = add nsw i64 %18717, %18888
  %18898 = getelementptr inbounds i16, i16* %blur_x879, i64 %18897
  %18899 = bitcast i16* %18898 to <16 x i16>*
  %18900 = load <16 x i16>, <16 x i16>* %18899, align 2, !tbaa !399
  %18901 = getelementptr inbounds i16, i16* %18898, i64 16
  %18902 = bitcast i16* %18901 to <16 x i16>*
  %18903 = load <16 x i16>, <16 x i16>* %18902, align 2, !tbaa !399
  %18904 = shufflevector <16 x i16> %18900, <16 x i16> %18903, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18905 = add nsw i64 %18720, %18888
  %18906 = getelementptr inbounds i16, i16* %blur_x879, i64 %18905
  %18907 = bitcast i16* %18906 to <16 x i16>*
  %18908 = load <16 x i16>, <16 x i16>* %18907, align 2, !tbaa !399
  %18909 = getelementptr inbounds i16, i16* %18906, i64 16
  %18910 = bitcast i16* %18909 to <16 x i16>*
  %18911 = load <16 x i16>, <16 x i16>* %18910, align 2, !tbaa !399
  %18912 = shufflevector <16 x i16> %18908, <16 x i16> %18911, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18913 = add nsw i64 %18723, %18888
  %18914 = getelementptr inbounds i16, i16* %blur_x879, i64 %18913
  %18915 = bitcast i16* %18914 to <16 x i16>*
  %18916 = load <16 x i16>, <16 x i16>* %18915, align 2, !tbaa !399
  %18917 = getelementptr inbounds i16, i16* %18914, i64 16
  %18918 = bitcast i16* %18917 to <16 x i16>*
  %18919 = load <16 x i16>, <16 x i16>* %18918, align 2, !tbaa !399
  %18920 = shufflevector <16 x i16> %18916, <16 x i16> %18919, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18921 = add nsw i64 %18726, %18888
  %18922 = getelementptr inbounds i16, i16* %blur_x879, i64 %18921
  %18923 = bitcast i16* %18922 to <16 x i16>*
  %18924 = load <16 x i16>, <16 x i16>* %18923, align 2, !tbaa !399
  %18925 = getelementptr inbounds i16, i16* %18922, i64 16
  %18926 = bitcast i16* %18925 to <16 x i16>*
  %18927 = load <16 x i16>, <16 x i16>* %18926, align 2, !tbaa !399
  %18928 = shufflevector <16 x i16> %18924, <16 x i16> %18927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18929 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18904, <32 x i16> %18912, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18930 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18928, <32 x i16> %18920, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18931 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18929, <32 x i16> %18930, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18932 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18931, <32 x i16> %18896, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18933 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18932, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18934 = shufflevector <32 x i16> %18933, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18935 = add nsw i64 %18730, %18888
  %18936 = getelementptr inbounds i16, i16* %263, i64 %18935
  %18937 = bitcast i16* %18936 to <16 x i16>*
  store <16 x i16> %18934, <16 x i16>* %18937, align 2, !tbaa !401
  %18938 = shufflevector <32 x i16> %18933, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18939 = getelementptr inbounds i16, i16* %18936, i64 16
  %18940 = bitcast i16* %18939 to <16 x i16>*
  store <16 x i16> %18938, <16 x i16>* %18940, align 2, !tbaa !401
  %18941 = add nuw nsw i32 %blur_y.s0.x.x.rebased1290, 1
  %.not2638 = icmp eq i32 %18941, %t1683898
  br i1 %.not2638, label %"end for blur_y.s0.x.x.rebased1289", label %"for blur_y.s0.x.x.rebased1288"

after_bb1300:                                     ; preds = %"end for blur_y.s0.x.x.rebased1289", %"produce blur_x1303"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1315.preheader", label %"end for blur_y.s0.x.x.rebased1316", !prof !386

"for blur_y.s0.x.x.rebased1315.preheader":        ; preds = %after_bb1300
  %18942 = sext i32 %t1700974 to i64
  %18943 = zext i32 %.pre-phi3570 to i64
  %18944 = mul nsw i64 %18943, %337
  %18945 = sub nsw i64 %18944, %298
  %18946 = zext i32 %.pre-phi3604 to i64
  %18947 = mul nsw i64 %18946, %337
  %18948 = sub nsw i64 %18947, %298
  %18949 = zext i32 %.pre-phi3574 to i64
  %18950 = mul nsw i64 %18949, %337
  %18951 = sub nsw i64 %18950, %298
  %18952 = zext i32 %.pre-phi3582 to i64
  %18953 = mul nsw i64 %18952, %337
  %18954 = sub nsw i64 %18953, %298
  %18955 = zext i32 %.pre-phi3578 to i64
  %18956 = mul nsw i64 %18955, %337
  %18957 = sub nsw i64 %18956, %298
  %18958 = sext i32 %a379 to i64
  %18959 = add nsw i64 %18958, 7
  %18960 = mul nsw i64 %18959, %334
  %18961 = add nsw i64 %18960, %338
  br label %"for blur_y.s0.x.x.rebased1315"

"produce blur_x1303":                             ; preds = %"end for blur_y.s0.x.x.rebased1289"
  %18962 = getelementptr inbounds i16, i16* %read_input822, i64 %377
  %18963 = getelementptr inbounds i16, i16* %18962, i64 -31
  %18964 = bitcast i16* %18963 to <16 x i16>*
  %18965 = load <16 x i16>, <16 x i16>* %18964, align 2, !tbaa !396
  %18966 = getelementptr inbounds i16, i16* %18962, i64 -15
  %18967 = bitcast i16* %18966 to <16 x i16>*
  %18968 = load <16 x i16>, <16 x i16>* %18967, align 2, !tbaa !396
  %18969 = shufflevector <16 x i16> %18965, <16 x i16> %18968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18970 = getelementptr inbounds i16, i16* %18962, i64 -32
  %18971 = bitcast i16* %18970 to <16 x i16>*
  %18972 = load <16 x i16>, <16 x i16>* %18971, align 2, !tbaa !396
  %18973 = getelementptr inbounds i16, i16* %18962, i64 -16
  %18974 = bitcast i16* %18973 to <16 x i16>*
  %18975 = load <16 x i16>, <16 x i16>* %18974, align 2, !tbaa !396
  %18976 = shufflevector <16 x i16> %18972, <16 x i16> %18975, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18977 = getelementptr inbounds i16, i16* %18962, i64 -30
  %18978 = bitcast i16* %18977 to <16 x i16>*
  %18979 = load <16 x i16>, <16 x i16>* %18978, align 2, !tbaa !396
  %18980 = getelementptr inbounds i16, i16* %18962, i64 -14
  %18981 = bitcast i16* %18980 to <16 x i16>*
  %18982 = load <16 x i16>, <16 x i16>* %18981, align 2, !tbaa !396
  %18983 = shufflevector <16 x i16> %18979, <16 x i16> %18982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18984 = getelementptr inbounds i16, i16* %18962, i64 -28
  %18985 = bitcast i16* %18984 to <16 x i16>*
  %18986 = load <16 x i16>, <16 x i16>* %18985, align 2, !tbaa !396
  %18987 = getelementptr inbounds i16, i16* %18962, i64 -12
  %18988 = bitcast i16* %18987 to <16 x i16>*
  %18989 = load <16 x i16>, <16 x i16>* %18988, align 2, !tbaa !396
  %18990 = shufflevector <16 x i16> %18986, <16 x i16> %18989, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18991 = getelementptr inbounds i16, i16* %18962, i64 -29
  %18992 = bitcast i16* %18991 to <16 x i16>*
  %18993 = load <16 x i16>, <16 x i16>* %18992, align 2, !tbaa !396
  %18994 = getelementptr inbounds i16, i16* %18962, i64 -13
  %18995 = bitcast i16* %18994 to <16 x i16>*
  %18996 = load <16 x i16>, <16 x i16>* %18995, align 2, !tbaa !396
  %18997 = shufflevector <16 x i16> %18993, <16 x i16> %18996, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18998 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18976, <32 x i16> %18983, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18999 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18997, <32 x i16> %18990, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19000 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18998, <32 x i16> %18999, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19001 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19000, <32 x i16> %18969, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19002 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19001, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19003 = shufflevector <32 x i16> %19002, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19004 = zext i32 %.pre-phi3582 to i64
  %19005 = mul nsw i64 %299, %19004
  %19006 = add nsw i64 %301, %19005
  %19007 = getelementptr inbounds i16, i16* %blur_x879, i64 %19006
  %19008 = getelementptr inbounds i16, i16* %19007, i64 -32
  %19009 = bitcast i16* %19008 to <16 x i16>*
  store <16 x i16> %19003, <16 x i16>* %19009, align 2, !tbaa !399
  %19010 = shufflevector <32 x i16> %19002, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19011 = getelementptr inbounds i16, i16* %19007, i64 -16
  %19012 = bitcast i16* %19011 to <16 x i16>*
  store <16 x i16> %19010, <16 x i16>* %19012, align 2, !tbaa !399
  %19013 = zext i32 %.pre-phi3570 to i64
  %19014 = mul nsw i64 %19013, %333
  %19015 = add nsw i64 %19014, %296
  %19016 = getelementptr inbounds i16, i16* %blur_x879, i64 %19015
  %19017 = getelementptr inbounds i16, i16* %19016, i64 -32
  %19018 = bitcast i16* %19017 to <16 x i16>*
  %19019 = load <16 x i16>, <16 x i16>* %19018, align 2, !tbaa !399
  %19020 = getelementptr inbounds i16, i16* %19016, i64 -16
  %19021 = bitcast i16* %19020 to <16 x i16>*
  %19022 = load <16 x i16>, <16 x i16>* %19021, align 2, !tbaa !399
  %19023 = shufflevector <16 x i16> %19019, <16 x i16> %19022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19024 = zext i32 %.pre-phi3604 to i64
  %19025 = mul nsw i64 %19024, %333
  %19026 = add nsw i64 %19025, %296
  %19027 = getelementptr inbounds i16, i16* %blur_x879, i64 %19026
  %19028 = getelementptr inbounds i16, i16* %19027, i64 -32
  %19029 = bitcast i16* %19028 to <16 x i16>*
  %19030 = load <16 x i16>, <16 x i16>* %19029, align 2, !tbaa !399
  %19031 = getelementptr inbounds i16, i16* %19027, i64 -16
  %19032 = bitcast i16* %19031 to <16 x i16>*
  %19033 = load <16 x i16>, <16 x i16>* %19032, align 2, !tbaa !399
  %19034 = shufflevector <16 x i16> %19030, <16 x i16> %19033, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19035 = zext i32 %.pre-phi3574 to i64
  %19036 = mul nsw i64 %19035, %333
  %19037 = add nsw i64 %19036, %296
  %19038 = getelementptr inbounds i16, i16* %blur_x879, i64 %19037
  %19039 = getelementptr inbounds i16, i16* %19038, i64 -32
  %19040 = bitcast i16* %19039 to <16 x i16>*
  %19041 = load <16 x i16>, <16 x i16>* %19040, align 2, !tbaa !399
  %19042 = getelementptr inbounds i16, i16* %19038, i64 -16
  %19043 = bitcast i16* %19042 to <16 x i16>*
  %19044 = load <16 x i16>, <16 x i16>* %19043, align 2, !tbaa !399
  %19045 = shufflevector <16 x i16> %19041, <16 x i16> %19044, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19046 = mul nsw i64 %19004, %333
  %19047 = add nsw i64 %19046, %296
  %19048 = getelementptr inbounds i16, i16* %blur_x879, i64 %19047
  %19049 = getelementptr inbounds i16, i16* %19048, i64 -32
  %19050 = bitcast i16* %19049 to <16 x i16>*
  %19051 = load <16 x i16>, <16 x i16>* %19050, align 2, !tbaa !399
  %19052 = getelementptr inbounds i16, i16* %19048, i64 -16
  %19053 = bitcast i16* %19052 to <16 x i16>*
  %19054 = load <16 x i16>, <16 x i16>* %19053, align 2, !tbaa !399
  %19055 = shufflevector <16 x i16> %19051, <16 x i16> %19054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19056 = zext i32 %.pre-phi3578 to i64
  %19057 = mul nsw i64 %19056, %333
  %19058 = add nsw i64 %19057, %296
  %19059 = getelementptr inbounds i16, i16* %blur_x879, i64 %19058
  %19060 = getelementptr inbounds i16, i16* %19059, i64 -32
  %19061 = bitcast i16* %19060 to <16 x i16>*
  %19062 = load <16 x i16>, <16 x i16>* %19061, align 2, !tbaa !399
  %19063 = getelementptr inbounds i16, i16* %19059, i64 -16
  %19064 = bitcast i16* %19063 to <16 x i16>*
  %19065 = load <16 x i16>, <16 x i16>* %19064, align 2, !tbaa !399
  %19066 = shufflevector <16 x i16> %19062, <16 x i16> %19065, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19067 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19034, <32 x i16> %19045, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19068 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19066, <32 x i16> %19055, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19069 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19067, <32 x i16> %19068, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19070 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19069, <32 x i16> %19023, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19071 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19070, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19072 = shufflevector <32 x i16> %19071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19073 = sext i32 %a379 to i64
  %19074 = add nsw i64 %19073, 7
  %19075 = mul nsw i64 %19074, %334
  %19076 = add nsw i64 %336, %19075
  %19077 = getelementptr inbounds i16, i16* %263, i64 %19076
  %19078 = getelementptr inbounds i16, i16* %19077, i64 -32
  %19079 = bitcast i16* %19078 to <16 x i16>*
  store <16 x i16> %19072, <16 x i16>* %19079, align 2, !tbaa !401
  %19080 = shufflevector <32 x i16> %19071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19081 = getelementptr inbounds i16, i16* %19077, i64 -16
  %19082 = bitcast i16* %19081 to <16 x i16>*
  store <16 x i16> %19080, <16 x i16>* %19082, align 2, !tbaa !401
  br label %after_bb1300

"for blur_y.s0.x.x.rebased1315":                  ; preds = %"for blur_y.s0.x.x.rebased1315.preheader", %"consume blur_x1323"
  %indvars.iv3398 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1315.preheader" ], [ %indvars.iv.next3399, %"consume blur_x1323" ]
  %19083 = add nsw i64 %indvars.iv3398, %303
  %19084 = icmp slt i64 %19083, 1
  %19085 = trunc i64 %19083 to i32
  %19086 = shl nsw i32 %19085, 5
  %19087 = icmp sgt i32 %198, %19086
  %19088 = or i1 %19084, %19087
  br i1 %19088, label %"produce blur_x1321", label %"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge"

"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1315"
  %.pre3613 = shl nsw i64 %19083, 5
  br label %"consume blur_x1323"

"end for blur_y.s0.x.x.rebased1316":              ; preds = %"consume blur_x1323", %after_bb1300
  br i1 %304, label %"for blur_y.s0.x.x.rebased1331.preheader", label %"end for blur_y.s0.x.x.rebased1332", !prof !386

"for blur_y.s0.x.x.rebased1331.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1316"
  %19089 = sext i32 %t1700974 to i64
  %19090 = zext i32 %.pre-phi3570 to i64
  %19091 = mul nsw i64 %19090, %337
  %19092 = sub nsw i64 %19091, %298
  %19093 = zext i32 %.pre-phi3604 to i64
  %19094 = mul nsw i64 %19093, %337
  %19095 = sub nsw i64 %19094, %298
  %19096 = zext i32 %.pre-phi3574 to i64
  %19097 = mul nsw i64 %19096, %337
  %19098 = sub nsw i64 %19097, %298
  %19099 = zext i32 %.pre-phi3582 to i64
  %19100 = mul nsw i64 %19099, %337
  %19101 = sub nsw i64 %19100, %298
  %19102 = zext i32 %.pre-phi3578 to i64
  %19103 = mul nsw i64 %19102, %337
  %19104 = sub nsw i64 %19103, %298
  %19105 = sext i32 %a379 to i64
  %19106 = add nsw i64 %19105, 7
  %19107 = mul nsw i64 %19106, %334
  %19108 = add nsw i64 %19107, %338
  br label %"for blur_y.s0.x.x.rebased1331"

"produce blur_x1321":                             ; preds = %"for blur_y.s0.x.x.rebased1315"
  %t8241322 = add nsw i32 %379, %19086
  %19109 = sext i32 %t8241322 to i64
  %19110 = getelementptr inbounds i16, i16* %read_input822, i64 %19109
  %19111 = getelementptr inbounds i16, i16* %19110, i64 1
  %19112 = bitcast i16* %19111 to <16 x i16>*
  %19113 = load <16 x i16>, <16 x i16>* %19112, align 2, !tbaa !396
  %19114 = getelementptr inbounds i16, i16* %19110, i64 17
  %19115 = bitcast i16* %19114 to <16 x i16>*
  %19116 = load <16 x i16>, <16 x i16>* %19115, align 2, !tbaa !396
  %19117 = shufflevector <16 x i16> %19113, <16 x i16> %19116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19118 = bitcast i16* %19110 to <16 x i16>*
  %19119 = load <16 x i16>, <16 x i16>* %19118, align 2, !tbaa !396
  %19120 = getelementptr inbounds i16, i16* %19110, i64 16
  %19121 = bitcast i16* %19120 to <16 x i16>*
  %19122 = load <16 x i16>, <16 x i16>* %19121, align 2, !tbaa !396
  %19123 = shufflevector <16 x i16> %19119, <16 x i16> %19122, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19124 = getelementptr inbounds i16, i16* %19110, i64 2
  %19125 = bitcast i16* %19124 to <16 x i16>*
  %19126 = load <16 x i16>, <16 x i16>* %19125, align 2, !tbaa !396
  %19127 = getelementptr inbounds i16, i16* %19110, i64 18
  %19128 = bitcast i16* %19127 to <16 x i16>*
  %19129 = load <16 x i16>, <16 x i16>* %19128, align 2, !tbaa !396
  %19130 = shufflevector <16 x i16> %19126, <16 x i16> %19129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19131 = getelementptr inbounds i16, i16* %19110, i64 4
  %19132 = bitcast i16* %19131 to <16 x i16>*
  %19133 = load <16 x i16>, <16 x i16>* %19132, align 2, !tbaa !396
  %19134 = getelementptr inbounds i16, i16* %19110, i64 20
  %19135 = bitcast i16* %19134 to <16 x i16>*
  %19136 = load <16 x i16>, <16 x i16>* %19135, align 2, !tbaa !396
  %19137 = shufflevector <16 x i16> %19133, <16 x i16> %19136, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19138 = getelementptr inbounds i16, i16* %19110, i64 3
  %19139 = bitcast i16* %19138 to <16 x i16>*
  %19140 = load <16 x i16>, <16 x i16>* %19139, align 2, !tbaa !396
  %19141 = getelementptr inbounds i16, i16* %19110, i64 19
  %19142 = bitcast i16* %19141 to <16 x i16>*
  %19143 = load <16 x i16>, <16 x i16>* %19142, align 2, !tbaa !396
  %19144 = shufflevector <16 x i16> %19140, <16 x i16> %19143, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19145 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19123, <32 x i16> %19130, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19146 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19144, <32 x i16> %19137, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19147 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19145, <32 x i16> %19146, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19148 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19147, <32 x i16> %19117, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19149 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19148, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19150 = shufflevector <32 x i16> %19149, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19151 = shl nsw i64 %19083, 5
  %19152 = add nsw i64 %19151, %18942
  %19153 = getelementptr inbounds i16, i16* %blur_x879, i64 %19152
  %19154 = bitcast i16* %19153 to <16 x i16>*
  store <16 x i16> %19150, <16 x i16>* %19154, align 2, !tbaa !399
  %19155 = shufflevector <32 x i16> %19149, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19156 = getelementptr inbounds i16, i16* %19153, i64 16
  %19157 = bitcast i16* %19156 to <16 x i16>*
  store <16 x i16> %19155, <16 x i16>* %19157, align 2, !tbaa !399
  br label %"consume blur_x1323"

"consume blur_x1323":                             ; preds = %"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge", %"produce blur_x1321"
  %.pre-phi3614 = phi i64 [ %.pre3613, %"for blur_y.s0.x.x.rebased1315.consume blur_x1323_crit_edge" ], [ %19151, %"produce blur_x1321" ]
  %19158 = add nsw i64 %18945, %.pre-phi3614
  %19159 = getelementptr inbounds i16, i16* %blur_x879, i64 %19158
  %19160 = bitcast i16* %19159 to <16 x i16>*
  %19161 = load <16 x i16>, <16 x i16>* %19160, align 2, !tbaa !399
  %19162 = getelementptr inbounds i16, i16* %19159, i64 16
  %19163 = bitcast i16* %19162 to <16 x i16>*
  %19164 = load <16 x i16>, <16 x i16>* %19163, align 2, !tbaa !399
  %19165 = shufflevector <16 x i16> %19161, <16 x i16> %19164, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19166 = add nsw i64 %18948, %.pre-phi3614
  %19167 = getelementptr inbounds i16, i16* %blur_x879, i64 %19166
  %19168 = bitcast i16* %19167 to <16 x i16>*
  %19169 = load <16 x i16>, <16 x i16>* %19168, align 2, !tbaa !399
  %19170 = getelementptr inbounds i16, i16* %19167, i64 16
  %19171 = bitcast i16* %19170 to <16 x i16>*
  %19172 = load <16 x i16>, <16 x i16>* %19171, align 2, !tbaa !399
  %19173 = shufflevector <16 x i16> %19169, <16 x i16> %19172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19174 = add nsw i64 %18951, %.pre-phi3614
  %19175 = getelementptr inbounds i16, i16* %blur_x879, i64 %19174
  %19176 = bitcast i16* %19175 to <16 x i16>*
  %19177 = load <16 x i16>, <16 x i16>* %19176, align 2, !tbaa !399
  %19178 = getelementptr inbounds i16, i16* %19175, i64 16
  %19179 = bitcast i16* %19178 to <16 x i16>*
  %19180 = load <16 x i16>, <16 x i16>* %19179, align 2, !tbaa !399
  %19181 = shufflevector <16 x i16> %19177, <16 x i16> %19180, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19182 = add nsw i64 %18954, %.pre-phi3614
  %19183 = getelementptr inbounds i16, i16* %blur_x879, i64 %19182
  %19184 = bitcast i16* %19183 to <16 x i16>*
  %19185 = load <16 x i16>, <16 x i16>* %19184, align 2, !tbaa !399
  %19186 = getelementptr inbounds i16, i16* %19183, i64 16
  %19187 = bitcast i16* %19186 to <16 x i16>*
  %19188 = load <16 x i16>, <16 x i16>* %19187, align 2, !tbaa !399
  %19189 = shufflevector <16 x i16> %19185, <16 x i16> %19188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19190 = add nsw i64 %18957, %.pre-phi3614
  %19191 = getelementptr inbounds i16, i16* %blur_x879, i64 %19190
  %19192 = bitcast i16* %19191 to <16 x i16>*
  %19193 = load <16 x i16>, <16 x i16>* %19192, align 2, !tbaa !399
  %19194 = getelementptr inbounds i16, i16* %19191, i64 16
  %19195 = bitcast i16* %19194 to <16 x i16>*
  %19196 = load <16 x i16>, <16 x i16>* %19195, align 2, !tbaa !399
  %19197 = shufflevector <16 x i16> %19193, <16 x i16> %19196, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19198 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19173, <32 x i16> %19181, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19199 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19197, <32 x i16> %19189, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19200 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19198, <32 x i16> %19199, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19201 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19200, <32 x i16> %19165, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19202 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19201, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19203 = shufflevector <32 x i16> %19202, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19204 = add nsw i64 %18961, %.pre-phi3614
  %19205 = getelementptr inbounds i16, i16* %263, i64 %19204
  %19206 = bitcast i16* %19205 to <16 x i16>*
  store <16 x i16> %19203, <16 x i16>* %19206, align 2, !tbaa !401
  %19207 = shufflevector <32 x i16> %19202, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19208 = getelementptr inbounds i16, i16* %19205, i64 16
  %19209 = bitcast i16* %19208 to <16 x i16>*
  store <16 x i16> %19207, <16 x i16>* %19209, align 2, !tbaa !401
  %indvars.iv.next3399 = add nuw nsw i64 %indvars.iv3398, 1
  %19210 = icmp eq i64 %indvars.iv.next3399, %zext3400
  br i1 %19210, label %"end for blur_y.s0.x.x.rebased1316", label %"for blur_y.s0.x.x.rebased1315"

"for blur_y.s0.x.x.rebased1331":                  ; preds = %"for blur_y.s0.x.x.rebased1331.preheader", %"consume blur_x1342"
  %blur_y.s0.x.x.rebased1333 = phi i32 [ %19319, %"consume blur_x1342" ], [ 0, %"for blur_y.s0.x.x.rebased1331.preheader" ]
  %19211 = add nsw i32 %blur_y.s0.x.x.rebased1333, %t1626814
  %a2408 = shl nsw i32 %19211, 5
  %19212 = icmp sgt i32 %t1647, %a2408
  %blur_y.s0.x.v0.base.s1334 = select i1 %19212, i32 %a2408, i32 %t1647
  %19213 = icmp slt i32 %19211, 1
  %19214 = icmp sgt i32 %198, %a2408
  %19215 = or i1 %19213, %19214
  br i1 %19215, label %"produce blur_x1339", label %"consume blur_x1342"

"end for blur_y.s0.x.x.rebased1332":              ; preds = %"consume blur_x1342", %"end for blur_y.s0.x.x.rebased1316"
  br i1 %229, label %"produce blur_x1346", label %after_bb1343

"produce blur_x1339":                             ; preds = %"for blur_y.s0.x.x.rebased1331"
  %19216 = icmp slt i32 %blur_y.s0.x.v0.base.s1334, %198
  %blur_x.s0.x.v1.base.s1340 = select i1 %19216, i32 %blur_y.s0.x.v0.base.s1334, i32 %198
  %t8291341 = add nsw i32 %379, %blur_x.s0.x.v1.base.s1340
  %19217 = sext i32 %t8291341 to i64
  %19218 = getelementptr inbounds i16, i16* %read_input822, i64 %19217
  %19219 = getelementptr inbounds i16, i16* %19218, i64 1
  %19220 = bitcast i16* %19219 to <16 x i16>*
  %19221 = load <16 x i16>, <16 x i16>* %19220, align 2, !tbaa !396
  %19222 = getelementptr inbounds i16, i16* %19218, i64 17
  %19223 = bitcast i16* %19222 to <16 x i16>*
  %19224 = load <16 x i16>, <16 x i16>* %19223, align 2, !tbaa !396
  %19225 = shufflevector <16 x i16> %19221, <16 x i16> %19224, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19226 = bitcast i16* %19218 to <16 x i16>*
  %19227 = load <16 x i16>, <16 x i16>* %19226, align 2, !tbaa !396
  %19228 = getelementptr inbounds i16, i16* %19218, i64 16
  %19229 = bitcast i16* %19228 to <16 x i16>*
  %19230 = load <16 x i16>, <16 x i16>* %19229, align 2, !tbaa !396
  %19231 = shufflevector <16 x i16> %19227, <16 x i16> %19230, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19232 = getelementptr inbounds i16, i16* %19218, i64 2
  %19233 = bitcast i16* %19232 to <16 x i16>*
  %19234 = load <16 x i16>, <16 x i16>* %19233, align 2, !tbaa !396
  %19235 = getelementptr inbounds i16, i16* %19218, i64 18
  %19236 = bitcast i16* %19235 to <16 x i16>*
  %19237 = load <16 x i16>, <16 x i16>* %19236, align 2, !tbaa !396
  %19238 = shufflevector <16 x i16> %19234, <16 x i16> %19237, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19239 = getelementptr inbounds i16, i16* %19218, i64 4
  %19240 = bitcast i16* %19239 to <16 x i16>*
  %19241 = load <16 x i16>, <16 x i16>* %19240, align 2, !tbaa !396
  %19242 = getelementptr inbounds i16, i16* %19218, i64 20
  %19243 = bitcast i16* %19242 to <16 x i16>*
  %19244 = load <16 x i16>, <16 x i16>* %19243, align 2, !tbaa !396
  %19245 = shufflevector <16 x i16> %19241, <16 x i16> %19244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19246 = getelementptr inbounds i16, i16* %19218, i64 3
  %19247 = bitcast i16* %19246 to <16 x i16>*
  %19248 = load <16 x i16>, <16 x i16>* %19247, align 2, !tbaa !396
  %19249 = getelementptr inbounds i16, i16* %19218, i64 19
  %19250 = bitcast i16* %19249 to <16 x i16>*
  %19251 = load <16 x i16>, <16 x i16>* %19250, align 2, !tbaa !396
  %19252 = shufflevector <16 x i16> %19248, <16 x i16> %19251, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19253 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19231, <32 x i16> %19238, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19254 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19252, <32 x i16> %19245, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19255 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19253, <32 x i16> %19254, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19256 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19255, <32 x i16> %19225, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19257 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19256, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19258 = shufflevector <32 x i16> %19257, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19259 = sext i32 %blur_x.s0.x.v1.base.s1340 to i64
  %19260 = add nsw i64 %19259, %19089
  %19261 = getelementptr inbounds i16, i16* %blur_x879, i64 %19260
  %19262 = bitcast i16* %19261 to <16 x i16>*
  store <16 x i16> %19258, <16 x i16>* %19262, align 2, !tbaa !399
  %19263 = shufflevector <32 x i16> %19257, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19264 = getelementptr inbounds i16, i16* %19261, i64 16
  %19265 = bitcast i16* %19264 to <16 x i16>*
  store <16 x i16> %19263, <16 x i16>* %19265, align 2, !tbaa !399
  br label %"consume blur_x1342"

"consume blur_x1342":                             ; preds = %"for blur_y.s0.x.x.rebased1331", %"produce blur_x1339"
  %19266 = sext i32 %blur_y.s0.x.v0.base.s1334 to i64
  %19267 = add nsw i64 %19092, %19266
  %19268 = getelementptr inbounds i16, i16* %blur_x879, i64 %19267
  %19269 = bitcast i16* %19268 to <16 x i16>*
  %19270 = load <16 x i16>, <16 x i16>* %19269, align 2, !tbaa !399
  %19271 = getelementptr inbounds i16, i16* %19268, i64 16
  %19272 = bitcast i16* %19271 to <16 x i16>*
  %19273 = load <16 x i16>, <16 x i16>* %19272, align 2, !tbaa !399
  %19274 = shufflevector <16 x i16> %19270, <16 x i16> %19273, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19275 = add nsw i64 %19095, %19266
  %19276 = getelementptr inbounds i16, i16* %blur_x879, i64 %19275
  %19277 = bitcast i16* %19276 to <16 x i16>*
  %19278 = load <16 x i16>, <16 x i16>* %19277, align 2, !tbaa !399
  %19279 = getelementptr inbounds i16, i16* %19276, i64 16
  %19280 = bitcast i16* %19279 to <16 x i16>*
  %19281 = load <16 x i16>, <16 x i16>* %19280, align 2, !tbaa !399
  %19282 = shufflevector <16 x i16> %19278, <16 x i16> %19281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19283 = add nsw i64 %19098, %19266
  %19284 = getelementptr inbounds i16, i16* %blur_x879, i64 %19283
  %19285 = bitcast i16* %19284 to <16 x i16>*
  %19286 = load <16 x i16>, <16 x i16>* %19285, align 2, !tbaa !399
  %19287 = getelementptr inbounds i16, i16* %19284, i64 16
  %19288 = bitcast i16* %19287 to <16 x i16>*
  %19289 = load <16 x i16>, <16 x i16>* %19288, align 2, !tbaa !399
  %19290 = shufflevector <16 x i16> %19286, <16 x i16> %19289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19291 = add nsw i64 %19101, %19266
  %19292 = getelementptr inbounds i16, i16* %blur_x879, i64 %19291
  %19293 = bitcast i16* %19292 to <16 x i16>*
  %19294 = load <16 x i16>, <16 x i16>* %19293, align 2, !tbaa !399
  %19295 = getelementptr inbounds i16, i16* %19292, i64 16
  %19296 = bitcast i16* %19295 to <16 x i16>*
  %19297 = load <16 x i16>, <16 x i16>* %19296, align 2, !tbaa !399
  %19298 = shufflevector <16 x i16> %19294, <16 x i16> %19297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19299 = add nsw i64 %19104, %19266
  %19300 = getelementptr inbounds i16, i16* %blur_x879, i64 %19299
  %19301 = bitcast i16* %19300 to <16 x i16>*
  %19302 = load <16 x i16>, <16 x i16>* %19301, align 2, !tbaa !399
  %19303 = getelementptr inbounds i16, i16* %19300, i64 16
  %19304 = bitcast i16* %19303 to <16 x i16>*
  %19305 = load <16 x i16>, <16 x i16>* %19304, align 2, !tbaa !399
  %19306 = shufflevector <16 x i16> %19302, <16 x i16> %19305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19307 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19282, <32 x i16> %19290, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19308 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19306, <32 x i16> %19298, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19309 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19307, <32 x i16> %19308, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19310 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19309, <32 x i16> %19274, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19311 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19310, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19312 = shufflevector <32 x i16> %19311, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19313 = add nsw i64 %19108, %19266
  %19314 = getelementptr inbounds i16, i16* %263, i64 %19313
  %19315 = bitcast i16* %19314 to <16 x i16>*
  store <16 x i16> %19312, <16 x i16>* %19315, align 2, !tbaa !401
  %19316 = shufflevector <32 x i16> %19311, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19317 = getelementptr inbounds i16, i16* %19314, i64 16
  %19318 = bitcast i16* %19317 to <16 x i16>*
  store <16 x i16> %19316, <16 x i16>* %19318, align 2, !tbaa !401
  %19319 = add nuw nsw i32 %blur_y.s0.x.x.rebased1333, 1
  %.not2634 = icmp eq i32 %19319, %t1683898
  br i1 %.not2634, label %"end for blur_y.s0.x.x.rebased1332", label %"for blur_y.s0.x.x.rebased1331"

after_bb1343:                                     ; preds = %"end for blur_y.s0.x.x.rebased1332", %"produce blur_x1346"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1358.preheader", label %"end for blur_y.s0.x.x.rebased1359", !prof !386

"for blur_y.s0.x.x.rebased1358.preheader":        ; preds = %after_bb1343
  %19320 = sext i32 %t17061010 to i64
  %19321 = zext i32 %.pre-phi3574 to i64
  %19322 = mul nsw i64 %19321, %337
  %19323 = sub nsw i64 %19322, %298
  %19324 = zext i32 %.pre-phi3570 to i64
  %19325 = mul nsw i64 %19324, %337
  %19326 = sub nsw i64 %19325, %298
  %19327 = zext i32 %.pre-phi3578 to i64
  %19328 = mul nsw i64 %19327, %337
  %19329 = sub nsw i64 %19328, %298
  %19330 = zext i32 %.pre-phi3586 to i64
  %19331 = mul nsw i64 %19330, %337
  %19332 = sub nsw i64 %19331, %298
  %19333 = zext i32 %.pre-phi3582 to i64
  %19334 = mul nsw i64 %19333, %337
  %19335 = sub nsw i64 %19334, %298
  %19336 = sext i32 %a379 to i64
  %19337 = add nsw i64 %19336, 8
  %19338 = mul nsw i64 %19337, %334
  %19339 = add nsw i64 %19338, %338
  br label %"for blur_y.s0.x.x.rebased1358"

"produce blur_x1346":                             ; preds = %"end for blur_y.s0.x.x.rebased1332"
  %19340 = getelementptr inbounds i16, i16* %read_input822, i64 %383
  %19341 = getelementptr inbounds i16, i16* %19340, i64 -31
  %19342 = bitcast i16* %19341 to <16 x i16>*
  %19343 = load <16 x i16>, <16 x i16>* %19342, align 2, !tbaa !396
  %19344 = getelementptr inbounds i16, i16* %19340, i64 -15
  %19345 = bitcast i16* %19344 to <16 x i16>*
  %19346 = load <16 x i16>, <16 x i16>* %19345, align 2, !tbaa !396
  %19347 = shufflevector <16 x i16> %19343, <16 x i16> %19346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19348 = getelementptr inbounds i16, i16* %19340, i64 -32
  %19349 = bitcast i16* %19348 to <16 x i16>*
  %19350 = load <16 x i16>, <16 x i16>* %19349, align 2, !tbaa !396
  %19351 = getelementptr inbounds i16, i16* %19340, i64 -16
  %19352 = bitcast i16* %19351 to <16 x i16>*
  %19353 = load <16 x i16>, <16 x i16>* %19352, align 2, !tbaa !396
  %19354 = shufflevector <16 x i16> %19350, <16 x i16> %19353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19355 = getelementptr inbounds i16, i16* %19340, i64 -30
  %19356 = bitcast i16* %19355 to <16 x i16>*
  %19357 = load <16 x i16>, <16 x i16>* %19356, align 2, !tbaa !396
  %19358 = getelementptr inbounds i16, i16* %19340, i64 -14
  %19359 = bitcast i16* %19358 to <16 x i16>*
  %19360 = load <16 x i16>, <16 x i16>* %19359, align 2, !tbaa !396
  %19361 = shufflevector <16 x i16> %19357, <16 x i16> %19360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19362 = getelementptr inbounds i16, i16* %19340, i64 -28
  %19363 = bitcast i16* %19362 to <16 x i16>*
  %19364 = load <16 x i16>, <16 x i16>* %19363, align 2, !tbaa !396
  %19365 = getelementptr inbounds i16, i16* %19340, i64 -12
  %19366 = bitcast i16* %19365 to <16 x i16>*
  %19367 = load <16 x i16>, <16 x i16>* %19366, align 2, !tbaa !396
  %19368 = shufflevector <16 x i16> %19364, <16 x i16> %19367, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19369 = getelementptr inbounds i16, i16* %19340, i64 -29
  %19370 = bitcast i16* %19369 to <16 x i16>*
  %19371 = load <16 x i16>, <16 x i16>* %19370, align 2, !tbaa !396
  %19372 = getelementptr inbounds i16, i16* %19340, i64 -13
  %19373 = bitcast i16* %19372 to <16 x i16>*
  %19374 = load <16 x i16>, <16 x i16>* %19373, align 2, !tbaa !396
  %19375 = shufflevector <16 x i16> %19371, <16 x i16> %19374, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19376 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19354, <32 x i16> %19361, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19377 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19375, <32 x i16> %19368, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19378 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19376, <32 x i16> %19377, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19379 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19378, <32 x i16> %19347, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19380 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19379, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19381 = shufflevector <32 x i16> %19380, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19382 = zext i32 %.pre-phi3586 to i64
  %19383 = mul nsw i64 %299, %19382
  %19384 = add nsw i64 %301, %19383
  %19385 = getelementptr inbounds i16, i16* %blur_x879, i64 %19384
  %19386 = getelementptr inbounds i16, i16* %19385, i64 -32
  %19387 = bitcast i16* %19386 to <16 x i16>*
  store <16 x i16> %19381, <16 x i16>* %19387, align 2, !tbaa !399
  %19388 = shufflevector <32 x i16> %19380, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19389 = getelementptr inbounds i16, i16* %19385, i64 -16
  %19390 = bitcast i16* %19389 to <16 x i16>*
  store <16 x i16> %19388, <16 x i16>* %19390, align 2, !tbaa !399
  %19391 = zext i32 %.pre-phi3574 to i64
  %19392 = mul nsw i64 %19391, %333
  %19393 = add nsw i64 %19392, %296
  %19394 = getelementptr inbounds i16, i16* %blur_x879, i64 %19393
  %19395 = getelementptr inbounds i16, i16* %19394, i64 -32
  %19396 = bitcast i16* %19395 to <16 x i16>*
  %19397 = load <16 x i16>, <16 x i16>* %19396, align 2, !tbaa !399
  %19398 = getelementptr inbounds i16, i16* %19394, i64 -16
  %19399 = bitcast i16* %19398 to <16 x i16>*
  %19400 = load <16 x i16>, <16 x i16>* %19399, align 2, !tbaa !399
  %19401 = shufflevector <16 x i16> %19397, <16 x i16> %19400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19402 = zext i32 %.pre-phi3570 to i64
  %19403 = mul nsw i64 %19402, %333
  %19404 = add nsw i64 %19403, %296
  %19405 = getelementptr inbounds i16, i16* %blur_x879, i64 %19404
  %19406 = getelementptr inbounds i16, i16* %19405, i64 -32
  %19407 = bitcast i16* %19406 to <16 x i16>*
  %19408 = load <16 x i16>, <16 x i16>* %19407, align 2, !tbaa !399
  %19409 = getelementptr inbounds i16, i16* %19405, i64 -16
  %19410 = bitcast i16* %19409 to <16 x i16>*
  %19411 = load <16 x i16>, <16 x i16>* %19410, align 2, !tbaa !399
  %19412 = shufflevector <16 x i16> %19408, <16 x i16> %19411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19413 = zext i32 %.pre-phi3578 to i64
  %19414 = mul nsw i64 %19413, %333
  %19415 = add nsw i64 %19414, %296
  %19416 = getelementptr inbounds i16, i16* %blur_x879, i64 %19415
  %19417 = getelementptr inbounds i16, i16* %19416, i64 -32
  %19418 = bitcast i16* %19417 to <16 x i16>*
  %19419 = load <16 x i16>, <16 x i16>* %19418, align 2, !tbaa !399
  %19420 = getelementptr inbounds i16, i16* %19416, i64 -16
  %19421 = bitcast i16* %19420 to <16 x i16>*
  %19422 = load <16 x i16>, <16 x i16>* %19421, align 2, !tbaa !399
  %19423 = shufflevector <16 x i16> %19419, <16 x i16> %19422, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19424 = mul nsw i64 %19382, %333
  %19425 = add nsw i64 %19424, %296
  %19426 = getelementptr inbounds i16, i16* %blur_x879, i64 %19425
  %19427 = getelementptr inbounds i16, i16* %19426, i64 -32
  %19428 = bitcast i16* %19427 to <16 x i16>*
  %19429 = load <16 x i16>, <16 x i16>* %19428, align 2, !tbaa !399
  %19430 = getelementptr inbounds i16, i16* %19426, i64 -16
  %19431 = bitcast i16* %19430 to <16 x i16>*
  %19432 = load <16 x i16>, <16 x i16>* %19431, align 2, !tbaa !399
  %19433 = shufflevector <16 x i16> %19429, <16 x i16> %19432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19434 = zext i32 %.pre-phi3582 to i64
  %19435 = mul nsw i64 %19434, %333
  %19436 = add nsw i64 %19435, %296
  %19437 = getelementptr inbounds i16, i16* %blur_x879, i64 %19436
  %19438 = getelementptr inbounds i16, i16* %19437, i64 -32
  %19439 = bitcast i16* %19438 to <16 x i16>*
  %19440 = load <16 x i16>, <16 x i16>* %19439, align 2, !tbaa !399
  %19441 = getelementptr inbounds i16, i16* %19437, i64 -16
  %19442 = bitcast i16* %19441 to <16 x i16>*
  %19443 = load <16 x i16>, <16 x i16>* %19442, align 2, !tbaa !399
  %19444 = shufflevector <16 x i16> %19440, <16 x i16> %19443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19445 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19412, <32 x i16> %19423, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19446 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19444, <32 x i16> %19433, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19447 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19445, <32 x i16> %19446, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19448 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19447, <32 x i16> %19401, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19449 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19448, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19450 = shufflevector <32 x i16> %19449, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19451 = sext i32 %a379 to i64
  %19452 = add nsw i64 %19451, 8
  %19453 = mul nsw i64 %19452, %334
  %19454 = add nsw i64 %336, %19453
  %19455 = getelementptr inbounds i16, i16* %263, i64 %19454
  %19456 = getelementptr inbounds i16, i16* %19455, i64 -32
  %19457 = bitcast i16* %19456 to <16 x i16>*
  store <16 x i16> %19450, <16 x i16>* %19457, align 2, !tbaa !401
  %19458 = shufflevector <32 x i16> %19449, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19459 = getelementptr inbounds i16, i16* %19455, i64 -16
  %19460 = bitcast i16* %19459 to <16 x i16>*
  store <16 x i16> %19458, <16 x i16>* %19460, align 2, !tbaa !401
  br label %after_bb1343

"for blur_y.s0.x.x.rebased1358":                  ; preds = %"for blur_y.s0.x.x.rebased1358.preheader", %"consume blur_x1366"
  %indvars.iv3401 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1358.preheader" ], [ %indvars.iv.next3402, %"consume blur_x1366" ]
  %19461 = add nsw i64 %indvars.iv3401, %303
  %19462 = icmp slt i64 %19461, 1
  %19463 = trunc i64 %19461 to i32
  %19464 = shl nsw i32 %19463, 5
  %19465 = icmp sgt i32 %198, %19464
  %19466 = or i1 %19462, %19465
  br i1 %19466, label %"produce blur_x1364", label %"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge"

"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1358"
  %.pre3615 = shl nsw i64 %19461, 5
  br label %"consume blur_x1366"

"end for blur_y.s0.x.x.rebased1359":              ; preds = %"consume blur_x1366", %after_bb1343
  br i1 %304, label %"for blur_y.s0.x.x.rebased1374.preheader", label %"end for blur_y.s0.x.x.rebased1375", !prof !386

"for blur_y.s0.x.x.rebased1374.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1359"
  %19467 = sext i32 %t17061010 to i64
  %19468 = zext i32 %.pre-phi3574 to i64
  %19469 = mul nsw i64 %19468, %337
  %19470 = sub nsw i64 %19469, %298
  %19471 = zext i32 %.pre-phi3570 to i64
  %19472 = mul nsw i64 %19471, %337
  %19473 = sub nsw i64 %19472, %298
  %19474 = zext i32 %.pre-phi3578 to i64
  %19475 = mul nsw i64 %19474, %337
  %19476 = sub nsw i64 %19475, %298
  %19477 = zext i32 %.pre-phi3586 to i64
  %19478 = mul nsw i64 %19477, %337
  %19479 = sub nsw i64 %19478, %298
  %19480 = zext i32 %.pre-phi3582 to i64
  %19481 = mul nsw i64 %19480, %337
  %19482 = sub nsw i64 %19481, %298
  %19483 = sext i32 %a379 to i64
  %19484 = add nsw i64 %19483, 8
  %19485 = mul nsw i64 %19484, %334
  %19486 = add nsw i64 %19485, %338
  br label %"for blur_y.s0.x.x.rebased1374"

"produce blur_x1364":                             ; preds = %"for blur_y.s0.x.x.rebased1358"
  %t8401365 = add nsw i32 %385, %19464
  %19487 = sext i32 %t8401365 to i64
  %19488 = getelementptr inbounds i16, i16* %read_input822, i64 %19487
  %19489 = getelementptr inbounds i16, i16* %19488, i64 1
  %19490 = bitcast i16* %19489 to <16 x i16>*
  %19491 = load <16 x i16>, <16 x i16>* %19490, align 2, !tbaa !396
  %19492 = getelementptr inbounds i16, i16* %19488, i64 17
  %19493 = bitcast i16* %19492 to <16 x i16>*
  %19494 = load <16 x i16>, <16 x i16>* %19493, align 2, !tbaa !396
  %19495 = shufflevector <16 x i16> %19491, <16 x i16> %19494, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19496 = bitcast i16* %19488 to <16 x i16>*
  %19497 = load <16 x i16>, <16 x i16>* %19496, align 2, !tbaa !396
  %19498 = getelementptr inbounds i16, i16* %19488, i64 16
  %19499 = bitcast i16* %19498 to <16 x i16>*
  %19500 = load <16 x i16>, <16 x i16>* %19499, align 2, !tbaa !396
  %19501 = shufflevector <16 x i16> %19497, <16 x i16> %19500, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19502 = getelementptr inbounds i16, i16* %19488, i64 2
  %19503 = bitcast i16* %19502 to <16 x i16>*
  %19504 = load <16 x i16>, <16 x i16>* %19503, align 2, !tbaa !396
  %19505 = getelementptr inbounds i16, i16* %19488, i64 18
  %19506 = bitcast i16* %19505 to <16 x i16>*
  %19507 = load <16 x i16>, <16 x i16>* %19506, align 2, !tbaa !396
  %19508 = shufflevector <16 x i16> %19504, <16 x i16> %19507, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19509 = getelementptr inbounds i16, i16* %19488, i64 4
  %19510 = bitcast i16* %19509 to <16 x i16>*
  %19511 = load <16 x i16>, <16 x i16>* %19510, align 2, !tbaa !396
  %19512 = getelementptr inbounds i16, i16* %19488, i64 20
  %19513 = bitcast i16* %19512 to <16 x i16>*
  %19514 = load <16 x i16>, <16 x i16>* %19513, align 2, !tbaa !396
  %19515 = shufflevector <16 x i16> %19511, <16 x i16> %19514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19516 = getelementptr inbounds i16, i16* %19488, i64 3
  %19517 = bitcast i16* %19516 to <16 x i16>*
  %19518 = load <16 x i16>, <16 x i16>* %19517, align 2, !tbaa !396
  %19519 = getelementptr inbounds i16, i16* %19488, i64 19
  %19520 = bitcast i16* %19519 to <16 x i16>*
  %19521 = load <16 x i16>, <16 x i16>* %19520, align 2, !tbaa !396
  %19522 = shufflevector <16 x i16> %19518, <16 x i16> %19521, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19523 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19501, <32 x i16> %19508, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19524 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19522, <32 x i16> %19515, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19525 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19523, <32 x i16> %19524, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19526 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19525, <32 x i16> %19495, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19527 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19526, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19528 = shufflevector <32 x i16> %19527, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19529 = shl nsw i64 %19461, 5
  %19530 = add nsw i64 %19529, %19320
  %19531 = getelementptr inbounds i16, i16* %blur_x879, i64 %19530
  %19532 = bitcast i16* %19531 to <16 x i16>*
  store <16 x i16> %19528, <16 x i16>* %19532, align 2, !tbaa !399
  %19533 = shufflevector <32 x i16> %19527, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19534 = getelementptr inbounds i16, i16* %19531, i64 16
  %19535 = bitcast i16* %19534 to <16 x i16>*
  store <16 x i16> %19533, <16 x i16>* %19535, align 2, !tbaa !399
  br label %"consume blur_x1366"

"consume blur_x1366":                             ; preds = %"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge", %"produce blur_x1364"
  %.pre-phi3616 = phi i64 [ %.pre3615, %"for blur_y.s0.x.x.rebased1358.consume blur_x1366_crit_edge" ], [ %19529, %"produce blur_x1364" ]
  %19536 = add nsw i64 %19323, %.pre-phi3616
  %19537 = getelementptr inbounds i16, i16* %blur_x879, i64 %19536
  %19538 = bitcast i16* %19537 to <16 x i16>*
  %19539 = load <16 x i16>, <16 x i16>* %19538, align 2, !tbaa !399
  %19540 = getelementptr inbounds i16, i16* %19537, i64 16
  %19541 = bitcast i16* %19540 to <16 x i16>*
  %19542 = load <16 x i16>, <16 x i16>* %19541, align 2, !tbaa !399
  %19543 = shufflevector <16 x i16> %19539, <16 x i16> %19542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19544 = add nsw i64 %19326, %.pre-phi3616
  %19545 = getelementptr inbounds i16, i16* %blur_x879, i64 %19544
  %19546 = bitcast i16* %19545 to <16 x i16>*
  %19547 = load <16 x i16>, <16 x i16>* %19546, align 2, !tbaa !399
  %19548 = getelementptr inbounds i16, i16* %19545, i64 16
  %19549 = bitcast i16* %19548 to <16 x i16>*
  %19550 = load <16 x i16>, <16 x i16>* %19549, align 2, !tbaa !399
  %19551 = shufflevector <16 x i16> %19547, <16 x i16> %19550, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19552 = add nsw i64 %19329, %.pre-phi3616
  %19553 = getelementptr inbounds i16, i16* %blur_x879, i64 %19552
  %19554 = bitcast i16* %19553 to <16 x i16>*
  %19555 = load <16 x i16>, <16 x i16>* %19554, align 2, !tbaa !399
  %19556 = getelementptr inbounds i16, i16* %19553, i64 16
  %19557 = bitcast i16* %19556 to <16 x i16>*
  %19558 = load <16 x i16>, <16 x i16>* %19557, align 2, !tbaa !399
  %19559 = shufflevector <16 x i16> %19555, <16 x i16> %19558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19560 = add nsw i64 %19332, %.pre-phi3616
  %19561 = getelementptr inbounds i16, i16* %blur_x879, i64 %19560
  %19562 = bitcast i16* %19561 to <16 x i16>*
  %19563 = load <16 x i16>, <16 x i16>* %19562, align 2, !tbaa !399
  %19564 = getelementptr inbounds i16, i16* %19561, i64 16
  %19565 = bitcast i16* %19564 to <16 x i16>*
  %19566 = load <16 x i16>, <16 x i16>* %19565, align 2, !tbaa !399
  %19567 = shufflevector <16 x i16> %19563, <16 x i16> %19566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19568 = add nsw i64 %19335, %.pre-phi3616
  %19569 = getelementptr inbounds i16, i16* %blur_x879, i64 %19568
  %19570 = bitcast i16* %19569 to <16 x i16>*
  %19571 = load <16 x i16>, <16 x i16>* %19570, align 2, !tbaa !399
  %19572 = getelementptr inbounds i16, i16* %19569, i64 16
  %19573 = bitcast i16* %19572 to <16 x i16>*
  %19574 = load <16 x i16>, <16 x i16>* %19573, align 2, !tbaa !399
  %19575 = shufflevector <16 x i16> %19571, <16 x i16> %19574, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19576 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19551, <32 x i16> %19559, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19577 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19575, <32 x i16> %19567, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19578 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19576, <32 x i16> %19577, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19579 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19578, <32 x i16> %19543, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19580 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19579, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19581 = shufflevector <32 x i16> %19580, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19582 = add nsw i64 %19339, %.pre-phi3616
  %19583 = getelementptr inbounds i16, i16* %263, i64 %19582
  %19584 = bitcast i16* %19583 to <16 x i16>*
  store <16 x i16> %19581, <16 x i16>* %19584, align 2, !tbaa !401
  %19585 = shufflevector <32 x i16> %19580, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19586 = getelementptr inbounds i16, i16* %19583, i64 16
  %19587 = bitcast i16* %19586 to <16 x i16>*
  store <16 x i16> %19585, <16 x i16>* %19587, align 2, !tbaa !401
  %indvars.iv.next3402 = add nuw nsw i64 %indvars.iv3401, 1
  %19588 = icmp eq i64 %indvars.iv.next3402, %zext3403
  br i1 %19588, label %"end for blur_y.s0.x.x.rebased1359", label %"for blur_y.s0.x.x.rebased1358"

"for blur_y.s0.x.x.rebased1374":                  ; preds = %"for blur_y.s0.x.x.rebased1374.preheader", %"consume blur_x1385"
  %blur_y.s0.x.x.rebased1376 = phi i32 [ %19697, %"consume blur_x1385" ], [ 0, %"for blur_y.s0.x.x.rebased1374.preheader" ]
  %19589 = add nsw i32 %blur_y.s0.x.x.rebased1376, %t1626814
  %a2565 = shl nsw i32 %19589, 5
  %19590 = icmp sgt i32 %t1647, %a2565
  %blur_y.s0.x.v0.base.s1377 = select i1 %19590, i32 %a2565, i32 %t1647
  %19591 = icmp slt i32 %19589, 1
  %19592 = icmp sgt i32 %198, %a2565
  %19593 = or i1 %19591, %19592
  br i1 %19593, label %"produce blur_x1382", label %"consume blur_x1385"

"end for blur_y.s0.x.x.rebased1375":              ; preds = %"consume blur_x1385", %"end for blur_y.s0.x.x.rebased1359"
  br i1 %229, label %"produce blur_x1389", label %after_bb1386

"produce blur_x1382":                             ; preds = %"for blur_y.s0.x.x.rebased1374"
  %19594 = icmp slt i32 %blur_y.s0.x.v0.base.s1377, %198
  %blur_x.s0.x.v1.base.s1383 = select i1 %19594, i32 %blur_y.s0.x.v0.base.s1377, i32 %198
  %t8451384 = add nsw i32 %385, %blur_x.s0.x.v1.base.s1383
  %19595 = sext i32 %t8451384 to i64
  %19596 = getelementptr inbounds i16, i16* %read_input822, i64 %19595
  %19597 = getelementptr inbounds i16, i16* %19596, i64 1
  %19598 = bitcast i16* %19597 to <16 x i16>*
  %19599 = load <16 x i16>, <16 x i16>* %19598, align 2, !tbaa !396
  %19600 = getelementptr inbounds i16, i16* %19596, i64 17
  %19601 = bitcast i16* %19600 to <16 x i16>*
  %19602 = load <16 x i16>, <16 x i16>* %19601, align 2, !tbaa !396
  %19603 = shufflevector <16 x i16> %19599, <16 x i16> %19602, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19604 = bitcast i16* %19596 to <16 x i16>*
  %19605 = load <16 x i16>, <16 x i16>* %19604, align 2, !tbaa !396
  %19606 = getelementptr inbounds i16, i16* %19596, i64 16
  %19607 = bitcast i16* %19606 to <16 x i16>*
  %19608 = load <16 x i16>, <16 x i16>* %19607, align 2, !tbaa !396
  %19609 = shufflevector <16 x i16> %19605, <16 x i16> %19608, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19610 = getelementptr inbounds i16, i16* %19596, i64 2
  %19611 = bitcast i16* %19610 to <16 x i16>*
  %19612 = load <16 x i16>, <16 x i16>* %19611, align 2, !tbaa !396
  %19613 = getelementptr inbounds i16, i16* %19596, i64 18
  %19614 = bitcast i16* %19613 to <16 x i16>*
  %19615 = load <16 x i16>, <16 x i16>* %19614, align 2, !tbaa !396
  %19616 = shufflevector <16 x i16> %19612, <16 x i16> %19615, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19617 = getelementptr inbounds i16, i16* %19596, i64 4
  %19618 = bitcast i16* %19617 to <16 x i16>*
  %19619 = load <16 x i16>, <16 x i16>* %19618, align 2, !tbaa !396
  %19620 = getelementptr inbounds i16, i16* %19596, i64 20
  %19621 = bitcast i16* %19620 to <16 x i16>*
  %19622 = load <16 x i16>, <16 x i16>* %19621, align 2, !tbaa !396
  %19623 = shufflevector <16 x i16> %19619, <16 x i16> %19622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19624 = getelementptr inbounds i16, i16* %19596, i64 3
  %19625 = bitcast i16* %19624 to <16 x i16>*
  %19626 = load <16 x i16>, <16 x i16>* %19625, align 2, !tbaa !396
  %19627 = getelementptr inbounds i16, i16* %19596, i64 19
  %19628 = bitcast i16* %19627 to <16 x i16>*
  %19629 = load <16 x i16>, <16 x i16>* %19628, align 2, !tbaa !396
  %19630 = shufflevector <16 x i16> %19626, <16 x i16> %19629, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19631 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19609, <32 x i16> %19616, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19632 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19630, <32 x i16> %19623, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19633 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19631, <32 x i16> %19632, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19634 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19633, <32 x i16> %19603, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19635 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19634, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19636 = shufflevector <32 x i16> %19635, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19637 = sext i32 %blur_x.s0.x.v1.base.s1383 to i64
  %19638 = add nsw i64 %19637, %19467
  %19639 = getelementptr inbounds i16, i16* %blur_x879, i64 %19638
  %19640 = bitcast i16* %19639 to <16 x i16>*
  store <16 x i16> %19636, <16 x i16>* %19640, align 2, !tbaa !399
  %19641 = shufflevector <32 x i16> %19635, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19642 = getelementptr inbounds i16, i16* %19639, i64 16
  %19643 = bitcast i16* %19642 to <16 x i16>*
  store <16 x i16> %19641, <16 x i16>* %19643, align 2, !tbaa !399
  br label %"consume blur_x1385"

"consume blur_x1385":                             ; preds = %"for blur_y.s0.x.x.rebased1374", %"produce blur_x1382"
  %19644 = sext i32 %blur_y.s0.x.v0.base.s1377 to i64
  %19645 = add nsw i64 %19470, %19644
  %19646 = getelementptr inbounds i16, i16* %blur_x879, i64 %19645
  %19647 = bitcast i16* %19646 to <16 x i16>*
  %19648 = load <16 x i16>, <16 x i16>* %19647, align 2, !tbaa !399
  %19649 = getelementptr inbounds i16, i16* %19646, i64 16
  %19650 = bitcast i16* %19649 to <16 x i16>*
  %19651 = load <16 x i16>, <16 x i16>* %19650, align 2, !tbaa !399
  %19652 = shufflevector <16 x i16> %19648, <16 x i16> %19651, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19653 = add nsw i64 %19473, %19644
  %19654 = getelementptr inbounds i16, i16* %blur_x879, i64 %19653
  %19655 = bitcast i16* %19654 to <16 x i16>*
  %19656 = load <16 x i16>, <16 x i16>* %19655, align 2, !tbaa !399
  %19657 = getelementptr inbounds i16, i16* %19654, i64 16
  %19658 = bitcast i16* %19657 to <16 x i16>*
  %19659 = load <16 x i16>, <16 x i16>* %19658, align 2, !tbaa !399
  %19660 = shufflevector <16 x i16> %19656, <16 x i16> %19659, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19661 = add nsw i64 %19476, %19644
  %19662 = getelementptr inbounds i16, i16* %blur_x879, i64 %19661
  %19663 = bitcast i16* %19662 to <16 x i16>*
  %19664 = load <16 x i16>, <16 x i16>* %19663, align 2, !tbaa !399
  %19665 = getelementptr inbounds i16, i16* %19662, i64 16
  %19666 = bitcast i16* %19665 to <16 x i16>*
  %19667 = load <16 x i16>, <16 x i16>* %19666, align 2, !tbaa !399
  %19668 = shufflevector <16 x i16> %19664, <16 x i16> %19667, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19669 = add nsw i64 %19479, %19644
  %19670 = getelementptr inbounds i16, i16* %blur_x879, i64 %19669
  %19671 = bitcast i16* %19670 to <16 x i16>*
  %19672 = load <16 x i16>, <16 x i16>* %19671, align 2, !tbaa !399
  %19673 = getelementptr inbounds i16, i16* %19670, i64 16
  %19674 = bitcast i16* %19673 to <16 x i16>*
  %19675 = load <16 x i16>, <16 x i16>* %19674, align 2, !tbaa !399
  %19676 = shufflevector <16 x i16> %19672, <16 x i16> %19675, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19677 = add nsw i64 %19482, %19644
  %19678 = getelementptr inbounds i16, i16* %blur_x879, i64 %19677
  %19679 = bitcast i16* %19678 to <16 x i16>*
  %19680 = load <16 x i16>, <16 x i16>* %19679, align 2, !tbaa !399
  %19681 = getelementptr inbounds i16, i16* %19678, i64 16
  %19682 = bitcast i16* %19681 to <16 x i16>*
  %19683 = load <16 x i16>, <16 x i16>* %19682, align 2, !tbaa !399
  %19684 = shufflevector <16 x i16> %19680, <16 x i16> %19683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19685 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19660, <32 x i16> %19668, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19686 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19684, <32 x i16> %19676, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19687 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19685, <32 x i16> %19686, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19688 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19687, <32 x i16> %19652, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19689 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19688, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19690 = shufflevector <32 x i16> %19689, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19691 = add nsw i64 %19486, %19644
  %19692 = getelementptr inbounds i16, i16* %263, i64 %19691
  %19693 = bitcast i16* %19692 to <16 x i16>*
  store <16 x i16> %19690, <16 x i16>* %19693, align 2, !tbaa !401
  %19694 = shufflevector <32 x i16> %19689, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19695 = getelementptr inbounds i16, i16* %19692, i64 16
  %19696 = bitcast i16* %19695 to <16 x i16>*
  store <16 x i16> %19694, <16 x i16>* %19696, align 2, !tbaa !401
  %19697 = add nuw nsw i32 %blur_y.s0.x.x.rebased1376, 1
  %.not2630 = icmp eq i32 %19697, %t1683898
  br i1 %.not2630, label %"end for blur_y.s0.x.x.rebased1375", label %"for blur_y.s0.x.x.rebased1374"

after_bb1386:                                     ; preds = %"end for blur_y.s0.x.x.rebased1375", %"produce blur_x1389"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1401.preheader", label %"end for blur_y.s0.x.x.rebased1402", !prof !386

"for blur_y.s0.x.x.rebased1401.preheader":        ; preds = %after_bb1386
  %19698 = sext i32 %t17221053 to i64
  %19699 = zext i32 %.pre-phi3578 to i64
  %19700 = mul nsw i64 %19699, %337
  %19701 = sub nsw i64 %19700, %298
  %19702 = zext i32 %.pre-phi3574 to i64
  %19703 = mul nsw i64 %19702, %337
  %19704 = sub nsw i64 %19703, %298
  %19705 = zext i32 %.pre-phi3582 to i64
  %19706 = mul nsw i64 %19705, %337
  %19707 = sub nsw i64 %19706, %298
  %19708 = zext i32 %.pre-phi3592 to i64
  %19709 = mul nsw i64 %19708, %337
  %19710 = sub nsw i64 %19709, %298
  %19711 = zext i32 %.pre-phi3586 to i64
  %19712 = mul nsw i64 %19711, %337
  %19713 = sub nsw i64 %19712, %298
  %19714 = sext i32 %a379 to i64
  %19715 = add nsw i64 %19714, 9
  %19716 = mul nsw i64 %19715, %334
  %19717 = add nsw i64 %19716, %338
  br label %"for blur_y.s0.x.x.rebased1401"

"produce blur_x1389":                             ; preds = %"end for blur_y.s0.x.x.rebased1375"
  %19718 = getelementptr inbounds i16, i16* %read_input822, i64 %389
  %19719 = getelementptr inbounds i16, i16* %19718, i64 -31
  %19720 = bitcast i16* %19719 to <16 x i16>*
  %19721 = load <16 x i16>, <16 x i16>* %19720, align 2, !tbaa !396
  %19722 = getelementptr inbounds i16, i16* %19718, i64 -15
  %19723 = bitcast i16* %19722 to <16 x i16>*
  %19724 = load <16 x i16>, <16 x i16>* %19723, align 2, !tbaa !396
  %19725 = shufflevector <16 x i16> %19721, <16 x i16> %19724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19726 = getelementptr inbounds i16, i16* %19718, i64 -32
  %19727 = bitcast i16* %19726 to <16 x i16>*
  %19728 = load <16 x i16>, <16 x i16>* %19727, align 2, !tbaa !396
  %19729 = getelementptr inbounds i16, i16* %19718, i64 -16
  %19730 = bitcast i16* %19729 to <16 x i16>*
  %19731 = load <16 x i16>, <16 x i16>* %19730, align 2, !tbaa !396
  %19732 = shufflevector <16 x i16> %19728, <16 x i16> %19731, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19733 = getelementptr inbounds i16, i16* %19718, i64 -30
  %19734 = bitcast i16* %19733 to <16 x i16>*
  %19735 = load <16 x i16>, <16 x i16>* %19734, align 2, !tbaa !396
  %19736 = getelementptr inbounds i16, i16* %19718, i64 -14
  %19737 = bitcast i16* %19736 to <16 x i16>*
  %19738 = load <16 x i16>, <16 x i16>* %19737, align 2, !tbaa !396
  %19739 = shufflevector <16 x i16> %19735, <16 x i16> %19738, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19740 = getelementptr inbounds i16, i16* %19718, i64 -28
  %19741 = bitcast i16* %19740 to <16 x i16>*
  %19742 = load <16 x i16>, <16 x i16>* %19741, align 2, !tbaa !396
  %19743 = getelementptr inbounds i16, i16* %19718, i64 -12
  %19744 = bitcast i16* %19743 to <16 x i16>*
  %19745 = load <16 x i16>, <16 x i16>* %19744, align 2, !tbaa !396
  %19746 = shufflevector <16 x i16> %19742, <16 x i16> %19745, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19747 = getelementptr inbounds i16, i16* %19718, i64 -29
  %19748 = bitcast i16* %19747 to <16 x i16>*
  %19749 = load <16 x i16>, <16 x i16>* %19748, align 2, !tbaa !396
  %19750 = getelementptr inbounds i16, i16* %19718, i64 -13
  %19751 = bitcast i16* %19750 to <16 x i16>*
  %19752 = load <16 x i16>, <16 x i16>* %19751, align 2, !tbaa !396
  %19753 = shufflevector <16 x i16> %19749, <16 x i16> %19752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19754 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19732, <32 x i16> %19739, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19755 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19753, <32 x i16> %19746, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19756 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19754, <32 x i16> %19755, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19757 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19756, <32 x i16> %19725, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19758 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19757, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19759 = shufflevector <32 x i16> %19758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19760 = zext i32 %.pre-phi3592 to i64
  %19761 = mul nsw i64 %299, %19760
  %19762 = add nsw i64 %301, %19761
  %19763 = getelementptr inbounds i16, i16* %blur_x879, i64 %19762
  %19764 = getelementptr inbounds i16, i16* %19763, i64 -32
  %19765 = bitcast i16* %19764 to <16 x i16>*
  store <16 x i16> %19759, <16 x i16>* %19765, align 2, !tbaa !399
  %19766 = shufflevector <32 x i16> %19758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19767 = getelementptr inbounds i16, i16* %19763, i64 -16
  %19768 = bitcast i16* %19767 to <16 x i16>*
  store <16 x i16> %19766, <16 x i16>* %19768, align 2, !tbaa !399
  %19769 = zext i32 %.pre-phi3578 to i64
  %19770 = mul nsw i64 %19769, %333
  %19771 = add nsw i64 %19770, %296
  %19772 = getelementptr inbounds i16, i16* %blur_x879, i64 %19771
  %19773 = getelementptr inbounds i16, i16* %19772, i64 -32
  %19774 = bitcast i16* %19773 to <16 x i16>*
  %19775 = load <16 x i16>, <16 x i16>* %19774, align 2, !tbaa !399
  %19776 = getelementptr inbounds i16, i16* %19772, i64 -16
  %19777 = bitcast i16* %19776 to <16 x i16>*
  %19778 = load <16 x i16>, <16 x i16>* %19777, align 2, !tbaa !399
  %19779 = shufflevector <16 x i16> %19775, <16 x i16> %19778, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19780 = zext i32 %.pre-phi3574 to i64
  %19781 = mul nsw i64 %19780, %333
  %19782 = add nsw i64 %19781, %296
  %19783 = getelementptr inbounds i16, i16* %blur_x879, i64 %19782
  %19784 = getelementptr inbounds i16, i16* %19783, i64 -32
  %19785 = bitcast i16* %19784 to <16 x i16>*
  %19786 = load <16 x i16>, <16 x i16>* %19785, align 2, !tbaa !399
  %19787 = getelementptr inbounds i16, i16* %19783, i64 -16
  %19788 = bitcast i16* %19787 to <16 x i16>*
  %19789 = load <16 x i16>, <16 x i16>* %19788, align 2, !tbaa !399
  %19790 = shufflevector <16 x i16> %19786, <16 x i16> %19789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19791 = zext i32 %.pre-phi3582 to i64
  %19792 = mul nsw i64 %19791, %333
  %19793 = add nsw i64 %19792, %296
  %19794 = getelementptr inbounds i16, i16* %blur_x879, i64 %19793
  %19795 = getelementptr inbounds i16, i16* %19794, i64 -32
  %19796 = bitcast i16* %19795 to <16 x i16>*
  %19797 = load <16 x i16>, <16 x i16>* %19796, align 2, !tbaa !399
  %19798 = getelementptr inbounds i16, i16* %19794, i64 -16
  %19799 = bitcast i16* %19798 to <16 x i16>*
  %19800 = load <16 x i16>, <16 x i16>* %19799, align 2, !tbaa !399
  %19801 = shufflevector <16 x i16> %19797, <16 x i16> %19800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19802 = mul nsw i64 %19760, %333
  %19803 = add nsw i64 %19802, %296
  %19804 = getelementptr inbounds i16, i16* %blur_x879, i64 %19803
  %19805 = getelementptr inbounds i16, i16* %19804, i64 -32
  %19806 = bitcast i16* %19805 to <16 x i16>*
  %19807 = load <16 x i16>, <16 x i16>* %19806, align 2, !tbaa !399
  %19808 = getelementptr inbounds i16, i16* %19804, i64 -16
  %19809 = bitcast i16* %19808 to <16 x i16>*
  %19810 = load <16 x i16>, <16 x i16>* %19809, align 2, !tbaa !399
  %19811 = shufflevector <16 x i16> %19807, <16 x i16> %19810, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19812 = zext i32 %.pre-phi3586 to i64
  %19813 = mul nsw i64 %19812, %333
  %19814 = add nsw i64 %19813, %296
  %19815 = getelementptr inbounds i16, i16* %blur_x879, i64 %19814
  %19816 = getelementptr inbounds i16, i16* %19815, i64 -32
  %19817 = bitcast i16* %19816 to <16 x i16>*
  %19818 = load <16 x i16>, <16 x i16>* %19817, align 2, !tbaa !399
  %19819 = getelementptr inbounds i16, i16* %19815, i64 -16
  %19820 = bitcast i16* %19819 to <16 x i16>*
  %19821 = load <16 x i16>, <16 x i16>* %19820, align 2, !tbaa !399
  %19822 = shufflevector <16 x i16> %19818, <16 x i16> %19821, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19823 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19790, <32 x i16> %19801, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19824 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19822, <32 x i16> %19811, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19825 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19823, <32 x i16> %19824, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19826 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19825, <32 x i16> %19779, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19827 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19826, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19828 = shufflevector <32 x i16> %19827, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19829 = sext i32 %a379 to i64
  %19830 = add nsw i64 %19829, 9
  %19831 = mul nsw i64 %19830, %334
  %19832 = add nsw i64 %336, %19831
  %19833 = getelementptr inbounds i16, i16* %263, i64 %19832
  %19834 = getelementptr inbounds i16, i16* %19833, i64 -32
  %19835 = bitcast i16* %19834 to <16 x i16>*
  store <16 x i16> %19828, <16 x i16>* %19835, align 2, !tbaa !401
  %19836 = shufflevector <32 x i16> %19827, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19837 = getelementptr inbounds i16, i16* %19833, i64 -16
  %19838 = bitcast i16* %19837 to <16 x i16>*
  store <16 x i16> %19836, <16 x i16>* %19838, align 2, !tbaa !401
  br label %after_bb1386

"for blur_y.s0.x.x.rebased1401":                  ; preds = %"for blur_y.s0.x.x.rebased1401.preheader", %"consume blur_x1409"
  %indvars.iv3404 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1401.preheader" ], [ %indvars.iv.next3405, %"consume blur_x1409" ]
  %19839 = add nsw i64 %indvars.iv3404, %303
  %19840 = icmp slt i64 %19839, 1
  %19841 = trunc i64 %19839 to i32
  %19842 = shl nsw i32 %19841, 5
  %19843 = icmp sgt i32 %198, %19842
  %19844 = or i1 %19840, %19843
  br i1 %19844, label %"produce blur_x1407", label %"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge"

"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1401"
  %.pre3617 = shl nsw i64 %19839, 5
  br label %"consume blur_x1409"

"end for blur_y.s0.x.x.rebased1402":              ; preds = %"consume blur_x1409", %after_bb1386
  br i1 %304, label %"for blur_y.s0.x.x.rebased1417.preheader", label %"end for blur_y.s0.x.x.rebased1418", !prof !386

"for blur_y.s0.x.x.rebased1417.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1402"
  %19845 = sext i32 %t17221053 to i64
  %19846 = zext i32 %.pre-phi3578 to i64
  %19847 = mul nsw i64 %19846, %337
  %19848 = sub nsw i64 %19847, %298
  %19849 = zext i32 %.pre-phi3574 to i64
  %19850 = mul nsw i64 %19849, %337
  %19851 = sub nsw i64 %19850, %298
  %19852 = zext i32 %.pre-phi3582 to i64
  %19853 = mul nsw i64 %19852, %337
  %19854 = sub nsw i64 %19853, %298
  %19855 = zext i32 %.pre-phi3592 to i64
  %19856 = mul nsw i64 %19855, %337
  %19857 = sub nsw i64 %19856, %298
  %19858 = zext i32 %.pre-phi3586 to i64
  %19859 = mul nsw i64 %19858, %337
  %19860 = sub nsw i64 %19859, %298
  %19861 = sext i32 %a379 to i64
  %19862 = add nsw i64 %19861, 9
  %19863 = mul nsw i64 %19862, %334
  %19864 = add nsw i64 %19863, %338
  br label %"for blur_y.s0.x.x.rebased1417"

"produce blur_x1407":                             ; preds = %"for blur_y.s0.x.x.rebased1401"
  %t8561408 = add nsw i32 %391, %19842
  %19865 = sext i32 %t8561408 to i64
  %19866 = getelementptr inbounds i16, i16* %read_input822, i64 %19865
  %19867 = getelementptr inbounds i16, i16* %19866, i64 1
  %19868 = bitcast i16* %19867 to <16 x i16>*
  %19869 = load <16 x i16>, <16 x i16>* %19868, align 2, !tbaa !396
  %19870 = getelementptr inbounds i16, i16* %19866, i64 17
  %19871 = bitcast i16* %19870 to <16 x i16>*
  %19872 = load <16 x i16>, <16 x i16>* %19871, align 2, !tbaa !396
  %19873 = shufflevector <16 x i16> %19869, <16 x i16> %19872, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19874 = bitcast i16* %19866 to <16 x i16>*
  %19875 = load <16 x i16>, <16 x i16>* %19874, align 2, !tbaa !396
  %19876 = getelementptr inbounds i16, i16* %19866, i64 16
  %19877 = bitcast i16* %19876 to <16 x i16>*
  %19878 = load <16 x i16>, <16 x i16>* %19877, align 2, !tbaa !396
  %19879 = shufflevector <16 x i16> %19875, <16 x i16> %19878, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19880 = getelementptr inbounds i16, i16* %19866, i64 2
  %19881 = bitcast i16* %19880 to <16 x i16>*
  %19882 = load <16 x i16>, <16 x i16>* %19881, align 2, !tbaa !396
  %19883 = getelementptr inbounds i16, i16* %19866, i64 18
  %19884 = bitcast i16* %19883 to <16 x i16>*
  %19885 = load <16 x i16>, <16 x i16>* %19884, align 2, !tbaa !396
  %19886 = shufflevector <16 x i16> %19882, <16 x i16> %19885, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19887 = getelementptr inbounds i16, i16* %19866, i64 4
  %19888 = bitcast i16* %19887 to <16 x i16>*
  %19889 = load <16 x i16>, <16 x i16>* %19888, align 2, !tbaa !396
  %19890 = getelementptr inbounds i16, i16* %19866, i64 20
  %19891 = bitcast i16* %19890 to <16 x i16>*
  %19892 = load <16 x i16>, <16 x i16>* %19891, align 2, !tbaa !396
  %19893 = shufflevector <16 x i16> %19889, <16 x i16> %19892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19894 = getelementptr inbounds i16, i16* %19866, i64 3
  %19895 = bitcast i16* %19894 to <16 x i16>*
  %19896 = load <16 x i16>, <16 x i16>* %19895, align 2, !tbaa !396
  %19897 = getelementptr inbounds i16, i16* %19866, i64 19
  %19898 = bitcast i16* %19897 to <16 x i16>*
  %19899 = load <16 x i16>, <16 x i16>* %19898, align 2, !tbaa !396
  %19900 = shufflevector <16 x i16> %19896, <16 x i16> %19899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19901 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19879, <32 x i16> %19886, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19902 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19900, <32 x i16> %19893, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19903 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19901, <32 x i16> %19902, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19904 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19903, <32 x i16> %19873, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19905 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19904, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19906 = shufflevector <32 x i16> %19905, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19907 = shl nsw i64 %19839, 5
  %19908 = add nsw i64 %19907, %19698
  %19909 = getelementptr inbounds i16, i16* %blur_x879, i64 %19908
  %19910 = bitcast i16* %19909 to <16 x i16>*
  store <16 x i16> %19906, <16 x i16>* %19910, align 2, !tbaa !399
  %19911 = shufflevector <32 x i16> %19905, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19912 = getelementptr inbounds i16, i16* %19909, i64 16
  %19913 = bitcast i16* %19912 to <16 x i16>*
  store <16 x i16> %19911, <16 x i16>* %19913, align 2, !tbaa !399
  br label %"consume blur_x1409"

"consume blur_x1409":                             ; preds = %"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge", %"produce blur_x1407"
  %.pre-phi3618 = phi i64 [ %.pre3617, %"for blur_y.s0.x.x.rebased1401.consume blur_x1409_crit_edge" ], [ %19907, %"produce blur_x1407" ]
  %19914 = add nsw i64 %19701, %.pre-phi3618
  %19915 = getelementptr inbounds i16, i16* %blur_x879, i64 %19914
  %19916 = bitcast i16* %19915 to <16 x i16>*
  %19917 = load <16 x i16>, <16 x i16>* %19916, align 2, !tbaa !399
  %19918 = getelementptr inbounds i16, i16* %19915, i64 16
  %19919 = bitcast i16* %19918 to <16 x i16>*
  %19920 = load <16 x i16>, <16 x i16>* %19919, align 2, !tbaa !399
  %19921 = shufflevector <16 x i16> %19917, <16 x i16> %19920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19922 = add nsw i64 %19704, %.pre-phi3618
  %19923 = getelementptr inbounds i16, i16* %blur_x879, i64 %19922
  %19924 = bitcast i16* %19923 to <16 x i16>*
  %19925 = load <16 x i16>, <16 x i16>* %19924, align 2, !tbaa !399
  %19926 = getelementptr inbounds i16, i16* %19923, i64 16
  %19927 = bitcast i16* %19926 to <16 x i16>*
  %19928 = load <16 x i16>, <16 x i16>* %19927, align 2, !tbaa !399
  %19929 = shufflevector <16 x i16> %19925, <16 x i16> %19928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19930 = add nsw i64 %19707, %.pre-phi3618
  %19931 = getelementptr inbounds i16, i16* %blur_x879, i64 %19930
  %19932 = bitcast i16* %19931 to <16 x i16>*
  %19933 = load <16 x i16>, <16 x i16>* %19932, align 2, !tbaa !399
  %19934 = getelementptr inbounds i16, i16* %19931, i64 16
  %19935 = bitcast i16* %19934 to <16 x i16>*
  %19936 = load <16 x i16>, <16 x i16>* %19935, align 2, !tbaa !399
  %19937 = shufflevector <16 x i16> %19933, <16 x i16> %19936, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19938 = add nsw i64 %19710, %.pre-phi3618
  %19939 = getelementptr inbounds i16, i16* %blur_x879, i64 %19938
  %19940 = bitcast i16* %19939 to <16 x i16>*
  %19941 = load <16 x i16>, <16 x i16>* %19940, align 2, !tbaa !399
  %19942 = getelementptr inbounds i16, i16* %19939, i64 16
  %19943 = bitcast i16* %19942 to <16 x i16>*
  %19944 = load <16 x i16>, <16 x i16>* %19943, align 2, !tbaa !399
  %19945 = shufflevector <16 x i16> %19941, <16 x i16> %19944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19946 = add nsw i64 %19713, %.pre-phi3618
  %19947 = getelementptr inbounds i16, i16* %blur_x879, i64 %19946
  %19948 = bitcast i16* %19947 to <16 x i16>*
  %19949 = load <16 x i16>, <16 x i16>* %19948, align 2, !tbaa !399
  %19950 = getelementptr inbounds i16, i16* %19947, i64 16
  %19951 = bitcast i16* %19950 to <16 x i16>*
  %19952 = load <16 x i16>, <16 x i16>* %19951, align 2, !tbaa !399
  %19953 = shufflevector <16 x i16> %19949, <16 x i16> %19952, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19954 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19929, <32 x i16> %19937, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19955 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19953, <32 x i16> %19945, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19956 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19954, <32 x i16> %19955, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19957 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19956, <32 x i16> %19921, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19958 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19957, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19959 = shufflevector <32 x i16> %19958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19960 = add nsw i64 %19717, %.pre-phi3618
  %19961 = getelementptr inbounds i16, i16* %263, i64 %19960
  %19962 = bitcast i16* %19961 to <16 x i16>*
  store <16 x i16> %19959, <16 x i16>* %19962, align 2, !tbaa !401
  %19963 = shufflevector <32 x i16> %19958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19964 = getelementptr inbounds i16, i16* %19961, i64 16
  %19965 = bitcast i16* %19964 to <16 x i16>*
  store <16 x i16> %19963, <16 x i16>* %19965, align 2, !tbaa !401
  %indvars.iv.next3405 = add nuw nsw i64 %indvars.iv3404, 1
  %19966 = icmp eq i64 %indvars.iv.next3405, %zext3406
  br i1 %19966, label %"end for blur_y.s0.x.x.rebased1402", label %"for blur_y.s0.x.x.rebased1401"

"for blur_y.s0.x.x.rebased1417":                  ; preds = %"for blur_y.s0.x.x.rebased1417.preheader", %"consume blur_x1428"
  %blur_y.s0.x.x.rebased1419 = phi i32 [ %20075, %"consume blur_x1428" ], [ 0, %"for blur_y.s0.x.x.rebased1417.preheader" ]
  %19967 = add nsw i32 %blur_y.s0.x.x.rebased1419, %t1626814
  %a2722 = shl nsw i32 %19967, 5
  %19968 = icmp sgt i32 %t1647, %a2722
  %blur_y.s0.x.v0.base.s1420 = select i1 %19968, i32 %a2722, i32 %t1647
  %19969 = icmp slt i32 %19967, 1
  %19970 = icmp sgt i32 %198, %a2722
  %19971 = or i1 %19969, %19970
  br i1 %19971, label %"produce blur_x1425", label %"consume blur_x1428"

"end for blur_y.s0.x.x.rebased1418":              ; preds = %"consume blur_x1428", %"end for blur_y.s0.x.x.rebased1402"
  br i1 %229, label %"produce blur_x1432", label %after_bb1429

"produce blur_x1425":                             ; preds = %"for blur_y.s0.x.x.rebased1417"
  %19972 = icmp slt i32 %blur_y.s0.x.v0.base.s1420, %198
  %blur_x.s0.x.v1.base.s1426 = select i1 %19972, i32 %blur_y.s0.x.v0.base.s1420, i32 %198
  %t8611427 = add nsw i32 %391, %blur_x.s0.x.v1.base.s1426
  %19973 = sext i32 %t8611427 to i64
  %19974 = getelementptr inbounds i16, i16* %read_input822, i64 %19973
  %19975 = getelementptr inbounds i16, i16* %19974, i64 1
  %19976 = bitcast i16* %19975 to <16 x i16>*
  %19977 = load <16 x i16>, <16 x i16>* %19976, align 2, !tbaa !396
  %19978 = getelementptr inbounds i16, i16* %19974, i64 17
  %19979 = bitcast i16* %19978 to <16 x i16>*
  %19980 = load <16 x i16>, <16 x i16>* %19979, align 2, !tbaa !396
  %19981 = shufflevector <16 x i16> %19977, <16 x i16> %19980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19982 = bitcast i16* %19974 to <16 x i16>*
  %19983 = load <16 x i16>, <16 x i16>* %19982, align 2, !tbaa !396
  %19984 = getelementptr inbounds i16, i16* %19974, i64 16
  %19985 = bitcast i16* %19984 to <16 x i16>*
  %19986 = load <16 x i16>, <16 x i16>* %19985, align 2, !tbaa !396
  %19987 = shufflevector <16 x i16> %19983, <16 x i16> %19986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19988 = getelementptr inbounds i16, i16* %19974, i64 2
  %19989 = bitcast i16* %19988 to <16 x i16>*
  %19990 = load <16 x i16>, <16 x i16>* %19989, align 2, !tbaa !396
  %19991 = getelementptr inbounds i16, i16* %19974, i64 18
  %19992 = bitcast i16* %19991 to <16 x i16>*
  %19993 = load <16 x i16>, <16 x i16>* %19992, align 2, !tbaa !396
  %19994 = shufflevector <16 x i16> %19990, <16 x i16> %19993, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19995 = getelementptr inbounds i16, i16* %19974, i64 4
  %19996 = bitcast i16* %19995 to <16 x i16>*
  %19997 = load <16 x i16>, <16 x i16>* %19996, align 2, !tbaa !396
  %19998 = getelementptr inbounds i16, i16* %19974, i64 20
  %19999 = bitcast i16* %19998 to <16 x i16>*
  %20000 = load <16 x i16>, <16 x i16>* %19999, align 2, !tbaa !396
  %20001 = shufflevector <16 x i16> %19997, <16 x i16> %20000, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20002 = getelementptr inbounds i16, i16* %19974, i64 3
  %20003 = bitcast i16* %20002 to <16 x i16>*
  %20004 = load <16 x i16>, <16 x i16>* %20003, align 2, !tbaa !396
  %20005 = getelementptr inbounds i16, i16* %19974, i64 19
  %20006 = bitcast i16* %20005 to <16 x i16>*
  %20007 = load <16 x i16>, <16 x i16>* %20006, align 2, !tbaa !396
  %20008 = shufflevector <16 x i16> %20004, <16 x i16> %20007, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20009 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19987, <32 x i16> %19994, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20010 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20008, <32 x i16> %20001, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20011 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20009, <32 x i16> %20010, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20012 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20011, <32 x i16> %19981, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20013 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20012, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20014 = shufflevector <32 x i16> %20013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20015 = sext i32 %blur_x.s0.x.v1.base.s1426 to i64
  %20016 = add nsw i64 %20015, %19845
  %20017 = getelementptr inbounds i16, i16* %blur_x879, i64 %20016
  %20018 = bitcast i16* %20017 to <16 x i16>*
  store <16 x i16> %20014, <16 x i16>* %20018, align 2, !tbaa !399
  %20019 = shufflevector <32 x i16> %20013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20020 = getelementptr inbounds i16, i16* %20017, i64 16
  %20021 = bitcast i16* %20020 to <16 x i16>*
  store <16 x i16> %20019, <16 x i16>* %20021, align 2, !tbaa !399
  br label %"consume blur_x1428"

"consume blur_x1428":                             ; preds = %"for blur_y.s0.x.x.rebased1417", %"produce blur_x1425"
  %20022 = sext i32 %blur_y.s0.x.v0.base.s1420 to i64
  %20023 = add nsw i64 %19848, %20022
  %20024 = getelementptr inbounds i16, i16* %blur_x879, i64 %20023
  %20025 = bitcast i16* %20024 to <16 x i16>*
  %20026 = load <16 x i16>, <16 x i16>* %20025, align 2, !tbaa !399
  %20027 = getelementptr inbounds i16, i16* %20024, i64 16
  %20028 = bitcast i16* %20027 to <16 x i16>*
  %20029 = load <16 x i16>, <16 x i16>* %20028, align 2, !tbaa !399
  %20030 = shufflevector <16 x i16> %20026, <16 x i16> %20029, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20031 = add nsw i64 %19851, %20022
  %20032 = getelementptr inbounds i16, i16* %blur_x879, i64 %20031
  %20033 = bitcast i16* %20032 to <16 x i16>*
  %20034 = load <16 x i16>, <16 x i16>* %20033, align 2, !tbaa !399
  %20035 = getelementptr inbounds i16, i16* %20032, i64 16
  %20036 = bitcast i16* %20035 to <16 x i16>*
  %20037 = load <16 x i16>, <16 x i16>* %20036, align 2, !tbaa !399
  %20038 = shufflevector <16 x i16> %20034, <16 x i16> %20037, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20039 = add nsw i64 %19854, %20022
  %20040 = getelementptr inbounds i16, i16* %blur_x879, i64 %20039
  %20041 = bitcast i16* %20040 to <16 x i16>*
  %20042 = load <16 x i16>, <16 x i16>* %20041, align 2, !tbaa !399
  %20043 = getelementptr inbounds i16, i16* %20040, i64 16
  %20044 = bitcast i16* %20043 to <16 x i16>*
  %20045 = load <16 x i16>, <16 x i16>* %20044, align 2, !tbaa !399
  %20046 = shufflevector <16 x i16> %20042, <16 x i16> %20045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20047 = add nsw i64 %19857, %20022
  %20048 = getelementptr inbounds i16, i16* %blur_x879, i64 %20047
  %20049 = bitcast i16* %20048 to <16 x i16>*
  %20050 = load <16 x i16>, <16 x i16>* %20049, align 2, !tbaa !399
  %20051 = getelementptr inbounds i16, i16* %20048, i64 16
  %20052 = bitcast i16* %20051 to <16 x i16>*
  %20053 = load <16 x i16>, <16 x i16>* %20052, align 2, !tbaa !399
  %20054 = shufflevector <16 x i16> %20050, <16 x i16> %20053, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20055 = add nsw i64 %19860, %20022
  %20056 = getelementptr inbounds i16, i16* %blur_x879, i64 %20055
  %20057 = bitcast i16* %20056 to <16 x i16>*
  %20058 = load <16 x i16>, <16 x i16>* %20057, align 2, !tbaa !399
  %20059 = getelementptr inbounds i16, i16* %20056, i64 16
  %20060 = bitcast i16* %20059 to <16 x i16>*
  %20061 = load <16 x i16>, <16 x i16>* %20060, align 2, !tbaa !399
  %20062 = shufflevector <16 x i16> %20058, <16 x i16> %20061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20063 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20038, <32 x i16> %20046, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20064 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20062, <32 x i16> %20054, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20065 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20063, <32 x i16> %20064, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20066 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20065, <32 x i16> %20030, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20067 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20066, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20068 = shufflevector <32 x i16> %20067, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20069 = add nsw i64 %19864, %20022
  %20070 = getelementptr inbounds i16, i16* %263, i64 %20069
  %20071 = bitcast i16* %20070 to <16 x i16>*
  store <16 x i16> %20068, <16 x i16>* %20071, align 2, !tbaa !401
  %20072 = shufflevector <32 x i16> %20067, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20073 = getelementptr inbounds i16, i16* %20070, i64 16
  %20074 = bitcast i16* %20073 to <16 x i16>*
  store <16 x i16> %20072, <16 x i16>* %20074, align 2, !tbaa !401
  %20075 = add nuw nsw i32 %blur_y.s0.x.x.rebased1419, 1
  %.not2626 = icmp eq i32 %20075, %t1683898
  br i1 %.not2626, label %"end for blur_y.s0.x.x.rebased1418", label %"for blur_y.s0.x.x.rebased1417"

after_bb1429:                                     ; preds = %"end for blur_y.s0.x.x.rebased1418", %"produce blur_x1432"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1444.preheader", label %"end for blur_y.s0.x.x.rebased1445", !prof !386

"for blur_y.s0.x.x.rebased1444.preheader":        ; preds = %after_bb1429
  %20076 = sext i32 %t17381096 to i64
  %20077 = zext i32 %.pre-phi3582 to i64
  %20078 = mul nsw i64 %20077, %337
  %20079 = sub nsw i64 %20078, %298
  %20080 = zext i32 %.pre-phi3578 to i64
  %20081 = mul nsw i64 %20080, %337
  %20082 = sub nsw i64 %20081, %298
  %20083 = zext i32 %.pre-phi3586 to i64
  %20084 = mul nsw i64 %20083, %337
  %20085 = sub nsw i64 %20084, %298
  %20086 = zext i32 %.pre-phi3598 to i64
  %20087 = mul nsw i64 %20086, %337
  %20088 = sub nsw i64 %20087, %298
  %20089 = zext i32 %.pre-phi3592 to i64
  %20090 = mul nsw i64 %20089, %337
  %20091 = sub nsw i64 %20090, %298
  %20092 = sext i32 %a379 to i64
  %20093 = add nsw i64 %20092, 10
  %20094 = mul nsw i64 %20093, %334
  %20095 = add nsw i64 %20094, %338
  br label %"for blur_y.s0.x.x.rebased1444"

"produce blur_x1432":                             ; preds = %"end for blur_y.s0.x.x.rebased1418"
  %20096 = getelementptr inbounds i16, i16* %read_input822, i64 %395
  %20097 = getelementptr inbounds i16, i16* %20096, i64 -31
  %20098 = bitcast i16* %20097 to <16 x i16>*
  %20099 = load <16 x i16>, <16 x i16>* %20098, align 2, !tbaa !396
  %20100 = getelementptr inbounds i16, i16* %20096, i64 -15
  %20101 = bitcast i16* %20100 to <16 x i16>*
  %20102 = load <16 x i16>, <16 x i16>* %20101, align 2, !tbaa !396
  %20103 = shufflevector <16 x i16> %20099, <16 x i16> %20102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20104 = getelementptr inbounds i16, i16* %20096, i64 -32
  %20105 = bitcast i16* %20104 to <16 x i16>*
  %20106 = load <16 x i16>, <16 x i16>* %20105, align 2, !tbaa !396
  %20107 = getelementptr inbounds i16, i16* %20096, i64 -16
  %20108 = bitcast i16* %20107 to <16 x i16>*
  %20109 = load <16 x i16>, <16 x i16>* %20108, align 2, !tbaa !396
  %20110 = shufflevector <16 x i16> %20106, <16 x i16> %20109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20111 = getelementptr inbounds i16, i16* %20096, i64 -30
  %20112 = bitcast i16* %20111 to <16 x i16>*
  %20113 = load <16 x i16>, <16 x i16>* %20112, align 2, !tbaa !396
  %20114 = getelementptr inbounds i16, i16* %20096, i64 -14
  %20115 = bitcast i16* %20114 to <16 x i16>*
  %20116 = load <16 x i16>, <16 x i16>* %20115, align 2, !tbaa !396
  %20117 = shufflevector <16 x i16> %20113, <16 x i16> %20116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20118 = getelementptr inbounds i16, i16* %20096, i64 -28
  %20119 = bitcast i16* %20118 to <16 x i16>*
  %20120 = load <16 x i16>, <16 x i16>* %20119, align 2, !tbaa !396
  %20121 = getelementptr inbounds i16, i16* %20096, i64 -12
  %20122 = bitcast i16* %20121 to <16 x i16>*
  %20123 = load <16 x i16>, <16 x i16>* %20122, align 2, !tbaa !396
  %20124 = shufflevector <16 x i16> %20120, <16 x i16> %20123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20125 = getelementptr inbounds i16, i16* %20096, i64 -29
  %20126 = bitcast i16* %20125 to <16 x i16>*
  %20127 = load <16 x i16>, <16 x i16>* %20126, align 2, !tbaa !396
  %20128 = getelementptr inbounds i16, i16* %20096, i64 -13
  %20129 = bitcast i16* %20128 to <16 x i16>*
  %20130 = load <16 x i16>, <16 x i16>* %20129, align 2, !tbaa !396
  %20131 = shufflevector <16 x i16> %20127, <16 x i16> %20130, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20132 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20110, <32 x i16> %20117, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20133 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20131, <32 x i16> %20124, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20134 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20132, <32 x i16> %20133, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20135 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20134, <32 x i16> %20103, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20136 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20135, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20137 = shufflevector <32 x i16> %20136, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20138 = zext i32 %.pre-phi3598 to i64
  %20139 = mul nsw i64 %299, %20138
  %20140 = add nsw i64 %301, %20139
  %20141 = getelementptr inbounds i16, i16* %blur_x879, i64 %20140
  %20142 = getelementptr inbounds i16, i16* %20141, i64 -32
  %20143 = bitcast i16* %20142 to <16 x i16>*
  store <16 x i16> %20137, <16 x i16>* %20143, align 2, !tbaa !399
  %20144 = shufflevector <32 x i16> %20136, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20145 = getelementptr inbounds i16, i16* %20141, i64 -16
  %20146 = bitcast i16* %20145 to <16 x i16>*
  store <16 x i16> %20144, <16 x i16>* %20146, align 2, !tbaa !399
  %20147 = zext i32 %.pre-phi3582 to i64
  %20148 = mul nsw i64 %20147, %333
  %20149 = add nsw i64 %20148, %296
  %20150 = getelementptr inbounds i16, i16* %blur_x879, i64 %20149
  %20151 = getelementptr inbounds i16, i16* %20150, i64 -32
  %20152 = bitcast i16* %20151 to <16 x i16>*
  %20153 = load <16 x i16>, <16 x i16>* %20152, align 2, !tbaa !399
  %20154 = getelementptr inbounds i16, i16* %20150, i64 -16
  %20155 = bitcast i16* %20154 to <16 x i16>*
  %20156 = load <16 x i16>, <16 x i16>* %20155, align 2, !tbaa !399
  %20157 = shufflevector <16 x i16> %20153, <16 x i16> %20156, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20158 = zext i32 %.pre-phi3578 to i64
  %20159 = mul nsw i64 %20158, %333
  %20160 = add nsw i64 %20159, %296
  %20161 = getelementptr inbounds i16, i16* %blur_x879, i64 %20160
  %20162 = getelementptr inbounds i16, i16* %20161, i64 -32
  %20163 = bitcast i16* %20162 to <16 x i16>*
  %20164 = load <16 x i16>, <16 x i16>* %20163, align 2, !tbaa !399
  %20165 = getelementptr inbounds i16, i16* %20161, i64 -16
  %20166 = bitcast i16* %20165 to <16 x i16>*
  %20167 = load <16 x i16>, <16 x i16>* %20166, align 2, !tbaa !399
  %20168 = shufflevector <16 x i16> %20164, <16 x i16> %20167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20169 = zext i32 %.pre-phi3586 to i64
  %20170 = mul nsw i64 %20169, %333
  %20171 = add nsw i64 %20170, %296
  %20172 = getelementptr inbounds i16, i16* %blur_x879, i64 %20171
  %20173 = getelementptr inbounds i16, i16* %20172, i64 -32
  %20174 = bitcast i16* %20173 to <16 x i16>*
  %20175 = load <16 x i16>, <16 x i16>* %20174, align 2, !tbaa !399
  %20176 = getelementptr inbounds i16, i16* %20172, i64 -16
  %20177 = bitcast i16* %20176 to <16 x i16>*
  %20178 = load <16 x i16>, <16 x i16>* %20177, align 2, !tbaa !399
  %20179 = shufflevector <16 x i16> %20175, <16 x i16> %20178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20180 = mul nsw i64 %20138, %333
  %20181 = add nsw i64 %20180, %296
  %20182 = getelementptr inbounds i16, i16* %blur_x879, i64 %20181
  %20183 = getelementptr inbounds i16, i16* %20182, i64 -32
  %20184 = bitcast i16* %20183 to <16 x i16>*
  %20185 = load <16 x i16>, <16 x i16>* %20184, align 2, !tbaa !399
  %20186 = getelementptr inbounds i16, i16* %20182, i64 -16
  %20187 = bitcast i16* %20186 to <16 x i16>*
  %20188 = load <16 x i16>, <16 x i16>* %20187, align 2, !tbaa !399
  %20189 = shufflevector <16 x i16> %20185, <16 x i16> %20188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20190 = zext i32 %.pre-phi3592 to i64
  %20191 = mul nsw i64 %20190, %333
  %20192 = add nsw i64 %20191, %296
  %20193 = getelementptr inbounds i16, i16* %blur_x879, i64 %20192
  %20194 = getelementptr inbounds i16, i16* %20193, i64 -32
  %20195 = bitcast i16* %20194 to <16 x i16>*
  %20196 = load <16 x i16>, <16 x i16>* %20195, align 2, !tbaa !399
  %20197 = getelementptr inbounds i16, i16* %20193, i64 -16
  %20198 = bitcast i16* %20197 to <16 x i16>*
  %20199 = load <16 x i16>, <16 x i16>* %20198, align 2, !tbaa !399
  %20200 = shufflevector <16 x i16> %20196, <16 x i16> %20199, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20201 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20168, <32 x i16> %20179, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20202 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20200, <32 x i16> %20189, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20203 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20201, <32 x i16> %20202, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20204 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20203, <32 x i16> %20157, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20205 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20204, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20206 = shufflevector <32 x i16> %20205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20207 = sext i32 %a379 to i64
  %20208 = add nsw i64 %20207, 10
  %20209 = mul nsw i64 %20208, %334
  %20210 = add nsw i64 %336, %20209
  %20211 = getelementptr inbounds i16, i16* %263, i64 %20210
  %20212 = getelementptr inbounds i16, i16* %20211, i64 -32
  %20213 = bitcast i16* %20212 to <16 x i16>*
  store <16 x i16> %20206, <16 x i16>* %20213, align 2, !tbaa !401
  %20214 = shufflevector <32 x i16> %20205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20215 = getelementptr inbounds i16, i16* %20211, i64 -16
  %20216 = bitcast i16* %20215 to <16 x i16>*
  store <16 x i16> %20214, <16 x i16>* %20216, align 2, !tbaa !401
  br label %after_bb1429

"for blur_y.s0.x.x.rebased1444":                  ; preds = %"for blur_y.s0.x.x.rebased1444.preheader", %"consume blur_x1452"
  %indvars.iv3407 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1444.preheader" ], [ %indvars.iv.next3408, %"consume blur_x1452" ]
  %20217 = add nsw i64 %indvars.iv3407, %303
  %20218 = icmp slt i64 %20217, 1
  %20219 = trunc i64 %20217 to i32
  %20220 = shl nsw i32 %20219, 5
  %20221 = icmp sgt i32 %198, %20220
  %20222 = or i1 %20218, %20221
  br i1 %20222, label %"produce blur_x1450", label %"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge"

"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1444"
  %.pre3619 = shl nsw i64 %20217, 5
  br label %"consume blur_x1452"

"end for blur_y.s0.x.x.rebased1445":              ; preds = %"consume blur_x1452", %after_bb1429
  br i1 %304, label %"for blur_y.s0.x.x.rebased1460.preheader", label %"end for blur_y.s0.x.x.rebased1461", !prof !386

"for blur_y.s0.x.x.rebased1460.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1445"
  %20223 = sext i32 %t17381096 to i64
  %20224 = zext i32 %.pre-phi3582 to i64
  %20225 = mul nsw i64 %20224, %337
  %20226 = sub nsw i64 %20225, %298
  %20227 = zext i32 %.pre-phi3578 to i64
  %20228 = mul nsw i64 %20227, %337
  %20229 = sub nsw i64 %20228, %298
  %20230 = zext i32 %.pre-phi3586 to i64
  %20231 = mul nsw i64 %20230, %337
  %20232 = sub nsw i64 %20231, %298
  %20233 = zext i32 %.pre-phi3598 to i64
  %20234 = mul nsw i64 %20233, %337
  %20235 = sub nsw i64 %20234, %298
  %20236 = zext i32 %.pre-phi3592 to i64
  %20237 = mul nsw i64 %20236, %337
  %20238 = sub nsw i64 %20237, %298
  %20239 = sext i32 %a379 to i64
  %20240 = add nsw i64 %20239, 10
  %20241 = mul nsw i64 %20240, %334
  %20242 = add nsw i64 %20241, %338
  br label %"for blur_y.s0.x.x.rebased1460"

"produce blur_x1450":                             ; preds = %"for blur_y.s0.x.x.rebased1444"
  %t8721451 = add nsw i32 %397, %20220
  %20243 = sext i32 %t8721451 to i64
  %20244 = getelementptr inbounds i16, i16* %read_input822, i64 %20243
  %20245 = getelementptr inbounds i16, i16* %20244, i64 1
  %20246 = bitcast i16* %20245 to <16 x i16>*
  %20247 = load <16 x i16>, <16 x i16>* %20246, align 2, !tbaa !396
  %20248 = getelementptr inbounds i16, i16* %20244, i64 17
  %20249 = bitcast i16* %20248 to <16 x i16>*
  %20250 = load <16 x i16>, <16 x i16>* %20249, align 2, !tbaa !396
  %20251 = shufflevector <16 x i16> %20247, <16 x i16> %20250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20252 = bitcast i16* %20244 to <16 x i16>*
  %20253 = load <16 x i16>, <16 x i16>* %20252, align 2, !tbaa !396
  %20254 = getelementptr inbounds i16, i16* %20244, i64 16
  %20255 = bitcast i16* %20254 to <16 x i16>*
  %20256 = load <16 x i16>, <16 x i16>* %20255, align 2, !tbaa !396
  %20257 = shufflevector <16 x i16> %20253, <16 x i16> %20256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20258 = getelementptr inbounds i16, i16* %20244, i64 2
  %20259 = bitcast i16* %20258 to <16 x i16>*
  %20260 = load <16 x i16>, <16 x i16>* %20259, align 2, !tbaa !396
  %20261 = getelementptr inbounds i16, i16* %20244, i64 18
  %20262 = bitcast i16* %20261 to <16 x i16>*
  %20263 = load <16 x i16>, <16 x i16>* %20262, align 2, !tbaa !396
  %20264 = shufflevector <16 x i16> %20260, <16 x i16> %20263, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20265 = getelementptr inbounds i16, i16* %20244, i64 4
  %20266 = bitcast i16* %20265 to <16 x i16>*
  %20267 = load <16 x i16>, <16 x i16>* %20266, align 2, !tbaa !396
  %20268 = getelementptr inbounds i16, i16* %20244, i64 20
  %20269 = bitcast i16* %20268 to <16 x i16>*
  %20270 = load <16 x i16>, <16 x i16>* %20269, align 2, !tbaa !396
  %20271 = shufflevector <16 x i16> %20267, <16 x i16> %20270, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20272 = getelementptr inbounds i16, i16* %20244, i64 3
  %20273 = bitcast i16* %20272 to <16 x i16>*
  %20274 = load <16 x i16>, <16 x i16>* %20273, align 2, !tbaa !396
  %20275 = getelementptr inbounds i16, i16* %20244, i64 19
  %20276 = bitcast i16* %20275 to <16 x i16>*
  %20277 = load <16 x i16>, <16 x i16>* %20276, align 2, !tbaa !396
  %20278 = shufflevector <16 x i16> %20274, <16 x i16> %20277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20279 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20257, <32 x i16> %20264, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20280 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20278, <32 x i16> %20271, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20281 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20279, <32 x i16> %20280, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20282 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20281, <32 x i16> %20251, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20283 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20282, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20284 = shufflevector <32 x i16> %20283, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20285 = shl nsw i64 %20217, 5
  %20286 = add nsw i64 %20285, %20076
  %20287 = getelementptr inbounds i16, i16* %blur_x879, i64 %20286
  %20288 = bitcast i16* %20287 to <16 x i16>*
  store <16 x i16> %20284, <16 x i16>* %20288, align 2, !tbaa !399
  %20289 = shufflevector <32 x i16> %20283, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20290 = getelementptr inbounds i16, i16* %20287, i64 16
  %20291 = bitcast i16* %20290 to <16 x i16>*
  store <16 x i16> %20289, <16 x i16>* %20291, align 2, !tbaa !399
  br label %"consume blur_x1452"

"consume blur_x1452":                             ; preds = %"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge", %"produce blur_x1450"
  %.pre-phi3620 = phi i64 [ %.pre3619, %"for blur_y.s0.x.x.rebased1444.consume blur_x1452_crit_edge" ], [ %20285, %"produce blur_x1450" ]
  %20292 = add nsw i64 %20079, %.pre-phi3620
  %20293 = getelementptr inbounds i16, i16* %blur_x879, i64 %20292
  %20294 = bitcast i16* %20293 to <16 x i16>*
  %20295 = load <16 x i16>, <16 x i16>* %20294, align 2, !tbaa !399
  %20296 = getelementptr inbounds i16, i16* %20293, i64 16
  %20297 = bitcast i16* %20296 to <16 x i16>*
  %20298 = load <16 x i16>, <16 x i16>* %20297, align 2, !tbaa !399
  %20299 = shufflevector <16 x i16> %20295, <16 x i16> %20298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20300 = add nsw i64 %20082, %.pre-phi3620
  %20301 = getelementptr inbounds i16, i16* %blur_x879, i64 %20300
  %20302 = bitcast i16* %20301 to <16 x i16>*
  %20303 = load <16 x i16>, <16 x i16>* %20302, align 2, !tbaa !399
  %20304 = getelementptr inbounds i16, i16* %20301, i64 16
  %20305 = bitcast i16* %20304 to <16 x i16>*
  %20306 = load <16 x i16>, <16 x i16>* %20305, align 2, !tbaa !399
  %20307 = shufflevector <16 x i16> %20303, <16 x i16> %20306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20308 = add nsw i64 %20085, %.pre-phi3620
  %20309 = getelementptr inbounds i16, i16* %blur_x879, i64 %20308
  %20310 = bitcast i16* %20309 to <16 x i16>*
  %20311 = load <16 x i16>, <16 x i16>* %20310, align 2, !tbaa !399
  %20312 = getelementptr inbounds i16, i16* %20309, i64 16
  %20313 = bitcast i16* %20312 to <16 x i16>*
  %20314 = load <16 x i16>, <16 x i16>* %20313, align 2, !tbaa !399
  %20315 = shufflevector <16 x i16> %20311, <16 x i16> %20314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20316 = add nsw i64 %20088, %.pre-phi3620
  %20317 = getelementptr inbounds i16, i16* %blur_x879, i64 %20316
  %20318 = bitcast i16* %20317 to <16 x i16>*
  %20319 = load <16 x i16>, <16 x i16>* %20318, align 2, !tbaa !399
  %20320 = getelementptr inbounds i16, i16* %20317, i64 16
  %20321 = bitcast i16* %20320 to <16 x i16>*
  %20322 = load <16 x i16>, <16 x i16>* %20321, align 2, !tbaa !399
  %20323 = shufflevector <16 x i16> %20319, <16 x i16> %20322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20324 = add nsw i64 %20091, %.pre-phi3620
  %20325 = getelementptr inbounds i16, i16* %blur_x879, i64 %20324
  %20326 = bitcast i16* %20325 to <16 x i16>*
  %20327 = load <16 x i16>, <16 x i16>* %20326, align 2, !tbaa !399
  %20328 = getelementptr inbounds i16, i16* %20325, i64 16
  %20329 = bitcast i16* %20328 to <16 x i16>*
  %20330 = load <16 x i16>, <16 x i16>* %20329, align 2, !tbaa !399
  %20331 = shufflevector <16 x i16> %20327, <16 x i16> %20330, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20332 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20307, <32 x i16> %20315, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20333 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20331, <32 x i16> %20323, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20334 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20332, <32 x i16> %20333, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20335 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20334, <32 x i16> %20299, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20336 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20335, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20337 = shufflevector <32 x i16> %20336, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20338 = add nsw i64 %20095, %.pre-phi3620
  %20339 = getelementptr inbounds i16, i16* %263, i64 %20338
  %20340 = bitcast i16* %20339 to <16 x i16>*
  store <16 x i16> %20337, <16 x i16>* %20340, align 2, !tbaa !401
  %20341 = shufflevector <32 x i16> %20336, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20342 = getelementptr inbounds i16, i16* %20339, i64 16
  %20343 = bitcast i16* %20342 to <16 x i16>*
  store <16 x i16> %20341, <16 x i16>* %20343, align 2, !tbaa !401
  %indvars.iv.next3408 = add nuw nsw i64 %indvars.iv3407, 1
  %20344 = icmp eq i64 %indvars.iv.next3408, %zext3409
  br i1 %20344, label %"end for blur_y.s0.x.x.rebased1445", label %"for blur_y.s0.x.x.rebased1444"

"for blur_y.s0.x.x.rebased1460":                  ; preds = %"for blur_y.s0.x.x.rebased1460.preheader", %"consume blur_x1471"
  %blur_y.s0.x.x.rebased1462 = phi i32 [ %20453, %"consume blur_x1471" ], [ 0, %"for blur_y.s0.x.x.rebased1460.preheader" ]
  %20345 = add nsw i32 %blur_y.s0.x.x.rebased1462, %t1626814
  %a2879 = shl nsw i32 %20345, 5
  %20346 = icmp sgt i32 %t1647, %a2879
  %blur_y.s0.x.v0.base.s1463 = select i1 %20346, i32 %a2879, i32 %t1647
  %20347 = icmp slt i32 %20345, 1
  %20348 = icmp sgt i32 %198, %a2879
  %20349 = or i1 %20347, %20348
  br i1 %20349, label %"produce blur_x1468", label %"consume blur_x1471"

"end for blur_y.s0.x.x.rebased1461":              ; preds = %"consume blur_x1471", %"end for blur_y.s0.x.x.rebased1445"
  br i1 %229, label %"produce blur_x1475", label %after_bb1472

"produce blur_x1468":                             ; preds = %"for blur_y.s0.x.x.rebased1460"
  %20350 = icmp slt i32 %blur_y.s0.x.v0.base.s1463, %198
  %blur_x.s0.x.v1.base.s1469 = select i1 %20350, i32 %blur_y.s0.x.v0.base.s1463, i32 %198
  %t8771470 = add nsw i32 %397, %blur_x.s0.x.v1.base.s1469
  %20351 = sext i32 %t8771470 to i64
  %20352 = getelementptr inbounds i16, i16* %read_input822, i64 %20351
  %20353 = getelementptr inbounds i16, i16* %20352, i64 1
  %20354 = bitcast i16* %20353 to <16 x i16>*
  %20355 = load <16 x i16>, <16 x i16>* %20354, align 2, !tbaa !396
  %20356 = getelementptr inbounds i16, i16* %20352, i64 17
  %20357 = bitcast i16* %20356 to <16 x i16>*
  %20358 = load <16 x i16>, <16 x i16>* %20357, align 2, !tbaa !396
  %20359 = shufflevector <16 x i16> %20355, <16 x i16> %20358, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20360 = bitcast i16* %20352 to <16 x i16>*
  %20361 = load <16 x i16>, <16 x i16>* %20360, align 2, !tbaa !396
  %20362 = getelementptr inbounds i16, i16* %20352, i64 16
  %20363 = bitcast i16* %20362 to <16 x i16>*
  %20364 = load <16 x i16>, <16 x i16>* %20363, align 2, !tbaa !396
  %20365 = shufflevector <16 x i16> %20361, <16 x i16> %20364, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20366 = getelementptr inbounds i16, i16* %20352, i64 2
  %20367 = bitcast i16* %20366 to <16 x i16>*
  %20368 = load <16 x i16>, <16 x i16>* %20367, align 2, !tbaa !396
  %20369 = getelementptr inbounds i16, i16* %20352, i64 18
  %20370 = bitcast i16* %20369 to <16 x i16>*
  %20371 = load <16 x i16>, <16 x i16>* %20370, align 2, !tbaa !396
  %20372 = shufflevector <16 x i16> %20368, <16 x i16> %20371, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20373 = getelementptr inbounds i16, i16* %20352, i64 4
  %20374 = bitcast i16* %20373 to <16 x i16>*
  %20375 = load <16 x i16>, <16 x i16>* %20374, align 2, !tbaa !396
  %20376 = getelementptr inbounds i16, i16* %20352, i64 20
  %20377 = bitcast i16* %20376 to <16 x i16>*
  %20378 = load <16 x i16>, <16 x i16>* %20377, align 2, !tbaa !396
  %20379 = shufflevector <16 x i16> %20375, <16 x i16> %20378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20380 = getelementptr inbounds i16, i16* %20352, i64 3
  %20381 = bitcast i16* %20380 to <16 x i16>*
  %20382 = load <16 x i16>, <16 x i16>* %20381, align 2, !tbaa !396
  %20383 = getelementptr inbounds i16, i16* %20352, i64 19
  %20384 = bitcast i16* %20383 to <16 x i16>*
  %20385 = load <16 x i16>, <16 x i16>* %20384, align 2, !tbaa !396
  %20386 = shufflevector <16 x i16> %20382, <16 x i16> %20385, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20387 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20365, <32 x i16> %20372, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20388 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20386, <32 x i16> %20379, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20389 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20387, <32 x i16> %20388, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20390 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20389, <32 x i16> %20359, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20391 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20390, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20392 = shufflevector <32 x i16> %20391, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20393 = sext i32 %blur_x.s0.x.v1.base.s1469 to i64
  %20394 = add nsw i64 %20393, %20223
  %20395 = getelementptr inbounds i16, i16* %blur_x879, i64 %20394
  %20396 = bitcast i16* %20395 to <16 x i16>*
  store <16 x i16> %20392, <16 x i16>* %20396, align 2, !tbaa !399
  %20397 = shufflevector <32 x i16> %20391, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20398 = getelementptr inbounds i16, i16* %20395, i64 16
  %20399 = bitcast i16* %20398 to <16 x i16>*
  store <16 x i16> %20397, <16 x i16>* %20399, align 2, !tbaa !399
  br label %"consume blur_x1471"

"consume blur_x1471":                             ; preds = %"for blur_y.s0.x.x.rebased1460", %"produce blur_x1468"
  %20400 = sext i32 %blur_y.s0.x.v0.base.s1463 to i64
  %20401 = add nsw i64 %20226, %20400
  %20402 = getelementptr inbounds i16, i16* %blur_x879, i64 %20401
  %20403 = bitcast i16* %20402 to <16 x i16>*
  %20404 = load <16 x i16>, <16 x i16>* %20403, align 2, !tbaa !399
  %20405 = getelementptr inbounds i16, i16* %20402, i64 16
  %20406 = bitcast i16* %20405 to <16 x i16>*
  %20407 = load <16 x i16>, <16 x i16>* %20406, align 2, !tbaa !399
  %20408 = shufflevector <16 x i16> %20404, <16 x i16> %20407, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20409 = add nsw i64 %20229, %20400
  %20410 = getelementptr inbounds i16, i16* %blur_x879, i64 %20409
  %20411 = bitcast i16* %20410 to <16 x i16>*
  %20412 = load <16 x i16>, <16 x i16>* %20411, align 2, !tbaa !399
  %20413 = getelementptr inbounds i16, i16* %20410, i64 16
  %20414 = bitcast i16* %20413 to <16 x i16>*
  %20415 = load <16 x i16>, <16 x i16>* %20414, align 2, !tbaa !399
  %20416 = shufflevector <16 x i16> %20412, <16 x i16> %20415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20417 = add nsw i64 %20232, %20400
  %20418 = getelementptr inbounds i16, i16* %blur_x879, i64 %20417
  %20419 = bitcast i16* %20418 to <16 x i16>*
  %20420 = load <16 x i16>, <16 x i16>* %20419, align 2, !tbaa !399
  %20421 = getelementptr inbounds i16, i16* %20418, i64 16
  %20422 = bitcast i16* %20421 to <16 x i16>*
  %20423 = load <16 x i16>, <16 x i16>* %20422, align 2, !tbaa !399
  %20424 = shufflevector <16 x i16> %20420, <16 x i16> %20423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20425 = add nsw i64 %20235, %20400
  %20426 = getelementptr inbounds i16, i16* %blur_x879, i64 %20425
  %20427 = bitcast i16* %20426 to <16 x i16>*
  %20428 = load <16 x i16>, <16 x i16>* %20427, align 2, !tbaa !399
  %20429 = getelementptr inbounds i16, i16* %20426, i64 16
  %20430 = bitcast i16* %20429 to <16 x i16>*
  %20431 = load <16 x i16>, <16 x i16>* %20430, align 2, !tbaa !399
  %20432 = shufflevector <16 x i16> %20428, <16 x i16> %20431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20433 = add nsw i64 %20238, %20400
  %20434 = getelementptr inbounds i16, i16* %blur_x879, i64 %20433
  %20435 = bitcast i16* %20434 to <16 x i16>*
  %20436 = load <16 x i16>, <16 x i16>* %20435, align 2, !tbaa !399
  %20437 = getelementptr inbounds i16, i16* %20434, i64 16
  %20438 = bitcast i16* %20437 to <16 x i16>*
  %20439 = load <16 x i16>, <16 x i16>* %20438, align 2, !tbaa !399
  %20440 = shufflevector <16 x i16> %20436, <16 x i16> %20439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20441 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20416, <32 x i16> %20424, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20442 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20440, <32 x i16> %20432, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20443 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20441, <32 x i16> %20442, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20444 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20443, <32 x i16> %20408, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20445 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20444, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20446 = shufflevector <32 x i16> %20445, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20447 = add nsw i64 %20242, %20400
  %20448 = getelementptr inbounds i16, i16* %263, i64 %20447
  %20449 = bitcast i16* %20448 to <16 x i16>*
  store <16 x i16> %20446, <16 x i16>* %20449, align 2, !tbaa !401
  %20450 = shufflevector <32 x i16> %20445, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20451 = getelementptr inbounds i16, i16* %20448, i64 16
  %20452 = bitcast i16* %20451 to <16 x i16>*
  store <16 x i16> %20450, <16 x i16>* %20452, align 2, !tbaa !401
  %20453 = add nuw nsw i32 %blur_y.s0.x.x.rebased1462, 1
  %.not2622 = icmp eq i32 %20453, %t1683898
  br i1 %.not2622, label %"end for blur_y.s0.x.x.rebased1461", label %"for blur_y.s0.x.x.rebased1460"

after_bb1472:                                     ; preds = %"end for blur_y.s0.x.x.rebased1461", %"produce blur_x1475"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1487.preheader", label %"end for blur_y.s0.x.x.rebased1488", !prof !386

"for blur_y.s0.x.x.rebased1487.preheader":        ; preds = %after_bb1472
  %20454 = sext i32 %t17541139 to i64
  %20455 = zext i32 %.pre-phi3586 to i64
  %20456 = mul nsw i64 %20455, %337
  %20457 = sub nsw i64 %20456, %298
  %20458 = zext i32 %.pre-phi3582 to i64
  %20459 = mul nsw i64 %20458, %337
  %20460 = sub nsw i64 %20459, %298
  %20461 = zext i32 %.pre-phi3592 to i64
  %20462 = mul nsw i64 %20461, %337
  %20463 = sub nsw i64 %20462, %298
  %20464 = zext i32 %.pre-phi3604 to i64
  %20465 = mul nsw i64 %20464, %337
  %20466 = sub nsw i64 %20465, %298
  %20467 = zext i32 %.pre-phi3598 to i64
  %20468 = mul nsw i64 %20467, %337
  %20469 = sub nsw i64 %20468, %298
  %20470 = sext i32 %a379 to i64
  %20471 = add nsw i64 %20470, 11
  %20472 = mul nsw i64 %20471, %334
  %20473 = add nsw i64 %20472, %338
  br label %"for blur_y.s0.x.x.rebased1487"

"produce blur_x1475":                             ; preds = %"end for blur_y.s0.x.x.rebased1461"
  %20474 = getelementptr inbounds i16, i16* %read_input822, i64 %401
  %20475 = getelementptr inbounds i16, i16* %20474, i64 -31
  %20476 = bitcast i16* %20475 to <16 x i16>*
  %20477 = load <16 x i16>, <16 x i16>* %20476, align 2, !tbaa !396
  %20478 = getelementptr inbounds i16, i16* %20474, i64 -15
  %20479 = bitcast i16* %20478 to <16 x i16>*
  %20480 = load <16 x i16>, <16 x i16>* %20479, align 2, !tbaa !396
  %20481 = shufflevector <16 x i16> %20477, <16 x i16> %20480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20482 = getelementptr inbounds i16, i16* %20474, i64 -32
  %20483 = bitcast i16* %20482 to <16 x i16>*
  %20484 = load <16 x i16>, <16 x i16>* %20483, align 2, !tbaa !396
  %20485 = getelementptr inbounds i16, i16* %20474, i64 -16
  %20486 = bitcast i16* %20485 to <16 x i16>*
  %20487 = load <16 x i16>, <16 x i16>* %20486, align 2, !tbaa !396
  %20488 = shufflevector <16 x i16> %20484, <16 x i16> %20487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20489 = getelementptr inbounds i16, i16* %20474, i64 -30
  %20490 = bitcast i16* %20489 to <16 x i16>*
  %20491 = load <16 x i16>, <16 x i16>* %20490, align 2, !tbaa !396
  %20492 = getelementptr inbounds i16, i16* %20474, i64 -14
  %20493 = bitcast i16* %20492 to <16 x i16>*
  %20494 = load <16 x i16>, <16 x i16>* %20493, align 2, !tbaa !396
  %20495 = shufflevector <16 x i16> %20491, <16 x i16> %20494, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20496 = getelementptr inbounds i16, i16* %20474, i64 -28
  %20497 = bitcast i16* %20496 to <16 x i16>*
  %20498 = load <16 x i16>, <16 x i16>* %20497, align 2, !tbaa !396
  %20499 = getelementptr inbounds i16, i16* %20474, i64 -12
  %20500 = bitcast i16* %20499 to <16 x i16>*
  %20501 = load <16 x i16>, <16 x i16>* %20500, align 2, !tbaa !396
  %20502 = shufflevector <16 x i16> %20498, <16 x i16> %20501, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20503 = getelementptr inbounds i16, i16* %20474, i64 -29
  %20504 = bitcast i16* %20503 to <16 x i16>*
  %20505 = load <16 x i16>, <16 x i16>* %20504, align 2, !tbaa !396
  %20506 = getelementptr inbounds i16, i16* %20474, i64 -13
  %20507 = bitcast i16* %20506 to <16 x i16>*
  %20508 = load <16 x i16>, <16 x i16>* %20507, align 2, !tbaa !396
  %20509 = shufflevector <16 x i16> %20505, <16 x i16> %20508, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20510 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20488, <32 x i16> %20495, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20511 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20509, <32 x i16> %20502, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20512 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20510, <32 x i16> %20511, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20513 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20512, <32 x i16> %20481, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20514 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20513, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20515 = shufflevector <32 x i16> %20514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20516 = zext i32 %.pre-phi3604 to i64
  %20517 = mul nsw i64 %299, %20516
  %20518 = add nsw i64 %301, %20517
  %20519 = getelementptr inbounds i16, i16* %blur_x879, i64 %20518
  %20520 = getelementptr inbounds i16, i16* %20519, i64 -32
  %20521 = bitcast i16* %20520 to <16 x i16>*
  store <16 x i16> %20515, <16 x i16>* %20521, align 2, !tbaa !399
  %20522 = shufflevector <32 x i16> %20514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20523 = getelementptr inbounds i16, i16* %20519, i64 -16
  %20524 = bitcast i16* %20523 to <16 x i16>*
  store <16 x i16> %20522, <16 x i16>* %20524, align 2, !tbaa !399
  %20525 = zext i32 %.pre-phi3586 to i64
  %20526 = mul nsw i64 %20525, %333
  %20527 = add nsw i64 %20526, %296
  %20528 = getelementptr inbounds i16, i16* %blur_x879, i64 %20527
  %20529 = getelementptr inbounds i16, i16* %20528, i64 -32
  %20530 = bitcast i16* %20529 to <16 x i16>*
  %20531 = load <16 x i16>, <16 x i16>* %20530, align 2, !tbaa !399
  %20532 = getelementptr inbounds i16, i16* %20528, i64 -16
  %20533 = bitcast i16* %20532 to <16 x i16>*
  %20534 = load <16 x i16>, <16 x i16>* %20533, align 2, !tbaa !399
  %20535 = shufflevector <16 x i16> %20531, <16 x i16> %20534, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20536 = zext i32 %.pre-phi3582 to i64
  %20537 = mul nsw i64 %20536, %333
  %20538 = add nsw i64 %20537, %296
  %20539 = getelementptr inbounds i16, i16* %blur_x879, i64 %20538
  %20540 = getelementptr inbounds i16, i16* %20539, i64 -32
  %20541 = bitcast i16* %20540 to <16 x i16>*
  %20542 = load <16 x i16>, <16 x i16>* %20541, align 2, !tbaa !399
  %20543 = getelementptr inbounds i16, i16* %20539, i64 -16
  %20544 = bitcast i16* %20543 to <16 x i16>*
  %20545 = load <16 x i16>, <16 x i16>* %20544, align 2, !tbaa !399
  %20546 = shufflevector <16 x i16> %20542, <16 x i16> %20545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20547 = zext i32 %.pre-phi3592 to i64
  %20548 = mul nsw i64 %20547, %333
  %20549 = add nsw i64 %20548, %296
  %20550 = getelementptr inbounds i16, i16* %blur_x879, i64 %20549
  %20551 = getelementptr inbounds i16, i16* %20550, i64 -32
  %20552 = bitcast i16* %20551 to <16 x i16>*
  %20553 = load <16 x i16>, <16 x i16>* %20552, align 2, !tbaa !399
  %20554 = getelementptr inbounds i16, i16* %20550, i64 -16
  %20555 = bitcast i16* %20554 to <16 x i16>*
  %20556 = load <16 x i16>, <16 x i16>* %20555, align 2, !tbaa !399
  %20557 = shufflevector <16 x i16> %20553, <16 x i16> %20556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20558 = mul nsw i64 %20516, %333
  %20559 = add nsw i64 %20558, %296
  %20560 = getelementptr inbounds i16, i16* %blur_x879, i64 %20559
  %20561 = getelementptr inbounds i16, i16* %20560, i64 -32
  %20562 = bitcast i16* %20561 to <16 x i16>*
  %20563 = load <16 x i16>, <16 x i16>* %20562, align 2, !tbaa !399
  %20564 = getelementptr inbounds i16, i16* %20560, i64 -16
  %20565 = bitcast i16* %20564 to <16 x i16>*
  %20566 = load <16 x i16>, <16 x i16>* %20565, align 2, !tbaa !399
  %20567 = shufflevector <16 x i16> %20563, <16 x i16> %20566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20568 = zext i32 %.pre-phi3598 to i64
  %20569 = mul nsw i64 %20568, %333
  %20570 = add nsw i64 %20569, %296
  %20571 = getelementptr inbounds i16, i16* %blur_x879, i64 %20570
  %20572 = getelementptr inbounds i16, i16* %20571, i64 -32
  %20573 = bitcast i16* %20572 to <16 x i16>*
  %20574 = load <16 x i16>, <16 x i16>* %20573, align 2, !tbaa !399
  %20575 = getelementptr inbounds i16, i16* %20571, i64 -16
  %20576 = bitcast i16* %20575 to <16 x i16>*
  %20577 = load <16 x i16>, <16 x i16>* %20576, align 2, !tbaa !399
  %20578 = shufflevector <16 x i16> %20574, <16 x i16> %20577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20579 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20546, <32 x i16> %20557, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20580 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20578, <32 x i16> %20567, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20581 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20579, <32 x i16> %20580, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20582 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20581, <32 x i16> %20535, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20583 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20582, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20584 = shufflevector <32 x i16> %20583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20585 = sext i32 %a379 to i64
  %20586 = add nsw i64 %20585, 11
  %20587 = mul nsw i64 %20586, %334
  %20588 = add nsw i64 %336, %20587
  %20589 = getelementptr inbounds i16, i16* %263, i64 %20588
  %20590 = getelementptr inbounds i16, i16* %20589, i64 -32
  %20591 = bitcast i16* %20590 to <16 x i16>*
  store <16 x i16> %20584, <16 x i16>* %20591, align 2, !tbaa !401
  %20592 = shufflevector <32 x i16> %20583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20593 = getelementptr inbounds i16, i16* %20589, i64 -16
  %20594 = bitcast i16* %20593 to <16 x i16>*
  store <16 x i16> %20592, <16 x i16>* %20594, align 2, !tbaa !401
  br label %after_bb1472

"for blur_y.s0.x.x.rebased1487":                  ; preds = %"for blur_y.s0.x.x.rebased1487.preheader", %"consume blur_x1495"
  %indvars.iv3410 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1487.preheader" ], [ %indvars.iv.next3411, %"consume blur_x1495" ]
  %20595 = add nsw i64 %indvars.iv3410, %303
  %20596 = icmp slt i64 %20595, 1
  %20597 = trunc i64 %20595 to i32
  %20598 = shl nsw i32 %20597, 5
  %20599 = icmp sgt i32 %198, %20598
  %20600 = or i1 %20596, %20599
  br i1 %20600, label %"produce blur_x1493", label %"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge"

"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1487"
  %.pre3621 = shl nsw i64 %20595, 5
  br label %"consume blur_x1495"

"end for blur_y.s0.x.x.rebased1488":              ; preds = %"consume blur_x1495", %after_bb1472
  br i1 %304, label %"for blur_y.s0.x.x.rebased1503.preheader", label %"end for blur_y.s0.x.x.rebased1504", !prof !386

"for blur_y.s0.x.x.rebased1503.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1488"
  %20601 = sext i32 %t17541139 to i64
  %20602 = zext i32 %.pre-phi3586 to i64
  %20603 = mul nsw i64 %20602, %337
  %20604 = sub nsw i64 %20603, %298
  %20605 = zext i32 %.pre-phi3582 to i64
  %20606 = mul nsw i64 %20605, %337
  %20607 = sub nsw i64 %20606, %298
  %20608 = zext i32 %.pre-phi3592 to i64
  %20609 = mul nsw i64 %20608, %337
  %20610 = sub nsw i64 %20609, %298
  %20611 = zext i32 %.pre-phi3604 to i64
  %20612 = mul nsw i64 %20611, %337
  %20613 = sub nsw i64 %20612, %298
  %20614 = zext i32 %.pre-phi3598 to i64
  %20615 = mul nsw i64 %20614, %337
  %20616 = sub nsw i64 %20615, %298
  %20617 = sext i32 %a379 to i64
  %20618 = add nsw i64 %20617, 11
  %20619 = mul nsw i64 %20618, %334
  %20620 = add nsw i64 %20619, %338
  br label %"for blur_y.s0.x.x.rebased1503"

"produce blur_x1493":                             ; preds = %"for blur_y.s0.x.x.rebased1487"
  %t8881494 = add nsw i32 %403, %20598
  %20621 = sext i32 %t8881494 to i64
  %20622 = getelementptr inbounds i16, i16* %read_input822, i64 %20621
  %20623 = getelementptr inbounds i16, i16* %20622, i64 1
  %20624 = bitcast i16* %20623 to <16 x i16>*
  %20625 = load <16 x i16>, <16 x i16>* %20624, align 2, !tbaa !396
  %20626 = getelementptr inbounds i16, i16* %20622, i64 17
  %20627 = bitcast i16* %20626 to <16 x i16>*
  %20628 = load <16 x i16>, <16 x i16>* %20627, align 2, !tbaa !396
  %20629 = shufflevector <16 x i16> %20625, <16 x i16> %20628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20630 = bitcast i16* %20622 to <16 x i16>*
  %20631 = load <16 x i16>, <16 x i16>* %20630, align 2, !tbaa !396
  %20632 = getelementptr inbounds i16, i16* %20622, i64 16
  %20633 = bitcast i16* %20632 to <16 x i16>*
  %20634 = load <16 x i16>, <16 x i16>* %20633, align 2, !tbaa !396
  %20635 = shufflevector <16 x i16> %20631, <16 x i16> %20634, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20636 = getelementptr inbounds i16, i16* %20622, i64 2
  %20637 = bitcast i16* %20636 to <16 x i16>*
  %20638 = load <16 x i16>, <16 x i16>* %20637, align 2, !tbaa !396
  %20639 = getelementptr inbounds i16, i16* %20622, i64 18
  %20640 = bitcast i16* %20639 to <16 x i16>*
  %20641 = load <16 x i16>, <16 x i16>* %20640, align 2, !tbaa !396
  %20642 = shufflevector <16 x i16> %20638, <16 x i16> %20641, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20643 = getelementptr inbounds i16, i16* %20622, i64 4
  %20644 = bitcast i16* %20643 to <16 x i16>*
  %20645 = load <16 x i16>, <16 x i16>* %20644, align 2, !tbaa !396
  %20646 = getelementptr inbounds i16, i16* %20622, i64 20
  %20647 = bitcast i16* %20646 to <16 x i16>*
  %20648 = load <16 x i16>, <16 x i16>* %20647, align 2, !tbaa !396
  %20649 = shufflevector <16 x i16> %20645, <16 x i16> %20648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20650 = getelementptr inbounds i16, i16* %20622, i64 3
  %20651 = bitcast i16* %20650 to <16 x i16>*
  %20652 = load <16 x i16>, <16 x i16>* %20651, align 2, !tbaa !396
  %20653 = getelementptr inbounds i16, i16* %20622, i64 19
  %20654 = bitcast i16* %20653 to <16 x i16>*
  %20655 = load <16 x i16>, <16 x i16>* %20654, align 2, !tbaa !396
  %20656 = shufflevector <16 x i16> %20652, <16 x i16> %20655, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20657 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20635, <32 x i16> %20642, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20658 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20656, <32 x i16> %20649, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20659 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20657, <32 x i16> %20658, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20660 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20659, <32 x i16> %20629, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20661 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20660, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20662 = shufflevector <32 x i16> %20661, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20663 = shl nsw i64 %20595, 5
  %20664 = add nsw i64 %20663, %20454
  %20665 = getelementptr inbounds i16, i16* %blur_x879, i64 %20664
  %20666 = bitcast i16* %20665 to <16 x i16>*
  store <16 x i16> %20662, <16 x i16>* %20666, align 2, !tbaa !399
  %20667 = shufflevector <32 x i16> %20661, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20668 = getelementptr inbounds i16, i16* %20665, i64 16
  %20669 = bitcast i16* %20668 to <16 x i16>*
  store <16 x i16> %20667, <16 x i16>* %20669, align 2, !tbaa !399
  br label %"consume blur_x1495"

"consume blur_x1495":                             ; preds = %"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge", %"produce blur_x1493"
  %.pre-phi3622 = phi i64 [ %.pre3621, %"for blur_y.s0.x.x.rebased1487.consume blur_x1495_crit_edge" ], [ %20663, %"produce blur_x1493" ]
  %20670 = add nsw i64 %20457, %.pre-phi3622
  %20671 = getelementptr inbounds i16, i16* %blur_x879, i64 %20670
  %20672 = bitcast i16* %20671 to <16 x i16>*
  %20673 = load <16 x i16>, <16 x i16>* %20672, align 2, !tbaa !399
  %20674 = getelementptr inbounds i16, i16* %20671, i64 16
  %20675 = bitcast i16* %20674 to <16 x i16>*
  %20676 = load <16 x i16>, <16 x i16>* %20675, align 2, !tbaa !399
  %20677 = shufflevector <16 x i16> %20673, <16 x i16> %20676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20678 = add nsw i64 %20460, %.pre-phi3622
  %20679 = getelementptr inbounds i16, i16* %blur_x879, i64 %20678
  %20680 = bitcast i16* %20679 to <16 x i16>*
  %20681 = load <16 x i16>, <16 x i16>* %20680, align 2, !tbaa !399
  %20682 = getelementptr inbounds i16, i16* %20679, i64 16
  %20683 = bitcast i16* %20682 to <16 x i16>*
  %20684 = load <16 x i16>, <16 x i16>* %20683, align 2, !tbaa !399
  %20685 = shufflevector <16 x i16> %20681, <16 x i16> %20684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20686 = add nsw i64 %20463, %.pre-phi3622
  %20687 = getelementptr inbounds i16, i16* %blur_x879, i64 %20686
  %20688 = bitcast i16* %20687 to <16 x i16>*
  %20689 = load <16 x i16>, <16 x i16>* %20688, align 2, !tbaa !399
  %20690 = getelementptr inbounds i16, i16* %20687, i64 16
  %20691 = bitcast i16* %20690 to <16 x i16>*
  %20692 = load <16 x i16>, <16 x i16>* %20691, align 2, !tbaa !399
  %20693 = shufflevector <16 x i16> %20689, <16 x i16> %20692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20694 = add nsw i64 %20466, %.pre-phi3622
  %20695 = getelementptr inbounds i16, i16* %blur_x879, i64 %20694
  %20696 = bitcast i16* %20695 to <16 x i16>*
  %20697 = load <16 x i16>, <16 x i16>* %20696, align 2, !tbaa !399
  %20698 = getelementptr inbounds i16, i16* %20695, i64 16
  %20699 = bitcast i16* %20698 to <16 x i16>*
  %20700 = load <16 x i16>, <16 x i16>* %20699, align 2, !tbaa !399
  %20701 = shufflevector <16 x i16> %20697, <16 x i16> %20700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20702 = add nsw i64 %20469, %.pre-phi3622
  %20703 = getelementptr inbounds i16, i16* %blur_x879, i64 %20702
  %20704 = bitcast i16* %20703 to <16 x i16>*
  %20705 = load <16 x i16>, <16 x i16>* %20704, align 2, !tbaa !399
  %20706 = getelementptr inbounds i16, i16* %20703, i64 16
  %20707 = bitcast i16* %20706 to <16 x i16>*
  %20708 = load <16 x i16>, <16 x i16>* %20707, align 2, !tbaa !399
  %20709 = shufflevector <16 x i16> %20705, <16 x i16> %20708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20710 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20685, <32 x i16> %20693, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20711 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20709, <32 x i16> %20701, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20712 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20710, <32 x i16> %20711, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20713 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20712, <32 x i16> %20677, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20714 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20713, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20715 = shufflevector <32 x i16> %20714, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20716 = add nsw i64 %20473, %.pre-phi3622
  %20717 = getelementptr inbounds i16, i16* %263, i64 %20716
  %20718 = bitcast i16* %20717 to <16 x i16>*
  store <16 x i16> %20715, <16 x i16>* %20718, align 2, !tbaa !401
  %20719 = shufflevector <32 x i16> %20714, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20720 = getelementptr inbounds i16, i16* %20717, i64 16
  %20721 = bitcast i16* %20720 to <16 x i16>*
  store <16 x i16> %20719, <16 x i16>* %20721, align 2, !tbaa !401
  %indvars.iv.next3411 = add nuw nsw i64 %indvars.iv3410, 1
  %20722 = icmp eq i64 %indvars.iv.next3411, %zext3412
  br i1 %20722, label %"end for blur_y.s0.x.x.rebased1488", label %"for blur_y.s0.x.x.rebased1487"

"for blur_y.s0.x.x.rebased1503":                  ; preds = %"for blur_y.s0.x.x.rebased1503.preheader", %"consume blur_x1514"
  %blur_y.s0.x.x.rebased1505 = phi i32 [ %20831, %"consume blur_x1514" ], [ 0, %"for blur_y.s0.x.x.rebased1503.preheader" ]
  %20723 = add nsw i32 %blur_y.s0.x.x.rebased1505, %t1626814
  %a3036 = shl nsw i32 %20723, 5
  %20724 = icmp sgt i32 %t1647, %a3036
  %blur_y.s0.x.v0.base.s1506 = select i1 %20724, i32 %a3036, i32 %t1647
  %20725 = icmp slt i32 %20723, 1
  %20726 = icmp sgt i32 %198, %a3036
  %20727 = or i1 %20725, %20726
  br i1 %20727, label %"produce blur_x1511", label %"consume blur_x1514"

"end for blur_y.s0.x.x.rebased1504":              ; preds = %"consume blur_x1514", %"end for blur_y.s0.x.x.rebased1488"
  br i1 %229, label %"produce blur_x1518", label %after_bb1515

"produce blur_x1511":                             ; preds = %"for blur_y.s0.x.x.rebased1503"
  %20728 = icmp slt i32 %blur_y.s0.x.v0.base.s1506, %198
  %blur_x.s0.x.v1.base.s1512 = select i1 %20728, i32 %blur_y.s0.x.v0.base.s1506, i32 %198
  %t8931513 = add nsw i32 %403, %blur_x.s0.x.v1.base.s1512
  %20729 = sext i32 %t8931513 to i64
  %20730 = getelementptr inbounds i16, i16* %read_input822, i64 %20729
  %20731 = getelementptr inbounds i16, i16* %20730, i64 1
  %20732 = bitcast i16* %20731 to <16 x i16>*
  %20733 = load <16 x i16>, <16 x i16>* %20732, align 2, !tbaa !396
  %20734 = getelementptr inbounds i16, i16* %20730, i64 17
  %20735 = bitcast i16* %20734 to <16 x i16>*
  %20736 = load <16 x i16>, <16 x i16>* %20735, align 2, !tbaa !396
  %20737 = shufflevector <16 x i16> %20733, <16 x i16> %20736, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20738 = bitcast i16* %20730 to <16 x i16>*
  %20739 = load <16 x i16>, <16 x i16>* %20738, align 2, !tbaa !396
  %20740 = getelementptr inbounds i16, i16* %20730, i64 16
  %20741 = bitcast i16* %20740 to <16 x i16>*
  %20742 = load <16 x i16>, <16 x i16>* %20741, align 2, !tbaa !396
  %20743 = shufflevector <16 x i16> %20739, <16 x i16> %20742, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20744 = getelementptr inbounds i16, i16* %20730, i64 2
  %20745 = bitcast i16* %20744 to <16 x i16>*
  %20746 = load <16 x i16>, <16 x i16>* %20745, align 2, !tbaa !396
  %20747 = getelementptr inbounds i16, i16* %20730, i64 18
  %20748 = bitcast i16* %20747 to <16 x i16>*
  %20749 = load <16 x i16>, <16 x i16>* %20748, align 2, !tbaa !396
  %20750 = shufflevector <16 x i16> %20746, <16 x i16> %20749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20751 = getelementptr inbounds i16, i16* %20730, i64 4
  %20752 = bitcast i16* %20751 to <16 x i16>*
  %20753 = load <16 x i16>, <16 x i16>* %20752, align 2, !tbaa !396
  %20754 = getelementptr inbounds i16, i16* %20730, i64 20
  %20755 = bitcast i16* %20754 to <16 x i16>*
  %20756 = load <16 x i16>, <16 x i16>* %20755, align 2, !tbaa !396
  %20757 = shufflevector <16 x i16> %20753, <16 x i16> %20756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20758 = getelementptr inbounds i16, i16* %20730, i64 3
  %20759 = bitcast i16* %20758 to <16 x i16>*
  %20760 = load <16 x i16>, <16 x i16>* %20759, align 2, !tbaa !396
  %20761 = getelementptr inbounds i16, i16* %20730, i64 19
  %20762 = bitcast i16* %20761 to <16 x i16>*
  %20763 = load <16 x i16>, <16 x i16>* %20762, align 2, !tbaa !396
  %20764 = shufflevector <16 x i16> %20760, <16 x i16> %20763, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20765 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20743, <32 x i16> %20750, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20766 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20764, <32 x i16> %20757, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20767 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20765, <32 x i16> %20766, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20768 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20767, <32 x i16> %20737, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20769 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20768, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20770 = shufflevector <32 x i16> %20769, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20771 = sext i32 %blur_x.s0.x.v1.base.s1512 to i64
  %20772 = add nsw i64 %20771, %20601
  %20773 = getelementptr inbounds i16, i16* %blur_x879, i64 %20772
  %20774 = bitcast i16* %20773 to <16 x i16>*
  store <16 x i16> %20770, <16 x i16>* %20774, align 2, !tbaa !399
  %20775 = shufflevector <32 x i16> %20769, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20776 = getelementptr inbounds i16, i16* %20773, i64 16
  %20777 = bitcast i16* %20776 to <16 x i16>*
  store <16 x i16> %20775, <16 x i16>* %20777, align 2, !tbaa !399
  br label %"consume blur_x1514"

"consume blur_x1514":                             ; preds = %"for blur_y.s0.x.x.rebased1503", %"produce blur_x1511"
  %20778 = sext i32 %blur_y.s0.x.v0.base.s1506 to i64
  %20779 = add nsw i64 %20604, %20778
  %20780 = getelementptr inbounds i16, i16* %blur_x879, i64 %20779
  %20781 = bitcast i16* %20780 to <16 x i16>*
  %20782 = load <16 x i16>, <16 x i16>* %20781, align 2, !tbaa !399
  %20783 = getelementptr inbounds i16, i16* %20780, i64 16
  %20784 = bitcast i16* %20783 to <16 x i16>*
  %20785 = load <16 x i16>, <16 x i16>* %20784, align 2, !tbaa !399
  %20786 = shufflevector <16 x i16> %20782, <16 x i16> %20785, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20787 = add nsw i64 %20607, %20778
  %20788 = getelementptr inbounds i16, i16* %blur_x879, i64 %20787
  %20789 = bitcast i16* %20788 to <16 x i16>*
  %20790 = load <16 x i16>, <16 x i16>* %20789, align 2, !tbaa !399
  %20791 = getelementptr inbounds i16, i16* %20788, i64 16
  %20792 = bitcast i16* %20791 to <16 x i16>*
  %20793 = load <16 x i16>, <16 x i16>* %20792, align 2, !tbaa !399
  %20794 = shufflevector <16 x i16> %20790, <16 x i16> %20793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20795 = add nsw i64 %20610, %20778
  %20796 = getelementptr inbounds i16, i16* %blur_x879, i64 %20795
  %20797 = bitcast i16* %20796 to <16 x i16>*
  %20798 = load <16 x i16>, <16 x i16>* %20797, align 2, !tbaa !399
  %20799 = getelementptr inbounds i16, i16* %20796, i64 16
  %20800 = bitcast i16* %20799 to <16 x i16>*
  %20801 = load <16 x i16>, <16 x i16>* %20800, align 2, !tbaa !399
  %20802 = shufflevector <16 x i16> %20798, <16 x i16> %20801, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20803 = add nsw i64 %20613, %20778
  %20804 = getelementptr inbounds i16, i16* %blur_x879, i64 %20803
  %20805 = bitcast i16* %20804 to <16 x i16>*
  %20806 = load <16 x i16>, <16 x i16>* %20805, align 2, !tbaa !399
  %20807 = getelementptr inbounds i16, i16* %20804, i64 16
  %20808 = bitcast i16* %20807 to <16 x i16>*
  %20809 = load <16 x i16>, <16 x i16>* %20808, align 2, !tbaa !399
  %20810 = shufflevector <16 x i16> %20806, <16 x i16> %20809, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20811 = add nsw i64 %20616, %20778
  %20812 = getelementptr inbounds i16, i16* %blur_x879, i64 %20811
  %20813 = bitcast i16* %20812 to <16 x i16>*
  %20814 = load <16 x i16>, <16 x i16>* %20813, align 2, !tbaa !399
  %20815 = getelementptr inbounds i16, i16* %20812, i64 16
  %20816 = bitcast i16* %20815 to <16 x i16>*
  %20817 = load <16 x i16>, <16 x i16>* %20816, align 2, !tbaa !399
  %20818 = shufflevector <16 x i16> %20814, <16 x i16> %20817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20819 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20794, <32 x i16> %20802, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20820 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20818, <32 x i16> %20810, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20821 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20819, <32 x i16> %20820, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20822 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20821, <32 x i16> %20786, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20823 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20822, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20824 = shufflevector <32 x i16> %20823, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20825 = add nsw i64 %20620, %20778
  %20826 = getelementptr inbounds i16, i16* %263, i64 %20825
  %20827 = bitcast i16* %20826 to <16 x i16>*
  store <16 x i16> %20824, <16 x i16>* %20827, align 2, !tbaa !401
  %20828 = shufflevector <32 x i16> %20823, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20829 = getelementptr inbounds i16, i16* %20826, i64 16
  %20830 = bitcast i16* %20829 to <16 x i16>*
  store <16 x i16> %20828, <16 x i16>* %20830, align 2, !tbaa !401
  %20831 = add nuw nsw i32 %blur_y.s0.x.x.rebased1505, 1
  %.not2618 = icmp eq i32 %20831, %t1683898
  br i1 %.not2618, label %"end for blur_y.s0.x.x.rebased1504", label %"for blur_y.s0.x.x.rebased1503"

after_bb1515:                                     ; preds = %"end for blur_y.s0.x.x.rebased1504", %"produce blur_x1518"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1530.preheader", label %"end for blur_y.s0.x.x.rebased1531", !prof !386

"for blur_y.s0.x.x.rebased1530.preheader":        ; preds = %after_bb1515
  %20832 = sext i32 %t1682886 to i64
  %20833 = zext i32 %.pre-phi3592 to i64
  %20834 = mul nsw i64 %20833, %337
  %20835 = sub nsw i64 %20834, %298
  %20836 = zext i32 %.pre-phi3586 to i64
  %20837 = mul nsw i64 %20836, %337
  %20838 = sub nsw i64 %20837, %298
  %20839 = zext i32 %.pre-phi3598 to i64
  %20840 = mul nsw i64 %20839, %337
  %20841 = sub nsw i64 %20840, %298
  %20842 = zext i32 %.pre-phi3570 to i64
  %20843 = mul nsw i64 %20842, %337
  %20844 = sub nsw i64 %20843, %298
  %20845 = zext i32 %.pre-phi3604 to i64
  %20846 = mul nsw i64 %20845, %337
  %20847 = sub nsw i64 %20846, %298
  %20848 = sext i32 %a379 to i64
  %20849 = add nsw i64 %20848, 12
  %20850 = mul nsw i64 %20849, %334
  %20851 = add nsw i64 %20850, %338
  br label %"for blur_y.s0.x.x.rebased1530"

"produce blur_x1518":                             ; preds = %"end for blur_y.s0.x.x.rebased1504"
  %20852 = getelementptr inbounds i16, i16* %read_input822, i64 %407
  %20853 = getelementptr inbounds i16, i16* %20852, i64 -31
  %20854 = bitcast i16* %20853 to <16 x i16>*
  %20855 = load <16 x i16>, <16 x i16>* %20854, align 2, !tbaa !396
  %20856 = getelementptr inbounds i16, i16* %20852, i64 -15
  %20857 = bitcast i16* %20856 to <16 x i16>*
  %20858 = load <16 x i16>, <16 x i16>* %20857, align 2, !tbaa !396
  %20859 = shufflevector <16 x i16> %20855, <16 x i16> %20858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20860 = getelementptr inbounds i16, i16* %20852, i64 -32
  %20861 = bitcast i16* %20860 to <16 x i16>*
  %20862 = load <16 x i16>, <16 x i16>* %20861, align 2, !tbaa !396
  %20863 = getelementptr inbounds i16, i16* %20852, i64 -16
  %20864 = bitcast i16* %20863 to <16 x i16>*
  %20865 = load <16 x i16>, <16 x i16>* %20864, align 2, !tbaa !396
  %20866 = shufflevector <16 x i16> %20862, <16 x i16> %20865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20867 = getelementptr inbounds i16, i16* %20852, i64 -30
  %20868 = bitcast i16* %20867 to <16 x i16>*
  %20869 = load <16 x i16>, <16 x i16>* %20868, align 2, !tbaa !396
  %20870 = getelementptr inbounds i16, i16* %20852, i64 -14
  %20871 = bitcast i16* %20870 to <16 x i16>*
  %20872 = load <16 x i16>, <16 x i16>* %20871, align 2, !tbaa !396
  %20873 = shufflevector <16 x i16> %20869, <16 x i16> %20872, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20874 = getelementptr inbounds i16, i16* %20852, i64 -28
  %20875 = bitcast i16* %20874 to <16 x i16>*
  %20876 = load <16 x i16>, <16 x i16>* %20875, align 2, !tbaa !396
  %20877 = getelementptr inbounds i16, i16* %20852, i64 -12
  %20878 = bitcast i16* %20877 to <16 x i16>*
  %20879 = load <16 x i16>, <16 x i16>* %20878, align 2, !tbaa !396
  %20880 = shufflevector <16 x i16> %20876, <16 x i16> %20879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20881 = getelementptr inbounds i16, i16* %20852, i64 -29
  %20882 = bitcast i16* %20881 to <16 x i16>*
  %20883 = load <16 x i16>, <16 x i16>* %20882, align 2, !tbaa !396
  %20884 = getelementptr inbounds i16, i16* %20852, i64 -13
  %20885 = bitcast i16* %20884 to <16 x i16>*
  %20886 = load <16 x i16>, <16 x i16>* %20885, align 2, !tbaa !396
  %20887 = shufflevector <16 x i16> %20883, <16 x i16> %20886, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20888 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20866, <32 x i16> %20873, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20889 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20887, <32 x i16> %20880, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20890 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20888, <32 x i16> %20889, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20891 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20890, <32 x i16> %20859, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20892 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20891, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20893 = shufflevector <32 x i16> %20892, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20894 = zext i32 %.pre-phi3570 to i64
  %20895 = mul nsw i64 %299, %20894
  %20896 = add nsw i64 %301, %20895
  %20897 = getelementptr inbounds i16, i16* %blur_x879, i64 %20896
  %20898 = getelementptr inbounds i16, i16* %20897, i64 -32
  %20899 = bitcast i16* %20898 to <16 x i16>*
  store <16 x i16> %20893, <16 x i16>* %20899, align 2, !tbaa !399
  %20900 = shufflevector <32 x i16> %20892, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20901 = getelementptr inbounds i16, i16* %20897, i64 -16
  %20902 = bitcast i16* %20901 to <16 x i16>*
  store <16 x i16> %20900, <16 x i16>* %20902, align 2, !tbaa !399
  %20903 = zext i32 %.pre-phi3592 to i64
  %20904 = mul nsw i64 %20903, %333
  %20905 = add nsw i64 %20904, %296
  %20906 = getelementptr inbounds i16, i16* %blur_x879, i64 %20905
  %20907 = getelementptr inbounds i16, i16* %20906, i64 -32
  %20908 = bitcast i16* %20907 to <16 x i16>*
  %20909 = load <16 x i16>, <16 x i16>* %20908, align 2, !tbaa !399
  %20910 = getelementptr inbounds i16, i16* %20906, i64 -16
  %20911 = bitcast i16* %20910 to <16 x i16>*
  %20912 = load <16 x i16>, <16 x i16>* %20911, align 2, !tbaa !399
  %20913 = shufflevector <16 x i16> %20909, <16 x i16> %20912, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20914 = zext i32 %.pre-phi3586 to i64
  %20915 = mul nsw i64 %20914, %333
  %20916 = add nsw i64 %20915, %296
  %20917 = getelementptr inbounds i16, i16* %blur_x879, i64 %20916
  %20918 = getelementptr inbounds i16, i16* %20917, i64 -32
  %20919 = bitcast i16* %20918 to <16 x i16>*
  %20920 = load <16 x i16>, <16 x i16>* %20919, align 2, !tbaa !399
  %20921 = getelementptr inbounds i16, i16* %20917, i64 -16
  %20922 = bitcast i16* %20921 to <16 x i16>*
  %20923 = load <16 x i16>, <16 x i16>* %20922, align 2, !tbaa !399
  %20924 = shufflevector <16 x i16> %20920, <16 x i16> %20923, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20925 = zext i32 %.pre-phi3598 to i64
  %20926 = mul nsw i64 %20925, %333
  %20927 = add nsw i64 %20926, %296
  %20928 = getelementptr inbounds i16, i16* %blur_x879, i64 %20927
  %20929 = getelementptr inbounds i16, i16* %20928, i64 -32
  %20930 = bitcast i16* %20929 to <16 x i16>*
  %20931 = load <16 x i16>, <16 x i16>* %20930, align 2, !tbaa !399
  %20932 = getelementptr inbounds i16, i16* %20928, i64 -16
  %20933 = bitcast i16* %20932 to <16 x i16>*
  %20934 = load <16 x i16>, <16 x i16>* %20933, align 2, !tbaa !399
  %20935 = shufflevector <16 x i16> %20931, <16 x i16> %20934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20936 = mul nsw i64 %20894, %333
  %20937 = add nsw i64 %20936, %296
  %20938 = getelementptr inbounds i16, i16* %blur_x879, i64 %20937
  %20939 = getelementptr inbounds i16, i16* %20938, i64 -32
  %20940 = bitcast i16* %20939 to <16 x i16>*
  %20941 = load <16 x i16>, <16 x i16>* %20940, align 2, !tbaa !399
  %20942 = getelementptr inbounds i16, i16* %20938, i64 -16
  %20943 = bitcast i16* %20942 to <16 x i16>*
  %20944 = load <16 x i16>, <16 x i16>* %20943, align 2, !tbaa !399
  %20945 = shufflevector <16 x i16> %20941, <16 x i16> %20944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20946 = zext i32 %.pre-phi3604 to i64
  %20947 = mul nsw i64 %20946, %333
  %20948 = add nsw i64 %20947, %296
  %20949 = getelementptr inbounds i16, i16* %blur_x879, i64 %20948
  %20950 = getelementptr inbounds i16, i16* %20949, i64 -32
  %20951 = bitcast i16* %20950 to <16 x i16>*
  %20952 = load <16 x i16>, <16 x i16>* %20951, align 2, !tbaa !399
  %20953 = getelementptr inbounds i16, i16* %20949, i64 -16
  %20954 = bitcast i16* %20953 to <16 x i16>*
  %20955 = load <16 x i16>, <16 x i16>* %20954, align 2, !tbaa !399
  %20956 = shufflevector <16 x i16> %20952, <16 x i16> %20955, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20957 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20924, <32 x i16> %20935, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20958 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20956, <32 x i16> %20945, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20959 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20957, <32 x i16> %20958, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20960 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %20959, <32 x i16> %20913, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %20961 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %20960, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %20962 = shufflevector <32 x i16> %20961, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20963 = sext i32 %a379 to i64
  %20964 = add nsw i64 %20963, 12
  %20965 = mul nsw i64 %20964, %334
  %20966 = add nsw i64 %336, %20965
  %20967 = getelementptr inbounds i16, i16* %263, i64 %20966
  %20968 = getelementptr inbounds i16, i16* %20967, i64 -32
  %20969 = bitcast i16* %20968 to <16 x i16>*
  store <16 x i16> %20962, <16 x i16>* %20969, align 2, !tbaa !401
  %20970 = shufflevector <32 x i16> %20961, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20971 = getelementptr inbounds i16, i16* %20967, i64 -16
  %20972 = bitcast i16* %20971 to <16 x i16>*
  store <16 x i16> %20970, <16 x i16>* %20972, align 2, !tbaa !401
  br label %after_bb1515

"for blur_y.s0.x.x.rebased1530":                  ; preds = %"for blur_y.s0.x.x.rebased1530.preheader", %"consume blur_x1538"
  %indvars.iv3413 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1530.preheader" ], [ %indvars.iv.next3414, %"consume blur_x1538" ]
  %20973 = add nsw i64 %indvars.iv3413, %303
  %20974 = icmp slt i64 %20973, 1
  %20975 = trunc i64 %20973 to i32
  %20976 = shl nsw i32 %20975, 5
  %20977 = icmp sgt i32 %198, %20976
  %20978 = or i1 %20974, %20977
  br i1 %20978, label %"produce blur_x1536", label %"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge"

"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1530"
  %.pre3623 = shl nsw i64 %20973, 5
  br label %"consume blur_x1538"

"end for blur_y.s0.x.x.rebased1531":              ; preds = %"consume blur_x1538", %after_bb1515
  br i1 %304, label %"for blur_y.s0.x.x.rebased1546.preheader", label %"end for blur_y.s0.x.x.rebased1547", !prof !386

"for blur_y.s0.x.x.rebased1546.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1531"
  %20979 = sext i32 %t1682886 to i64
  %20980 = zext i32 %.pre-phi3592 to i64
  %20981 = mul nsw i64 %20980, %337
  %20982 = sub nsw i64 %20981, %298
  %20983 = zext i32 %.pre-phi3586 to i64
  %20984 = mul nsw i64 %20983, %337
  %20985 = sub nsw i64 %20984, %298
  %20986 = zext i32 %.pre-phi3598 to i64
  %20987 = mul nsw i64 %20986, %337
  %20988 = sub nsw i64 %20987, %298
  %20989 = zext i32 %.pre-phi3570 to i64
  %20990 = mul nsw i64 %20989, %337
  %20991 = sub nsw i64 %20990, %298
  %20992 = zext i32 %.pre-phi3604 to i64
  %20993 = mul nsw i64 %20992, %337
  %20994 = sub nsw i64 %20993, %298
  %20995 = sext i32 %a379 to i64
  %20996 = add nsw i64 %20995, 12
  %20997 = mul nsw i64 %20996, %334
  %20998 = add nsw i64 %20997, %338
  br label %"for blur_y.s0.x.x.rebased1546"

"produce blur_x1536":                             ; preds = %"for blur_y.s0.x.x.rebased1530"
  %t9041537 = add nsw i32 %409, %20976
  %20999 = sext i32 %t9041537 to i64
  %21000 = getelementptr inbounds i16, i16* %read_input822, i64 %20999
  %21001 = getelementptr inbounds i16, i16* %21000, i64 1
  %21002 = bitcast i16* %21001 to <16 x i16>*
  %21003 = load <16 x i16>, <16 x i16>* %21002, align 2, !tbaa !396
  %21004 = getelementptr inbounds i16, i16* %21000, i64 17
  %21005 = bitcast i16* %21004 to <16 x i16>*
  %21006 = load <16 x i16>, <16 x i16>* %21005, align 2, !tbaa !396
  %21007 = shufflevector <16 x i16> %21003, <16 x i16> %21006, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21008 = bitcast i16* %21000 to <16 x i16>*
  %21009 = load <16 x i16>, <16 x i16>* %21008, align 2, !tbaa !396
  %21010 = getelementptr inbounds i16, i16* %21000, i64 16
  %21011 = bitcast i16* %21010 to <16 x i16>*
  %21012 = load <16 x i16>, <16 x i16>* %21011, align 2, !tbaa !396
  %21013 = shufflevector <16 x i16> %21009, <16 x i16> %21012, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21014 = getelementptr inbounds i16, i16* %21000, i64 2
  %21015 = bitcast i16* %21014 to <16 x i16>*
  %21016 = load <16 x i16>, <16 x i16>* %21015, align 2, !tbaa !396
  %21017 = getelementptr inbounds i16, i16* %21000, i64 18
  %21018 = bitcast i16* %21017 to <16 x i16>*
  %21019 = load <16 x i16>, <16 x i16>* %21018, align 2, !tbaa !396
  %21020 = shufflevector <16 x i16> %21016, <16 x i16> %21019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21021 = getelementptr inbounds i16, i16* %21000, i64 4
  %21022 = bitcast i16* %21021 to <16 x i16>*
  %21023 = load <16 x i16>, <16 x i16>* %21022, align 2, !tbaa !396
  %21024 = getelementptr inbounds i16, i16* %21000, i64 20
  %21025 = bitcast i16* %21024 to <16 x i16>*
  %21026 = load <16 x i16>, <16 x i16>* %21025, align 2, !tbaa !396
  %21027 = shufflevector <16 x i16> %21023, <16 x i16> %21026, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21028 = getelementptr inbounds i16, i16* %21000, i64 3
  %21029 = bitcast i16* %21028 to <16 x i16>*
  %21030 = load <16 x i16>, <16 x i16>* %21029, align 2, !tbaa !396
  %21031 = getelementptr inbounds i16, i16* %21000, i64 19
  %21032 = bitcast i16* %21031 to <16 x i16>*
  %21033 = load <16 x i16>, <16 x i16>* %21032, align 2, !tbaa !396
  %21034 = shufflevector <16 x i16> %21030, <16 x i16> %21033, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21035 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21013, <32 x i16> %21020, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21036 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21034, <32 x i16> %21027, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21037 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21035, <32 x i16> %21036, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21038 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21037, <32 x i16> %21007, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21039 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21038, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21040 = shufflevector <32 x i16> %21039, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21041 = shl nsw i64 %20973, 5
  %21042 = add nsw i64 %21041, %20832
  %21043 = getelementptr inbounds i16, i16* %blur_x879, i64 %21042
  %21044 = bitcast i16* %21043 to <16 x i16>*
  store <16 x i16> %21040, <16 x i16>* %21044, align 2, !tbaa !399
  %21045 = shufflevector <32 x i16> %21039, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21046 = getelementptr inbounds i16, i16* %21043, i64 16
  %21047 = bitcast i16* %21046 to <16 x i16>*
  store <16 x i16> %21045, <16 x i16>* %21047, align 2, !tbaa !399
  br label %"consume blur_x1538"

"consume blur_x1538":                             ; preds = %"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge", %"produce blur_x1536"
  %.pre-phi3624 = phi i64 [ %.pre3623, %"for blur_y.s0.x.x.rebased1530.consume blur_x1538_crit_edge" ], [ %21041, %"produce blur_x1536" ]
  %21048 = add nsw i64 %20835, %.pre-phi3624
  %21049 = getelementptr inbounds i16, i16* %blur_x879, i64 %21048
  %21050 = bitcast i16* %21049 to <16 x i16>*
  %21051 = load <16 x i16>, <16 x i16>* %21050, align 2, !tbaa !399
  %21052 = getelementptr inbounds i16, i16* %21049, i64 16
  %21053 = bitcast i16* %21052 to <16 x i16>*
  %21054 = load <16 x i16>, <16 x i16>* %21053, align 2, !tbaa !399
  %21055 = shufflevector <16 x i16> %21051, <16 x i16> %21054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21056 = add nsw i64 %20838, %.pre-phi3624
  %21057 = getelementptr inbounds i16, i16* %blur_x879, i64 %21056
  %21058 = bitcast i16* %21057 to <16 x i16>*
  %21059 = load <16 x i16>, <16 x i16>* %21058, align 2, !tbaa !399
  %21060 = getelementptr inbounds i16, i16* %21057, i64 16
  %21061 = bitcast i16* %21060 to <16 x i16>*
  %21062 = load <16 x i16>, <16 x i16>* %21061, align 2, !tbaa !399
  %21063 = shufflevector <16 x i16> %21059, <16 x i16> %21062, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21064 = add nsw i64 %20841, %.pre-phi3624
  %21065 = getelementptr inbounds i16, i16* %blur_x879, i64 %21064
  %21066 = bitcast i16* %21065 to <16 x i16>*
  %21067 = load <16 x i16>, <16 x i16>* %21066, align 2, !tbaa !399
  %21068 = getelementptr inbounds i16, i16* %21065, i64 16
  %21069 = bitcast i16* %21068 to <16 x i16>*
  %21070 = load <16 x i16>, <16 x i16>* %21069, align 2, !tbaa !399
  %21071 = shufflevector <16 x i16> %21067, <16 x i16> %21070, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21072 = add nsw i64 %20844, %.pre-phi3624
  %21073 = getelementptr inbounds i16, i16* %blur_x879, i64 %21072
  %21074 = bitcast i16* %21073 to <16 x i16>*
  %21075 = load <16 x i16>, <16 x i16>* %21074, align 2, !tbaa !399
  %21076 = getelementptr inbounds i16, i16* %21073, i64 16
  %21077 = bitcast i16* %21076 to <16 x i16>*
  %21078 = load <16 x i16>, <16 x i16>* %21077, align 2, !tbaa !399
  %21079 = shufflevector <16 x i16> %21075, <16 x i16> %21078, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21080 = add nsw i64 %20847, %.pre-phi3624
  %21081 = getelementptr inbounds i16, i16* %blur_x879, i64 %21080
  %21082 = bitcast i16* %21081 to <16 x i16>*
  %21083 = load <16 x i16>, <16 x i16>* %21082, align 2, !tbaa !399
  %21084 = getelementptr inbounds i16, i16* %21081, i64 16
  %21085 = bitcast i16* %21084 to <16 x i16>*
  %21086 = load <16 x i16>, <16 x i16>* %21085, align 2, !tbaa !399
  %21087 = shufflevector <16 x i16> %21083, <16 x i16> %21086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21088 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21063, <32 x i16> %21071, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21089 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21087, <32 x i16> %21079, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21090 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21088, <32 x i16> %21089, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21091 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21090, <32 x i16> %21055, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21092 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21091, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21093 = shufflevector <32 x i16> %21092, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21094 = add nsw i64 %20851, %.pre-phi3624
  %21095 = getelementptr inbounds i16, i16* %263, i64 %21094
  %21096 = bitcast i16* %21095 to <16 x i16>*
  store <16 x i16> %21093, <16 x i16>* %21096, align 2, !tbaa !401
  %21097 = shufflevector <32 x i16> %21092, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21098 = getelementptr inbounds i16, i16* %21095, i64 16
  %21099 = bitcast i16* %21098 to <16 x i16>*
  store <16 x i16> %21097, <16 x i16>* %21099, align 2, !tbaa !401
  %indvars.iv.next3414 = add nuw nsw i64 %indvars.iv3413, 1
  %21100 = icmp eq i64 %indvars.iv.next3414, %zext3415
  br i1 %21100, label %"end for blur_y.s0.x.x.rebased1531", label %"for blur_y.s0.x.x.rebased1530"

"for blur_y.s0.x.x.rebased1546":                  ; preds = %"for blur_y.s0.x.x.rebased1546.preheader", %"consume blur_x1557"
  %blur_y.s0.x.x.rebased1548 = phi i32 [ %21209, %"consume blur_x1557" ], [ 0, %"for blur_y.s0.x.x.rebased1546.preheader" ]
  %21101 = add nsw i32 %blur_y.s0.x.x.rebased1548, %t1626814
  %a3193 = shl nsw i32 %21101, 5
  %21102 = icmp sgt i32 %t1647, %a3193
  %blur_y.s0.x.v0.base.s1549 = select i1 %21102, i32 %a3193, i32 %t1647
  %21103 = icmp slt i32 %21101, 1
  %21104 = icmp sgt i32 %198, %a3193
  %21105 = or i1 %21103, %21104
  br i1 %21105, label %"produce blur_x1554", label %"consume blur_x1557"

"end for blur_y.s0.x.x.rebased1547":              ; preds = %"consume blur_x1557", %"end for blur_y.s0.x.x.rebased1531"
  br i1 %229, label %"produce blur_x1561", label %after_bb1558

"produce blur_x1554":                             ; preds = %"for blur_y.s0.x.x.rebased1546"
  %21106 = icmp slt i32 %blur_y.s0.x.v0.base.s1549, %198
  %blur_x.s0.x.v1.base.s1555 = select i1 %21106, i32 %blur_y.s0.x.v0.base.s1549, i32 %198
  %t9091556 = add nsw i32 %409, %blur_x.s0.x.v1.base.s1555
  %21107 = sext i32 %t9091556 to i64
  %21108 = getelementptr inbounds i16, i16* %read_input822, i64 %21107
  %21109 = getelementptr inbounds i16, i16* %21108, i64 1
  %21110 = bitcast i16* %21109 to <16 x i16>*
  %21111 = load <16 x i16>, <16 x i16>* %21110, align 2, !tbaa !396
  %21112 = getelementptr inbounds i16, i16* %21108, i64 17
  %21113 = bitcast i16* %21112 to <16 x i16>*
  %21114 = load <16 x i16>, <16 x i16>* %21113, align 2, !tbaa !396
  %21115 = shufflevector <16 x i16> %21111, <16 x i16> %21114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21116 = bitcast i16* %21108 to <16 x i16>*
  %21117 = load <16 x i16>, <16 x i16>* %21116, align 2, !tbaa !396
  %21118 = getelementptr inbounds i16, i16* %21108, i64 16
  %21119 = bitcast i16* %21118 to <16 x i16>*
  %21120 = load <16 x i16>, <16 x i16>* %21119, align 2, !tbaa !396
  %21121 = shufflevector <16 x i16> %21117, <16 x i16> %21120, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21122 = getelementptr inbounds i16, i16* %21108, i64 2
  %21123 = bitcast i16* %21122 to <16 x i16>*
  %21124 = load <16 x i16>, <16 x i16>* %21123, align 2, !tbaa !396
  %21125 = getelementptr inbounds i16, i16* %21108, i64 18
  %21126 = bitcast i16* %21125 to <16 x i16>*
  %21127 = load <16 x i16>, <16 x i16>* %21126, align 2, !tbaa !396
  %21128 = shufflevector <16 x i16> %21124, <16 x i16> %21127, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21129 = getelementptr inbounds i16, i16* %21108, i64 4
  %21130 = bitcast i16* %21129 to <16 x i16>*
  %21131 = load <16 x i16>, <16 x i16>* %21130, align 2, !tbaa !396
  %21132 = getelementptr inbounds i16, i16* %21108, i64 20
  %21133 = bitcast i16* %21132 to <16 x i16>*
  %21134 = load <16 x i16>, <16 x i16>* %21133, align 2, !tbaa !396
  %21135 = shufflevector <16 x i16> %21131, <16 x i16> %21134, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21136 = getelementptr inbounds i16, i16* %21108, i64 3
  %21137 = bitcast i16* %21136 to <16 x i16>*
  %21138 = load <16 x i16>, <16 x i16>* %21137, align 2, !tbaa !396
  %21139 = getelementptr inbounds i16, i16* %21108, i64 19
  %21140 = bitcast i16* %21139 to <16 x i16>*
  %21141 = load <16 x i16>, <16 x i16>* %21140, align 2, !tbaa !396
  %21142 = shufflevector <16 x i16> %21138, <16 x i16> %21141, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21143 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21121, <32 x i16> %21128, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21144 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21142, <32 x i16> %21135, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21145 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21143, <32 x i16> %21144, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21146 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21145, <32 x i16> %21115, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21147 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21146, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21148 = shufflevector <32 x i16> %21147, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21149 = sext i32 %blur_x.s0.x.v1.base.s1555 to i64
  %21150 = add nsw i64 %21149, %20979
  %21151 = getelementptr inbounds i16, i16* %blur_x879, i64 %21150
  %21152 = bitcast i16* %21151 to <16 x i16>*
  store <16 x i16> %21148, <16 x i16>* %21152, align 2, !tbaa !399
  %21153 = shufflevector <32 x i16> %21147, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21154 = getelementptr inbounds i16, i16* %21151, i64 16
  %21155 = bitcast i16* %21154 to <16 x i16>*
  store <16 x i16> %21153, <16 x i16>* %21155, align 2, !tbaa !399
  br label %"consume blur_x1557"

"consume blur_x1557":                             ; preds = %"for blur_y.s0.x.x.rebased1546", %"produce blur_x1554"
  %21156 = sext i32 %blur_y.s0.x.v0.base.s1549 to i64
  %21157 = add nsw i64 %20982, %21156
  %21158 = getelementptr inbounds i16, i16* %blur_x879, i64 %21157
  %21159 = bitcast i16* %21158 to <16 x i16>*
  %21160 = load <16 x i16>, <16 x i16>* %21159, align 2, !tbaa !399
  %21161 = getelementptr inbounds i16, i16* %21158, i64 16
  %21162 = bitcast i16* %21161 to <16 x i16>*
  %21163 = load <16 x i16>, <16 x i16>* %21162, align 2, !tbaa !399
  %21164 = shufflevector <16 x i16> %21160, <16 x i16> %21163, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21165 = add nsw i64 %20985, %21156
  %21166 = getelementptr inbounds i16, i16* %blur_x879, i64 %21165
  %21167 = bitcast i16* %21166 to <16 x i16>*
  %21168 = load <16 x i16>, <16 x i16>* %21167, align 2, !tbaa !399
  %21169 = getelementptr inbounds i16, i16* %21166, i64 16
  %21170 = bitcast i16* %21169 to <16 x i16>*
  %21171 = load <16 x i16>, <16 x i16>* %21170, align 2, !tbaa !399
  %21172 = shufflevector <16 x i16> %21168, <16 x i16> %21171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21173 = add nsw i64 %20988, %21156
  %21174 = getelementptr inbounds i16, i16* %blur_x879, i64 %21173
  %21175 = bitcast i16* %21174 to <16 x i16>*
  %21176 = load <16 x i16>, <16 x i16>* %21175, align 2, !tbaa !399
  %21177 = getelementptr inbounds i16, i16* %21174, i64 16
  %21178 = bitcast i16* %21177 to <16 x i16>*
  %21179 = load <16 x i16>, <16 x i16>* %21178, align 2, !tbaa !399
  %21180 = shufflevector <16 x i16> %21176, <16 x i16> %21179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21181 = add nsw i64 %20991, %21156
  %21182 = getelementptr inbounds i16, i16* %blur_x879, i64 %21181
  %21183 = bitcast i16* %21182 to <16 x i16>*
  %21184 = load <16 x i16>, <16 x i16>* %21183, align 2, !tbaa !399
  %21185 = getelementptr inbounds i16, i16* %21182, i64 16
  %21186 = bitcast i16* %21185 to <16 x i16>*
  %21187 = load <16 x i16>, <16 x i16>* %21186, align 2, !tbaa !399
  %21188 = shufflevector <16 x i16> %21184, <16 x i16> %21187, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21189 = add nsw i64 %20994, %21156
  %21190 = getelementptr inbounds i16, i16* %blur_x879, i64 %21189
  %21191 = bitcast i16* %21190 to <16 x i16>*
  %21192 = load <16 x i16>, <16 x i16>* %21191, align 2, !tbaa !399
  %21193 = getelementptr inbounds i16, i16* %21190, i64 16
  %21194 = bitcast i16* %21193 to <16 x i16>*
  %21195 = load <16 x i16>, <16 x i16>* %21194, align 2, !tbaa !399
  %21196 = shufflevector <16 x i16> %21192, <16 x i16> %21195, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21197 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21172, <32 x i16> %21180, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21198 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21196, <32 x i16> %21188, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21199 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21197, <32 x i16> %21198, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21200 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21199, <32 x i16> %21164, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21201 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21200, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21202 = shufflevector <32 x i16> %21201, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21203 = add nsw i64 %20998, %21156
  %21204 = getelementptr inbounds i16, i16* %263, i64 %21203
  %21205 = bitcast i16* %21204 to <16 x i16>*
  store <16 x i16> %21202, <16 x i16>* %21205, align 2, !tbaa !401
  %21206 = shufflevector <32 x i16> %21201, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21207 = getelementptr inbounds i16, i16* %21204, i64 16
  %21208 = bitcast i16* %21207 to <16 x i16>*
  store <16 x i16> %21206, <16 x i16>* %21208, align 2, !tbaa !401
  %21209 = add nuw nsw i32 %blur_y.s0.x.x.rebased1548, 1
  %.not2614 = icmp eq i32 %21209, %t1683898
  br i1 %.not2614, label %"end for blur_y.s0.x.x.rebased1547", label %"for blur_y.s0.x.x.rebased1546"

after_bb1558:                                     ; preds = %"end for blur_y.s0.x.x.rebased1547", %"produce blur_x1561"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1573.preheader", label %"end for blur_y.s0.x.x.rebased1574", !prof !386

"for blur_y.s0.x.x.rebased1573.preheader":        ; preds = %after_bb1558
  %21210 = sext i32 %t1688914 to i64
  %21211 = zext i32 %.pre-phi3598 to i64
  %21212 = mul nsw i64 %21211, %337
  %21213 = sub nsw i64 %21212, %298
  %21214 = zext i32 %.pre-phi3592 to i64
  %21215 = mul nsw i64 %21214, %337
  %21216 = sub nsw i64 %21215, %298
  %21217 = zext i32 %.pre-phi3604 to i64
  %21218 = mul nsw i64 %21217, %337
  %21219 = sub nsw i64 %21218, %298
  %21220 = zext i32 %.pre-phi3574 to i64
  %21221 = mul nsw i64 %21220, %337
  %21222 = sub nsw i64 %21221, %298
  %21223 = zext i32 %.pre-phi3570 to i64
  %21224 = mul nsw i64 %21223, %337
  %21225 = sub nsw i64 %21224, %298
  %21226 = sext i32 %a379 to i64
  %21227 = add nsw i64 %21226, 13
  %21228 = mul nsw i64 %21227, %334
  %21229 = add nsw i64 %21228, %338
  br label %"for blur_y.s0.x.x.rebased1573"

"produce blur_x1561":                             ; preds = %"end for blur_y.s0.x.x.rebased1547"
  %21230 = getelementptr inbounds i16, i16* %read_input822, i64 %413
  %21231 = getelementptr inbounds i16, i16* %21230, i64 -31
  %21232 = bitcast i16* %21231 to <16 x i16>*
  %21233 = load <16 x i16>, <16 x i16>* %21232, align 2, !tbaa !396
  %21234 = getelementptr inbounds i16, i16* %21230, i64 -15
  %21235 = bitcast i16* %21234 to <16 x i16>*
  %21236 = load <16 x i16>, <16 x i16>* %21235, align 2, !tbaa !396
  %21237 = shufflevector <16 x i16> %21233, <16 x i16> %21236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21238 = getelementptr inbounds i16, i16* %21230, i64 -32
  %21239 = bitcast i16* %21238 to <16 x i16>*
  %21240 = load <16 x i16>, <16 x i16>* %21239, align 2, !tbaa !396
  %21241 = getelementptr inbounds i16, i16* %21230, i64 -16
  %21242 = bitcast i16* %21241 to <16 x i16>*
  %21243 = load <16 x i16>, <16 x i16>* %21242, align 2, !tbaa !396
  %21244 = shufflevector <16 x i16> %21240, <16 x i16> %21243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21245 = getelementptr inbounds i16, i16* %21230, i64 -30
  %21246 = bitcast i16* %21245 to <16 x i16>*
  %21247 = load <16 x i16>, <16 x i16>* %21246, align 2, !tbaa !396
  %21248 = getelementptr inbounds i16, i16* %21230, i64 -14
  %21249 = bitcast i16* %21248 to <16 x i16>*
  %21250 = load <16 x i16>, <16 x i16>* %21249, align 2, !tbaa !396
  %21251 = shufflevector <16 x i16> %21247, <16 x i16> %21250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21252 = getelementptr inbounds i16, i16* %21230, i64 -28
  %21253 = bitcast i16* %21252 to <16 x i16>*
  %21254 = load <16 x i16>, <16 x i16>* %21253, align 2, !tbaa !396
  %21255 = getelementptr inbounds i16, i16* %21230, i64 -12
  %21256 = bitcast i16* %21255 to <16 x i16>*
  %21257 = load <16 x i16>, <16 x i16>* %21256, align 2, !tbaa !396
  %21258 = shufflevector <16 x i16> %21254, <16 x i16> %21257, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21259 = getelementptr inbounds i16, i16* %21230, i64 -29
  %21260 = bitcast i16* %21259 to <16 x i16>*
  %21261 = load <16 x i16>, <16 x i16>* %21260, align 2, !tbaa !396
  %21262 = getelementptr inbounds i16, i16* %21230, i64 -13
  %21263 = bitcast i16* %21262 to <16 x i16>*
  %21264 = load <16 x i16>, <16 x i16>* %21263, align 2, !tbaa !396
  %21265 = shufflevector <16 x i16> %21261, <16 x i16> %21264, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21266 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21244, <32 x i16> %21251, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21267 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21265, <32 x i16> %21258, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21268 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21266, <32 x i16> %21267, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21269 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21268, <32 x i16> %21237, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21270 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21269, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21271 = shufflevector <32 x i16> %21270, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21272 = zext i32 %.pre-phi3574 to i64
  %21273 = mul nsw i64 %299, %21272
  %21274 = add nsw i64 %301, %21273
  %21275 = getelementptr inbounds i16, i16* %blur_x879, i64 %21274
  %21276 = getelementptr inbounds i16, i16* %21275, i64 -32
  %21277 = bitcast i16* %21276 to <16 x i16>*
  store <16 x i16> %21271, <16 x i16>* %21277, align 2, !tbaa !399
  %21278 = shufflevector <32 x i16> %21270, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21279 = getelementptr inbounds i16, i16* %21275, i64 -16
  %21280 = bitcast i16* %21279 to <16 x i16>*
  store <16 x i16> %21278, <16 x i16>* %21280, align 2, !tbaa !399
  %21281 = zext i32 %.pre-phi3598 to i64
  %21282 = mul nsw i64 %21281, %333
  %21283 = add nsw i64 %21282, %296
  %21284 = getelementptr inbounds i16, i16* %blur_x879, i64 %21283
  %21285 = getelementptr inbounds i16, i16* %21284, i64 -32
  %21286 = bitcast i16* %21285 to <16 x i16>*
  %21287 = load <16 x i16>, <16 x i16>* %21286, align 2, !tbaa !399
  %21288 = getelementptr inbounds i16, i16* %21284, i64 -16
  %21289 = bitcast i16* %21288 to <16 x i16>*
  %21290 = load <16 x i16>, <16 x i16>* %21289, align 2, !tbaa !399
  %21291 = shufflevector <16 x i16> %21287, <16 x i16> %21290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21292 = zext i32 %.pre-phi3592 to i64
  %21293 = mul nsw i64 %21292, %333
  %21294 = add nsw i64 %21293, %296
  %21295 = getelementptr inbounds i16, i16* %blur_x879, i64 %21294
  %21296 = getelementptr inbounds i16, i16* %21295, i64 -32
  %21297 = bitcast i16* %21296 to <16 x i16>*
  %21298 = load <16 x i16>, <16 x i16>* %21297, align 2, !tbaa !399
  %21299 = getelementptr inbounds i16, i16* %21295, i64 -16
  %21300 = bitcast i16* %21299 to <16 x i16>*
  %21301 = load <16 x i16>, <16 x i16>* %21300, align 2, !tbaa !399
  %21302 = shufflevector <16 x i16> %21298, <16 x i16> %21301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21303 = zext i32 %.pre-phi3604 to i64
  %21304 = mul nsw i64 %21303, %333
  %21305 = add nsw i64 %21304, %296
  %21306 = getelementptr inbounds i16, i16* %blur_x879, i64 %21305
  %21307 = getelementptr inbounds i16, i16* %21306, i64 -32
  %21308 = bitcast i16* %21307 to <16 x i16>*
  %21309 = load <16 x i16>, <16 x i16>* %21308, align 2, !tbaa !399
  %21310 = getelementptr inbounds i16, i16* %21306, i64 -16
  %21311 = bitcast i16* %21310 to <16 x i16>*
  %21312 = load <16 x i16>, <16 x i16>* %21311, align 2, !tbaa !399
  %21313 = shufflevector <16 x i16> %21309, <16 x i16> %21312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21314 = mul nsw i64 %21272, %333
  %21315 = add nsw i64 %21314, %296
  %21316 = getelementptr inbounds i16, i16* %blur_x879, i64 %21315
  %21317 = getelementptr inbounds i16, i16* %21316, i64 -32
  %21318 = bitcast i16* %21317 to <16 x i16>*
  %21319 = load <16 x i16>, <16 x i16>* %21318, align 2, !tbaa !399
  %21320 = getelementptr inbounds i16, i16* %21316, i64 -16
  %21321 = bitcast i16* %21320 to <16 x i16>*
  %21322 = load <16 x i16>, <16 x i16>* %21321, align 2, !tbaa !399
  %21323 = shufflevector <16 x i16> %21319, <16 x i16> %21322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21324 = zext i32 %.pre-phi3570 to i64
  %21325 = mul nsw i64 %21324, %333
  %21326 = add nsw i64 %21325, %296
  %21327 = getelementptr inbounds i16, i16* %blur_x879, i64 %21326
  %21328 = getelementptr inbounds i16, i16* %21327, i64 -32
  %21329 = bitcast i16* %21328 to <16 x i16>*
  %21330 = load <16 x i16>, <16 x i16>* %21329, align 2, !tbaa !399
  %21331 = getelementptr inbounds i16, i16* %21327, i64 -16
  %21332 = bitcast i16* %21331 to <16 x i16>*
  %21333 = load <16 x i16>, <16 x i16>* %21332, align 2, !tbaa !399
  %21334 = shufflevector <16 x i16> %21330, <16 x i16> %21333, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21335 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21302, <32 x i16> %21313, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21336 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21334, <32 x i16> %21323, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21337 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21335, <32 x i16> %21336, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21338 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21337, <32 x i16> %21291, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21339 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21338, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21340 = shufflevector <32 x i16> %21339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21341 = sext i32 %a379 to i64
  %21342 = add nsw i64 %21341, 13
  %21343 = mul nsw i64 %21342, %334
  %21344 = add nsw i64 %336, %21343
  %21345 = getelementptr inbounds i16, i16* %263, i64 %21344
  %21346 = getelementptr inbounds i16, i16* %21345, i64 -32
  %21347 = bitcast i16* %21346 to <16 x i16>*
  store <16 x i16> %21340, <16 x i16>* %21347, align 2, !tbaa !401
  %21348 = shufflevector <32 x i16> %21339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21349 = getelementptr inbounds i16, i16* %21345, i64 -16
  %21350 = bitcast i16* %21349 to <16 x i16>*
  store <16 x i16> %21348, <16 x i16>* %21350, align 2, !tbaa !401
  br label %after_bb1558

"for blur_y.s0.x.x.rebased1573":                  ; preds = %"for blur_y.s0.x.x.rebased1573.preheader", %"consume blur_x1581"
  %indvars.iv3416 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1573.preheader" ], [ %indvars.iv.next3417, %"consume blur_x1581" ]
  %21351 = add nsw i64 %indvars.iv3416, %303
  %21352 = icmp slt i64 %21351, 1
  %21353 = trunc i64 %21351 to i32
  %21354 = shl nsw i32 %21353, 5
  %21355 = icmp sgt i32 %198, %21354
  %21356 = or i1 %21352, %21355
  br i1 %21356, label %"produce blur_x1579", label %"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge"

"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1573"
  %.pre3625 = shl nsw i64 %21351, 5
  br label %"consume blur_x1581"

"end for blur_y.s0.x.x.rebased1574":              ; preds = %"consume blur_x1581", %after_bb1558
  br i1 %304, label %"for blur_y.s0.x.x.rebased1589.preheader", label %"end for blur_y.s0.x.x.rebased1590", !prof !386

"for blur_y.s0.x.x.rebased1589.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1574"
  %21357 = sext i32 %t1688914 to i64
  %21358 = zext i32 %.pre-phi3598 to i64
  %21359 = mul nsw i64 %21358, %337
  %21360 = sub nsw i64 %21359, %298
  %21361 = zext i32 %.pre-phi3592 to i64
  %21362 = mul nsw i64 %21361, %337
  %21363 = sub nsw i64 %21362, %298
  %21364 = zext i32 %.pre-phi3604 to i64
  %21365 = mul nsw i64 %21364, %337
  %21366 = sub nsw i64 %21365, %298
  %21367 = zext i32 %.pre-phi3574 to i64
  %21368 = mul nsw i64 %21367, %337
  %21369 = sub nsw i64 %21368, %298
  %21370 = zext i32 %.pre-phi3570 to i64
  %21371 = mul nsw i64 %21370, %337
  %21372 = sub nsw i64 %21371, %298
  %21373 = sext i32 %a379 to i64
  %21374 = add nsw i64 %21373, 13
  %21375 = mul nsw i64 %21374, %334
  %21376 = add nsw i64 %21375, %338
  br label %"for blur_y.s0.x.x.rebased1589"

"produce blur_x1579":                             ; preds = %"for blur_y.s0.x.x.rebased1573"
  %t9201580 = add nsw i32 %415, %21354
  %21377 = sext i32 %t9201580 to i64
  %21378 = getelementptr inbounds i16, i16* %read_input822, i64 %21377
  %21379 = getelementptr inbounds i16, i16* %21378, i64 1
  %21380 = bitcast i16* %21379 to <16 x i16>*
  %21381 = load <16 x i16>, <16 x i16>* %21380, align 2, !tbaa !396
  %21382 = getelementptr inbounds i16, i16* %21378, i64 17
  %21383 = bitcast i16* %21382 to <16 x i16>*
  %21384 = load <16 x i16>, <16 x i16>* %21383, align 2, !tbaa !396
  %21385 = shufflevector <16 x i16> %21381, <16 x i16> %21384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21386 = bitcast i16* %21378 to <16 x i16>*
  %21387 = load <16 x i16>, <16 x i16>* %21386, align 2, !tbaa !396
  %21388 = getelementptr inbounds i16, i16* %21378, i64 16
  %21389 = bitcast i16* %21388 to <16 x i16>*
  %21390 = load <16 x i16>, <16 x i16>* %21389, align 2, !tbaa !396
  %21391 = shufflevector <16 x i16> %21387, <16 x i16> %21390, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21392 = getelementptr inbounds i16, i16* %21378, i64 2
  %21393 = bitcast i16* %21392 to <16 x i16>*
  %21394 = load <16 x i16>, <16 x i16>* %21393, align 2, !tbaa !396
  %21395 = getelementptr inbounds i16, i16* %21378, i64 18
  %21396 = bitcast i16* %21395 to <16 x i16>*
  %21397 = load <16 x i16>, <16 x i16>* %21396, align 2, !tbaa !396
  %21398 = shufflevector <16 x i16> %21394, <16 x i16> %21397, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21399 = getelementptr inbounds i16, i16* %21378, i64 4
  %21400 = bitcast i16* %21399 to <16 x i16>*
  %21401 = load <16 x i16>, <16 x i16>* %21400, align 2, !tbaa !396
  %21402 = getelementptr inbounds i16, i16* %21378, i64 20
  %21403 = bitcast i16* %21402 to <16 x i16>*
  %21404 = load <16 x i16>, <16 x i16>* %21403, align 2, !tbaa !396
  %21405 = shufflevector <16 x i16> %21401, <16 x i16> %21404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21406 = getelementptr inbounds i16, i16* %21378, i64 3
  %21407 = bitcast i16* %21406 to <16 x i16>*
  %21408 = load <16 x i16>, <16 x i16>* %21407, align 2, !tbaa !396
  %21409 = getelementptr inbounds i16, i16* %21378, i64 19
  %21410 = bitcast i16* %21409 to <16 x i16>*
  %21411 = load <16 x i16>, <16 x i16>* %21410, align 2, !tbaa !396
  %21412 = shufflevector <16 x i16> %21408, <16 x i16> %21411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21413 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21391, <32 x i16> %21398, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21414 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21412, <32 x i16> %21405, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21415 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21413, <32 x i16> %21414, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21416 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21415, <32 x i16> %21385, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21417 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21416, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21418 = shufflevector <32 x i16> %21417, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21419 = shl nsw i64 %21351, 5
  %21420 = add nsw i64 %21419, %21210
  %21421 = getelementptr inbounds i16, i16* %blur_x879, i64 %21420
  %21422 = bitcast i16* %21421 to <16 x i16>*
  store <16 x i16> %21418, <16 x i16>* %21422, align 2, !tbaa !399
  %21423 = shufflevector <32 x i16> %21417, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21424 = getelementptr inbounds i16, i16* %21421, i64 16
  %21425 = bitcast i16* %21424 to <16 x i16>*
  store <16 x i16> %21423, <16 x i16>* %21425, align 2, !tbaa !399
  br label %"consume blur_x1581"

"consume blur_x1581":                             ; preds = %"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge", %"produce blur_x1579"
  %.pre-phi3626 = phi i64 [ %.pre3625, %"for blur_y.s0.x.x.rebased1573.consume blur_x1581_crit_edge" ], [ %21419, %"produce blur_x1579" ]
  %21426 = add nsw i64 %21213, %.pre-phi3626
  %21427 = getelementptr inbounds i16, i16* %blur_x879, i64 %21426
  %21428 = bitcast i16* %21427 to <16 x i16>*
  %21429 = load <16 x i16>, <16 x i16>* %21428, align 2, !tbaa !399
  %21430 = getelementptr inbounds i16, i16* %21427, i64 16
  %21431 = bitcast i16* %21430 to <16 x i16>*
  %21432 = load <16 x i16>, <16 x i16>* %21431, align 2, !tbaa !399
  %21433 = shufflevector <16 x i16> %21429, <16 x i16> %21432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21434 = add nsw i64 %21216, %.pre-phi3626
  %21435 = getelementptr inbounds i16, i16* %blur_x879, i64 %21434
  %21436 = bitcast i16* %21435 to <16 x i16>*
  %21437 = load <16 x i16>, <16 x i16>* %21436, align 2, !tbaa !399
  %21438 = getelementptr inbounds i16, i16* %21435, i64 16
  %21439 = bitcast i16* %21438 to <16 x i16>*
  %21440 = load <16 x i16>, <16 x i16>* %21439, align 2, !tbaa !399
  %21441 = shufflevector <16 x i16> %21437, <16 x i16> %21440, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21442 = add nsw i64 %21219, %.pre-phi3626
  %21443 = getelementptr inbounds i16, i16* %blur_x879, i64 %21442
  %21444 = bitcast i16* %21443 to <16 x i16>*
  %21445 = load <16 x i16>, <16 x i16>* %21444, align 2, !tbaa !399
  %21446 = getelementptr inbounds i16, i16* %21443, i64 16
  %21447 = bitcast i16* %21446 to <16 x i16>*
  %21448 = load <16 x i16>, <16 x i16>* %21447, align 2, !tbaa !399
  %21449 = shufflevector <16 x i16> %21445, <16 x i16> %21448, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21450 = add nsw i64 %21222, %.pre-phi3626
  %21451 = getelementptr inbounds i16, i16* %blur_x879, i64 %21450
  %21452 = bitcast i16* %21451 to <16 x i16>*
  %21453 = load <16 x i16>, <16 x i16>* %21452, align 2, !tbaa !399
  %21454 = getelementptr inbounds i16, i16* %21451, i64 16
  %21455 = bitcast i16* %21454 to <16 x i16>*
  %21456 = load <16 x i16>, <16 x i16>* %21455, align 2, !tbaa !399
  %21457 = shufflevector <16 x i16> %21453, <16 x i16> %21456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21458 = add nsw i64 %21225, %.pre-phi3626
  %21459 = getelementptr inbounds i16, i16* %blur_x879, i64 %21458
  %21460 = bitcast i16* %21459 to <16 x i16>*
  %21461 = load <16 x i16>, <16 x i16>* %21460, align 2, !tbaa !399
  %21462 = getelementptr inbounds i16, i16* %21459, i64 16
  %21463 = bitcast i16* %21462 to <16 x i16>*
  %21464 = load <16 x i16>, <16 x i16>* %21463, align 2, !tbaa !399
  %21465 = shufflevector <16 x i16> %21461, <16 x i16> %21464, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21466 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21441, <32 x i16> %21449, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21467 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21465, <32 x i16> %21457, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21468 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21466, <32 x i16> %21467, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21469 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21468, <32 x i16> %21433, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21470 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21469, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21471 = shufflevector <32 x i16> %21470, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21472 = add nsw i64 %21229, %.pre-phi3626
  %21473 = getelementptr inbounds i16, i16* %263, i64 %21472
  %21474 = bitcast i16* %21473 to <16 x i16>*
  store <16 x i16> %21471, <16 x i16>* %21474, align 2, !tbaa !401
  %21475 = shufflevector <32 x i16> %21470, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21476 = getelementptr inbounds i16, i16* %21473, i64 16
  %21477 = bitcast i16* %21476 to <16 x i16>*
  store <16 x i16> %21475, <16 x i16>* %21477, align 2, !tbaa !401
  %indvars.iv.next3417 = add nuw nsw i64 %indvars.iv3416, 1
  %21478 = icmp eq i64 %indvars.iv.next3417, %zext3418
  br i1 %21478, label %"end for blur_y.s0.x.x.rebased1574", label %"for blur_y.s0.x.x.rebased1573"

"for blur_y.s0.x.x.rebased1589":                  ; preds = %"for blur_y.s0.x.x.rebased1589.preheader", %"consume blur_x1600"
  %blur_y.s0.x.x.rebased1591 = phi i32 [ %21587, %"consume blur_x1600" ], [ 0, %"for blur_y.s0.x.x.rebased1589.preheader" ]
  %21479 = add nsw i32 %blur_y.s0.x.x.rebased1591, %t1626814
  %a3350 = shl nsw i32 %21479, 5
  %21480 = icmp sgt i32 %t1647, %a3350
  %blur_y.s0.x.v0.base.s1592 = select i1 %21480, i32 %a3350, i32 %t1647
  %21481 = icmp slt i32 %21479, 1
  %21482 = icmp sgt i32 %198, %a3350
  %21483 = or i1 %21481, %21482
  br i1 %21483, label %"produce blur_x1597", label %"consume blur_x1600"

"end for blur_y.s0.x.x.rebased1590":              ; preds = %"consume blur_x1600", %"end for blur_y.s0.x.x.rebased1574"
  br i1 %229, label %"produce blur_x1604", label %after_bb1601

"produce blur_x1597":                             ; preds = %"for blur_y.s0.x.x.rebased1589"
  %21484 = icmp slt i32 %blur_y.s0.x.v0.base.s1592, %198
  %blur_x.s0.x.v1.base.s1598 = select i1 %21484, i32 %blur_y.s0.x.v0.base.s1592, i32 %198
  %t9251599 = add nsw i32 %415, %blur_x.s0.x.v1.base.s1598
  %21485 = sext i32 %t9251599 to i64
  %21486 = getelementptr inbounds i16, i16* %read_input822, i64 %21485
  %21487 = getelementptr inbounds i16, i16* %21486, i64 1
  %21488 = bitcast i16* %21487 to <16 x i16>*
  %21489 = load <16 x i16>, <16 x i16>* %21488, align 2, !tbaa !396
  %21490 = getelementptr inbounds i16, i16* %21486, i64 17
  %21491 = bitcast i16* %21490 to <16 x i16>*
  %21492 = load <16 x i16>, <16 x i16>* %21491, align 2, !tbaa !396
  %21493 = shufflevector <16 x i16> %21489, <16 x i16> %21492, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21494 = bitcast i16* %21486 to <16 x i16>*
  %21495 = load <16 x i16>, <16 x i16>* %21494, align 2, !tbaa !396
  %21496 = getelementptr inbounds i16, i16* %21486, i64 16
  %21497 = bitcast i16* %21496 to <16 x i16>*
  %21498 = load <16 x i16>, <16 x i16>* %21497, align 2, !tbaa !396
  %21499 = shufflevector <16 x i16> %21495, <16 x i16> %21498, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21500 = getelementptr inbounds i16, i16* %21486, i64 2
  %21501 = bitcast i16* %21500 to <16 x i16>*
  %21502 = load <16 x i16>, <16 x i16>* %21501, align 2, !tbaa !396
  %21503 = getelementptr inbounds i16, i16* %21486, i64 18
  %21504 = bitcast i16* %21503 to <16 x i16>*
  %21505 = load <16 x i16>, <16 x i16>* %21504, align 2, !tbaa !396
  %21506 = shufflevector <16 x i16> %21502, <16 x i16> %21505, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21507 = getelementptr inbounds i16, i16* %21486, i64 4
  %21508 = bitcast i16* %21507 to <16 x i16>*
  %21509 = load <16 x i16>, <16 x i16>* %21508, align 2, !tbaa !396
  %21510 = getelementptr inbounds i16, i16* %21486, i64 20
  %21511 = bitcast i16* %21510 to <16 x i16>*
  %21512 = load <16 x i16>, <16 x i16>* %21511, align 2, !tbaa !396
  %21513 = shufflevector <16 x i16> %21509, <16 x i16> %21512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21514 = getelementptr inbounds i16, i16* %21486, i64 3
  %21515 = bitcast i16* %21514 to <16 x i16>*
  %21516 = load <16 x i16>, <16 x i16>* %21515, align 2, !tbaa !396
  %21517 = getelementptr inbounds i16, i16* %21486, i64 19
  %21518 = bitcast i16* %21517 to <16 x i16>*
  %21519 = load <16 x i16>, <16 x i16>* %21518, align 2, !tbaa !396
  %21520 = shufflevector <16 x i16> %21516, <16 x i16> %21519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21521 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21499, <32 x i16> %21506, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21522 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21520, <32 x i16> %21513, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21523 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21521, <32 x i16> %21522, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21524 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21523, <32 x i16> %21493, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21525 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21524, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21526 = shufflevector <32 x i16> %21525, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21527 = sext i32 %blur_x.s0.x.v1.base.s1598 to i64
  %21528 = add nsw i64 %21527, %21357
  %21529 = getelementptr inbounds i16, i16* %blur_x879, i64 %21528
  %21530 = bitcast i16* %21529 to <16 x i16>*
  store <16 x i16> %21526, <16 x i16>* %21530, align 2, !tbaa !399
  %21531 = shufflevector <32 x i16> %21525, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21532 = getelementptr inbounds i16, i16* %21529, i64 16
  %21533 = bitcast i16* %21532 to <16 x i16>*
  store <16 x i16> %21531, <16 x i16>* %21533, align 2, !tbaa !399
  br label %"consume blur_x1600"

"consume blur_x1600":                             ; preds = %"for blur_y.s0.x.x.rebased1589", %"produce blur_x1597"
  %21534 = sext i32 %blur_y.s0.x.v0.base.s1592 to i64
  %21535 = add nsw i64 %21360, %21534
  %21536 = getelementptr inbounds i16, i16* %blur_x879, i64 %21535
  %21537 = bitcast i16* %21536 to <16 x i16>*
  %21538 = load <16 x i16>, <16 x i16>* %21537, align 2, !tbaa !399
  %21539 = getelementptr inbounds i16, i16* %21536, i64 16
  %21540 = bitcast i16* %21539 to <16 x i16>*
  %21541 = load <16 x i16>, <16 x i16>* %21540, align 2, !tbaa !399
  %21542 = shufflevector <16 x i16> %21538, <16 x i16> %21541, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21543 = add nsw i64 %21363, %21534
  %21544 = getelementptr inbounds i16, i16* %blur_x879, i64 %21543
  %21545 = bitcast i16* %21544 to <16 x i16>*
  %21546 = load <16 x i16>, <16 x i16>* %21545, align 2, !tbaa !399
  %21547 = getelementptr inbounds i16, i16* %21544, i64 16
  %21548 = bitcast i16* %21547 to <16 x i16>*
  %21549 = load <16 x i16>, <16 x i16>* %21548, align 2, !tbaa !399
  %21550 = shufflevector <16 x i16> %21546, <16 x i16> %21549, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21551 = add nsw i64 %21366, %21534
  %21552 = getelementptr inbounds i16, i16* %blur_x879, i64 %21551
  %21553 = bitcast i16* %21552 to <16 x i16>*
  %21554 = load <16 x i16>, <16 x i16>* %21553, align 2, !tbaa !399
  %21555 = getelementptr inbounds i16, i16* %21552, i64 16
  %21556 = bitcast i16* %21555 to <16 x i16>*
  %21557 = load <16 x i16>, <16 x i16>* %21556, align 2, !tbaa !399
  %21558 = shufflevector <16 x i16> %21554, <16 x i16> %21557, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21559 = add nsw i64 %21369, %21534
  %21560 = getelementptr inbounds i16, i16* %blur_x879, i64 %21559
  %21561 = bitcast i16* %21560 to <16 x i16>*
  %21562 = load <16 x i16>, <16 x i16>* %21561, align 2, !tbaa !399
  %21563 = getelementptr inbounds i16, i16* %21560, i64 16
  %21564 = bitcast i16* %21563 to <16 x i16>*
  %21565 = load <16 x i16>, <16 x i16>* %21564, align 2, !tbaa !399
  %21566 = shufflevector <16 x i16> %21562, <16 x i16> %21565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21567 = add nsw i64 %21372, %21534
  %21568 = getelementptr inbounds i16, i16* %blur_x879, i64 %21567
  %21569 = bitcast i16* %21568 to <16 x i16>*
  %21570 = load <16 x i16>, <16 x i16>* %21569, align 2, !tbaa !399
  %21571 = getelementptr inbounds i16, i16* %21568, i64 16
  %21572 = bitcast i16* %21571 to <16 x i16>*
  %21573 = load <16 x i16>, <16 x i16>* %21572, align 2, !tbaa !399
  %21574 = shufflevector <16 x i16> %21570, <16 x i16> %21573, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21575 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21550, <32 x i16> %21558, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21576 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21574, <32 x i16> %21566, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21577 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21575, <32 x i16> %21576, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21578 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21577, <32 x i16> %21542, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21579 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21578, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21580 = shufflevector <32 x i16> %21579, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21581 = add nsw i64 %21376, %21534
  %21582 = getelementptr inbounds i16, i16* %263, i64 %21581
  %21583 = bitcast i16* %21582 to <16 x i16>*
  store <16 x i16> %21580, <16 x i16>* %21583, align 2, !tbaa !401
  %21584 = shufflevector <32 x i16> %21579, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21585 = getelementptr inbounds i16, i16* %21582, i64 16
  %21586 = bitcast i16* %21585 to <16 x i16>*
  store <16 x i16> %21584, <16 x i16>* %21586, align 2, !tbaa !401
  %21587 = add nuw nsw i32 %blur_y.s0.x.x.rebased1591, 1
  %.not2610 = icmp eq i32 %21587, %t1683898
  br i1 %.not2610, label %"end for blur_y.s0.x.x.rebased1590", label %"for blur_y.s0.x.x.rebased1589"

after_bb1601:                                     ; preds = %"end for blur_y.s0.x.x.rebased1590", %"produce blur_x1604"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1616.preheader", label %"end for blur_y.s0.x.x.rebased1617", !prof !386

"for blur_y.s0.x.x.rebased1616.preheader":        ; preds = %after_bb1601
  %21588 = sext i32 %t1694944 to i64
  %21589 = zext i32 %.pre-phi3604 to i64
  %21590 = mul nsw i64 %21589, %337
  %21591 = sub nsw i64 %21590, %298
  %21592 = zext i32 %.pre-phi3598 to i64
  %21593 = mul nsw i64 %21592, %337
  %21594 = sub nsw i64 %21593, %298
  %21595 = zext i32 %.pre-phi3570 to i64
  %21596 = mul nsw i64 %21595, %337
  %21597 = sub nsw i64 %21596, %298
  %21598 = zext i32 %.pre-phi3578 to i64
  %21599 = mul nsw i64 %21598, %337
  %21600 = sub nsw i64 %21599, %298
  %21601 = zext i32 %.pre-phi3574 to i64
  %21602 = mul nsw i64 %21601, %337
  %21603 = sub nsw i64 %21602, %298
  %21604 = sext i32 %a379 to i64
  %21605 = add nsw i64 %21604, 14
  %21606 = mul nsw i64 %21605, %334
  %21607 = add nsw i64 %21606, %338
  br label %"for blur_y.s0.x.x.rebased1616"

"produce blur_x1604":                             ; preds = %"end for blur_y.s0.x.x.rebased1590"
  %21608 = getelementptr inbounds i16, i16* %read_input822, i64 %419
  %21609 = getelementptr inbounds i16, i16* %21608, i64 -31
  %21610 = bitcast i16* %21609 to <16 x i16>*
  %21611 = load <16 x i16>, <16 x i16>* %21610, align 2, !tbaa !396
  %21612 = getelementptr inbounds i16, i16* %21608, i64 -15
  %21613 = bitcast i16* %21612 to <16 x i16>*
  %21614 = load <16 x i16>, <16 x i16>* %21613, align 2, !tbaa !396
  %21615 = shufflevector <16 x i16> %21611, <16 x i16> %21614, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21616 = getelementptr inbounds i16, i16* %21608, i64 -32
  %21617 = bitcast i16* %21616 to <16 x i16>*
  %21618 = load <16 x i16>, <16 x i16>* %21617, align 2, !tbaa !396
  %21619 = getelementptr inbounds i16, i16* %21608, i64 -16
  %21620 = bitcast i16* %21619 to <16 x i16>*
  %21621 = load <16 x i16>, <16 x i16>* %21620, align 2, !tbaa !396
  %21622 = shufflevector <16 x i16> %21618, <16 x i16> %21621, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21623 = getelementptr inbounds i16, i16* %21608, i64 -30
  %21624 = bitcast i16* %21623 to <16 x i16>*
  %21625 = load <16 x i16>, <16 x i16>* %21624, align 2, !tbaa !396
  %21626 = getelementptr inbounds i16, i16* %21608, i64 -14
  %21627 = bitcast i16* %21626 to <16 x i16>*
  %21628 = load <16 x i16>, <16 x i16>* %21627, align 2, !tbaa !396
  %21629 = shufflevector <16 x i16> %21625, <16 x i16> %21628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21630 = getelementptr inbounds i16, i16* %21608, i64 -28
  %21631 = bitcast i16* %21630 to <16 x i16>*
  %21632 = load <16 x i16>, <16 x i16>* %21631, align 2, !tbaa !396
  %21633 = getelementptr inbounds i16, i16* %21608, i64 -12
  %21634 = bitcast i16* %21633 to <16 x i16>*
  %21635 = load <16 x i16>, <16 x i16>* %21634, align 2, !tbaa !396
  %21636 = shufflevector <16 x i16> %21632, <16 x i16> %21635, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21637 = getelementptr inbounds i16, i16* %21608, i64 -29
  %21638 = bitcast i16* %21637 to <16 x i16>*
  %21639 = load <16 x i16>, <16 x i16>* %21638, align 2, !tbaa !396
  %21640 = getelementptr inbounds i16, i16* %21608, i64 -13
  %21641 = bitcast i16* %21640 to <16 x i16>*
  %21642 = load <16 x i16>, <16 x i16>* %21641, align 2, !tbaa !396
  %21643 = shufflevector <16 x i16> %21639, <16 x i16> %21642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21644 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21622, <32 x i16> %21629, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21645 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21643, <32 x i16> %21636, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21646 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21644, <32 x i16> %21645, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21647 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21646, <32 x i16> %21615, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21648 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21647, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21649 = shufflevector <32 x i16> %21648, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21650 = zext i32 %.pre-phi3578 to i64
  %21651 = mul nsw i64 %299, %21650
  %21652 = add nsw i64 %301, %21651
  %21653 = getelementptr inbounds i16, i16* %blur_x879, i64 %21652
  %21654 = getelementptr inbounds i16, i16* %21653, i64 -32
  %21655 = bitcast i16* %21654 to <16 x i16>*
  store <16 x i16> %21649, <16 x i16>* %21655, align 2, !tbaa !399
  %21656 = shufflevector <32 x i16> %21648, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21657 = getelementptr inbounds i16, i16* %21653, i64 -16
  %21658 = bitcast i16* %21657 to <16 x i16>*
  store <16 x i16> %21656, <16 x i16>* %21658, align 2, !tbaa !399
  %21659 = zext i32 %.pre-phi3604 to i64
  %21660 = mul nsw i64 %21659, %333
  %21661 = add nsw i64 %21660, %296
  %21662 = getelementptr inbounds i16, i16* %blur_x879, i64 %21661
  %21663 = getelementptr inbounds i16, i16* %21662, i64 -32
  %21664 = bitcast i16* %21663 to <16 x i16>*
  %21665 = load <16 x i16>, <16 x i16>* %21664, align 2, !tbaa !399
  %21666 = getelementptr inbounds i16, i16* %21662, i64 -16
  %21667 = bitcast i16* %21666 to <16 x i16>*
  %21668 = load <16 x i16>, <16 x i16>* %21667, align 2, !tbaa !399
  %21669 = shufflevector <16 x i16> %21665, <16 x i16> %21668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21670 = zext i32 %.pre-phi3598 to i64
  %21671 = mul nsw i64 %21670, %333
  %21672 = add nsw i64 %21671, %296
  %21673 = getelementptr inbounds i16, i16* %blur_x879, i64 %21672
  %21674 = getelementptr inbounds i16, i16* %21673, i64 -32
  %21675 = bitcast i16* %21674 to <16 x i16>*
  %21676 = load <16 x i16>, <16 x i16>* %21675, align 2, !tbaa !399
  %21677 = getelementptr inbounds i16, i16* %21673, i64 -16
  %21678 = bitcast i16* %21677 to <16 x i16>*
  %21679 = load <16 x i16>, <16 x i16>* %21678, align 2, !tbaa !399
  %21680 = shufflevector <16 x i16> %21676, <16 x i16> %21679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21681 = zext i32 %.pre-phi3570 to i64
  %21682 = mul nsw i64 %21681, %333
  %21683 = add nsw i64 %21682, %296
  %21684 = getelementptr inbounds i16, i16* %blur_x879, i64 %21683
  %21685 = getelementptr inbounds i16, i16* %21684, i64 -32
  %21686 = bitcast i16* %21685 to <16 x i16>*
  %21687 = load <16 x i16>, <16 x i16>* %21686, align 2, !tbaa !399
  %21688 = getelementptr inbounds i16, i16* %21684, i64 -16
  %21689 = bitcast i16* %21688 to <16 x i16>*
  %21690 = load <16 x i16>, <16 x i16>* %21689, align 2, !tbaa !399
  %21691 = shufflevector <16 x i16> %21687, <16 x i16> %21690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21692 = mul nsw i64 %21650, %333
  %21693 = add nsw i64 %21692, %296
  %21694 = getelementptr inbounds i16, i16* %blur_x879, i64 %21693
  %21695 = getelementptr inbounds i16, i16* %21694, i64 -32
  %21696 = bitcast i16* %21695 to <16 x i16>*
  %21697 = load <16 x i16>, <16 x i16>* %21696, align 2, !tbaa !399
  %21698 = getelementptr inbounds i16, i16* %21694, i64 -16
  %21699 = bitcast i16* %21698 to <16 x i16>*
  %21700 = load <16 x i16>, <16 x i16>* %21699, align 2, !tbaa !399
  %21701 = shufflevector <16 x i16> %21697, <16 x i16> %21700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21702 = zext i32 %.pre-phi3574 to i64
  %21703 = mul nsw i64 %21702, %333
  %21704 = add nsw i64 %21703, %296
  %21705 = getelementptr inbounds i16, i16* %blur_x879, i64 %21704
  %21706 = getelementptr inbounds i16, i16* %21705, i64 -32
  %21707 = bitcast i16* %21706 to <16 x i16>*
  %21708 = load <16 x i16>, <16 x i16>* %21707, align 2, !tbaa !399
  %21709 = getelementptr inbounds i16, i16* %21705, i64 -16
  %21710 = bitcast i16* %21709 to <16 x i16>*
  %21711 = load <16 x i16>, <16 x i16>* %21710, align 2, !tbaa !399
  %21712 = shufflevector <16 x i16> %21708, <16 x i16> %21711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21713 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21680, <32 x i16> %21691, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21714 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21712, <32 x i16> %21701, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21715 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21713, <32 x i16> %21714, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21716 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21715, <32 x i16> %21669, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21717 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21716, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21718 = shufflevector <32 x i16> %21717, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21719 = sext i32 %a379 to i64
  %21720 = add nsw i64 %21719, 14
  %21721 = mul nsw i64 %21720, %334
  %21722 = add nsw i64 %336, %21721
  %21723 = getelementptr inbounds i16, i16* %263, i64 %21722
  %21724 = getelementptr inbounds i16, i16* %21723, i64 -32
  %21725 = bitcast i16* %21724 to <16 x i16>*
  store <16 x i16> %21718, <16 x i16>* %21725, align 2, !tbaa !401
  %21726 = shufflevector <32 x i16> %21717, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21727 = getelementptr inbounds i16, i16* %21723, i64 -16
  %21728 = bitcast i16* %21727 to <16 x i16>*
  store <16 x i16> %21726, <16 x i16>* %21728, align 2, !tbaa !401
  br label %after_bb1601

"for blur_y.s0.x.x.rebased1616":                  ; preds = %"for blur_y.s0.x.x.rebased1616.preheader", %"consume blur_x1624"
  %indvars.iv3419 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1616.preheader" ], [ %indvars.iv.next3420, %"consume blur_x1624" ]
  %21729 = add nsw i64 %indvars.iv3419, %303
  %21730 = icmp slt i64 %21729, 1
  %21731 = trunc i64 %21729 to i32
  %21732 = shl nsw i32 %21731, 5
  %21733 = icmp sgt i32 %198, %21732
  %21734 = or i1 %21730, %21733
  br i1 %21734, label %"produce blur_x1622", label %"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge"

"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1616"
  %.pre3627 = shl nsw i64 %21729, 5
  br label %"consume blur_x1624"

"end for blur_y.s0.x.x.rebased1617":              ; preds = %"consume blur_x1624", %after_bb1601
  br i1 %304, label %"for blur_y.s0.x.x.rebased1632.preheader", label %"end for blur_y.s0.x.x.rebased1633", !prof !386

"for blur_y.s0.x.x.rebased1632.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1617"
  %21735 = sext i32 %t1694944 to i64
  %21736 = zext i32 %.pre-phi3604 to i64
  %21737 = mul nsw i64 %21736, %337
  %21738 = sub nsw i64 %21737, %298
  %21739 = zext i32 %.pre-phi3598 to i64
  %21740 = mul nsw i64 %21739, %337
  %21741 = sub nsw i64 %21740, %298
  %21742 = zext i32 %.pre-phi3570 to i64
  %21743 = mul nsw i64 %21742, %337
  %21744 = sub nsw i64 %21743, %298
  %21745 = zext i32 %.pre-phi3578 to i64
  %21746 = mul nsw i64 %21745, %337
  %21747 = sub nsw i64 %21746, %298
  %21748 = zext i32 %.pre-phi3574 to i64
  %21749 = mul nsw i64 %21748, %337
  %21750 = sub nsw i64 %21749, %298
  %21751 = sext i32 %a379 to i64
  %21752 = add nsw i64 %21751, 14
  %21753 = mul nsw i64 %21752, %334
  %21754 = add nsw i64 %21753, %338
  br label %"for blur_y.s0.x.x.rebased1632"

"produce blur_x1622":                             ; preds = %"for blur_y.s0.x.x.rebased1616"
  %t9361623 = add nsw i32 %421, %21732
  %21755 = sext i32 %t9361623 to i64
  %21756 = getelementptr inbounds i16, i16* %read_input822, i64 %21755
  %21757 = getelementptr inbounds i16, i16* %21756, i64 1
  %21758 = bitcast i16* %21757 to <16 x i16>*
  %21759 = load <16 x i16>, <16 x i16>* %21758, align 2, !tbaa !396
  %21760 = getelementptr inbounds i16, i16* %21756, i64 17
  %21761 = bitcast i16* %21760 to <16 x i16>*
  %21762 = load <16 x i16>, <16 x i16>* %21761, align 2, !tbaa !396
  %21763 = shufflevector <16 x i16> %21759, <16 x i16> %21762, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21764 = bitcast i16* %21756 to <16 x i16>*
  %21765 = load <16 x i16>, <16 x i16>* %21764, align 2, !tbaa !396
  %21766 = getelementptr inbounds i16, i16* %21756, i64 16
  %21767 = bitcast i16* %21766 to <16 x i16>*
  %21768 = load <16 x i16>, <16 x i16>* %21767, align 2, !tbaa !396
  %21769 = shufflevector <16 x i16> %21765, <16 x i16> %21768, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21770 = getelementptr inbounds i16, i16* %21756, i64 2
  %21771 = bitcast i16* %21770 to <16 x i16>*
  %21772 = load <16 x i16>, <16 x i16>* %21771, align 2, !tbaa !396
  %21773 = getelementptr inbounds i16, i16* %21756, i64 18
  %21774 = bitcast i16* %21773 to <16 x i16>*
  %21775 = load <16 x i16>, <16 x i16>* %21774, align 2, !tbaa !396
  %21776 = shufflevector <16 x i16> %21772, <16 x i16> %21775, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21777 = getelementptr inbounds i16, i16* %21756, i64 4
  %21778 = bitcast i16* %21777 to <16 x i16>*
  %21779 = load <16 x i16>, <16 x i16>* %21778, align 2, !tbaa !396
  %21780 = getelementptr inbounds i16, i16* %21756, i64 20
  %21781 = bitcast i16* %21780 to <16 x i16>*
  %21782 = load <16 x i16>, <16 x i16>* %21781, align 2, !tbaa !396
  %21783 = shufflevector <16 x i16> %21779, <16 x i16> %21782, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21784 = getelementptr inbounds i16, i16* %21756, i64 3
  %21785 = bitcast i16* %21784 to <16 x i16>*
  %21786 = load <16 x i16>, <16 x i16>* %21785, align 2, !tbaa !396
  %21787 = getelementptr inbounds i16, i16* %21756, i64 19
  %21788 = bitcast i16* %21787 to <16 x i16>*
  %21789 = load <16 x i16>, <16 x i16>* %21788, align 2, !tbaa !396
  %21790 = shufflevector <16 x i16> %21786, <16 x i16> %21789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21791 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21769, <32 x i16> %21776, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21792 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21790, <32 x i16> %21783, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21793 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21791, <32 x i16> %21792, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21794 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21793, <32 x i16> %21763, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21795 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21794, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21796 = shufflevector <32 x i16> %21795, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21797 = shl nsw i64 %21729, 5
  %21798 = add nsw i64 %21797, %21588
  %21799 = getelementptr inbounds i16, i16* %blur_x879, i64 %21798
  %21800 = bitcast i16* %21799 to <16 x i16>*
  store <16 x i16> %21796, <16 x i16>* %21800, align 2, !tbaa !399
  %21801 = shufflevector <32 x i16> %21795, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21802 = getelementptr inbounds i16, i16* %21799, i64 16
  %21803 = bitcast i16* %21802 to <16 x i16>*
  store <16 x i16> %21801, <16 x i16>* %21803, align 2, !tbaa !399
  br label %"consume blur_x1624"

"consume blur_x1624":                             ; preds = %"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge", %"produce blur_x1622"
  %.pre-phi3628 = phi i64 [ %.pre3627, %"for blur_y.s0.x.x.rebased1616.consume blur_x1624_crit_edge" ], [ %21797, %"produce blur_x1622" ]
  %21804 = add nsw i64 %21591, %.pre-phi3628
  %21805 = getelementptr inbounds i16, i16* %blur_x879, i64 %21804
  %21806 = bitcast i16* %21805 to <16 x i16>*
  %21807 = load <16 x i16>, <16 x i16>* %21806, align 2, !tbaa !399
  %21808 = getelementptr inbounds i16, i16* %21805, i64 16
  %21809 = bitcast i16* %21808 to <16 x i16>*
  %21810 = load <16 x i16>, <16 x i16>* %21809, align 2, !tbaa !399
  %21811 = shufflevector <16 x i16> %21807, <16 x i16> %21810, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21812 = add nsw i64 %21594, %.pre-phi3628
  %21813 = getelementptr inbounds i16, i16* %blur_x879, i64 %21812
  %21814 = bitcast i16* %21813 to <16 x i16>*
  %21815 = load <16 x i16>, <16 x i16>* %21814, align 2, !tbaa !399
  %21816 = getelementptr inbounds i16, i16* %21813, i64 16
  %21817 = bitcast i16* %21816 to <16 x i16>*
  %21818 = load <16 x i16>, <16 x i16>* %21817, align 2, !tbaa !399
  %21819 = shufflevector <16 x i16> %21815, <16 x i16> %21818, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21820 = add nsw i64 %21597, %.pre-phi3628
  %21821 = getelementptr inbounds i16, i16* %blur_x879, i64 %21820
  %21822 = bitcast i16* %21821 to <16 x i16>*
  %21823 = load <16 x i16>, <16 x i16>* %21822, align 2, !tbaa !399
  %21824 = getelementptr inbounds i16, i16* %21821, i64 16
  %21825 = bitcast i16* %21824 to <16 x i16>*
  %21826 = load <16 x i16>, <16 x i16>* %21825, align 2, !tbaa !399
  %21827 = shufflevector <16 x i16> %21823, <16 x i16> %21826, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21828 = add nsw i64 %21600, %.pre-phi3628
  %21829 = getelementptr inbounds i16, i16* %blur_x879, i64 %21828
  %21830 = bitcast i16* %21829 to <16 x i16>*
  %21831 = load <16 x i16>, <16 x i16>* %21830, align 2, !tbaa !399
  %21832 = getelementptr inbounds i16, i16* %21829, i64 16
  %21833 = bitcast i16* %21832 to <16 x i16>*
  %21834 = load <16 x i16>, <16 x i16>* %21833, align 2, !tbaa !399
  %21835 = shufflevector <16 x i16> %21831, <16 x i16> %21834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21836 = add nsw i64 %21603, %.pre-phi3628
  %21837 = getelementptr inbounds i16, i16* %blur_x879, i64 %21836
  %21838 = bitcast i16* %21837 to <16 x i16>*
  %21839 = load <16 x i16>, <16 x i16>* %21838, align 2, !tbaa !399
  %21840 = getelementptr inbounds i16, i16* %21837, i64 16
  %21841 = bitcast i16* %21840 to <16 x i16>*
  %21842 = load <16 x i16>, <16 x i16>* %21841, align 2, !tbaa !399
  %21843 = shufflevector <16 x i16> %21839, <16 x i16> %21842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21844 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21819, <32 x i16> %21827, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21845 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21843, <32 x i16> %21835, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21846 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21844, <32 x i16> %21845, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21847 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21846, <32 x i16> %21811, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21848 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21847, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21849 = shufflevector <32 x i16> %21848, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21850 = add nsw i64 %21607, %.pre-phi3628
  %21851 = getelementptr inbounds i16, i16* %263, i64 %21850
  %21852 = bitcast i16* %21851 to <16 x i16>*
  store <16 x i16> %21849, <16 x i16>* %21852, align 2, !tbaa !401
  %21853 = shufflevector <32 x i16> %21848, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21854 = getelementptr inbounds i16, i16* %21851, i64 16
  %21855 = bitcast i16* %21854 to <16 x i16>*
  store <16 x i16> %21853, <16 x i16>* %21855, align 2, !tbaa !401
  %indvars.iv.next3420 = add nuw nsw i64 %indvars.iv3419, 1
  %21856 = icmp eq i64 %indvars.iv.next3420, %zext3421
  br i1 %21856, label %"end for blur_y.s0.x.x.rebased1617", label %"for blur_y.s0.x.x.rebased1616"

"for blur_y.s0.x.x.rebased1632":                  ; preds = %"for blur_y.s0.x.x.rebased1632.preheader", %"consume blur_x1643"
  %blur_y.s0.x.x.rebased1634 = phi i32 [ %21965, %"consume blur_x1643" ], [ 0, %"for blur_y.s0.x.x.rebased1632.preheader" ]
  %21857 = add nsw i32 %blur_y.s0.x.x.rebased1634, %t1626814
  %a3507 = shl nsw i32 %21857, 5
  %21858 = icmp sgt i32 %t1647, %a3507
  %blur_y.s0.x.v0.base.s1635 = select i1 %21858, i32 %a3507, i32 %t1647
  %21859 = icmp slt i32 %21857, 1
  %21860 = icmp sgt i32 %198, %a3507
  %21861 = or i1 %21859, %21860
  br i1 %21861, label %"produce blur_x1640", label %"consume blur_x1643"

"end for blur_y.s0.x.x.rebased1633":              ; preds = %"consume blur_x1643", %"end for blur_y.s0.x.x.rebased1617"
  br i1 %229, label %"produce blur_x1647", label %after_bb1644

"produce blur_x1640":                             ; preds = %"for blur_y.s0.x.x.rebased1632"
  %21862 = icmp slt i32 %blur_y.s0.x.v0.base.s1635, %198
  %blur_x.s0.x.v1.base.s1641 = select i1 %21862, i32 %blur_y.s0.x.v0.base.s1635, i32 %198
  %t9411642 = add nsw i32 %421, %blur_x.s0.x.v1.base.s1641
  %21863 = sext i32 %t9411642 to i64
  %21864 = getelementptr inbounds i16, i16* %read_input822, i64 %21863
  %21865 = getelementptr inbounds i16, i16* %21864, i64 1
  %21866 = bitcast i16* %21865 to <16 x i16>*
  %21867 = load <16 x i16>, <16 x i16>* %21866, align 2, !tbaa !396
  %21868 = getelementptr inbounds i16, i16* %21864, i64 17
  %21869 = bitcast i16* %21868 to <16 x i16>*
  %21870 = load <16 x i16>, <16 x i16>* %21869, align 2, !tbaa !396
  %21871 = shufflevector <16 x i16> %21867, <16 x i16> %21870, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21872 = bitcast i16* %21864 to <16 x i16>*
  %21873 = load <16 x i16>, <16 x i16>* %21872, align 2, !tbaa !396
  %21874 = getelementptr inbounds i16, i16* %21864, i64 16
  %21875 = bitcast i16* %21874 to <16 x i16>*
  %21876 = load <16 x i16>, <16 x i16>* %21875, align 2, !tbaa !396
  %21877 = shufflevector <16 x i16> %21873, <16 x i16> %21876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21878 = getelementptr inbounds i16, i16* %21864, i64 2
  %21879 = bitcast i16* %21878 to <16 x i16>*
  %21880 = load <16 x i16>, <16 x i16>* %21879, align 2, !tbaa !396
  %21881 = getelementptr inbounds i16, i16* %21864, i64 18
  %21882 = bitcast i16* %21881 to <16 x i16>*
  %21883 = load <16 x i16>, <16 x i16>* %21882, align 2, !tbaa !396
  %21884 = shufflevector <16 x i16> %21880, <16 x i16> %21883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21885 = getelementptr inbounds i16, i16* %21864, i64 4
  %21886 = bitcast i16* %21885 to <16 x i16>*
  %21887 = load <16 x i16>, <16 x i16>* %21886, align 2, !tbaa !396
  %21888 = getelementptr inbounds i16, i16* %21864, i64 20
  %21889 = bitcast i16* %21888 to <16 x i16>*
  %21890 = load <16 x i16>, <16 x i16>* %21889, align 2, !tbaa !396
  %21891 = shufflevector <16 x i16> %21887, <16 x i16> %21890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21892 = getelementptr inbounds i16, i16* %21864, i64 3
  %21893 = bitcast i16* %21892 to <16 x i16>*
  %21894 = load <16 x i16>, <16 x i16>* %21893, align 2, !tbaa !396
  %21895 = getelementptr inbounds i16, i16* %21864, i64 19
  %21896 = bitcast i16* %21895 to <16 x i16>*
  %21897 = load <16 x i16>, <16 x i16>* %21896, align 2, !tbaa !396
  %21898 = shufflevector <16 x i16> %21894, <16 x i16> %21897, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21899 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21877, <32 x i16> %21884, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21900 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21898, <32 x i16> %21891, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21901 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21899, <32 x i16> %21900, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21902 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21901, <32 x i16> %21871, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21903 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21902, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21904 = shufflevector <32 x i16> %21903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21905 = sext i32 %blur_x.s0.x.v1.base.s1641 to i64
  %21906 = add nsw i64 %21905, %21735
  %21907 = getelementptr inbounds i16, i16* %blur_x879, i64 %21906
  %21908 = bitcast i16* %21907 to <16 x i16>*
  store <16 x i16> %21904, <16 x i16>* %21908, align 2, !tbaa !399
  %21909 = shufflevector <32 x i16> %21903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21910 = getelementptr inbounds i16, i16* %21907, i64 16
  %21911 = bitcast i16* %21910 to <16 x i16>*
  store <16 x i16> %21909, <16 x i16>* %21911, align 2, !tbaa !399
  br label %"consume blur_x1643"

"consume blur_x1643":                             ; preds = %"for blur_y.s0.x.x.rebased1632", %"produce blur_x1640"
  %21912 = sext i32 %blur_y.s0.x.v0.base.s1635 to i64
  %21913 = add nsw i64 %21738, %21912
  %21914 = getelementptr inbounds i16, i16* %blur_x879, i64 %21913
  %21915 = bitcast i16* %21914 to <16 x i16>*
  %21916 = load <16 x i16>, <16 x i16>* %21915, align 2, !tbaa !399
  %21917 = getelementptr inbounds i16, i16* %21914, i64 16
  %21918 = bitcast i16* %21917 to <16 x i16>*
  %21919 = load <16 x i16>, <16 x i16>* %21918, align 2, !tbaa !399
  %21920 = shufflevector <16 x i16> %21916, <16 x i16> %21919, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21921 = add nsw i64 %21741, %21912
  %21922 = getelementptr inbounds i16, i16* %blur_x879, i64 %21921
  %21923 = bitcast i16* %21922 to <16 x i16>*
  %21924 = load <16 x i16>, <16 x i16>* %21923, align 2, !tbaa !399
  %21925 = getelementptr inbounds i16, i16* %21922, i64 16
  %21926 = bitcast i16* %21925 to <16 x i16>*
  %21927 = load <16 x i16>, <16 x i16>* %21926, align 2, !tbaa !399
  %21928 = shufflevector <16 x i16> %21924, <16 x i16> %21927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21929 = add nsw i64 %21744, %21912
  %21930 = getelementptr inbounds i16, i16* %blur_x879, i64 %21929
  %21931 = bitcast i16* %21930 to <16 x i16>*
  %21932 = load <16 x i16>, <16 x i16>* %21931, align 2, !tbaa !399
  %21933 = getelementptr inbounds i16, i16* %21930, i64 16
  %21934 = bitcast i16* %21933 to <16 x i16>*
  %21935 = load <16 x i16>, <16 x i16>* %21934, align 2, !tbaa !399
  %21936 = shufflevector <16 x i16> %21932, <16 x i16> %21935, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21937 = add nsw i64 %21747, %21912
  %21938 = getelementptr inbounds i16, i16* %blur_x879, i64 %21937
  %21939 = bitcast i16* %21938 to <16 x i16>*
  %21940 = load <16 x i16>, <16 x i16>* %21939, align 2, !tbaa !399
  %21941 = getelementptr inbounds i16, i16* %21938, i64 16
  %21942 = bitcast i16* %21941 to <16 x i16>*
  %21943 = load <16 x i16>, <16 x i16>* %21942, align 2, !tbaa !399
  %21944 = shufflevector <16 x i16> %21940, <16 x i16> %21943, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21945 = add nsw i64 %21750, %21912
  %21946 = getelementptr inbounds i16, i16* %blur_x879, i64 %21945
  %21947 = bitcast i16* %21946 to <16 x i16>*
  %21948 = load <16 x i16>, <16 x i16>* %21947, align 2, !tbaa !399
  %21949 = getelementptr inbounds i16, i16* %21946, i64 16
  %21950 = bitcast i16* %21949 to <16 x i16>*
  %21951 = load <16 x i16>, <16 x i16>* %21950, align 2, !tbaa !399
  %21952 = shufflevector <16 x i16> %21948, <16 x i16> %21951, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21953 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21928, <32 x i16> %21936, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21954 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21952, <32 x i16> %21944, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21955 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21953, <32 x i16> %21954, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21956 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %21955, <32 x i16> %21920, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %21957 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %21956, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %21958 = shufflevector <32 x i16> %21957, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21959 = add nsw i64 %21754, %21912
  %21960 = getelementptr inbounds i16, i16* %263, i64 %21959
  %21961 = bitcast i16* %21960 to <16 x i16>*
  store <16 x i16> %21958, <16 x i16>* %21961, align 2, !tbaa !401
  %21962 = shufflevector <32 x i16> %21957, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21963 = getelementptr inbounds i16, i16* %21960, i64 16
  %21964 = bitcast i16* %21963 to <16 x i16>*
  store <16 x i16> %21962, <16 x i16>* %21964, align 2, !tbaa !401
  %21965 = add nuw nsw i32 %blur_y.s0.x.x.rebased1634, 1
  %.not2606 = icmp eq i32 %21965, %t1683898
  br i1 %.not2606, label %"end for blur_y.s0.x.x.rebased1633", label %"for blur_y.s0.x.x.rebased1632"

after_bb1644:                                     ; preds = %"end for blur_y.s0.x.x.rebased1633", %"produce blur_x1647"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1659.preheader", label %"end for blur_y.s0.x.x.rebased1660", !prof !386

"for blur_y.s0.x.x.rebased1659.preheader":        ; preds = %after_bb1644
  %21966 = sext i32 %t1700974 to i64
  %21967 = zext i32 %.pre-phi3570 to i64
  %21968 = mul nsw i64 %21967, %337
  %21969 = sub nsw i64 %21968, %298
  %21970 = zext i32 %.pre-phi3604 to i64
  %21971 = mul nsw i64 %21970, %337
  %21972 = sub nsw i64 %21971, %298
  %21973 = zext i32 %.pre-phi3574 to i64
  %21974 = mul nsw i64 %21973, %337
  %21975 = sub nsw i64 %21974, %298
  %21976 = zext i32 %.pre-phi3582 to i64
  %21977 = mul nsw i64 %21976, %337
  %21978 = sub nsw i64 %21977, %298
  %21979 = zext i32 %.pre-phi3578 to i64
  %21980 = mul nsw i64 %21979, %337
  %21981 = sub nsw i64 %21980, %298
  %21982 = sext i32 %a379 to i64
  %21983 = add nsw i64 %21982, 15
  %21984 = mul nsw i64 %21983, %334
  %21985 = add nsw i64 %21984, %338
  br label %"for blur_y.s0.x.x.rebased1659"

"produce blur_x1647":                             ; preds = %"end for blur_y.s0.x.x.rebased1633"
  %21986 = getelementptr inbounds i16, i16* %read_input822, i64 %425
  %21987 = getelementptr inbounds i16, i16* %21986, i64 -31
  %21988 = bitcast i16* %21987 to <16 x i16>*
  %21989 = load <16 x i16>, <16 x i16>* %21988, align 2, !tbaa !396
  %21990 = getelementptr inbounds i16, i16* %21986, i64 -15
  %21991 = bitcast i16* %21990 to <16 x i16>*
  %21992 = load <16 x i16>, <16 x i16>* %21991, align 2, !tbaa !396
  %21993 = shufflevector <16 x i16> %21989, <16 x i16> %21992, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21994 = getelementptr inbounds i16, i16* %21986, i64 -32
  %21995 = bitcast i16* %21994 to <16 x i16>*
  %21996 = load <16 x i16>, <16 x i16>* %21995, align 2, !tbaa !396
  %21997 = getelementptr inbounds i16, i16* %21986, i64 -16
  %21998 = bitcast i16* %21997 to <16 x i16>*
  %21999 = load <16 x i16>, <16 x i16>* %21998, align 2, !tbaa !396
  %22000 = shufflevector <16 x i16> %21996, <16 x i16> %21999, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22001 = getelementptr inbounds i16, i16* %21986, i64 -30
  %22002 = bitcast i16* %22001 to <16 x i16>*
  %22003 = load <16 x i16>, <16 x i16>* %22002, align 2, !tbaa !396
  %22004 = getelementptr inbounds i16, i16* %21986, i64 -14
  %22005 = bitcast i16* %22004 to <16 x i16>*
  %22006 = load <16 x i16>, <16 x i16>* %22005, align 2, !tbaa !396
  %22007 = shufflevector <16 x i16> %22003, <16 x i16> %22006, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22008 = getelementptr inbounds i16, i16* %21986, i64 -28
  %22009 = bitcast i16* %22008 to <16 x i16>*
  %22010 = load <16 x i16>, <16 x i16>* %22009, align 2, !tbaa !396
  %22011 = getelementptr inbounds i16, i16* %21986, i64 -12
  %22012 = bitcast i16* %22011 to <16 x i16>*
  %22013 = load <16 x i16>, <16 x i16>* %22012, align 2, !tbaa !396
  %22014 = shufflevector <16 x i16> %22010, <16 x i16> %22013, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22015 = getelementptr inbounds i16, i16* %21986, i64 -29
  %22016 = bitcast i16* %22015 to <16 x i16>*
  %22017 = load <16 x i16>, <16 x i16>* %22016, align 2, !tbaa !396
  %22018 = getelementptr inbounds i16, i16* %21986, i64 -13
  %22019 = bitcast i16* %22018 to <16 x i16>*
  %22020 = load <16 x i16>, <16 x i16>* %22019, align 2, !tbaa !396
  %22021 = shufflevector <16 x i16> %22017, <16 x i16> %22020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22022 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22000, <32 x i16> %22007, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22023 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22021, <32 x i16> %22014, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22024 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22022, <32 x i16> %22023, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22025 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22024, <32 x i16> %21993, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22026 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22025, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22027 = shufflevector <32 x i16> %22026, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22028 = zext i32 %.pre-phi3582 to i64
  %22029 = mul nsw i64 %299, %22028
  %22030 = add nsw i64 %301, %22029
  %22031 = getelementptr inbounds i16, i16* %blur_x879, i64 %22030
  %22032 = getelementptr inbounds i16, i16* %22031, i64 -32
  %22033 = bitcast i16* %22032 to <16 x i16>*
  store <16 x i16> %22027, <16 x i16>* %22033, align 2, !tbaa !399
  %22034 = shufflevector <32 x i16> %22026, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22035 = getelementptr inbounds i16, i16* %22031, i64 -16
  %22036 = bitcast i16* %22035 to <16 x i16>*
  store <16 x i16> %22034, <16 x i16>* %22036, align 2, !tbaa !399
  %22037 = zext i32 %.pre-phi3570 to i64
  %22038 = mul nsw i64 %22037, %333
  %22039 = add nsw i64 %22038, %296
  %22040 = getelementptr inbounds i16, i16* %blur_x879, i64 %22039
  %22041 = getelementptr inbounds i16, i16* %22040, i64 -32
  %22042 = bitcast i16* %22041 to <16 x i16>*
  %22043 = load <16 x i16>, <16 x i16>* %22042, align 2, !tbaa !399
  %22044 = getelementptr inbounds i16, i16* %22040, i64 -16
  %22045 = bitcast i16* %22044 to <16 x i16>*
  %22046 = load <16 x i16>, <16 x i16>* %22045, align 2, !tbaa !399
  %22047 = shufflevector <16 x i16> %22043, <16 x i16> %22046, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22048 = zext i32 %.pre-phi3604 to i64
  %22049 = mul nsw i64 %22048, %333
  %22050 = add nsw i64 %22049, %296
  %22051 = getelementptr inbounds i16, i16* %blur_x879, i64 %22050
  %22052 = getelementptr inbounds i16, i16* %22051, i64 -32
  %22053 = bitcast i16* %22052 to <16 x i16>*
  %22054 = load <16 x i16>, <16 x i16>* %22053, align 2, !tbaa !399
  %22055 = getelementptr inbounds i16, i16* %22051, i64 -16
  %22056 = bitcast i16* %22055 to <16 x i16>*
  %22057 = load <16 x i16>, <16 x i16>* %22056, align 2, !tbaa !399
  %22058 = shufflevector <16 x i16> %22054, <16 x i16> %22057, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22059 = zext i32 %.pre-phi3574 to i64
  %22060 = mul nsw i64 %22059, %333
  %22061 = add nsw i64 %22060, %296
  %22062 = getelementptr inbounds i16, i16* %blur_x879, i64 %22061
  %22063 = getelementptr inbounds i16, i16* %22062, i64 -32
  %22064 = bitcast i16* %22063 to <16 x i16>*
  %22065 = load <16 x i16>, <16 x i16>* %22064, align 2, !tbaa !399
  %22066 = getelementptr inbounds i16, i16* %22062, i64 -16
  %22067 = bitcast i16* %22066 to <16 x i16>*
  %22068 = load <16 x i16>, <16 x i16>* %22067, align 2, !tbaa !399
  %22069 = shufflevector <16 x i16> %22065, <16 x i16> %22068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22070 = mul nsw i64 %22028, %333
  %22071 = add nsw i64 %22070, %296
  %22072 = getelementptr inbounds i16, i16* %blur_x879, i64 %22071
  %22073 = getelementptr inbounds i16, i16* %22072, i64 -32
  %22074 = bitcast i16* %22073 to <16 x i16>*
  %22075 = load <16 x i16>, <16 x i16>* %22074, align 2, !tbaa !399
  %22076 = getelementptr inbounds i16, i16* %22072, i64 -16
  %22077 = bitcast i16* %22076 to <16 x i16>*
  %22078 = load <16 x i16>, <16 x i16>* %22077, align 2, !tbaa !399
  %22079 = shufflevector <16 x i16> %22075, <16 x i16> %22078, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22080 = zext i32 %.pre-phi3578 to i64
  %22081 = mul nsw i64 %22080, %333
  %22082 = add nsw i64 %22081, %296
  %22083 = getelementptr inbounds i16, i16* %blur_x879, i64 %22082
  %22084 = getelementptr inbounds i16, i16* %22083, i64 -32
  %22085 = bitcast i16* %22084 to <16 x i16>*
  %22086 = load <16 x i16>, <16 x i16>* %22085, align 2, !tbaa !399
  %22087 = getelementptr inbounds i16, i16* %22083, i64 -16
  %22088 = bitcast i16* %22087 to <16 x i16>*
  %22089 = load <16 x i16>, <16 x i16>* %22088, align 2, !tbaa !399
  %22090 = shufflevector <16 x i16> %22086, <16 x i16> %22089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22091 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22058, <32 x i16> %22069, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22092 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22090, <32 x i16> %22079, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22093 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22091, <32 x i16> %22092, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22094 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22093, <32 x i16> %22047, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22095 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22094, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22096 = shufflevector <32 x i16> %22095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22097 = sext i32 %a379 to i64
  %22098 = add nsw i64 %22097, 15
  %22099 = mul nsw i64 %22098, %334
  %22100 = add nsw i64 %336, %22099
  %22101 = getelementptr inbounds i16, i16* %263, i64 %22100
  %22102 = getelementptr inbounds i16, i16* %22101, i64 -32
  %22103 = bitcast i16* %22102 to <16 x i16>*
  store <16 x i16> %22096, <16 x i16>* %22103, align 2, !tbaa !401
  %22104 = shufflevector <32 x i16> %22095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22105 = getelementptr inbounds i16, i16* %22101, i64 -16
  %22106 = bitcast i16* %22105 to <16 x i16>*
  store <16 x i16> %22104, <16 x i16>* %22106, align 2, !tbaa !401
  br label %after_bb1644

"for blur_y.s0.x.x.rebased1659":                  ; preds = %"for blur_y.s0.x.x.rebased1659.preheader", %"consume blur_x1667"
  %indvars.iv3422 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1659.preheader" ], [ %indvars.iv.next3423, %"consume blur_x1667" ]
  %22107 = add nsw i64 %indvars.iv3422, %303
  %22108 = icmp slt i64 %22107, 1
  %22109 = trunc i64 %22107 to i32
  %22110 = shl nsw i32 %22109, 5
  %22111 = icmp sgt i32 %198, %22110
  %22112 = or i1 %22108, %22111
  br i1 %22112, label %"produce blur_x1665", label %"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge"

"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1659"
  %.pre3629 = shl nsw i64 %22107, 5
  br label %"consume blur_x1667"

"end for blur_y.s0.x.x.rebased1660":              ; preds = %"consume blur_x1667", %after_bb1644
  br i1 %304, label %"for blur_y.s0.x.x.rebased1675.preheader", label %"end for blur_y.s0.x.x.rebased1676", !prof !386

"for blur_y.s0.x.x.rebased1675.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1660"
  %22113 = sext i32 %t1700974 to i64
  %22114 = zext i32 %.pre-phi3570 to i64
  %22115 = mul nsw i64 %22114, %337
  %22116 = sub nsw i64 %22115, %298
  %22117 = zext i32 %.pre-phi3604 to i64
  %22118 = mul nsw i64 %22117, %337
  %22119 = sub nsw i64 %22118, %298
  %22120 = zext i32 %.pre-phi3574 to i64
  %22121 = mul nsw i64 %22120, %337
  %22122 = sub nsw i64 %22121, %298
  %22123 = zext i32 %.pre-phi3582 to i64
  %22124 = mul nsw i64 %22123, %337
  %22125 = sub nsw i64 %22124, %298
  %22126 = zext i32 %.pre-phi3578 to i64
  %22127 = mul nsw i64 %22126, %337
  %22128 = sub nsw i64 %22127, %298
  %22129 = sext i32 %a379 to i64
  %22130 = add nsw i64 %22129, 15
  %22131 = mul nsw i64 %22130, %334
  %22132 = add nsw i64 %22131, %338
  br label %"for blur_y.s0.x.x.rebased1675"

"produce blur_x1665":                             ; preds = %"for blur_y.s0.x.x.rebased1659"
  %t9521666 = add nsw i32 %427, %22110
  %22133 = sext i32 %t9521666 to i64
  %22134 = getelementptr inbounds i16, i16* %read_input822, i64 %22133
  %22135 = getelementptr inbounds i16, i16* %22134, i64 1
  %22136 = bitcast i16* %22135 to <16 x i16>*
  %22137 = load <16 x i16>, <16 x i16>* %22136, align 2, !tbaa !396
  %22138 = getelementptr inbounds i16, i16* %22134, i64 17
  %22139 = bitcast i16* %22138 to <16 x i16>*
  %22140 = load <16 x i16>, <16 x i16>* %22139, align 2, !tbaa !396
  %22141 = shufflevector <16 x i16> %22137, <16 x i16> %22140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22142 = bitcast i16* %22134 to <16 x i16>*
  %22143 = load <16 x i16>, <16 x i16>* %22142, align 2, !tbaa !396
  %22144 = getelementptr inbounds i16, i16* %22134, i64 16
  %22145 = bitcast i16* %22144 to <16 x i16>*
  %22146 = load <16 x i16>, <16 x i16>* %22145, align 2, !tbaa !396
  %22147 = shufflevector <16 x i16> %22143, <16 x i16> %22146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22148 = getelementptr inbounds i16, i16* %22134, i64 2
  %22149 = bitcast i16* %22148 to <16 x i16>*
  %22150 = load <16 x i16>, <16 x i16>* %22149, align 2, !tbaa !396
  %22151 = getelementptr inbounds i16, i16* %22134, i64 18
  %22152 = bitcast i16* %22151 to <16 x i16>*
  %22153 = load <16 x i16>, <16 x i16>* %22152, align 2, !tbaa !396
  %22154 = shufflevector <16 x i16> %22150, <16 x i16> %22153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22155 = getelementptr inbounds i16, i16* %22134, i64 4
  %22156 = bitcast i16* %22155 to <16 x i16>*
  %22157 = load <16 x i16>, <16 x i16>* %22156, align 2, !tbaa !396
  %22158 = getelementptr inbounds i16, i16* %22134, i64 20
  %22159 = bitcast i16* %22158 to <16 x i16>*
  %22160 = load <16 x i16>, <16 x i16>* %22159, align 2, !tbaa !396
  %22161 = shufflevector <16 x i16> %22157, <16 x i16> %22160, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22162 = getelementptr inbounds i16, i16* %22134, i64 3
  %22163 = bitcast i16* %22162 to <16 x i16>*
  %22164 = load <16 x i16>, <16 x i16>* %22163, align 2, !tbaa !396
  %22165 = getelementptr inbounds i16, i16* %22134, i64 19
  %22166 = bitcast i16* %22165 to <16 x i16>*
  %22167 = load <16 x i16>, <16 x i16>* %22166, align 2, !tbaa !396
  %22168 = shufflevector <16 x i16> %22164, <16 x i16> %22167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22169 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22147, <32 x i16> %22154, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22170 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22168, <32 x i16> %22161, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22171 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22169, <32 x i16> %22170, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22172 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22171, <32 x i16> %22141, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22173 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22172, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22174 = shufflevector <32 x i16> %22173, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22175 = shl nsw i64 %22107, 5
  %22176 = add nsw i64 %22175, %21966
  %22177 = getelementptr inbounds i16, i16* %blur_x879, i64 %22176
  %22178 = bitcast i16* %22177 to <16 x i16>*
  store <16 x i16> %22174, <16 x i16>* %22178, align 2, !tbaa !399
  %22179 = shufflevector <32 x i16> %22173, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22180 = getelementptr inbounds i16, i16* %22177, i64 16
  %22181 = bitcast i16* %22180 to <16 x i16>*
  store <16 x i16> %22179, <16 x i16>* %22181, align 2, !tbaa !399
  br label %"consume blur_x1667"

"consume blur_x1667":                             ; preds = %"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge", %"produce blur_x1665"
  %.pre-phi3630 = phi i64 [ %.pre3629, %"for blur_y.s0.x.x.rebased1659.consume blur_x1667_crit_edge" ], [ %22175, %"produce blur_x1665" ]
  %22182 = add nsw i64 %21969, %.pre-phi3630
  %22183 = getelementptr inbounds i16, i16* %blur_x879, i64 %22182
  %22184 = bitcast i16* %22183 to <16 x i16>*
  %22185 = load <16 x i16>, <16 x i16>* %22184, align 2, !tbaa !399
  %22186 = getelementptr inbounds i16, i16* %22183, i64 16
  %22187 = bitcast i16* %22186 to <16 x i16>*
  %22188 = load <16 x i16>, <16 x i16>* %22187, align 2, !tbaa !399
  %22189 = shufflevector <16 x i16> %22185, <16 x i16> %22188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22190 = add nsw i64 %21972, %.pre-phi3630
  %22191 = getelementptr inbounds i16, i16* %blur_x879, i64 %22190
  %22192 = bitcast i16* %22191 to <16 x i16>*
  %22193 = load <16 x i16>, <16 x i16>* %22192, align 2, !tbaa !399
  %22194 = getelementptr inbounds i16, i16* %22191, i64 16
  %22195 = bitcast i16* %22194 to <16 x i16>*
  %22196 = load <16 x i16>, <16 x i16>* %22195, align 2, !tbaa !399
  %22197 = shufflevector <16 x i16> %22193, <16 x i16> %22196, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22198 = add nsw i64 %21975, %.pre-phi3630
  %22199 = getelementptr inbounds i16, i16* %blur_x879, i64 %22198
  %22200 = bitcast i16* %22199 to <16 x i16>*
  %22201 = load <16 x i16>, <16 x i16>* %22200, align 2, !tbaa !399
  %22202 = getelementptr inbounds i16, i16* %22199, i64 16
  %22203 = bitcast i16* %22202 to <16 x i16>*
  %22204 = load <16 x i16>, <16 x i16>* %22203, align 2, !tbaa !399
  %22205 = shufflevector <16 x i16> %22201, <16 x i16> %22204, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22206 = add nsw i64 %21978, %.pre-phi3630
  %22207 = getelementptr inbounds i16, i16* %blur_x879, i64 %22206
  %22208 = bitcast i16* %22207 to <16 x i16>*
  %22209 = load <16 x i16>, <16 x i16>* %22208, align 2, !tbaa !399
  %22210 = getelementptr inbounds i16, i16* %22207, i64 16
  %22211 = bitcast i16* %22210 to <16 x i16>*
  %22212 = load <16 x i16>, <16 x i16>* %22211, align 2, !tbaa !399
  %22213 = shufflevector <16 x i16> %22209, <16 x i16> %22212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22214 = add nsw i64 %21981, %.pre-phi3630
  %22215 = getelementptr inbounds i16, i16* %blur_x879, i64 %22214
  %22216 = bitcast i16* %22215 to <16 x i16>*
  %22217 = load <16 x i16>, <16 x i16>* %22216, align 2, !tbaa !399
  %22218 = getelementptr inbounds i16, i16* %22215, i64 16
  %22219 = bitcast i16* %22218 to <16 x i16>*
  %22220 = load <16 x i16>, <16 x i16>* %22219, align 2, !tbaa !399
  %22221 = shufflevector <16 x i16> %22217, <16 x i16> %22220, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22222 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22197, <32 x i16> %22205, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22223 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22221, <32 x i16> %22213, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22224 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22222, <32 x i16> %22223, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22225 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22224, <32 x i16> %22189, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22226 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22225, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22227 = shufflevector <32 x i16> %22226, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22228 = add nsw i64 %21985, %.pre-phi3630
  %22229 = getelementptr inbounds i16, i16* %263, i64 %22228
  %22230 = bitcast i16* %22229 to <16 x i16>*
  store <16 x i16> %22227, <16 x i16>* %22230, align 2, !tbaa !401
  %22231 = shufflevector <32 x i16> %22226, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22232 = getelementptr inbounds i16, i16* %22229, i64 16
  %22233 = bitcast i16* %22232 to <16 x i16>*
  store <16 x i16> %22231, <16 x i16>* %22233, align 2, !tbaa !401
  %indvars.iv.next3423 = add nuw nsw i64 %indvars.iv3422, 1
  %22234 = icmp eq i64 %indvars.iv.next3423, %zext3424
  br i1 %22234, label %"end for blur_y.s0.x.x.rebased1660", label %"for blur_y.s0.x.x.rebased1659"

"for blur_y.s0.x.x.rebased1675":                  ; preds = %"for blur_y.s0.x.x.rebased1675.preheader", %"consume blur_x1686"
  %blur_y.s0.x.x.rebased1677 = phi i32 [ %22343, %"consume blur_x1686" ], [ 0, %"for blur_y.s0.x.x.rebased1675.preheader" ]
  %22235 = add nsw i32 %blur_y.s0.x.x.rebased1677, %t1626814
  %a3664 = shl nsw i32 %22235, 5
  %22236 = icmp sgt i32 %t1647, %a3664
  %blur_y.s0.x.v0.base.s1678 = select i1 %22236, i32 %a3664, i32 %t1647
  %22237 = icmp slt i32 %22235, 1
  %22238 = icmp sgt i32 %198, %a3664
  %22239 = or i1 %22237, %22238
  br i1 %22239, label %"produce blur_x1683", label %"consume blur_x1686"

"end for blur_y.s0.x.x.rebased1676":              ; preds = %"consume blur_x1686", %"end for blur_y.s0.x.x.rebased1660"
  br i1 %229, label %"produce blur_x1690", label %after_bb1687

"produce blur_x1683":                             ; preds = %"for blur_y.s0.x.x.rebased1675"
  %22240 = icmp slt i32 %blur_y.s0.x.v0.base.s1678, %198
  %blur_x.s0.x.v1.base.s1684 = select i1 %22240, i32 %blur_y.s0.x.v0.base.s1678, i32 %198
  %t9571685 = add nsw i32 %427, %blur_x.s0.x.v1.base.s1684
  %22241 = sext i32 %t9571685 to i64
  %22242 = getelementptr inbounds i16, i16* %read_input822, i64 %22241
  %22243 = getelementptr inbounds i16, i16* %22242, i64 1
  %22244 = bitcast i16* %22243 to <16 x i16>*
  %22245 = load <16 x i16>, <16 x i16>* %22244, align 2, !tbaa !396
  %22246 = getelementptr inbounds i16, i16* %22242, i64 17
  %22247 = bitcast i16* %22246 to <16 x i16>*
  %22248 = load <16 x i16>, <16 x i16>* %22247, align 2, !tbaa !396
  %22249 = shufflevector <16 x i16> %22245, <16 x i16> %22248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22250 = bitcast i16* %22242 to <16 x i16>*
  %22251 = load <16 x i16>, <16 x i16>* %22250, align 2, !tbaa !396
  %22252 = getelementptr inbounds i16, i16* %22242, i64 16
  %22253 = bitcast i16* %22252 to <16 x i16>*
  %22254 = load <16 x i16>, <16 x i16>* %22253, align 2, !tbaa !396
  %22255 = shufflevector <16 x i16> %22251, <16 x i16> %22254, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22256 = getelementptr inbounds i16, i16* %22242, i64 2
  %22257 = bitcast i16* %22256 to <16 x i16>*
  %22258 = load <16 x i16>, <16 x i16>* %22257, align 2, !tbaa !396
  %22259 = getelementptr inbounds i16, i16* %22242, i64 18
  %22260 = bitcast i16* %22259 to <16 x i16>*
  %22261 = load <16 x i16>, <16 x i16>* %22260, align 2, !tbaa !396
  %22262 = shufflevector <16 x i16> %22258, <16 x i16> %22261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22263 = getelementptr inbounds i16, i16* %22242, i64 4
  %22264 = bitcast i16* %22263 to <16 x i16>*
  %22265 = load <16 x i16>, <16 x i16>* %22264, align 2, !tbaa !396
  %22266 = getelementptr inbounds i16, i16* %22242, i64 20
  %22267 = bitcast i16* %22266 to <16 x i16>*
  %22268 = load <16 x i16>, <16 x i16>* %22267, align 2, !tbaa !396
  %22269 = shufflevector <16 x i16> %22265, <16 x i16> %22268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22270 = getelementptr inbounds i16, i16* %22242, i64 3
  %22271 = bitcast i16* %22270 to <16 x i16>*
  %22272 = load <16 x i16>, <16 x i16>* %22271, align 2, !tbaa !396
  %22273 = getelementptr inbounds i16, i16* %22242, i64 19
  %22274 = bitcast i16* %22273 to <16 x i16>*
  %22275 = load <16 x i16>, <16 x i16>* %22274, align 2, !tbaa !396
  %22276 = shufflevector <16 x i16> %22272, <16 x i16> %22275, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22277 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22255, <32 x i16> %22262, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22278 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22276, <32 x i16> %22269, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22279 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22277, <32 x i16> %22278, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22280 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22279, <32 x i16> %22249, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22281 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22280, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22282 = shufflevector <32 x i16> %22281, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22283 = sext i32 %blur_x.s0.x.v1.base.s1684 to i64
  %22284 = add nsw i64 %22283, %22113
  %22285 = getelementptr inbounds i16, i16* %blur_x879, i64 %22284
  %22286 = bitcast i16* %22285 to <16 x i16>*
  store <16 x i16> %22282, <16 x i16>* %22286, align 2, !tbaa !399
  %22287 = shufflevector <32 x i16> %22281, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22288 = getelementptr inbounds i16, i16* %22285, i64 16
  %22289 = bitcast i16* %22288 to <16 x i16>*
  store <16 x i16> %22287, <16 x i16>* %22289, align 2, !tbaa !399
  br label %"consume blur_x1686"

"consume blur_x1686":                             ; preds = %"for blur_y.s0.x.x.rebased1675", %"produce blur_x1683"
  %22290 = sext i32 %blur_y.s0.x.v0.base.s1678 to i64
  %22291 = add nsw i64 %22116, %22290
  %22292 = getelementptr inbounds i16, i16* %blur_x879, i64 %22291
  %22293 = bitcast i16* %22292 to <16 x i16>*
  %22294 = load <16 x i16>, <16 x i16>* %22293, align 2, !tbaa !399
  %22295 = getelementptr inbounds i16, i16* %22292, i64 16
  %22296 = bitcast i16* %22295 to <16 x i16>*
  %22297 = load <16 x i16>, <16 x i16>* %22296, align 2, !tbaa !399
  %22298 = shufflevector <16 x i16> %22294, <16 x i16> %22297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22299 = add nsw i64 %22119, %22290
  %22300 = getelementptr inbounds i16, i16* %blur_x879, i64 %22299
  %22301 = bitcast i16* %22300 to <16 x i16>*
  %22302 = load <16 x i16>, <16 x i16>* %22301, align 2, !tbaa !399
  %22303 = getelementptr inbounds i16, i16* %22300, i64 16
  %22304 = bitcast i16* %22303 to <16 x i16>*
  %22305 = load <16 x i16>, <16 x i16>* %22304, align 2, !tbaa !399
  %22306 = shufflevector <16 x i16> %22302, <16 x i16> %22305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22307 = add nsw i64 %22122, %22290
  %22308 = getelementptr inbounds i16, i16* %blur_x879, i64 %22307
  %22309 = bitcast i16* %22308 to <16 x i16>*
  %22310 = load <16 x i16>, <16 x i16>* %22309, align 2, !tbaa !399
  %22311 = getelementptr inbounds i16, i16* %22308, i64 16
  %22312 = bitcast i16* %22311 to <16 x i16>*
  %22313 = load <16 x i16>, <16 x i16>* %22312, align 2, !tbaa !399
  %22314 = shufflevector <16 x i16> %22310, <16 x i16> %22313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22315 = add nsw i64 %22125, %22290
  %22316 = getelementptr inbounds i16, i16* %blur_x879, i64 %22315
  %22317 = bitcast i16* %22316 to <16 x i16>*
  %22318 = load <16 x i16>, <16 x i16>* %22317, align 2, !tbaa !399
  %22319 = getelementptr inbounds i16, i16* %22316, i64 16
  %22320 = bitcast i16* %22319 to <16 x i16>*
  %22321 = load <16 x i16>, <16 x i16>* %22320, align 2, !tbaa !399
  %22322 = shufflevector <16 x i16> %22318, <16 x i16> %22321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22323 = add nsw i64 %22128, %22290
  %22324 = getelementptr inbounds i16, i16* %blur_x879, i64 %22323
  %22325 = bitcast i16* %22324 to <16 x i16>*
  %22326 = load <16 x i16>, <16 x i16>* %22325, align 2, !tbaa !399
  %22327 = getelementptr inbounds i16, i16* %22324, i64 16
  %22328 = bitcast i16* %22327 to <16 x i16>*
  %22329 = load <16 x i16>, <16 x i16>* %22328, align 2, !tbaa !399
  %22330 = shufflevector <16 x i16> %22326, <16 x i16> %22329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22331 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22306, <32 x i16> %22314, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22332 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22330, <32 x i16> %22322, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22333 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22331, <32 x i16> %22332, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22334 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22333, <32 x i16> %22298, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22335 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22334, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22336 = shufflevector <32 x i16> %22335, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22337 = add nsw i64 %22132, %22290
  %22338 = getelementptr inbounds i16, i16* %263, i64 %22337
  %22339 = bitcast i16* %22338 to <16 x i16>*
  store <16 x i16> %22336, <16 x i16>* %22339, align 2, !tbaa !401
  %22340 = shufflevector <32 x i16> %22335, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22341 = getelementptr inbounds i16, i16* %22338, i64 16
  %22342 = bitcast i16* %22341 to <16 x i16>*
  store <16 x i16> %22340, <16 x i16>* %22342, align 2, !tbaa !401
  %22343 = add nuw nsw i32 %blur_y.s0.x.x.rebased1677, 1
  %.not2602 = icmp eq i32 %22343, %t1683898
  br i1 %.not2602, label %"end for blur_y.s0.x.x.rebased1676", label %"for blur_y.s0.x.x.rebased1675"

after_bb1687:                                     ; preds = %"end for blur_y.s0.x.x.rebased1676", %"produce blur_x1690"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1702.preheader", label %"end for blur_y.s0.x.x.rebased1703", !prof !386

"for blur_y.s0.x.x.rebased1702.preheader":        ; preds = %after_bb1687
  %22344 = sext i32 %t17061010 to i64
  %22345 = zext i32 %.pre-phi3574 to i64
  %22346 = mul nsw i64 %22345, %337
  %22347 = sub nsw i64 %22346, %298
  %22348 = zext i32 %.pre-phi3570 to i64
  %22349 = mul nsw i64 %22348, %337
  %22350 = sub nsw i64 %22349, %298
  %22351 = zext i32 %.pre-phi3578 to i64
  %22352 = mul nsw i64 %22351, %337
  %22353 = sub nsw i64 %22352, %298
  %22354 = zext i32 %.pre-phi3586 to i64
  %22355 = mul nsw i64 %22354, %337
  %22356 = sub nsw i64 %22355, %298
  %22357 = zext i32 %.pre-phi3582 to i64
  %22358 = mul nsw i64 %22357, %337
  %22359 = sub nsw i64 %22358, %298
  %22360 = sext i32 %a379 to i64
  %22361 = add nsw i64 %22360, 16
  %22362 = mul nsw i64 %22361, %334
  %22363 = add nsw i64 %22362, %338
  br label %"for blur_y.s0.x.x.rebased1702"

"produce blur_x1690":                             ; preds = %"end for blur_y.s0.x.x.rebased1676"
  %22364 = getelementptr inbounds i16, i16* %read_input822, i64 %431
  %22365 = getelementptr inbounds i16, i16* %22364, i64 -31
  %22366 = bitcast i16* %22365 to <16 x i16>*
  %22367 = load <16 x i16>, <16 x i16>* %22366, align 2, !tbaa !396
  %22368 = getelementptr inbounds i16, i16* %22364, i64 -15
  %22369 = bitcast i16* %22368 to <16 x i16>*
  %22370 = load <16 x i16>, <16 x i16>* %22369, align 2, !tbaa !396
  %22371 = shufflevector <16 x i16> %22367, <16 x i16> %22370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22372 = getelementptr inbounds i16, i16* %22364, i64 -32
  %22373 = bitcast i16* %22372 to <16 x i16>*
  %22374 = load <16 x i16>, <16 x i16>* %22373, align 2, !tbaa !396
  %22375 = getelementptr inbounds i16, i16* %22364, i64 -16
  %22376 = bitcast i16* %22375 to <16 x i16>*
  %22377 = load <16 x i16>, <16 x i16>* %22376, align 2, !tbaa !396
  %22378 = shufflevector <16 x i16> %22374, <16 x i16> %22377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22379 = getelementptr inbounds i16, i16* %22364, i64 -30
  %22380 = bitcast i16* %22379 to <16 x i16>*
  %22381 = load <16 x i16>, <16 x i16>* %22380, align 2, !tbaa !396
  %22382 = getelementptr inbounds i16, i16* %22364, i64 -14
  %22383 = bitcast i16* %22382 to <16 x i16>*
  %22384 = load <16 x i16>, <16 x i16>* %22383, align 2, !tbaa !396
  %22385 = shufflevector <16 x i16> %22381, <16 x i16> %22384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22386 = getelementptr inbounds i16, i16* %22364, i64 -28
  %22387 = bitcast i16* %22386 to <16 x i16>*
  %22388 = load <16 x i16>, <16 x i16>* %22387, align 2, !tbaa !396
  %22389 = getelementptr inbounds i16, i16* %22364, i64 -12
  %22390 = bitcast i16* %22389 to <16 x i16>*
  %22391 = load <16 x i16>, <16 x i16>* %22390, align 2, !tbaa !396
  %22392 = shufflevector <16 x i16> %22388, <16 x i16> %22391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22393 = getelementptr inbounds i16, i16* %22364, i64 -29
  %22394 = bitcast i16* %22393 to <16 x i16>*
  %22395 = load <16 x i16>, <16 x i16>* %22394, align 2, !tbaa !396
  %22396 = getelementptr inbounds i16, i16* %22364, i64 -13
  %22397 = bitcast i16* %22396 to <16 x i16>*
  %22398 = load <16 x i16>, <16 x i16>* %22397, align 2, !tbaa !396
  %22399 = shufflevector <16 x i16> %22395, <16 x i16> %22398, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22400 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22378, <32 x i16> %22385, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22401 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22399, <32 x i16> %22392, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22402 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22400, <32 x i16> %22401, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22403 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22402, <32 x i16> %22371, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22404 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22403, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22405 = shufflevector <32 x i16> %22404, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22406 = zext i32 %.pre-phi3586 to i64
  %22407 = mul nsw i64 %299, %22406
  %22408 = add nsw i64 %301, %22407
  %22409 = getelementptr inbounds i16, i16* %blur_x879, i64 %22408
  %22410 = getelementptr inbounds i16, i16* %22409, i64 -32
  %22411 = bitcast i16* %22410 to <16 x i16>*
  store <16 x i16> %22405, <16 x i16>* %22411, align 2, !tbaa !399
  %22412 = shufflevector <32 x i16> %22404, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22413 = getelementptr inbounds i16, i16* %22409, i64 -16
  %22414 = bitcast i16* %22413 to <16 x i16>*
  store <16 x i16> %22412, <16 x i16>* %22414, align 2, !tbaa !399
  %22415 = zext i32 %.pre-phi3574 to i64
  %22416 = mul nsw i64 %22415, %333
  %22417 = add nsw i64 %22416, %296
  %22418 = getelementptr inbounds i16, i16* %blur_x879, i64 %22417
  %22419 = getelementptr inbounds i16, i16* %22418, i64 -32
  %22420 = bitcast i16* %22419 to <16 x i16>*
  %22421 = load <16 x i16>, <16 x i16>* %22420, align 2, !tbaa !399
  %22422 = getelementptr inbounds i16, i16* %22418, i64 -16
  %22423 = bitcast i16* %22422 to <16 x i16>*
  %22424 = load <16 x i16>, <16 x i16>* %22423, align 2, !tbaa !399
  %22425 = shufflevector <16 x i16> %22421, <16 x i16> %22424, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22426 = zext i32 %.pre-phi3570 to i64
  %22427 = mul nsw i64 %22426, %333
  %22428 = add nsw i64 %22427, %296
  %22429 = getelementptr inbounds i16, i16* %blur_x879, i64 %22428
  %22430 = getelementptr inbounds i16, i16* %22429, i64 -32
  %22431 = bitcast i16* %22430 to <16 x i16>*
  %22432 = load <16 x i16>, <16 x i16>* %22431, align 2, !tbaa !399
  %22433 = getelementptr inbounds i16, i16* %22429, i64 -16
  %22434 = bitcast i16* %22433 to <16 x i16>*
  %22435 = load <16 x i16>, <16 x i16>* %22434, align 2, !tbaa !399
  %22436 = shufflevector <16 x i16> %22432, <16 x i16> %22435, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22437 = zext i32 %.pre-phi3578 to i64
  %22438 = mul nsw i64 %22437, %333
  %22439 = add nsw i64 %22438, %296
  %22440 = getelementptr inbounds i16, i16* %blur_x879, i64 %22439
  %22441 = getelementptr inbounds i16, i16* %22440, i64 -32
  %22442 = bitcast i16* %22441 to <16 x i16>*
  %22443 = load <16 x i16>, <16 x i16>* %22442, align 2, !tbaa !399
  %22444 = getelementptr inbounds i16, i16* %22440, i64 -16
  %22445 = bitcast i16* %22444 to <16 x i16>*
  %22446 = load <16 x i16>, <16 x i16>* %22445, align 2, !tbaa !399
  %22447 = shufflevector <16 x i16> %22443, <16 x i16> %22446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22448 = mul nsw i64 %22406, %333
  %22449 = add nsw i64 %22448, %296
  %22450 = getelementptr inbounds i16, i16* %blur_x879, i64 %22449
  %22451 = getelementptr inbounds i16, i16* %22450, i64 -32
  %22452 = bitcast i16* %22451 to <16 x i16>*
  %22453 = load <16 x i16>, <16 x i16>* %22452, align 2, !tbaa !399
  %22454 = getelementptr inbounds i16, i16* %22450, i64 -16
  %22455 = bitcast i16* %22454 to <16 x i16>*
  %22456 = load <16 x i16>, <16 x i16>* %22455, align 2, !tbaa !399
  %22457 = shufflevector <16 x i16> %22453, <16 x i16> %22456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22458 = zext i32 %.pre-phi3582 to i64
  %22459 = mul nsw i64 %22458, %333
  %22460 = add nsw i64 %22459, %296
  %22461 = getelementptr inbounds i16, i16* %blur_x879, i64 %22460
  %22462 = getelementptr inbounds i16, i16* %22461, i64 -32
  %22463 = bitcast i16* %22462 to <16 x i16>*
  %22464 = load <16 x i16>, <16 x i16>* %22463, align 2, !tbaa !399
  %22465 = getelementptr inbounds i16, i16* %22461, i64 -16
  %22466 = bitcast i16* %22465 to <16 x i16>*
  %22467 = load <16 x i16>, <16 x i16>* %22466, align 2, !tbaa !399
  %22468 = shufflevector <16 x i16> %22464, <16 x i16> %22467, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22469 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22436, <32 x i16> %22447, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22470 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22468, <32 x i16> %22457, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22471 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22469, <32 x i16> %22470, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22472 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22471, <32 x i16> %22425, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22473 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22472, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22474 = shufflevector <32 x i16> %22473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22475 = sext i32 %a379 to i64
  %22476 = add nsw i64 %22475, 16
  %22477 = mul nsw i64 %22476, %334
  %22478 = add nsw i64 %336, %22477
  %22479 = getelementptr inbounds i16, i16* %263, i64 %22478
  %22480 = getelementptr inbounds i16, i16* %22479, i64 -32
  %22481 = bitcast i16* %22480 to <16 x i16>*
  store <16 x i16> %22474, <16 x i16>* %22481, align 2, !tbaa !401
  %22482 = shufflevector <32 x i16> %22473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22483 = getelementptr inbounds i16, i16* %22479, i64 -16
  %22484 = bitcast i16* %22483 to <16 x i16>*
  store <16 x i16> %22482, <16 x i16>* %22484, align 2, !tbaa !401
  br label %after_bb1687

"for blur_y.s0.x.x.rebased1702":                  ; preds = %"for blur_y.s0.x.x.rebased1702.preheader", %"consume blur_x1710"
  %indvars.iv3425 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1702.preheader" ], [ %indvars.iv.next3426, %"consume blur_x1710" ]
  %22485 = add nsw i64 %indvars.iv3425, %303
  %22486 = icmp slt i64 %22485, 1
  %22487 = trunc i64 %22485 to i32
  %22488 = shl nsw i32 %22487, 5
  %22489 = icmp sgt i32 %198, %22488
  %22490 = or i1 %22486, %22489
  br i1 %22490, label %"produce blur_x1708", label %"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge"

"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1702"
  %.pre3631 = shl nsw i64 %22485, 5
  br label %"consume blur_x1710"

"end for blur_y.s0.x.x.rebased1703":              ; preds = %"consume blur_x1710", %after_bb1687
  br i1 %304, label %"for blur_y.s0.x.x.rebased1718.preheader", label %"end for blur_y.s0.x.x.rebased1719", !prof !386

"for blur_y.s0.x.x.rebased1718.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1703"
  %22491 = sext i32 %t17061010 to i64
  %22492 = zext i32 %.pre-phi3574 to i64
  %22493 = mul nsw i64 %22492, %337
  %22494 = sub nsw i64 %22493, %298
  %22495 = zext i32 %.pre-phi3570 to i64
  %22496 = mul nsw i64 %22495, %337
  %22497 = sub nsw i64 %22496, %298
  %22498 = zext i32 %.pre-phi3578 to i64
  %22499 = mul nsw i64 %22498, %337
  %22500 = sub nsw i64 %22499, %298
  %22501 = zext i32 %.pre-phi3586 to i64
  %22502 = mul nsw i64 %22501, %337
  %22503 = sub nsw i64 %22502, %298
  %22504 = zext i32 %.pre-phi3582 to i64
  %22505 = mul nsw i64 %22504, %337
  %22506 = sub nsw i64 %22505, %298
  %22507 = sext i32 %a379 to i64
  %22508 = add nsw i64 %22507, 16
  %22509 = mul nsw i64 %22508, %334
  %22510 = add nsw i64 %22509, %338
  br label %"for blur_y.s0.x.x.rebased1718"

"produce blur_x1708":                             ; preds = %"for blur_y.s0.x.x.rebased1702"
  %t9681709 = add nsw i32 %433, %22488
  %22511 = sext i32 %t9681709 to i64
  %22512 = getelementptr inbounds i16, i16* %read_input822, i64 %22511
  %22513 = getelementptr inbounds i16, i16* %22512, i64 1
  %22514 = bitcast i16* %22513 to <16 x i16>*
  %22515 = load <16 x i16>, <16 x i16>* %22514, align 2, !tbaa !396
  %22516 = getelementptr inbounds i16, i16* %22512, i64 17
  %22517 = bitcast i16* %22516 to <16 x i16>*
  %22518 = load <16 x i16>, <16 x i16>* %22517, align 2, !tbaa !396
  %22519 = shufflevector <16 x i16> %22515, <16 x i16> %22518, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22520 = bitcast i16* %22512 to <16 x i16>*
  %22521 = load <16 x i16>, <16 x i16>* %22520, align 2, !tbaa !396
  %22522 = getelementptr inbounds i16, i16* %22512, i64 16
  %22523 = bitcast i16* %22522 to <16 x i16>*
  %22524 = load <16 x i16>, <16 x i16>* %22523, align 2, !tbaa !396
  %22525 = shufflevector <16 x i16> %22521, <16 x i16> %22524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22526 = getelementptr inbounds i16, i16* %22512, i64 2
  %22527 = bitcast i16* %22526 to <16 x i16>*
  %22528 = load <16 x i16>, <16 x i16>* %22527, align 2, !tbaa !396
  %22529 = getelementptr inbounds i16, i16* %22512, i64 18
  %22530 = bitcast i16* %22529 to <16 x i16>*
  %22531 = load <16 x i16>, <16 x i16>* %22530, align 2, !tbaa !396
  %22532 = shufflevector <16 x i16> %22528, <16 x i16> %22531, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22533 = getelementptr inbounds i16, i16* %22512, i64 4
  %22534 = bitcast i16* %22533 to <16 x i16>*
  %22535 = load <16 x i16>, <16 x i16>* %22534, align 2, !tbaa !396
  %22536 = getelementptr inbounds i16, i16* %22512, i64 20
  %22537 = bitcast i16* %22536 to <16 x i16>*
  %22538 = load <16 x i16>, <16 x i16>* %22537, align 2, !tbaa !396
  %22539 = shufflevector <16 x i16> %22535, <16 x i16> %22538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22540 = getelementptr inbounds i16, i16* %22512, i64 3
  %22541 = bitcast i16* %22540 to <16 x i16>*
  %22542 = load <16 x i16>, <16 x i16>* %22541, align 2, !tbaa !396
  %22543 = getelementptr inbounds i16, i16* %22512, i64 19
  %22544 = bitcast i16* %22543 to <16 x i16>*
  %22545 = load <16 x i16>, <16 x i16>* %22544, align 2, !tbaa !396
  %22546 = shufflevector <16 x i16> %22542, <16 x i16> %22545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22547 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22525, <32 x i16> %22532, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22548 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22546, <32 x i16> %22539, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22549 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22547, <32 x i16> %22548, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22550 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22549, <32 x i16> %22519, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22551 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22550, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22552 = shufflevector <32 x i16> %22551, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22553 = shl nsw i64 %22485, 5
  %22554 = add nsw i64 %22553, %22344
  %22555 = getelementptr inbounds i16, i16* %blur_x879, i64 %22554
  %22556 = bitcast i16* %22555 to <16 x i16>*
  store <16 x i16> %22552, <16 x i16>* %22556, align 2, !tbaa !399
  %22557 = shufflevector <32 x i16> %22551, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22558 = getelementptr inbounds i16, i16* %22555, i64 16
  %22559 = bitcast i16* %22558 to <16 x i16>*
  store <16 x i16> %22557, <16 x i16>* %22559, align 2, !tbaa !399
  br label %"consume blur_x1710"

"consume blur_x1710":                             ; preds = %"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge", %"produce blur_x1708"
  %.pre-phi3632 = phi i64 [ %.pre3631, %"for blur_y.s0.x.x.rebased1702.consume blur_x1710_crit_edge" ], [ %22553, %"produce blur_x1708" ]
  %22560 = add nsw i64 %22347, %.pre-phi3632
  %22561 = getelementptr inbounds i16, i16* %blur_x879, i64 %22560
  %22562 = bitcast i16* %22561 to <16 x i16>*
  %22563 = load <16 x i16>, <16 x i16>* %22562, align 2, !tbaa !399
  %22564 = getelementptr inbounds i16, i16* %22561, i64 16
  %22565 = bitcast i16* %22564 to <16 x i16>*
  %22566 = load <16 x i16>, <16 x i16>* %22565, align 2, !tbaa !399
  %22567 = shufflevector <16 x i16> %22563, <16 x i16> %22566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22568 = add nsw i64 %22350, %.pre-phi3632
  %22569 = getelementptr inbounds i16, i16* %blur_x879, i64 %22568
  %22570 = bitcast i16* %22569 to <16 x i16>*
  %22571 = load <16 x i16>, <16 x i16>* %22570, align 2, !tbaa !399
  %22572 = getelementptr inbounds i16, i16* %22569, i64 16
  %22573 = bitcast i16* %22572 to <16 x i16>*
  %22574 = load <16 x i16>, <16 x i16>* %22573, align 2, !tbaa !399
  %22575 = shufflevector <16 x i16> %22571, <16 x i16> %22574, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22576 = add nsw i64 %22353, %.pre-phi3632
  %22577 = getelementptr inbounds i16, i16* %blur_x879, i64 %22576
  %22578 = bitcast i16* %22577 to <16 x i16>*
  %22579 = load <16 x i16>, <16 x i16>* %22578, align 2, !tbaa !399
  %22580 = getelementptr inbounds i16, i16* %22577, i64 16
  %22581 = bitcast i16* %22580 to <16 x i16>*
  %22582 = load <16 x i16>, <16 x i16>* %22581, align 2, !tbaa !399
  %22583 = shufflevector <16 x i16> %22579, <16 x i16> %22582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22584 = add nsw i64 %22356, %.pre-phi3632
  %22585 = getelementptr inbounds i16, i16* %blur_x879, i64 %22584
  %22586 = bitcast i16* %22585 to <16 x i16>*
  %22587 = load <16 x i16>, <16 x i16>* %22586, align 2, !tbaa !399
  %22588 = getelementptr inbounds i16, i16* %22585, i64 16
  %22589 = bitcast i16* %22588 to <16 x i16>*
  %22590 = load <16 x i16>, <16 x i16>* %22589, align 2, !tbaa !399
  %22591 = shufflevector <16 x i16> %22587, <16 x i16> %22590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22592 = add nsw i64 %22359, %.pre-phi3632
  %22593 = getelementptr inbounds i16, i16* %blur_x879, i64 %22592
  %22594 = bitcast i16* %22593 to <16 x i16>*
  %22595 = load <16 x i16>, <16 x i16>* %22594, align 2, !tbaa !399
  %22596 = getelementptr inbounds i16, i16* %22593, i64 16
  %22597 = bitcast i16* %22596 to <16 x i16>*
  %22598 = load <16 x i16>, <16 x i16>* %22597, align 2, !tbaa !399
  %22599 = shufflevector <16 x i16> %22595, <16 x i16> %22598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22600 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22575, <32 x i16> %22583, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22601 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22599, <32 x i16> %22591, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22602 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22600, <32 x i16> %22601, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22603 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22602, <32 x i16> %22567, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22604 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22603, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22605 = shufflevector <32 x i16> %22604, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22606 = add nsw i64 %22363, %.pre-phi3632
  %22607 = getelementptr inbounds i16, i16* %263, i64 %22606
  %22608 = bitcast i16* %22607 to <16 x i16>*
  store <16 x i16> %22605, <16 x i16>* %22608, align 2, !tbaa !401
  %22609 = shufflevector <32 x i16> %22604, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22610 = getelementptr inbounds i16, i16* %22607, i64 16
  %22611 = bitcast i16* %22610 to <16 x i16>*
  store <16 x i16> %22609, <16 x i16>* %22611, align 2, !tbaa !401
  %indvars.iv.next3426 = add nuw nsw i64 %indvars.iv3425, 1
  %22612 = icmp eq i64 %indvars.iv.next3426, %zext3427
  br i1 %22612, label %"end for blur_y.s0.x.x.rebased1703", label %"for blur_y.s0.x.x.rebased1702"

"for blur_y.s0.x.x.rebased1718":                  ; preds = %"for blur_y.s0.x.x.rebased1718.preheader", %"consume blur_x1729"
  %blur_y.s0.x.x.rebased1720 = phi i32 [ %22721, %"consume blur_x1729" ], [ 0, %"for blur_y.s0.x.x.rebased1718.preheader" ]
  %22613 = add nsw i32 %blur_y.s0.x.x.rebased1720, %t1626814
  %a3821 = shl nsw i32 %22613, 5
  %22614 = icmp sgt i32 %t1647, %a3821
  %blur_y.s0.x.v0.base.s1721 = select i1 %22614, i32 %a3821, i32 %t1647
  %22615 = icmp slt i32 %22613, 1
  %22616 = icmp sgt i32 %198, %a3821
  %22617 = or i1 %22615, %22616
  br i1 %22617, label %"produce blur_x1726", label %"consume blur_x1729"

"end for blur_y.s0.x.x.rebased1719":              ; preds = %"consume blur_x1729", %"end for blur_y.s0.x.x.rebased1703"
  br i1 %229, label %"produce blur_x1733", label %after_bb1730

"produce blur_x1726":                             ; preds = %"for blur_y.s0.x.x.rebased1718"
  %22618 = icmp slt i32 %blur_y.s0.x.v0.base.s1721, %198
  %blur_x.s0.x.v1.base.s1727 = select i1 %22618, i32 %blur_y.s0.x.v0.base.s1721, i32 %198
  %t9731728 = add nsw i32 %433, %blur_x.s0.x.v1.base.s1727
  %22619 = sext i32 %t9731728 to i64
  %22620 = getelementptr inbounds i16, i16* %read_input822, i64 %22619
  %22621 = getelementptr inbounds i16, i16* %22620, i64 1
  %22622 = bitcast i16* %22621 to <16 x i16>*
  %22623 = load <16 x i16>, <16 x i16>* %22622, align 2, !tbaa !396
  %22624 = getelementptr inbounds i16, i16* %22620, i64 17
  %22625 = bitcast i16* %22624 to <16 x i16>*
  %22626 = load <16 x i16>, <16 x i16>* %22625, align 2, !tbaa !396
  %22627 = shufflevector <16 x i16> %22623, <16 x i16> %22626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22628 = bitcast i16* %22620 to <16 x i16>*
  %22629 = load <16 x i16>, <16 x i16>* %22628, align 2, !tbaa !396
  %22630 = getelementptr inbounds i16, i16* %22620, i64 16
  %22631 = bitcast i16* %22630 to <16 x i16>*
  %22632 = load <16 x i16>, <16 x i16>* %22631, align 2, !tbaa !396
  %22633 = shufflevector <16 x i16> %22629, <16 x i16> %22632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22634 = getelementptr inbounds i16, i16* %22620, i64 2
  %22635 = bitcast i16* %22634 to <16 x i16>*
  %22636 = load <16 x i16>, <16 x i16>* %22635, align 2, !tbaa !396
  %22637 = getelementptr inbounds i16, i16* %22620, i64 18
  %22638 = bitcast i16* %22637 to <16 x i16>*
  %22639 = load <16 x i16>, <16 x i16>* %22638, align 2, !tbaa !396
  %22640 = shufflevector <16 x i16> %22636, <16 x i16> %22639, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22641 = getelementptr inbounds i16, i16* %22620, i64 4
  %22642 = bitcast i16* %22641 to <16 x i16>*
  %22643 = load <16 x i16>, <16 x i16>* %22642, align 2, !tbaa !396
  %22644 = getelementptr inbounds i16, i16* %22620, i64 20
  %22645 = bitcast i16* %22644 to <16 x i16>*
  %22646 = load <16 x i16>, <16 x i16>* %22645, align 2, !tbaa !396
  %22647 = shufflevector <16 x i16> %22643, <16 x i16> %22646, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22648 = getelementptr inbounds i16, i16* %22620, i64 3
  %22649 = bitcast i16* %22648 to <16 x i16>*
  %22650 = load <16 x i16>, <16 x i16>* %22649, align 2, !tbaa !396
  %22651 = getelementptr inbounds i16, i16* %22620, i64 19
  %22652 = bitcast i16* %22651 to <16 x i16>*
  %22653 = load <16 x i16>, <16 x i16>* %22652, align 2, !tbaa !396
  %22654 = shufflevector <16 x i16> %22650, <16 x i16> %22653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22655 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22633, <32 x i16> %22640, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22656 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22654, <32 x i16> %22647, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22657 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22655, <32 x i16> %22656, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22658 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22657, <32 x i16> %22627, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22659 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22658, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22660 = shufflevector <32 x i16> %22659, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22661 = sext i32 %blur_x.s0.x.v1.base.s1727 to i64
  %22662 = add nsw i64 %22661, %22491
  %22663 = getelementptr inbounds i16, i16* %blur_x879, i64 %22662
  %22664 = bitcast i16* %22663 to <16 x i16>*
  store <16 x i16> %22660, <16 x i16>* %22664, align 2, !tbaa !399
  %22665 = shufflevector <32 x i16> %22659, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22666 = getelementptr inbounds i16, i16* %22663, i64 16
  %22667 = bitcast i16* %22666 to <16 x i16>*
  store <16 x i16> %22665, <16 x i16>* %22667, align 2, !tbaa !399
  br label %"consume blur_x1729"

"consume blur_x1729":                             ; preds = %"for blur_y.s0.x.x.rebased1718", %"produce blur_x1726"
  %22668 = sext i32 %blur_y.s0.x.v0.base.s1721 to i64
  %22669 = add nsw i64 %22494, %22668
  %22670 = getelementptr inbounds i16, i16* %blur_x879, i64 %22669
  %22671 = bitcast i16* %22670 to <16 x i16>*
  %22672 = load <16 x i16>, <16 x i16>* %22671, align 2, !tbaa !399
  %22673 = getelementptr inbounds i16, i16* %22670, i64 16
  %22674 = bitcast i16* %22673 to <16 x i16>*
  %22675 = load <16 x i16>, <16 x i16>* %22674, align 2, !tbaa !399
  %22676 = shufflevector <16 x i16> %22672, <16 x i16> %22675, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22677 = add nsw i64 %22497, %22668
  %22678 = getelementptr inbounds i16, i16* %blur_x879, i64 %22677
  %22679 = bitcast i16* %22678 to <16 x i16>*
  %22680 = load <16 x i16>, <16 x i16>* %22679, align 2, !tbaa !399
  %22681 = getelementptr inbounds i16, i16* %22678, i64 16
  %22682 = bitcast i16* %22681 to <16 x i16>*
  %22683 = load <16 x i16>, <16 x i16>* %22682, align 2, !tbaa !399
  %22684 = shufflevector <16 x i16> %22680, <16 x i16> %22683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22685 = add nsw i64 %22500, %22668
  %22686 = getelementptr inbounds i16, i16* %blur_x879, i64 %22685
  %22687 = bitcast i16* %22686 to <16 x i16>*
  %22688 = load <16 x i16>, <16 x i16>* %22687, align 2, !tbaa !399
  %22689 = getelementptr inbounds i16, i16* %22686, i64 16
  %22690 = bitcast i16* %22689 to <16 x i16>*
  %22691 = load <16 x i16>, <16 x i16>* %22690, align 2, !tbaa !399
  %22692 = shufflevector <16 x i16> %22688, <16 x i16> %22691, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22693 = add nsw i64 %22503, %22668
  %22694 = getelementptr inbounds i16, i16* %blur_x879, i64 %22693
  %22695 = bitcast i16* %22694 to <16 x i16>*
  %22696 = load <16 x i16>, <16 x i16>* %22695, align 2, !tbaa !399
  %22697 = getelementptr inbounds i16, i16* %22694, i64 16
  %22698 = bitcast i16* %22697 to <16 x i16>*
  %22699 = load <16 x i16>, <16 x i16>* %22698, align 2, !tbaa !399
  %22700 = shufflevector <16 x i16> %22696, <16 x i16> %22699, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22701 = add nsw i64 %22506, %22668
  %22702 = getelementptr inbounds i16, i16* %blur_x879, i64 %22701
  %22703 = bitcast i16* %22702 to <16 x i16>*
  %22704 = load <16 x i16>, <16 x i16>* %22703, align 2, !tbaa !399
  %22705 = getelementptr inbounds i16, i16* %22702, i64 16
  %22706 = bitcast i16* %22705 to <16 x i16>*
  %22707 = load <16 x i16>, <16 x i16>* %22706, align 2, !tbaa !399
  %22708 = shufflevector <16 x i16> %22704, <16 x i16> %22707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22709 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22684, <32 x i16> %22692, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22710 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22708, <32 x i16> %22700, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22711 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22709, <32 x i16> %22710, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22712 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22711, <32 x i16> %22676, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22713 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22712, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22714 = shufflevector <32 x i16> %22713, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22715 = add nsw i64 %22510, %22668
  %22716 = getelementptr inbounds i16, i16* %263, i64 %22715
  %22717 = bitcast i16* %22716 to <16 x i16>*
  store <16 x i16> %22714, <16 x i16>* %22717, align 2, !tbaa !401
  %22718 = shufflevector <32 x i16> %22713, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22719 = getelementptr inbounds i16, i16* %22716, i64 16
  %22720 = bitcast i16* %22719 to <16 x i16>*
  store <16 x i16> %22718, <16 x i16>* %22720, align 2, !tbaa !401
  %22721 = add nuw nsw i32 %blur_y.s0.x.x.rebased1720, 1
  %.not2598 = icmp eq i32 %22721, %t1683898
  br i1 %.not2598, label %"end for blur_y.s0.x.x.rebased1719", label %"for blur_y.s0.x.x.rebased1718"

after_bb1730:                                     ; preds = %"end for blur_y.s0.x.x.rebased1719", %"produce blur_x1733"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1745.preheader", label %"end for blur_y.s0.x.x.rebased1746", !prof !386

"for blur_y.s0.x.x.rebased1745.preheader":        ; preds = %after_bb1730
  %22722 = sext i32 %t17221053 to i64
  %22723 = zext i32 %.pre-phi3578 to i64
  %22724 = mul nsw i64 %22723, %337
  %22725 = sub nsw i64 %22724, %298
  %22726 = zext i32 %.pre-phi3574 to i64
  %22727 = mul nsw i64 %22726, %337
  %22728 = sub nsw i64 %22727, %298
  %22729 = zext i32 %.pre-phi3582 to i64
  %22730 = mul nsw i64 %22729, %337
  %22731 = sub nsw i64 %22730, %298
  %22732 = zext i32 %.pre-phi3592 to i64
  %22733 = mul nsw i64 %22732, %337
  %22734 = sub nsw i64 %22733, %298
  %22735 = zext i32 %.pre-phi3586 to i64
  %22736 = mul nsw i64 %22735, %337
  %22737 = sub nsw i64 %22736, %298
  %22738 = sext i32 %a379 to i64
  %22739 = add nsw i64 %22738, 17
  %22740 = mul nsw i64 %22739, %334
  %22741 = add nsw i64 %22740, %338
  br label %"for blur_y.s0.x.x.rebased1745"

"produce blur_x1733":                             ; preds = %"end for blur_y.s0.x.x.rebased1719"
  %22742 = getelementptr inbounds i16, i16* %read_input822, i64 %437
  %22743 = getelementptr inbounds i16, i16* %22742, i64 -31
  %22744 = bitcast i16* %22743 to <16 x i16>*
  %22745 = load <16 x i16>, <16 x i16>* %22744, align 2, !tbaa !396
  %22746 = getelementptr inbounds i16, i16* %22742, i64 -15
  %22747 = bitcast i16* %22746 to <16 x i16>*
  %22748 = load <16 x i16>, <16 x i16>* %22747, align 2, !tbaa !396
  %22749 = shufflevector <16 x i16> %22745, <16 x i16> %22748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22750 = getelementptr inbounds i16, i16* %22742, i64 -32
  %22751 = bitcast i16* %22750 to <16 x i16>*
  %22752 = load <16 x i16>, <16 x i16>* %22751, align 2, !tbaa !396
  %22753 = getelementptr inbounds i16, i16* %22742, i64 -16
  %22754 = bitcast i16* %22753 to <16 x i16>*
  %22755 = load <16 x i16>, <16 x i16>* %22754, align 2, !tbaa !396
  %22756 = shufflevector <16 x i16> %22752, <16 x i16> %22755, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22757 = getelementptr inbounds i16, i16* %22742, i64 -30
  %22758 = bitcast i16* %22757 to <16 x i16>*
  %22759 = load <16 x i16>, <16 x i16>* %22758, align 2, !tbaa !396
  %22760 = getelementptr inbounds i16, i16* %22742, i64 -14
  %22761 = bitcast i16* %22760 to <16 x i16>*
  %22762 = load <16 x i16>, <16 x i16>* %22761, align 2, !tbaa !396
  %22763 = shufflevector <16 x i16> %22759, <16 x i16> %22762, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22764 = getelementptr inbounds i16, i16* %22742, i64 -28
  %22765 = bitcast i16* %22764 to <16 x i16>*
  %22766 = load <16 x i16>, <16 x i16>* %22765, align 2, !tbaa !396
  %22767 = getelementptr inbounds i16, i16* %22742, i64 -12
  %22768 = bitcast i16* %22767 to <16 x i16>*
  %22769 = load <16 x i16>, <16 x i16>* %22768, align 2, !tbaa !396
  %22770 = shufflevector <16 x i16> %22766, <16 x i16> %22769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22771 = getelementptr inbounds i16, i16* %22742, i64 -29
  %22772 = bitcast i16* %22771 to <16 x i16>*
  %22773 = load <16 x i16>, <16 x i16>* %22772, align 2, !tbaa !396
  %22774 = getelementptr inbounds i16, i16* %22742, i64 -13
  %22775 = bitcast i16* %22774 to <16 x i16>*
  %22776 = load <16 x i16>, <16 x i16>* %22775, align 2, !tbaa !396
  %22777 = shufflevector <16 x i16> %22773, <16 x i16> %22776, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22778 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22756, <32 x i16> %22763, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22779 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22777, <32 x i16> %22770, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22780 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22778, <32 x i16> %22779, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22781 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22780, <32 x i16> %22749, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22782 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22781, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22783 = shufflevector <32 x i16> %22782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22784 = zext i32 %.pre-phi3592 to i64
  %22785 = mul nsw i64 %299, %22784
  %22786 = add nsw i64 %301, %22785
  %22787 = getelementptr inbounds i16, i16* %blur_x879, i64 %22786
  %22788 = getelementptr inbounds i16, i16* %22787, i64 -32
  %22789 = bitcast i16* %22788 to <16 x i16>*
  store <16 x i16> %22783, <16 x i16>* %22789, align 2, !tbaa !399
  %22790 = shufflevector <32 x i16> %22782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22791 = getelementptr inbounds i16, i16* %22787, i64 -16
  %22792 = bitcast i16* %22791 to <16 x i16>*
  store <16 x i16> %22790, <16 x i16>* %22792, align 2, !tbaa !399
  %22793 = zext i32 %.pre-phi3578 to i64
  %22794 = mul nsw i64 %22793, %333
  %22795 = add nsw i64 %22794, %296
  %22796 = getelementptr inbounds i16, i16* %blur_x879, i64 %22795
  %22797 = getelementptr inbounds i16, i16* %22796, i64 -32
  %22798 = bitcast i16* %22797 to <16 x i16>*
  %22799 = load <16 x i16>, <16 x i16>* %22798, align 2, !tbaa !399
  %22800 = getelementptr inbounds i16, i16* %22796, i64 -16
  %22801 = bitcast i16* %22800 to <16 x i16>*
  %22802 = load <16 x i16>, <16 x i16>* %22801, align 2, !tbaa !399
  %22803 = shufflevector <16 x i16> %22799, <16 x i16> %22802, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22804 = zext i32 %.pre-phi3574 to i64
  %22805 = mul nsw i64 %22804, %333
  %22806 = add nsw i64 %22805, %296
  %22807 = getelementptr inbounds i16, i16* %blur_x879, i64 %22806
  %22808 = getelementptr inbounds i16, i16* %22807, i64 -32
  %22809 = bitcast i16* %22808 to <16 x i16>*
  %22810 = load <16 x i16>, <16 x i16>* %22809, align 2, !tbaa !399
  %22811 = getelementptr inbounds i16, i16* %22807, i64 -16
  %22812 = bitcast i16* %22811 to <16 x i16>*
  %22813 = load <16 x i16>, <16 x i16>* %22812, align 2, !tbaa !399
  %22814 = shufflevector <16 x i16> %22810, <16 x i16> %22813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22815 = zext i32 %.pre-phi3582 to i64
  %22816 = mul nsw i64 %22815, %333
  %22817 = add nsw i64 %22816, %296
  %22818 = getelementptr inbounds i16, i16* %blur_x879, i64 %22817
  %22819 = getelementptr inbounds i16, i16* %22818, i64 -32
  %22820 = bitcast i16* %22819 to <16 x i16>*
  %22821 = load <16 x i16>, <16 x i16>* %22820, align 2, !tbaa !399
  %22822 = getelementptr inbounds i16, i16* %22818, i64 -16
  %22823 = bitcast i16* %22822 to <16 x i16>*
  %22824 = load <16 x i16>, <16 x i16>* %22823, align 2, !tbaa !399
  %22825 = shufflevector <16 x i16> %22821, <16 x i16> %22824, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22826 = mul nsw i64 %22784, %333
  %22827 = add nsw i64 %22826, %296
  %22828 = getelementptr inbounds i16, i16* %blur_x879, i64 %22827
  %22829 = getelementptr inbounds i16, i16* %22828, i64 -32
  %22830 = bitcast i16* %22829 to <16 x i16>*
  %22831 = load <16 x i16>, <16 x i16>* %22830, align 2, !tbaa !399
  %22832 = getelementptr inbounds i16, i16* %22828, i64 -16
  %22833 = bitcast i16* %22832 to <16 x i16>*
  %22834 = load <16 x i16>, <16 x i16>* %22833, align 2, !tbaa !399
  %22835 = shufflevector <16 x i16> %22831, <16 x i16> %22834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22836 = zext i32 %.pre-phi3586 to i64
  %22837 = mul nsw i64 %22836, %333
  %22838 = add nsw i64 %22837, %296
  %22839 = getelementptr inbounds i16, i16* %blur_x879, i64 %22838
  %22840 = getelementptr inbounds i16, i16* %22839, i64 -32
  %22841 = bitcast i16* %22840 to <16 x i16>*
  %22842 = load <16 x i16>, <16 x i16>* %22841, align 2, !tbaa !399
  %22843 = getelementptr inbounds i16, i16* %22839, i64 -16
  %22844 = bitcast i16* %22843 to <16 x i16>*
  %22845 = load <16 x i16>, <16 x i16>* %22844, align 2, !tbaa !399
  %22846 = shufflevector <16 x i16> %22842, <16 x i16> %22845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22847 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22814, <32 x i16> %22825, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22848 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22846, <32 x i16> %22835, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22849 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22847, <32 x i16> %22848, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22850 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22849, <32 x i16> %22803, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22851 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22850, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22852 = shufflevector <32 x i16> %22851, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22853 = sext i32 %a379 to i64
  %22854 = add nsw i64 %22853, 17
  %22855 = mul nsw i64 %22854, %334
  %22856 = add nsw i64 %336, %22855
  %22857 = getelementptr inbounds i16, i16* %263, i64 %22856
  %22858 = getelementptr inbounds i16, i16* %22857, i64 -32
  %22859 = bitcast i16* %22858 to <16 x i16>*
  store <16 x i16> %22852, <16 x i16>* %22859, align 2, !tbaa !401
  %22860 = shufflevector <32 x i16> %22851, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22861 = getelementptr inbounds i16, i16* %22857, i64 -16
  %22862 = bitcast i16* %22861 to <16 x i16>*
  store <16 x i16> %22860, <16 x i16>* %22862, align 2, !tbaa !401
  br label %after_bb1730

"for blur_y.s0.x.x.rebased1745":                  ; preds = %"for blur_y.s0.x.x.rebased1745.preheader", %"consume blur_x1753"
  %indvars.iv3428 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1745.preheader" ], [ %indvars.iv.next3429, %"consume blur_x1753" ]
  %22863 = add nsw i64 %indvars.iv3428, %303
  %22864 = icmp slt i64 %22863, 1
  %22865 = trunc i64 %22863 to i32
  %22866 = shl nsw i32 %22865, 5
  %22867 = icmp sgt i32 %198, %22866
  %22868 = or i1 %22864, %22867
  br i1 %22868, label %"produce blur_x1751", label %"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge"

"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1745"
  %.pre3633 = shl nsw i64 %22863, 5
  br label %"consume blur_x1753"

"end for blur_y.s0.x.x.rebased1746":              ; preds = %"consume blur_x1753", %after_bb1730
  br i1 %304, label %"for blur_y.s0.x.x.rebased1761.preheader", label %"end for blur_y.s0.x.x.rebased1762", !prof !386

"for blur_y.s0.x.x.rebased1761.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1746"
  %22869 = sext i32 %t17221053 to i64
  %22870 = zext i32 %.pre-phi3578 to i64
  %22871 = mul nsw i64 %22870, %337
  %22872 = sub nsw i64 %22871, %298
  %22873 = zext i32 %.pre-phi3574 to i64
  %22874 = mul nsw i64 %22873, %337
  %22875 = sub nsw i64 %22874, %298
  %22876 = zext i32 %.pre-phi3582 to i64
  %22877 = mul nsw i64 %22876, %337
  %22878 = sub nsw i64 %22877, %298
  %22879 = zext i32 %.pre-phi3592 to i64
  %22880 = mul nsw i64 %22879, %337
  %22881 = sub nsw i64 %22880, %298
  %22882 = zext i32 %.pre-phi3586 to i64
  %22883 = mul nsw i64 %22882, %337
  %22884 = sub nsw i64 %22883, %298
  %22885 = sext i32 %a379 to i64
  %22886 = add nsw i64 %22885, 17
  %22887 = mul nsw i64 %22886, %334
  %22888 = add nsw i64 %22887, %338
  br label %"for blur_y.s0.x.x.rebased1761"

"produce blur_x1751":                             ; preds = %"for blur_y.s0.x.x.rebased1745"
  %t9841752 = add nsw i32 %439, %22866
  %22889 = sext i32 %t9841752 to i64
  %22890 = getelementptr inbounds i16, i16* %read_input822, i64 %22889
  %22891 = getelementptr inbounds i16, i16* %22890, i64 1
  %22892 = bitcast i16* %22891 to <16 x i16>*
  %22893 = load <16 x i16>, <16 x i16>* %22892, align 2, !tbaa !396
  %22894 = getelementptr inbounds i16, i16* %22890, i64 17
  %22895 = bitcast i16* %22894 to <16 x i16>*
  %22896 = load <16 x i16>, <16 x i16>* %22895, align 2, !tbaa !396
  %22897 = shufflevector <16 x i16> %22893, <16 x i16> %22896, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22898 = bitcast i16* %22890 to <16 x i16>*
  %22899 = load <16 x i16>, <16 x i16>* %22898, align 2, !tbaa !396
  %22900 = getelementptr inbounds i16, i16* %22890, i64 16
  %22901 = bitcast i16* %22900 to <16 x i16>*
  %22902 = load <16 x i16>, <16 x i16>* %22901, align 2, !tbaa !396
  %22903 = shufflevector <16 x i16> %22899, <16 x i16> %22902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22904 = getelementptr inbounds i16, i16* %22890, i64 2
  %22905 = bitcast i16* %22904 to <16 x i16>*
  %22906 = load <16 x i16>, <16 x i16>* %22905, align 2, !tbaa !396
  %22907 = getelementptr inbounds i16, i16* %22890, i64 18
  %22908 = bitcast i16* %22907 to <16 x i16>*
  %22909 = load <16 x i16>, <16 x i16>* %22908, align 2, !tbaa !396
  %22910 = shufflevector <16 x i16> %22906, <16 x i16> %22909, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22911 = getelementptr inbounds i16, i16* %22890, i64 4
  %22912 = bitcast i16* %22911 to <16 x i16>*
  %22913 = load <16 x i16>, <16 x i16>* %22912, align 2, !tbaa !396
  %22914 = getelementptr inbounds i16, i16* %22890, i64 20
  %22915 = bitcast i16* %22914 to <16 x i16>*
  %22916 = load <16 x i16>, <16 x i16>* %22915, align 2, !tbaa !396
  %22917 = shufflevector <16 x i16> %22913, <16 x i16> %22916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22918 = getelementptr inbounds i16, i16* %22890, i64 3
  %22919 = bitcast i16* %22918 to <16 x i16>*
  %22920 = load <16 x i16>, <16 x i16>* %22919, align 2, !tbaa !396
  %22921 = getelementptr inbounds i16, i16* %22890, i64 19
  %22922 = bitcast i16* %22921 to <16 x i16>*
  %22923 = load <16 x i16>, <16 x i16>* %22922, align 2, !tbaa !396
  %22924 = shufflevector <16 x i16> %22920, <16 x i16> %22923, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22925 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22903, <32 x i16> %22910, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22926 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22924, <32 x i16> %22917, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22927 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22925, <32 x i16> %22926, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22928 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22927, <32 x i16> %22897, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22929 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22928, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22930 = shufflevector <32 x i16> %22929, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22931 = shl nsw i64 %22863, 5
  %22932 = add nsw i64 %22931, %22722
  %22933 = getelementptr inbounds i16, i16* %blur_x879, i64 %22932
  %22934 = bitcast i16* %22933 to <16 x i16>*
  store <16 x i16> %22930, <16 x i16>* %22934, align 2, !tbaa !399
  %22935 = shufflevector <32 x i16> %22929, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22936 = getelementptr inbounds i16, i16* %22933, i64 16
  %22937 = bitcast i16* %22936 to <16 x i16>*
  store <16 x i16> %22935, <16 x i16>* %22937, align 2, !tbaa !399
  br label %"consume blur_x1753"

"consume blur_x1753":                             ; preds = %"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge", %"produce blur_x1751"
  %.pre-phi3634 = phi i64 [ %.pre3633, %"for blur_y.s0.x.x.rebased1745.consume blur_x1753_crit_edge" ], [ %22931, %"produce blur_x1751" ]
  %22938 = add nsw i64 %22725, %.pre-phi3634
  %22939 = getelementptr inbounds i16, i16* %blur_x879, i64 %22938
  %22940 = bitcast i16* %22939 to <16 x i16>*
  %22941 = load <16 x i16>, <16 x i16>* %22940, align 2, !tbaa !399
  %22942 = getelementptr inbounds i16, i16* %22939, i64 16
  %22943 = bitcast i16* %22942 to <16 x i16>*
  %22944 = load <16 x i16>, <16 x i16>* %22943, align 2, !tbaa !399
  %22945 = shufflevector <16 x i16> %22941, <16 x i16> %22944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22946 = add nsw i64 %22728, %.pre-phi3634
  %22947 = getelementptr inbounds i16, i16* %blur_x879, i64 %22946
  %22948 = bitcast i16* %22947 to <16 x i16>*
  %22949 = load <16 x i16>, <16 x i16>* %22948, align 2, !tbaa !399
  %22950 = getelementptr inbounds i16, i16* %22947, i64 16
  %22951 = bitcast i16* %22950 to <16 x i16>*
  %22952 = load <16 x i16>, <16 x i16>* %22951, align 2, !tbaa !399
  %22953 = shufflevector <16 x i16> %22949, <16 x i16> %22952, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22954 = add nsw i64 %22731, %.pre-phi3634
  %22955 = getelementptr inbounds i16, i16* %blur_x879, i64 %22954
  %22956 = bitcast i16* %22955 to <16 x i16>*
  %22957 = load <16 x i16>, <16 x i16>* %22956, align 2, !tbaa !399
  %22958 = getelementptr inbounds i16, i16* %22955, i64 16
  %22959 = bitcast i16* %22958 to <16 x i16>*
  %22960 = load <16 x i16>, <16 x i16>* %22959, align 2, !tbaa !399
  %22961 = shufflevector <16 x i16> %22957, <16 x i16> %22960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22962 = add nsw i64 %22734, %.pre-phi3634
  %22963 = getelementptr inbounds i16, i16* %blur_x879, i64 %22962
  %22964 = bitcast i16* %22963 to <16 x i16>*
  %22965 = load <16 x i16>, <16 x i16>* %22964, align 2, !tbaa !399
  %22966 = getelementptr inbounds i16, i16* %22963, i64 16
  %22967 = bitcast i16* %22966 to <16 x i16>*
  %22968 = load <16 x i16>, <16 x i16>* %22967, align 2, !tbaa !399
  %22969 = shufflevector <16 x i16> %22965, <16 x i16> %22968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22970 = add nsw i64 %22737, %.pre-phi3634
  %22971 = getelementptr inbounds i16, i16* %blur_x879, i64 %22970
  %22972 = bitcast i16* %22971 to <16 x i16>*
  %22973 = load <16 x i16>, <16 x i16>* %22972, align 2, !tbaa !399
  %22974 = getelementptr inbounds i16, i16* %22971, i64 16
  %22975 = bitcast i16* %22974 to <16 x i16>*
  %22976 = load <16 x i16>, <16 x i16>* %22975, align 2, !tbaa !399
  %22977 = shufflevector <16 x i16> %22973, <16 x i16> %22976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22978 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22953, <32 x i16> %22961, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22979 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22977, <32 x i16> %22969, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22980 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22978, <32 x i16> %22979, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22981 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %22980, <32 x i16> %22945, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %22982 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %22981, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %22983 = shufflevector <32 x i16> %22982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22984 = add nsw i64 %22741, %.pre-phi3634
  %22985 = getelementptr inbounds i16, i16* %263, i64 %22984
  %22986 = bitcast i16* %22985 to <16 x i16>*
  store <16 x i16> %22983, <16 x i16>* %22986, align 2, !tbaa !401
  %22987 = shufflevector <32 x i16> %22982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22988 = getelementptr inbounds i16, i16* %22985, i64 16
  %22989 = bitcast i16* %22988 to <16 x i16>*
  store <16 x i16> %22987, <16 x i16>* %22989, align 2, !tbaa !401
  %indvars.iv.next3429 = add nuw nsw i64 %indvars.iv3428, 1
  %22990 = icmp eq i64 %indvars.iv.next3429, %zext3430
  br i1 %22990, label %"end for blur_y.s0.x.x.rebased1746", label %"for blur_y.s0.x.x.rebased1745"

"for blur_y.s0.x.x.rebased1761":                  ; preds = %"for blur_y.s0.x.x.rebased1761.preheader", %"consume blur_x1772"
  %blur_y.s0.x.x.rebased1763 = phi i32 [ %23099, %"consume blur_x1772" ], [ 0, %"for blur_y.s0.x.x.rebased1761.preheader" ]
  %22991 = add nsw i32 %blur_y.s0.x.x.rebased1763, %t1626814
  %a3978 = shl nsw i32 %22991, 5
  %22992 = icmp sgt i32 %t1647, %a3978
  %blur_y.s0.x.v0.base.s1764 = select i1 %22992, i32 %a3978, i32 %t1647
  %22993 = icmp slt i32 %22991, 1
  %22994 = icmp sgt i32 %198, %a3978
  %22995 = or i1 %22993, %22994
  br i1 %22995, label %"produce blur_x1769", label %"consume blur_x1772"

"end for blur_y.s0.x.x.rebased1762":              ; preds = %"consume blur_x1772", %"end for blur_y.s0.x.x.rebased1746"
  br i1 %229, label %"produce blur_x1776", label %after_bb1773

"produce blur_x1769":                             ; preds = %"for blur_y.s0.x.x.rebased1761"
  %22996 = icmp slt i32 %blur_y.s0.x.v0.base.s1764, %198
  %blur_x.s0.x.v1.base.s1770 = select i1 %22996, i32 %blur_y.s0.x.v0.base.s1764, i32 %198
  %t9891771 = add nsw i32 %439, %blur_x.s0.x.v1.base.s1770
  %22997 = sext i32 %t9891771 to i64
  %22998 = getelementptr inbounds i16, i16* %read_input822, i64 %22997
  %22999 = getelementptr inbounds i16, i16* %22998, i64 1
  %23000 = bitcast i16* %22999 to <16 x i16>*
  %23001 = load <16 x i16>, <16 x i16>* %23000, align 2, !tbaa !396
  %23002 = getelementptr inbounds i16, i16* %22998, i64 17
  %23003 = bitcast i16* %23002 to <16 x i16>*
  %23004 = load <16 x i16>, <16 x i16>* %23003, align 2, !tbaa !396
  %23005 = shufflevector <16 x i16> %23001, <16 x i16> %23004, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23006 = bitcast i16* %22998 to <16 x i16>*
  %23007 = load <16 x i16>, <16 x i16>* %23006, align 2, !tbaa !396
  %23008 = getelementptr inbounds i16, i16* %22998, i64 16
  %23009 = bitcast i16* %23008 to <16 x i16>*
  %23010 = load <16 x i16>, <16 x i16>* %23009, align 2, !tbaa !396
  %23011 = shufflevector <16 x i16> %23007, <16 x i16> %23010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23012 = getelementptr inbounds i16, i16* %22998, i64 2
  %23013 = bitcast i16* %23012 to <16 x i16>*
  %23014 = load <16 x i16>, <16 x i16>* %23013, align 2, !tbaa !396
  %23015 = getelementptr inbounds i16, i16* %22998, i64 18
  %23016 = bitcast i16* %23015 to <16 x i16>*
  %23017 = load <16 x i16>, <16 x i16>* %23016, align 2, !tbaa !396
  %23018 = shufflevector <16 x i16> %23014, <16 x i16> %23017, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23019 = getelementptr inbounds i16, i16* %22998, i64 4
  %23020 = bitcast i16* %23019 to <16 x i16>*
  %23021 = load <16 x i16>, <16 x i16>* %23020, align 2, !tbaa !396
  %23022 = getelementptr inbounds i16, i16* %22998, i64 20
  %23023 = bitcast i16* %23022 to <16 x i16>*
  %23024 = load <16 x i16>, <16 x i16>* %23023, align 2, !tbaa !396
  %23025 = shufflevector <16 x i16> %23021, <16 x i16> %23024, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23026 = getelementptr inbounds i16, i16* %22998, i64 3
  %23027 = bitcast i16* %23026 to <16 x i16>*
  %23028 = load <16 x i16>, <16 x i16>* %23027, align 2, !tbaa !396
  %23029 = getelementptr inbounds i16, i16* %22998, i64 19
  %23030 = bitcast i16* %23029 to <16 x i16>*
  %23031 = load <16 x i16>, <16 x i16>* %23030, align 2, !tbaa !396
  %23032 = shufflevector <16 x i16> %23028, <16 x i16> %23031, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23033 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23011, <32 x i16> %23018, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23034 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23032, <32 x i16> %23025, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23035 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23033, <32 x i16> %23034, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23036 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23035, <32 x i16> %23005, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23037 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23036, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23038 = shufflevector <32 x i16> %23037, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23039 = sext i32 %blur_x.s0.x.v1.base.s1770 to i64
  %23040 = add nsw i64 %23039, %22869
  %23041 = getelementptr inbounds i16, i16* %blur_x879, i64 %23040
  %23042 = bitcast i16* %23041 to <16 x i16>*
  store <16 x i16> %23038, <16 x i16>* %23042, align 2, !tbaa !399
  %23043 = shufflevector <32 x i16> %23037, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23044 = getelementptr inbounds i16, i16* %23041, i64 16
  %23045 = bitcast i16* %23044 to <16 x i16>*
  store <16 x i16> %23043, <16 x i16>* %23045, align 2, !tbaa !399
  br label %"consume blur_x1772"

"consume blur_x1772":                             ; preds = %"for blur_y.s0.x.x.rebased1761", %"produce blur_x1769"
  %23046 = sext i32 %blur_y.s0.x.v0.base.s1764 to i64
  %23047 = add nsw i64 %22872, %23046
  %23048 = getelementptr inbounds i16, i16* %blur_x879, i64 %23047
  %23049 = bitcast i16* %23048 to <16 x i16>*
  %23050 = load <16 x i16>, <16 x i16>* %23049, align 2, !tbaa !399
  %23051 = getelementptr inbounds i16, i16* %23048, i64 16
  %23052 = bitcast i16* %23051 to <16 x i16>*
  %23053 = load <16 x i16>, <16 x i16>* %23052, align 2, !tbaa !399
  %23054 = shufflevector <16 x i16> %23050, <16 x i16> %23053, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23055 = add nsw i64 %22875, %23046
  %23056 = getelementptr inbounds i16, i16* %blur_x879, i64 %23055
  %23057 = bitcast i16* %23056 to <16 x i16>*
  %23058 = load <16 x i16>, <16 x i16>* %23057, align 2, !tbaa !399
  %23059 = getelementptr inbounds i16, i16* %23056, i64 16
  %23060 = bitcast i16* %23059 to <16 x i16>*
  %23061 = load <16 x i16>, <16 x i16>* %23060, align 2, !tbaa !399
  %23062 = shufflevector <16 x i16> %23058, <16 x i16> %23061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23063 = add nsw i64 %22878, %23046
  %23064 = getelementptr inbounds i16, i16* %blur_x879, i64 %23063
  %23065 = bitcast i16* %23064 to <16 x i16>*
  %23066 = load <16 x i16>, <16 x i16>* %23065, align 2, !tbaa !399
  %23067 = getelementptr inbounds i16, i16* %23064, i64 16
  %23068 = bitcast i16* %23067 to <16 x i16>*
  %23069 = load <16 x i16>, <16 x i16>* %23068, align 2, !tbaa !399
  %23070 = shufflevector <16 x i16> %23066, <16 x i16> %23069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23071 = add nsw i64 %22881, %23046
  %23072 = getelementptr inbounds i16, i16* %blur_x879, i64 %23071
  %23073 = bitcast i16* %23072 to <16 x i16>*
  %23074 = load <16 x i16>, <16 x i16>* %23073, align 2, !tbaa !399
  %23075 = getelementptr inbounds i16, i16* %23072, i64 16
  %23076 = bitcast i16* %23075 to <16 x i16>*
  %23077 = load <16 x i16>, <16 x i16>* %23076, align 2, !tbaa !399
  %23078 = shufflevector <16 x i16> %23074, <16 x i16> %23077, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23079 = add nsw i64 %22884, %23046
  %23080 = getelementptr inbounds i16, i16* %blur_x879, i64 %23079
  %23081 = bitcast i16* %23080 to <16 x i16>*
  %23082 = load <16 x i16>, <16 x i16>* %23081, align 2, !tbaa !399
  %23083 = getelementptr inbounds i16, i16* %23080, i64 16
  %23084 = bitcast i16* %23083 to <16 x i16>*
  %23085 = load <16 x i16>, <16 x i16>* %23084, align 2, !tbaa !399
  %23086 = shufflevector <16 x i16> %23082, <16 x i16> %23085, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23087 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23062, <32 x i16> %23070, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23088 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23086, <32 x i16> %23078, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23089 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23087, <32 x i16> %23088, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23090 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23089, <32 x i16> %23054, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23091 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23090, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23092 = shufflevector <32 x i16> %23091, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23093 = add nsw i64 %22888, %23046
  %23094 = getelementptr inbounds i16, i16* %263, i64 %23093
  %23095 = bitcast i16* %23094 to <16 x i16>*
  store <16 x i16> %23092, <16 x i16>* %23095, align 2, !tbaa !401
  %23096 = shufflevector <32 x i16> %23091, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23097 = getelementptr inbounds i16, i16* %23094, i64 16
  %23098 = bitcast i16* %23097 to <16 x i16>*
  store <16 x i16> %23096, <16 x i16>* %23098, align 2, !tbaa !401
  %23099 = add nuw nsw i32 %blur_y.s0.x.x.rebased1763, 1
  %.not2594 = icmp eq i32 %23099, %t1683898
  br i1 %.not2594, label %"end for blur_y.s0.x.x.rebased1762", label %"for blur_y.s0.x.x.rebased1761"

after_bb1773:                                     ; preds = %"end for blur_y.s0.x.x.rebased1762", %"produce blur_x1776"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1788.preheader", label %"end for blur_y.s0.x.x.rebased1789", !prof !386

"for blur_y.s0.x.x.rebased1788.preheader":        ; preds = %after_bb1773
  %23100 = sext i32 %t17381096 to i64
  %23101 = zext i32 %.pre-phi3582 to i64
  %23102 = mul nsw i64 %23101, %337
  %23103 = sub nsw i64 %23102, %298
  %23104 = zext i32 %.pre-phi3578 to i64
  %23105 = mul nsw i64 %23104, %337
  %23106 = sub nsw i64 %23105, %298
  %23107 = zext i32 %.pre-phi3586 to i64
  %23108 = mul nsw i64 %23107, %337
  %23109 = sub nsw i64 %23108, %298
  %23110 = zext i32 %.pre-phi3598 to i64
  %23111 = mul nsw i64 %23110, %337
  %23112 = sub nsw i64 %23111, %298
  %23113 = zext i32 %.pre-phi3592 to i64
  %23114 = mul nsw i64 %23113, %337
  %23115 = sub nsw i64 %23114, %298
  %23116 = sext i32 %a379 to i64
  %23117 = add nsw i64 %23116, 18
  %23118 = mul nsw i64 %23117, %334
  %23119 = add nsw i64 %23118, %338
  br label %"for blur_y.s0.x.x.rebased1788"

"produce blur_x1776":                             ; preds = %"end for blur_y.s0.x.x.rebased1762"
  %23120 = getelementptr inbounds i16, i16* %read_input822, i64 %443
  %23121 = getelementptr inbounds i16, i16* %23120, i64 -31
  %23122 = bitcast i16* %23121 to <16 x i16>*
  %23123 = load <16 x i16>, <16 x i16>* %23122, align 2, !tbaa !396
  %23124 = getelementptr inbounds i16, i16* %23120, i64 -15
  %23125 = bitcast i16* %23124 to <16 x i16>*
  %23126 = load <16 x i16>, <16 x i16>* %23125, align 2, !tbaa !396
  %23127 = shufflevector <16 x i16> %23123, <16 x i16> %23126, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23128 = getelementptr inbounds i16, i16* %23120, i64 -32
  %23129 = bitcast i16* %23128 to <16 x i16>*
  %23130 = load <16 x i16>, <16 x i16>* %23129, align 2, !tbaa !396
  %23131 = getelementptr inbounds i16, i16* %23120, i64 -16
  %23132 = bitcast i16* %23131 to <16 x i16>*
  %23133 = load <16 x i16>, <16 x i16>* %23132, align 2, !tbaa !396
  %23134 = shufflevector <16 x i16> %23130, <16 x i16> %23133, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23135 = getelementptr inbounds i16, i16* %23120, i64 -30
  %23136 = bitcast i16* %23135 to <16 x i16>*
  %23137 = load <16 x i16>, <16 x i16>* %23136, align 2, !tbaa !396
  %23138 = getelementptr inbounds i16, i16* %23120, i64 -14
  %23139 = bitcast i16* %23138 to <16 x i16>*
  %23140 = load <16 x i16>, <16 x i16>* %23139, align 2, !tbaa !396
  %23141 = shufflevector <16 x i16> %23137, <16 x i16> %23140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23142 = getelementptr inbounds i16, i16* %23120, i64 -28
  %23143 = bitcast i16* %23142 to <16 x i16>*
  %23144 = load <16 x i16>, <16 x i16>* %23143, align 2, !tbaa !396
  %23145 = getelementptr inbounds i16, i16* %23120, i64 -12
  %23146 = bitcast i16* %23145 to <16 x i16>*
  %23147 = load <16 x i16>, <16 x i16>* %23146, align 2, !tbaa !396
  %23148 = shufflevector <16 x i16> %23144, <16 x i16> %23147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23149 = getelementptr inbounds i16, i16* %23120, i64 -29
  %23150 = bitcast i16* %23149 to <16 x i16>*
  %23151 = load <16 x i16>, <16 x i16>* %23150, align 2, !tbaa !396
  %23152 = getelementptr inbounds i16, i16* %23120, i64 -13
  %23153 = bitcast i16* %23152 to <16 x i16>*
  %23154 = load <16 x i16>, <16 x i16>* %23153, align 2, !tbaa !396
  %23155 = shufflevector <16 x i16> %23151, <16 x i16> %23154, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23156 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23134, <32 x i16> %23141, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23157 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23155, <32 x i16> %23148, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23158 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23156, <32 x i16> %23157, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23159 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23158, <32 x i16> %23127, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23160 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23159, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23161 = shufflevector <32 x i16> %23160, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23162 = zext i32 %.pre-phi3598 to i64
  %23163 = mul nsw i64 %299, %23162
  %23164 = add nsw i64 %301, %23163
  %23165 = getelementptr inbounds i16, i16* %blur_x879, i64 %23164
  %23166 = getelementptr inbounds i16, i16* %23165, i64 -32
  %23167 = bitcast i16* %23166 to <16 x i16>*
  store <16 x i16> %23161, <16 x i16>* %23167, align 2, !tbaa !399
  %23168 = shufflevector <32 x i16> %23160, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23169 = getelementptr inbounds i16, i16* %23165, i64 -16
  %23170 = bitcast i16* %23169 to <16 x i16>*
  store <16 x i16> %23168, <16 x i16>* %23170, align 2, !tbaa !399
  %23171 = zext i32 %.pre-phi3582 to i64
  %23172 = mul nsw i64 %23171, %333
  %23173 = add nsw i64 %23172, %296
  %23174 = getelementptr inbounds i16, i16* %blur_x879, i64 %23173
  %23175 = getelementptr inbounds i16, i16* %23174, i64 -32
  %23176 = bitcast i16* %23175 to <16 x i16>*
  %23177 = load <16 x i16>, <16 x i16>* %23176, align 2, !tbaa !399
  %23178 = getelementptr inbounds i16, i16* %23174, i64 -16
  %23179 = bitcast i16* %23178 to <16 x i16>*
  %23180 = load <16 x i16>, <16 x i16>* %23179, align 2, !tbaa !399
  %23181 = shufflevector <16 x i16> %23177, <16 x i16> %23180, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23182 = zext i32 %.pre-phi3578 to i64
  %23183 = mul nsw i64 %23182, %333
  %23184 = add nsw i64 %23183, %296
  %23185 = getelementptr inbounds i16, i16* %blur_x879, i64 %23184
  %23186 = getelementptr inbounds i16, i16* %23185, i64 -32
  %23187 = bitcast i16* %23186 to <16 x i16>*
  %23188 = load <16 x i16>, <16 x i16>* %23187, align 2, !tbaa !399
  %23189 = getelementptr inbounds i16, i16* %23185, i64 -16
  %23190 = bitcast i16* %23189 to <16 x i16>*
  %23191 = load <16 x i16>, <16 x i16>* %23190, align 2, !tbaa !399
  %23192 = shufflevector <16 x i16> %23188, <16 x i16> %23191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23193 = zext i32 %.pre-phi3586 to i64
  %23194 = mul nsw i64 %23193, %333
  %23195 = add nsw i64 %23194, %296
  %23196 = getelementptr inbounds i16, i16* %blur_x879, i64 %23195
  %23197 = getelementptr inbounds i16, i16* %23196, i64 -32
  %23198 = bitcast i16* %23197 to <16 x i16>*
  %23199 = load <16 x i16>, <16 x i16>* %23198, align 2, !tbaa !399
  %23200 = getelementptr inbounds i16, i16* %23196, i64 -16
  %23201 = bitcast i16* %23200 to <16 x i16>*
  %23202 = load <16 x i16>, <16 x i16>* %23201, align 2, !tbaa !399
  %23203 = shufflevector <16 x i16> %23199, <16 x i16> %23202, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23204 = mul nsw i64 %23162, %333
  %23205 = add nsw i64 %23204, %296
  %23206 = getelementptr inbounds i16, i16* %blur_x879, i64 %23205
  %23207 = getelementptr inbounds i16, i16* %23206, i64 -32
  %23208 = bitcast i16* %23207 to <16 x i16>*
  %23209 = load <16 x i16>, <16 x i16>* %23208, align 2, !tbaa !399
  %23210 = getelementptr inbounds i16, i16* %23206, i64 -16
  %23211 = bitcast i16* %23210 to <16 x i16>*
  %23212 = load <16 x i16>, <16 x i16>* %23211, align 2, !tbaa !399
  %23213 = shufflevector <16 x i16> %23209, <16 x i16> %23212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23214 = zext i32 %.pre-phi3592 to i64
  %23215 = mul nsw i64 %23214, %333
  %23216 = add nsw i64 %23215, %296
  %23217 = getelementptr inbounds i16, i16* %blur_x879, i64 %23216
  %23218 = getelementptr inbounds i16, i16* %23217, i64 -32
  %23219 = bitcast i16* %23218 to <16 x i16>*
  %23220 = load <16 x i16>, <16 x i16>* %23219, align 2, !tbaa !399
  %23221 = getelementptr inbounds i16, i16* %23217, i64 -16
  %23222 = bitcast i16* %23221 to <16 x i16>*
  %23223 = load <16 x i16>, <16 x i16>* %23222, align 2, !tbaa !399
  %23224 = shufflevector <16 x i16> %23220, <16 x i16> %23223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23225 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23192, <32 x i16> %23203, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23226 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23224, <32 x i16> %23213, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23227 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23225, <32 x i16> %23226, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23228 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23227, <32 x i16> %23181, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23229 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23228, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23230 = shufflevector <32 x i16> %23229, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23231 = sext i32 %a379 to i64
  %23232 = add nsw i64 %23231, 18
  %23233 = mul nsw i64 %23232, %334
  %23234 = add nsw i64 %336, %23233
  %23235 = getelementptr inbounds i16, i16* %263, i64 %23234
  %23236 = getelementptr inbounds i16, i16* %23235, i64 -32
  %23237 = bitcast i16* %23236 to <16 x i16>*
  store <16 x i16> %23230, <16 x i16>* %23237, align 2, !tbaa !401
  %23238 = shufflevector <32 x i16> %23229, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23239 = getelementptr inbounds i16, i16* %23235, i64 -16
  %23240 = bitcast i16* %23239 to <16 x i16>*
  store <16 x i16> %23238, <16 x i16>* %23240, align 2, !tbaa !401
  br label %after_bb1773

"for blur_y.s0.x.x.rebased1788":                  ; preds = %"for blur_y.s0.x.x.rebased1788.preheader", %"consume blur_x1796"
  %indvars.iv3431 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1788.preheader" ], [ %indvars.iv.next3432, %"consume blur_x1796" ]
  %23241 = add nsw i64 %indvars.iv3431, %303
  %23242 = icmp slt i64 %23241, 1
  %23243 = trunc i64 %23241 to i32
  %23244 = shl nsw i32 %23243, 5
  %23245 = icmp sgt i32 %198, %23244
  %23246 = or i1 %23242, %23245
  br i1 %23246, label %"produce blur_x1794", label %"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge"

"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1788"
  %.pre3635 = shl nsw i64 %23241, 5
  br label %"consume blur_x1796"

"end for blur_y.s0.x.x.rebased1789":              ; preds = %"consume blur_x1796", %after_bb1773
  br i1 %304, label %"for blur_y.s0.x.x.rebased1804.preheader", label %"end for blur_y.s0.x.x.rebased1805", !prof !386

"for blur_y.s0.x.x.rebased1804.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1789"
  %23247 = sext i32 %t17381096 to i64
  %23248 = zext i32 %.pre-phi3582 to i64
  %23249 = mul nsw i64 %23248, %337
  %23250 = sub nsw i64 %23249, %298
  %23251 = zext i32 %.pre-phi3578 to i64
  %23252 = mul nsw i64 %23251, %337
  %23253 = sub nsw i64 %23252, %298
  %23254 = zext i32 %.pre-phi3586 to i64
  %23255 = mul nsw i64 %23254, %337
  %23256 = sub nsw i64 %23255, %298
  %23257 = zext i32 %.pre-phi3598 to i64
  %23258 = mul nsw i64 %23257, %337
  %23259 = sub nsw i64 %23258, %298
  %23260 = zext i32 %.pre-phi3592 to i64
  %23261 = mul nsw i64 %23260, %337
  %23262 = sub nsw i64 %23261, %298
  %23263 = sext i32 %a379 to i64
  %23264 = add nsw i64 %23263, 18
  %23265 = mul nsw i64 %23264, %334
  %23266 = add nsw i64 %23265, %338
  br label %"for blur_y.s0.x.x.rebased1804"

"produce blur_x1794":                             ; preds = %"for blur_y.s0.x.x.rebased1788"
  %t10001795 = add nsw i32 %445, %23244
  %23267 = sext i32 %t10001795 to i64
  %23268 = getelementptr inbounds i16, i16* %read_input822, i64 %23267
  %23269 = getelementptr inbounds i16, i16* %23268, i64 1
  %23270 = bitcast i16* %23269 to <16 x i16>*
  %23271 = load <16 x i16>, <16 x i16>* %23270, align 2, !tbaa !396
  %23272 = getelementptr inbounds i16, i16* %23268, i64 17
  %23273 = bitcast i16* %23272 to <16 x i16>*
  %23274 = load <16 x i16>, <16 x i16>* %23273, align 2, !tbaa !396
  %23275 = shufflevector <16 x i16> %23271, <16 x i16> %23274, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23276 = bitcast i16* %23268 to <16 x i16>*
  %23277 = load <16 x i16>, <16 x i16>* %23276, align 2, !tbaa !396
  %23278 = getelementptr inbounds i16, i16* %23268, i64 16
  %23279 = bitcast i16* %23278 to <16 x i16>*
  %23280 = load <16 x i16>, <16 x i16>* %23279, align 2, !tbaa !396
  %23281 = shufflevector <16 x i16> %23277, <16 x i16> %23280, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23282 = getelementptr inbounds i16, i16* %23268, i64 2
  %23283 = bitcast i16* %23282 to <16 x i16>*
  %23284 = load <16 x i16>, <16 x i16>* %23283, align 2, !tbaa !396
  %23285 = getelementptr inbounds i16, i16* %23268, i64 18
  %23286 = bitcast i16* %23285 to <16 x i16>*
  %23287 = load <16 x i16>, <16 x i16>* %23286, align 2, !tbaa !396
  %23288 = shufflevector <16 x i16> %23284, <16 x i16> %23287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23289 = getelementptr inbounds i16, i16* %23268, i64 4
  %23290 = bitcast i16* %23289 to <16 x i16>*
  %23291 = load <16 x i16>, <16 x i16>* %23290, align 2, !tbaa !396
  %23292 = getelementptr inbounds i16, i16* %23268, i64 20
  %23293 = bitcast i16* %23292 to <16 x i16>*
  %23294 = load <16 x i16>, <16 x i16>* %23293, align 2, !tbaa !396
  %23295 = shufflevector <16 x i16> %23291, <16 x i16> %23294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23296 = getelementptr inbounds i16, i16* %23268, i64 3
  %23297 = bitcast i16* %23296 to <16 x i16>*
  %23298 = load <16 x i16>, <16 x i16>* %23297, align 2, !tbaa !396
  %23299 = getelementptr inbounds i16, i16* %23268, i64 19
  %23300 = bitcast i16* %23299 to <16 x i16>*
  %23301 = load <16 x i16>, <16 x i16>* %23300, align 2, !tbaa !396
  %23302 = shufflevector <16 x i16> %23298, <16 x i16> %23301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23303 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23281, <32 x i16> %23288, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23304 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23302, <32 x i16> %23295, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23305 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23303, <32 x i16> %23304, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23306 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23305, <32 x i16> %23275, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23307 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23306, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23308 = shufflevector <32 x i16> %23307, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23309 = shl nsw i64 %23241, 5
  %23310 = add nsw i64 %23309, %23100
  %23311 = getelementptr inbounds i16, i16* %blur_x879, i64 %23310
  %23312 = bitcast i16* %23311 to <16 x i16>*
  store <16 x i16> %23308, <16 x i16>* %23312, align 2, !tbaa !399
  %23313 = shufflevector <32 x i16> %23307, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23314 = getelementptr inbounds i16, i16* %23311, i64 16
  %23315 = bitcast i16* %23314 to <16 x i16>*
  store <16 x i16> %23313, <16 x i16>* %23315, align 2, !tbaa !399
  br label %"consume blur_x1796"

"consume blur_x1796":                             ; preds = %"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge", %"produce blur_x1794"
  %.pre-phi3636 = phi i64 [ %.pre3635, %"for blur_y.s0.x.x.rebased1788.consume blur_x1796_crit_edge" ], [ %23309, %"produce blur_x1794" ]
  %23316 = add nsw i64 %23103, %.pre-phi3636
  %23317 = getelementptr inbounds i16, i16* %blur_x879, i64 %23316
  %23318 = bitcast i16* %23317 to <16 x i16>*
  %23319 = load <16 x i16>, <16 x i16>* %23318, align 2, !tbaa !399
  %23320 = getelementptr inbounds i16, i16* %23317, i64 16
  %23321 = bitcast i16* %23320 to <16 x i16>*
  %23322 = load <16 x i16>, <16 x i16>* %23321, align 2, !tbaa !399
  %23323 = shufflevector <16 x i16> %23319, <16 x i16> %23322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23324 = add nsw i64 %23106, %.pre-phi3636
  %23325 = getelementptr inbounds i16, i16* %blur_x879, i64 %23324
  %23326 = bitcast i16* %23325 to <16 x i16>*
  %23327 = load <16 x i16>, <16 x i16>* %23326, align 2, !tbaa !399
  %23328 = getelementptr inbounds i16, i16* %23325, i64 16
  %23329 = bitcast i16* %23328 to <16 x i16>*
  %23330 = load <16 x i16>, <16 x i16>* %23329, align 2, !tbaa !399
  %23331 = shufflevector <16 x i16> %23327, <16 x i16> %23330, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23332 = add nsw i64 %23109, %.pre-phi3636
  %23333 = getelementptr inbounds i16, i16* %blur_x879, i64 %23332
  %23334 = bitcast i16* %23333 to <16 x i16>*
  %23335 = load <16 x i16>, <16 x i16>* %23334, align 2, !tbaa !399
  %23336 = getelementptr inbounds i16, i16* %23333, i64 16
  %23337 = bitcast i16* %23336 to <16 x i16>*
  %23338 = load <16 x i16>, <16 x i16>* %23337, align 2, !tbaa !399
  %23339 = shufflevector <16 x i16> %23335, <16 x i16> %23338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23340 = add nsw i64 %23112, %.pre-phi3636
  %23341 = getelementptr inbounds i16, i16* %blur_x879, i64 %23340
  %23342 = bitcast i16* %23341 to <16 x i16>*
  %23343 = load <16 x i16>, <16 x i16>* %23342, align 2, !tbaa !399
  %23344 = getelementptr inbounds i16, i16* %23341, i64 16
  %23345 = bitcast i16* %23344 to <16 x i16>*
  %23346 = load <16 x i16>, <16 x i16>* %23345, align 2, !tbaa !399
  %23347 = shufflevector <16 x i16> %23343, <16 x i16> %23346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23348 = add nsw i64 %23115, %.pre-phi3636
  %23349 = getelementptr inbounds i16, i16* %blur_x879, i64 %23348
  %23350 = bitcast i16* %23349 to <16 x i16>*
  %23351 = load <16 x i16>, <16 x i16>* %23350, align 2, !tbaa !399
  %23352 = getelementptr inbounds i16, i16* %23349, i64 16
  %23353 = bitcast i16* %23352 to <16 x i16>*
  %23354 = load <16 x i16>, <16 x i16>* %23353, align 2, !tbaa !399
  %23355 = shufflevector <16 x i16> %23351, <16 x i16> %23354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23356 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23331, <32 x i16> %23339, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23357 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23355, <32 x i16> %23347, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23358 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23356, <32 x i16> %23357, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23359 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23358, <32 x i16> %23323, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23360 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23359, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23361 = shufflevector <32 x i16> %23360, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23362 = add nsw i64 %23119, %.pre-phi3636
  %23363 = getelementptr inbounds i16, i16* %263, i64 %23362
  %23364 = bitcast i16* %23363 to <16 x i16>*
  store <16 x i16> %23361, <16 x i16>* %23364, align 2, !tbaa !401
  %23365 = shufflevector <32 x i16> %23360, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23366 = getelementptr inbounds i16, i16* %23363, i64 16
  %23367 = bitcast i16* %23366 to <16 x i16>*
  store <16 x i16> %23365, <16 x i16>* %23367, align 2, !tbaa !401
  %indvars.iv.next3432 = add nuw nsw i64 %indvars.iv3431, 1
  %23368 = icmp eq i64 %indvars.iv.next3432, %zext3433
  br i1 %23368, label %"end for blur_y.s0.x.x.rebased1789", label %"for blur_y.s0.x.x.rebased1788"

"for blur_y.s0.x.x.rebased1804":                  ; preds = %"for blur_y.s0.x.x.rebased1804.preheader", %"consume blur_x1815"
  %blur_y.s0.x.x.rebased1806 = phi i32 [ %23477, %"consume blur_x1815" ], [ 0, %"for blur_y.s0.x.x.rebased1804.preheader" ]
  %23369 = add nsw i32 %blur_y.s0.x.x.rebased1806, %t1626814
  %a4135 = shl nsw i32 %23369, 5
  %23370 = icmp sgt i32 %t1647, %a4135
  %blur_y.s0.x.v0.base.s1807 = select i1 %23370, i32 %a4135, i32 %t1647
  %23371 = icmp slt i32 %23369, 1
  %23372 = icmp sgt i32 %198, %a4135
  %23373 = or i1 %23371, %23372
  br i1 %23373, label %"produce blur_x1812", label %"consume blur_x1815"

"end for blur_y.s0.x.x.rebased1805":              ; preds = %"consume blur_x1815", %"end for blur_y.s0.x.x.rebased1789"
  br i1 %229, label %"produce blur_x1819", label %after_bb1816

"produce blur_x1812":                             ; preds = %"for blur_y.s0.x.x.rebased1804"
  %23374 = icmp slt i32 %blur_y.s0.x.v0.base.s1807, %198
  %blur_x.s0.x.v1.base.s1813 = select i1 %23374, i32 %blur_y.s0.x.v0.base.s1807, i32 %198
  %t10051814 = add nsw i32 %445, %blur_x.s0.x.v1.base.s1813
  %23375 = sext i32 %t10051814 to i64
  %23376 = getelementptr inbounds i16, i16* %read_input822, i64 %23375
  %23377 = getelementptr inbounds i16, i16* %23376, i64 1
  %23378 = bitcast i16* %23377 to <16 x i16>*
  %23379 = load <16 x i16>, <16 x i16>* %23378, align 2, !tbaa !396
  %23380 = getelementptr inbounds i16, i16* %23376, i64 17
  %23381 = bitcast i16* %23380 to <16 x i16>*
  %23382 = load <16 x i16>, <16 x i16>* %23381, align 2, !tbaa !396
  %23383 = shufflevector <16 x i16> %23379, <16 x i16> %23382, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23384 = bitcast i16* %23376 to <16 x i16>*
  %23385 = load <16 x i16>, <16 x i16>* %23384, align 2, !tbaa !396
  %23386 = getelementptr inbounds i16, i16* %23376, i64 16
  %23387 = bitcast i16* %23386 to <16 x i16>*
  %23388 = load <16 x i16>, <16 x i16>* %23387, align 2, !tbaa !396
  %23389 = shufflevector <16 x i16> %23385, <16 x i16> %23388, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23390 = getelementptr inbounds i16, i16* %23376, i64 2
  %23391 = bitcast i16* %23390 to <16 x i16>*
  %23392 = load <16 x i16>, <16 x i16>* %23391, align 2, !tbaa !396
  %23393 = getelementptr inbounds i16, i16* %23376, i64 18
  %23394 = bitcast i16* %23393 to <16 x i16>*
  %23395 = load <16 x i16>, <16 x i16>* %23394, align 2, !tbaa !396
  %23396 = shufflevector <16 x i16> %23392, <16 x i16> %23395, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23397 = getelementptr inbounds i16, i16* %23376, i64 4
  %23398 = bitcast i16* %23397 to <16 x i16>*
  %23399 = load <16 x i16>, <16 x i16>* %23398, align 2, !tbaa !396
  %23400 = getelementptr inbounds i16, i16* %23376, i64 20
  %23401 = bitcast i16* %23400 to <16 x i16>*
  %23402 = load <16 x i16>, <16 x i16>* %23401, align 2, !tbaa !396
  %23403 = shufflevector <16 x i16> %23399, <16 x i16> %23402, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23404 = getelementptr inbounds i16, i16* %23376, i64 3
  %23405 = bitcast i16* %23404 to <16 x i16>*
  %23406 = load <16 x i16>, <16 x i16>* %23405, align 2, !tbaa !396
  %23407 = getelementptr inbounds i16, i16* %23376, i64 19
  %23408 = bitcast i16* %23407 to <16 x i16>*
  %23409 = load <16 x i16>, <16 x i16>* %23408, align 2, !tbaa !396
  %23410 = shufflevector <16 x i16> %23406, <16 x i16> %23409, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23411 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23389, <32 x i16> %23396, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23412 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23410, <32 x i16> %23403, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23413 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23411, <32 x i16> %23412, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23414 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23413, <32 x i16> %23383, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23415 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23414, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23416 = shufflevector <32 x i16> %23415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23417 = sext i32 %blur_x.s0.x.v1.base.s1813 to i64
  %23418 = add nsw i64 %23417, %23247
  %23419 = getelementptr inbounds i16, i16* %blur_x879, i64 %23418
  %23420 = bitcast i16* %23419 to <16 x i16>*
  store <16 x i16> %23416, <16 x i16>* %23420, align 2, !tbaa !399
  %23421 = shufflevector <32 x i16> %23415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23422 = getelementptr inbounds i16, i16* %23419, i64 16
  %23423 = bitcast i16* %23422 to <16 x i16>*
  store <16 x i16> %23421, <16 x i16>* %23423, align 2, !tbaa !399
  br label %"consume blur_x1815"

"consume blur_x1815":                             ; preds = %"for blur_y.s0.x.x.rebased1804", %"produce blur_x1812"
  %23424 = sext i32 %blur_y.s0.x.v0.base.s1807 to i64
  %23425 = add nsw i64 %23250, %23424
  %23426 = getelementptr inbounds i16, i16* %blur_x879, i64 %23425
  %23427 = bitcast i16* %23426 to <16 x i16>*
  %23428 = load <16 x i16>, <16 x i16>* %23427, align 2, !tbaa !399
  %23429 = getelementptr inbounds i16, i16* %23426, i64 16
  %23430 = bitcast i16* %23429 to <16 x i16>*
  %23431 = load <16 x i16>, <16 x i16>* %23430, align 2, !tbaa !399
  %23432 = shufflevector <16 x i16> %23428, <16 x i16> %23431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23433 = add nsw i64 %23253, %23424
  %23434 = getelementptr inbounds i16, i16* %blur_x879, i64 %23433
  %23435 = bitcast i16* %23434 to <16 x i16>*
  %23436 = load <16 x i16>, <16 x i16>* %23435, align 2, !tbaa !399
  %23437 = getelementptr inbounds i16, i16* %23434, i64 16
  %23438 = bitcast i16* %23437 to <16 x i16>*
  %23439 = load <16 x i16>, <16 x i16>* %23438, align 2, !tbaa !399
  %23440 = shufflevector <16 x i16> %23436, <16 x i16> %23439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23441 = add nsw i64 %23256, %23424
  %23442 = getelementptr inbounds i16, i16* %blur_x879, i64 %23441
  %23443 = bitcast i16* %23442 to <16 x i16>*
  %23444 = load <16 x i16>, <16 x i16>* %23443, align 2, !tbaa !399
  %23445 = getelementptr inbounds i16, i16* %23442, i64 16
  %23446 = bitcast i16* %23445 to <16 x i16>*
  %23447 = load <16 x i16>, <16 x i16>* %23446, align 2, !tbaa !399
  %23448 = shufflevector <16 x i16> %23444, <16 x i16> %23447, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23449 = add nsw i64 %23259, %23424
  %23450 = getelementptr inbounds i16, i16* %blur_x879, i64 %23449
  %23451 = bitcast i16* %23450 to <16 x i16>*
  %23452 = load <16 x i16>, <16 x i16>* %23451, align 2, !tbaa !399
  %23453 = getelementptr inbounds i16, i16* %23450, i64 16
  %23454 = bitcast i16* %23453 to <16 x i16>*
  %23455 = load <16 x i16>, <16 x i16>* %23454, align 2, !tbaa !399
  %23456 = shufflevector <16 x i16> %23452, <16 x i16> %23455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23457 = add nsw i64 %23262, %23424
  %23458 = getelementptr inbounds i16, i16* %blur_x879, i64 %23457
  %23459 = bitcast i16* %23458 to <16 x i16>*
  %23460 = load <16 x i16>, <16 x i16>* %23459, align 2, !tbaa !399
  %23461 = getelementptr inbounds i16, i16* %23458, i64 16
  %23462 = bitcast i16* %23461 to <16 x i16>*
  %23463 = load <16 x i16>, <16 x i16>* %23462, align 2, !tbaa !399
  %23464 = shufflevector <16 x i16> %23460, <16 x i16> %23463, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23465 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23440, <32 x i16> %23448, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23466 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23464, <32 x i16> %23456, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23467 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23465, <32 x i16> %23466, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23468 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23467, <32 x i16> %23432, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23469 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23468, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23470 = shufflevector <32 x i16> %23469, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23471 = add nsw i64 %23266, %23424
  %23472 = getelementptr inbounds i16, i16* %263, i64 %23471
  %23473 = bitcast i16* %23472 to <16 x i16>*
  store <16 x i16> %23470, <16 x i16>* %23473, align 2, !tbaa !401
  %23474 = shufflevector <32 x i16> %23469, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23475 = getelementptr inbounds i16, i16* %23472, i64 16
  %23476 = bitcast i16* %23475 to <16 x i16>*
  store <16 x i16> %23474, <16 x i16>* %23476, align 2, !tbaa !401
  %23477 = add nuw nsw i32 %blur_y.s0.x.x.rebased1806, 1
  %.not2590 = icmp eq i32 %23477, %t1683898
  br i1 %.not2590, label %"end for blur_y.s0.x.x.rebased1805", label %"for blur_y.s0.x.x.rebased1804"

after_bb1816:                                     ; preds = %"end for blur_y.s0.x.x.rebased1805", %"produce blur_x1819"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1831.preheader", label %"end for blur_y.s0.x.x.rebased1832", !prof !386

"for blur_y.s0.x.x.rebased1831.preheader":        ; preds = %after_bb1816
  %23478 = sext i32 %t17541139 to i64
  %23479 = zext i32 %.pre-phi3586 to i64
  %23480 = mul nsw i64 %23479, %337
  %23481 = sub nsw i64 %23480, %298
  %23482 = zext i32 %.pre-phi3582 to i64
  %23483 = mul nsw i64 %23482, %337
  %23484 = sub nsw i64 %23483, %298
  %23485 = zext i32 %.pre-phi3592 to i64
  %23486 = mul nsw i64 %23485, %337
  %23487 = sub nsw i64 %23486, %298
  %23488 = zext i32 %.pre-phi3604 to i64
  %23489 = mul nsw i64 %23488, %337
  %23490 = sub nsw i64 %23489, %298
  %23491 = zext i32 %.pre-phi3598 to i64
  %23492 = mul nsw i64 %23491, %337
  %23493 = sub nsw i64 %23492, %298
  %23494 = sext i32 %a379 to i64
  %23495 = add nsw i64 %23494, 19
  %23496 = mul nsw i64 %23495, %334
  %23497 = add nsw i64 %23496, %338
  br label %"for blur_y.s0.x.x.rebased1831"

"produce blur_x1819":                             ; preds = %"end for blur_y.s0.x.x.rebased1805"
  %23498 = getelementptr inbounds i16, i16* %read_input822, i64 %449
  %23499 = getelementptr inbounds i16, i16* %23498, i64 -31
  %23500 = bitcast i16* %23499 to <16 x i16>*
  %23501 = load <16 x i16>, <16 x i16>* %23500, align 2, !tbaa !396
  %23502 = getelementptr inbounds i16, i16* %23498, i64 -15
  %23503 = bitcast i16* %23502 to <16 x i16>*
  %23504 = load <16 x i16>, <16 x i16>* %23503, align 2, !tbaa !396
  %23505 = shufflevector <16 x i16> %23501, <16 x i16> %23504, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23506 = getelementptr inbounds i16, i16* %23498, i64 -32
  %23507 = bitcast i16* %23506 to <16 x i16>*
  %23508 = load <16 x i16>, <16 x i16>* %23507, align 2, !tbaa !396
  %23509 = getelementptr inbounds i16, i16* %23498, i64 -16
  %23510 = bitcast i16* %23509 to <16 x i16>*
  %23511 = load <16 x i16>, <16 x i16>* %23510, align 2, !tbaa !396
  %23512 = shufflevector <16 x i16> %23508, <16 x i16> %23511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23513 = getelementptr inbounds i16, i16* %23498, i64 -30
  %23514 = bitcast i16* %23513 to <16 x i16>*
  %23515 = load <16 x i16>, <16 x i16>* %23514, align 2, !tbaa !396
  %23516 = getelementptr inbounds i16, i16* %23498, i64 -14
  %23517 = bitcast i16* %23516 to <16 x i16>*
  %23518 = load <16 x i16>, <16 x i16>* %23517, align 2, !tbaa !396
  %23519 = shufflevector <16 x i16> %23515, <16 x i16> %23518, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23520 = getelementptr inbounds i16, i16* %23498, i64 -28
  %23521 = bitcast i16* %23520 to <16 x i16>*
  %23522 = load <16 x i16>, <16 x i16>* %23521, align 2, !tbaa !396
  %23523 = getelementptr inbounds i16, i16* %23498, i64 -12
  %23524 = bitcast i16* %23523 to <16 x i16>*
  %23525 = load <16 x i16>, <16 x i16>* %23524, align 2, !tbaa !396
  %23526 = shufflevector <16 x i16> %23522, <16 x i16> %23525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23527 = getelementptr inbounds i16, i16* %23498, i64 -29
  %23528 = bitcast i16* %23527 to <16 x i16>*
  %23529 = load <16 x i16>, <16 x i16>* %23528, align 2, !tbaa !396
  %23530 = getelementptr inbounds i16, i16* %23498, i64 -13
  %23531 = bitcast i16* %23530 to <16 x i16>*
  %23532 = load <16 x i16>, <16 x i16>* %23531, align 2, !tbaa !396
  %23533 = shufflevector <16 x i16> %23529, <16 x i16> %23532, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23534 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23512, <32 x i16> %23519, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23535 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23533, <32 x i16> %23526, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23536 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23534, <32 x i16> %23535, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23537 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23536, <32 x i16> %23505, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23538 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23537, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23539 = shufflevector <32 x i16> %23538, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23540 = zext i32 %.pre-phi3604 to i64
  %23541 = mul nsw i64 %299, %23540
  %23542 = add nsw i64 %301, %23541
  %23543 = getelementptr inbounds i16, i16* %blur_x879, i64 %23542
  %23544 = getelementptr inbounds i16, i16* %23543, i64 -32
  %23545 = bitcast i16* %23544 to <16 x i16>*
  store <16 x i16> %23539, <16 x i16>* %23545, align 2, !tbaa !399
  %23546 = shufflevector <32 x i16> %23538, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23547 = getelementptr inbounds i16, i16* %23543, i64 -16
  %23548 = bitcast i16* %23547 to <16 x i16>*
  store <16 x i16> %23546, <16 x i16>* %23548, align 2, !tbaa !399
  %23549 = zext i32 %.pre-phi3586 to i64
  %23550 = mul nsw i64 %23549, %333
  %23551 = add nsw i64 %23550, %296
  %23552 = getelementptr inbounds i16, i16* %blur_x879, i64 %23551
  %23553 = getelementptr inbounds i16, i16* %23552, i64 -32
  %23554 = bitcast i16* %23553 to <16 x i16>*
  %23555 = load <16 x i16>, <16 x i16>* %23554, align 2, !tbaa !399
  %23556 = getelementptr inbounds i16, i16* %23552, i64 -16
  %23557 = bitcast i16* %23556 to <16 x i16>*
  %23558 = load <16 x i16>, <16 x i16>* %23557, align 2, !tbaa !399
  %23559 = shufflevector <16 x i16> %23555, <16 x i16> %23558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23560 = zext i32 %.pre-phi3582 to i64
  %23561 = mul nsw i64 %23560, %333
  %23562 = add nsw i64 %23561, %296
  %23563 = getelementptr inbounds i16, i16* %blur_x879, i64 %23562
  %23564 = getelementptr inbounds i16, i16* %23563, i64 -32
  %23565 = bitcast i16* %23564 to <16 x i16>*
  %23566 = load <16 x i16>, <16 x i16>* %23565, align 2, !tbaa !399
  %23567 = getelementptr inbounds i16, i16* %23563, i64 -16
  %23568 = bitcast i16* %23567 to <16 x i16>*
  %23569 = load <16 x i16>, <16 x i16>* %23568, align 2, !tbaa !399
  %23570 = shufflevector <16 x i16> %23566, <16 x i16> %23569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23571 = zext i32 %.pre-phi3592 to i64
  %23572 = mul nsw i64 %23571, %333
  %23573 = add nsw i64 %23572, %296
  %23574 = getelementptr inbounds i16, i16* %blur_x879, i64 %23573
  %23575 = getelementptr inbounds i16, i16* %23574, i64 -32
  %23576 = bitcast i16* %23575 to <16 x i16>*
  %23577 = load <16 x i16>, <16 x i16>* %23576, align 2, !tbaa !399
  %23578 = getelementptr inbounds i16, i16* %23574, i64 -16
  %23579 = bitcast i16* %23578 to <16 x i16>*
  %23580 = load <16 x i16>, <16 x i16>* %23579, align 2, !tbaa !399
  %23581 = shufflevector <16 x i16> %23577, <16 x i16> %23580, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23582 = mul nsw i64 %23540, %333
  %23583 = add nsw i64 %23582, %296
  %23584 = getelementptr inbounds i16, i16* %blur_x879, i64 %23583
  %23585 = getelementptr inbounds i16, i16* %23584, i64 -32
  %23586 = bitcast i16* %23585 to <16 x i16>*
  %23587 = load <16 x i16>, <16 x i16>* %23586, align 2, !tbaa !399
  %23588 = getelementptr inbounds i16, i16* %23584, i64 -16
  %23589 = bitcast i16* %23588 to <16 x i16>*
  %23590 = load <16 x i16>, <16 x i16>* %23589, align 2, !tbaa !399
  %23591 = shufflevector <16 x i16> %23587, <16 x i16> %23590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23592 = zext i32 %.pre-phi3598 to i64
  %23593 = mul nsw i64 %23592, %333
  %23594 = add nsw i64 %23593, %296
  %23595 = getelementptr inbounds i16, i16* %blur_x879, i64 %23594
  %23596 = getelementptr inbounds i16, i16* %23595, i64 -32
  %23597 = bitcast i16* %23596 to <16 x i16>*
  %23598 = load <16 x i16>, <16 x i16>* %23597, align 2, !tbaa !399
  %23599 = getelementptr inbounds i16, i16* %23595, i64 -16
  %23600 = bitcast i16* %23599 to <16 x i16>*
  %23601 = load <16 x i16>, <16 x i16>* %23600, align 2, !tbaa !399
  %23602 = shufflevector <16 x i16> %23598, <16 x i16> %23601, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23603 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23570, <32 x i16> %23581, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23604 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23602, <32 x i16> %23591, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23605 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23603, <32 x i16> %23604, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23606 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23605, <32 x i16> %23559, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23607 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23606, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23608 = shufflevector <32 x i16> %23607, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23609 = sext i32 %a379 to i64
  %23610 = add nsw i64 %23609, 19
  %23611 = mul nsw i64 %23610, %334
  %23612 = add nsw i64 %336, %23611
  %23613 = getelementptr inbounds i16, i16* %263, i64 %23612
  %23614 = getelementptr inbounds i16, i16* %23613, i64 -32
  %23615 = bitcast i16* %23614 to <16 x i16>*
  store <16 x i16> %23608, <16 x i16>* %23615, align 2, !tbaa !401
  %23616 = shufflevector <32 x i16> %23607, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23617 = getelementptr inbounds i16, i16* %23613, i64 -16
  %23618 = bitcast i16* %23617 to <16 x i16>*
  store <16 x i16> %23616, <16 x i16>* %23618, align 2, !tbaa !401
  br label %after_bb1816

"for blur_y.s0.x.x.rebased1831":                  ; preds = %"for blur_y.s0.x.x.rebased1831.preheader", %"consume blur_x1839"
  %indvars.iv3434 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1831.preheader" ], [ %indvars.iv.next3435, %"consume blur_x1839" ]
  %23619 = add nsw i64 %indvars.iv3434, %303
  %23620 = icmp slt i64 %23619, 1
  %23621 = trunc i64 %23619 to i32
  %23622 = shl nsw i32 %23621, 5
  %23623 = icmp sgt i32 %198, %23622
  %23624 = or i1 %23620, %23623
  br i1 %23624, label %"produce blur_x1837", label %"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge"

"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1831"
  %.pre3637 = shl nsw i64 %23619, 5
  br label %"consume blur_x1839"

"end for blur_y.s0.x.x.rebased1832":              ; preds = %"consume blur_x1839", %after_bb1816
  br i1 %304, label %"for blur_y.s0.x.x.rebased1847.preheader", label %"end for blur_y.s0.x.x.rebased1848", !prof !386

"for blur_y.s0.x.x.rebased1847.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1832"
  %23625 = sext i32 %t17541139 to i64
  %23626 = zext i32 %.pre-phi3586 to i64
  %23627 = mul nsw i64 %23626, %337
  %23628 = sub nsw i64 %23627, %298
  %23629 = zext i32 %.pre-phi3582 to i64
  %23630 = mul nsw i64 %23629, %337
  %23631 = sub nsw i64 %23630, %298
  %23632 = zext i32 %.pre-phi3592 to i64
  %23633 = mul nsw i64 %23632, %337
  %23634 = sub nsw i64 %23633, %298
  %23635 = zext i32 %.pre-phi3604 to i64
  %23636 = mul nsw i64 %23635, %337
  %23637 = sub nsw i64 %23636, %298
  %23638 = zext i32 %.pre-phi3598 to i64
  %23639 = mul nsw i64 %23638, %337
  %23640 = sub nsw i64 %23639, %298
  %23641 = sext i32 %a379 to i64
  %23642 = add nsw i64 %23641, 19
  %23643 = mul nsw i64 %23642, %334
  %23644 = add nsw i64 %23643, %338
  br label %"for blur_y.s0.x.x.rebased1847"

"produce blur_x1837":                             ; preds = %"for blur_y.s0.x.x.rebased1831"
  %t10161838 = add nsw i32 %451, %23622
  %23645 = sext i32 %t10161838 to i64
  %23646 = getelementptr inbounds i16, i16* %read_input822, i64 %23645
  %23647 = getelementptr inbounds i16, i16* %23646, i64 1
  %23648 = bitcast i16* %23647 to <16 x i16>*
  %23649 = load <16 x i16>, <16 x i16>* %23648, align 2, !tbaa !396
  %23650 = getelementptr inbounds i16, i16* %23646, i64 17
  %23651 = bitcast i16* %23650 to <16 x i16>*
  %23652 = load <16 x i16>, <16 x i16>* %23651, align 2, !tbaa !396
  %23653 = shufflevector <16 x i16> %23649, <16 x i16> %23652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23654 = bitcast i16* %23646 to <16 x i16>*
  %23655 = load <16 x i16>, <16 x i16>* %23654, align 2, !tbaa !396
  %23656 = getelementptr inbounds i16, i16* %23646, i64 16
  %23657 = bitcast i16* %23656 to <16 x i16>*
  %23658 = load <16 x i16>, <16 x i16>* %23657, align 2, !tbaa !396
  %23659 = shufflevector <16 x i16> %23655, <16 x i16> %23658, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23660 = getelementptr inbounds i16, i16* %23646, i64 2
  %23661 = bitcast i16* %23660 to <16 x i16>*
  %23662 = load <16 x i16>, <16 x i16>* %23661, align 2, !tbaa !396
  %23663 = getelementptr inbounds i16, i16* %23646, i64 18
  %23664 = bitcast i16* %23663 to <16 x i16>*
  %23665 = load <16 x i16>, <16 x i16>* %23664, align 2, !tbaa !396
  %23666 = shufflevector <16 x i16> %23662, <16 x i16> %23665, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23667 = getelementptr inbounds i16, i16* %23646, i64 4
  %23668 = bitcast i16* %23667 to <16 x i16>*
  %23669 = load <16 x i16>, <16 x i16>* %23668, align 2, !tbaa !396
  %23670 = getelementptr inbounds i16, i16* %23646, i64 20
  %23671 = bitcast i16* %23670 to <16 x i16>*
  %23672 = load <16 x i16>, <16 x i16>* %23671, align 2, !tbaa !396
  %23673 = shufflevector <16 x i16> %23669, <16 x i16> %23672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23674 = getelementptr inbounds i16, i16* %23646, i64 3
  %23675 = bitcast i16* %23674 to <16 x i16>*
  %23676 = load <16 x i16>, <16 x i16>* %23675, align 2, !tbaa !396
  %23677 = getelementptr inbounds i16, i16* %23646, i64 19
  %23678 = bitcast i16* %23677 to <16 x i16>*
  %23679 = load <16 x i16>, <16 x i16>* %23678, align 2, !tbaa !396
  %23680 = shufflevector <16 x i16> %23676, <16 x i16> %23679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23681 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23659, <32 x i16> %23666, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23682 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23680, <32 x i16> %23673, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23683 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23681, <32 x i16> %23682, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23684 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23683, <32 x i16> %23653, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23685 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23684, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23686 = shufflevector <32 x i16> %23685, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23687 = shl nsw i64 %23619, 5
  %23688 = add nsw i64 %23687, %23478
  %23689 = getelementptr inbounds i16, i16* %blur_x879, i64 %23688
  %23690 = bitcast i16* %23689 to <16 x i16>*
  store <16 x i16> %23686, <16 x i16>* %23690, align 2, !tbaa !399
  %23691 = shufflevector <32 x i16> %23685, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23692 = getelementptr inbounds i16, i16* %23689, i64 16
  %23693 = bitcast i16* %23692 to <16 x i16>*
  store <16 x i16> %23691, <16 x i16>* %23693, align 2, !tbaa !399
  br label %"consume blur_x1839"

"consume blur_x1839":                             ; preds = %"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge", %"produce blur_x1837"
  %.pre-phi3638 = phi i64 [ %.pre3637, %"for blur_y.s0.x.x.rebased1831.consume blur_x1839_crit_edge" ], [ %23687, %"produce blur_x1837" ]
  %23694 = add nsw i64 %23481, %.pre-phi3638
  %23695 = getelementptr inbounds i16, i16* %blur_x879, i64 %23694
  %23696 = bitcast i16* %23695 to <16 x i16>*
  %23697 = load <16 x i16>, <16 x i16>* %23696, align 2, !tbaa !399
  %23698 = getelementptr inbounds i16, i16* %23695, i64 16
  %23699 = bitcast i16* %23698 to <16 x i16>*
  %23700 = load <16 x i16>, <16 x i16>* %23699, align 2, !tbaa !399
  %23701 = shufflevector <16 x i16> %23697, <16 x i16> %23700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23702 = add nsw i64 %23484, %.pre-phi3638
  %23703 = getelementptr inbounds i16, i16* %blur_x879, i64 %23702
  %23704 = bitcast i16* %23703 to <16 x i16>*
  %23705 = load <16 x i16>, <16 x i16>* %23704, align 2, !tbaa !399
  %23706 = getelementptr inbounds i16, i16* %23703, i64 16
  %23707 = bitcast i16* %23706 to <16 x i16>*
  %23708 = load <16 x i16>, <16 x i16>* %23707, align 2, !tbaa !399
  %23709 = shufflevector <16 x i16> %23705, <16 x i16> %23708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23710 = add nsw i64 %23487, %.pre-phi3638
  %23711 = getelementptr inbounds i16, i16* %blur_x879, i64 %23710
  %23712 = bitcast i16* %23711 to <16 x i16>*
  %23713 = load <16 x i16>, <16 x i16>* %23712, align 2, !tbaa !399
  %23714 = getelementptr inbounds i16, i16* %23711, i64 16
  %23715 = bitcast i16* %23714 to <16 x i16>*
  %23716 = load <16 x i16>, <16 x i16>* %23715, align 2, !tbaa !399
  %23717 = shufflevector <16 x i16> %23713, <16 x i16> %23716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23718 = add nsw i64 %23490, %.pre-phi3638
  %23719 = getelementptr inbounds i16, i16* %blur_x879, i64 %23718
  %23720 = bitcast i16* %23719 to <16 x i16>*
  %23721 = load <16 x i16>, <16 x i16>* %23720, align 2, !tbaa !399
  %23722 = getelementptr inbounds i16, i16* %23719, i64 16
  %23723 = bitcast i16* %23722 to <16 x i16>*
  %23724 = load <16 x i16>, <16 x i16>* %23723, align 2, !tbaa !399
  %23725 = shufflevector <16 x i16> %23721, <16 x i16> %23724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23726 = add nsw i64 %23493, %.pre-phi3638
  %23727 = getelementptr inbounds i16, i16* %blur_x879, i64 %23726
  %23728 = bitcast i16* %23727 to <16 x i16>*
  %23729 = load <16 x i16>, <16 x i16>* %23728, align 2, !tbaa !399
  %23730 = getelementptr inbounds i16, i16* %23727, i64 16
  %23731 = bitcast i16* %23730 to <16 x i16>*
  %23732 = load <16 x i16>, <16 x i16>* %23731, align 2, !tbaa !399
  %23733 = shufflevector <16 x i16> %23729, <16 x i16> %23732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23734 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23709, <32 x i16> %23717, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23735 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23733, <32 x i16> %23725, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23736 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23734, <32 x i16> %23735, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23737 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23736, <32 x i16> %23701, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23738 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23737, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23739 = shufflevector <32 x i16> %23738, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23740 = add nsw i64 %23497, %.pre-phi3638
  %23741 = getelementptr inbounds i16, i16* %263, i64 %23740
  %23742 = bitcast i16* %23741 to <16 x i16>*
  store <16 x i16> %23739, <16 x i16>* %23742, align 2, !tbaa !401
  %23743 = shufflevector <32 x i16> %23738, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23744 = getelementptr inbounds i16, i16* %23741, i64 16
  %23745 = bitcast i16* %23744 to <16 x i16>*
  store <16 x i16> %23743, <16 x i16>* %23745, align 2, !tbaa !401
  %indvars.iv.next3435 = add nuw nsw i64 %indvars.iv3434, 1
  %23746 = icmp eq i64 %indvars.iv.next3435, %zext3436
  br i1 %23746, label %"end for blur_y.s0.x.x.rebased1832", label %"for blur_y.s0.x.x.rebased1831"

"for blur_y.s0.x.x.rebased1847":                  ; preds = %"for blur_y.s0.x.x.rebased1847.preheader", %"consume blur_x1858"
  %blur_y.s0.x.x.rebased1849 = phi i32 [ %23855, %"consume blur_x1858" ], [ 0, %"for blur_y.s0.x.x.rebased1847.preheader" ]
  %23747 = add nsw i32 %blur_y.s0.x.x.rebased1849, %t1626814
  %a4292 = shl nsw i32 %23747, 5
  %23748 = icmp sgt i32 %t1647, %a4292
  %blur_y.s0.x.v0.base.s1850 = select i1 %23748, i32 %a4292, i32 %t1647
  %23749 = icmp slt i32 %23747, 1
  %23750 = icmp sgt i32 %198, %a4292
  %23751 = or i1 %23749, %23750
  br i1 %23751, label %"produce blur_x1855", label %"consume blur_x1858"

"end for blur_y.s0.x.x.rebased1848":              ; preds = %"consume blur_x1858", %"end for blur_y.s0.x.x.rebased1832"
  br i1 %229, label %"produce blur_x1862", label %after_bb1859

"produce blur_x1855":                             ; preds = %"for blur_y.s0.x.x.rebased1847"
  %23752 = icmp slt i32 %blur_y.s0.x.v0.base.s1850, %198
  %blur_x.s0.x.v1.base.s1856 = select i1 %23752, i32 %blur_y.s0.x.v0.base.s1850, i32 %198
  %t10211857 = add nsw i32 %451, %blur_x.s0.x.v1.base.s1856
  %23753 = sext i32 %t10211857 to i64
  %23754 = getelementptr inbounds i16, i16* %read_input822, i64 %23753
  %23755 = getelementptr inbounds i16, i16* %23754, i64 1
  %23756 = bitcast i16* %23755 to <16 x i16>*
  %23757 = load <16 x i16>, <16 x i16>* %23756, align 2, !tbaa !396
  %23758 = getelementptr inbounds i16, i16* %23754, i64 17
  %23759 = bitcast i16* %23758 to <16 x i16>*
  %23760 = load <16 x i16>, <16 x i16>* %23759, align 2, !tbaa !396
  %23761 = shufflevector <16 x i16> %23757, <16 x i16> %23760, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23762 = bitcast i16* %23754 to <16 x i16>*
  %23763 = load <16 x i16>, <16 x i16>* %23762, align 2, !tbaa !396
  %23764 = getelementptr inbounds i16, i16* %23754, i64 16
  %23765 = bitcast i16* %23764 to <16 x i16>*
  %23766 = load <16 x i16>, <16 x i16>* %23765, align 2, !tbaa !396
  %23767 = shufflevector <16 x i16> %23763, <16 x i16> %23766, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23768 = getelementptr inbounds i16, i16* %23754, i64 2
  %23769 = bitcast i16* %23768 to <16 x i16>*
  %23770 = load <16 x i16>, <16 x i16>* %23769, align 2, !tbaa !396
  %23771 = getelementptr inbounds i16, i16* %23754, i64 18
  %23772 = bitcast i16* %23771 to <16 x i16>*
  %23773 = load <16 x i16>, <16 x i16>* %23772, align 2, !tbaa !396
  %23774 = shufflevector <16 x i16> %23770, <16 x i16> %23773, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23775 = getelementptr inbounds i16, i16* %23754, i64 4
  %23776 = bitcast i16* %23775 to <16 x i16>*
  %23777 = load <16 x i16>, <16 x i16>* %23776, align 2, !tbaa !396
  %23778 = getelementptr inbounds i16, i16* %23754, i64 20
  %23779 = bitcast i16* %23778 to <16 x i16>*
  %23780 = load <16 x i16>, <16 x i16>* %23779, align 2, !tbaa !396
  %23781 = shufflevector <16 x i16> %23777, <16 x i16> %23780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23782 = getelementptr inbounds i16, i16* %23754, i64 3
  %23783 = bitcast i16* %23782 to <16 x i16>*
  %23784 = load <16 x i16>, <16 x i16>* %23783, align 2, !tbaa !396
  %23785 = getelementptr inbounds i16, i16* %23754, i64 19
  %23786 = bitcast i16* %23785 to <16 x i16>*
  %23787 = load <16 x i16>, <16 x i16>* %23786, align 2, !tbaa !396
  %23788 = shufflevector <16 x i16> %23784, <16 x i16> %23787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23789 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23767, <32 x i16> %23774, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23790 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23788, <32 x i16> %23781, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23791 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23789, <32 x i16> %23790, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23792 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23791, <32 x i16> %23761, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23793 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23792, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23794 = shufflevector <32 x i16> %23793, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23795 = sext i32 %blur_x.s0.x.v1.base.s1856 to i64
  %23796 = add nsw i64 %23795, %23625
  %23797 = getelementptr inbounds i16, i16* %blur_x879, i64 %23796
  %23798 = bitcast i16* %23797 to <16 x i16>*
  store <16 x i16> %23794, <16 x i16>* %23798, align 2, !tbaa !399
  %23799 = shufflevector <32 x i16> %23793, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23800 = getelementptr inbounds i16, i16* %23797, i64 16
  %23801 = bitcast i16* %23800 to <16 x i16>*
  store <16 x i16> %23799, <16 x i16>* %23801, align 2, !tbaa !399
  br label %"consume blur_x1858"

"consume blur_x1858":                             ; preds = %"for blur_y.s0.x.x.rebased1847", %"produce blur_x1855"
  %23802 = sext i32 %blur_y.s0.x.v0.base.s1850 to i64
  %23803 = add nsw i64 %23628, %23802
  %23804 = getelementptr inbounds i16, i16* %blur_x879, i64 %23803
  %23805 = bitcast i16* %23804 to <16 x i16>*
  %23806 = load <16 x i16>, <16 x i16>* %23805, align 2, !tbaa !399
  %23807 = getelementptr inbounds i16, i16* %23804, i64 16
  %23808 = bitcast i16* %23807 to <16 x i16>*
  %23809 = load <16 x i16>, <16 x i16>* %23808, align 2, !tbaa !399
  %23810 = shufflevector <16 x i16> %23806, <16 x i16> %23809, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23811 = add nsw i64 %23631, %23802
  %23812 = getelementptr inbounds i16, i16* %blur_x879, i64 %23811
  %23813 = bitcast i16* %23812 to <16 x i16>*
  %23814 = load <16 x i16>, <16 x i16>* %23813, align 2, !tbaa !399
  %23815 = getelementptr inbounds i16, i16* %23812, i64 16
  %23816 = bitcast i16* %23815 to <16 x i16>*
  %23817 = load <16 x i16>, <16 x i16>* %23816, align 2, !tbaa !399
  %23818 = shufflevector <16 x i16> %23814, <16 x i16> %23817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23819 = add nsw i64 %23634, %23802
  %23820 = getelementptr inbounds i16, i16* %blur_x879, i64 %23819
  %23821 = bitcast i16* %23820 to <16 x i16>*
  %23822 = load <16 x i16>, <16 x i16>* %23821, align 2, !tbaa !399
  %23823 = getelementptr inbounds i16, i16* %23820, i64 16
  %23824 = bitcast i16* %23823 to <16 x i16>*
  %23825 = load <16 x i16>, <16 x i16>* %23824, align 2, !tbaa !399
  %23826 = shufflevector <16 x i16> %23822, <16 x i16> %23825, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23827 = add nsw i64 %23637, %23802
  %23828 = getelementptr inbounds i16, i16* %blur_x879, i64 %23827
  %23829 = bitcast i16* %23828 to <16 x i16>*
  %23830 = load <16 x i16>, <16 x i16>* %23829, align 2, !tbaa !399
  %23831 = getelementptr inbounds i16, i16* %23828, i64 16
  %23832 = bitcast i16* %23831 to <16 x i16>*
  %23833 = load <16 x i16>, <16 x i16>* %23832, align 2, !tbaa !399
  %23834 = shufflevector <16 x i16> %23830, <16 x i16> %23833, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23835 = add nsw i64 %23640, %23802
  %23836 = getelementptr inbounds i16, i16* %blur_x879, i64 %23835
  %23837 = bitcast i16* %23836 to <16 x i16>*
  %23838 = load <16 x i16>, <16 x i16>* %23837, align 2, !tbaa !399
  %23839 = getelementptr inbounds i16, i16* %23836, i64 16
  %23840 = bitcast i16* %23839 to <16 x i16>*
  %23841 = load <16 x i16>, <16 x i16>* %23840, align 2, !tbaa !399
  %23842 = shufflevector <16 x i16> %23838, <16 x i16> %23841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23843 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23818, <32 x i16> %23826, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23844 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23842, <32 x i16> %23834, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23845 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23843, <32 x i16> %23844, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23846 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23845, <32 x i16> %23810, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23847 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23846, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23848 = shufflevector <32 x i16> %23847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23849 = add nsw i64 %23644, %23802
  %23850 = getelementptr inbounds i16, i16* %263, i64 %23849
  %23851 = bitcast i16* %23850 to <16 x i16>*
  store <16 x i16> %23848, <16 x i16>* %23851, align 2, !tbaa !401
  %23852 = shufflevector <32 x i16> %23847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23853 = getelementptr inbounds i16, i16* %23850, i64 16
  %23854 = bitcast i16* %23853 to <16 x i16>*
  store <16 x i16> %23852, <16 x i16>* %23854, align 2, !tbaa !401
  %23855 = add nuw nsw i32 %blur_y.s0.x.x.rebased1849, 1
  %.not2586 = icmp eq i32 %23855, %t1683898
  br i1 %.not2586, label %"end for blur_y.s0.x.x.rebased1848", label %"for blur_y.s0.x.x.rebased1847"

after_bb1859:                                     ; preds = %"end for blur_y.s0.x.x.rebased1848", %"produce blur_x1862"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1874.preheader", label %"end for blur_y.s0.x.x.rebased1875", !prof !386

"for blur_y.s0.x.x.rebased1874.preheader":        ; preds = %after_bb1859
  %23856 = sext i32 %t1682886 to i64
  %23857 = zext i32 %.pre-phi3592 to i64
  %23858 = mul nsw i64 %23857, %337
  %23859 = sub nsw i64 %23858, %298
  %23860 = zext i32 %.pre-phi3586 to i64
  %23861 = mul nsw i64 %23860, %337
  %23862 = sub nsw i64 %23861, %298
  %23863 = zext i32 %.pre-phi3598 to i64
  %23864 = mul nsw i64 %23863, %337
  %23865 = sub nsw i64 %23864, %298
  %23866 = zext i32 %.pre-phi3570 to i64
  %23867 = mul nsw i64 %23866, %337
  %23868 = sub nsw i64 %23867, %298
  %23869 = zext i32 %.pre-phi3604 to i64
  %23870 = mul nsw i64 %23869, %337
  %23871 = sub nsw i64 %23870, %298
  %23872 = sext i32 %a379 to i64
  %23873 = add nsw i64 %23872, 20
  %23874 = mul nsw i64 %23873, %334
  %23875 = add nsw i64 %23874, %338
  br label %"for blur_y.s0.x.x.rebased1874"

"produce blur_x1862":                             ; preds = %"end for blur_y.s0.x.x.rebased1848"
  %23876 = getelementptr inbounds i16, i16* %read_input822, i64 %455
  %23877 = getelementptr inbounds i16, i16* %23876, i64 -31
  %23878 = bitcast i16* %23877 to <16 x i16>*
  %23879 = load <16 x i16>, <16 x i16>* %23878, align 2, !tbaa !396
  %23880 = getelementptr inbounds i16, i16* %23876, i64 -15
  %23881 = bitcast i16* %23880 to <16 x i16>*
  %23882 = load <16 x i16>, <16 x i16>* %23881, align 2, !tbaa !396
  %23883 = shufflevector <16 x i16> %23879, <16 x i16> %23882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23884 = getelementptr inbounds i16, i16* %23876, i64 -32
  %23885 = bitcast i16* %23884 to <16 x i16>*
  %23886 = load <16 x i16>, <16 x i16>* %23885, align 2, !tbaa !396
  %23887 = getelementptr inbounds i16, i16* %23876, i64 -16
  %23888 = bitcast i16* %23887 to <16 x i16>*
  %23889 = load <16 x i16>, <16 x i16>* %23888, align 2, !tbaa !396
  %23890 = shufflevector <16 x i16> %23886, <16 x i16> %23889, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23891 = getelementptr inbounds i16, i16* %23876, i64 -30
  %23892 = bitcast i16* %23891 to <16 x i16>*
  %23893 = load <16 x i16>, <16 x i16>* %23892, align 2, !tbaa !396
  %23894 = getelementptr inbounds i16, i16* %23876, i64 -14
  %23895 = bitcast i16* %23894 to <16 x i16>*
  %23896 = load <16 x i16>, <16 x i16>* %23895, align 2, !tbaa !396
  %23897 = shufflevector <16 x i16> %23893, <16 x i16> %23896, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23898 = getelementptr inbounds i16, i16* %23876, i64 -28
  %23899 = bitcast i16* %23898 to <16 x i16>*
  %23900 = load <16 x i16>, <16 x i16>* %23899, align 2, !tbaa !396
  %23901 = getelementptr inbounds i16, i16* %23876, i64 -12
  %23902 = bitcast i16* %23901 to <16 x i16>*
  %23903 = load <16 x i16>, <16 x i16>* %23902, align 2, !tbaa !396
  %23904 = shufflevector <16 x i16> %23900, <16 x i16> %23903, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23905 = getelementptr inbounds i16, i16* %23876, i64 -29
  %23906 = bitcast i16* %23905 to <16 x i16>*
  %23907 = load <16 x i16>, <16 x i16>* %23906, align 2, !tbaa !396
  %23908 = getelementptr inbounds i16, i16* %23876, i64 -13
  %23909 = bitcast i16* %23908 to <16 x i16>*
  %23910 = load <16 x i16>, <16 x i16>* %23909, align 2, !tbaa !396
  %23911 = shufflevector <16 x i16> %23907, <16 x i16> %23910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23912 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23890, <32 x i16> %23897, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23913 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23911, <32 x i16> %23904, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23914 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23912, <32 x i16> %23913, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23915 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23914, <32 x i16> %23883, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23916 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23915, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23917 = shufflevector <32 x i16> %23916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23918 = zext i32 %.pre-phi3570 to i64
  %23919 = mul nsw i64 %299, %23918
  %23920 = add nsw i64 %301, %23919
  %23921 = getelementptr inbounds i16, i16* %blur_x879, i64 %23920
  %23922 = getelementptr inbounds i16, i16* %23921, i64 -32
  %23923 = bitcast i16* %23922 to <16 x i16>*
  store <16 x i16> %23917, <16 x i16>* %23923, align 2, !tbaa !399
  %23924 = shufflevector <32 x i16> %23916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23925 = getelementptr inbounds i16, i16* %23921, i64 -16
  %23926 = bitcast i16* %23925 to <16 x i16>*
  store <16 x i16> %23924, <16 x i16>* %23926, align 2, !tbaa !399
  %23927 = zext i32 %.pre-phi3592 to i64
  %23928 = mul nsw i64 %23927, %333
  %23929 = add nsw i64 %23928, %296
  %23930 = getelementptr inbounds i16, i16* %blur_x879, i64 %23929
  %23931 = getelementptr inbounds i16, i16* %23930, i64 -32
  %23932 = bitcast i16* %23931 to <16 x i16>*
  %23933 = load <16 x i16>, <16 x i16>* %23932, align 2, !tbaa !399
  %23934 = getelementptr inbounds i16, i16* %23930, i64 -16
  %23935 = bitcast i16* %23934 to <16 x i16>*
  %23936 = load <16 x i16>, <16 x i16>* %23935, align 2, !tbaa !399
  %23937 = shufflevector <16 x i16> %23933, <16 x i16> %23936, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23938 = zext i32 %.pre-phi3586 to i64
  %23939 = mul nsw i64 %23938, %333
  %23940 = add nsw i64 %23939, %296
  %23941 = getelementptr inbounds i16, i16* %blur_x879, i64 %23940
  %23942 = getelementptr inbounds i16, i16* %23941, i64 -32
  %23943 = bitcast i16* %23942 to <16 x i16>*
  %23944 = load <16 x i16>, <16 x i16>* %23943, align 2, !tbaa !399
  %23945 = getelementptr inbounds i16, i16* %23941, i64 -16
  %23946 = bitcast i16* %23945 to <16 x i16>*
  %23947 = load <16 x i16>, <16 x i16>* %23946, align 2, !tbaa !399
  %23948 = shufflevector <16 x i16> %23944, <16 x i16> %23947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23949 = zext i32 %.pre-phi3598 to i64
  %23950 = mul nsw i64 %23949, %333
  %23951 = add nsw i64 %23950, %296
  %23952 = getelementptr inbounds i16, i16* %blur_x879, i64 %23951
  %23953 = getelementptr inbounds i16, i16* %23952, i64 -32
  %23954 = bitcast i16* %23953 to <16 x i16>*
  %23955 = load <16 x i16>, <16 x i16>* %23954, align 2, !tbaa !399
  %23956 = getelementptr inbounds i16, i16* %23952, i64 -16
  %23957 = bitcast i16* %23956 to <16 x i16>*
  %23958 = load <16 x i16>, <16 x i16>* %23957, align 2, !tbaa !399
  %23959 = shufflevector <16 x i16> %23955, <16 x i16> %23958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23960 = mul nsw i64 %23918, %333
  %23961 = add nsw i64 %23960, %296
  %23962 = getelementptr inbounds i16, i16* %blur_x879, i64 %23961
  %23963 = getelementptr inbounds i16, i16* %23962, i64 -32
  %23964 = bitcast i16* %23963 to <16 x i16>*
  %23965 = load <16 x i16>, <16 x i16>* %23964, align 2, !tbaa !399
  %23966 = getelementptr inbounds i16, i16* %23962, i64 -16
  %23967 = bitcast i16* %23966 to <16 x i16>*
  %23968 = load <16 x i16>, <16 x i16>* %23967, align 2, !tbaa !399
  %23969 = shufflevector <16 x i16> %23965, <16 x i16> %23968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23970 = zext i32 %.pre-phi3604 to i64
  %23971 = mul nsw i64 %23970, %333
  %23972 = add nsw i64 %23971, %296
  %23973 = getelementptr inbounds i16, i16* %blur_x879, i64 %23972
  %23974 = getelementptr inbounds i16, i16* %23973, i64 -32
  %23975 = bitcast i16* %23974 to <16 x i16>*
  %23976 = load <16 x i16>, <16 x i16>* %23975, align 2, !tbaa !399
  %23977 = getelementptr inbounds i16, i16* %23973, i64 -16
  %23978 = bitcast i16* %23977 to <16 x i16>*
  %23979 = load <16 x i16>, <16 x i16>* %23978, align 2, !tbaa !399
  %23980 = shufflevector <16 x i16> %23976, <16 x i16> %23979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23981 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23948, <32 x i16> %23959, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23982 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23980, <32 x i16> %23969, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23983 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23981, <32 x i16> %23982, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23984 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %23983, <32 x i16> %23937, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %23985 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %23984, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %23986 = shufflevector <32 x i16> %23985, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23987 = sext i32 %a379 to i64
  %23988 = add nsw i64 %23987, 20
  %23989 = mul nsw i64 %23988, %334
  %23990 = add nsw i64 %336, %23989
  %23991 = getelementptr inbounds i16, i16* %263, i64 %23990
  %23992 = getelementptr inbounds i16, i16* %23991, i64 -32
  %23993 = bitcast i16* %23992 to <16 x i16>*
  store <16 x i16> %23986, <16 x i16>* %23993, align 2, !tbaa !401
  %23994 = shufflevector <32 x i16> %23985, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23995 = getelementptr inbounds i16, i16* %23991, i64 -16
  %23996 = bitcast i16* %23995 to <16 x i16>*
  store <16 x i16> %23994, <16 x i16>* %23996, align 2, !tbaa !401
  br label %after_bb1859

"for blur_y.s0.x.x.rebased1874":                  ; preds = %"for blur_y.s0.x.x.rebased1874.preheader", %"consume blur_x1882"
  %indvars.iv3437 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1874.preheader" ], [ %indvars.iv.next3438, %"consume blur_x1882" ]
  %23997 = add nsw i64 %indvars.iv3437, %303
  %23998 = icmp slt i64 %23997, 1
  %23999 = trunc i64 %23997 to i32
  %24000 = shl nsw i32 %23999, 5
  %24001 = icmp sgt i32 %198, %24000
  %24002 = or i1 %23998, %24001
  br i1 %24002, label %"produce blur_x1880", label %"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge"

"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1874"
  %.pre3639 = shl nsw i64 %23997, 5
  br label %"consume blur_x1882"

"end for blur_y.s0.x.x.rebased1875":              ; preds = %"consume blur_x1882", %after_bb1859
  br i1 %304, label %"for blur_y.s0.x.x.rebased1890.preheader", label %"end for blur_y.s0.x.x.rebased1891", !prof !386

"for blur_y.s0.x.x.rebased1890.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1875"
  %24003 = sext i32 %t1682886 to i64
  %24004 = zext i32 %.pre-phi3592 to i64
  %24005 = mul nsw i64 %24004, %337
  %24006 = sub nsw i64 %24005, %298
  %24007 = zext i32 %.pre-phi3586 to i64
  %24008 = mul nsw i64 %24007, %337
  %24009 = sub nsw i64 %24008, %298
  %24010 = zext i32 %.pre-phi3598 to i64
  %24011 = mul nsw i64 %24010, %337
  %24012 = sub nsw i64 %24011, %298
  %24013 = zext i32 %.pre-phi3570 to i64
  %24014 = mul nsw i64 %24013, %337
  %24015 = sub nsw i64 %24014, %298
  %24016 = zext i32 %.pre-phi3604 to i64
  %24017 = mul nsw i64 %24016, %337
  %24018 = sub nsw i64 %24017, %298
  %24019 = sext i32 %a379 to i64
  %24020 = add nsw i64 %24019, 20
  %24021 = mul nsw i64 %24020, %334
  %24022 = add nsw i64 %24021, %338
  br label %"for blur_y.s0.x.x.rebased1890"

"produce blur_x1880":                             ; preds = %"for blur_y.s0.x.x.rebased1874"
  %t10321881 = add nsw i32 %457, %24000
  %24023 = sext i32 %t10321881 to i64
  %24024 = getelementptr inbounds i16, i16* %read_input822, i64 %24023
  %24025 = getelementptr inbounds i16, i16* %24024, i64 1
  %24026 = bitcast i16* %24025 to <16 x i16>*
  %24027 = load <16 x i16>, <16 x i16>* %24026, align 2, !tbaa !396
  %24028 = getelementptr inbounds i16, i16* %24024, i64 17
  %24029 = bitcast i16* %24028 to <16 x i16>*
  %24030 = load <16 x i16>, <16 x i16>* %24029, align 2, !tbaa !396
  %24031 = shufflevector <16 x i16> %24027, <16 x i16> %24030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24032 = bitcast i16* %24024 to <16 x i16>*
  %24033 = load <16 x i16>, <16 x i16>* %24032, align 2, !tbaa !396
  %24034 = getelementptr inbounds i16, i16* %24024, i64 16
  %24035 = bitcast i16* %24034 to <16 x i16>*
  %24036 = load <16 x i16>, <16 x i16>* %24035, align 2, !tbaa !396
  %24037 = shufflevector <16 x i16> %24033, <16 x i16> %24036, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24038 = getelementptr inbounds i16, i16* %24024, i64 2
  %24039 = bitcast i16* %24038 to <16 x i16>*
  %24040 = load <16 x i16>, <16 x i16>* %24039, align 2, !tbaa !396
  %24041 = getelementptr inbounds i16, i16* %24024, i64 18
  %24042 = bitcast i16* %24041 to <16 x i16>*
  %24043 = load <16 x i16>, <16 x i16>* %24042, align 2, !tbaa !396
  %24044 = shufflevector <16 x i16> %24040, <16 x i16> %24043, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24045 = getelementptr inbounds i16, i16* %24024, i64 4
  %24046 = bitcast i16* %24045 to <16 x i16>*
  %24047 = load <16 x i16>, <16 x i16>* %24046, align 2, !tbaa !396
  %24048 = getelementptr inbounds i16, i16* %24024, i64 20
  %24049 = bitcast i16* %24048 to <16 x i16>*
  %24050 = load <16 x i16>, <16 x i16>* %24049, align 2, !tbaa !396
  %24051 = shufflevector <16 x i16> %24047, <16 x i16> %24050, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24052 = getelementptr inbounds i16, i16* %24024, i64 3
  %24053 = bitcast i16* %24052 to <16 x i16>*
  %24054 = load <16 x i16>, <16 x i16>* %24053, align 2, !tbaa !396
  %24055 = getelementptr inbounds i16, i16* %24024, i64 19
  %24056 = bitcast i16* %24055 to <16 x i16>*
  %24057 = load <16 x i16>, <16 x i16>* %24056, align 2, !tbaa !396
  %24058 = shufflevector <16 x i16> %24054, <16 x i16> %24057, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24059 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24037, <32 x i16> %24044, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24060 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24058, <32 x i16> %24051, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24061 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24059, <32 x i16> %24060, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24062 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24061, <32 x i16> %24031, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24063 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24062, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24064 = shufflevector <32 x i16> %24063, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24065 = shl nsw i64 %23997, 5
  %24066 = add nsw i64 %24065, %23856
  %24067 = getelementptr inbounds i16, i16* %blur_x879, i64 %24066
  %24068 = bitcast i16* %24067 to <16 x i16>*
  store <16 x i16> %24064, <16 x i16>* %24068, align 2, !tbaa !399
  %24069 = shufflevector <32 x i16> %24063, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24070 = getelementptr inbounds i16, i16* %24067, i64 16
  %24071 = bitcast i16* %24070 to <16 x i16>*
  store <16 x i16> %24069, <16 x i16>* %24071, align 2, !tbaa !399
  br label %"consume blur_x1882"

"consume blur_x1882":                             ; preds = %"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge", %"produce blur_x1880"
  %.pre-phi3640 = phi i64 [ %.pre3639, %"for blur_y.s0.x.x.rebased1874.consume blur_x1882_crit_edge" ], [ %24065, %"produce blur_x1880" ]
  %24072 = add nsw i64 %23859, %.pre-phi3640
  %24073 = getelementptr inbounds i16, i16* %blur_x879, i64 %24072
  %24074 = bitcast i16* %24073 to <16 x i16>*
  %24075 = load <16 x i16>, <16 x i16>* %24074, align 2, !tbaa !399
  %24076 = getelementptr inbounds i16, i16* %24073, i64 16
  %24077 = bitcast i16* %24076 to <16 x i16>*
  %24078 = load <16 x i16>, <16 x i16>* %24077, align 2, !tbaa !399
  %24079 = shufflevector <16 x i16> %24075, <16 x i16> %24078, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24080 = add nsw i64 %23862, %.pre-phi3640
  %24081 = getelementptr inbounds i16, i16* %blur_x879, i64 %24080
  %24082 = bitcast i16* %24081 to <16 x i16>*
  %24083 = load <16 x i16>, <16 x i16>* %24082, align 2, !tbaa !399
  %24084 = getelementptr inbounds i16, i16* %24081, i64 16
  %24085 = bitcast i16* %24084 to <16 x i16>*
  %24086 = load <16 x i16>, <16 x i16>* %24085, align 2, !tbaa !399
  %24087 = shufflevector <16 x i16> %24083, <16 x i16> %24086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24088 = add nsw i64 %23865, %.pre-phi3640
  %24089 = getelementptr inbounds i16, i16* %blur_x879, i64 %24088
  %24090 = bitcast i16* %24089 to <16 x i16>*
  %24091 = load <16 x i16>, <16 x i16>* %24090, align 2, !tbaa !399
  %24092 = getelementptr inbounds i16, i16* %24089, i64 16
  %24093 = bitcast i16* %24092 to <16 x i16>*
  %24094 = load <16 x i16>, <16 x i16>* %24093, align 2, !tbaa !399
  %24095 = shufflevector <16 x i16> %24091, <16 x i16> %24094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24096 = add nsw i64 %23868, %.pre-phi3640
  %24097 = getelementptr inbounds i16, i16* %blur_x879, i64 %24096
  %24098 = bitcast i16* %24097 to <16 x i16>*
  %24099 = load <16 x i16>, <16 x i16>* %24098, align 2, !tbaa !399
  %24100 = getelementptr inbounds i16, i16* %24097, i64 16
  %24101 = bitcast i16* %24100 to <16 x i16>*
  %24102 = load <16 x i16>, <16 x i16>* %24101, align 2, !tbaa !399
  %24103 = shufflevector <16 x i16> %24099, <16 x i16> %24102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24104 = add nsw i64 %23871, %.pre-phi3640
  %24105 = getelementptr inbounds i16, i16* %blur_x879, i64 %24104
  %24106 = bitcast i16* %24105 to <16 x i16>*
  %24107 = load <16 x i16>, <16 x i16>* %24106, align 2, !tbaa !399
  %24108 = getelementptr inbounds i16, i16* %24105, i64 16
  %24109 = bitcast i16* %24108 to <16 x i16>*
  %24110 = load <16 x i16>, <16 x i16>* %24109, align 2, !tbaa !399
  %24111 = shufflevector <16 x i16> %24107, <16 x i16> %24110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24112 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24087, <32 x i16> %24095, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24113 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24111, <32 x i16> %24103, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24114 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24112, <32 x i16> %24113, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24115 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24114, <32 x i16> %24079, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24116 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24115, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24117 = shufflevector <32 x i16> %24116, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24118 = add nsw i64 %23875, %.pre-phi3640
  %24119 = getelementptr inbounds i16, i16* %263, i64 %24118
  %24120 = bitcast i16* %24119 to <16 x i16>*
  store <16 x i16> %24117, <16 x i16>* %24120, align 2, !tbaa !401
  %24121 = shufflevector <32 x i16> %24116, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24122 = getelementptr inbounds i16, i16* %24119, i64 16
  %24123 = bitcast i16* %24122 to <16 x i16>*
  store <16 x i16> %24121, <16 x i16>* %24123, align 2, !tbaa !401
  %indvars.iv.next3438 = add nuw nsw i64 %indvars.iv3437, 1
  %24124 = icmp eq i64 %indvars.iv.next3438, %zext3439
  br i1 %24124, label %"end for blur_y.s0.x.x.rebased1875", label %"for blur_y.s0.x.x.rebased1874"

"for blur_y.s0.x.x.rebased1890":                  ; preds = %"for blur_y.s0.x.x.rebased1890.preheader", %"consume blur_x1901"
  %blur_y.s0.x.x.rebased1892 = phi i32 [ %24233, %"consume blur_x1901" ], [ 0, %"for blur_y.s0.x.x.rebased1890.preheader" ]
  %24125 = add nsw i32 %blur_y.s0.x.x.rebased1892, %t1626814
  %a4449 = shl nsw i32 %24125, 5
  %24126 = icmp sgt i32 %t1647, %a4449
  %blur_y.s0.x.v0.base.s1893 = select i1 %24126, i32 %a4449, i32 %t1647
  %24127 = icmp slt i32 %24125, 1
  %24128 = icmp sgt i32 %198, %a4449
  %24129 = or i1 %24127, %24128
  br i1 %24129, label %"produce blur_x1898", label %"consume blur_x1901"

"end for blur_y.s0.x.x.rebased1891":              ; preds = %"consume blur_x1901", %"end for blur_y.s0.x.x.rebased1875"
  br i1 %229, label %"produce blur_x1905", label %after_bb1902

"produce blur_x1898":                             ; preds = %"for blur_y.s0.x.x.rebased1890"
  %24130 = icmp slt i32 %blur_y.s0.x.v0.base.s1893, %198
  %blur_x.s0.x.v1.base.s1899 = select i1 %24130, i32 %blur_y.s0.x.v0.base.s1893, i32 %198
  %t10371900 = add nsw i32 %457, %blur_x.s0.x.v1.base.s1899
  %24131 = sext i32 %t10371900 to i64
  %24132 = getelementptr inbounds i16, i16* %read_input822, i64 %24131
  %24133 = getelementptr inbounds i16, i16* %24132, i64 1
  %24134 = bitcast i16* %24133 to <16 x i16>*
  %24135 = load <16 x i16>, <16 x i16>* %24134, align 2, !tbaa !396
  %24136 = getelementptr inbounds i16, i16* %24132, i64 17
  %24137 = bitcast i16* %24136 to <16 x i16>*
  %24138 = load <16 x i16>, <16 x i16>* %24137, align 2, !tbaa !396
  %24139 = shufflevector <16 x i16> %24135, <16 x i16> %24138, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24140 = bitcast i16* %24132 to <16 x i16>*
  %24141 = load <16 x i16>, <16 x i16>* %24140, align 2, !tbaa !396
  %24142 = getelementptr inbounds i16, i16* %24132, i64 16
  %24143 = bitcast i16* %24142 to <16 x i16>*
  %24144 = load <16 x i16>, <16 x i16>* %24143, align 2, !tbaa !396
  %24145 = shufflevector <16 x i16> %24141, <16 x i16> %24144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24146 = getelementptr inbounds i16, i16* %24132, i64 2
  %24147 = bitcast i16* %24146 to <16 x i16>*
  %24148 = load <16 x i16>, <16 x i16>* %24147, align 2, !tbaa !396
  %24149 = getelementptr inbounds i16, i16* %24132, i64 18
  %24150 = bitcast i16* %24149 to <16 x i16>*
  %24151 = load <16 x i16>, <16 x i16>* %24150, align 2, !tbaa !396
  %24152 = shufflevector <16 x i16> %24148, <16 x i16> %24151, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24153 = getelementptr inbounds i16, i16* %24132, i64 4
  %24154 = bitcast i16* %24153 to <16 x i16>*
  %24155 = load <16 x i16>, <16 x i16>* %24154, align 2, !tbaa !396
  %24156 = getelementptr inbounds i16, i16* %24132, i64 20
  %24157 = bitcast i16* %24156 to <16 x i16>*
  %24158 = load <16 x i16>, <16 x i16>* %24157, align 2, !tbaa !396
  %24159 = shufflevector <16 x i16> %24155, <16 x i16> %24158, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24160 = getelementptr inbounds i16, i16* %24132, i64 3
  %24161 = bitcast i16* %24160 to <16 x i16>*
  %24162 = load <16 x i16>, <16 x i16>* %24161, align 2, !tbaa !396
  %24163 = getelementptr inbounds i16, i16* %24132, i64 19
  %24164 = bitcast i16* %24163 to <16 x i16>*
  %24165 = load <16 x i16>, <16 x i16>* %24164, align 2, !tbaa !396
  %24166 = shufflevector <16 x i16> %24162, <16 x i16> %24165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24167 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24145, <32 x i16> %24152, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24168 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24166, <32 x i16> %24159, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24169 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24167, <32 x i16> %24168, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24170 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24169, <32 x i16> %24139, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24171 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24170, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24172 = shufflevector <32 x i16> %24171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24173 = sext i32 %blur_x.s0.x.v1.base.s1899 to i64
  %24174 = add nsw i64 %24173, %24003
  %24175 = getelementptr inbounds i16, i16* %blur_x879, i64 %24174
  %24176 = bitcast i16* %24175 to <16 x i16>*
  store <16 x i16> %24172, <16 x i16>* %24176, align 2, !tbaa !399
  %24177 = shufflevector <32 x i16> %24171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24178 = getelementptr inbounds i16, i16* %24175, i64 16
  %24179 = bitcast i16* %24178 to <16 x i16>*
  store <16 x i16> %24177, <16 x i16>* %24179, align 2, !tbaa !399
  br label %"consume blur_x1901"

"consume blur_x1901":                             ; preds = %"for blur_y.s0.x.x.rebased1890", %"produce blur_x1898"
  %24180 = sext i32 %blur_y.s0.x.v0.base.s1893 to i64
  %24181 = add nsw i64 %24006, %24180
  %24182 = getelementptr inbounds i16, i16* %blur_x879, i64 %24181
  %24183 = bitcast i16* %24182 to <16 x i16>*
  %24184 = load <16 x i16>, <16 x i16>* %24183, align 2, !tbaa !399
  %24185 = getelementptr inbounds i16, i16* %24182, i64 16
  %24186 = bitcast i16* %24185 to <16 x i16>*
  %24187 = load <16 x i16>, <16 x i16>* %24186, align 2, !tbaa !399
  %24188 = shufflevector <16 x i16> %24184, <16 x i16> %24187, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24189 = add nsw i64 %24009, %24180
  %24190 = getelementptr inbounds i16, i16* %blur_x879, i64 %24189
  %24191 = bitcast i16* %24190 to <16 x i16>*
  %24192 = load <16 x i16>, <16 x i16>* %24191, align 2, !tbaa !399
  %24193 = getelementptr inbounds i16, i16* %24190, i64 16
  %24194 = bitcast i16* %24193 to <16 x i16>*
  %24195 = load <16 x i16>, <16 x i16>* %24194, align 2, !tbaa !399
  %24196 = shufflevector <16 x i16> %24192, <16 x i16> %24195, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24197 = add nsw i64 %24012, %24180
  %24198 = getelementptr inbounds i16, i16* %blur_x879, i64 %24197
  %24199 = bitcast i16* %24198 to <16 x i16>*
  %24200 = load <16 x i16>, <16 x i16>* %24199, align 2, !tbaa !399
  %24201 = getelementptr inbounds i16, i16* %24198, i64 16
  %24202 = bitcast i16* %24201 to <16 x i16>*
  %24203 = load <16 x i16>, <16 x i16>* %24202, align 2, !tbaa !399
  %24204 = shufflevector <16 x i16> %24200, <16 x i16> %24203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24205 = add nsw i64 %24015, %24180
  %24206 = getelementptr inbounds i16, i16* %blur_x879, i64 %24205
  %24207 = bitcast i16* %24206 to <16 x i16>*
  %24208 = load <16 x i16>, <16 x i16>* %24207, align 2, !tbaa !399
  %24209 = getelementptr inbounds i16, i16* %24206, i64 16
  %24210 = bitcast i16* %24209 to <16 x i16>*
  %24211 = load <16 x i16>, <16 x i16>* %24210, align 2, !tbaa !399
  %24212 = shufflevector <16 x i16> %24208, <16 x i16> %24211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24213 = add nsw i64 %24018, %24180
  %24214 = getelementptr inbounds i16, i16* %blur_x879, i64 %24213
  %24215 = bitcast i16* %24214 to <16 x i16>*
  %24216 = load <16 x i16>, <16 x i16>* %24215, align 2, !tbaa !399
  %24217 = getelementptr inbounds i16, i16* %24214, i64 16
  %24218 = bitcast i16* %24217 to <16 x i16>*
  %24219 = load <16 x i16>, <16 x i16>* %24218, align 2, !tbaa !399
  %24220 = shufflevector <16 x i16> %24216, <16 x i16> %24219, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24221 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24196, <32 x i16> %24204, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24222 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24220, <32 x i16> %24212, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24223 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24221, <32 x i16> %24222, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24224 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24223, <32 x i16> %24188, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24225 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24224, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24226 = shufflevector <32 x i16> %24225, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24227 = add nsw i64 %24022, %24180
  %24228 = getelementptr inbounds i16, i16* %263, i64 %24227
  %24229 = bitcast i16* %24228 to <16 x i16>*
  store <16 x i16> %24226, <16 x i16>* %24229, align 2, !tbaa !401
  %24230 = shufflevector <32 x i16> %24225, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24231 = getelementptr inbounds i16, i16* %24228, i64 16
  %24232 = bitcast i16* %24231 to <16 x i16>*
  store <16 x i16> %24230, <16 x i16>* %24232, align 2, !tbaa !401
  %24233 = add nuw nsw i32 %blur_y.s0.x.x.rebased1892, 1
  %.not2582 = icmp eq i32 %24233, %t1683898
  br i1 %.not2582, label %"end for blur_y.s0.x.x.rebased1891", label %"for blur_y.s0.x.x.rebased1890"

after_bb1902:                                     ; preds = %"end for blur_y.s0.x.x.rebased1891", %"produce blur_x1905"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1917.preheader", label %"end for blur_y.s0.x.x.rebased1918", !prof !386

"for blur_y.s0.x.x.rebased1917.preheader":        ; preds = %after_bb1902
  %24234 = sext i32 %t1688914 to i64
  %24235 = zext i32 %.pre-phi3598 to i64
  %24236 = mul nsw i64 %24235, %337
  %24237 = sub nsw i64 %24236, %298
  %24238 = zext i32 %.pre-phi3592 to i64
  %24239 = mul nsw i64 %24238, %337
  %24240 = sub nsw i64 %24239, %298
  %24241 = zext i32 %.pre-phi3604 to i64
  %24242 = mul nsw i64 %24241, %337
  %24243 = sub nsw i64 %24242, %298
  %24244 = zext i32 %.pre-phi3574 to i64
  %24245 = mul nsw i64 %24244, %337
  %24246 = sub nsw i64 %24245, %298
  %24247 = zext i32 %.pre-phi3570 to i64
  %24248 = mul nsw i64 %24247, %337
  %24249 = sub nsw i64 %24248, %298
  %24250 = sext i32 %a379 to i64
  %24251 = add nsw i64 %24250, 21
  %24252 = mul nsw i64 %24251, %334
  %24253 = add nsw i64 %24252, %338
  br label %"for blur_y.s0.x.x.rebased1917"

"produce blur_x1905":                             ; preds = %"end for blur_y.s0.x.x.rebased1891"
  %24254 = getelementptr inbounds i16, i16* %read_input822, i64 %461
  %24255 = getelementptr inbounds i16, i16* %24254, i64 -31
  %24256 = bitcast i16* %24255 to <16 x i16>*
  %24257 = load <16 x i16>, <16 x i16>* %24256, align 2, !tbaa !396
  %24258 = getelementptr inbounds i16, i16* %24254, i64 -15
  %24259 = bitcast i16* %24258 to <16 x i16>*
  %24260 = load <16 x i16>, <16 x i16>* %24259, align 2, !tbaa !396
  %24261 = shufflevector <16 x i16> %24257, <16 x i16> %24260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24262 = getelementptr inbounds i16, i16* %24254, i64 -32
  %24263 = bitcast i16* %24262 to <16 x i16>*
  %24264 = load <16 x i16>, <16 x i16>* %24263, align 2, !tbaa !396
  %24265 = getelementptr inbounds i16, i16* %24254, i64 -16
  %24266 = bitcast i16* %24265 to <16 x i16>*
  %24267 = load <16 x i16>, <16 x i16>* %24266, align 2, !tbaa !396
  %24268 = shufflevector <16 x i16> %24264, <16 x i16> %24267, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24269 = getelementptr inbounds i16, i16* %24254, i64 -30
  %24270 = bitcast i16* %24269 to <16 x i16>*
  %24271 = load <16 x i16>, <16 x i16>* %24270, align 2, !tbaa !396
  %24272 = getelementptr inbounds i16, i16* %24254, i64 -14
  %24273 = bitcast i16* %24272 to <16 x i16>*
  %24274 = load <16 x i16>, <16 x i16>* %24273, align 2, !tbaa !396
  %24275 = shufflevector <16 x i16> %24271, <16 x i16> %24274, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24276 = getelementptr inbounds i16, i16* %24254, i64 -28
  %24277 = bitcast i16* %24276 to <16 x i16>*
  %24278 = load <16 x i16>, <16 x i16>* %24277, align 2, !tbaa !396
  %24279 = getelementptr inbounds i16, i16* %24254, i64 -12
  %24280 = bitcast i16* %24279 to <16 x i16>*
  %24281 = load <16 x i16>, <16 x i16>* %24280, align 2, !tbaa !396
  %24282 = shufflevector <16 x i16> %24278, <16 x i16> %24281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24283 = getelementptr inbounds i16, i16* %24254, i64 -29
  %24284 = bitcast i16* %24283 to <16 x i16>*
  %24285 = load <16 x i16>, <16 x i16>* %24284, align 2, !tbaa !396
  %24286 = getelementptr inbounds i16, i16* %24254, i64 -13
  %24287 = bitcast i16* %24286 to <16 x i16>*
  %24288 = load <16 x i16>, <16 x i16>* %24287, align 2, !tbaa !396
  %24289 = shufflevector <16 x i16> %24285, <16 x i16> %24288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24290 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24268, <32 x i16> %24275, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24291 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24289, <32 x i16> %24282, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24292 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24290, <32 x i16> %24291, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24293 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24292, <32 x i16> %24261, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24294 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24293, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24295 = shufflevector <32 x i16> %24294, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24296 = zext i32 %.pre-phi3574 to i64
  %24297 = mul nsw i64 %299, %24296
  %24298 = add nsw i64 %301, %24297
  %24299 = getelementptr inbounds i16, i16* %blur_x879, i64 %24298
  %24300 = getelementptr inbounds i16, i16* %24299, i64 -32
  %24301 = bitcast i16* %24300 to <16 x i16>*
  store <16 x i16> %24295, <16 x i16>* %24301, align 2, !tbaa !399
  %24302 = shufflevector <32 x i16> %24294, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24303 = getelementptr inbounds i16, i16* %24299, i64 -16
  %24304 = bitcast i16* %24303 to <16 x i16>*
  store <16 x i16> %24302, <16 x i16>* %24304, align 2, !tbaa !399
  %24305 = zext i32 %.pre-phi3598 to i64
  %24306 = mul nsw i64 %24305, %333
  %24307 = add nsw i64 %24306, %296
  %24308 = getelementptr inbounds i16, i16* %blur_x879, i64 %24307
  %24309 = getelementptr inbounds i16, i16* %24308, i64 -32
  %24310 = bitcast i16* %24309 to <16 x i16>*
  %24311 = load <16 x i16>, <16 x i16>* %24310, align 2, !tbaa !399
  %24312 = getelementptr inbounds i16, i16* %24308, i64 -16
  %24313 = bitcast i16* %24312 to <16 x i16>*
  %24314 = load <16 x i16>, <16 x i16>* %24313, align 2, !tbaa !399
  %24315 = shufflevector <16 x i16> %24311, <16 x i16> %24314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24316 = zext i32 %.pre-phi3592 to i64
  %24317 = mul nsw i64 %24316, %333
  %24318 = add nsw i64 %24317, %296
  %24319 = getelementptr inbounds i16, i16* %blur_x879, i64 %24318
  %24320 = getelementptr inbounds i16, i16* %24319, i64 -32
  %24321 = bitcast i16* %24320 to <16 x i16>*
  %24322 = load <16 x i16>, <16 x i16>* %24321, align 2, !tbaa !399
  %24323 = getelementptr inbounds i16, i16* %24319, i64 -16
  %24324 = bitcast i16* %24323 to <16 x i16>*
  %24325 = load <16 x i16>, <16 x i16>* %24324, align 2, !tbaa !399
  %24326 = shufflevector <16 x i16> %24322, <16 x i16> %24325, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24327 = zext i32 %.pre-phi3604 to i64
  %24328 = mul nsw i64 %24327, %333
  %24329 = add nsw i64 %24328, %296
  %24330 = getelementptr inbounds i16, i16* %blur_x879, i64 %24329
  %24331 = getelementptr inbounds i16, i16* %24330, i64 -32
  %24332 = bitcast i16* %24331 to <16 x i16>*
  %24333 = load <16 x i16>, <16 x i16>* %24332, align 2, !tbaa !399
  %24334 = getelementptr inbounds i16, i16* %24330, i64 -16
  %24335 = bitcast i16* %24334 to <16 x i16>*
  %24336 = load <16 x i16>, <16 x i16>* %24335, align 2, !tbaa !399
  %24337 = shufflevector <16 x i16> %24333, <16 x i16> %24336, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24338 = mul nsw i64 %24296, %333
  %24339 = add nsw i64 %24338, %296
  %24340 = getelementptr inbounds i16, i16* %blur_x879, i64 %24339
  %24341 = getelementptr inbounds i16, i16* %24340, i64 -32
  %24342 = bitcast i16* %24341 to <16 x i16>*
  %24343 = load <16 x i16>, <16 x i16>* %24342, align 2, !tbaa !399
  %24344 = getelementptr inbounds i16, i16* %24340, i64 -16
  %24345 = bitcast i16* %24344 to <16 x i16>*
  %24346 = load <16 x i16>, <16 x i16>* %24345, align 2, !tbaa !399
  %24347 = shufflevector <16 x i16> %24343, <16 x i16> %24346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24348 = zext i32 %.pre-phi3570 to i64
  %24349 = mul nsw i64 %24348, %333
  %24350 = add nsw i64 %24349, %296
  %24351 = getelementptr inbounds i16, i16* %blur_x879, i64 %24350
  %24352 = getelementptr inbounds i16, i16* %24351, i64 -32
  %24353 = bitcast i16* %24352 to <16 x i16>*
  %24354 = load <16 x i16>, <16 x i16>* %24353, align 2, !tbaa !399
  %24355 = getelementptr inbounds i16, i16* %24351, i64 -16
  %24356 = bitcast i16* %24355 to <16 x i16>*
  %24357 = load <16 x i16>, <16 x i16>* %24356, align 2, !tbaa !399
  %24358 = shufflevector <16 x i16> %24354, <16 x i16> %24357, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24359 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24326, <32 x i16> %24337, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24360 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24358, <32 x i16> %24347, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24361 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24359, <32 x i16> %24360, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24362 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24361, <32 x i16> %24315, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24363 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24362, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24364 = shufflevector <32 x i16> %24363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24365 = sext i32 %a379 to i64
  %24366 = add nsw i64 %24365, 21
  %24367 = mul nsw i64 %24366, %334
  %24368 = add nsw i64 %336, %24367
  %24369 = getelementptr inbounds i16, i16* %263, i64 %24368
  %24370 = getelementptr inbounds i16, i16* %24369, i64 -32
  %24371 = bitcast i16* %24370 to <16 x i16>*
  store <16 x i16> %24364, <16 x i16>* %24371, align 2, !tbaa !401
  %24372 = shufflevector <32 x i16> %24363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24373 = getelementptr inbounds i16, i16* %24369, i64 -16
  %24374 = bitcast i16* %24373 to <16 x i16>*
  store <16 x i16> %24372, <16 x i16>* %24374, align 2, !tbaa !401
  br label %after_bb1902

"for blur_y.s0.x.x.rebased1917":                  ; preds = %"for blur_y.s0.x.x.rebased1917.preheader", %"consume blur_x1925"
  %indvars.iv3440 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1917.preheader" ], [ %indvars.iv.next3441, %"consume blur_x1925" ]
  %24375 = add nsw i64 %indvars.iv3440, %303
  %24376 = icmp slt i64 %24375, 1
  %24377 = trunc i64 %24375 to i32
  %24378 = shl nsw i32 %24377, 5
  %24379 = icmp sgt i32 %198, %24378
  %24380 = or i1 %24376, %24379
  br i1 %24380, label %"produce blur_x1923", label %"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge"

"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1917"
  %.pre3641 = shl nsw i64 %24375, 5
  br label %"consume blur_x1925"

"end for blur_y.s0.x.x.rebased1918":              ; preds = %"consume blur_x1925", %after_bb1902
  br i1 %304, label %"for blur_y.s0.x.x.rebased1933.preheader", label %"end for blur_y.s0.x.x.rebased1934", !prof !386

"for blur_y.s0.x.x.rebased1933.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1918"
  %24381 = sext i32 %t1688914 to i64
  %24382 = zext i32 %.pre-phi3598 to i64
  %24383 = mul nsw i64 %24382, %337
  %24384 = sub nsw i64 %24383, %298
  %24385 = zext i32 %.pre-phi3592 to i64
  %24386 = mul nsw i64 %24385, %337
  %24387 = sub nsw i64 %24386, %298
  %24388 = zext i32 %.pre-phi3604 to i64
  %24389 = mul nsw i64 %24388, %337
  %24390 = sub nsw i64 %24389, %298
  %24391 = zext i32 %.pre-phi3574 to i64
  %24392 = mul nsw i64 %24391, %337
  %24393 = sub nsw i64 %24392, %298
  %24394 = zext i32 %.pre-phi3570 to i64
  %24395 = mul nsw i64 %24394, %337
  %24396 = sub nsw i64 %24395, %298
  %24397 = sext i32 %a379 to i64
  %24398 = add nsw i64 %24397, 21
  %24399 = mul nsw i64 %24398, %334
  %24400 = add nsw i64 %24399, %338
  br label %"for blur_y.s0.x.x.rebased1933"

"produce blur_x1923":                             ; preds = %"for blur_y.s0.x.x.rebased1917"
  %t10481924 = add nsw i32 %463, %24378
  %24401 = sext i32 %t10481924 to i64
  %24402 = getelementptr inbounds i16, i16* %read_input822, i64 %24401
  %24403 = getelementptr inbounds i16, i16* %24402, i64 1
  %24404 = bitcast i16* %24403 to <16 x i16>*
  %24405 = load <16 x i16>, <16 x i16>* %24404, align 2, !tbaa !396
  %24406 = getelementptr inbounds i16, i16* %24402, i64 17
  %24407 = bitcast i16* %24406 to <16 x i16>*
  %24408 = load <16 x i16>, <16 x i16>* %24407, align 2, !tbaa !396
  %24409 = shufflevector <16 x i16> %24405, <16 x i16> %24408, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24410 = bitcast i16* %24402 to <16 x i16>*
  %24411 = load <16 x i16>, <16 x i16>* %24410, align 2, !tbaa !396
  %24412 = getelementptr inbounds i16, i16* %24402, i64 16
  %24413 = bitcast i16* %24412 to <16 x i16>*
  %24414 = load <16 x i16>, <16 x i16>* %24413, align 2, !tbaa !396
  %24415 = shufflevector <16 x i16> %24411, <16 x i16> %24414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24416 = getelementptr inbounds i16, i16* %24402, i64 2
  %24417 = bitcast i16* %24416 to <16 x i16>*
  %24418 = load <16 x i16>, <16 x i16>* %24417, align 2, !tbaa !396
  %24419 = getelementptr inbounds i16, i16* %24402, i64 18
  %24420 = bitcast i16* %24419 to <16 x i16>*
  %24421 = load <16 x i16>, <16 x i16>* %24420, align 2, !tbaa !396
  %24422 = shufflevector <16 x i16> %24418, <16 x i16> %24421, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24423 = getelementptr inbounds i16, i16* %24402, i64 4
  %24424 = bitcast i16* %24423 to <16 x i16>*
  %24425 = load <16 x i16>, <16 x i16>* %24424, align 2, !tbaa !396
  %24426 = getelementptr inbounds i16, i16* %24402, i64 20
  %24427 = bitcast i16* %24426 to <16 x i16>*
  %24428 = load <16 x i16>, <16 x i16>* %24427, align 2, !tbaa !396
  %24429 = shufflevector <16 x i16> %24425, <16 x i16> %24428, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24430 = getelementptr inbounds i16, i16* %24402, i64 3
  %24431 = bitcast i16* %24430 to <16 x i16>*
  %24432 = load <16 x i16>, <16 x i16>* %24431, align 2, !tbaa !396
  %24433 = getelementptr inbounds i16, i16* %24402, i64 19
  %24434 = bitcast i16* %24433 to <16 x i16>*
  %24435 = load <16 x i16>, <16 x i16>* %24434, align 2, !tbaa !396
  %24436 = shufflevector <16 x i16> %24432, <16 x i16> %24435, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24437 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24415, <32 x i16> %24422, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24438 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24436, <32 x i16> %24429, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24439 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24437, <32 x i16> %24438, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24440 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24439, <32 x i16> %24409, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24441 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24440, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24442 = shufflevector <32 x i16> %24441, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24443 = shl nsw i64 %24375, 5
  %24444 = add nsw i64 %24443, %24234
  %24445 = getelementptr inbounds i16, i16* %blur_x879, i64 %24444
  %24446 = bitcast i16* %24445 to <16 x i16>*
  store <16 x i16> %24442, <16 x i16>* %24446, align 2, !tbaa !399
  %24447 = shufflevector <32 x i16> %24441, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24448 = getelementptr inbounds i16, i16* %24445, i64 16
  %24449 = bitcast i16* %24448 to <16 x i16>*
  store <16 x i16> %24447, <16 x i16>* %24449, align 2, !tbaa !399
  br label %"consume blur_x1925"

"consume blur_x1925":                             ; preds = %"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge", %"produce blur_x1923"
  %.pre-phi3642 = phi i64 [ %.pre3641, %"for blur_y.s0.x.x.rebased1917.consume blur_x1925_crit_edge" ], [ %24443, %"produce blur_x1923" ]
  %24450 = add nsw i64 %24237, %.pre-phi3642
  %24451 = getelementptr inbounds i16, i16* %blur_x879, i64 %24450
  %24452 = bitcast i16* %24451 to <16 x i16>*
  %24453 = load <16 x i16>, <16 x i16>* %24452, align 2, !tbaa !399
  %24454 = getelementptr inbounds i16, i16* %24451, i64 16
  %24455 = bitcast i16* %24454 to <16 x i16>*
  %24456 = load <16 x i16>, <16 x i16>* %24455, align 2, !tbaa !399
  %24457 = shufflevector <16 x i16> %24453, <16 x i16> %24456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24458 = add nsw i64 %24240, %.pre-phi3642
  %24459 = getelementptr inbounds i16, i16* %blur_x879, i64 %24458
  %24460 = bitcast i16* %24459 to <16 x i16>*
  %24461 = load <16 x i16>, <16 x i16>* %24460, align 2, !tbaa !399
  %24462 = getelementptr inbounds i16, i16* %24459, i64 16
  %24463 = bitcast i16* %24462 to <16 x i16>*
  %24464 = load <16 x i16>, <16 x i16>* %24463, align 2, !tbaa !399
  %24465 = shufflevector <16 x i16> %24461, <16 x i16> %24464, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24466 = add nsw i64 %24243, %.pre-phi3642
  %24467 = getelementptr inbounds i16, i16* %blur_x879, i64 %24466
  %24468 = bitcast i16* %24467 to <16 x i16>*
  %24469 = load <16 x i16>, <16 x i16>* %24468, align 2, !tbaa !399
  %24470 = getelementptr inbounds i16, i16* %24467, i64 16
  %24471 = bitcast i16* %24470 to <16 x i16>*
  %24472 = load <16 x i16>, <16 x i16>* %24471, align 2, !tbaa !399
  %24473 = shufflevector <16 x i16> %24469, <16 x i16> %24472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24474 = add nsw i64 %24246, %.pre-phi3642
  %24475 = getelementptr inbounds i16, i16* %blur_x879, i64 %24474
  %24476 = bitcast i16* %24475 to <16 x i16>*
  %24477 = load <16 x i16>, <16 x i16>* %24476, align 2, !tbaa !399
  %24478 = getelementptr inbounds i16, i16* %24475, i64 16
  %24479 = bitcast i16* %24478 to <16 x i16>*
  %24480 = load <16 x i16>, <16 x i16>* %24479, align 2, !tbaa !399
  %24481 = shufflevector <16 x i16> %24477, <16 x i16> %24480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24482 = add nsw i64 %24249, %.pre-phi3642
  %24483 = getelementptr inbounds i16, i16* %blur_x879, i64 %24482
  %24484 = bitcast i16* %24483 to <16 x i16>*
  %24485 = load <16 x i16>, <16 x i16>* %24484, align 2, !tbaa !399
  %24486 = getelementptr inbounds i16, i16* %24483, i64 16
  %24487 = bitcast i16* %24486 to <16 x i16>*
  %24488 = load <16 x i16>, <16 x i16>* %24487, align 2, !tbaa !399
  %24489 = shufflevector <16 x i16> %24485, <16 x i16> %24488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24490 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24465, <32 x i16> %24473, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24491 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24489, <32 x i16> %24481, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24492 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24490, <32 x i16> %24491, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24493 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24492, <32 x i16> %24457, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24494 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24493, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24495 = shufflevector <32 x i16> %24494, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24496 = add nsw i64 %24253, %.pre-phi3642
  %24497 = getelementptr inbounds i16, i16* %263, i64 %24496
  %24498 = bitcast i16* %24497 to <16 x i16>*
  store <16 x i16> %24495, <16 x i16>* %24498, align 2, !tbaa !401
  %24499 = shufflevector <32 x i16> %24494, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24500 = getelementptr inbounds i16, i16* %24497, i64 16
  %24501 = bitcast i16* %24500 to <16 x i16>*
  store <16 x i16> %24499, <16 x i16>* %24501, align 2, !tbaa !401
  %indvars.iv.next3441 = add nuw nsw i64 %indvars.iv3440, 1
  %24502 = icmp eq i64 %indvars.iv.next3441, %zext3442
  br i1 %24502, label %"end for blur_y.s0.x.x.rebased1918", label %"for blur_y.s0.x.x.rebased1917"

"for blur_y.s0.x.x.rebased1933":                  ; preds = %"for blur_y.s0.x.x.rebased1933.preheader", %"consume blur_x1944"
  %blur_y.s0.x.x.rebased1935 = phi i32 [ %24611, %"consume blur_x1944" ], [ 0, %"for blur_y.s0.x.x.rebased1933.preheader" ]
  %24503 = add nsw i32 %blur_y.s0.x.x.rebased1935, %t1626814
  %a4606 = shl nsw i32 %24503, 5
  %24504 = icmp sgt i32 %t1647, %a4606
  %blur_y.s0.x.v0.base.s1936 = select i1 %24504, i32 %a4606, i32 %t1647
  %24505 = icmp slt i32 %24503, 1
  %24506 = icmp sgt i32 %198, %a4606
  %24507 = or i1 %24505, %24506
  br i1 %24507, label %"produce blur_x1941", label %"consume blur_x1944"

"end for blur_y.s0.x.x.rebased1934":              ; preds = %"consume blur_x1944", %"end for blur_y.s0.x.x.rebased1918"
  br i1 %229, label %"produce blur_x1948", label %after_bb1945

"produce blur_x1941":                             ; preds = %"for blur_y.s0.x.x.rebased1933"
  %24508 = icmp slt i32 %blur_y.s0.x.v0.base.s1936, %198
  %blur_x.s0.x.v1.base.s1942 = select i1 %24508, i32 %blur_y.s0.x.v0.base.s1936, i32 %198
  %t10531943 = add nsw i32 %463, %blur_x.s0.x.v1.base.s1942
  %24509 = sext i32 %t10531943 to i64
  %24510 = getelementptr inbounds i16, i16* %read_input822, i64 %24509
  %24511 = getelementptr inbounds i16, i16* %24510, i64 1
  %24512 = bitcast i16* %24511 to <16 x i16>*
  %24513 = load <16 x i16>, <16 x i16>* %24512, align 2, !tbaa !396
  %24514 = getelementptr inbounds i16, i16* %24510, i64 17
  %24515 = bitcast i16* %24514 to <16 x i16>*
  %24516 = load <16 x i16>, <16 x i16>* %24515, align 2, !tbaa !396
  %24517 = shufflevector <16 x i16> %24513, <16 x i16> %24516, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24518 = bitcast i16* %24510 to <16 x i16>*
  %24519 = load <16 x i16>, <16 x i16>* %24518, align 2, !tbaa !396
  %24520 = getelementptr inbounds i16, i16* %24510, i64 16
  %24521 = bitcast i16* %24520 to <16 x i16>*
  %24522 = load <16 x i16>, <16 x i16>* %24521, align 2, !tbaa !396
  %24523 = shufflevector <16 x i16> %24519, <16 x i16> %24522, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24524 = getelementptr inbounds i16, i16* %24510, i64 2
  %24525 = bitcast i16* %24524 to <16 x i16>*
  %24526 = load <16 x i16>, <16 x i16>* %24525, align 2, !tbaa !396
  %24527 = getelementptr inbounds i16, i16* %24510, i64 18
  %24528 = bitcast i16* %24527 to <16 x i16>*
  %24529 = load <16 x i16>, <16 x i16>* %24528, align 2, !tbaa !396
  %24530 = shufflevector <16 x i16> %24526, <16 x i16> %24529, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24531 = getelementptr inbounds i16, i16* %24510, i64 4
  %24532 = bitcast i16* %24531 to <16 x i16>*
  %24533 = load <16 x i16>, <16 x i16>* %24532, align 2, !tbaa !396
  %24534 = getelementptr inbounds i16, i16* %24510, i64 20
  %24535 = bitcast i16* %24534 to <16 x i16>*
  %24536 = load <16 x i16>, <16 x i16>* %24535, align 2, !tbaa !396
  %24537 = shufflevector <16 x i16> %24533, <16 x i16> %24536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24538 = getelementptr inbounds i16, i16* %24510, i64 3
  %24539 = bitcast i16* %24538 to <16 x i16>*
  %24540 = load <16 x i16>, <16 x i16>* %24539, align 2, !tbaa !396
  %24541 = getelementptr inbounds i16, i16* %24510, i64 19
  %24542 = bitcast i16* %24541 to <16 x i16>*
  %24543 = load <16 x i16>, <16 x i16>* %24542, align 2, !tbaa !396
  %24544 = shufflevector <16 x i16> %24540, <16 x i16> %24543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24545 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24523, <32 x i16> %24530, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24546 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24544, <32 x i16> %24537, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24547 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24545, <32 x i16> %24546, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24548 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24547, <32 x i16> %24517, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24549 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24548, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24550 = shufflevector <32 x i16> %24549, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24551 = sext i32 %blur_x.s0.x.v1.base.s1942 to i64
  %24552 = add nsw i64 %24551, %24381
  %24553 = getelementptr inbounds i16, i16* %blur_x879, i64 %24552
  %24554 = bitcast i16* %24553 to <16 x i16>*
  store <16 x i16> %24550, <16 x i16>* %24554, align 2, !tbaa !399
  %24555 = shufflevector <32 x i16> %24549, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24556 = getelementptr inbounds i16, i16* %24553, i64 16
  %24557 = bitcast i16* %24556 to <16 x i16>*
  store <16 x i16> %24555, <16 x i16>* %24557, align 2, !tbaa !399
  br label %"consume blur_x1944"

"consume blur_x1944":                             ; preds = %"for blur_y.s0.x.x.rebased1933", %"produce blur_x1941"
  %24558 = sext i32 %blur_y.s0.x.v0.base.s1936 to i64
  %24559 = add nsw i64 %24384, %24558
  %24560 = getelementptr inbounds i16, i16* %blur_x879, i64 %24559
  %24561 = bitcast i16* %24560 to <16 x i16>*
  %24562 = load <16 x i16>, <16 x i16>* %24561, align 2, !tbaa !399
  %24563 = getelementptr inbounds i16, i16* %24560, i64 16
  %24564 = bitcast i16* %24563 to <16 x i16>*
  %24565 = load <16 x i16>, <16 x i16>* %24564, align 2, !tbaa !399
  %24566 = shufflevector <16 x i16> %24562, <16 x i16> %24565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24567 = add nsw i64 %24387, %24558
  %24568 = getelementptr inbounds i16, i16* %blur_x879, i64 %24567
  %24569 = bitcast i16* %24568 to <16 x i16>*
  %24570 = load <16 x i16>, <16 x i16>* %24569, align 2, !tbaa !399
  %24571 = getelementptr inbounds i16, i16* %24568, i64 16
  %24572 = bitcast i16* %24571 to <16 x i16>*
  %24573 = load <16 x i16>, <16 x i16>* %24572, align 2, !tbaa !399
  %24574 = shufflevector <16 x i16> %24570, <16 x i16> %24573, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24575 = add nsw i64 %24390, %24558
  %24576 = getelementptr inbounds i16, i16* %blur_x879, i64 %24575
  %24577 = bitcast i16* %24576 to <16 x i16>*
  %24578 = load <16 x i16>, <16 x i16>* %24577, align 2, !tbaa !399
  %24579 = getelementptr inbounds i16, i16* %24576, i64 16
  %24580 = bitcast i16* %24579 to <16 x i16>*
  %24581 = load <16 x i16>, <16 x i16>* %24580, align 2, !tbaa !399
  %24582 = shufflevector <16 x i16> %24578, <16 x i16> %24581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24583 = add nsw i64 %24393, %24558
  %24584 = getelementptr inbounds i16, i16* %blur_x879, i64 %24583
  %24585 = bitcast i16* %24584 to <16 x i16>*
  %24586 = load <16 x i16>, <16 x i16>* %24585, align 2, !tbaa !399
  %24587 = getelementptr inbounds i16, i16* %24584, i64 16
  %24588 = bitcast i16* %24587 to <16 x i16>*
  %24589 = load <16 x i16>, <16 x i16>* %24588, align 2, !tbaa !399
  %24590 = shufflevector <16 x i16> %24586, <16 x i16> %24589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24591 = add nsw i64 %24396, %24558
  %24592 = getelementptr inbounds i16, i16* %blur_x879, i64 %24591
  %24593 = bitcast i16* %24592 to <16 x i16>*
  %24594 = load <16 x i16>, <16 x i16>* %24593, align 2, !tbaa !399
  %24595 = getelementptr inbounds i16, i16* %24592, i64 16
  %24596 = bitcast i16* %24595 to <16 x i16>*
  %24597 = load <16 x i16>, <16 x i16>* %24596, align 2, !tbaa !399
  %24598 = shufflevector <16 x i16> %24594, <16 x i16> %24597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24599 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24574, <32 x i16> %24582, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24600 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24598, <32 x i16> %24590, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24601 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24599, <32 x i16> %24600, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24602 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24601, <32 x i16> %24566, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24603 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24602, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24604 = shufflevector <32 x i16> %24603, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24605 = add nsw i64 %24400, %24558
  %24606 = getelementptr inbounds i16, i16* %263, i64 %24605
  %24607 = bitcast i16* %24606 to <16 x i16>*
  store <16 x i16> %24604, <16 x i16>* %24607, align 2, !tbaa !401
  %24608 = shufflevector <32 x i16> %24603, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24609 = getelementptr inbounds i16, i16* %24606, i64 16
  %24610 = bitcast i16* %24609 to <16 x i16>*
  store <16 x i16> %24608, <16 x i16>* %24610, align 2, !tbaa !401
  %24611 = add nuw nsw i32 %blur_y.s0.x.x.rebased1935, 1
  %.not2578 = icmp eq i32 %24611, %t1683898
  br i1 %.not2578, label %"end for blur_y.s0.x.x.rebased1934", label %"for blur_y.s0.x.x.rebased1933"

after_bb1945:                                     ; preds = %"end for blur_y.s0.x.x.rebased1934", %"produce blur_x1948"
  br i1 %302, label %"for blur_y.s0.x.x.rebased1960.preheader", label %"end for blur_y.s0.x.x.rebased1961", !prof !386

"for blur_y.s0.x.x.rebased1960.preheader":        ; preds = %after_bb1945
  %24612 = sext i32 %t1694944 to i64
  %24613 = zext i32 %.pre-phi3604 to i64
  %24614 = mul nsw i64 %24613, %337
  %24615 = sub nsw i64 %24614, %298
  %24616 = zext i32 %.pre-phi3598 to i64
  %24617 = mul nsw i64 %24616, %337
  %24618 = sub nsw i64 %24617, %298
  %24619 = zext i32 %.pre-phi3570 to i64
  %24620 = mul nsw i64 %24619, %337
  %24621 = sub nsw i64 %24620, %298
  %24622 = zext i32 %.pre-phi3578 to i64
  %24623 = mul nsw i64 %24622, %337
  %24624 = sub nsw i64 %24623, %298
  %24625 = zext i32 %.pre-phi3574 to i64
  %24626 = mul nsw i64 %24625, %337
  %24627 = sub nsw i64 %24626, %298
  %24628 = sext i32 %a379 to i64
  %24629 = add nsw i64 %24628, 22
  %24630 = mul nsw i64 %24629, %334
  %24631 = add nsw i64 %24630, %338
  br label %"for blur_y.s0.x.x.rebased1960"

"produce blur_x1948":                             ; preds = %"end for blur_y.s0.x.x.rebased1934"
  %24632 = getelementptr inbounds i16, i16* %read_input822, i64 %467
  %24633 = getelementptr inbounds i16, i16* %24632, i64 -31
  %24634 = bitcast i16* %24633 to <16 x i16>*
  %24635 = load <16 x i16>, <16 x i16>* %24634, align 2, !tbaa !396
  %24636 = getelementptr inbounds i16, i16* %24632, i64 -15
  %24637 = bitcast i16* %24636 to <16 x i16>*
  %24638 = load <16 x i16>, <16 x i16>* %24637, align 2, !tbaa !396
  %24639 = shufflevector <16 x i16> %24635, <16 x i16> %24638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24640 = getelementptr inbounds i16, i16* %24632, i64 -32
  %24641 = bitcast i16* %24640 to <16 x i16>*
  %24642 = load <16 x i16>, <16 x i16>* %24641, align 2, !tbaa !396
  %24643 = getelementptr inbounds i16, i16* %24632, i64 -16
  %24644 = bitcast i16* %24643 to <16 x i16>*
  %24645 = load <16 x i16>, <16 x i16>* %24644, align 2, !tbaa !396
  %24646 = shufflevector <16 x i16> %24642, <16 x i16> %24645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24647 = getelementptr inbounds i16, i16* %24632, i64 -30
  %24648 = bitcast i16* %24647 to <16 x i16>*
  %24649 = load <16 x i16>, <16 x i16>* %24648, align 2, !tbaa !396
  %24650 = getelementptr inbounds i16, i16* %24632, i64 -14
  %24651 = bitcast i16* %24650 to <16 x i16>*
  %24652 = load <16 x i16>, <16 x i16>* %24651, align 2, !tbaa !396
  %24653 = shufflevector <16 x i16> %24649, <16 x i16> %24652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24654 = getelementptr inbounds i16, i16* %24632, i64 -28
  %24655 = bitcast i16* %24654 to <16 x i16>*
  %24656 = load <16 x i16>, <16 x i16>* %24655, align 2, !tbaa !396
  %24657 = getelementptr inbounds i16, i16* %24632, i64 -12
  %24658 = bitcast i16* %24657 to <16 x i16>*
  %24659 = load <16 x i16>, <16 x i16>* %24658, align 2, !tbaa !396
  %24660 = shufflevector <16 x i16> %24656, <16 x i16> %24659, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24661 = getelementptr inbounds i16, i16* %24632, i64 -29
  %24662 = bitcast i16* %24661 to <16 x i16>*
  %24663 = load <16 x i16>, <16 x i16>* %24662, align 2, !tbaa !396
  %24664 = getelementptr inbounds i16, i16* %24632, i64 -13
  %24665 = bitcast i16* %24664 to <16 x i16>*
  %24666 = load <16 x i16>, <16 x i16>* %24665, align 2, !tbaa !396
  %24667 = shufflevector <16 x i16> %24663, <16 x i16> %24666, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24668 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24646, <32 x i16> %24653, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24669 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24667, <32 x i16> %24660, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24670 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24668, <32 x i16> %24669, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24671 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24670, <32 x i16> %24639, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24672 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24671, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24673 = shufflevector <32 x i16> %24672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24674 = zext i32 %.pre-phi3578 to i64
  %24675 = mul nsw i64 %299, %24674
  %24676 = add nsw i64 %301, %24675
  %24677 = getelementptr inbounds i16, i16* %blur_x879, i64 %24676
  %24678 = getelementptr inbounds i16, i16* %24677, i64 -32
  %24679 = bitcast i16* %24678 to <16 x i16>*
  store <16 x i16> %24673, <16 x i16>* %24679, align 2, !tbaa !399
  %24680 = shufflevector <32 x i16> %24672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24681 = getelementptr inbounds i16, i16* %24677, i64 -16
  %24682 = bitcast i16* %24681 to <16 x i16>*
  store <16 x i16> %24680, <16 x i16>* %24682, align 2, !tbaa !399
  %24683 = zext i32 %.pre-phi3604 to i64
  %24684 = mul nsw i64 %24683, %333
  %24685 = add nsw i64 %24684, %296
  %24686 = getelementptr inbounds i16, i16* %blur_x879, i64 %24685
  %24687 = getelementptr inbounds i16, i16* %24686, i64 -32
  %24688 = bitcast i16* %24687 to <16 x i16>*
  %24689 = load <16 x i16>, <16 x i16>* %24688, align 2, !tbaa !399
  %24690 = getelementptr inbounds i16, i16* %24686, i64 -16
  %24691 = bitcast i16* %24690 to <16 x i16>*
  %24692 = load <16 x i16>, <16 x i16>* %24691, align 2, !tbaa !399
  %24693 = shufflevector <16 x i16> %24689, <16 x i16> %24692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24694 = zext i32 %.pre-phi3598 to i64
  %24695 = mul nsw i64 %24694, %333
  %24696 = add nsw i64 %24695, %296
  %24697 = getelementptr inbounds i16, i16* %blur_x879, i64 %24696
  %24698 = getelementptr inbounds i16, i16* %24697, i64 -32
  %24699 = bitcast i16* %24698 to <16 x i16>*
  %24700 = load <16 x i16>, <16 x i16>* %24699, align 2, !tbaa !399
  %24701 = getelementptr inbounds i16, i16* %24697, i64 -16
  %24702 = bitcast i16* %24701 to <16 x i16>*
  %24703 = load <16 x i16>, <16 x i16>* %24702, align 2, !tbaa !399
  %24704 = shufflevector <16 x i16> %24700, <16 x i16> %24703, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24705 = zext i32 %.pre-phi3570 to i64
  %24706 = mul nsw i64 %24705, %333
  %24707 = add nsw i64 %24706, %296
  %24708 = getelementptr inbounds i16, i16* %blur_x879, i64 %24707
  %24709 = getelementptr inbounds i16, i16* %24708, i64 -32
  %24710 = bitcast i16* %24709 to <16 x i16>*
  %24711 = load <16 x i16>, <16 x i16>* %24710, align 2, !tbaa !399
  %24712 = getelementptr inbounds i16, i16* %24708, i64 -16
  %24713 = bitcast i16* %24712 to <16 x i16>*
  %24714 = load <16 x i16>, <16 x i16>* %24713, align 2, !tbaa !399
  %24715 = shufflevector <16 x i16> %24711, <16 x i16> %24714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24716 = mul nsw i64 %24674, %333
  %24717 = add nsw i64 %24716, %296
  %24718 = getelementptr inbounds i16, i16* %blur_x879, i64 %24717
  %24719 = getelementptr inbounds i16, i16* %24718, i64 -32
  %24720 = bitcast i16* %24719 to <16 x i16>*
  %24721 = load <16 x i16>, <16 x i16>* %24720, align 2, !tbaa !399
  %24722 = getelementptr inbounds i16, i16* %24718, i64 -16
  %24723 = bitcast i16* %24722 to <16 x i16>*
  %24724 = load <16 x i16>, <16 x i16>* %24723, align 2, !tbaa !399
  %24725 = shufflevector <16 x i16> %24721, <16 x i16> %24724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24726 = zext i32 %.pre-phi3574 to i64
  %24727 = mul nsw i64 %24726, %333
  %24728 = add nsw i64 %24727, %296
  %24729 = getelementptr inbounds i16, i16* %blur_x879, i64 %24728
  %24730 = getelementptr inbounds i16, i16* %24729, i64 -32
  %24731 = bitcast i16* %24730 to <16 x i16>*
  %24732 = load <16 x i16>, <16 x i16>* %24731, align 2, !tbaa !399
  %24733 = getelementptr inbounds i16, i16* %24729, i64 -16
  %24734 = bitcast i16* %24733 to <16 x i16>*
  %24735 = load <16 x i16>, <16 x i16>* %24734, align 2, !tbaa !399
  %24736 = shufflevector <16 x i16> %24732, <16 x i16> %24735, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24737 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24704, <32 x i16> %24715, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24738 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24736, <32 x i16> %24725, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24739 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24737, <32 x i16> %24738, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24740 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24739, <32 x i16> %24693, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24741 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24740, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24742 = shufflevector <32 x i16> %24741, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24743 = sext i32 %a379 to i64
  %24744 = add nsw i64 %24743, 22
  %24745 = mul nsw i64 %24744, %334
  %24746 = add nsw i64 %336, %24745
  %24747 = getelementptr inbounds i16, i16* %263, i64 %24746
  %24748 = getelementptr inbounds i16, i16* %24747, i64 -32
  %24749 = bitcast i16* %24748 to <16 x i16>*
  store <16 x i16> %24742, <16 x i16>* %24749, align 2, !tbaa !401
  %24750 = shufflevector <32 x i16> %24741, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24751 = getelementptr inbounds i16, i16* %24747, i64 -16
  %24752 = bitcast i16* %24751 to <16 x i16>*
  store <16 x i16> %24750, <16 x i16>* %24752, align 2, !tbaa !401
  br label %after_bb1945

"for blur_y.s0.x.x.rebased1960":                  ; preds = %"for blur_y.s0.x.x.rebased1960.preheader", %"consume blur_x1968"
  %indvars.iv3443 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1960.preheader" ], [ %indvars.iv.next3444, %"consume blur_x1968" ]
  %24753 = add nsw i64 %indvars.iv3443, %303
  %24754 = icmp slt i64 %24753, 1
  %24755 = trunc i64 %24753 to i32
  %24756 = shl nsw i32 %24755, 5
  %24757 = icmp sgt i32 %198, %24756
  %24758 = or i1 %24754, %24757
  br i1 %24758, label %"produce blur_x1966", label %"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge"

"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1960"
  %.pre3643 = shl nsw i64 %24753, 5
  br label %"consume blur_x1968"

"end for blur_y.s0.x.x.rebased1961":              ; preds = %"consume blur_x1968", %after_bb1945
  br i1 %304, label %"for blur_y.s0.x.x.rebased1976.preheader", label %"end for blur_y.s0.x.x.rebased1977", !prof !386

"for blur_y.s0.x.x.rebased1976.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1961"
  %24759 = sext i32 %t1694944 to i64
  %24760 = zext i32 %.pre-phi3604 to i64
  %24761 = mul nsw i64 %24760, %337
  %24762 = sub nsw i64 %24761, %298
  %24763 = zext i32 %.pre-phi3598 to i64
  %24764 = mul nsw i64 %24763, %337
  %24765 = sub nsw i64 %24764, %298
  %24766 = zext i32 %.pre-phi3570 to i64
  %24767 = mul nsw i64 %24766, %337
  %24768 = sub nsw i64 %24767, %298
  %24769 = zext i32 %.pre-phi3578 to i64
  %24770 = mul nsw i64 %24769, %337
  %24771 = sub nsw i64 %24770, %298
  %24772 = zext i32 %.pre-phi3574 to i64
  %24773 = mul nsw i64 %24772, %337
  %24774 = sub nsw i64 %24773, %298
  %24775 = sext i32 %a379 to i64
  %24776 = add nsw i64 %24775, 22
  %24777 = mul nsw i64 %24776, %334
  %24778 = add nsw i64 %24777, %338
  br label %"for blur_y.s0.x.x.rebased1976"

"produce blur_x1966":                             ; preds = %"for blur_y.s0.x.x.rebased1960"
  %t10641967 = add nsw i32 %469, %24756
  %24779 = sext i32 %t10641967 to i64
  %24780 = getelementptr inbounds i16, i16* %read_input822, i64 %24779
  %24781 = getelementptr inbounds i16, i16* %24780, i64 1
  %24782 = bitcast i16* %24781 to <16 x i16>*
  %24783 = load <16 x i16>, <16 x i16>* %24782, align 2, !tbaa !396
  %24784 = getelementptr inbounds i16, i16* %24780, i64 17
  %24785 = bitcast i16* %24784 to <16 x i16>*
  %24786 = load <16 x i16>, <16 x i16>* %24785, align 2, !tbaa !396
  %24787 = shufflevector <16 x i16> %24783, <16 x i16> %24786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24788 = bitcast i16* %24780 to <16 x i16>*
  %24789 = load <16 x i16>, <16 x i16>* %24788, align 2, !tbaa !396
  %24790 = getelementptr inbounds i16, i16* %24780, i64 16
  %24791 = bitcast i16* %24790 to <16 x i16>*
  %24792 = load <16 x i16>, <16 x i16>* %24791, align 2, !tbaa !396
  %24793 = shufflevector <16 x i16> %24789, <16 x i16> %24792, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24794 = getelementptr inbounds i16, i16* %24780, i64 2
  %24795 = bitcast i16* %24794 to <16 x i16>*
  %24796 = load <16 x i16>, <16 x i16>* %24795, align 2, !tbaa !396
  %24797 = getelementptr inbounds i16, i16* %24780, i64 18
  %24798 = bitcast i16* %24797 to <16 x i16>*
  %24799 = load <16 x i16>, <16 x i16>* %24798, align 2, !tbaa !396
  %24800 = shufflevector <16 x i16> %24796, <16 x i16> %24799, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24801 = getelementptr inbounds i16, i16* %24780, i64 4
  %24802 = bitcast i16* %24801 to <16 x i16>*
  %24803 = load <16 x i16>, <16 x i16>* %24802, align 2, !tbaa !396
  %24804 = getelementptr inbounds i16, i16* %24780, i64 20
  %24805 = bitcast i16* %24804 to <16 x i16>*
  %24806 = load <16 x i16>, <16 x i16>* %24805, align 2, !tbaa !396
  %24807 = shufflevector <16 x i16> %24803, <16 x i16> %24806, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24808 = getelementptr inbounds i16, i16* %24780, i64 3
  %24809 = bitcast i16* %24808 to <16 x i16>*
  %24810 = load <16 x i16>, <16 x i16>* %24809, align 2, !tbaa !396
  %24811 = getelementptr inbounds i16, i16* %24780, i64 19
  %24812 = bitcast i16* %24811 to <16 x i16>*
  %24813 = load <16 x i16>, <16 x i16>* %24812, align 2, !tbaa !396
  %24814 = shufflevector <16 x i16> %24810, <16 x i16> %24813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24815 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24793, <32 x i16> %24800, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24816 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24814, <32 x i16> %24807, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24817 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24815, <32 x i16> %24816, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24818 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24817, <32 x i16> %24787, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24819 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24818, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24820 = shufflevector <32 x i16> %24819, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24821 = shl nsw i64 %24753, 5
  %24822 = add nsw i64 %24821, %24612
  %24823 = getelementptr inbounds i16, i16* %blur_x879, i64 %24822
  %24824 = bitcast i16* %24823 to <16 x i16>*
  store <16 x i16> %24820, <16 x i16>* %24824, align 2, !tbaa !399
  %24825 = shufflevector <32 x i16> %24819, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24826 = getelementptr inbounds i16, i16* %24823, i64 16
  %24827 = bitcast i16* %24826 to <16 x i16>*
  store <16 x i16> %24825, <16 x i16>* %24827, align 2, !tbaa !399
  br label %"consume blur_x1968"

"consume blur_x1968":                             ; preds = %"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge", %"produce blur_x1966"
  %.pre-phi3644 = phi i64 [ %.pre3643, %"for blur_y.s0.x.x.rebased1960.consume blur_x1968_crit_edge" ], [ %24821, %"produce blur_x1966" ]
  %24828 = add nsw i64 %24615, %.pre-phi3644
  %24829 = getelementptr inbounds i16, i16* %blur_x879, i64 %24828
  %24830 = bitcast i16* %24829 to <16 x i16>*
  %24831 = load <16 x i16>, <16 x i16>* %24830, align 2, !tbaa !399
  %24832 = getelementptr inbounds i16, i16* %24829, i64 16
  %24833 = bitcast i16* %24832 to <16 x i16>*
  %24834 = load <16 x i16>, <16 x i16>* %24833, align 2, !tbaa !399
  %24835 = shufflevector <16 x i16> %24831, <16 x i16> %24834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24836 = add nsw i64 %24618, %.pre-phi3644
  %24837 = getelementptr inbounds i16, i16* %blur_x879, i64 %24836
  %24838 = bitcast i16* %24837 to <16 x i16>*
  %24839 = load <16 x i16>, <16 x i16>* %24838, align 2, !tbaa !399
  %24840 = getelementptr inbounds i16, i16* %24837, i64 16
  %24841 = bitcast i16* %24840 to <16 x i16>*
  %24842 = load <16 x i16>, <16 x i16>* %24841, align 2, !tbaa !399
  %24843 = shufflevector <16 x i16> %24839, <16 x i16> %24842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24844 = add nsw i64 %24621, %.pre-phi3644
  %24845 = getelementptr inbounds i16, i16* %blur_x879, i64 %24844
  %24846 = bitcast i16* %24845 to <16 x i16>*
  %24847 = load <16 x i16>, <16 x i16>* %24846, align 2, !tbaa !399
  %24848 = getelementptr inbounds i16, i16* %24845, i64 16
  %24849 = bitcast i16* %24848 to <16 x i16>*
  %24850 = load <16 x i16>, <16 x i16>* %24849, align 2, !tbaa !399
  %24851 = shufflevector <16 x i16> %24847, <16 x i16> %24850, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24852 = add nsw i64 %24624, %.pre-phi3644
  %24853 = getelementptr inbounds i16, i16* %blur_x879, i64 %24852
  %24854 = bitcast i16* %24853 to <16 x i16>*
  %24855 = load <16 x i16>, <16 x i16>* %24854, align 2, !tbaa !399
  %24856 = getelementptr inbounds i16, i16* %24853, i64 16
  %24857 = bitcast i16* %24856 to <16 x i16>*
  %24858 = load <16 x i16>, <16 x i16>* %24857, align 2, !tbaa !399
  %24859 = shufflevector <16 x i16> %24855, <16 x i16> %24858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24860 = add nsw i64 %24627, %.pre-phi3644
  %24861 = getelementptr inbounds i16, i16* %blur_x879, i64 %24860
  %24862 = bitcast i16* %24861 to <16 x i16>*
  %24863 = load <16 x i16>, <16 x i16>* %24862, align 2, !tbaa !399
  %24864 = getelementptr inbounds i16, i16* %24861, i64 16
  %24865 = bitcast i16* %24864 to <16 x i16>*
  %24866 = load <16 x i16>, <16 x i16>* %24865, align 2, !tbaa !399
  %24867 = shufflevector <16 x i16> %24863, <16 x i16> %24866, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24868 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24843, <32 x i16> %24851, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24869 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24867, <32 x i16> %24859, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24870 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24868, <32 x i16> %24869, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24871 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24870, <32 x i16> %24835, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24872 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24871, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24873 = shufflevector <32 x i16> %24872, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24874 = add nsw i64 %24631, %.pre-phi3644
  %24875 = getelementptr inbounds i16, i16* %263, i64 %24874
  %24876 = bitcast i16* %24875 to <16 x i16>*
  store <16 x i16> %24873, <16 x i16>* %24876, align 2, !tbaa !401
  %24877 = shufflevector <32 x i16> %24872, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24878 = getelementptr inbounds i16, i16* %24875, i64 16
  %24879 = bitcast i16* %24878 to <16 x i16>*
  store <16 x i16> %24877, <16 x i16>* %24879, align 2, !tbaa !401
  %indvars.iv.next3444 = add nuw nsw i64 %indvars.iv3443, 1
  %24880 = icmp eq i64 %indvars.iv.next3444, %zext3445
  br i1 %24880, label %"end for blur_y.s0.x.x.rebased1961", label %"for blur_y.s0.x.x.rebased1960"

"for blur_y.s0.x.x.rebased1976":                  ; preds = %"for blur_y.s0.x.x.rebased1976.preheader", %"consume blur_x1987"
  %blur_y.s0.x.x.rebased1978 = phi i32 [ %24989, %"consume blur_x1987" ], [ 0, %"for blur_y.s0.x.x.rebased1976.preheader" ]
  %24881 = add nsw i32 %blur_y.s0.x.x.rebased1978, %t1626814
  %a4763 = shl nsw i32 %24881, 5
  %24882 = icmp sgt i32 %t1647, %a4763
  %blur_y.s0.x.v0.base.s1979 = select i1 %24882, i32 %a4763, i32 %t1647
  %24883 = icmp slt i32 %24881, 1
  %24884 = icmp sgt i32 %198, %a4763
  %24885 = or i1 %24883, %24884
  br i1 %24885, label %"produce blur_x1984", label %"consume blur_x1987"

"end for blur_y.s0.x.x.rebased1977":              ; preds = %"consume blur_x1987", %"end for blur_y.s0.x.x.rebased1961"
  br i1 %229, label %"produce blur_x1991", label %after_bb1988

"produce blur_x1984":                             ; preds = %"for blur_y.s0.x.x.rebased1976"
  %24886 = icmp slt i32 %blur_y.s0.x.v0.base.s1979, %198
  %blur_x.s0.x.v1.base.s1985 = select i1 %24886, i32 %blur_y.s0.x.v0.base.s1979, i32 %198
  %t10691986 = add nsw i32 %469, %blur_x.s0.x.v1.base.s1985
  %24887 = sext i32 %t10691986 to i64
  %24888 = getelementptr inbounds i16, i16* %read_input822, i64 %24887
  %24889 = getelementptr inbounds i16, i16* %24888, i64 1
  %24890 = bitcast i16* %24889 to <16 x i16>*
  %24891 = load <16 x i16>, <16 x i16>* %24890, align 2, !tbaa !396
  %24892 = getelementptr inbounds i16, i16* %24888, i64 17
  %24893 = bitcast i16* %24892 to <16 x i16>*
  %24894 = load <16 x i16>, <16 x i16>* %24893, align 2, !tbaa !396
  %24895 = shufflevector <16 x i16> %24891, <16 x i16> %24894, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24896 = bitcast i16* %24888 to <16 x i16>*
  %24897 = load <16 x i16>, <16 x i16>* %24896, align 2, !tbaa !396
  %24898 = getelementptr inbounds i16, i16* %24888, i64 16
  %24899 = bitcast i16* %24898 to <16 x i16>*
  %24900 = load <16 x i16>, <16 x i16>* %24899, align 2, !tbaa !396
  %24901 = shufflevector <16 x i16> %24897, <16 x i16> %24900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24902 = getelementptr inbounds i16, i16* %24888, i64 2
  %24903 = bitcast i16* %24902 to <16 x i16>*
  %24904 = load <16 x i16>, <16 x i16>* %24903, align 2, !tbaa !396
  %24905 = getelementptr inbounds i16, i16* %24888, i64 18
  %24906 = bitcast i16* %24905 to <16 x i16>*
  %24907 = load <16 x i16>, <16 x i16>* %24906, align 2, !tbaa !396
  %24908 = shufflevector <16 x i16> %24904, <16 x i16> %24907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24909 = getelementptr inbounds i16, i16* %24888, i64 4
  %24910 = bitcast i16* %24909 to <16 x i16>*
  %24911 = load <16 x i16>, <16 x i16>* %24910, align 2, !tbaa !396
  %24912 = getelementptr inbounds i16, i16* %24888, i64 20
  %24913 = bitcast i16* %24912 to <16 x i16>*
  %24914 = load <16 x i16>, <16 x i16>* %24913, align 2, !tbaa !396
  %24915 = shufflevector <16 x i16> %24911, <16 x i16> %24914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24916 = getelementptr inbounds i16, i16* %24888, i64 3
  %24917 = bitcast i16* %24916 to <16 x i16>*
  %24918 = load <16 x i16>, <16 x i16>* %24917, align 2, !tbaa !396
  %24919 = getelementptr inbounds i16, i16* %24888, i64 19
  %24920 = bitcast i16* %24919 to <16 x i16>*
  %24921 = load <16 x i16>, <16 x i16>* %24920, align 2, !tbaa !396
  %24922 = shufflevector <16 x i16> %24918, <16 x i16> %24921, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24923 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24901, <32 x i16> %24908, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24924 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24922, <32 x i16> %24915, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24925 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24923, <32 x i16> %24924, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24926 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24925, <32 x i16> %24895, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24927 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24926, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24928 = shufflevector <32 x i16> %24927, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24929 = sext i32 %blur_x.s0.x.v1.base.s1985 to i64
  %24930 = add nsw i64 %24929, %24759
  %24931 = getelementptr inbounds i16, i16* %blur_x879, i64 %24930
  %24932 = bitcast i16* %24931 to <16 x i16>*
  store <16 x i16> %24928, <16 x i16>* %24932, align 2, !tbaa !399
  %24933 = shufflevector <32 x i16> %24927, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24934 = getelementptr inbounds i16, i16* %24931, i64 16
  %24935 = bitcast i16* %24934 to <16 x i16>*
  store <16 x i16> %24933, <16 x i16>* %24935, align 2, !tbaa !399
  br label %"consume blur_x1987"

"consume blur_x1987":                             ; preds = %"for blur_y.s0.x.x.rebased1976", %"produce blur_x1984"
  %24936 = sext i32 %blur_y.s0.x.v0.base.s1979 to i64
  %24937 = add nsw i64 %24762, %24936
  %24938 = getelementptr inbounds i16, i16* %blur_x879, i64 %24937
  %24939 = bitcast i16* %24938 to <16 x i16>*
  %24940 = load <16 x i16>, <16 x i16>* %24939, align 2, !tbaa !399
  %24941 = getelementptr inbounds i16, i16* %24938, i64 16
  %24942 = bitcast i16* %24941 to <16 x i16>*
  %24943 = load <16 x i16>, <16 x i16>* %24942, align 2, !tbaa !399
  %24944 = shufflevector <16 x i16> %24940, <16 x i16> %24943, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24945 = add nsw i64 %24765, %24936
  %24946 = getelementptr inbounds i16, i16* %blur_x879, i64 %24945
  %24947 = bitcast i16* %24946 to <16 x i16>*
  %24948 = load <16 x i16>, <16 x i16>* %24947, align 2, !tbaa !399
  %24949 = getelementptr inbounds i16, i16* %24946, i64 16
  %24950 = bitcast i16* %24949 to <16 x i16>*
  %24951 = load <16 x i16>, <16 x i16>* %24950, align 2, !tbaa !399
  %24952 = shufflevector <16 x i16> %24948, <16 x i16> %24951, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24953 = add nsw i64 %24768, %24936
  %24954 = getelementptr inbounds i16, i16* %blur_x879, i64 %24953
  %24955 = bitcast i16* %24954 to <16 x i16>*
  %24956 = load <16 x i16>, <16 x i16>* %24955, align 2, !tbaa !399
  %24957 = getelementptr inbounds i16, i16* %24954, i64 16
  %24958 = bitcast i16* %24957 to <16 x i16>*
  %24959 = load <16 x i16>, <16 x i16>* %24958, align 2, !tbaa !399
  %24960 = shufflevector <16 x i16> %24956, <16 x i16> %24959, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24961 = add nsw i64 %24771, %24936
  %24962 = getelementptr inbounds i16, i16* %blur_x879, i64 %24961
  %24963 = bitcast i16* %24962 to <16 x i16>*
  %24964 = load <16 x i16>, <16 x i16>* %24963, align 2, !tbaa !399
  %24965 = getelementptr inbounds i16, i16* %24962, i64 16
  %24966 = bitcast i16* %24965 to <16 x i16>*
  %24967 = load <16 x i16>, <16 x i16>* %24966, align 2, !tbaa !399
  %24968 = shufflevector <16 x i16> %24964, <16 x i16> %24967, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24969 = add nsw i64 %24774, %24936
  %24970 = getelementptr inbounds i16, i16* %blur_x879, i64 %24969
  %24971 = bitcast i16* %24970 to <16 x i16>*
  %24972 = load <16 x i16>, <16 x i16>* %24971, align 2, !tbaa !399
  %24973 = getelementptr inbounds i16, i16* %24970, i64 16
  %24974 = bitcast i16* %24973 to <16 x i16>*
  %24975 = load <16 x i16>, <16 x i16>* %24974, align 2, !tbaa !399
  %24976 = shufflevector <16 x i16> %24972, <16 x i16> %24975, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24977 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24952, <32 x i16> %24960, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24978 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24976, <32 x i16> %24968, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24979 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24977, <32 x i16> %24978, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24980 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %24979, <32 x i16> %24944, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %24981 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %24980, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %24982 = shufflevector <32 x i16> %24981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24983 = add nsw i64 %24778, %24936
  %24984 = getelementptr inbounds i16, i16* %263, i64 %24983
  %24985 = bitcast i16* %24984 to <16 x i16>*
  store <16 x i16> %24982, <16 x i16>* %24985, align 2, !tbaa !401
  %24986 = shufflevector <32 x i16> %24981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24987 = getelementptr inbounds i16, i16* %24984, i64 16
  %24988 = bitcast i16* %24987 to <16 x i16>*
  store <16 x i16> %24986, <16 x i16>* %24988, align 2, !tbaa !401
  %24989 = add nuw nsw i32 %blur_y.s0.x.x.rebased1978, 1
  %.not2574 = icmp eq i32 %24989, %t1683898
  br i1 %.not2574, label %"end for blur_y.s0.x.x.rebased1977", label %"for blur_y.s0.x.x.rebased1976"

after_bb1988:                                     ; preds = %"end for blur_y.s0.x.x.rebased1977", %"produce blur_x1991"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2003.preheader", label %"end for blur_y.s0.x.x.rebased2004", !prof !386

"for blur_y.s0.x.x.rebased2003.preheader":        ; preds = %after_bb1988
  %24990 = sext i32 %t1700974 to i64
  %24991 = zext i32 %.pre-phi3570 to i64
  %24992 = mul nsw i64 %24991, %337
  %24993 = sub nsw i64 %24992, %298
  %24994 = zext i32 %.pre-phi3604 to i64
  %24995 = mul nsw i64 %24994, %337
  %24996 = sub nsw i64 %24995, %298
  %24997 = zext i32 %.pre-phi3574 to i64
  %24998 = mul nsw i64 %24997, %337
  %24999 = sub nsw i64 %24998, %298
  %25000 = zext i32 %.pre-phi3582 to i64
  %25001 = mul nsw i64 %25000, %337
  %25002 = sub nsw i64 %25001, %298
  %25003 = zext i32 %.pre-phi3578 to i64
  %25004 = mul nsw i64 %25003, %337
  %25005 = sub nsw i64 %25004, %298
  %25006 = sext i32 %a379 to i64
  %25007 = add nsw i64 %25006, 23
  %25008 = mul nsw i64 %25007, %334
  %25009 = add nsw i64 %25008, %338
  br label %"for blur_y.s0.x.x.rebased2003"

"produce blur_x1991":                             ; preds = %"end for blur_y.s0.x.x.rebased1977"
  %25010 = getelementptr inbounds i16, i16* %read_input822, i64 %473
  %25011 = getelementptr inbounds i16, i16* %25010, i64 -31
  %25012 = bitcast i16* %25011 to <16 x i16>*
  %25013 = load <16 x i16>, <16 x i16>* %25012, align 2, !tbaa !396
  %25014 = getelementptr inbounds i16, i16* %25010, i64 -15
  %25015 = bitcast i16* %25014 to <16 x i16>*
  %25016 = load <16 x i16>, <16 x i16>* %25015, align 2, !tbaa !396
  %25017 = shufflevector <16 x i16> %25013, <16 x i16> %25016, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25018 = getelementptr inbounds i16, i16* %25010, i64 -32
  %25019 = bitcast i16* %25018 to <16 x i16>*
  %25020 = load <16 x i16>, <16 x i16>* %25019, align 2, !tbaa !396
  %25021 = getelementptr inbounds i16, i16* %25010, i64 -16
  %25022 = bitcast i16* %25021 to <16 x i16>*
  %25023 = load <16 x i16>, <16 x i16>* %25022, align 2, !tbaa !396
  %25024 = shufflevector <16 x i16> %25020, <16 x i16> %25023, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25025 = getelementptr inbounds i16, i16* %25010, i64 -30
  %25026 = bitcast i16* %25025 to <16 x i16>*
  %25027 = load <16 x i16>, <16 x i16>* %25026, align 2, !tbaa !396
  %25028 = getelementptr inbounds i16, i16* %25010, i64 -14
  %25029 = bitcast i16* %25028 to <16 x i16>*
  %25030 = load <16 x i16>, <16 x i16>* %25029, align 2, !tbaa !396
  %25031 = shufflevector <16 x i16> %25027, <16 x i16> %25030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25032 = getelementptr inbounds i16, i16* %25010, i64 -28
  %25033 = bitcast i16* %25032 to <16 x i16>*
  %25034 = load <16 x i16>, <16 x i16>* %25033, align 2, !tbaa !396
  %25035 = getelementptr inbounds i16, i16* %25010, i64 -12
  %25036 = bitcast i16* %25035 to <16 x i16>*
  %25037 = load <16 x i16>, <16 x i16>* %25036, align 2, !tbaa !396
  %25038 = shufflevector <16 x i16> %25034, <16 x i16> %25037, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25039 = getelementptr inbounds i16, i16* %25010, i64 -29
  %25040 = bitcast i16* %25039 to <16 x i16>*
  %25041 = load <16 x i16>, <16 x i16>* %25040, align 2, !tbaa !396
  %25042 = getelementptr inbounds i16, i16* %25010, i64 -13
  %25043 = bitcast i16* %25042 to <16 x i16>*
  %25044 = load <16 x i16>, <16 x i16>* %25043, align 2, !tbaa !396
  %25045 = shufflevector <16 x i16> %25041, <16 x i16> %25044, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25046 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25024, <32 x i16> %25031, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25047 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25045, <32 x i16> %25038, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25048 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25046, <32 x i16> %25047, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25049 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25048, <32 x i16> %25017, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25050 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25049, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25051 = shufflevector <32 x i16> %25050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25052 = zext i32 %.pre-phi3582 to i64
  %25053 = mul nsw i64 %299, %25052
  %25054 = add nsw i64 %301, %25053
  %25055 = getelementptr inbounds i16, i16* %blur_x879, i64 %25054
  %25056 = getelementptr inbounds i16, i16* %25055, i64 -32
  %25057 = bitcast i16* %25056 to <16 x i16>*
  store <16 x i16> %25051, <16 x i16>* %25057, align 2, !tbaa !399
  %25058 = shufflevector <32 x i16> %25050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25059 = getelementptr inbounds i16, i16* %25055, i64 -16
  %25060 = bitcast i16* %25059 to <16 x i16>*
  store <16 x i16> %25058, <16 x i16>* %25060, align 2, !tbaa !399
  %25061 = zext i32 %.pre-phi3570 to i64
  %25062 = mul nsw i64 %25061, %333
  %25063 = add nsw i64 %25062, %296
  %25064 = getelementptr inbounds i16, i16* %blur_x879, i64 %25063
  %25065 = getelementptr inbounds i16, i16* %25064, i64 -32
  %25066 = bitcast i16* %25065 to <16 x i16>*
  %25067 = load <16 x i16>, <16 x i16>* %25066, align 2, !tbaa !399
  %25068 = getelementptr inbounds i16, i16* %25064, i64 -16
  %25069 = bitcast i16* %25068 to <16 x i16>*
  %25070 = load <16 x i16>, <16 x i16>* %25069, align 2, !tbaa !399
  %25071 = shufflevector <16 x i16> %25067, <16 x i16> %25070, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25072 = zext i32 %.pre-phi3604 to i64
  %25073 = mul nsw i64 %25072, %333
  %25074 = add nsw i64 %25073, %296
  %25075 = getelementptr inbounds i16, i16* %blur_x879, i64 %25074
  %25076 = getelementptr inbounds i16, i16* %25075, i64 -32
  %25077 = bitcast i16* %25076 to <16 x i16>*
  %25078 = load <16 x i16>, <16 x i16>* %25077, align 2, !tbaa !399
  %25079 = getelementptr inbounds i16, i16* %25075, i64 -16
  %25080 = bitcast i16* %25079 to <16 x i16>*
  %25081 = load <16 x i16>, <16 x i16>* %25080, align 2, !tbaa !399
  %25082 = shufflevector <16 x i16> %25078, <16 x i16> %25081, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25083 = zext i32 %.pre-phi3574 to i64
  %25084 = mul nsw i64 %25083, %333
  %25085 = add nsw i64 %25084, %296
  %25086 = getelementptr inbounds i16, i16* %blur_x879, i64 %25085
  %25087 = getelementptr inbounds i16, i16* %25086, i64 -32
  %25088 = bitcast i16* %25087 to <16 x i16>*
  %25089 = load <16 x i16>, <16 x i16>* %25088, align 2, !tbaa !399
  %25090 = getelementptr inbounds i16, i16* %25086, i64 -16
  %25091 = bitcast i16* %25090 to <16 x i16>*
  %25092 = load <16 x i16>, <16 x i16>* %25091, align 2, !tbaa !399
  %25093 = shufflevector <16 x i16> %25089, <16 x i16> %25092, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25094 = mul nsw i64 %25052, %333
  %25095 = add nsw i64 %25094, %296
  %25096 = getelementptr inbounds i16, i16* %blur_x879, i64 %25095
  %25097 = getelementptr inbounds i16, i16* %25096, i64 -32
  %25098 = bitcast i16* %25097 to <16 x i16>*
  %25099 = load <16 x i16>, <16 x i16>* %25098, align 2, !tbaa !399
  %25100 = getelementptr inbounds i16, i16* %25096, i64 -16
  %25101 = bitcast i16* %25100 to <16 x i16>*
  %25102 = load <16 x i16>, <16 x i16>* %25101, align 2, !tbaa !399
  %25103 = shufflevector <16 x i16> %25099, <16 x i16> %25102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25104 = zext i32 %.pre-phi3578 to i64
  %25105 = mul nsw i64 %25104, %333
  %25106 = add nsw i64 %25105, %296
  %25107 = getelementptr inbounds i16, i16* %blur_x879, i64 %25106
  %25108 = getelementptr inbounds i16, i16* %25107, i64 -32
  %25109 = bitcast i16* %25108 to <16 x i16>*
  %25110 = load <16 x i16>, <16 x i16>* %25109, align 2, !tbaa !399
  %25111 = getelementptr inbounds i16, i16* %25107, i64 -16
  %25112 = bitcast i16* %25111 to <16 x i16>*
  %25113 = load <16 x i16>, <16 x i16>* %25112, align 2, !tbaa !399
  %25114 = shufflevector <16 x i16> %25110, <16 x i16> %25113, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25115 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25082, <32 x i16> %25093, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25116 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25114, <32 x i16> %25103, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25117 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25115, <32 x i16> %25116, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25118 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25117, <32 x i16> %25071, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25119 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25118, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25120 = shufflevector <32 x i16> %25119, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25121 = sext i32 %a379 to i64
  %25122 = add nsw i64 %25121, 23
  %25123 = mul nsw i64 %25122, %334
  %25124 = add nsw i64 %336, %25123
  %25125 = getelementptr inbounds i16, i16* %263, i64 %25124
  %25126 = getelementptr inbounds i16, i16* %25125, i64 -32
  %25127 = bitcast i16* %25126 to <16 x i16>*
  store <16 x i16> %25120, <16 x i16>* %25127, align 2, !tbaa !401
  %25128 = shufflevector <32 x i16> %25119, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25129 = getelementptr inbounds i16, i16* %25125, i64 -16
  %25130 = bitcast i16* %25129 to <16 x i16>*
  store <16 x i16> %25128, <16 x i16>* %25130, align 2, !tbaa !401
  br label %after_bb1988

"for blur_y.s0.x.x.rebased2003":                  ; preds = %"for blur_y.s0.x.x.rebased2003.preheader", %"consume blur_x2011"
  %indvars.iv3446 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2003.preheader" ], [ %indvars.iv.next3447, %"consume blur_x2011" ]
  %25131 = add nsw i64 %indvars.iv3446, %303
  %25132 = icmp slt i64 %25131, 1
  %25133 = trunc i64 %25131 to i32
  %25134 = shl nsw i32 %25133, 5
  %25135 = icmp sgt i32 %198, %25134
  %25136 = or i1 %25132, %25135
  br i1 %25136, label %"produce blur_x2009", label %"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge"

"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2003"
  %.pre3645 = shl nsw i64 %25131, 5
  br label %"consume blur_x2011"

"end for blur_y.s0.x.x.rebased2004":              ; preds = %"consume blur_x2011", %after_bb1988
  br i1 %304, label %"for blur_y.s0.x.x.rebased2019.preheader", label %"end for blur_y.s0.x.x.rebased2020", !prof !386

"for blur_y.s0.x.x.rebased2019.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2004"
  %25137 = sext i32 %t1700974 to i64
  %25138 = zext i32 %.pre-phi3570 to i64
  %25139 = mul nsw i64 %25138, %337
  %25140 = sub nsw i64 %25139, %298
  %25141 = zext i32 %.pre-phi3604 to i64
  %25142 = mul nsw i64 %25141, %337
  %25143 = sub nsw i64 %25142, %298
  %25144 = zext i32 %.pre-phi3574 to i64
  %25145 = mul nsw i64 %25144, %337
  %25146 = sub nsw i64 %25145, %298
  %25147 = zext i32 %.pre-phi3582 to i64
  %25148 = mul nsw i64 %25147, %337
  %25149 = sub nsw i64 %25148, %298
  %25150 = zext i32 %.pre-phi3578 to i64
  %25151 = mul nsw i64 %25150, %337
  %25152 = sub nsw i64 %25151, %298
  %25153 = sext i32 %a379 to i64
  %25154 = add nsw i64 %25153, 23
  %25155 = mul nsw i64 %25154, %334
  %25156 = add nsw i64 %25155, %338
  br label %"for blur_y.s0.x.x.rebased2019"

"produce blur_x2009":                             ; preds = %"for blur_y.s0.x.x.rebased2003"
  %t10802010 = add nsw i32 %475, %25134
  %25157 = sext i32 %t10802010 to i64
  %25158 = getelementptr inbounds i16, i16* %read_input822, i64 %25157
  %25159 = getelementptr inbounds i16, i16* %25158, i64 1
  %25160 = bitcast i16* %25159 to <16 x i16>*
  %25161 = load <16 x i16>, <16 x i16>* %25160, align 2, !tbaa !396
  %25162 = getelementptr inbounds i16, i16* %25158, i64 17
  %25163 = bitcast i16* %25162 to <16 x i16>*
  %25164 = load <16 x i16>, <16 x i16>* %25163, align 2, !tbaa !396
  %25165 = shufflevector <16 x i16> %25161, <16 x i16> %25164, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25166 = bitcast i16* %25158 to <16 x i16>*
  %25167 = load <16 x i16>, <16 x i16>* %25166, align 2, !tbaa !396
  %25168 = getelementptr inbounds i16, i16* %25158, i64 16
  %25169 = bitcast i16* %25168 to <16 x i16>*
  %25170 = load <16 x i16>, <16 x i16>* %25169, align 2, !tbaa !396
  %25171 = shufflevector <16 x i16> %25167, <16 x i16> %25170, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25172 = getelementptr inbounds i16, i16* %25158, i64 2
  %25173 = bitcast i16* %25172 to <16 x i16>*
  %25174 = load <16 x i16>, <16 x i16>* %25173, align 2, !tbaa !396
  %25175 = getelementptr inbounds i16, i16* %25158, i64 18
  %25176 = bitcast i16* %25175 to <16 x i16>*
  %25177 = load <16 x i16>, <16 x i16>* %25176, align 2, !tbaa !396
  %25178 = shufflevector <16 x i16> %25174, <16 x i16> %25177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25179 = getelementptr inbounds i16, i16* %25158, i64 4
  %25180 = bitcast i16* %25179 to <16 x i16>*
  %25181 = load <16 x i16>, <16 x i16>* %25180, align 2, !tbaa !396
  %25182 = getelementptr inbounds i16, i16* %25158, i64 20
  %25183 = bitcast i16* %25182 to <16 x i16>*
  %25184 = load <16 x i16>, <16 x i16>* %25183, align 2, !tbaa !396
  %25185 = shufflevector <16 x i16> %25181, <16 x i16> %25184, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25186 = getelementptr inbounds i16, i16* %25158, i64 3
  %25187 = bitcast i16* %25186 to <16 x i16>*
  %25188 = load <16 x i16>, <16 x i16>* %25187, align 2, !tbaa !396
  %25189 = getelementptr inbounds i16, i16* %25158, i64 19
  %25190 = bitcast i16* %25189 to <16 x i16>*
  %25191 = load <16 x i16>, <16 x i16>* %25190, align 2, !tbaa !396
  %25192 = shufflevector <16 x i16> %25188, <16 x i16> %25191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25193 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25171, <32 x i16> %25178, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25194 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25192, <32 x i16> %25185, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25195 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25193, <32 x i16> %25194, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25196 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25195, <32 x i16> %25165, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25197 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25196, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25198 = shufflevector <32 x i16> %25197, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25199 = shl nsw i64 %25131, 5
  %25200 = add nsw i64 %25199, %24990
  %25201 = getelementptr inbounds i16, i16* %blur_x879, i64 %25200
  %25202 = bitcast i16* %25201 to <16 x i16>*
  store <16 x i16> %25198, <16 x i16>* %25202, align 2, !tbaa !399
  %25203 = shufflevector <32 x i16> %25197, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25204 = getelementptr inbounds i16, i16* %25201, i64 16
  %25205 = bitcast i16* %25204 to <16 x i16>*
  store <16 x i16> %25203, <16 x i16>* %25205, align 2, !tbaa !399
  br label %"consume blur_x2011"

"consume blur_x2011":                             ; preds = %"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge", %"produce blur_x2009"
  %.pre-phi3646 = phi i64 [ %.pre3645, %"for blur_y.s0.x.x.rebased2003.consume blur_x2011_crit_edge" ], [ %25199, %"produce blur_x2009" ]
  %25206 = add nsw i64 %24993, %.pre-phi3646
  %25207 = getelementptr inbounds i16, i16* %blur_x879, i64 %25206
  %25208 = bitcast i16* %25207 to <16 x i16>*
  %25209 = load <16 x i16>, <16 x i16>* %25208, align 2, !tbaa !399
  %25210 = getelementptr inbounds i16, i16* %25207, i64 16
  %25211 = bitcast i16* %25210 to <16 x i16>*
  %25212 = load <16 x i16>, <16 x i16>* %25211, align 2, !tbaa !399
  %25213 = shufflevector <16 x i16> %25209, <16 x i16> %25212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25214 = add nsw i64 %24996, %.pre-phi3646
  %25215 = getelementptr inbounds i16, i16* %blur_x879, i64 %25214
  %25216 = bitcast i16* %25215 to <16 x i16>*
  %25217 = load <16 x i16>, <16 x i16>* %25216, align 2, !tbaa !399
  %25218 = getelementptr inbounds i16, i16* %25215, i64 16
  %25219 = bitcast i16* %25218 to <16 x i16>*
  %25220 = load <16 x i16>, <16 x i16>* %25219, align 2, !tbaa !399
  %25221 = shufflevector <16 x i16> %25217, <16 x i16> %25220, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25222 = add nsw i64 %24999, %.pre-phi3646
  %25223 = getelementptr inbounds i16, i16* %blur_x879, i64 %25222
  %25224 = bitcast i16* %25223 to <16 x i16>*
  %25225 = load <16 x i16>, <16 x i16>* %25224, align 2, !tbaa !399
  %25226 = getelementptr inbounds i16, i16* %25223, i64 16
  %25227 = bitcast i16* %25226 to <16 x i16>*
  %25228 = load <16 x i16>, <16 x i16>* %25227, align 2, !tbaa !399
  %25229 = shufflevector <16 x i16> %25225, <16 x i16> %25228, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25230 = add nsw i64 %25002, %.pre-phi3646
  %25231 = getelementptr inbounds i16, i16* %blur_x879, i64 %25230
  %25232 = bitcast i16* %25231 to <16 x i16>*
  %25233 = load <16 x i16>, <16 x i16>* %25232, align 2, !tbaa !399
  %25234 = getelementptr inbounds i16, i16* %25231, i64 16
  %25235 = bitcast i16* %25234 to <16 x i16>*
  %25236 = load <16 x i16>, <16 x i16>* %25235, align 2, !tbaa !399
  %25237 = shufflevector <16 x i16> %25233, <16 x i16> %25236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25238 = add nsw i64 %25005, %.pre-phi3646
  %25239 = getelementptr inbounds i16, i16* %blur_x879, i64 %25238
  %25240 = bitcast i16* %25239 to <16 x i16>*
  %25241 = load <16 x i16>, <16 x i16>* %25240, align 2, !tbaa !399
  %25242 = getelementptr inbounds i16, i16* %25239, i64 16
  %25243 = bitcast i16* %25242 to <16 x i16>*
  %25244 = load <16 x i16>, <16 x i16>* %25243, align 2, !tbaa !399
  %25245 = shufflevector <16 x i16> %25241, <16 x i16> %25244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25246 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25221, <32 x i16> %25229, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25247 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25245, <32 x i16> %25237, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25248 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25246, <32 x i16> %25247, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25249 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25248, <32 x i16> %25213, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25250 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25249, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25251 = shufflevector <32 x i16> %25250, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25252 = add nsw i64 %25009, %.pre-phi3646
  %25253 = getelementptr inbounds i16, i16* %263, i64 %25252
  %25254 = bitcast i16* %25253 to <16 x i16>*
  store <16 x i16> %25251, <16 x i16>* %25254, align 2, !tbaa !401
  %25255 = shufflevector <32 x i16> %25250, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25256 = getelementptr inbounds i16, i16* %25253, i64 16
  %25257 = bitcast i16* %25256 to <16 x i16>*
  store <16 x i16> %25255, <16 x i16>* %25257, align 2, !tbaa !401
  %indvars.iv.next3447 = add nuw nsw i64 %indvars.iv3446, 1
  %25258 = icmp eq i64 %indvars.iv.next3447, %zext3448
  br i1 %25258, label %"end for blur_y.s0.x.x.rebased2004", label %"for blur_y.s0.x.x.rebased2003"

"for blur_y.s0.x.x.rebased2019":                  ; preds = %"for blur_y.s0.x.x.rebased2019.preheader", %"consume blur_x2030"
  %blur_y.s0.x.x.rebased2021 = phi i32 [ %25367, %"consume blur_x2030" ], [ 0, %"for blur_y.s0.x.x.rebased2019.preheader" ]
  %25259 = add nsw i32 %blur_y.s0.x.x.rebased2021, %t1626814
  %a4920 = shl nsw i32 %25259, 5
  %25260 = icmp sgt i32 %t1647, %a4920
  %blur_y.s0.x.v0.base.s2022 = select i1 %25260, i32 %a4920, i32 %t1647
  %25261 = icmp slt i32 %25259, 1
  %25262 = icmp sgt i32 %198, %a4920
  %25263 = or i1 %25261, %25262
  br i1 %25263, label %"produce blur_x2027", label %"consume blur_x2030"

"end for blur_y.s0.x.x.rebased2020":              ; preds = %"consume blur_x2030", %"end for blur_y.s0.x.x.rebased2004"
  br i1 %229, label %"produce blur_x2034", label %after_bb2031

"produce blur_x2027":                             ; preds = %"for blur_y.s0.x.x.rebased2019"
  %25264 = icmp slt i32 %blur_y.s0.x.v0.base.s2022, %198
  %blur_x.s0.x.v1.base.s2028 = select i1 %25264, i32 %blur_y.s0.x.v0.base.s2022, i32 %198
  %t10852029 = add nsw i32 %475, %blur_x.s0.x.v1.base.s2028
  %25265 = sext i32 %t10852029 to i64
  %25266 = getelementptr inbounds i16, i16* %read_input822, i64 %25265
  %25267 = getelementptr inbounds i16, i16* %25266, i64 1
  %25268 = bitcast i16* %25267 to <16 x i16>*
  %25269 = load <16 x i16>, <16 x i16>* %25268, align 2, !tbaa !396
  %25270 = getelementptr inbounds i16, i16* %25266, i64 17
  %25271 = bitcast i16* %25270 to <16 x i16>*
  %25272 = load <16 x i16>, <16 x i16>* %25271, align 2, !tbaa !396
  %25273 = shufflevector <16 x i16> %25269, <16 x i16> %25272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25274 = bitcast i16* %25266 to <16 x i16>*
  %25275 = load <16 x i16>, <16 x i16>* %25274, align 2, !tbaa !396
  %25276 = getelementptr inbounds i16, i16* %25266, i64 16
  %25277 = bitcast i16* %25276 to <16 x i16>*
  %25278 = load <16 x i16>, <16 x i16>* %25277, align 2, !tbaa !396
  %25279 = shufflevector <16 x i16> %25275, <16 x i16> %25278, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25280 = getelementptr inbounds i16, i16* %25266, i64 2
  %25281 = bitcast i16* %25280 to <16 x i16>*
  %25282 = load <16 x i16>, <16 x i16>* %25281, align 2, !tbaa !396
  %25283 = getelementptr inbounds i16, i16* %25266, i64 18
  %25284 = bitcast i16* %25283 to <16 x i16>*
  %25285 = load <16 x i16>, <16 x i16>* %25284, align 2, !tbaa !396
  %25286 = shufflevector <16 x i16> %25282, <16 x i16> %25285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25287 = getelementptr inbounds i16, i16* %25266, i64 4
  %25288 = bitcast i16* %25287 to <16 x i16>*
  %25289 = load <16 x i16>, <16 x i16>* %25288, align 2, !tbaa !396
  %25290 = getelementptr inbounds i16, i16* %25266, i64 20
  %25291 = bitcast i16* %25290 to <16 x i16>*
  %25292 = load <16 x i16>, <16 x i16>* %25291, align 2, !tbaa !396
  %25293 = shufflevector <16 x i16> %25289, <16 x i16> %25292, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25294 = getelementptr inbounds i16, i16* %25266, i64 3
  %25295 = bitcast i16* %25294 to <16 x i16>*
  %25296 = load <16 x i16>, <16 x i16>* %25295, align 2, !tbaa !396
  %25297 = getelementptr inbounds i16, i16* %25266, i64 19
  %25298 = bitcast i16* %25297 to <16 x i16>*
  %25299 = load <16 x i16>, <16 x i16>* %25298, align 2, !tbaa !396
  %25300 = shufflevector <16 x i16> %25296, <16 x i16> %25299, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25301 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25279, <32 x i16> %25286, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25302 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25300, <32 x i16> %25293, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25303 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25301, <32 x i16> %25302, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25304 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25303, <32 x i16> %25273, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25305 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25304, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25306 = shufflevector <32 x i16> %25305, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25307 = sext i32 %blur_x.s0.x.v1.base.s2028 to i64
  %25308 = add nsw i64 %25307, %25137
  %25309 = getelementptr inbounds i16, i16* %blur_x879, i64 %25308
  %25310 = bitcast i16* %25309 to <16 x i16>*
  store <16 x i16> %25306, <16 x i16>* %25310, align 2, !tbaa !399
  %25311 = shufflevector <32 x i16> %25305, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25312 = getelementptr inbounds i16, i16* %25309, i64 16
  %25313 = bitcast i16* %25312 to <16 x i16>*
  store <16 x i16> %25311, <16 x i16>* %25313, align 2, !tbaa !399
  br label %"consume blur_x2030"

"consume blur_x2030":                             ; preds = %"for blur_y.s0.x.x.rebased2019", %"produce blur_x2027"
  %25314 = sext i32 %blur_y.s0.x.v0.base.s2022 to i64
  %25315 = add nsw i64 %25140, %25314
  %25316 = getelementptr inbounds i16, i16* %blur_x879, i64 %25315
  %25317 = bitcast i16* %25316 to <16 x i16>*
  %25318 = load <16 x i16>, <16 x i16>* %25317, align 2, !tbaa !399
  %25319 = getelementptr inbounds i16, i16* %25316, i64 16
  %25320 = bitcast i16* %25319 to <16 x i16>*
  %25321 = load <16 x i16>, <16 x i16>* %25320, align 2, !tbaa !399
  %25322 = shufflevector <16 x i16> %25318, <16 x i16> %25321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25323 = add nsw i64 %25143, %25314
  %25324 = getelementptr inbounds i16, i16* %blur_x879, i64 %25323
  %25325 = bitcast i16* %25324 to <16 x i16>*
  %25326 = load <16 x i16>, <16 x i16>* %25325, align 2, !tbaa !399
  %25327 = getelementptr inbounds i16, i16* %25324, i64 16
  %25328 = bitcast i16* %25327 to <16 x i16>*
  %25329 = load <16 x i16>, <16 x i16>* %25328, align 2, !tbaa !399
  %25330 = shufflevector <16 x i16> %25326, <16 x i16> %25329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25331 = add nsw i64 %25146, %25314
  %25332 = getelementptr inbounds i16, i16* %blur_x879, i64 %25331
  %25333 = bitcast i16* %25332 to <16 x i16>*
  %25334 = load <16 x i16>, <16 x i16>* %25333, align 2, !tbaa !399
  %25335 = getelementptr inbounds i16, i16* %25332, i64 16
  %25336 = bitcast i16* %25335 to <16 x i16>*
  %25337 = load <16 x i16>, <16 x i16>* %25336, align 2, !tbaa !399
  %25338 = shufflevector <16 x i16> %25334, <16 x i16> %25337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25339 = add nsw i64 %25149, %25314
  %25340 = getelementptr inbounds i16, i16* %blur_x879, i64 %25339
  %25341 = bitcast i16* %25340 to <16 x i16>*
  %25342 = load <16 x i16>, <16 x i16>* %25341, align 2, !tbaa !399
  %25343 = getelementptr inbounds i16, i16* %25340, i64 16
  %25344 = bitcast i16* %25343 to <16 x i16>*
  %25345 = load <16 x i16>, <16 x i16>* %25344, align 2, !tbaa !399
  %25346 = shufflevector <16 x i16> %25342, <16 x i16> %25345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25347 = add nsw i64 %25152, %25314
  %25348 = getelementptr inbounds i16, i16* %blur_x879, i64 %25347
  %25349 = bitcast i16* %25348 to <16 x i16>*
  %25350 = load <16 x i16>, <16 x i16>* %25349, align 2, !tbaa !399
  %25351 = getelementptr inbounds i16, i16* %25348, i64 16
  %25352 = bitcast i16* %25351 to <16 x i16>*
  %25353 = load <16 x i16>, <16 x i16>* %25352, align 2, !tbaa !399
  %25354 = shufflevector <16 x i16> %25350, <16 x i16> %25353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25355 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25330, <32 x i16> %25338, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25356 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25354, <32 x i16> %25346, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25357 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25355, <32 x i16> %25356, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25358 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25357, <32 x i16> %25322, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25359 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25358, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25360 = shufflevector <32 x i16> %25359, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25361 = add nsw i64 %25156, %25314
  %25362 = getelementptr inbounds i16, i16* %263, i64 %25361
  %25363 = bitcast i16* %25362 to <16 x i16>*
  store <16 x i16> %25360, <16 x i16>* %25363, align 2, !tbaa !401
  %25364 = shufflevector <32 x i16> %25359, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25365 = getelementptr inbounds i16, i16* %25362, i64 16
  %25366 = bitcast i16* %25365 to <16 x i16>*
  store <16 x i16> %25364, <16 x i16>* %25366, align 2, !tbaa !401
  %25367 = add nuw nsw i32 %blur_y.s0.x.x.rebased2021, 1
  %.not2570 = icmp eq i32 %25367, %t1683898
  br i1 %.not2570, label %"end for blur_y.s0.x.x.rebased2020", label %"for blur_y.s0.x.x.rebased2019"

after_bb2031:                                     ; preds = %"end for blur_y.s0.x.x.rebased2020", %"produce blur_x2034"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2046.preheader", label %"end for blur_y.s0.x.x.rebased2047", !prof !386

"for blur_y.s0.x.x.rebased2046.preheader":        ; preds = %after_bb2031
  %25368 = sext i32 %t17061010 to i64
  %25369 = zext i32 %.pre-phi3574 to i64
  %25370 = mul nsw i64 %25369, %337
  %25371 = sub nsw i64 %25370, %298
  %25372 = zext i32 %.pre-phi3570 to i64
  %25373 = mul nsw i64 %25372, %337
  %25374 = sub nsw i64 %25373, %298
  %25375 = zext i32 %.pre-phi3578 to i64
  %25376 = mul nsw i64 %25375, %337
  %25377 = sub nsw i64 %25376, %298
  %25378 = zext i32 %.pre-phi3586 to i64
  %25379 = mul nsw i64 %25378, %337
  %25380 = sub nsw i64 %25379, %298
  %25381 = zext i32 %.pre-phi3582 to i64
  %25382 = mul nsw i64 %25381, %337
  %25383 = sub nsw i64 %25382, %298
  %25384 = sext i32 %a379 to i64
  %25385 = add nsw i64 %25384, 24
  %25386 = mul nsw i64 %25385, %334
  %25387 = add nsw i64 %25386, %338
  br label %"for blur_y.s0.x.x.rebased2046"

"produce blur_x2034":                             ; preds = %"end for blur_y.s0.x.x.rebased2020"
  %25388 = getelementptr inbounds i16, i16* %read_input822, i64 %479
  %25389 = getelementptr inbounds i16, i16* %25388, i64 -31
  %25390 = bitcast i16* %25389 to <16 x i16>*
  %25391 = load <16 x i16>, <16 x i16>* %25390, align 2, !tbaa !396
  %25392 = getelementptr inbounds i16, i16* %25388, i64 -15
  %25393 = bitcast i16* %25392 to <16 x i16>*
  %25394 = load <16 x i16>, <16 x i16>* %25393, align 2, !tbaa !396
  %25395 = shufflevector <16 x i16> %25391, <16 x i16> %25394, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25396 = getelementptr inbounds i16, i16* %25388, i64 -32
  %25397 = bitcast i16* %25396 to <16 x i16>*
  %25398 = load <16 x i16>, <16 x i16>* %25397, align 2, !tbaa !396
  %25399 = getelementptr inbounds i16, i16* %25388, i64 -16
  %25400 = bitcast i16* %25399 to <16 x i16>*
  %25401 = load <16 x i16>, <16 x i16>* %25400, align 2, !tbaa !396
  %25402 = shufflevector <16 x i16> %25398, <16 x i16> %25401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25403 = getelementptr inbounds i16, i16* %25388, i64 -30
  %25404 = bitcast i16* %25403 to <16 x i16>*
  %25405 = load <16 x i16>, <16 x i16>* %25404, align 2, !tbaa !396
  %25406 = getelementptr inbounds i16, i16* %25388, i64 -14
  %25407 = bitcast i16* %25406 to <16 x i16>*
  %25408 = load <16 x i16>, <16 x i16>* %25407, align 2, !tbaa !396
  %25409 = shufflevector <16 x i16> %25405, <16 x i16> %25408, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25410 = getelementptr inbounds i16, i16* %25388, i64 -28
  %25411 = bitcast i16* %25410 to <16 x i16>*
  %25412 = load <16 x i16>, <16 x i16>* %25411, align 2, !tbaa !396
  %25413 = getelementptr inbounds i16, i16* %25388, i64 -12
  %25414 = bitcast i16* %25413 to <16 x i16>*
  %25415 = load <16 x i16>, <16 x i16>* %25414, align 2, !tbaa !396
  %25416 = shufflevector <16 x i16> %25412, <16 x i16> %25415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25417 = getelementptr inbounds i16, i16* %25388, i64 -29
  %25418 = bitcast i16* %25417 to <16 x i16>*
  %25419 = load <16 x i16>, <16 x i16>* %25418, align 2, !tbaa !396
  %25420 = getelementptr inbounds i16, i16* %25388, i64 -13
  %25421 = bitcast i16* %25420 to <16 x i16>*
  %25422 = load <16 x i16>, <16 x i16>* %25421, align 2, !tbaa !396
  %25423 = shufflevector <16 x i16> %25419, <16 x i16> %25422, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25424 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25402, <32 x i16> %25409, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25425 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25423, <32 x i16> %25416, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25426 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25424, <32 x i16> %25425, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25427 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25426, <32 x i16> %25395, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25428 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25427, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25429 = shufflevector <32 x i16> %25428, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25430 = zext i32 %.pre-phi3586 to i64
  %25431 = mul nsw i64 %299, %25430
  %25432 = add nsw i64 %301, %25431
  %25433 = getelementptr inbounds i16, i16* %blur_x879, i64 %25432
  %25434 = getelementptr inbounds i16, i16* %25433, i64 -32
  %25435 = bitcast i16* %25434 to <16 x i16>*
  store <16 x i16> %25429, <16 x i16>* %25435, align 2, !tbaa !399
  %25436 = shufflevector <32 x i16> %25428, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25437 = getelementptr inbounds i16, i16* %25433, i64 -16
  %25438 = bitcast i16* %25437 to <16 x i16>*
  store <16 x i16> %25436, <16 x i16>* %25438, align 2, !tbaa !399
  %25439 = zext i32 %.pre-phi3574 to i64
  %25440 = mul nsw i64 %25439, %333
  %25441 = add nsw i64 %25440, %296
  %25442 = getelementptr inbounds i16, i16* %blur_x879, i64 %25441
  %25443 = getelementptr inbounds i16, i16* %25442, i64 -32
  %25444 = bitcast i16* %25443 to <16 x i16>*
  %25445 = load <16 x i16>, <16 x i16>* %25444, align 2, !tbaa !399
  %25446 = getelementptr inbounds i16, i16* %25442, i64 -16
  %25447 = bitcast i16* %25446 to <16 x i16>*
  %25448 = load <16 x i16>, <16 x i16>* %25447, align 2, !tbaa !399
  %25449 = shufflevector <16 x i16> %25445, <16 x i16> %25448, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25450 = zext i32 %.pre-phi3570 to i64
  %25451 = mul nsw i64 %25450, %333
  %25452 = add nsw i64 %25451, %296
  %25453 = getelementptr inbounds i16, i16* %blur_x879, i64 %25452
  %25454 = getelementptr inbounds i16, i16* %25453, i64 -32
  %25455 = bitcast i16* %25454 to <16 x i16>*
  %25456 = load <16 x i16>, <16 x i16>* %25455, align 2, !tbaa !399
  %25457 = getelementptr inbounds i16, i16* %25453, i64 -16
  %25458 = bitcast i16* %25457 to <16 x i16>*
  %25459 = load <16 x i16>, <16 x i16>* %25458, align 2, !tbaa !399
  %25460 = shufflevector <16 x i16> %25456, <16 x i16> %25459, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25461 = zext i32 %.pre-phi3578 to i64
  %25462 = mul nsw i64 %25461, %333
  %25463 = add nsw i64 %25462, %296
  %25464 = getelementptr inbounds i16, i16* %blur_x879, i64 %25463
  %25465 = getelementptr inbounds i16, i16* %25464, i64 -32
  %25466 = bitcast i16* %25465 to <16 x i16>*
  %25467 = load <16 x i16>, <16 x i16>* %25466, align 2, !tbaa !399
  %25468 = getelementptr inbounds i16, i16* %25464, i64 -16
  %25469 = bitcast i16* %25468 to <16 x i16>*
  %25470 = load <16 x i16>, <16 x i16>* %25469, align 2, !tbaa !399
  %25471 = shufflevector <16 x i16> %25467, <16 x i16> %25470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25472 = mul nsw i64 %25430, %333
  %25473 = add nsw i64 %25472, %296
  %25474 = getelementptr inbounds i16, i16* %blur_x879, i64 %25473
  %25475 = getelementptr inbounds i16, i16* %25474, i64 -32
  %25476 = bitcast i16* %25475 to <16 x i16>*
  %25477 = load <16 x i16>, <16 x i16>* %25476, align 2, !tbaa !399
  %25478 = getelementptr inbounds i16, i16* %25474, i64 -16
  %25479 = bitcast i16* %25478 to <16 x i16>*
  %25480 = load <16 x i16>, <16 x i16>* %25479, align 2, !tbaa !399
  %25481 = shufflevector <16 x i16> %25477, <16 x i16> %25480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25482 = zext i32 %.pre-phi3582 to i64
  %25483 = mul nsw i64 %25482, %333
  %25484 = add nsw i64 %25483, %296
  %25485 = getelementptr inbounds i16, i16* %blur_x879, i64 %25484
  %25486 = getelementptr inbounds i16, i16* %25485, i64 -32
  %25487 = bitcast i16* %25486 to <16 x i16>*
  %25488 = load <16 x i16>, <16 x i16>* %25487, align 2, !tbaa !399
  %25489 = getelementptr inbounds i16, i16* %25485, i64 -16
  %25490 = bitcast i16* %25489 to <16 x i16>*
  %25491 = load <16 x i16>, <16 x i16>* %25490, align 2, !tbaa !399
  %25492 = shufflevector <16 x i16> %25488, <16 x i16> %25491, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25493 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25460, <32 x i16> %25471, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25494 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25492, <32 x i16> %25481, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25495 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25493, <32 x i16> %25494, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25496 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25495, <32 x i16> %25449, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25497 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25496, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25498 = shufflevector <32 x i16> %25497, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25499 = sext i32 %a379 to i64
  %25500 = add nsw i64 %25499, 24
  %25501 = mul nsw i64 %25500, %334
  %25502 = add nsw i64 %336, %25501
  %25503 = getelementptr inbounds i16, i16* %263, i64 %25502
  %25504 = getelementptr inbounds i16, i16* %25503, i64 -32
  %25505 = bitcast i16* %25504 to <16 x i16>*
  store <16 x i16> %25498, <16 x i16>* %25505, align 2, !tbaa !401
  %25506 = shufflevector <32 x i16> %25497, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25507 = getelementptr inbounds i16, i16* %25503, i64 -16
  %25508 = bitcast i16* %25507 to <16 x i16>*
  store <16 x i16> %25506, <16 x i16>* %25508, align 2, !tbaa !401
  br label %after_bb2031

"for blur_y.s0.x.x.rebased2046":                  ; preds = %"for blur_y.s0.x.x.rebased2046.preheader", %"consume blur_x2054"
  %indvars.iv3449 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2046.preheader" ], [ %indvars.iv.next3450, %"consume blur_x2054" ]
  %25509 = add nsw i64 %indvars.iv3449, %303
  %25510 = icmp slt i64 %25509, 1
  %25511 = trunc i64 %25509 to i32
  %25512 = shl nsw i32 %25511, 5
  %25513 = icmp sgt i32 %198, %25512
  %25514 = or i1 %25510, %25513
  br i1 %25514, label %"produce blur_x2052", label %"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge"

"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2046"
  %.pre3647 = shl nsw i64 %25509, 5
  br label %"consume blur_x2054"

"end for blur_y.s0.x.x.rebased2047":              ; preds = %"consume blur_x2054", %after_bb2031
  br i1 %304, label %"for blur_y.s0.x.x.rebased2062.preheader", label %"end for blur_y.s0.x.x.rebased2063", !prof !386

"for blur_y.s0.x.x.rebased2062.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2047"
  %25515 = sext i32 %t17061010 to i64
  %25516 = zext i32 %.pre-phi3574 to i64
  %25517 = mul nsw i64 %25516, %337
  %25518 = sub nsw i64 %25517, %298
  %25519 = zext i32 %.pre-phi3570 to i64
  %25520 = mul nsw i64 %25519, %337
  %25521 = sub nsw i64 %25520, %298
  %25522 = zext i32 %.pre-phi3578 to i64
  %25523 = mul nsw i64 %25522, %337
  %25524 = sub nsw i64 %25523, %298
  %25525 = zext i32 %.pre-phi3586 to i64
  %25526 = mul nsw i64 %25525, %337
  %25527 = sub nsw i64 %25526, %298
  %25528 = zext i32 %.pre-phi3582 to i64
  %25529 = mul nsw i64 %25528, %337
  %25530 = sub nsw i64 %25529, %298
  %25531 = sext i32 %a379 to i64
  %25532 = add nsw i64 %25531, 24
  %25533 = mul nsw i64 %25532, %334
  %25534 = add nsw i64 %25533, %338
  br label %"for blur_y.s0.x.x.rebased2062"

"produce blur_x2052":                             ; preds = %"for blur_y.s0.x.x.rebased2046"
  %t10962053 = add nsw i32 %481, %25512
  %25535 = sext i32 %t10962053 to i64
  %25536 = getelementptr inbounds i16, i16* %read_input822, i64 %25535
  %25537 = getelementptr inbounds i16, i16* %25536, i64 1
  %25538 = bitcast i16* %25537 to <16 x i16>*
  %25539 = load <16 x i16>, <16 x i16>* %25538, align 2, !tbaa !396
  %25540 = getelementptr inbounds i16, i16* %25536, i64 17
  %25541 = bitcast i16* %25540 to <16 x i16>*
  %25542 = load <16 x i16>, <16 x i16>* %25541, align 2, !tbaa !396
  %25543 = shufflevector <16 x i16> %25539, <16 x i16> %25542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25544 = bitcast i16* %25536 to <16 x i16>*
  %25545 = load <16 x i16>, <16 x i16>* %25544, align 2, !tbaa !396
  %25546 = getelementptr inbounds i16, i16* %25536, i64 16
  %25547 = bitcast i16* %25546 to <16 x i16>*
  %25548 = load <16 x i16>, <16 x i16>* %25547, align 2, !tbaa !396
  %25549 = shufflevector <16 x i16> %25545, <16 x i16> %25548, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25550 = getelementptr inbounds i16, i16* %25536, i64 2
  %25551 = bitcast i16* %25550 to <16 x i16>*
  %25552 = load <16 x i16>, <16 x i16>* %25551, align 2, !tbaa !396
  %25553 = getelementptr inbounds i16, i16* %25536, i64 18
  %25554 = bitcast i16* %25553 to <16 x i16>*
  %25555 = load <16 x i16>, <16 x i16>* %25554, align 2, !tbaa !396
  %25556 = shufflevector <16 x i16> %25552, <16 x i16> %25555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25557 = getelementptr inbounds i16, i16* %25536, i64 4
  %25558 = bitcast i16* %25557 to <16 x i16>*
  %25559 = load <16 x i16>, <16 x i16>* %25558, align 2, !tbaa !396
  %25560 = getelementptr inbounds i16, i16* %25536, i64 20
  %25561 = bitcast i16* %25560 to <16 x i16>*
  %25562 = load <16 x i16>, <16 x i16>* %25561, align 2, !tbaa !396
  %25563 = shufflevector <16 x i16> %25559, <16 x i16> %25562, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25564 = getelementptr inbounds i16, i16* %25536, i64 3
  %25565 = bitcast i16* %25564 to <16 x i16>*
  %25566 = load <16 x i16>, <16 x i16>* %25565, align 2, !tbaa !396
  %25567 = getelementptr inbounds i16, i16* %25536, i64 19
  %25568 = bitcast i16* %25567 to <16 x i16>*
  %25569 = load <16 x i16>, <16 x i16>* %25568, align 2, !tbaa !396
  %25570 = shufflevector <16 x i16> %25566, <16 x i16> %25569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25571 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25549, <32 x i16> %25556, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25572 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25570, <32 x i16> %25563, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25573 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25571, <32 x i16> %25572, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25574 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25573, <32 x i16> %25543, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25575 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25574, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25576 = shufflevector <32 x i16> %25575, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25577 = shl nsw i64 %25509, 5
  %25578 = add nsw i64 %25577, %25368
  %25579 = getelementptr inbounds i16, i16* %blur_x879, i64 %25578
  %25580 = bitcast i16* %25579 to <16 x i16>*
  store <16 x i16> %25576, <16 x i16>* %25580, align 2, !tbaa !399
  %25581 = shufflevector <32 x i16> %25575, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25582 = getelementptr inbounds i16, i16* %25579, i64 16
  %25583 = bitcast i16* %25582 to <16 x i16>*
  store <16 x i16> %25581, <16 x i16>* %25583, align 2, !tbaa !399
  br label %"consume blur_x2054"

"consume blur_x2054":                             ; preds = %"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge", %"produce blur_x2052"
  %.pre-phi3648 = phi i64 [ %.pre3647, %"for blur_y.s0.x.x.rebased2046.consume blur_x2054_crit_edge" ], [ %25577, %"produce blur_x2052" ]
  %25584 = add nsw i64 %25371, %.pre-phi3648
  %25585 = getelementptr inbounds i16, i16* %blur_x879, i64 %25584
  %25586 = bitcast i16* %25585 to <16 x i16>*
  %25587 = load <16 x i16>, <16 x i16>* %25586, align 2, !tbaa !399
  %25588 = getelementptr inbounds i16, i16* %25585, i64 16
  %25589 = bitcast i16* %25588 to <16 x i16>*
  %25590 = load <16 x i16>, <16 x i16>* %25589, align 2, !tbaa !399
  %25591 = shufflevector <16 x i16> %25587, <16 x i16> %25590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25592 = add nsw i64 %25374, %.pre-phi3648
  %25593 = getelementptr inbounds i16, i16* %blur_x879, i64 %25592
  %25594 = bitcast i16* %25593 to <16 x i16>*
  %25595 = load <16 x i16>, <16 x i16>* %25594, align 2, !tbaa !399
  %25596 = getelementptr inbounds i16, i16* %25593, i64 16
  %25597 = bitcast i16* %25596 to <16 x i16>*
  %25598 = load <16 x i16>, <16 x i16>* %25597, align 2, !tbaa !399
  %25599 = shufflevector <16 x i16> %25595, <16 x i16> %25598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25600 = add nsw i64 %25377, %.pre-phi3648
  %25601 = getelementptr inbounds i16, i16* %blur_x879, i64 %25600
  %25602 = bitcast i16* %25601 to <16 x i16>*
  %25603 = load <16 x i16>, <16 x i16>* %25602, align 2, !tbaa !399
  %25604 = getelementptr inbounds i16, i16* %25601, i64 16
  %25605 = bitcast i16* %25604 to <16 x i16>*
  %25606 = load <16 x i16>, <16 x i16>* %25605, align 2, !tbaa !399
  %25607 = shufflevector <16 x i16> %25603, <16 x i16> %25606, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25608 = add nsw i64 %25380, %.pre-phi3648
  %25609 = getelementptr inbounds i16, i16* %blur_x879, i64 %25608
  %25610 = bitcast i16* %25609 to <16 x i16>*
  %25611 = load <16 x i16>, <16 x i16>* %25610, align 2, !tbaa !399
  %25612 = getelementptr inbounds i16, i16* %25609, i64 16
  %25613 = bitcast i16* %25612 to <16 x i16>*
  %25614 = load <16 x i16>, <16 x i16>* %25613, align 2, !tbaa !399
  %25615 = shufflevector <16 x i16> %25611, <16 x i16> %25614, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25616 = add nsw i64 %25383, %.pre-phi3648
  %25617 = getelementptr inbounds i16, i16* %blur_x879, i64 %25616
  %25618 = bitcast i16* %25617 to <16 x i16>*
  %25619 = load <16 x i16>, <16 x i16>* %25618, align 2, !tbaa !399
  %25620 = getelementptr inbounds i16, i16* %25617, i64 16
  %25621 = bitcast i16* %25620 to <16 x i16>*
  %25622 = load <16 x i16>, <16 x i16>* %25621, align 2, !tbaa !399
  %25623 = shufflevector <16 x i16> %25619, <16 x i16> %25622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25624 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25599, <32 x i16> %25607, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25625 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25623, <32 x i16> %25615, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25626 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25624, <32 x i16> %25625, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25627 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25626, <32 x i16> %25591, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25628 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25627, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25629 = shufflevector <32 x i16> %25628, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25630 = add nsw i64 %25387, %.pre-phi3648
  %25631 = getelementptr inbounds i16, i16* %263, i64 %25630
  %25632 = bitcast i16* %25631 to <16 x i16>*
  store <16 x i16> %25629, <16 x i16>* %25632, align 2, !tbaa !401
  %25633 = shufflevector <32 x i16> %25628, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25634 = getelementptr inbounds i16, i16* %25631, i64 16
  %25635 = bitcast i16* %25634 to <16 x i16>*
  store <16 x i16> %25633, <16 x i16>* %25635, align 2, !tbaa !401
  %indvars.iv.next3450 = add nuw nsw i64 %indvars.iv3449, 1
  %25636 = icmp eq i64 %indvars.iv.next3450, %zext3451
  br i1 %25636, label %"end for blur_y.s0.x.x.rebased2047", label %"for blur_y.s0.x.x.rebased2046"

"for blur_y.s0.x.x.rebased2062":                  ; preds = %"for blur_y.s0.x.x.rebased2062.preheader", %"consume blur_x2073"
  %blur_y.s0.x.x.rebased2064 = phi i32 [ %25745, %"consume blur_x2073" ], [ 0, %"for blur_y.s0.x.x.rebased2062.preheader" ]
  %25637 = add nsw i32 %blur_y.s0.x.x.rebased2064, %t1626814
  %a5077 = shl nsw i32 %25637, 5
  %25638 = icmp sgt i32 %t1647, %a5077
  %blur_y.s0.x.v0.base.s2065 = select i1 %25638, i32 %a5077, i32 %t1647
  %25639 = icmp slt i32 %25637, 1
  %25640 = icmp sgt i32 %198, %a5077
  %25641 = or i1 %25639, %25640
  br i1 %25641, label %"produce blur_x2070", label %"consume blur_x2073"

"end for blur_y.s0.x.x.rebased2063":              ; preds = %"consume blur_x2073", %"end for blur_y.s0.x.x.rebased2047"
  br i1 %229, label %"produce blur_x2077", label %after_bb2074

"produce blur_x2070":                             ; preds = %"for blur_y.s0.x.x.rebased2062"
  %25642 = icmp slt i32 %blur_y.s0.x.v0.base.s2065, %198
  %blur_x.s0.x.v1.base.s2071 = select i1 %25642, i32 %blur_y.s0.x.v0.base.s2065, i32 %198
  %t11012072 = add nsw i32 %481, %blur_x.s0.x.v1.base.s2071
  %25643 = sext i32 %t11012072 to i64
  %25644 = getelementptr inbounds i16, i16* %read_input822, i64 %25643
  %25645 = getelementptr inbounds i16, i16* %25644, i64 1
  %25646 = bitcast i16* %25645 to <16 x i16>*
  %25647 = load <16 x i16>, <16 x i16>* %25646, align 2, !tbaa !396
  %25648 = getelementptr inbounds i16, i16* %25644, i64 17
  %25649 = bitcast i16* %25648 to <16 x i16>*
  %25650 = load <16 x i16>, <16 x i16>* %25649, align 2, !tbaa !396
  %25651 = shufflevector <16 x i16> %25647, <16 x i16> %25650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25652 = bitcast i16* %25644 to <16 x i16>*
  %25653 = load <16 x i16>, <16 x i16>* %25652, align 2, !tbaa !396
  %25654 = getelementptr inbounds i16, i16* %25644, i64 16
  %25655 = bitcast i16* %25654 to <16 x i16>*
  %25656 = load <16 x i16>, <16 x i16>* %25655, align 2, !tbaa !396
  %25657 = shufflevector <16 x i16> %25653, <16 x i16> %25656, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25658 = getelementptr inbounds i16, i16* %25644, i64 2
  %25659 = bitcast i16* %25658 to <16 x i16>*
  %25660 = load <16 x i16>, <16 x i16>* %25659, align 2, !tbaa !396
  %25661 = getelementptr inbounds i16, i16* %25644, i64 18
  %25662 = bitcast i16* %25661 to <16 x i16>*
  %25663 = load <16 x i16>, <16 x i16>* %25662, align 2, !tbaa !396
  %25664 = shufflevector <16 x i16> %25660, <16 x i16> %25663, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25665 = getelementptr inbounds i16, i16* %25644, i64 4
  %25666 = bitcast i16* %25665 to <16 x i16>*
  %25667 = load <16 x i16>, <16 x i16>* %25666, align 2, !tbaa !396
  %25668 = getelementptr inbounds i16, i16* %25644, i64 20
  %25669 = bitcast i16* %25668 to <16 x i16>*
  %25670 = load <16 x i16>, <16 x i16>* %25669, align 2, !tbaa !396
  %25671 = shufflevector <16 x i16> %25667, <16 x i16> %25670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25672 = getelementptr inbounds i16, i16* %25644, i64 3
  %25673 = bitcast i16* %25672 to <16 x i16>*
  %25674 = load <16 x i16>, <16 x i16>* %25673, align 2, !tbaa !396
  %25675 = getelementptr inbounds i16, i16* %25644, i64 19
  %25676 = bitcast i16* %25675 to <16 x i16>*
  %25677 = load <16 x i16>, <16 x i16>* %25676, align 2, !tbaa !396
  %25678 = shufflevector <16 x i16> %25674, <16 x i16> %25677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25679 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25657, <32 x i16> %25664, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25680 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25678, <32 x i16> %25671, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25681 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25679, <32 x i16> %25680, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25682 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25681, <32 x i16> %25651, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25683 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25682, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25684 = shufflevector <32 x i16> %25683, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25685 = sext i32 %blur_x.s0.x.v1.base.s2071 to i64
  %25686 = add nsw i64 %25685, %25515
  %25687 = getelementptr inbounds i16, i16* %blur_x879, i64 %25686
  %25688 = bitcast i16* %25687 to <16 x i16>*
  store <16 x i16> %25684, <16 x i16>* %25688, align 2, !tbaa !399
  %25689 = shufflevector <32 x i16> %25683, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25690 = getelementptr inbounds i16, i16* %25687, i64 16
  %25691 = bitcast i16* %25690 to <16 x i16>*
  store <16 x i16> %25689, <16 x i16>* %25691, align 2, !tbaa !399
  br label %"consume blur_x2073"

"consume blur_x2073":                             ; preds = %"for blur_y.s0.x.x.rebased2062", %"produce blur_x2070"
  %25692 = sext i32 %blur_y.s0.x.v0.base.s2065 to i64
  %25693 = add nsw i64 %25518, %25692
  %25694 = getelementptr inbounds i16, i16* %blur_x879, i64 %25693
  %25695 = bitcast i16* %25694 to <16 x i16>*
  %25696 = load <16 x i16>, <16 x i16>* %25695, align 2, !tbaa !399
  %25697 = getelementptr inbounds i16, i16* %25694, i64 16
  %25698 = bitcast i16* %25697 to <16 x i16>*
  %25699 = load <16 x i16>, <16 x i16>* %25698, align 2, !tbaa !399
  %25700 = shufflevector <16 x i16> %25696, <16 x i16> %25699, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25701 = add nsw i64 %25521, %25692
  %25702 = getelementptr inbounds i16, i16* %blur_x879, i64 %25701
  %25703 = bitcast i16* %25702 to <16 x i16>*
  %25704 = load <16 x i16>, <16 x i16>* %25703, align 2, !tbaa !399
  %25705 = getelementptr inbounds i16, i16* %25702, i64 16
  %25706 = bitcast i16* %25705 to <16 x i16>*
  %25707 = load <16 x i16>, <16 x i16>* %25706, align 2, !tbaa !399
  %25708 = shufflevector <16 x i16> %25704, <16 x i16> %25707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25709 = add nsw i64 %25524, %25692
  %25710 = getelementptr inbounds i16, i16* %blur_x879, i64 %25709
  %25711 = bitcast i16* %25710 to <16 x i16>*
  %25712 = load <16 x i16>, <16 x i16>* %25711, align 2, !tbaa !399
  %25713 = getelementptr inbounds i16, i16* %25710, i64 16
  %25714 = bitcast i16* %25713 to <16 x i16>*
  %25715 = load <16 x i16>, <16 x i16>* %25714, align 2, !tbaa !399
  %25716 = shufflevector <16 x i16> %25712, <16 x i16> %25715, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25717 = add nsw i64 %25527, %25692
  %25718 = getelementptr inbounds i16, i16* %blur_x879, i64 %25717
  %25719 = bitcast i16* %25718 to <16 x i16>*
  %25720 = load <16 x i16>, <16 x i16>* %25719, align 2, !tbaa !399
  %25721 = getelementptr inbounds i16, i16* %25718, i64 16
  %25722 = bitcast i16* %25721 to <16 x i16>*
  %25723 = load <16 x i16>, <16 x i16>* %25722, align 2, !tbaa !399
  %25724 = shufflevector <16 x i16> %25720, <16 x i16> %25723, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25725 = add nsw i64 %25530, %25692
  %25726 = getelementptr inbounds i16, i16* %blur_x879, i64 %25725
  %25727 = bitcast i16* %25726 to <16 x i16>*
  %25728 = load <16 x i16>, <16 x i16>* %25727, align 2, !tbaa !399
  %25729 = getelementptr inbounds i16, i16* %25726, i64 16
  %25730 = bitcast i16* %25729 to <16 x i16>*
  %25731 = load <16 x i16>, <16 x i16>* %25730, align 2, !tbaa !399
  %25732 = shufflevector <16 x i16> %25728, <16 x i16> %25731, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25733 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25708, <32 x i16> %25716, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25734 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25732, <32 x i16> %25724, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25735 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25733, <32 x i16> %25734, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25736 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25735, <32 x i16> %25700, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25737 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25736, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25738 = shufflevector <32 x i16> %25737, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25739 = add nsw i64 %25534, %25692
  %25740 = getelementptr inbounds i16, i16* %263, i64 %25739
  %25741 = bitcast i16* %25740 to <16 x i16>*
  store <16 x i16> %25738, <16 x i16>* %25741, align 2, !tbaa !401
  %25742 = shufflevector <32 x i16> %25737, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25743 = getelementptr inbounds i16, i16* %25740, i64 16
  %25744 = bitcast i16* %25743 to <16 x i16>*
  store <16 x i16> %25742, <16 x i16>* %25744, align 2, !tbaa !401
  %25745 = add nuw nsw i32 %blur_y.s0.x.x.rebased2064, 1
  %.not2566 = icmp eq i32 %25745, %t1683898
  br i1 %.not2566, label %"end for blur_y.s0.x.x.rebased2063", label %"for blur_y.s0.x.x.rebased2062"

after_bb2074:                                     ; preds = %"end for blur_y.s0.x.x.rebased2063", %"produce blur_x2077"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2089.preheader", label %"end for blur_y.s0.x.x.rebased2090", !prof !386

"for blur_y.s0.x.x.rebased2089.preheader":        ; preds = %after_bb2074
  %25746 = sext i32 %t17221053 to i64
  %25747 = zext i32 %.pre-phi3578 to i64
  %25748 = mul nsw i64 %25747, %337
  %25749 = sub nsw i64 %25748, %298
  %25750 = zext i32 %.pre-phi3574 to i64
  %25751 = mul nsw i64 %25750, %337
  %25752 = sub nsw i64 %25751, %298
  %25753 = zext i32 %.pre-phi3582 to i64
  %25754 = mul nsw i64 %25753, %337
  %25755 = sub nsw i64 %25754, %298
  %25756 = zext i32 %.pre-phi3592 to i64
  %25757 = mul nsw i64 %25756, %337
  %25758 = sub nsw i64 %25757, %298
  %25759 = zext i32 %.pre-phi3586 to i64
  %25760 = mul nsw i64 %25759, %337
  %25761 = sub nsw i64 %25760, %298
  %25762 = sext i32 %a379 to i64
  %25763 = add nsw i64 %25762, 25
  %25764 = mul nsw i64 %25763, %334
  %25765 = add nsw i64 %25764, %338
  br label %"for blur_y.s0.x.x.rebased2089"

"produce blur_x2077":                             ; preds = %"end for blur_y.s0.x.x.rebased2063"
  %25766 = getelementptr inbounds i16, i16* %read_input822, i64 %485
  %25767 = getelementptr inbounds i16, i16* %25766, i64 -31
  %25768 = bitcast i16* %25767 to <16 x i16>*
  %25769 = load <16 x i16>, <16 x i16>* %25768, align 2, !tbaa !396
  %25770 = getelementptr inbounds i16, i16* %25766, i64 -15
  %25771 = bitcast i16* %25770 to <16 x i16>*
  %25772 = load <16 x i16>, <16 x i16>* %25771, align 2, !tbaa !396
  %25773 = shufflevector <16 x i16> %25769, <16 x i16> %25772, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25774 = getelementptr inbounds i16, i16* %25766, i64 -32
  %25775 = bitcast i16* %25774 to <16 x i16>*
  %25776 = load <16 x i16>, <16 x i16>* %25775, align 2, !tbaa !396
  %25777 = getelementptr inbounds i16, i16* %25766, i64 -16
  %25778 = bitcast i16* %25777 to <16 x i16>*
  %25779 = load <16 x i16>, <16 x i16>* %25778, align 2, !tbaa !396
  %25780 = shufflevector <16 x i16> %25776, <16 x i16> %25779, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25781 = getelementptr inbounds i16, i16* %25766, i64 -30
  %25782 = bitcast i16* %25781 to <16 x i16>*
  %25783 = load <16 x i16>, <16 x i16>* %25782, align 2, !tbaa !396
  %25784 = getelementptr inbounds i16, i16* %25766, i64 -14
  %25785 = bitcast i16* %25784 to <16 x i16>*
  %25786 = load <16 x i16>, <16 x i16>* %25785, align 2, !tbaa !396
  %25787 = shufflevector <16 x i16> %25783, <16 x i16> %25786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25788 = getelementptr inbounds i16, i16* %25766, i64 -28
  %25789 = bitcast i16* %25788 to <16 x i16>*
  %25790 = load <16 x i16>, <16 x i16>* %25789, align 2, !tbaa !396
  %25791 = getelementptr inbounds i16, i16* %25766, i64 -12
  %25792 = bitcast i16* %25791 to <16 x i16>*
  %25793 = load <16 x i16>, <16 x i16>* %25792, align 2, !tbaa !396
  %25794 = shufflevector <16 x i16> %25790, <16 x i16> %25793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25795 = getelementptr inbounds i16, i16* %25766, i64 -29
  %25796 = bitcast i16* %25795 to <16 x i16>*
  %25797 = load <16 x i16>, <16 x i16>* %25796, align 2, !tbaa !396
  %25798 = getelementptr inbounds i16, i16* %25766, i64 -13
  %25799 = bitcast i16* %25798 to <16 x i16>*
  %25800 = load <16 x i16>, <16 x i16>* %25799, align 2, !tbaa !396
  %25801 = shufflevector <16 x i16> %25797, <16 x i16> %25800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25802 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25780, <32 x i16> %25787, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25803 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25801, <32 x i16> %25794, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25804 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25802, <32 x i16> %25803, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25805 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25804, <32 x i16> %25773, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25806 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25805, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25807 = shufflevector <32 x i16> %25806, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25808 = zext i32 %.pre-phi3592 to i64
  %25809 = mul nsw i64 %299, %25808
  %25810 = add nsw i64 %301, %25809
  %25811 = getelementptr inbounds i16, i16* %blur_x879, i64 %25810
  %25812 = getelementptr inbounds i16, i16* %25811, i64 -32
  %25813 = bitcast i16* %25812 to <16 x i16>*
  store <16 x i16> %25807, <16 x i16>* %25813, align 2, !tbaa !399
  %25814 = shufflevector <32 x i16> %25806, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25815 = getelementptr inbounds i16, i16* %25811, i64 -16
  %25816 = bitcast i16* %25815 to <16 x i16>*
  store <16 x i16> %25814, <16 x i16>* %25816, align 2, !tbaa !399
  %25817 = zext i32 %.pre-phi3578 to i64
  %25818 = mul nsw i64 %25817, %333
  %25819 = add nsw i64 %25818, %296
  %25820 = getelementptr inbounds i16, i16* %blur_x879, i64 %25819
  %25821 = getelementptr inbounds i16, i16* %25820, i64 -32
  %25822 = bitcast i16* %25821 to <16 x i16>*
  %25823 = load <16 x i16>, <16 x i16>* %25822, align 2, !tbaa !399
  %25824 = getelementptr inbounds i16, i16* %25820, i64 -16
  %25825 = bitcast i16* %25824 to <16 x i16>*
  %25826 = load <16 x i16>, <16 x i16>* %25825, align 2, !tbaa !399
  %25827 = shufflevector <16 x i16> %25823, <16 x i16> %25826, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25828 = zext i32 %.pre-phi3574 to i64
  %25829 = mul nsw i64 %25828, %333
  %25830 = add nsw i64 %25829, %296
  %25831 = getelementptr inbounds i16, i16* %blur_x879, i64 %25830
  %25832 = getelementptr inbounds i16, i16* %25831, i64 -32
  %25833 = bitcast i16* %25832 to <16 x i16>*
  %25834 = load <16 x i16>, <16 x i16>* %25833, align 2, !tbaa !399
  %25835 = getelementptr inbounds i16, i16* %25831, i64 -16
  %25836 = bitcast i16* %25835 to <16 x i16>*
  %25837 = load <16 x i16>, <16 x i16>* %25836, align 2, !tbaa !399
  %25838 = shufflevector <16 x i16> %25834, <16 x i16> %25837, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25839 = zext i32 %.pre-phi3582 to i64
  %25840 = mul nsw i64 %25839, %333
  %25841 = add nsw i64 %25840, %296
  %25842 = getelementptr inbounds i16, i16* %blur_x879, i64 %25841
  %25843 = getelementptr inbounds i16, i16* %25842, i64 -32
  %25844 = bitcast i16* %25843 to <16 x i16>*
  %25845 = load <16 x i16>, <16 x i16>* %25844, align 2, !tbaa !399
  %25846 = getelementptr inbounds i16, i16* %25842, i64 -16
  %25847 = bitcast i16* %25846 to <16 x i16>*
  %25848 = load <16 x i16>, <16 x i16>* %25847, align 2, !tbaa !399
  %25849 = shufflevector <16 x i16> %25845, <16 x i16> %25848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25850 = mul nsw i64 %25808, %333
  %25851 = add nsw i64 %25850, %296
  %25852 = getelementptr inbounds i16, i16* %blur_x879, i64 %25851
  %25853 = getelementptr inbounds i16, i16* %25852, i64 -32
  %25854 = bitcast i16* %25853 to <16 x i16>*
  %25855 = load <16 x i16>, <16 x i16>* %25854, align 2, !tbaa !399
  %25856 = getelementptr inbounds i16, i16* %25852, i64 -16
  %25857 = bitcast i16* %25856 to <16 x i16>*
  %25858 = load <16 x i16>, <16 x i16>* %25857, align 2, !tbaa !399
  %25859 = shufflevector <16 x i16> %25855, <16 x i16> %25858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25860 = zext i32 %.pre-phi3586 to i64
  %25861 = mul nsw i64 %25860, %333
  %25862 = add nsw i64 %25861, %296
  %25863 = getelementptr inbounds i16, i16* %blur_x879, i64 %25862
  %25864 = getelementptr inbounds i16, i16* %25863, i64 -32
  %25865 = bitcast i16* %25864 to <16 x i16>*
  %25866 = load <16 x i16>, <16 x i16>* %25865, align 2, !tbaa !399
  %25867 = getelementptr inbounds i16, i16* %25863, i64 -16
  %25868 = bitcast i16* %25867 to <16 x i16>*
  %25869 = load <16 x i16>, <16 x i16>* %25868, align 2, !tbaa !399
  %25870 = shufflevector <16 x i16> %25866, <16 x i16> %25869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25871 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25838, <32 x i16> %25849, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25872 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25870, <32 x i16> %25859, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25873 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25871, <32 x i16> %25872, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25874 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25873, <32 x i16> %25827, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25875 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25874, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25876 = shufflevector <32 x i16> %25875, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25877 = sext i32 %a379 to i64
  %25878 = add nsw i64 %25877, 25
  %25879 = mul nsw i64 %25878, %334
  %25880 = add nsw i64 %336, %25879
  %25881 = getelementptr inbounds i16, i16* %263, i64 %25880
  %25882 = getelementptr inbounds i16, i16* %25881, i64 -32
  %25883 = bitcast i16* %25882 to <16 x i16>*
  store <16 x i16> %25876, <16 x i16>* %25883, align 2, !tbaa !401
  %25884 = shufflevector <32 x i16> %25875, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25885 = getelementptr inbounds i16, i16* %25881, i64 -16
  %25886 = bitcast i16* %25885 to <16 x i16>*
  store <16 x i16> %25884, <16 x i16>* %25886, align 2, !tbaa !401
  br label %after_bb2074

"for blur_y.s0.x.x.rebased2089":                  ; preds = %"for blur_y.s0.x.x.rebased2089.preheader", %"consume blur_x2097"
  %indvars.iv3452 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2089.preheader" ], [ %indvars.iv.next3453, %"consume blur_x2097" ]
  %25887 = add nsw i64 %indvars.iv3452, %303
  %25888 = icmp slt i64 %25887, 1
  %25889 = trunc i64 %25887 to i32
  %25890 = shl nsw i32 %25889, 5
  %25891 = icmp sgt i32 %198, %25890
  %25892 = or i1 %25888, %25891
  br i1 %25892, label %"produce blur_x2095", label %"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge"

"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2089"
  %.pre3649 = shl nsw i64 %25887, 5
  br label %"consume blur_x2097"

"end for blur_y.s0.x.x.rebased2090":              ; preds = %"consume blur_x2097", %after_bb2074
  br i1 %304, label %"for blur_y.s0.x.x.rebased2105.preheader", label %"end for blur_y.s0.x.x.rebased2106", !prof !386

"for blur_y.s0.x.x.rebased2105.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2090"
  %25893 = sext i32 %t17221053 to i64
  %25894 = zext i32 %.pre-phi3578 to i64
  %25895 = mul nsw i64 %25894, %337
  %25896 = sub nsw i64 %25895, %298
  %25897 = zext i32 %.pre-phi3574 to i64
  %25898 = mul nsw i64 %25897, %337
  %25899 = sub nsw i64 %25898, %298
  %25900 = zext i32 %.pre-phi3582 to i64
  %25901 = mul nsw i64 %25900, %337
  %25902 = sub nsw i64 %25901, %298
  %25903 = zext i32 %.pre-phi3592 to i64
  %25904 = mul nsw i64 %25903, %337
  %25905 = sub nsw i64 %25904, %298
  %25906 = zext i32 %.pre-phi3586 to i64
  %25907 = mul nsw i64 %25906, %337
  %25908 = sub nsw i64 %25907, %298
  %25909 = sext i32 %a379 to i64
  %25910 = add nsw i64 %25909, 25
  %25911 = mul nsw i64 %25910, %334
  %25912 = add nsw i64 %25911, %338
  br label %"for blur_y.s0.x.x.rebased2105"

"produce blur_x2095":                             ; preds = %"for blur_y.s0.x.x.rebased2089"
  %t11122096 = add nsw i32 %487, %25890
  %25913 = sext i32 %t11122096 to i64
  %25914 = getelementptr inbounds i16, i16* %read_input822, i64 %25913
  %25915 = getelementptr inbounds i16, i16* %25914, i64 1
  %25916 = bitcast i16* %25915 to <16 x i16>*
  %25917 = load <16 x i16>, <16 x i16>* %25916, align 2, !tbaa !396
  %25918 = getelementptr inbounds i16, i16* %25914, i64 17
  %25919 = bitcast i16* %25918 to <16 x i16>*
  %25920 = load <16 x i16>, <16 x i16>* %25919, align 2, !tbaa !396
  %25921 = shufflevector <16 x i16> %25917, <16 x i16> %25920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25922 = bitcast i16* %25914 to <16 x i16>*
  %25923 = load <16 x i16>, <16 x i16>* %25922, align 2, !tbaa !396
  %25924 = getelementptr inbounds i16, i16* %25914, i64 16
  %25925 = bitcast i16* %25924 to <16 x i16>*
  %25926 = load <16 x i16>, <16 x i16>* %25925, align 2, !tbaa !396
  %25927 = shufflevector <16 x i16> %25923, <16 x i16> %25926, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25928 = getelementptr inbounds i16, i16* %25914, i64 2
  %25929 = bitcast i16* %25928 to <16 x i16>*
  %25930 = load <16 x i16>, <16 x i16>* %25929, align 2, !tbaa !396
  %25931 = getelementptr inbounds i16, i16* %25914, i64 18
  %25932 = bitcast i16* %25931 to <16 x i16>*
  %25933 = load <16 x i16>, <16 x i16>* %25932, align 2, !tbaa !396
  %25934 = shufflevector <16 x i16> %25930, <16 x i16> %25933, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25935 = getelementptr inbounds i16, i16* %25914, i64 4
  %25936 = bitcast i16* %25935 to <16 x i16>*
  %25937 = load <16 x i16>, <16 x i16>* %25936, align 2, !tbaa !396
  %25938 = getelementptr inbounds i16, i16* %25914, i64 20
  %25939 = bitcast i16* %25938 to <16 x i16>*
  %25940 = load <16 x i16>, <16 x i16>* %25939, align 2, !tbaa !396
  %25941 = shufflevector <16 x i16> %25937, <16 x i16> %25940, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25942 = getelementptr inbounds i16, i16* %25914, i64 3
  %25943 = bitcast i16* %25942 to <16 x i16>*
  %25944 = load <16 x i16>, <16 x i16>* %25943, align 2, !tbaa !396
  %25945 = getelementptr inbounds i16, i16* %25914, i64 19
  %25946 = bitcast i16* %25945 to <16 x i16>*
  %25947 = load <16 x i16>, <16 x i16>* %25946, align 2, !tbaa !396
  %25948 = shufflevector <16 x i16> %25944, <16 x i16> %25947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25949 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25927, <32 x i16> %25934, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25950 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25948, <32 x i16> %25941, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25951 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25949, <32 x i16> %25950, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25952 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25951, <32 x i16> %25921, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %25953 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %25952, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %25954 = shufflevector <32 x i16> %25953, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25955 = shl nsw i64 %25887, 5
  %25956 = add nsw i64 %25955, %25746
  %25957 = getelementptr inbounds i16, i16* %blur_x879, i64 %25956
  %25958 = bitcast i16* %25957 to <16 x i16>*
  store <16 x i16> %25954, <16 x i16>* %25958, align 2, !tbaa !399
  %25959 = shufflevector <32 x i16> %25953, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25960 = getelementptr inbounds i16, i16* %25957, i64 16
  %25961 = bitcast i16* %25960 to <16 x i16>*
  store <16 x i16> %25959, <16 x i16>* %25961, align 2, !tbaa !399
  br label %"consume blur_x2097"

"consume blur_x2097":                             ; preds = %"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge", %"produce blur_x2095"
  %.pre-phi3650 = phi i64 [ %.pre3649, %"for blur_y.s0.x.x.rebased2089.consume blur_x2097_crit_edge" ], [ %25955, %"produce blur_x2095" ]
  %25962 = add nsw i64 %25749, %.pre-phi3650
  %25963 = getelementptr inbounds i16, i16* %blur_x879, i64 %25962
  %25964 = bitcast i16* %25963 to <16 x i16>*
  %25965 = load <16 x i16>, <16 x i16>* %25964, align 2, !tbaa !399
  %25966 = getelementptr inbounds i16, i16* %25963, i64 16
  %25967 = bitcast i16* %25966 to <16 x i16>*
  %25968 = load <16 x i16>, <16 x i16>* %25967, align 2, !tbaa !399
  %25969 = shufflevector <16 x i16> %25965, <16 x i16> %25968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25970 = add nsw i64 %25752, %.pre-phi3650
  %25971 = getelementptr inbounds i16, i16* %blur_x879, i64 %25970
  %25972 = bitcast i16* %25971 to <16 x i16>*
  %25973 = load <16 x i16>, <16 x i16>* %25972, align 2, !tbaa !399
  %25974 = getelementptr inbounds i16, i16* %25971, i64 16
  %25975 = bitcast i16* %25974 to <16 x i16>*
  %25976 = load <16 x i16>, <16 x i16>* %25975, align 2, !tbaa !399
  %25977 = shufflevector <16 x i16> %25973, <16 x i16> %25976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25978 = add nsw i64 %25755, %.pre-phi3650
  %25979 = getelementptr inbounds i16, i16* %blur_x879, i64 %25978
  %25980 = bitcast i16* %25979 to <16 x i16>*
  %25981 = load <16 x i16>, <16 x i16>* %25980, align 2, !tbaa !399
  %25982 = getelementptr inbounds i16, i16* %25979, i64 16
  %25983 = bitcast i16* %25982 to <16 x i16>*
  %25984 = load <16 x i16>, <16 x i16>* %25983, align 2, !tbaa !399
  %25985 = shufflevector <16 x i16> %25981, <16 x i16> %25984, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25986 = add nsw i64 %25758, %.pre-phi3650
  %25987 = getelementptr inbounds i16, i16* %blur_x879, i64 %25986
  %25988 = bitcast i16* %25987 to <16 x i16>*
  %25989 = load <16 x i16>, <16 x i16>* %25988, align 2, !tbaa !399
  %25990 = getelementptr inbounds i16, i16* %25987, i64 16
  %25991 = bitcast i16* %25990 to <16 x i16>*
  %25992 = load <16 x i16>, <16 x i16>* %25991, align 2, !tbaa !399
  %25993 = shufflevector <16 x i16> %25989, <16 x i16> %25992, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25994 = add nsw i64 %25761, %.pre-phi3650
  %25995 = getelementptr inbounds i16, i16* %blur_x879, i64 %25994
  %25996 = bitcast i16* %25995 to <16 x i16>*
  %25997 = load <16 x i16>, <16 x i16>* %25996, align 2, !tbaa !399
  %25998 = getelementptr inbounds i16, i16* %25995, i64 16
  %25999 = bitcast i16* %25998 to <16 x i16>*
  %26000 = load <16 x i16>, <16 x i16>* %25999, align 2, !tbaa !399
  %26001 = shufflevector <16 x i16> %25997, <16 x i16> %26000, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26002 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %25977, <32 x i16> %25985, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26003 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26001, <32 x i16> %25993, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26004 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26002, <32 x i16> %26003, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26005 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26004, <32 x i16> %25969, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26006 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26005, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26007 = shufflevector <32 x i16> %26006, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26008 = add nsw i64 %25765, %.pre-phi3650
  %26009 = getelementptr inbounds i16, i16* %263, i64 %26008
  %26010 = bitcast i16* %26009 to <16 x i16>*
  store <16 x i16> %26007, <16 x i16>* %26010, align 2, !tbaa !401
  %26011 = shufflevector <32 x i16> %26006, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26012 = getelementptr inbounds i16, i16* %26009, i64 16
  %26013 = bitcast i16* %26012 to <16 x i16>*
  store <16 x i16> %26011, <16 x i16>* %26013, align 2, !tbaa !401
  %indvars.iv.next3453 = add nuw nsw i64 %indvars.iv3452, 1
  %26014 = icmp eq i64 %indvars.iv.next3453, %zext3454
  br i1 %26014, label %"end for blur_y.s0.x.x.rebased2090", label %"for blur_y.s0.x.x.rebased2089"

"for blur_y.s0.x.x.rebased2105":                  ; preds = %"for blur_y.s0.x.x.rebased2105.preheader", %"consume blur_x2116"
  %blur_y.s0.x.x.rebased2107 = phi i32 [ %26123, %"consume blur_x2116" ], [ 0, %"for blur_y.s0.x.x.rebased2105.preheader" ]
  %26015 = add nsw i32 %blur_y.s0.x.x.rebased2107, %t1626814
  %a5234 = shl nsw i32 %26015, 5
  %26016 = icmp sgt i32 %t1647, %a5234
  %blur_y.s0.x.v0.base.s2108 = select i1 %26016, i32 %a5234, i32 %t1647
  %26017 = icmp slt i32 %26015, 1
  %26018 = icmp sgt i32 %198, %a5234
  %26019 = or i1 %26017, %26018
  br i1 %26019, label %"produce blur_x2113", label %"consume blur_x2116"

"end for blur_y.s0.x.x.rebased2106":              ; preds = %"consume blur_x2116", %"end for blur_y.s0.x.x.rebased2090"
  br i1 %229, label %"produce blur_x2120", label %after_bb2117

"produce blur_x2113":                             ; preds = %"for blur_y.s0.x.x.rebased2105"
  %26020 = icmp slt i32 %blur_y.s0.x.v0.base.s2108, %198
  %blur_x.s0.x.v1.base.s2114 = select i1 %26020, i32 %blur_y.s0.x.v0.base.s2108, i32 %198
  %t11172115 = add nsw i32 %487, %blur_x.s0.x.v1.base.s2114
  %26021 = sext i32 %t11172115 to i64
  %26022 = getelementptr inbounds i16, i16* %read_input822, i64 %26021
  %26023 = getelementptr inbounds i16, i16* %26022, i64 1
  %26024 = bitcast i16* %26023 to <16 x i16>*
  %26025 = load <16 x i16>, <16 x i16>* %26024, align 2, !tbaa !396
  %26026 = getelementptr inbounds i16, i16* %26022, i64 17
  %26027 = bitcast i16* %26026 to <16 x i16>*
  %26028 = load <16 x i16>, <16 x i16>* %26027, align 2, !tbaa !396
  %26029 = shufflevector <16 x i16> %26025, <16 x i16> %26028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26030 = bitcast i16* %26022 to <16 x i16>*
  %26031 = load <16 x i16>, <16 x i16>* %26030, align 2, !tbaa !396
  %26032 = getelementptr inbounds i16, i16* %26022, i64 16
  %26033 = bitcast i16* %26032 to <16 x i16>*
  %26034 = load <16 x i16>, <16 x i16>* %26033, align 2, !tbaa !396
  %26035 = shufflevector <16 x i16> %26031, <16 x i16> %26034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26036 = getelementptr inbounds i16, i16* %26022, i64 2
  %26037 = bitcast i16* %26036 to <16 x i16>*
  %26038 = load <16 x i16>, <16 x i16>* %26037, align 2, !tbaa !396
  %26039 = getelementptr inbounds i16, i16* %26022, i64 18
  %26040 = bitcast i16* %26039 to <16 x i16>*
  %26041 = load <16 x i16>, <16 x i16>* %26040, align 2, !tbaa !396
  %26042 = shufflevector <16 x i16> %26038, <16 x i16> %26041, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26043 = getelementptr inbounds i16, i16* %26022, i64 4
  %26044 = bitcast i16* %26043 to <16 x i16>*
  %26045 = load <16 x i16>, <16 x i16>* %26044, align 2, !tbaa !396
  %26046 = getelementptr inbounds i16, i16* %26022, i64 20
  %26047 = bitcast i16* %26046 to <16 x i16>*
  %26048 = load <16 x i16>, <16 x i16>* %26047, align 2, !tbaa !396
  %26049 = shufflevector <16 x i16> %26045, <16 x i16> %26048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26050 = getelementptr inbounds i16, i16* %26022, i64 3
  %26051 = bitcast i16* %26050 to <16 x i16>*
  %26052 = load <16 x i16>, <16 x i16>* %26051, align 2, !tbaa !396
  %26053 = getelementptr inbounds i16, i16* %26022, i64 19
  %26054 = bitcast i16* %26053 to <16 x i16>*
  %26055 = load <16 x i16>, <16 x i16>* %26054, align 2, !tbaa !396
  %26056 = shufflevector <16 x i16> %26052, <16 x i16> %26055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26057 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26035, <32 x i16> %26042, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26058 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26056, <32 x i16> %26049, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26059 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26057, <32 x i16> %26058, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26060 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26059, <32 x i16> %26029, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26061 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26060, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26062 = shufflevector <32 x i16> %26061, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26063 = sext i32 %blur_x.s0.x.v1.base.s2114 to i64
  %26064 = add nsw i64 %26063, %25893
  %26065 = getelementptr inbounds i16, i16* %blur_x879, i64 %26064
  %26066 = bitcast i16* %26065 to <16 x i16>*
  store <16 x i16> %26062, <16 x i16>* %26066, align 2, !tbaa !399
  %26067 = shufflevector <32 x i16> %26061, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26068 = getelementptr inbounds i16, i16* %26065, i64 16
  %26069 = bitcast i16* %26068 to <16 x i16>*
  store <16 x i16> %26067, <16 x i16>* %26069, align 2, !tbaa !399
  br label %"consume blur_x2116"

"consume blur_x2116":                             ; preds = %"for blur_y.s0.x.x.rebased2105", %"produce blur_x2113"
  %26070 = sext i32 %blur_y.s0.x.v0.base.s2108 to i64
  %26071 = add nsw i64 %25896, %26070
  %26072 = getelementptr inbounds i16, i16* %blur_x879, i64 %26071
  %26073 = bitcast i16* %26072 to <16 x i16>*
  %26074 = load <16 x i16>, <16 x i16>* %26073, align 2, !tbaa !399
  %26075 = getelementptr inbounds i16, i16* %26072, i64 16
  %26076 = bitcast i16* %26075 to <16 x i16>*
  %26077 = load <16 x i16>, <16 x i16>* %26076, align 2, !tbaa !399
  %26078 = shufflevector <16 x i16> %26074, <16 x i16> %26077, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26079 = add nsw i64 %25899, %26070
  %26080 = getelementptr inbounds i16, i16* %blur_x879, i64 %26079
  %26081 = bitcast i16* %26080 to <16 x i16>*
  %26082 = load <16 x i16>, <16 x i16>* %26081, align 2, !tbaa !399
  %26083 = getelementptr inbounds i16, i16* %26080, i64 16
  %26084 = bitcast i16* %26083 to <16 x i16>*
  %26085 = load <16 x i16>, <16 x i16>* %26084, align 2, !tbaa !399
  %26086 = shufflevector <16 x i16> %26082, <16 x i16> %26085, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26087 = add nsw i64 %25902, %26070
  %26088 = getelementptr inbounds i16, i16* %blur_x879, i64 %26087
  %26089 = bitcast i16* %26088 to <16 x i16>*
  %26090 = load <16 x i16>, <16 x i16>* %26089, align 2, !tbaa !399
  %26091 = getelementptr inbounds i16, i16* %26088, i64 16
  %26092 = bitcast i16* %26091 to <16 x i16>*
  %26093 = load <16 x i16>, <16 x i16>* %26092, align 2, !tbaa !399
  %26094 = shufflevector <16 x i16> %26090, <16 x i16> %26093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26095 = add nsw i64 %25905, %26070
  %26096 = getelementptr inbounds i16, i16* %blur_x879, i64 %26095
  %26097 = bitcast i16* %26096 to <16 x i16>*
  %26098 = load <16 x i16>, <16 x i16>* %26097, align 2, !tbaa !399
  %26099 = getelementptr inbounds i16, i16* %26096, i64 16
  %26100 = bitcast i16* %26099 to <16 x i16>*
  %26101 = load <16 x i16>, <16 x i16>* %26100, align 2, !tbaa !399
  %26102 = shufflevector <16 x i16> %26098, <16 x i16> %26101, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26103 = add nsw i64 %25908, %26070
  %26104 = getelementptr inbounds i16, i16* %blur_x879, i64 %26103
  %26105 = bitcast i16* %26104 to <16 x i16>*
  %26106 = load <16 x i16>, <16 x i16>* %26105, align 2, !tbaa !399
  %26107 = getelementptr inbounds i16, i16* %26104, i64 16
  %26108 = bitcast i16* %26107 to <16 x i16>*
  %26109 = load <16 x i16>, <16 x i16>* %26108, align 2, !tbaa !399
  %26110 = shufflevector <16 x i16> %26106, <16 x i16> %26109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26111 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26086, <32 x i16> %26094, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26112 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26110, <32 x i16> %26102, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26113 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26111, <32 x i16> %26112, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26114 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26113, <32 x i16> %26078, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26115 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26114, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26116 = shufflevector <32 x i16> %26115, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26117 = add nsw i64 %25912, %26070
  %26118 = getelementptr inbounds i16, i16* %263, i64 %26117
  %26119 = bitcast i16* %26118 to <16 x i16>*
  store <16 x i16> %26116, <16 x i16>* %26119, align 2, !tbaa !401
  %26120 = shufflevector <32 x i16> %26115, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26121 = getelementptr inbounds i16, i16* %26118, i64 16
  %26122 = bitcast i16* %26121 to <16 x i16>*
  store <16 x i16> %26120, <16 x i16>* %26122, align 2, !tbaa !401
  %26123 = add nuw nsw i32 %blur_y.s0.x.x.rebased2107, 1
  %.not2562 = icmp eq i32 %26123, %t1683898
  br i1 %.not2562, label %"end for blur_y.s0.x.x.rebased2106", label %"for blur_y.s0.x.x.rebased2105"

after_bb2117:                                     ; preds = %"end for blur_y.s0.x.x.rebased2106", %"produce blur_x2120"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2132.preheader", label %"end for blur_y.s0.x.x.rebased2133", !prof !386

"for blur_y.s0.x.x.rebased2132.preheader":        ; preds = %after_bb2117
  %26124 = sext i32 %t17381096 to i64
  %26125 = zext i32 %.pre-phi3582 to i64
  %26126 = mul nsw i64 %26125, %337
  %26127 = sub nsw i64 %26126, %298
  %26128 = zext i32 %.pre-phi3578 to i64
  %26129 = mul nsw i64 %26128, %337
  %26130 = sub nsw i64 %26129, %298
  %26131 = zext i32 %.pre-phi3586 to i64
  %26132 = mul nsw i64 %26131, %337
  %26133 = sub nsw i64 %26132, %298
  %26134 = zext i32 %.pre-phi3598 to i64
  %26135 = mul nsw i64 %26134, %337
  %26136 = sub nsw i64 %26135, %298
  %26137 = zext i32 %.pre-phi3592 to i64
  %26138 = mul nsw i64 %26137, %337
  %26139 = sub nsw i64 %26138, %298
  %26140 = sext i32 %a379 to i64
  %26141 = add nsw i64 %26140, 26
  %26142 = mul nsw i64 %26141, %334
  %26143 = add nsw i64 %26142, %338
  br label %"for blur_y.s0.x.x.rebased2132"

"produce blur_x2120":                             ; preds = %"end for blur_y.s0.x.x.rebased2106"
  %26144 = getelementptr inbounds i16, i16* %read_input822, i64 %491
  %26145 = getelementptr inbounds i16, i16* %26144, i64 -31
  %26146 = bitcast i16* %26145 to <16 x i16>*
  %26147 = load <16 x i16>, <16 x i16>* %26146, align 2, !tbaa !396
  %26148 = getelementptr inbounds i16, i16* %26144, i64 -15
  %26149 = bitcast i16* %26148 to <16 x i16>*
  %26150 = load <16 x i16>, <16 x i16>* %26149, align 2, !tbaa !396
  %26151 = shufflevector <16 x i16> %26147, <16 x i16> %26150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26152 = getelementptr inbounds i16, i16* %26144, i64 -32
  %26153 = bitcast i16* %26152 to <16 x i16>*
  %26154 = load <16 x i16>, <16 x i16>* %26153, align 2, !tbaa !396
  %26155 = getelementptr inbounds i16, i16* %26144, i64 -16
  %26156 = bitcast i16* %26155 to <16 x i16>*
  %26157 = load <16 x i16>, <16 x i16>* %26156, align 2, !tbaa !396
  %26158 = shufflevector <16 x i16> %26154, <16 x i16> %26157, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26159 = getelementptr inbounds i16, i16* %26144, i64 -30
  %26160 = bitcast i16* %26159 to <16 x i16>*
  %26161 = load <16 x i16>, <16 x i16>* %26160, align 2, !tbaa !396
  %26162 = getelementptr inbounds i16, i16* %26144, i64 -14
  %26163 = bitcast i16* %26162 to <16 x i16>*
  %26164 = load <16 x i16>, <16 x i16>* %26163, align 2, !tbaa !396
  %26165 = shufflevector <16 x i16> %26161, <16 x i16> %26164, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26166 = getelementptr inbounds i16, i16* %26144, i64 -28
  %26167 = bitcast i16* %26166 to <16 x i16>*
  %26168 = load <16 x i16>, <16 x i16>* %26167, align 2, !tbaa !396
  %26169 = getelementptr inbounds i16, i16* %26144, i64 -12
  %26170 = bitcast i16* %26169 to <16 x i16>*
  %26171 = load <16 x i16>, <16 x i16>* %26170, align 2, !tbaa !396
  %26172 = shufflevector <16 x i16> %26168, <16 x i16> %26171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26173 = getelementptr inbounds i16, i16* %26144, i64 -29
  %26174 = bitcast i16* %26173 to <16 x i16>*
  %26175 = load <16 x i16>, <16 x i16>* %26174, align 2, !tbaa !396
  %26176 = getelementptr inbounds i16, i16* %26144, i64 -13
  %26177 = bitcast i16* %26176 to <16 x i16>*
  %26178 = load <16 x i16>, <16 x i16>* %26177, align 2, !tbaa !396
  %26179 = shufflevector <16 x i16> %26175, <16 x i16> %26178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26180 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26158, <32 x i16> %26165, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26181 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26179, <32 x i16> %26172, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26182 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26180, <32 x i16> %26181, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26183 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26182, <32 x i16> %26151, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26184 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26183, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26185 = shufflevector <32 x i16> %26184, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26186 = zext i32 %.pre-phi3598 to i64
  %26187 = mul nsw i64 %299, %26186
  %26188 = add nsw i64 %301, %26187
  %26189 = getelementptr inbounds i16, i16* %blur_x879, i64 %26188
  %26190 = getelementptr inbounds i16, i16* %26189, i64 -32
  %26191 = bitcast i16* %26190 to <16 x i16>*
  store <16 x i16> %26185, <16 x i16>* %26191, align 2, !tbaa !399
  %26192 = shufflevector <32 x i16> %26184, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26193 = getelementptr inbounds i16, i16* %26189, i64 -16
  %26194 = bitcast i16* %26193 to <16 x i16>*
  store <16 x i16> %26192, <16 x i16>* %26194, align 2, !tbaa !399
  %26195 = zext i32 %.pre-phi3582 to i64
  %26196 = mul nsw i64 %26195, %333
  %26197 = add nsw i64 %26196, %296
  %26198 = getelementptr inbounds i16, i16* %blur_x879, i64 %26197
  %26199 = getelementptr inbounds i16, i16* %26198, i64 -32
  %26200 = bitcast i16* %26199 to <16 x i16>*
  %26201 = load <16 x i16>, <16 x i16>* %26200, align 2, !tbaa !399
  %26202 = getelementptr inbounds i16, i16* %26198, i64 -16
  %26203 = bitcast i16* %26202 to <16 x i16>*
  %26204 = load <16 x i16>, <16 x i16>* %26203, align 2, !tbaa !399
  %26205 = shufflevector <16 x i16> %26201, <16 x i16> %26204, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26206 = zext i32 %.pre-phi3578 to i64
  %26207 = mul nsw i64 %26206, %333
  %26208 = add nsw i64 %26207, %296
  %26209 = getelementptr inbounds i16, i16* %blur_x879, i64 %26208
  %26210 = getelementptr inbounds i16, i16* %26209, i64 -32
  %26211 = bitcast i16* %26210 to <16 x i16>*
  %26212 = load <16 x i16>, <16 x i16>* %26211, align 2, !tbaa !399
  %26213 = getelementptr inbounds i16, i16* %26209, i64 -16
  %26214 = bitcast i16* %26213 to <16 x i16>*
  %26215 = load <16 x i16>, <16 x i16>* %26214, align 2, !tbaa !399
  %26216 = shufflevector <16 x i16> %26212, <16 x i16> %26215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26217 = zext i32 %.pre-phi3586 to i64
  %26218 = mul nsw i64 %26217, %333
  %26219 = add nsw i64 %26218, %296
  %26220 = getelementptr inbounds i16, i16* %blur_x879, i64 %26219
  %26221 = getelementptr inbounds i16, i16* %26220, i64 -32
  %26222 = bitcast i16* %26221 to <16 x i16>*
  %26223 = load <16 x i16>, <16 x i16>* %26222, align 2, !tbaa !399
  %26224 = getelementptr inbounds i16, i16* %26220, i64 -16
  %26225 = bitcast i16* %26224 to <16 x i16>*
  %26226 = load <16 x i16>, <16 x i16>* %26225, align 2, !tbaa !399
  %26227 = shufflevector <16 x i16> %26223, <16 x i16> %26226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26228 = mul nsw i64 %26186, %333
  %26229 = add nsw i64 %26228, %296
  %26230 = getelementptr inbounds i16, i16* %blur_x879, i64 %26229
  %26231 = getelementptr inbounds i16, i16* %26230, i64 -32
  %26232 = bitcast i16* %26231 to <16 x i16>*
  %26233 = load <16 x i16>, <16 x i16>* %26232, align 2, !tbaa !399
  %26234 = getelementptr inbounds i16, i16* %26230, i64 -16
  %26235 = bitcast i16* %26234 to <16 x i16>*
  %26236 = load <16 x i16>, <16 x i16>* %26235, align 2, !tbaa !399
  %26237 = shufflevector <16 x i16> %26233, <16 x i16> %26236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26238 = zext i32 %.pre-phi3592 to i64
  %26239 = mul nsw i64 %26238, %333
  %26240 = add nsw i64 %26239, %296
  %26241 = getelementptr inbounds i16, i16* %blur_x879, i64 %26240
  %26242 = getelementptr inbounds i16, i16* %26241, i64 -32
  %26243 = bitcast i16* %26242 to <16 x i16>*
  %26244 = load <16 x i16>, <16 x i16>* %26243, align 2, !tbaa !399
  %26245 = getelementptr inbounds i16, i16* %26241, i64 -16
  %26246 = bitcast i16* %26245 to <16 x i16>*
  %26247 = load <16 x i16>, <16 x i16>* %26246, align 2, !tbaa !399
  %26248 = shufflevector <16 x i16> %26244, <16 x i16> %26247, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26249 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26216, <32 x i16> %26227, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26250 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26248, <32 x i16> %26237, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26251 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26249, <32 x i16> %26250, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26252 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26251, <32 x i16> %26205, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26253 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26252, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26254 = shufflevector <32 x i16> %26253, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26255 = sext i32 %a379 to i64
  %26256 = add nsw i64 %26255, 26
  %26257 = mul nsw i64 %26256, %334
  %26258 = add nsw i64 %336, %26257
  %26259 = getelementptr inbounds i16, i16* %263, i64 %26258
  %26260 = getelementptr inbounds i16, i16* %26259, i64 -32
  %26261 = bitcast i16* %26260 to <16 x i16>*
  store <16 x i16> %26254, <16 x i16>* %26261, align 2, !tbaa !401
  %26262 = shufflevector <32 x i16> %26253, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26263 = getelementptr inbounds i16, i16* %26259, i64 -16
  %26264 = bitcast i16* %26263 to <16 x i16>*
  store <16 x i16> %26262, <16 x i16>* %26264, align 2, !tbaa !401
  br label %after_bb2117

"for blur_y.s0.x.x.rebased2132":                  ; preds = %"for blur_y.s0.x.x.rebased2132.preheader", %"consume blur_x2140"
  %indvars.iv3455 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2132.preheader" ], [ %indvars.iv.next3456, %"consume blur_x2140" ]
  %26265 = add nsw i64 %indvars.iv3455, %303
  %26266 = icmp slt i64 %26265, 1
  %26267 = trunc i64 %26265 to i32
  %26268 = shl nsw i32 %26267, 5
  %26269 = icmp sgt i32 %198, %26268
  %26270 = or i1 %26266, %26269
  br i1 %26270, label %"produce blur_x2138", label %"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge"

"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2132"
  %.pre3651 = shl nsw i64 %26265, 5
  br label %"consume blur_x2140"

"end for blur_y.s0.x.x.rebased2133":              ; preds = %"consume blur_x2140", %after_bb2117
  br i1 %304, label %"for blur_y.s0.x.x.rebased2148.preheader", label %"end for blur_y.s0.x.x.rebased2149", !prof !386

"for blur_y.s0.x.x.rebased2148.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2133"
  %26271 = sext i32 %t17381096 to i64
  %26272 = zext i32 %.pre-phi3582 to i64
  %26273 = mul nsw i64 %26272, %337
  %26274 = sub nsw i64 %26273, %298
  %26275 = zext i32 %.pre-phi3578 to i64
  %26276 = mul nsw i64 %26275, %337
  %26277 = sub nsw i64 %26276, %298
  %26278 = zext i32 %.pre-phi3586 to i64
  %26279 = mul nsw i64 %26278, %337
  %26280 = sub nsw i64 %26279, %298
  %26281 = zext i32 %.pre-phi3598 to i64
  %26282 = mul nsw i64 %26281, %337
  %26283 = sub nsw i64 %26282, %298
  %26284 = zext i32 %.pre-phi3592 to i64
  %26285 = mul nsw i64 %26284, %337
  %26286 = sub nsw i64 %26285, %298
  %26287 = sext i32 %a379 to i64
  %26288 = add nsw i64 %26287, 26
  %26289 = mul nsw i64 %26288, %334
  %26290 = add nsw i64 %26289, %338
  br label %"for blur_y.s0.x.x.rebased2148"

"produce blur_x2138":                             ; preds = %"for blur_y.s0.x.x.rebased2132"
  %t11282139 = add nsw i32 %493, %26268
  %26291 = sext i32 %t11282139 to i64
  %26292 = getelementptr inbounds i16, i16* %read_input822, i64 %26291
  %26293 = getelementptr inbounds i16, i16* %26292, i64 1
  %26294 = bitcast i16* %26293 to <16 x i16>*
  %26295 = load <16 x i16>, <16 x i16>* %26294, align 2, !tbaa !396
  %26296 = getelementptr inbounds i16, i16* %26292, i64 17
  %26297 = bitcast i16* %26296 to <16 x i16>*
  %26298 = load <16 x i16>, <16 x i16>* %26297, align 2, !tbaa !396
  %26299 = shufflevector <16 x i16> %26295, <16 x i16> %26298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26300 = bitcast i16* %26292 to <16 x i16>*
  %26301 = load <16 x i16>, <16 x i16>* %26300, align 2, !tbaa !396
  %26302 = getelementptr inbounds i16, i16* %26292, i64 16
  %26303 = bitcast i16* %26302 to <16 x i16>*
  %26304 = load <16 x i16>, <16 x i16>* %26303, align 2, !tbaa !396
  %26305 = shufflevector <16 x i16> %26301, <16 x i16> %26304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26306 = getelementptr inbounds i16, i16* %26292, i64 2
  %26307 = bitcast i16* %26306 to <16 x i16>*
  %26308 = load <16 x i16>, <16 x i16>* %26307, align 2, !tbaa !396
  %26309 = getelementptr inbounds i16, i16* %26292, i64 18
  %26310 = bitcast i16* %26309 to <16 x i16>*
  %26311 = load <16 x i16>, <16 x i16>* %26310, align 2, !tbaa !396
  %26312 = shufflevector <16 x i16> %26308, <16 x i16> %26311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26313 = getelementptr inbounds i16, i16* %26292, i64 4
  %26314 = bitcast i16* %26313 to <16 x i16>*
  %26315 = load <16 x i16>, <16 x i16>* %26314, align 2, !tbaa !396
  %26316 = getelementptr inbounds i16, i16* %26292, i64 20
  %26317 = bitcast i16* %26316 to <16 x i16>*
  %26318 = load <16 x i16>, <16 x i16>* %26317, align 2, !tbaa !396
  %26319 = shufflevector <16 x i16> %26315, <16 x i16> %26318, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26320 = getelementptr inbounds i16, i16* %26292, i64 3
  %26321 = bitcast i16* %26320 to <16 x i16>*
  %26322 = load <16 x i16>, <16 x i16>* %26321, align 2, !tbaa !396
  %26323 = getelementptr inbounds i16, i16* %26292, i64 19
  %26324 = bitcast i16* %26323 to <16 x i16>*
  %26325 = load <16 x i16>, <16 x i16>* %26324, align 2, !tbaa !396
  %26326 = shufflevector <16 x i16> %26322, <16 x i16> %26325, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26327 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26305, <32 x i16> %26312, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26328 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26326, <32 x i16> %26319, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26329 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26327, <32 x i16> %26328, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26330 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26329, <32 x i16> %26299, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26331 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26330, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26332 = shufflevector <32 x i16> %26331, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26333 = shl nsw i64 %26265, 5
  %26334 = add nsw i64 %26333, %26124
  %26335 = getelementptr inbounds i16, i16* %blur_x879, i64 %26334
  %26336 = bitcast i16* %26335 to <16 x i16>*
  store <16 x i16> %26332, <16 x i16>* %26336, align 2, !tbaa !399
  %26337 = shufflevector <32 x i16> %26331, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26338 = getelementptr inbounds i16, i16* %26335, i64 16
  %26339 = bitcast i16* %26338 to <16 x i16>*
  store <16 x i16> %26337, <16 x i16>* %26339, align 2, !tbaa !399
  br label %"consume blur_x2140"

"consume blur_x2140":                             ; preds = %"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge", %"produce blur_x2138"
  %.pre-phi3652 = phi i64 [ %.pre3651, %"for blur_y.s0.x.x.rebased2132.consume blur_x2140_crit_edge" ], [ %26333, %"produce blur_x2138" ]
  %26340 = add nsw i64 %26127, %.pre-phi3652
  %26341 = getelementptr inbounds i16, i16* %blur_x879, i64 %26340
  %26342 = bitcast i16* %26341 to <16 x i16>*
  %26343 = load <16 x i16>, <16 x i16>* %26342, align 2, !tbaa !399
  %26344 = getelementptr inbounds i16, i16* %26341, i64 16
  %26345 = bitcast i16* %26344 to <16 x i16>*
  %26346 = load <16 x i16>, <16 x i16>* %26345, align 2, !tbaa !399
  %26347 = shufflevector <16 x i16> %26343, <16 x i16> %26346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26348 = add nsw i64 %26130, %.pre-phi3652
  %26349 = getelementptr inbounds i16, i16* %blur_x879, i64 %26348
  %26350 = bitcast i16* %26349 to <16 x i16>*
  %26351 = load <16 x i16>, <16 x i16>* %26350, align 2, !tbaa !399
  %26352 = getelementptr inbounds i16, i16* %26349, i64 16
  %26353 = bitcast i16* %26352 to <16 x i16>*
  %26354 = load <16 x i16>, <16 x i16>* %26353, align 2, !tbaa !399
  %26355 = shufflevector <16 x i16> %26351, <16 x i16> %26354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26356 = add nsw i64 %26133, %.pre-phi3652
  %26357 = getelementptr inbounds i16, i16* %blur_x879, i64 %26356
  %26358 = bitcast i16* %26357 to <16 x i16>*
  %26359 = load <16 x i16>, <16 x i16>* %26358, align 2, !tbaa !399
  %26360 = getelementptr inbounds i16, i16* %26357, i64 16
  %26361 = bitcast i16* %26360 to <16 x i16>*
  %26362 = load <16 x i16>, <16 x i16>* %26361, align 2, !tbaa !399
  %26363 = shufflevector <16 x i16> %26359, <16 x i16> %26362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26364 = add nsw i64 %26136, %.pre-phi3652
  %26365 = getelementptr inbounds i16, i16* %blur_x879, i64 %26364
  %26366 = bitcast i16* %26365 to <16 x i16>*
  %26367 = load <16 x i16>, <16 x i16>* %26366, align 2, !tbaa !399
  %26368 = getelementptr inbounds i16, i16* %26365, i64 16
  %26369 = bitcast i16* %26368 to <16 x i16>*
  %26370 = load <16 x i16>, <16 x i16>* %26369, align 2, !tbaa !399
  %26371 = shufflevector <16 x i16> %26367, <16 x i16> %26370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26372 = add nsw i64 %26139, %.pre-phi3652
  %26373 = getelementptr inbounds i16, i16* %blur_x879, i64 %26372
  %26374 = bitcast i16* %26373 to <16 x i16>*
  %26375 = load <16 x i16>, <16 x i16>* %26374, align 2, !tbaa !399
  %26376 = getelementptr inbounds i16, i16* %26373, i64 16
  %26377 = bitcast i16* %26376 to <16 x i16>*
  %26378 = load <16 x i16>, <16 x i16>* %26377, align 2, !tbaa !399
  %26379 = shufflevector <16 x i16> %26375, <16 x i16> %26378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26380 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26355, <32 x i16> %26363, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26381 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26379, <32 x i16> %26371, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26382 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26380, <32 x i16> %26381, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26383 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26382, <32 x i16> %26347, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26384 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26383, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26385 = shufflevector <32 x i16> %26384, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26386 = add nsw i64 %26143, %.pre-phi3652
  %26387 = getelementptr inbounds i16, i16* %263, i64 %26386
  %26388 = bitcast i16* %26387 to <16 x i16>*
  store <16 x i16> %26385, <16 x i16>* %26388, align 2, !tbaa !401
  %26389 = shufflevector <32 x i16> %26384, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26390 = getelementptr inbounds i16, i16* %26387, i64 16
  %26391 = bitcast i16* %26390 to <16 x i16>*
  store <16 x i16> %26389, <16 x i16>* %26391, align 2, !tbaa !401
  %indvars.iv.next3456 = add nuw nsw i64 %indvars.iv3455, 1
  %26392 = icmp eq i64 %indvars.iv.next3456, %zext3457
  br i1 %26392, label %"end for blur_y.s0.x.x.rebased2133", label %"for blur_y.s0.x.x.rebased2132"

"for blur_y.s0.x.x.rebased2148":                  ; preds = %"for blur_y.s0.x.x.rebased2148.preheader", %"consume blur_x2159"
  %blur_y.s0.x.x.rebased2150 = phi i32 [ %26501, %"consume blur_x2159" ], [ 0, %"for blur_y.s0.x.x.rebased2148.preheader" ]
  %26393 = add nsw i32 %blur_y.s0.x.x.rebased2150, %t1626814
  %a5391 = shl nsw i32 %26393, 5
  %26394 = icmp sgt i32 %t1647, %a5391
  %blur_y.s0.x.v0.base.s2151 = select i1 %26394, i32 %a5391, i32 %t1647
  %26395 = icmp slt i32 %26393, 1
  %26396 = icmp sgt i32 %198, %a5391
  %26397 = or i1 %26395, %26396
  br i1 %26397, label %"produce blur_x2156", label %"consume blur_x2159"

"end for blur_y.s0.x.x.rebased2149":              ; preds = %"consume blur_x2159", %"end for blur_y.s0.x.x.rebased2133"
  br i1 %229, label %"produce blur_x2163", label %after_bb2160

"produce blur_x2156":                             ; preds = %"for blur_y.s0.x.x.rebased2148"
  %26398 = icmp slt i32 %blur_y.s0.x.v0.base.s2151, %198
  %blur_x.s0.x.v1.base.s2157 = select i1 %26398, i32 %blur_y.s0.x.v0.base.s2151, i32 %198
  %t11332158 = add nsw i32 %493, %blur_x.s0.x.v1.base.s2157
  %26399 = sext i32 %t11332158 to i64
  %26400 = getelementptr inbounds i16, i16* %read_input822, i64 %26399
  %26401 = getelementptr inbounds i16, i16* %26400, i64 1
  %26402 = bitcast i16* %26401 to <16 x i16>*
  %26403 = load <16 x i16>, <16 x i16>* %26402, align 2, !tbaa !396
  %26404 = getelementptr inbounds i16, i16* %26400, i64 17
  %26405 = bitcast i16* %26404 to <16 x i16>*
  %26406 = load <16 x i16>, <16 x i16>* %26405, align 2, !tbaa !396
  %26407 = shufflevector <16 x i16> %26403, <16 x i16> %26406, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26408 = bitcast i16* %26400 to <16 x i16>*
  %26409 = load <16 x i16>, <16 x i16>* %26408, align 2, !tbaa !396
  %26410 = getelementptr inbounds i16, i16* %26400, i64 16
  %26411 = bitcast i16* %26410 to <16 x i16>*
  %26412 = load <16 x i16>, <16 x i16>* %26411, align 2, !tbaa !396
  %26413 = shufflevector <16 x i16> %26409, <16 x i16> %26412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26414 = getelementptr inbounds i16, i16* %26400, i64 2
  %26415 = bitcast i16* %26414 to <16 x i16>*
  %26416 = load <16 x i16>, <16 x i16>* %26415, align 2, !tbaa !396
  %26417 = getelementptr inbounds i16, i16* %26400, i64 18
  %26418 = bitcast i16* %26417 to <16 x i16>*
  %26419 = load <16 x i16>, <16 x i16>* %26418, align 2, !tbaa !396
  %26420 = shufflevector <16 x i16> %26416, <16 x i16> %26419, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26421 = getelementptr inbounds i16, i16* %26400, i64 4
  %26422 = bitcast i16* %26421 to <16 x i16>*
  %26423 = load <16 x i16>, <16 x i16>* %26422, align 2, !tbaa !396
  %26424 = getelementptr inbounds i16, i16* %26400, i64 20
  %26425 = bitcast i16* %26424 to <16 x i16>*
  %26426 = load <16 x i16>, <16 x i16>* %26425, align 2, !tbaa !396
  %26427 = shufflevector <16 x i16> %26423, <16 x i16> %26426, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26428 = getelementptr inbounds i16, i16* %26400, i64 3
  %26429 = bitcast i16* %26428 to <16 x i16>*
  %26430 = load <16 x i16>, <16 x i16>* %26429, align 2, !tbaa !396
  %26431 = getelementptr inbounds i16, i16* %26400, i64 19
  %26432 = bitcast i16* %26431 to <16 x i16>*
  %26433 = load <16 x i16>, <16 x i16>* %26432, align 2, !tbaa !396
  %26434 = shufflevector <16 x i16> %26430, <16 x i16> %26433, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26435 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26413, <32 x i16> %26420, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26436 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26434, <32 x i16> %26427, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26437 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26435, <32 x i16> %26436, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26438 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26437, <32 x i16> %26407, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26439 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26438, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26440 = shufflevector <32 x i16> %26439, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26441 = sext i32 %blur_x.s0.x.v1.base.s2157 to i64
  %26442 = add nsw i64 %26441, %26271
  %26443 = getelementptr inbounds i16, i16* %blur_x879, i64 %26442
  %26444 = bitcast i16* %26443 to <16 x i16>*
  store <16 x i16> %26440, <16 x i16>* %26444, align 2, !tbaa !399
  %26445 = shufflevector <32 x i16> %26439, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26446 = getelementptr inbounds i16, i16* %26443, i64 16
  %26447 = bitcast i16* %26446 to <16 x i16>*
  store <16 x i16> %26445, <16 x i16>* %26447, align 2, !tbaa !399
  br label %"consume blur_x2159"

"consume blur_x2159":                             ; preds = %"for blur_y.s0.x.x.rebased2148", %"produce blur_x2156"
  %26448 = sext i32 %blur_y.s0.x.v0.base.s2151 to i64
  %26449 = add nsw i64 %26274, %26448
  %26450 = getelementptr inbounds i16, i16* %blur_x879, i64 %26449
  %26451 = bitcast i16* %26450 to <16 x i16>*
  %26452 = load <16 x i16>, <16 x i16>* %26451, align 2, !tbaa !399
  %26453 = getelementptr inbounds i16, i16* %26450, i64 16
  %26454 = bitcast i16* %26453 to <16 x i16>*
  %26455 = load <16 x i16>, <16 x i16>* %26454, align 2, !tbaa !399
  %26456 = shufflevector <16 x i16> %26452, <16 x i16> %26455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26457 = add nsw i64 %26277, %26448
  %26458 = getelementptr inbounds i16, i16* %blur_x879, i64 %26457
  %26459 = bitcast i16* %26458 to <16 x i16>*
  %26460 = load <16 x i16>, <16 x i16>* %26459, align 2, !tbaa !399
  %26461 = getelementptr inbounds i16, i16* %26458, i64 16
  %26462 = bitcast i16* %26461 to <16 x i16>*
  %26463 = load <16 x i16>, <16 x i16>* %26462, align 2, !tbaa !399
  %26464 = shufflevector <16 x i16> %26460, <16 x i16> %26463, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26465 = add nsw i64 %26280, %26448
  %26466 = getelementptr inbounds i16, i16* %blur_x879, i64 %26465
  %26467 = bitcast i16* %26466 to <16 x i16>*
  %26468 = load <16 x i16>, <16 x i16>* %26467, align 2, !tbaa !399
  %26469 = getelementptr inbounds i16, i16* %26466, i64 16
  %26470 = bitcast i16* %26469 to <16 x i16>*
  %26471 = load <16 x i16>, <16 x i16>* %26470, align 2, !tbaa !399
  %26472 = shufflevector <16 x i16> %26468, <16 x i16> %26471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26473 = add nsw i64 %26283, %26448
  %26474 = getelementptr inbounds i16, i16* %blur_x879, i64 %26473
  %26475 = bitcast i16* %26474 to <16 x i16>*
  %26476 = load <16 x i16>, <16 x i16>* %26475, align 2, !tbaa !399
  %26477 = getelementptr inbounds i16, i16* %26474, i64 16
  %26478 = bitcast i16* %26477 to <16 x i16>*
  %26479 = load <16 x i16>, <16 x i16>* %26478, align 2, !tbaa !399
  %26480 = shufflevector <16 x i16> %26476, <16 x i16> %26479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26481 = add nsw i64 %26286, %26448
  %26482 = getelementptr inbounds i16, i16* %blur_x879, i64 %26481
  %26483 = bitcast i16* %26482 to <16 x i16>*
  %26484 = load <16 x i16>, <16 x i16>* %26483, align 2, !tbaa !399
  %26485 = getelementptr inbounds i16, i16* %26482, i64 16
  %26486 = bitcast i16* %26485 to <16 x i16>*
  %26487 = load <16 x i16>, <16 x i16>* %26486, align 2, !tbaa !399
  %26488 = shufflevector <16 x i16> %26484, <16 x i16> %26487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26489 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26464, <32 x i16> %26472, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26490 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26488, <32 x i16> %26480, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26491 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26489, <32 x i16> %26490, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26492 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26491, <32 x i16> %26456, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26493 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26492, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26494 = shufflevector <32 x i16> %26493, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26495 = add nsw i64 %26290, %26448
  %26496 = getelementptr inbounds i16, i16* %263, i64 %26495
  %26497 = bitcast i16* %26496 to <16 x i16>*
  store <16 x i16> %26494, <16 x i16>* %26497, align 2, !tbaa !401
  %26498 = shufflevector <32 x i16> %26493, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26499 = getelementptr inbounds i16, i16* %26496, i64 16
  %26500 = bitcast i16* %26499 to <16 x i16>*
  store <16 x i16> %26498, <16 x i16>* %26500, align 2, !tbaa !401
  %26501 = add nuw nsw i32 %blur_y.s0.x.x.rebased2150, 1
  %.not2558 = icmp eq i32 %26501, %t1683898
  br i1 %.not2558, label %"end for blur_y.s0.x.x.rebased2149", label %"for blur_y.s0.x.x.rebased2148"

after_bb2160:                                     ; preds = %"end for blur_y.s0.x.x.rebased2149", %"produce blur_x2163"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2175.preheader", label %"end for blur_y.s0.x.x.rebased2176", !prof !386

"for blur_y.s0.x.x.rebased2175.preheader":        ; preds = %after_bb2160
  %26502 = sext i32 %t17541139 to i64
  %26503 = zext i32 %.pre-phi3586 to i64
  %26504 = mul nsw i64 %26503, %337
  %26505 = sub nsw i64 %26504, %298
  %26506 = zext i32 %.pre-phi3582 to i64
  %26507 = mul nsw i64 %26506, %337
  %26508 = sub nsw i64 %26507, %298
  %26509 = zext i32 %.pre-phi3592 to i64
  %26510 = mul nsw i64 %26509, %337
  %26511 = sub nsw i64 %26510, %298
  %26512 = zext i32 %.pre-phi3604 to i64
  %26513 = mul nsw i64 %26512, %337
  %26514 = sub nsw i64 %26513, %298
  %26515 = zext i32 %.pre-phi3598 to i64
  %26516 = mul nsw i64 %26515, %337
  %26517 = sub nsw i64 %26516, %298
  %26518 = sext i32 %a379 to i64
  %26519 = add nsw i64 %26518, 27
  %26520 = mul nsw i64 %26519, %334
  %26521 = add nsw i64 %26520, %338
  br label %"for blur_y.s0.x.x.rebased2175"

"produce blur_x2163":                             ; preds = %"end for blur_y.s0.x.x.rebased2149"
  %26522 = getelementptr inbounds i16, i16* %read_input822, i64 %497
  %26523 = getelementptr inbounds i16, i16* %26522, i64 -31
  %26524 = bitcast i16* %26523 to <16 x i16>*
  %26525 = load <16 x i16>, <16 x i16>* %26524, align 2, !tbaa !396
  %26526 = getelementptr inbounds i16, i16* %26522, i64 -15
  %26527 = bitcast i16* %26526 to <16 x i16>*
  %26528 = load <16 x i16>, <16 x i16>* %26527, align 2, !tbaa !396
  %26529 = shufflevector <16 x i16> %26525, <16 x i16> %26528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26530 = getelementptr inbounds i16, i16* %26522, i64 -32
  %26531 = bitcast i16* %26530 to <16 x i16>*
  %26532 = load <16 x i16>, <16 x i16>* %26531, align 2, !tbaa !396
  %26533 = getelementptr inbounds i16, i16* %26522, i64 -16
  %26534 = bitcast i16* %26533 to <16 x i16>*
  %26535 = load <16 x i16>, <16 x i16>* %26534, align 2, !tbaa !396
  %26536 = shufflevector <16 x i16> %26532, <16 x i16> %26535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26537 = getelementptr inbounds i16, i16* %26522, i64 -30
  %26538 = bitcast i16* %26537 to <16 x i16>*
  %26539 = load <16 x i16>, <16 x i16>* %26538, align 2, !tbaa !396
  %26540 = getelementptr inbounds i16, i16* %26522, i64 -14
  %26541 = bitcast i16* %26540 to <16 x i16>*
  %26542 = load <16 x i16>, <16 x i16>* %26541, align 2, !tbaa !396
  %26543 = shufflevector <16 x i16> %26539, <16 x i16> %26542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26544 = getelementptr inbounds i16, i16* %26522, i64 -28
  %26545 = bitcast i16* %26544 to <16 x i16>*
  %26546 = load <16 x i16>, <16 x i16>* %26545, align 2, !tbaa !396
  %26547 = getelementptr inbounds i16, i16* %26522, i64 -12
  %26548 = bitcast i16* %26547 to <16 x i16>*
  %26549 = load <16 x i16>, <16 x i16>* %26548, align 2, !tbaa !396
  %26550 = shufflevector <16 x i16> %26546, <16 x i16> %26549, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26551 = getelementptr inbounds i16, i16* %26522, i64 -29
  %26552 = bitcast i16* %26551 to <16 x i16>*
  %26553 = load <16 x i16>, <16 x i16>* %26552, align 2, !tbaa !396
  %26554 = getelementptr inbounds i16, i16* %26522, i64 -13
  %26555 = bitcast i16* %26554 to <16 x i16>*
  %26556 = load <16 x i16>, <16 x i16>* %26555, align 2, !tbaa !396
  %26557 = shufflevector <16 x i16> %26553, <16 x i16> %26556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26558 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26536, <32 x i16> %26543, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26559 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26557, <32 x i16> %26550, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26560 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26558, <32 x i16> %26559, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26561 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26560, <32 x i16> %26529, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26562 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26561, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26563 = shufflevector <32 x i16> %26562, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26564 = zext i32 %.pre-phi3604 to i64
  %26565 = mul nsw i64 %299, %26564
  %26566 = add nsw i64 %301, %26565
  %26567 = getelementptr inbounds i16, i16* %blur_x879, i64 %26566
  %26568 = getelementptr inbounds i16, i16* %26567, i64 -32
  %26569 = bitcast i16* %26568 to <16 x i16>*
  store <16 x i16> %26563, <16 x i16>* %26569, align 2, !tbaa !399
  %26570 = shufflevector <32 x i16> %26562, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26571 = getelementptr inbounds i16, i16* %26567, i64 -16
  %26572 = bitcast i16* %26571 to <16 x i16>*
  store <16 x i16> %26570, <16 x i16>* %26572, align 2, !tbaa !399
  %26573 = zext i32 %.pre-phi3586 to i64
  %26574 = mul nsw i64 %26573, %333
  %26575 = add nsw i64 %26574, %296
  %26576 = getelementptr inbounds i16, i16* %blur_x879, i64 %26575
  %26577 = getelementptr inbounds i16, i16* %26576, i64 -32
  %26578 = bitcast i16* %26577 to <16 x i16>*
  %26579 = load <16 x i16>, <16 x i16>* %26578, align 2, !tbaa !399
  %26580 = getelementptr inbounds i16, i16* %26576, i64 -16
  %26581 = bitcast i16* %26580 to <16 x i16>*
  %26582 = load <16 x i16>, <16 x i16>* %26581, align 2, !tbaa !399
  %26583 = shufflevector <16 x i16> %26579, <16 x i16> %26582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26584 = zext i32 %.pre-phi3582 to i64
  %26585 = mul nsw i64 %26584, %333
  %26586 = add nsw i64 %26585, %296
  %26587 = getelementptr inbounds i16, i16* %blur_x879, i64 %26586
  %26588 = getelementptr inbounds i16, i16* %26587, i64 -32
  %26589 = bitcast i16* %26588 to <16 x i16>*
  %26590 = load <16 x i16>, <16 x i16>* %26589, align 2, !tbaa !399
  %26591 = getelementptr inbounds i16, i16* %26587, i64 -16
  %26592 = bitcast i16* %26591 to <16 x i16>*
  %26593 = load <16 x i16>, <16 x i16>* %26592, align 2, !tbaa !399
  %26594 = shufflevector <16 x i16> %26590, <16 x i16> %26593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26595 = zext i32 %.pre-phi3592 to i64
  %26596 = mul nsw i64 %26595, %333
  %26597 = add nsw i64 %26596, %296
  %26598 = getelementptr inbounds i16, i16* %blur_x879, i64 %26597
  %26599 = getelementptr inbounds i16, i16* %26598, i64 -32
  %26600 = bitcast i16* %26599 to <16 x i16>*
  %26601 = load <16 x i16>, <16 x i16>* %26600, align 2, !tbaa !399
  %26602 = getelementptr inbounds i16, i16* %26598, i64 -16
  %26603 = bitcast i16* %26602 to <16 x i16>*
  %26604 = load <16 x i16>, <16 x i16>* %26603, align 2, !tbaa !399
  %26605 = shufflevector <16 x i16> %26601, <16 x i16> %26604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26606 = mul nsw i64 %26564, %333
  %26607 = add nsw i64 %26606, %296
  %26608 = getelementptr inbounds i16, i16* %blur_x879, i64 %26607
  %26609 = getelementptr inbounds i16, i16* %26608, i64 -32
  %26610 = bitcast i16* %26609 to <16 x i16>*
  %26611 = load <16 x i16>, <16 x i16>* %26610, align 2, !tbaa !399
  %26612 = getelementptr inbounds i16, i16* %26608, i64 -16
  %26613 = bitcast i16* %26612 to <16 x i16>*
  %26614 = load <16 x i16>, <16 x i16>* %26613, align 2, !tbaa !399
  %26615 = shufflevector <16 x i16> %26611, <16 x i16> %26614, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26616 = zext i32 %.pre-phi3598 to i64
  %26617 = mul nsw i64 %26616, %333
  %26618 = add nsw i64 %26617, %296
  %26619 = getelementptr inbounds i16, i16* %blur_x879, i64 %26618
  %26620 = getelementptr inbounds i16, i16* %26619, i64 -32
  %26621 = bitcast i16* %26620 to <16 x i16>*
  %26622 = load <16 x i16>, <16 x i16>* %26621, align 2, !tbaa !399
  %26623 = getelementptr inbounds i16, i16* %26619, i64 -16
  %26624 = bitcast i16* %26623 to <16 x i16>*
  %26625 = load <16 x i16>, <16 x i16>* %26624, align 2, !tbaa !399
  %26626 = shufflevector <16 x i16> %26622, <16 x i16> %26625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26627 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26594, <32 x i16> %26605, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26628 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26626, <32 x i16> %26615, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26629 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26627, <32 x i16> %26628, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26630 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26629, <32 x i16> %26583, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26631 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26630, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26632 = shufflevector <32 x i16> %26631, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26633 = sext i32 %a379 to i64
  %26634 = add nsw i64 %26633, 27
  %26635 = mul nsw i64 %26634, %334
  %26636 = add nsw i64 %336, %26635
  %26637 = getelementptr inbounds i16, i16* %263, i64 %26636
  %26638 = getelementptr inbounds i16, i16* %26637, i64 -32
  %26639 = bitcast i16* %26638 to <16 x i16>*
  store <16 x i16> %26632, <16 x i16>* %26639, align 2, !tbaa !401
  %26640 = shufflevector <32 x i16> %26631, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26641 = getelementptr inbounds i16, i16* %26637, i64 -16
  %26642 = bitcast i16* %26641 to <16 x i16>*
  store <16 x i16> %26640, <16 x i16>* %26642, align 2, !tbaa !401
  br label %after_bb2160

"for blur_y.s0.x.x.rebased2175":                  ; preds = %"for blur_y.s0.x.x.rebased2175.preheader", %"consume blur_x2183"
  %indvars.iv3458 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2175.preheader" ], [ %indvars.iv.next3459, %"consume blur_x2183" ]
  %26643 = add nsw i64 %indvars.iv3458, %303
  %26644 = icmp slt i64 %26643, 1
  %26645 = trunc i64 %26643 to i32
  %26646 = shl nsw i32 %26645, 5
  %26647 = icmp sgt i32 %198, %26646
  %26648 = or i1 %26644, %26647
  br i1 %26648, label %"produce blur_x2181", label %"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge"

"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2175"
  %.pre3653 = shl nsw i64 %26643, 5
  br label %"consume blur_x2183"

"end for blur_y.s0.x.x.rebased2176":              ; preds = %"consume blur_x2183", %after_bb2160
  br i1 %304, label %"for blur_y.s0.x.x.rebased2191.preheader", label %"end for blur_y.s0.x.x.rebased2192", !prof !386

"for blur_y.s0.x.x.rebased2191.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2176"
  %26649 = sext i32 %t17541139 to i64
  %26650 = zext i32 %.pre-phi3586 to i64
  %26651 = mul nsw i64 %26650, %337
  %26652 = sub nsw i64 %26651, %298
  %26653 = zext i32 %.pre-phi3582 to i64
  %26654 = mul nsw i64 %26653, %337
  %26655 = sub nsw i64 %26654, %298
  %26656 = zext i32 %.pre-phi3592 to i64
  %26657 = mul nsw i64 %26656, %337
  %26658 = sub nsw i64 %26657, %298
  %26659 = zext i32 %.pre-phi3604 to i64
  %26660 = mul nsw i64 %26659, %337
  %26661 = sub nsw i64 %26660, %298
  %26662 = zext i32 %.pre-phi3598 to i64
  %26663 = mul nsw i64 %26662, %337
  %26664 = sub nsw i64 %26663, %298
  %26665 = sext i32 %a379 to i64
  %26666 = add nsw i64 %26665, 27
  %26667 = mul nsw i64 %26666, %334
  %26668 = add nsw i64 %26667, %338
  br label %"for blur_y.s0.x.x.rebased2191"

"produce blur_x2181":                             ; preds = %"for blur_y.s0.x.x.rebased2175"
  %t11442182 = add nsw i32 %499, %26646
  %26669 = sext i32 %t11442182 to i64
  %26670 = getelementptr inbounds i16, i16* %read_input822, i64 %26669
  %26671 = getelementptr inbounds i16, i16* %26670, i64 1
  %26672 = bitcast i16* %26671 to <16 x i16>*
  %26673 = load <16 x i16>, <16 x i16>* %26672, align 2, !tbaa !396
  %26674 = getelementptr inbounds i16, i16* %26670, i64 17
  %26675 = bitcast i16* %26674 to <16 x i16>*
  %26676 = load <16 x i16>, <16 x i16>* %26675, align 2, !tbaa !396
  %26677 = shufflevector <16 x i16> %26673, <16 x i16> %26676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26678 = bitcast i16* %26670 to <16 x i16>*
  %26679 = load <16 x i16>, <16 x i16>* %26678, align 2, !tbaa !396
  %26680 = getelementptr inbounds i16, i16* %26670, i64 16
  %26681 = bitcast i16* %26680 to <16 x i16>*
  %26682 = load <16 x i16>, <16 x i16>* %26681, align 2, !tbaa !396
  %26683 = shufflevector <16 x i16> %26679, <16 x i16> %26682, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26684 = getelementptr inbounds i16, i16* %26670, i64 2
  %26685 = bitcast i16* %26684 to <16 x i16>*
  %26686 = load <16 x i16>, <16 x i16>* %26685, align 2, !tbaa !396
  %26687 = getelementptr inbounds i16, i16* %26670, i64 18
  %26688 = bitcast i16* %26687 to <16 x i16>*
  %26689 = load <16 x i16>, <16 x i16>* %26688, align 2, !tbaa !396
  %26690 = shufflevector <16 x i16> %26686, <16 x i16> %26689, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26691 = getelementptr inbounds i16, i16* %26670, i64 4
  %26692 = bitcast i16* %26691 to <16 x i16>*
  %26693 = load <16 x i16>, <16 x i16>* %26692, align 2, !tbaa !396
  %26694 = getelementptr inbounds i16, i16* %26670, i64 20
  %26695 = bitcast i16* %26694 to <16 x i16>*
  %26696 = load <16 x i16>, <16 x i16>* %26695, align 2, !tbaa !396
  %26697 = shufflevector <16 x i16> %26693, <16 x i16> %26696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26698 = getelementptr inbounds i16, i16* %26670, i64 3
  %26699 = bitcast i16* %26698 to <16 x i16>*
  %26700 = load <16 x i16>, <16 x i16>* %26699, align 2, !tbaa !396
  %26701 = getelementptr inbounds i16, i16* %26670, i64 19
  %26702 = bitcast i16* %26701 to <16 x i16>*
  %26703 = load <16 x i16>, <16 x i16>* %26702, align 2, !tbaa !396
  %26704 = shufflevector <16 x i16> %26700, <16 x i16> %26703, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26705 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26683, <32 x i16> %26690, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26706 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26704, <32 x i16> %26697, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26707 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26705, <32 x i16> %26706, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26708 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26707, <32 x i16> %26677, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26709 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26708, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26710 = shufflevector <32 x i16> %26709, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26711 = shl nsw i64 %26643, 5
  %26712 = add nsw i64 %26711, %26502
  %26713 = getelementptr inbounds i16, i16* %blur_x879, i64 %26712
  %26714 = bitcast i16* %26713 to <16 x i16>*
  store <16 x i16> %26710, <16 x i16>* %26714, align 2, !tbaa !399
  %26715 = shufflevector <32 x i16> %26709, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26716 = getelementptr inbounds i16, i16* %26713, i64 16
  %26717 = bitcast i16* %26716 to <16 x i16>*
  store <16 x i16> %26715, <16 x i16>* %26717, align 2, !tbaa !399
  br label %"consume blur_x2183"

"consume blur_x2183":                             ; preds = %"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge", %"produce blur_x2181"
  %.pre-phi3654 = phi i64 [ %.pre3653, %"for blur_y.s0.x.x.rebased2175.consume blur_x2183_crit_edge" ], [ %26711, %"produce blur_x2181" ]
  %26718 = add nsw i64 %26505, %.pre-phi3654
  %26719 = getelementptr inbounds i16, i16* %blur_x879, i64 %26718
  %26720 = bitcast i16* %26719 to <16 x i16>*
  %26721 = load <16 x i16>, <16 x i16>* %26720, align 2, !tbaa !399
  %26722 = getelementptr inbounds i16, i16* %26719, i64 16
  %26723 = bitcast i16* %26722 to <16 x i16>*
  %26724 = load <16 x i16>, <16 x i16>* %26723, align 2, !tbaa !399
  %26725 = shufflevector <16 x i16> %26721, <16 x i16> %26724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26726 = add nsw i64 %26508, %.pre-phi3654
  %26727 = getelementptr inbounds i16, i16* %blur_x879, i64 %26726
  %26728 = bitcast i16* %26727 to <16 x i16>*
  %26729 = load <16 x i16>, <16 x i16>* %26728, align 2, !tbaa !399
  %26730 = getelementptr inbounds i16, i16* %26727, i64 16
  %26731 = bitcast i16* %26730 to <16 x i16>*
  %26732 = load <16 x i16>, <16 x i16>* %26731, align 2, !tbaa !399
  %26733 = shufflevector <16 x i16> %26729, <16 x i16> %26732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26734 = add nsw i64 %26511, %.pre-phi3654
  %26735 = getelementptr inbounds i16, i16* %blur_x879, i64 %26734
  %26736 = bitcast i16* %26735 to <16 x i16>*
  %26737 = load <16 x i16>, <16 x i16>* %26736, align 2, !tbaa !399
  %26738 = getelementptr inbounds i16, i16* %26735, i64 16
  %26739 = bitcast i16* %26738 to <16 x i16>*
  %26740 = load <16 x i16>, <16 x i16>* %26739, align 2, !tbaa !399
  %26741 = shufflevector <16 x i16> %26737, <16 x i16> %26740, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26742 = add nsw i64 %26514, %.pre-phi3654
  %26743 = getelementptr inbounds i16, i16* %blur_x879, i64 %26742
  %26744 = bitcast i16* %26743 to <16 x i16>*
  %26745 = load <16 x i16>, <16 x i16>* %26744, align 2, !tbaa !399
  %26746 = getelementptr inbounds i16, i16* %26743, i64 16
  %26747 = bitcast i16* %26746 to <16 x i16>*
  %26748 = load <16 x i16>, <16 x i16>* %26747, align 2, !tbaa !399
  %26749 = shufflevector <16 x i16> %26745, <16 x i16> %26748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26750 = add nsw i64 %26517, %.pre-phi3654
  %26751 = getelementptr inbounds i16, i16* %blur_x879, i64 %26750
  %26752 = bitcast i16* %26751 to <16 x i16>*
  %26753 = load <16 x i16>, <16 x i16>* %26752, align 2, !tbaa !399
  %26754 = getelementptr inbounds i16, i16* %26751, i64 16
  %26755 = bitcast i16* %26754 to <16 x i16>*
  %26756 = load <16 x i16>, <16 x i16>* %26755, align 2, !tbaa !399
  %26757 = shufflevector <16 x i16> %26753, <16 x i16> %26756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26758 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26733, <32 x i16> %26741, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26759 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26757, <32 x i16> %26749, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26760 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26758, <32 x i16> %26759, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26761 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26760, <32 x i16> %26725, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26762 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26761, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26763 = shufflevector <32 x i16> %26762, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26764 = add nsw i64 %26521, %.pre-phi3654
  %26765 = getelementptr inbounds i16, i16* %263, i64 %26764
  %26766 = bitcast i16* %26765 to <16 x i16>*
  store <16 x i16> %26763, <16 x i16>* %26766, align 2, !tbaa !401
  %26767 = shufflevector <32 x i16> %26762, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26768 = getelementptr inbounds i16, i16* %26765, i64 16
  %26769 = bitcast i16* %26768 to <16 x i16>*
  store <16 x i16> %26767, <16 x i16>* %26769, align 2, !tbaa !401
  %indvars.iv.next3459 = add nuw nsw i64 %indvars.iv3458, 1
  %26770 = icmp eq i64 %indvars.iv.next3459, %zext3460
  br i1 %26770, label %"end for blur_y.s0.x.x.rebased2176", label %"for blur_y.s0.x.x.rebased2175"

"for blur_y.s0.x.x.rebased2191":                  ; preds = %"for blur_y.s0.x.x.rebased2191.preheader", %"consume blur_x2202"
  %blur_y.s0.x.x.rebased2193 = phi i32 [ %26879, %"consume blur_x2202" ], [ 0, %"for blur_y.s0.x.x.rebased2191.preheader" ]
  %26771 = add nsw i32 %blur_y.s0.x.x.rebased2193, %t1626814
  %a5548 = shl nsw i32 %26771, 5
  %26772 = icmp sgt i32 %t1647, %a5548
  %blur_y.s0.x.v0.base.s2194 = select i1 %26772, i32 %a5548, i32 %t1647
  %26773 = icmp slt i32 %26771, 1
  %26774 = icmp sgt i32 %198, %a5548
  %26775 = or i1 %26773, %26774
  br i1 %26775, label %"produce blur_x2199", label %"consume blur_x2202"

"end for blur_y.s0.x.x.rebased2192":              ; preds = %"consume blur_x2202", %"end for blur_y.s0.x.x.rebased2176"
  br i1 %229, label %"produce blur_x2206", label %after_bb2203

"produce blur_x2199":                             ; preds = %"for blur_y.s0.x.x.rebased2191"
  %26776 = icmp slt i32 %blur_y.s0.x.v0.base.s2194, %198
  %blur_x.s0.x.v1.base.s2200 = select i1 %26776, i32 %blur_y.s0.x.v0.base.s2194, i32 %198
  %t11492201 = add nsw i32 %499, %blur_x.s0.x.v1.base.s2200
  %26777 = sext i32 %t11492201 to i64
  %26778 = getelementptr inbounds i16, i16* %read_input822, i64 %26777
  %26779 = getelementptr inbounds i16, i16* %26778, i64 1
  %26780 = bitcast i16* %26779 to <16 x i16>*
  %26781 = load <16 x i16>, <16 x i16>* %26780, align 2, !tbaa !396
  %26782 = getelementptr inbounds i16, i16* %26778, i64 17
  %26783 = bitcast i16* %26782 to <16 x i16>*
  %26784 = load <16 x i16>, <16 x i16>* %26783, align 2, !tbaa !396
  %26785 = shufflevector <16 x i16> %26781, <16 x i16> %26784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26786 = bitcast i16* %26778 to <16 x i16>*
  %26787 = load <16 x i16>, <16 x i16>* %26786, align 2, !tbaa !396
  %26788 = getelementptr inbounds i16, i16* %26778, i64 16
  %26789 = bitcast i16* %26788 to <16 x i16>*
  %26790 = load <16 x i16>, <16 x i16>* %26789, align 2, !tbaa !396
  %26791 = shufflevector <16 x i16> %26787, <16 x i16> %26790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26792 = getelementptr inbounds i16, i16* %26778, i64 2
  %26793 = bitcast i16* %26792 to <16 x i16>*
  %26794 = load <16 x i16>, <16 x i16>* %26793, align 2, !tbaa !396
  %26795 = getelementptr inbounds i16, i16* %26778, i64 18
  %26796 = bitcast i16* %26795 to <16 x i16>*
  %26797 = load <16 x i16>, <16 x i16>* %26796, align 2, !tbaa !396
  %26798 = shufflevector <16 x i16> %26794, <16 x i16> %26797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26799 = getelementptr inbounds i16, i16* %26778, i64 4
  %26800 = bitcast i16* %26799 to <16 x i16>*
  %26801 = load <16 x i16>, <16 x i16>* %26800, align 2, !tbaa !396
  %26802 = getelementptr inbounds i16, i16* %26778, i64 20
  %26803 = bitcast i16* %26802 to <16 x i16>*
  %26804 = load <16 x i16>, <16 x i16>* %26803, align 2, !tbaa !396
  %26805 = shufflevector <16 x i16> %26801, <16 x i16> %26804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26806 = getelementptr inbounds i16, i16* %26778, i64 3
  %26807 = bitcast i16* %26806 to <16 x i16>*
  %26808 = load <16 x i16>, <16 x i16>* %26807, align 2, !tbaa !396
  %26809 = getelementptr inbounds i16, i16* %26778, i64 19
  %26810 = bitcast i16* %26809 to <16 x i16>*
  %26811 = load <16 x i16>, <16 x i16>* %26810, align 2, !tbaa !396
  %26812 = shufflevector <16 x i16> %26808, <16 x i16> %26811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26813 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26791, <32 x i16> %26798, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26814 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26812, <32 x i16> %26805, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26815 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26813, <32 x i16> %26814, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26816 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26815, <32 x i16> %26785, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26817 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26816, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26818 = shufflevector <32 x i16> %26817, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26819 = sext i32 %blur_x.s0.x.v1.base.s2200 to i64
  %26820 = add nsw i64 %26819, %26649
  %26821 = getelementptr inbounds i16, i16* %blur_x879, i64 %26820
  %26822 = bitcast i16* %26821 to <16 x i16>*
  store <16 x i16> %26818, <16 x i16>* %26822, align 2, !tbaa !399
  %26823 = shufflevector <32 x i16> %26817, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26824 = getelementptr inbounds i16, i16* %26821, i64 16
  %26825 = bitcast i16* %26824 to <16 x i16>*
  store <16 x i16> %26823, <16 x i16>* %26825, align 2, !tbaa !399
  br label %"consume blur_x2202"

"consume blur_x2202":                             ; preds = %"for blur_y.s0.x.x.rebased2191", %"produce blur_x2199"
  %26826 = sext i32 %blur_y.s0.x.v0.base.s2194 to i64
  %26827 = add nsw i64 %26652, %26826
  %26828 = getelementptr inbounds i16, i16* %blur_x879, i64 %26827
  %26829 = bitcast i16* %26828 to <16 x i16>*
  %26830 = load <16 x i16>, <16 x i16>* %26829, align 2, !tbaa !399
  %26831 = getelementptr inbounds i16, i16* %26828, i64 16
  %26832 = bitcast i16* %26831 to <16 x i16>*
  %26833 = load <16 x i16>, <16 x i16>* %26832, align 2, !tbaa !399
  %26834 = shufflevector <16 x i16> %26830, <16 x i16> %26833, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26835 = add nsw i64 %26655, %26826
  %26836 = getelementptr inbounds i16, i16* %blur_x879, i64 %26835
  %26837 = bitcast i16* %26836 to <16 x i16>*
  %26838 = load <16 x i16>, <16 x i16>* %26837, align 2, !tbaa !399
  %26839 = getelementptr inbounds i16, i16* %26836, i64 16
  %26840 = bitcast i16* %26839 to <16 x i16>*
  %26841 = load <16 x i16>, <16 x i16>* %26840, align 2, !tbaa !399
  %26842 = shufflevector <16 x i16> %26838, <16 x i16> %26841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26843 = add nsw i64 %26658, %26826
  %26844 = getelementptr inbounds i16, i16* %blur_x879, i64 %26843
  %26845 = bitcast i16* %26844 to <16 x i16>*
  %26846 = load <16 x i16>, <16 x i16>* %26845, align 2, !tbaa !399
  %26847 = getelementptr inbounds i16, i16* %26844, i64 16
  %26848 = bitcast i16* %26847 to <16 x i16>*
  %26849 = load <16 x i16>, <16 x i16>* %26848, align 2, !tbaa !399
  %26850 = shufflevector <16 x i16> %26846, <16 x i16> %26849, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26851 = add nsw i64 %26661, %26826
  %26852 = getelementptr inbounds i16, i16* %blur_x879, i64 %26851
  %26853 = bitcast i16* %26852 to <16 x i16>*
  %26854 = load <16 x i16>, <16 x i16>* %26853, align 2, !tbaa !399
  %26855 = getelementptr inbounds i16, i16* %26852, i64 16
  %26856 = bitcast i16* %26855 to <16 x i16>*
  %26857 = load <16 x i16>, <16 x i16>* %26856, align 2, !tbaa !399
  %26858 = shufflevector <16 x i16> %26854, <16 x i16> %26857, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26859 = add nsw i64 %26664, %26826
  %26860 = getelementptr inbounds i16, i16* %blur_x879, i64 %26859
  %26861 = bitcast i16* %26860 to <16 x i16>*
  %26862 = load <16 x i16>, <16 x i16>* %26861, align 2, !tbaa !399
  %26863 = getelementptr inbounds i16, i16* %26860, i64 16
  %26864 = bitcast i16* %26863 to <16 x i16>*
  %26865 = load <16 x i16>, <16 x i16>* %26864, align 2, !tbaa !399
  %26866 = shufflevector <16 x i16> %26862, <16 x i16> %26865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26867 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26842, <32 x i16> %26850, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26868 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26866, <32 x i16> %26858, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26869 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26867, <32 x i16> %26868, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26870 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26869, <32 x i16> %26834, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26871 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26870, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26872 = shufflevector <32 x i16> %26871, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26873 = add nsw i64 %26668, %26826
  %26874 = getelementptr inbounds i16, i16* %263, i64 %26873
  %26875 = bitcast i16* %26874 to <16 x i16>*
  store <16 x i16> %26872, <16 x i16>* %26875, align 2, !tbaa !401
  %26876 = shufflevector <32 x i16> %26871, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26877 = getelementptr inbounds i16, i16* %26874, i64 16
  %26878 = bitcast i16* %26877 to <16 x i16>*
  store <16 x i16> %26876, <16 x i16>* %26878, align 2, !tbaa !401
  %26879 = add nuw nsw i32 %blur_y.s0.x.x.rebased2193, 1
  %.not2554 = icmp eq i32 %26879, %t1683898
  br i1 %.not2554, label %"end for blur_y.s0.x.x.rebased2192", label %"for blur_y.s0.x.x.rebased2191"

after_bb2203:                                     ; preds = %"end for blur_y.s0.x.x.rebased2192", %"produce blur_x2206"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2218.preheader", label %"end for blur_y.s0.x.x.rebased2219", !prof !386

"for blur_y.s0.x.x.rebased2218.preheader":        ; preds = %after_bb2203
  %26880 = sext i32 %t1682886 to i64
  %26881 = zext i32 %.pre-phi3592 to i64
  %26882 = mul nsw i64 %26881, %337
  %26883 = sub nsw i64 %26882, %298
  %26884 = zext i32 %.pre-phi3586 to i64
  %26885 = mul nsw i64 %26884, %337
  %26886 = sub nsw i64 %26885, %298
  %26887 = zext i32 %.pre-phi3598 to i64
  %26888 = mul nsw i64 %26887, %337
  %26889 = sub nsw i64 %26888, %298
  %26890 = zext i32 %.pre-phi3570 to i64
  %26891 = mul nsw i64 %26890, %337
  %26892 = sub nsw i64 %26891, %298
  %26893 = zext i32 %.pre-phi3604 to i64
  %26894 = mul nsw i64 %26893, %337
  %26895 = sub nsw i64 %26894, %298
  %26896 = sext i32 %a379 to i64
  %26897 = add nsw i64 %26896, 28
  %26898 = mul nsw i64 %26897, %334
  %26899 = add nsw i64 %26898, %338
  br label %"for blur_y.s0.x.x.rebased2218"

"produce blur_x2206":                             ; preds = %"end for blur_y.s0.x.x.rebased2192"
  %26900 = getelementptr inbounds i16, i16* %read_input822, i64 %503
  %26901 = getelementptr inbounds i16, i16* %26900, i64 -31
  %26902 = bitcast i16* %26901 to <16 x i16>*
  %26903 = load <16 x i16>, <16 x i16>* %26902, align 2, !tbaa !396
  %26904 = getelementptr inbounds i16, i16* %26900, i64 -15
  %26905 = bitcast i16* %26904 to <16 x i16>*
  %26906 = load <16 x i16>, <16 x i16>* %26905, align 2, !tbaa !396
  %26907 = shufflevector <16 x i16> %26903, <16 x i16> %26906, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26908 = getelementptr inbounds i16, i16* %26900, i64 -32
  %26909 = bitcast i16* %26908 to <16 x i16>*
  %26910 = load <16 x i16>, <16 x i16>* %26909, align 2, !tbaa !396
  %26911 = getelementptr inbounds i16, i16* %26900, i64 -16
  %26912 = bitcast i16* %26911 to <16 x i16>*
  %26913 = load <16 x i16>, <16 x i16>* %26912, align 2, !tbaa !396
  %26914 = shufflevector <16 x i16> %26910, <16 x i16> %26913, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26915 = getelementptr inbounds i16, i16* %26900, i64 -30
  %26916 = bitcast i16* %26915 to <16 x i16>*
  %26917 = load <16 x i16>, <16 x i16>* %26916, align 2, !tbaa !396
  %26918 = getelementptr inbounds i16, i16* %26900, i64 -14
  %26919 = bitcast i16* %26918 to <16 x i16>*
  %26920 = load <16 x i16>, <16 x i16>* %26919, align 2, !tbaa !396
  %26921 = shufflevector <16 x i16> %26917, <16 x i16> %26920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26922 = getelementptr inbounds i16, i16* %26900, i64 -28
  %26923 = bitcast i16* %26922 to <16 x i16>*
  %26924 = load <16 x i16>, <16 x i16>* %26923, align 2, !tbaa !396
  %26925 = getelementptr inbounds i16, i16* %26900, i64 -12
  %26926 = bitcast i16* %26925 to <16 x i16>*
  %26927 = load <16 x i16>, <16 x i16>* %26926, align 2, !tbaa !396
  %26928 = shufflevector <16 x i16> %26924, <16 x i16> %26927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26929 = getelementptr inbounds i16, i16* %26900, i64 -29
  %26930 = bitcast i16* %26929 to <16 x i16>*
  %26931 = load <16 x i16>, <16 x i16>* %26930, align 2, !tbaa !396
  %26932 = getelementptr inbounds i16, i16* %26900, i64 -13
  %26933 = bitcast i16* %26932 to <16 x i16>*
  %26934 = load <16 x i16>, <16 x i16>* %26933, align 2, !tbaa !396
  %26935 = shufflevector <16 x i16> %26931, <16 x i16> %26934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26936 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26914, <32 x i16> %26921, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26937 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26935, <32 x i16> %26928, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26938 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26936, <32 x i16> %26937, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26939 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26938, <32 x i16> %26907, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %26940 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %26939, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %26941 = shufflevector <32 x i16> %26940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26942 = zext i32 %.pre-phi3570 to i64
  %26943 = mul nsw i64 %299, %26942
  %26944 = add nsw i64 %301, %26943
  %26945 = getelementptr inbounds i16, i16* %blur_x879, i64 %26944
  %26946 = getelementptr inbounds i16, i16* %26945, i64 -32
  %26947 = bitcast i16* %26946 to <16 x i16>*
  store <16 x i16> %26941, <16 x i16>* %26947, align 2, !tbaa !399
  %26948 = shufflevector <32 x i16> %26940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26949 = getelementptr inbounds i16, i16* %26945, i64 -16
  %26950 = bitcast i16* %26949 to <16 x i16>*
  store <16 x i16> %26948, <16 x i16>* %26950, align 2, !tbaa !399
  %26951 = zext i32 %.pre-phi3592 to i64
  %26952 = mul nsw i64 %26951, %333
  %26953 = add nsw i64 %26952, %296
  %26954 = getelementptr inbounds i16, i16* %blur_x879, i64 %26953
  %26955 = getelementptr inbounds i16, i16* %26954, i64 -32
  %26956 = bitcast i16* %26955 to <16 x i16>*
  %26957 = load <16 x i16>, <16 x i16>* %26956, align 2, !tbaa !399
  %26958 = getelementptr inbounds i16, i16* %26954, i64 -16
  %26959 = bitcast i16* %26958 to <16 x i16>*
  %26960 = load <16 x i16>, <16 x i16>* %26959, align 2, !tbaa !399
  %26961 = shufflevector <16 x i16> %26957, <16 x i16> %26960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26962 = zext i32 %.pre-phi3586 to i64
  %26963 = mul nsw i64 %26962, %333
  %26964 = add nsw i64 %26963, %296
  %26965 = getelementptr inbounds i16, i16* %blur_x879, i64 %26964
  %26966 = getelementptr inbounds i16, i16* %26965, i64 -32
  %26967 = bitcast i16* %26966 to <16 x i16>*
  %26968 = load <16 x i16>, <16 x i16>* %26967, align 2, !tbaa !399
  %26969 = getelementptr inbounds i16, i16* %26965, i64 -16
  %26970 = bitcast i16* %26969 to <16 x i16>*
  %26971 = load <16 x i16>, <16 x i16>* %26970, align 2, !tbaa !399
  %26972 = shufflevector <16 x i16> %26968, <16 x i16> %26971, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26973 = zext i32 %.pre-phi3598 to i64
  %26974 = mul nsw i64 %26973, %333
  %26975 = add nsw i64 %26974, %296
  %26976 = getelementptr inbounds i16, i16* %blur_x879, i64 %26975
  %26977 = getelementptr inbounds i16, i16* %26976, i64 -32
  %26978 = bitcast i16* %26977 to <16 x i16>*
  %26979 = load <16 x i16>, <16 x i16>* %26978, align 2, !tbaa !399
  %26980 = getelementptr inbounds i16, i16* %26976, i64 -16
  %26981 = bitcast i16* %26980 to <16 x i16>*
  %26982 = load <16 x i16>, <16 x i16>* %26981, align 2, !tbaa !399
  %26983 = shufflevector <16 x i16> %26979, <16 x i16> %26982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26984 = mul nsw i64 %26942, %333
  %26985 = add nsw i64 %26984, %296
  %26986 = getelementptr inbounds i16, i16* %blur_x879, i64 %26985
  %26987 = getelementptr inbounds i16, i16* %26986, i64 -32
  %26988 = bitcast i16* %26987 to <16 x i16>*
  %26989 = load <16 x i16>, <16 x i16>* %26988, align 2, !tbaa !399
  %26990 = getelementptr inbounds i16, i16* %26986, i64 -16
  %26991 = bitcast i16* %26990 to <16 x i16>*
  %26992 = load <16 x i16>, <16 x i16>* %26991, align 2, !tbaa !399
  %26993 = shufflevector <16 x i16> %26989, <16 x i16> %26992, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26994 = zext i32 %.pre-phi3604 to i64
  %26995 = mul nsw i64 %26994, %333
  %26996 = add nsw i64 %26995, %296
  %26997 = getelementptr inbounds i16, i16* %blur_x879, i64 %26996
  %26998 = getelementptr inbounds i16, i16* %26997, i64 -32
  %26999 = bitcast i16* %26998 to <16 x i16>*
  %27000 = load <16 x i16>, <16 x i16>* %26999, align 2, !tbaa !399
  %27001 = getelementptr inbounds i16, i16* %26997, i64 -16
  %27002 = bitcast i16* %27001 to <16 x i16>*
  %27003 = load <16 x i16>, <16 x i16>* %27002, align 2, !tbaa !399
  %27004 = shufflevector <16 x i16> %27000, <16 x i16> %27003, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27005 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %26972, <32 x i16> %26983, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27006 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27004, <32 x i16> %26993, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27007 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27005, <32 x i16> %27006, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27008 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27007, <32 x i16> %26961, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27009 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27008, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27010 = shufflevector <32 x i16> %27009, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27011 = sext i32 %a379 to i64
  %27012 = add nsw i64 %27011, 28
  %27013 = mul nsw i64 %27012, %334
  %27014 = add nsw i64 %336, %27013
  %27015 = getelementptr inbounds i16, i16* %263, i64 %27014
  %27016 = getelementptr inbounds i16, i16* %27015, i64 -32
  %27017 = bitcast i16* %27016 to <16 x i16>*
  store <16 x i16> %27010, <16 x i16>* %27017, align 2, !tbaa !401
  %27018 = shufflevector <32 x i16> %27009, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27019 = getelementptr inbounds i16, i16* %27015, i64 -16
  %27020 = bitcast i16* %27019 to <16 x i16>*
  store <16 x i16> %27018, <16 x i16>* %27020, align 2, !tbaa !401
  br label %after_bb2203

"for blur_y.s0.x.x.rebased2218":                  ; preds = %"for blur_y.s0.x.x.rebased2218.preheader", %"consume blur_x2226"
  %indvars.iv3461 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2218.preheader" ], [ %indvars.iv.next3462, %"consume blur_x2226" ]
  %27021 = add nsw i64 %indvars.iv3461, %303
  %27022 = icmp slt i64 %27021, 1
  %27023 = trunc i64 %27021 to i32
  %27024 = shl nsw i32 %27023, 5
  %27025 = icmp sgt i32 %198, %27024
  %27026 = or i1 %27022, %27025
  br i1 %27026, label %"produce blur_x2224", label %"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge"

"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2218"
  %.pre3655 = shl nsw i64 %27021, 5
  br label %"consume blur_x2226"

"end for blur_y.s0.x.x.rebased2219":              ; preds = %"consume blur_x2226", %after_bb2203
  br i1 %304, label %"for blur_y.s0.x.x.rebased2234.preheader", label %"end for blur_y.s0.x.x.rebased2235", !prof !386

"for blur_y.s0.x.x.rebased2234.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2219"
  %27027 = sext i32 %t1682886 to i64
  %27028 = zext i32 %.pre-phi3592 to i64
  %27029 = mul nsw i64 %27028, %337
  %27030 = sub nsw i64 %27029, %298
  %27031 = zext i32 %.pre-phi3586 to i64
  %27032 = mul nsw i64 %27031, %337
  %27033 = sub nsw i64 %27032, %298
  %27034 = zext i32 %.pre-phi3598 to i64
  %27035 = mul nsw i64 %27034, %337
  %27036 = sub nsw i64 %27035, %298
  %27037 = zext i32 %.pre-phi3570 to i64
  %27038 = mul nsw i64 %27037, %337
  %27039 = sub nsw i64 %27038, %298
  %27040 = zext i32 %.pre-phi3604 to i64
  %27041 = mul nsw i64 %27040, %337
  %27042 = sub nsw i64 %27041, %298
  %27043 = sext i32 %a379 to i64
  %27044 = add nsw i64 %27043, 28
  %27045 = mul nsw i64 %27044, %334
  %27046 = add nsw i64 %27045, %338
  br label %"for blur_y.s0.x.x.rebased2234"

"produce blur_x2224":                             ; preds = %"for blur_y.s0.x.x.rebased2218"
  %t11602225 = add nsw i32 %505, %27024
  %27047 = sext i32 %t11602225 to i64
  %27048 = getelementptr inbounds i16, i16* %read_input822, i64 %27047
  %27049 = getelementptr inbounds i16, i16* %27048, i64 1
  %27050 = bitcast i16* %27049 to <16 x i16>*
  %27051 = load <16 x i16>, <16 x i16>* %27050, align 2, !tbaa !396
  %27052 = getelementptr inbounds i16, i16* %27048, i64 17
  %27053 = bitcast i16* %27052 to <16 x i16>*
  %27054 = load <16 x i16>, <16 x i16>* %27053, align 2, !tbaa !396
  %27055 = shufflevector <16 x i16> %27051, <16 x i16> %27054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27056 = bitcast i16* %27048 to <16 x i16>*
  %27057 = load <16 x i16>, <16 x i16>* %27056, align 2, !tbaa !396
  %27058 = getelementptr inbounds i16, i16* %27048, i64 16
  %27059 = bitcast i16* %27058 to <16 x i16>*
  %27060 = load <16 x i16>, <16 x i16>* %27059, align 2, !tbaa !396
  %27061 = shufflevector <16 x i16> %27057, <16 x i16> %27060, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27062 = getelementptr inbounds i16, i16* %27048, i64 2
  %27063 = bitcast i16* %27062 to <16 x i16>*
  %27064 = load <16 x i16>, <16 x i16>* %27063, align 2, !tbaa !396
  %27065 = getelementptr inbounds i16, i16* %27048, i64 18
  %27066 = bitcast i16* %27065 to <16 x i16>*
  %27067 = load <16 x i16>, <16 x i16>* %27066, align 2, !tbaa !396
  %27068 = shufflevector <16 x i16> %27064, <16 x i16> %27067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27069 = getelementptr inbounds i16, i16* %27048, i64 4
  %27070 = bitcast i16* %27069 to <16 x i16>*
  %27071 = load <16 x i16>, <16 x i16>* %27070, align 2, !tbaa !396
  %27072 = getelementptr inbounds i16, i16* %27048, i64 20
  %27073 = bitcast i16* %27072 to <16 x i16>*
  %27074 = load <16 x i16>, <16 x i16>* %27073, align 2, !tbaa !396
  %27075 = shufflevector <16 x i16> %27071, <16 x i16> %27074, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27076 = getelementptr inbounds i16, i16* %27048, i64 3
  %27077 = bitcast i16* %27076 to <16 x i16>*
  %27078 = load <16 x i16>, <16 x i16>* %27077, align 2, !tbaa !396
  %27079 = getelementptr inbounds i16, i16* %27048, i64 19
  %27080 = bitcast i16* %27079 to <16 x i16>*
  %27081 = load <16 x i16>, <16 x i16>* %27080, align 2, !tbaa !396
  %27082 = shufflevector <16 x i16> %27078, <16 x i16> %27081, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27083 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27061, <32 x i16> %27068, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27084 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27082, <32 x i16> %27075, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27085 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27083, <32 x i16> %27084, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27086 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27085, <32 x i16> %27055, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27087 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27086, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27088 = shufflevector <32 x i16> %27087, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27089 = shl nsw i64 %27021, 5
  %27090 = add nsw i64 %27089, %26880
  %27091 = getelementptr inbounds i16, i16* %blur_x879, i64 %27090
  %27092 = bitcast i16* %27091 to <16 x i16>*
  store <16 x i16> %27088, <16 x i16>* %27092, align 2, !tbaa !399
  %27093 = shufflevector <32 x i16> %27087, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27094 = getelementptr inbounds i16, i16* %27091, i64 16
  %27095 = bitcast i16* %27094 to <16 x i16>*
  store <16 x i16> %27093, <16 x i16>* %27095, align 2, !tbaa !399
  br label %"consume blur_x2226"

"consume blur_x2226":                             ; preds = %"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge", %"produce blur_x2224"
  %.pre-phi3656 = phi i64 [ %.pre3655, %"for blur_y.s0.x.x.rebased2218.consume blur_x2226_crit_edge" ], [ %27089, %"produce blur_x2224" ]
  %27096 = add nsw i64 %26883, %.pre-phi3656
  %27097 = getelementptr inbounds i16, i16* %blur_x879, i64 %27096
  %27098 = bitcast i16* %27097 to <16 x i16>*
  %27099 = load <16 x i16>, <16 x i16>* %27098, align 2, !tbaa !399
  %27100 = getelementptr inbounds i16, i16* %27097, i64 16
  %27101 = bitcast i16* %27100 to <16 x i16>*
  %27102 = load <16 x i16>, <16 x i16>* %27101, align 2, !tbaa !399
  %27103 = shufflevector <16 x i16> %27099, <16 x i16> %27102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27104 = add nsw i64 %26886, %.pre-phi3656
  %27105 = getelementptr inbounds i16, i16* %blur_x879, i64 %27104
  %27106 = bitcast i16* %27105 to <16 x i16>*
  %27107 = load <16 x i16>, <16 x i16>* %27106, align 2, !tbaa !399
  %27108 = getelementptr inbounds i16, i16* %27105, i64 16
  %27109 = bitcast i16* %27108 to <16 x i16>*
  %27110 = load <16 x i16>, <16 x i16>* %27109, align 2, !tbaa !399
  %27111 = shufflevector <16 x i16> %27107, <16 x i16> %27110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27112 = add nsw i64 %26889, %.pre-phi3656
  %27113 = getelementptr inbounds i16, i16* %blur_x879, i64 %27112
  %27114 = bitcast i16* %27113 to <16 x i16>*
  %27115 = load <16 x i16>, <16 x i16>* %27114, align 2, !tbaa !399
  %27116 = getelementptr inbounds i16, i16* %27113, i64 16
  %27117 = bitcast i16* %27116 to <16 x i16>*
  %27118 = load <16 x i16>, <16 x i16>* %27117, align 2, !tbaa !399
  %27119 = shufflevector <16 x i16> %27115, <16 x i16> %27118, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27120 = add nsw i64 %26892, %.pre-phi3656
  %27121 = getelementptr inbounds i16, i16* %blur_x879, i64 %27120
  %27122 = bitcast i16* %27121 to <16 x i16>*
  %27123 = load <16 x i16>, <16 x i16>* %27122, align 2, !tbaa !399
  %27124 = getelementptr inbounds i16, i16* %27121, i64 16
  %27125 = bitcast i16* %27124 to <16 x i16>*
  %27126 = load <16 x i16>, <16 x i16>* %27125, align 2, !tbaa !399
  %27127 = shufflevector <16 x i16> %27123, <16 x i16> %27126, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27128 = add nsw i64 %26895, %.pre-phi3656
  %27129 = getelementptr inbounds i16, i16* %blur_x879, i64 %27128
  %27130 = bitcast i16* %27129 to <16 x i16>*
  %27131 = load <16 x i16>, <16 x i16>* %27130, align 2, !tbaa !399
  %27132 = getelementptr inbounds i16, i16* %27129, i64 16
  %27133 = bitcast i16* %27132 to <16 x i16>*
  %27134 = load <16 x i16>, <16 x i16>* %27133, align 2, !tbaa !399
  %27135 = shufflevector <16 x i16> %27131, <16 x i16> %27134, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27136 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27111, <32 x i16> %27119, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27137 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27135, <32 x i16> %27127, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27138 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27136, <32 x i16> %27137, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27139 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27138, <32 x i16> %27103, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27140 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27139, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27141 = shufflevector <32 x i16> %27140, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27142 = add nsw i64 %26899, %.pre-phi3656
  %27143 = getelementptr inbounds i16, i16* %263, i64 %27142
  %27144 = bitcast i16* %27143 to <16 x i16>*
  store <16 x i16> %27141, <16 x i16>* %27144, align 2, !tbaa !401
  %27145 = shufflevector <32 x i16> %27140, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27146 = getelementptr inbounds i16, i16* %27143, i64 16
  %27147 = bitcast i16* %27146 to <16 x i16>*
  store <16 x i16> %27145, <16 x i16>* %27147, align 2, !tbaa !401
  %indvars.iv.next3462 = add nuw nsw i64 %indvars.iv3461, 1
  %27148 = icmp eq i64 %indvars.iv.next3462, %zext3463
  br i1 %27148, label %"end for blur_y.s0.x.x.rebased2219", label %"for blur_y.s0.x.x.rebased2218"

"for blur_y.s0.x.x.rebased2234":                  ; preds = %"for blur_y.s0.x.x.rebased2234.preheader", %"consume blur_x2245"
  %blur_y.s0.x.x.rebased2236 = phi i32 [ %27257, %"consume blur_x2245" ], [ 0, %"for blur_y.s0.x.x.rebased2234.preheader" ]
  %27149 = add nsw i32 %blur_y.s0.x.x.rebased2236, %t1626814
  %a5705 = shl nsw i32 %27149, 5
  %27150 = icmp sgt i32 %t1647, %a5705
  %blur_y.s0.x.v0.base.s2237 = select i1 %27150, i32 %a5705, i32 %t1647
  %27151 = icmp slt i32 %27149, 1
  %27152 = icmp sgt i32 %198, %a5705
  %27153 = or i1 %27151, %27152
  br i1 %27153, label %"produce blur_x2242", label %"consume blur_x2245"

"end for blur_y.s0.x.x.rebased2235":              ; preds = %"consume blur_x2245", %"end for blur_y.s0.x.x.rebased2219"
  br i1 %229, label %"produce blur_x2249", label %after_bb2246

"produce blur_x2242":                             ; preds = %"for blur_y.s0.x.x.rebased2234"
  %27154 = icmp slt i32 %blur_y.s0.x.v0.base.s2237, %198
  %blur_x.s0.x.v1.base.s2243 = select i1 %27154, i32 %blur_y.s0.x.v0.base.s2237, i32 %198
  %t11652244 = add nsw i32 %505, %blur_x.s0.x.v1.base.s2243
  %27155 = sext i32 %t11652244 to i64
  %27156 = getelementptr inbounds i16, i16* %read_input822, i64 %27155
  %27157 = getelementptr inbounds i16, i16* %27156, i64 1
  %27158 = bitcast i16* %27157 to <16 x i16>*
  %27159 = load <16 x i16>, <16 x i16>* %27158, align 2, !tbaa !396
  %27160 = getelementptr inbounds i16, i16* %27156, i64 17
  %27161 = bitcast i16* %27160 to <16 x i16>*
  %27162 = load <16 x i16>, <16 x i16>* %27161, align 2, !tbaa !396
  %27163 = shufflevector <16 x i16> %27159, <16 x i16> %27162, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27164 = bitcast i16* %27156 to <16 x i16>*
  %27165 = load <16 x i16>, <16 x i16>* %27164, align 2, !tbaa !396
  %27166 = getelementptr inbounds i16, i16* %27156, i64 16
  %27167 = bitcast i16* %27166 to <16 x i16>*
  %27168 = load <16 x i16>, <16 x i16>* %27167, align 2, !tbaa !396
  %27169 = shufflevector <16 x i16> %27165, <16 x i16> %27168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27170 = getelementptr inbounds i16, i16* %27156, i64 2
  %27171 = bitcast i16* %27170 to <16 x i16>*
  %27172 = load <16 x i16>, <16 x i16>* %27171, align 2, !tbaa !396
  %27173 = getelementptr inbounds i16, i16* %27156, i64 18
  %27174 = bitcast i16* %27173 to <16 x i16>*
  %27175 = load <16 x i16>, <16 x i16>* %27174, align 2, !tbaa !396
  %27176 = shufflevector <16 x i16> %27172, <16 x i16> %27175, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27177 = getelementptr inbounds i16, i16* %27156, i64 4
  %27178 = bitcast i16* %27177 to <16 x i16>*
  %27179 = load <16 x i16>, <16 x i16>* %27178, align 2, !tbaa !396
  %27180 = getelementptr inbounds i16, i16* %27156, i64 20
  %27181 = bitcast i16* %27180 to <16 x i16>*
  %27182 = load <16 x i16>, <16 x i16>* %27181, align 2, !tbaa !396
  %27183 = shufflevector <16 x i16> %27179, <16 x i16> %27182, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27184 = getelementptr inbounds i16, i16* %27156, i64 3
  %27185 = bitcast i16* %27184 to <16 x i16>*
  %27186 = load <16 x i16>, <16 x i16>* %27185, align 2, !tbaa !396
  %27187 = getelementptr inbounds i16, i16* %27156, i64 19
  %27188 = bitcast i16* %27187 to <16 x i16>*
  %27189 = load <16 x i16>, <16 x i16>* %27188, align 2, !tbaa !396
  %27190 = shufflevector <16 x i16> %27186, <16 x i16> %27189, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27191 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27169, <32 x i16> %27176, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27192 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27190, <32 x i16> %27183, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27193 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27191, <32 x i16> %27192, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27194 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27193, <32 x i16> %27163, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27195 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27194, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27196 = shufflevector <32 x i16> %27195, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27197 = sext i32 %blur_x.s0.x.v1.base.s2243 to i64
  %27198 = add nsw i64 %27197, %27027
  %27199 = getelementptr inbounds i16, i16* %blur_x879, i64 %27198
  %27200 = bitcast i16* %27199 to <16 x i16>*
  store <16 x i16> %27196, <16 x i16>* %27200, align 2, !tbaa !399
  %27201 = shufflevector <32 x i16> %27195, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27202 = getelementptr inbounds i16, i16* %27199, i64 16
  %27203 = bitcast i16* %27202 to <16 x i16>*
  store <16 x i16> %27201, <16 x i16>* %27203, align 2, !tbaa !399
  br label %"consume blur_x2245"

"consume blur_x2245":                             ; preds = %"for blur_y.s0.x.x.rebased2234", %"produce blur_x2242"
  %27204 = sext i32 %blur_y.s0.x.v0.base.s2237 to i64
  %27205 = add nsw i64 %27030, %27204
  %27206 = getelementptr inbounds i16, i16* %blur_x879, i64 %27205
  %27207 = bitcast i16* %27206 to <16 x i16>*
  %27208 = load <16 x i16>, <16 x i16>* %27207, align 2, !tbaa !399
  %27209 = getelementptr inbounds i16, i16* %27206, i64 16
  %27210 = bitcast i16* %27209 to <16 x i16>*
  %27211 = load <16 x i16>, <16 x i16>* %27210, align 2, !tbaa !399
  %27212 = shufflevector <16 x i16> %27208, <16 x i16> %27211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27213 = add nsw i64 %27033, %27204
  %27214 = getelementptr inbounds i16, i16* %blur_x879, i64 %27213
  %27215 = bitcast i16* %27214 to <16 x i16>*
  %27216 = load <16 x i16>, <16 x i16>* %27215, align 2, !tbaa !399
  %27217 = getelementptr inbounds i16, i16* %27214, i64 16
  %27218 = bitcast i16* %27217 to <16 x i16>*
  %27219 = load <16 x i16>, <16 x i16>* %27218, align 2, !tbaa !399
  %27220 = shufflevector <16 x i16> %27216, <16 x i16> %27219, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27221 = add nsw i64 %27036, %27204
  %27222 = getelementptr inbounds i16, i16* %blur_x879, i64 %27221
  %27223 = bitcast i16* %27222 to <16 x i16>*
  %27224 = load <16 x i16>, <16 x i16>* %27223, align 2, !tbaa !399
  %27225 = getelementptr inbounds i16, i16* %27222, i64 16
  %27226 = bitcast i16* %27225 to <16 x i16>*
  %27227 = load <16 x i16>, <16 x i16>* %27226, align 2, !tbaa !399
  %27228 = shufflevector <16 x i16> %27224, <16 x i16> %27227, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27229 = add nsw i64 %27039, %27204
  %27230 = getelementptr inbounds i16, i16* %blur_x879, i64 %27229
  %27231 = bitcast i16* %27230 to <16 x i16>*
  %27232 = load <16 x i16>, <16 x i16>* %27231, align 2, !tbaa !399
  %27233 = getelementptr inbounds i16, i16* %27230, i64 16
  %27234 = bitcast i16* %27233 to <16 x i16>*
  %27235 = load <16 x i16>, <16 x i16>* %27234, align 2, !tbaa !399
  %27236 = shufflevector <16 x i16> %27232, <16 x i16> %27235, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27237 = add nsw i64 %27042, %27204
  %27238 = getelementptr inbounds i16, i16* %blur_x879, i64 %27237
  %27239 = bitcast i16* %27238 to <16 x i16>*
  %27240 = load <16 x i16>, <16 x i16>* %27239, align 2, !tbaa !399
  %27241 = getelementptr inbounds i16, i16* %27238, i64 16
  %27242 = bitcast i16* %27241 to <16 x i16>*
  %27243 = load <16 x i16>, <16 x i16>* %27242, align 2, !tbaa !399
  %27244 = shufflevector <16 x i16> %27240, <16 x i16> %27243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27245 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27220, <32 x i16> %27228, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27246 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27244, <32 x i16> %27236, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27247 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27245, <32 x i16> %27246, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27248 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27247, <32 x i16> %27212, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27249 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27248, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27250 = shufflevector <32 x i16> %27249, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27251 = add nsw i64 %27046, %27204
  %27252 = getelementptr inbounds i16, i16* %263, i64 %27251
  %27253 = bitcast i16* %27252 to <16 x i16>*
  store <16 x i16> %27250, <16 x i16>* %27253, align 2, !tbaa !401
  %27254 = shufflevector <32 x i16> %27249, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27255 = getelementptr inbounds i16, i16* %27252, i64 16
  %27256 = bitcast i16* %27255 to <16 x i16>*
  store <16 x i16> %27254, <16 x i16>* %27256, align 2, !tbaa !401
  %27257 = add nuw nsw i32 %blur_y.s0.x.x.rebased2236, 1
  %.not2550 = icmp eq i32 %27257, %t1683898
  br i1 %.not2550, label %"end for blur_y.s0.x.x.rebased2235", label %"for blur_y.s0.x.x.rebased2234"

after_bb2246:                                     ; preds = %"end for blur_y.s0.x.x.rebased2235", %"produce blur_x2249"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2261.preheader", label %"end for blur_y.s0.x.x.rebased2262", !prof !386

"for blur_y.s0.x.x.rebased2261.preheader":        ; preds = %after_bb2246
  %27258 = sext i32 %t1688914 to i64
  %27259 = zext i32 %.pre-phi3598 to i64
  %27260 = mul nsw i64 %27259, %337
  %27261 = sub nsw i64 %27260, %298
  %27262 = zext i32 %.pre-phi3592 to i64
  %27263 = mul nsw i64 %27262, %337
  %27264 = sub nsw i64 %27263, %298
  %27265 = zext i32 %.pre-phi3604 to i64
  %27266 = mul nsw i64 %27265, %337
  %27267 = sub nsw i64 %27266, %298
  %27268 = zext i32 %.pre-phi3574 to i64
  %27269 = mul nsw i64 %27268, %337
  %27270 = sub nsw i64 %27269, %298
  %27271 = zext i32 %.pre-phi3570 to i64
  %27272 = mul nsw i64 %27271, %337
  %27273 = sub nsw i64 %27272, %298
  %27274 = sext i32 %a379 to i64
  %27275 = add nsw i64 %27274, 29
  %27276 = mul nsw i64 %27275, %334
  %27277 = add nsw i64 %27276, %338
  br label %"for blur_y.s0.x.x.rebased2261"

"produce blur_x2249":                             ; preds = %"end for blur_y.s0.x.x.rebased2235"
  %27278 = getelementptr inbounds i16, i16* %read_input822, i64 %509
  %27279 = getelementptr inbounds i16, i16* %27278, i64 -31
  %27280 = bitcast i16* %27279 to <16 x i16>*
  %27281 = load <16 x i16>, <16 x i16>* %27280, align 2, !tbaa !396
  %27282 = getelementptr inbounds i16, i16* %27278, i64 -15
  %27283 = bitcast i16* %27282 to <16 x i16>*
  %27284 = load <16 x i16>, <16 x i16>* %27283, align 2, !tbaa !396
  %27285 = shufflevector <16 x i16> %27281, <16 x i16> %27284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27286 = getelementptr inbounds i16, i16* %27278, i64 -32
  %27287 = bitcast i16* %27286 to <16 x i16>*
  %27288 = load <16 x i16>, <16 x i16>* %27287, align 2, !tbaa !396
  %27289 = getelementptr inbounds i16, i16* %27278, i64 -16
  %27290 = bitcast i16* %27289 to <16 x i16>*
  %27291 = load <16 x i16>, <16 x i16>* %27290, align 2, !tbaa !396
  %27292 = shufflevector <16 x i16> %27288, <16 x i16> %27291, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27293 = getelementptr inbounds i16, i16* %27278, i64 -30
  %27294 = bitcast i16* %27293 to <16 x i16>*
  %27295 = load <16 x i16>, <16 x i16>* %27294, align 2, !tbaa !396
  %27296 = getelementptr inbounds i16, i16* %27278, i64 -14
  %27297 = bitcast i16* %27296 to <16 x i16>*
  %27298 = load <16 x i16>, <16 x i16>* %27297, align 2, !tbaa !396
  %27299 = shufflevector <16 x i16> %27295, <16 x i16> %27298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27300 = getelementptr inbounds i16, i16* %27278, i64 -28
  %27301 = bitcast i16* %27300 to <16 x i16>*
  %27302 = load <16 x i16>, <16 x i16>* %27301, align 2, !tbaa !396
  %27303 = getelementptr inbounds i16, i16* %27278, i64 -12
  %27304 = bitcast i16* %27303 to <16 x i16>*
  %27305 = load <16 x i16>, <16 x i16>* %27304, align 2, !tbaa !396
  %27306 = shufflevector <16 x i16> %27302, <16 x i16> %27305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27307 = getelementptr inbounds i16, i16* %27278, i64 -29
  %27308 = bitcast i16* %27307 to <16 x i16>*
  %27309 = load <16 x i16>, <16 x i16>* %27308, align 2, !tbaa !396
  %27310 = getelementptr inbounds i16, i16* %27278, i64 -13
  %27311 = bitcast i16* %27310 to <16 x i16>*
  %27312 = load <16 x i16>, <16 x i16>* %27311, align 2, !tbaa !396
  %27313 = shufflevector <16 x i16> %27309, <16 x i16> %27312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27314 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27292, <32 x i16> %27299, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27315 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27313, <32 x i16> %27306, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27316 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27314, <32 x i16> %27315, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27317 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27316, <32 x i16> %27285, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27318 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27317, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27319 = shufflevector <32 x i16> %27318, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27320 = zext i32 %.pre-phi3574 to i64
  %27321 = mul nsw i64 %299, %27320
  %27322 = add nsw i64 %301, %27321
  %27323 = getelementptr inbounds i16, i16* %blur_x879, i64 %27322
  %27324 = getelementptr inbounds i16, i16* %27323, i64 -32
  %27325 = bitcast i16* %27324 to <16 x i16>*
  store <16 x i16> %27319, <16 x i16>* %27325, align 2, !tbaa !399
  %27326 = shufflevector <32 x i16> %27318, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27327 = getelementptr inbounds i16, i16* %27323, i64 -16
  %27328 = bitcast i16* %27327 to <16 x i16>*
  store <16 x i16> %27326, <16 x i16>* %27328, align 2, !tbaa !399
  %27329 = zext i32 %.pre-phi3598 to i64
  %27330 = mul nsw i64 %27329, %333
  %27331 = add nsw i64 %27330, %296
  %27332 = getelementptr inbounds i16, i16* %blur_x879, i64 %27331
  %27333 = getelementptr inbounds i16, i16* %27332, i64 -32
  %27334 = bitcast i16* %27333 to <16 x i16>*
  %27335 = load <16 x i16>, <16 x i16>* %27334, align 2, !tbaa !399
  %27336 = getelementptr inbounds i16, i16* %27332, i64 -16
  %27337 = bitcast i16* %27336 to <16 x i16>*
  %27338 = load <16 x i16>, <16 x i16>* %27337, align 2, !tbaa !399
  %27339 = shufflevector <16 x i16> %27335, <16 x i16> %27338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27340 = zext i32 %.pre-phi3592 to i64
  %27341 = mul nsw i64 %27340, %333
  %27342 = add nsw i64 %27341, %296
  %27343 = getelementptr inbounds i16, i16* %blur_x879, i64 %27342
  %27344 = getelementptr inbounds i16, i16* %27343, i64 -32
  %27345 = bitcast i16* %27344 to <16 x i16>*
  %27346 = load <16 x i16>, <16 x i16>* %27345, align 2, !tbaa !399
  %27347 = getelementptr inbounds i16, i16* %27343, i64 -16
  %27348 = bitcast i16* %27347 to <16 x i16>*
  %27349 = load <16 x i16>, <16 x i16>* %27348, align 2, !tbaa !399
  %27350 = shufflevector <16 x i16> %27346, <16 x i16> %27349, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27351 = zext i32 %.pre-phi3604 to i64
  %27352 = mul nsw i64 %27351, %333
  %27353 = add nsw i64 %27352, %296
  %27354 = getelementptr inbounds i16, i16* %blur_x879, i64 %27353
  %27355 = getelementptr inbounds i16, i16* %27354, i64 -32
  %27356 = bitcast i16* %27355 to <16 x i16>*
  %27357 = load <16 x i16>, <16 x i16>* %27356, align 2, !tbaa !399
  %27358 = getelementptr inbounds i16, i16* %27354, i64 -16
  %27359 = bitcast i16* %27358 to <16 x i16>*
  %27360 = load <16 x i16>, <16 x i16>* %27359, align 2, !tbaa !399
  %27361 = shufflevector <16 x i16> %27357, <16 x i16> %27360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27362 = mul nsw i64 %27320, %333
  %27363 = add nsw i64 %27362, %296
  %27364 = getelementptr inbounds i16, i16* %blur_x879, i64 %27363
  %27365 = getelementptr inbounds i16, i16* %27364, i64 -32
  %27366 = bitcast i16* %27365 to <16 x i16>*
  %27367 = load <16 x i16>, <16 x i16>* %27366, align 2, !tbaa !399
  %27368 = getelementptr inbounds i16, i16* %27364, i64 -16
  %27369 = bitcast i16* %27368 to <16 x i16>*
  %27370 = load <16 x i16>, <16 x i16>* %27369, align 2, !tbaa !399
  %27371 = shufflevector <16 x i16> %27367, <16 x i16> %27370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27372 = zext i32 %.pre-phi3570 to i64
  %27373 = mul nsw i64 %27372, %333
  %27374 = add nsw i64 %27373, %296
  %27375 = getelementptr inbounds i16, i16* %blur_x879, i64 %27374
  %27376 = getelementptr inbounds i16, i16* %27375, i64 -32
  %27377 = bitcast i16* %27376 to <16 x i16>*
  %27378 = load <16 x i16>, <16 x i16>* %27377, align 2, !tbaa !399
  %27379 = getelementptr inbounds i16, i16* %27375, i64 -16
  %27380 = bitcast i16* %27379 to <16 x i16>*
  %27381 = load <16 x i16>, <16 x i16>* %27380, align 2, !tbaa !399
  %27382 = shufflevector <16 x i16> %27378, <16 x i16> %27381, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27383 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27350, <32 x i16> %27361, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27384 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27382, <32 x i16> %27371, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27385 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27383, <32 x i16> %27384, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27386 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27385, <32 x i16> %27339, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27387 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27386, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27388 = shufflevector <32 x i16> %27387, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27389 = sext i32 %a379 to i64
  %27390 = add nsw i64 %27389, 29
  %27391 = mul nsw i64 %27390, %334
  %27392 = add nsw i64 %336, %27391
  %27393 = getelementptr inbounds i16, i16* %263, i64 %27392
  %27394 = getelementptr inbounds i16, i16* %27393, i64 -32
  %27395 = bitcast i16* %27394 to <16 x i16>*
  store <16 x i16> %27388, <16 x i16>* %27395, align 2, !tbaa !401
  %27396 = shufflevector <32 x i16> %27387, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27397 = getelementptr inbounds i16, i16* %27393, i64 -16
  %27398 = bitcast i16* %27397 to <16 x i16>*
  store <16 x i16> %27396, <16 x i16>* %27398, align 2, !tbaa !401
  br label %after_bb2246

"for blur_y.s0.x.x.rebased2261":                  ; preds = %"for blur_y.s0.x.x.rebased2261.preheader", %"consume blur_x2269"
  %indvars.iv3464 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2261.preheader" ], [ %indvars.iv.next3465, %"consume blur_x2269" ]
  %27399 = add nsw i64 %indvars.iv3464, %303
  %27400 = icmp slt i64 %27399, 1
  %27401 = trunc i64 %27399 to i32
  %27402 = shl nsw i32 %27401, 5
  %27403 = icmp sgt i32 %198, %27402
  %27404 = or i1 %27400, %27403
  br i1 %27404, label %"produce blur_x2267", label %"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge"

"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2261"
  %.pre3657 = shl nsw i64 %27399, 5
  br label %"consume blur_x2269"

"end for blur_y.s0.x.x.rebased2262":              ; preds = %"consume blur_x2269", %after_bb2246
  br i1 %304, label %"for blur_y.s0.x.x.rebased2277.preheader", label %"end for blur_y.s0.x.x.rebased2278", !prof !386

"for blur_y.s0.x.x.rebased2277.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2262"
  %27405 = sext i32 %t1688914 to i64
  %27406 = zext i32 %.pre-phi3598 to i64
  %27407 = mul nsw i64 %27406, %337
  %27408 = sub nsw i64 %27407, %298
  %27409 = zext i32 %.pre-phi3592 to i64
  %27410 = mul nsw i64 %27409, %337
  %27411 = sub nsw i64 %27410, %298
  %27412 = zext i32 %.pre-phi3604 to i64
  %27413 = mul nsw i64 %27412, %337
  %27414 = sub nsw i64 %27413, %298
  %27415 = zext i32 %.pre-phi3574 to i64
  %27416 = mul nsw i64 %27415, %337
  %27417 = sub nsw i64 %27416, %298
  %27418 = zext i32 %.pre-phi3570 to i64
  %27419 = mul nsw i64 %27418, %337
  %27420 = sub nsw i64 %27419, %298
  %27421 = sext i32 %a379 to i64
  %27422 = add nsw i64 %27421, 29
  %27423 = mul nsw i64 %27422, %334
  %27424 = add nsw i64 %27423, %338
  br label %"for blur_y.s0.x.x.rebased2277"

"produce blur_x2267":                             ; preds = %"for blur_y.s0.x.x.rebased2261"
  %t11762268 = add nsw i32 %511, %27402
  %27425 = sext i32 %t11762268 to i64
  %27426 = getelementptr inbounds i16, i16* %read_input822, i64 %27425
  %27427 = getelementptr inbounds i16, i16* %27426, i64 1
  %27428 = bitcast i16* %27427 to <16 x i16>*
  %27429 = load <16 x i16>, <16 x i16>* %27428, align 2, !tbaa !396
  %27430 = getelementptr inbounds i16, i16* %27426, i64 17
  %27431 = bitcast i16* %27430 to <16 x i16>*
  %27432 = load <16 x i16>, <16 x i16>* %27431, align 2, !tbaa !396
  %27433 = shufflevector <16 x i16> %27429, <16 x i16> %27432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27434 = bitcast i16* %27426 to <16 x i16>*
  %27435 = load <16 x i16>, <16 x i16>* %27434, align 2, !tbaa !396
  %27436 = getelementptr inbounds i16, i16* %27426, i64 16
  %27437 = bitcast i16* %27436 to <16 x i16>*
  %27438 = load <16 x i16>, <16 x i16>* %27437, align 2, !tbaa !396
  %27439 = shufflevector <16 x i16> %27435, <16 x i16> %27438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27440 = getelementptr inbounds i16, i16* %27426, i64 2
  %27441 = bitcast i16* %27440 to <16 x i16>*
  %27442 = load <16 x i16>, <16 x i16>* %27441, align 2, !tbaa !396
  %27443 = getelementptr inbounds i16, i16* %27426, i64 18
  %27444 = bitcast i16* %27443 to <16 x i16>*
  %27445 = load <16 x i16>, <16 x i16>* %27444, align 2, !tbaa !396
  %27446 = shufflevector <16 x i16> %27442, <16 x i16> %27445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27447 = getelementptr inbounds i16, i16* %27426, i64 4
  %27448 = bitcast i16* %27447 to <16 x i16>*
  %27449 = load <16 x i16>, <16 x i16>* %27448, align 2, !tbaa !396
  %27450 = getelementptr inbounds i16, i16* %27426, i64 20
  %27451 = bitcast i16* %27450 to <16 x i16>*
  %27452 = load <16 x i16>, <16 x i16>* %27451, align 2, !tbaa !396
  %27453 = shufflevector <16 x i16> %27449, <16 x i16> %27452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27454 = getelementptr inbounds i16, i16* %27426, i64 3
  %27455 = bitcast i16* %27454 to <16 x i16>*
  %27456 = load <16 x i16>, <16 x i16>* %27455, align 2, !tbaa !396
  %27457 = getelementptr inbounds i16, i16* %27426, i64 19
  %27458 = bitcast i16* %27457 to <16 x i16>*
  %27459 = load <16 x i16>, <16 x i16>* %27458, align 2, !tbaa !396
  %27460 = shufflevector <16 x i16> %27456, <16 x i16> %27459, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27461 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27439, <32 x i16> %27446, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27462 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27460, <32 x i16> %27453, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27463 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27461, <32 x i16> %27462, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27464 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27463, <32 x i16> %27433, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27465 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27464, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27466 = shufflevector <32 x i16> %27465, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27467 = shl nsw i64 %27399, 5
  %27468 = add nsw i64 %27467, %27258
  %27469 = getelementptr inbounds i16, i16* %blur_x879, i64 %27468
  %27470 = bitcast i16* %27469 to <16 x i16>*
  store <16 x i16> %27466, <16 x i16>* %27470, align 2, !tbaa !399
  %27471 = shufflevector <32 x i16> %27465, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27472 = getelementptr inbounds i16, i16* %27469, i64 16
  %27473 = bitcast i16* %27472 to <16 x i16>*
  store <16 x i16> %27471, <16 x i16>* %27473, align 2, !tbaa !399
  br label %"consume blur_x2269"

"consume blur_x2269":                             ; preds = %"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge", %"produce blur_x2267"
  %.pre-phi3658 = phi i64 [ %.pre3657, %"for blur_y.s0.x.x.rebased2261.consume blur_x2269_crit_edge" ], [ %27467, %"produce blur_x2267" ]
  %27474 = add nsw i64 %27261, %.pre-phi3658
  %27475 = getelementptr inbounds i16, i16* %blur_x879, i64 %27474
  %27476 = bitcast i16* %27475 to <16 x i16>*
  %27477 = load <16 x i16>, <16 x i16>* %27476, align 2, !tbaa !399
  %27478 = getelementptr inbounds i16, i16* %27475, i64 16
  %27479 = bitcast i16* %27478 to <16 x i16>*
  %27480 = load <16 x i16>, <16 x i16>* %27479, align 2, !tbaa !399
  %27481 = shufflevector <16 x i16> %27477, <16 x i16> %27480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27482 = add nsw i64 %27264, %.pre-phi3658
  %27483 = getelementptr inbounds i16, i16* %blur_x879, i64 %27482
  %27484 = bitcast i16* %27483 to <16 x i16>*
  %27485 = load <16 x i16>, <16 x i16>* %27484, align 2, !tbaa !399
  %27486 = getelementptr inbounds i16, i16* %27483, i64 16
  %27487 = bitcast i16* %27486 to <16 x i16>*
  %27488 = load <16 x i16>, <16 x i16>* %27487, align 2, !tbaa !399
  %27489 = shufflevector <16 x i16> %27485, <16 x i16> %27488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27490 = add nsw i64 %27267, %.pre-phi3658
  %27491 = getelementptr inbounds i16, i16* %blur_x879, i64 %27490
  %27492 = bitcast i16* %27491 to <16 x i16>*
  %27493 = load <16 x i16>, <16 x i16>* %27492, align 2, !tbaa !399
  %27494 = getelementptr inbounds i16, i16* %27491, i64 16
  %27495 = bitcast i16* %27494 to <16 x i16>*
  %27496 = load <16 x i16>, <16 x i16>* %27495, align 2, !tbaa !399
  %27497 = shufflevector <16 x i16> %27493, <16 x i16> %27496, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27498 = add nsw i64 %27270, %.pre-phi3658
  %27499 = getelementptr inbounds i16, i16* %blur_x879, i64 %27498
  %27500 = bitcast i16* %27499 to <16 x i16>*
  %27501 = load <16 x i16>, <16 x i16>* %27500, align 2, !tbaa !399
  %27502 = getelementptr inbounds i16, i16* %27499, i64 16
  %27503 = bitcast i16* %27502 to <16 x i16>*
  %27504 = load <16 x i16>, <16 x i16>* %27503, align 2, !tbaa !399
  %27505 = shufflevector <16 x i16> %27501, <16 x i16> %27504, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27506 = add nsw i64 %27273, %.pre-phi3658
  %27507 = getelementptr inbounds i16, i16* %blur_x879, i64 %27506
  %27508 = bitcast i16* %27507 to <16 x i16>*
  %27509 = load <16 x i16>, <16 x i16>* %27508, align 2, !tbaa !399
  %27510 = getelementptr inbounds i16, i16* %27507, i64 16
  %27511 = bitcast i16* %27510 to <16 x i16>*
  %27512 = load <16 x i16>, <16 x i16>* %27511, align 2, !tbaa !399
  %27513 = shufflevector <16 x i16> %27509, <16 x i16> %27512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27514 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27489, <32 x i16> %27497, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27515 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27513, <32 x i16> %27505, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27516 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27514, <32 x i16> %27515, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27517 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27516, <32 x i16> %27481, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27518 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27517, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27519 = shufflevector <32 x i16> %27518, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27520 = add nsw i64 %27277, %.pre-phi3658
  %27521 = getelementptr inbounds i16, i16* %263, i64 %27520
  %27522 = bitcast i16* %27521 to <16 x i16>*
  store <16 x i16> %27519, <16 x i16>* %27522, align 2, !tbaa !401
  %27523 = shufflevector <32 x i16> %27518, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27524 = getelementptr inbounds i16, i16* %27521, i64 16
  %27525 = bitcast i16* %27524 to <16 x i16>*
  store <16 x i16> %27523, <16 x i16>* %27525, align 2, !tbaa !401
  %indvars.iv.next3465 = add nuw nsw i64 %indvars.iv3464, 1
  %27526 = icmp eq i64 %indvars.iv.next3465, %zext3466
  br i1 %27526, label %"end for blur_y.s0.x.x.rebased2262", label %"for blur_y.s0.x.x.rebased2261"

"for blur_y.s0.x.x.rebased2277":                  ; preds = %"for blur_y.s0.x.x.rebased2277.preheader", %"consume blur_x2288"
  %blur_y.s0.x.x.rebased2279 = phi i32 [ %27635, %"consume blur_x2288" ], [ 0, %"for blur_y.s0.x.x.rebased2277.preheader" ]
  %27527 = add nsw i32 %blur_y.s0.x.x.rebased2279, %t1626814
  %a5862 = shl nsw i32 %27527, 5
  %27528 = icmp sgt i32 %t1647, %a5862
  %blur_y.s0.x.v0.base.s2280 = select i1 %27528, i32 %a5862, i32 %t1647
  %27529 = icmp slt i32 %27527, 1
  %27530 = icmp sgt i32 %198, %a5862
  %27531 = or i1 %27529, %27530
  br i1 %27531, label %"produce blur_x2285", label %"consume blur_x2288"

"end for blur_y.s0.x.x.rebased2278":              ; preds = %"consume blur_x2288", %"end for blur_y.s0.x.x.rebased2262"
  br i1 %229, label %"produce blur_x2292", label %after_bb2289

"produce blur_x2285":                             ; preds = %"for blur_y.s0.x.x.rebased2277"
  %27532 = icmp slt i32 %blur_y.s0.x.v0.base.s2280, %198
  %blur_x.s0.x.v1.base.s2286 = select i1 %27532, i32 %blur_y.s0.x.v0.base.s2280, i32 %198
  %t11812287 = add nsw i32 %511, %blur_x.s0.x.v1.base.s2286
  %27533 = sext i32 %t11812287 to i64
  %27534 = getelementptr inbounds i16, i16* %read_input822, i64 %27533
  %27535 = getelementptr inbounds i16, i16* %27534, i64 1
  %27536 = bitcast i16* %27535 to <16 x i16>*
  %27537 = load <16 x i16>, <16 x i16>* %27536, align 2, !tbaa !396
  %27538 = getelementptr inbounds i16, i16* %27534, i64 17
  %27539 = bitcast i16* %27538 to <16 x i16>*
  %27540 = load <16 x i16>, <16 x i16>* %27539, align 2, !tbaa !396
  %27541 = shufflevector <16 x i16> %27537, <16 x i16> %27540, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27542 = bitcast i16* %27534 to <16 x i16>*
  %27543 = load <16 x i16>, <16 x i16>* %27542, align 2, !tbaa !396
  %27544 = getelementptr inbounds i16, i16* %27534, i64 16
  %27545 = bitcast i16* %27544 to <16 x i16>*
  %27546 = load <16 x i16>, <16 x i16>* %27545, align 2, !tbaa !396
  %27547 = shufflevector <16 x i16> %27543, <16 x i16> %27546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27548 = getelementptr inbounds i16, i16* %27534, i64 2
  %27549 = bitcast i16* %27548 to <16 x i16>*
  %27550 = load <16 x i16>, <16 x i16>* %27549, align 2, !tbaa !396
  %27551 = getelementptr inbounds i16, i16* %27534, i64 18
  %27552 = bitcast i16* %27551 to <16 x i16>*
  %27553 = load <16 x i16>, <16 x i16>* %27552, align 2, !tbaa !396
  %27554 = shufflevector <16 x i16> %27550, <16 x i16> %27553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27555 = getelementptr inbounds i16, i16* %27534, i64 4
  %27556 = bitcast i16* %27555 to <16 x i16>*
  %27557 = load <16 x i16>, <16 x i16>* %27556, align 2, !tbaa !396
  %27558 = getelementptr inbounds i16, i16* %27534, i64 20
  %27559 = bitcast i16* %27558 to <16 x i16>*
  %27560 = load <16 x i16>, <16 x i16>* %27559, align 2, !tbaa !396
  %27561 = shufflevector <16 x i16> %27557, <16 x i16> %27560, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27562 = getelementptr inbounds i16, i16* %27534, i64 3
  %27563 = bitcast i16* %27562 to <16 x i16>*
  %27564 = load <16 x i16>, <16 x i16>* %27563, align 2, !tbaa !396
  %27565 = getelementptr inbounds i16, i16* %27534, i64 19
  %27566 = bitcast i16* %27565 to <16 x i16>*
  %27567 = load <16 x i16>, <16 x i16>* %27566, align 2, !tbaa !396
  %27568 = shufflevector <16 x i16> %27564, <16 x i16> %27567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27569 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27547, <32 x i16> %27554, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27570 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27568, <32 x i16> %27561, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27571 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27569, <32 x i16> %27570, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27572 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27571, <32 x i16> %27541, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27573 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27572, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27574 = shufflevector <32 x i16> %27573, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27575 = sext i32 %blur_x.s0.x.v1.base.s2286 to i64
  %27576 = add nsw i64 %27575, %27405
  %27577 = getelementptr inbounds i16, i16* %blur_x879, i64 %27576
  %27578 = bitcast i16* %27577 to <16 x i16>*
  store <16 x i16> %27574, <16 x i16>* %27578, align 2, !tbaa !399
  %27579 = shufflevector <32 x i16> %27573, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27580 = getelementptr inbounds i16, i16* %27577, i64 16
  %27581 = bitcast i16* %27580 to <16 x i16>*
  store <16 x i16> %27579, <16 x i16>* %27581, align 2, !tbaa !399
  br label %"consume blur_x2288"

"consume blur_x2288":                             ; preds = %"for blur_y.s0.x.x.rebased2277", %"produce blur_x2285"
  %27582 = sext i32 %blur_y.s0.x.v0.base.s2280 to i64
  %27583 = add nsw i64 %27408, %27582
  %27584 = getelementptr inbounds i16, i16* %blur_x879, i64 %27583
  %27585 = bitcast i16* %27584 to <16 x i16>*
  %27586 = load <16 x i16>, <16 x i16>* %27585, align 2, !tbaa !399
  %27587 = getelementptr inbounds i16, i16* %27584, i64 16
  %27588 = bitcast i16* %27587 to <16 x i16>*
  %27589 = load <16 x i16>, <16 x i16>* %27588, align 2, !tbaa !399
  %27590 = shufflevector <16 x i16> %27586, <16 x i16> %27589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27591 = add nsw i64 %27411, %27582
  %27592 = getelementptr inbounds i16, i16* %blur_x879, i64 %27591
  %27593 = bitcast i16* %27592 to <16 x i16>*
  %27594 = load <16 x i16>, <16 x i16>* %27593, align 2, !tbaa !399
  %27595 = getelementptr inbounds i16, i16* %27592, i64 16
  %27596 = bitcast i16* %27595 to <16 x i16>*
  %27597 = load <16 x i16>, <16 x i16>* %27596, align 2, !tbaa !399
  %27598 = shufflevector <16 x i16> %27594, <16 x i16> %27597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27599 = add nsw i64 %27414, %27582
  %27600 = getelementptr inbounds i16, i16* %blur_x879, i64 %27599
  %27601 = bitcast i16* %27600 to <16 x i16>*
  %27602 = load <16 x i16>, <16 x i16>* %27601, align 2, !tbaa !399
  %27603 = getelementptr inbounds i16, i16* %27600, i64 16
  %27604 = bitcast i16* %27603 to <16 x i16>*
  %27605 = load <16 x i16>, <16 x i16>* %27604, align 2, !tbaa !399
  %27606 = shufflevector <16 x i16> %27602, <16 x i16> %27605, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27607 = add nsw i64 %27417, %27582
  %27608 = getelementptr inbounds i16, i16* %blur_x879, i64 %27607
  %27609 = bitcast i16* %27608 to <16 x i16>*
  %27610 = load <16 x i16>, <16 x i16>* %27609, align 2, !tbaa !399
  %27611 = getelementptr inbounds i16, i16* %27608, i64 16
  %27612 = bitcast i16* %27611 to <16 x i16>*
  %27613 = load <16 x i16>, <16 x i16>* %27612, align 2, !tbaa !399
  %27614 = shufflevector <16 x i16> %27610, <16 x i16> %27613, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27615 = add nsw i64 %27420, %27582
  %27616 = getelementptr inbounds i16, i16* %blur_x879, i64 %27615
  %27617 = bitcast i16* %27616 to <16 x i16>*
  %27618 = load <16 x i16>, <16 x i16>* %27617, align 2, !tbaa !399
  %27619 = getelementptr inbounds i16, i16* %27616, i64 16
  %27620 = bitcast i16* %27619 to <16 x i16>*
  %27621 = load <16 x i16>, <16 x i16>* %27620, align 2, !tbaa !399
  %27622 = shufflevector <16 x i16> %27618, <16 x i16> %27621, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27623 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27598, <32 x i16> %27606, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27624 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27622, <32 x i16> %27614, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27625 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27623, <32 x i16> %27624, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27626 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27625, <32 x i16> %27590, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27627 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27626, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27628 = shufflevector <32 x i16> %27627, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27629 = add nsw i64 %27424, %27582
  %27630 = getelementptr inbounds i16, i16* %263, i64 %27629
  %27631 = bitcast i16* %27630 to <16 x i16>*
  store <16 x i16> %27628, <16 x i16>* %27631, align 2, !tbaa !401
  %27632 = shufflevector <32 x i16> %27627, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27633 = getelementptr inbounds i16, i16* %27630, i64 16
  %27634 = bitcast i16* %27633 to <16 x i16>*
  store <16 x i16> %27632, <16 x i16>* %27634, align 2, !tbaa !401
  %27635 = add nuw nsw i32 %blur_y.s0.x.x.rebased2279, 1
  %.not2546 = icmp eq i32 %27635, %t1683898
  br i1 %.not2546, label %"end for blur_y.s0.x.x.rebased2278", label %"for blur_y.s0.x.x.rebased2277"

after_bb2289:                                     ; preds = %"end for blur_y.s0.x.x.rebased2278", %"produce blur_x2292"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2304.preheader", label %"end for blur_y.s0.x.x.rebased2305", !prof !386

"for blur_y.s0.x.x.rebased2304.preheader":        ; preds = %after_bb2289
  %27636 = sext i32 %t1694944 to i64
  %27637 = zext i32 %.pre-phi3604 to i64
  %27638 = mul nsw i64 %27637, %337
  %27639 = sub nsw i64 %27638, %298
  %27640 = zext i32 %.pre-phi3598 to i64
  %27641 = mul nsw i64 %27640, %337
  %27642 = sub nsw i64 %27641, %298
  %27643 = zext i32 %.pre-phi3570 to i64
  %27644 = mul nsw i64 %27643, %337
  %27645 = sub nsw i64 %27644, %298
  %27646 = zext i32 %.pre-phi3578 to i64
  %27647 = mul nsw i64 %27646, %337
  %27648 = sub nsw i64 %27647, %298
  %27649 = zext i32 %.pre-phi3574 to i64
  %27650 = mul nsw i64 %27649, %337
  %27651 = sub nsw i64 %27650, %298
  %27652 = sext i32 %a379 to i64
  %27653 = add nsw i64 %27652, 30
  %27654 = mul nsw i64 %27653, %334
  %27655 = add nsw i64 %27654, %338
  br label %"for blur_y.s0.x.x.rebased2304"

"produce blur_x2292":                             ; preds = %"end for blur_y.s0.x.x.rebased2278"
  %27656 = getelementptr inbounds i16, i16* %read_input822, i64 %515
  %27657 = getelementptr inbounds i16, i16* %27656, i64 -31
  %27658 = bitcast i16* %27657 to <16 x i16>*
  %27659 = load <16 x i16>, <16 x i16>* %27658, align 2, !tbaa !396
  %27660 = getelementptr inbounds i16, i16* %27656, i64 -15
  %27661 = bitcast i16* %27660 to <16 x i16>*
  %27662 = load <16 x i16>, <16 x i16>* %27661, align 2, !tbaa !396
  %27663 = shufflevector <16 x i16> %27659, <16 x i16> %27662, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27664 = getelementptr inbounds i16, i16* %27656, i64 -32
  %27665 = bitcast i16* %27664 to <16 x i16>*
  %27666 = load <16 x i16>, <16 x i16>* %27665, align 2, !tbaa !396
  %27667 = getelementptr inbounds i16, i16* %27656, i64 -16
  %27668 = bitcast i16* %27667 to <16 x i16>*
  %27669 = load <16 x i16>, <16 x i16>* %27668, align 2, !tbaa !396
  %27670 = shufflevector <16 x i16> %27666, <16 x i16> %27669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27671 = getelementptr inbounds i16, i16* %27656, i64 -30
  %27672 = bitcast i16* %27671 to <16 x i16>*
  %27673 = load <16 x i16>, <16 x i16>* %27672, align 2, !tbaa !396
  %27674 = getelementptr inbounds i16, i16* %27656, i64 -14
  %27675 = bitcast i16* %27674 to <16 x i16>*
  %27676 = load <16 x i16>, <16 x i16>* %27675, align 2, !tbaa !396
  %27677 = shufflevector <16 x i16> %27673, <16 x i16> %27676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27678 = getelementptr inbounds i16, i16* %27656, i64 -28
  %27679 = bitcast i16* %27678 to <16 x i16>*
  %27680 = load <16 x i16>, <16 x i16>* %27679, align 2, !tbaa !396
  %27681 = getelementptr inbounds i16, i16* %27656, i64 -12
  %27682 = bitcast i16* %27681 to <16 x i16>*
  %27683 = load <16 x i16>, <16 x i16>* %27682, align 2, !tbaa !396
  %27684 = shufflevector <16 x i16> %27680, <16 x i16> %27683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27685 = getelementptr inbounds i16, i16* %27656, i64 -29
  %27686 = bitcast i16* %27685 to <16 x i16>*
  %27687 = load <16 x i16>, <16 x i16>* %27686, align 2, !tbaa !396
  %27688 = getelementptr inbounds i16, i16* %27656, i64 -13
  %27689 = bitcast i16* %27688 to <16 x i16>*
  %27690 = load <16 x i16>, <16 x i16>* %27689, align 2, !tbaa !396
  %27691 = shufflevector <16 x i16> %27687, <16 x i16> %27690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27692 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27670, <32 x i16> %27677, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27693 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27691, <32 x i16> %27684, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27694 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27692, <32 x i16> %27693, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27695 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27694, <32 x i16> %27663, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27696 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27695, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27697 = shufflevector <32 x i16> %27696, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27698 = zext i32 %.pre-phi3578 to i64
  %27699 = mul nsw i64 %299, %27698
  %27700 = add nsw i64 %301, %27699
  %27701 = getelementptr inbounds i16, i16* %blur_x879, i64 %27700
  %27702 = getelementptr inbounds i16, i16* %27701, i64 -32
  %27703 = bitcast i16* %27702 to <16 x i16>*
  store <16 x i16> %27697, <16 x i16>* %27703, align 2, !tbaa !399
  %27704 = shufflevector <32 x i16> %27696, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27705 = getelementptr inbounds i16, i16* %27701, i64 -16
  %27706 = bitcast i16* %27705 to <16 x i16>*
  store <16 x i16> %27704, <16 x i16>* %27706, align 2, !tbaa !399
  %27707 = zext i32 %.pre-phi3604 to i64
  %27708 = mul nsw i64 %27707, %333
  %27709 = add nsw i64 %27708, %296
  %27710 = getelementptr inbounds i16, i16* %blur_x879, i64 %27709
  %27711 = getelementptr inbounds i16, i16* %27710, i64 -32
  %27712 = bitcast i16* %27711 to <16 x i16>*
  %27713 = load <16 x i16>, <16 x i16>* %27712, align 2, !tbaa !399
  %27714 = getelementptr inbounds i16, i16* %27710, i64 -16
  %27715 = bitcast i16* %27714 to <16 x i16>*
  %27716 = load <16 x i16>, <16 x i16>* %27715, align 2, !tbaa !399
  %27717 = shufflevector <16 x i16> %27713, <16 x i16> %27716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27718 = zext i32 %.pre-phi3598 to i64
  %27719 = mul nsw i64 %27718, %333
  %27720 = add nsw i64 %27719, %296
  %27721 = getelementptr inbounds i16, i16* %blur_x879, i64 %27720
  %27722 = getelementptr inbounds i16, i16* %27721, i64 -32
  %27723 = bitcast i16* %27722 to <16 x i16>*
  %27724 = load <16 x i16>, <16 x i16>* %27723, align 2, !tbaa !399
  %27725 = getelementptr inbounds i16, i16* %27721, i64 -16
  %27726 = bitcast i16* %27725 to <16 x i16>*
  %27727 = load <16 x i16>, <16 x i16>* %27726, align 2, !tbaa !399
  %27728 = shufflevector <16 x i16> %27724, <16 x i16> %27727, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27729 = zext i32 %.pre-phi3570 to i64
  %27730 = mul nsw i64 %27729, %333
  %27731 = add nsw i64 %27730, %296
  %27732 = getelementptr inbounds i16, i16* %blur_x879, i64 %27731
  %27733 = getelementptr inbounds i16, i16* %27732, i64 -32
  %27734 = bitcast i16* %27733 to <16 x i16>*
  %27735 = load <16 x i16>, <16 x i16>* %27734, align 2, !tbaa !399
  %27736 = getelementptr inbounds i16, i16* %27732, i64 -16
  %27737 = bitcast i16* %27736 to <16 x i16>*
  %27738 = load <16 x i16>, <16 x i16>* %27737, align 2, !tbaa !399
  %27739 = shufflevector <16 x i16> %27735, <16 x i16> %27738, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27740 = mul nsw i64 %27698, %333
  %27741 = add nsw i64 %27740, %296
  %27742 = getelementptr inbounds i16, i16* %blur_x879, i64 %27741
  %27743 = getelementptr inbounds i16, i16* %27742, i64 -32
  %27744 = bitcast i16* %27743 to <16 x i16>*
  %27745 = load <16 x i16>, <16 x i16>* %27744, align 2, !tbaa !399
  %27746 = getelementptr inbounds i16, i16* %27742, i64 -16
  %27747 = bitcast i16* %27746 to <16 x i16>*
  %27748 = load <16 x i16>, <16 x i16>* %27747, align 2, !tbaa !399
  %27749 = shufflevector <16 x i16> %27745, <16 x i16> %27748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27750 = zext i32 %.pre-phi3574 to i64
  %27751 = mul nsw i64 %27750, %333
  %27752 = add nsw i64 %27751, %296
  %27753 = getelementptr inbounds i16, i16* %blur_x879, i64 %27752
  %27754 = getelementptr inbounds i16, i16* %27753, i64 -32
  %27755 = bitcast i16* %27754 to <16 x i16>*
  %27756 = load <16 x i16>, <16 x i16>* %27755, align 2, !tbaa !399
  %27757 = getelementptr inbounds i16, i16* %27753, i64 -16
  %27758 = bitcast i16* %27757 to <16 x i16>*
  %27759 = load <16 x i16>, <16 x i16>* %27758, align 2, !tbaa !399
  %27760 = shufflevector <16 x i16> %27756, <16 x i16> %27759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27761 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27728, <32 x i16> %27739, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27762 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27760, <32 x i16> %27749, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27763 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27761, <32 x i16> %27762, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27764 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27763, <32 x i16> %27717, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27765 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27764, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27766 = shufflevector <32 x i16> %27765, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27767 = sext i32 %a379 to i64
  %27768 = add nsw i64 %27767, 30
  %27769 = mul nsw i64 %27768, %334
  %27770 = add nsw i64 %336, %27769
  %27771 = getelementptr inbounds i16, i16* %263, i64 %27770
  %27772 = getelementptr inbounds i16, i16* %27771, i64 -32
  %27773 = bitcast i16* %27772 to <16 x i16>*
  store <16 x i16> %27766, <16 x i16>* %27773, align 2, !tbaa !401
  %27774 = shufflevector <32 x i16> %27765, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27775 = getelementptr inbounds i16, i16* %27771, i64 -16
  %27776 = bitcast i16* %27775 to <16 x i16>*
  store <16 x i16> %27774, <16 x i16>* %27776, align 2, !tbaa !401
  br label %after_bb2289

"for blur_y.s0.x.x.rebased2304":                  ; preds = %"for blur_y.s0.x.x.rebased2304.preheader", %"consume blur_x2312"
  %indvars.iv3467 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2304.preheader" ], [ %indvars.iv.next3468, %"consume blur_x2312" ]
  %27777 = add nsw i64 %indvars.iv3467, %303
  %27778 = icmp slt i64 %27777, 1
  %27779 = trunc i64 %27777 to i32
  %27780 = shl nsw i32 %27779, 5
  %27781 = icmp sgt i32 %198, %27780
  %27782 = or i1 %27778, %27781
  br i1 %27782, label %"produce blur_x2310", label %"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge"

"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2304"
  %.pre3659 = shl nsw i64 %27777, 5
  br label %"consume blur_x2312"

"end for blur_y.s0.x.x.rebased2305":              ; preds = %"consume blur_x2312", %after_bb2289
  br i1 %304, label %"for blur_y.s0.x.x.rebased2320.preheader", label %"end for blur_y.s0.x.x.rebased2321", !prof !386

"for blur_y.s0.x.x.rebased2320.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2305"
  %27783 = sext i32 %t1694944 to i64
  %27784 = zext i32 %.pre-phi3604 to i64
  %27785 = mul nsw i64 %27784, %337
  %27786 = sub nsw i64 %27785, %298
  %27787 = zext i32 %.pre-phi3598 to i64
  %27788 = mul nsw i64 %27787, %337
  %27789 = sub nsw i64 %27788, %298
  %27790 = zext i32 %.pre-phi3570 to i64
  %27791 = mul nsw i64 %27790, %337
  %27792 = sub nsw i64 %27791, %298
  %27793 = zext i32 %.pre-phi3578 to i64
  %27794 = mul nsw i64 %27793, %337
  %27795 = sub nsw i64 %27794, %298
  %27796 = zext i32 %.pre-phi3574 to i64
  %27797 = mul nsw i64 %27796, %337
  %27798 = sub nsw i64 %27797, %298
  %27799 = sext i32 %a379 to i64
  %27800 = add nsw i64 %27799, 30
  %27801 = mul nsw i64 %27800, %334
  %27802 = add nsw i64 %27801, %338
  br label %"for blur_y.s0.x.x.rebased2320"

"produce blur_x2310":                             ; preds = %"for blur_y.s0.x.x.rebased2304"
  %t11922311 = add nsw i32 %517, %27780
  %27803 = sext i32 %t11922311 to i64
  %27804 = getelementptr inbounds i16, i16* %read_input822, i64 %27803
  %27805 = getelementptr inbounds i16, i16* %27804, i64 1
  %27806 = bitcast i16* %27805 to <16 x i16>*
  %27807 = load <16 x i16>, <16 x i16>* %27806, align 2, !tbaa !396
  %27808 = getelementptr inbounds i16, i16* %27804, i64 17
  %27809 = bitcast i16* %27808 to <16 x i16>*
  %27810 = load <16 x i16>, <16 x i16>* %27809, align 2, !tbaa !396
  %27811 = shufflevector <16 x i16> %27807, <16 x i16> %27810, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27812 = bitcast i16* %27804 to <16 x i16>*
  %27813 = load <16 x i16>, <16 x i16>* %27812, align 2, !tbaa !396
  %27814 = getelementptr inbounds i16, i16* %27804, i64 16
  %27815 = bitcast i16* %27814 to <16 x i16>*
  %27816 = load <16 x i16>, <16 x i16>* %27815, align 2, !tbaa !396
  %27817 = shufflevector <16 x i16> %27813, <16 x i16> %27816, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27818 = getelementptr inbounds i16, i16* %27804, i64 2
  %27819 = bitcast i16* %27818 to <16 x i16>*
  %27820 = load <16 x i16>, <16 x i16>* %27819, align 2, !tbaa !396
  %27821 = getelementptr inbounds i16, i16* %27804, i64 18
  %27822 = bitcast i16* %27821 to <16 x i16>*
  %27823 = load <16 x i16>, <16 x i16>* %27822, align 2, !tbaa !396
  %27824 = shufflevector <16 x i16> %27820, <16 x i16> %27823, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27825 = getelementptr inbounds i16, i16* %27804, i64 4
  %27826 = bitcast i16* %27825 to <16 x i16>*
  %27827 = load <16 x i16>, <16 x i16>* %27826, align 2, !tbaa !396
  %27828 = getelementptr inbounds i16, i16* %27804, i64 20
  %27829 = bitcast i16* %27828 to <16 x i16>*
  %27830 = load <16 x i16>, <16 x i16>* %27829, align 2, !tbaa !396
  %27831 = shufflevector <16 x i16> %27827, <16 x i16> %27830, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27832 = getelementptr inbounds i16, i16* %27804, i64 3
  %27833 = bitcast i16* %27832 to <16 x i16>*
  %27834 = load <16 x i16>, <16 x i16>* %27833, align 2, !tbaa !396
  %27835 = getelementptr inbounds i16, i16* %27804, i64 19
  %27836 = bitcast i16* %27835 to <16 x i16>*
  %27837 = load <16 x i16>, <16 x i16>* %27836, align 2, !tbaa !396
  %27838 = shufflevector <16 x i16> %27834, <16 x i16> %27837, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27839 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27817, <32 x i16> %27824, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27840 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27838, <32 x i16> %27831, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27841 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27839, <32 x i16> %27840, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27842 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27841, <32 x i16> %27811, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27843 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27842, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27844 = shufflevector <32 x i16> %27843, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27845 = shl nsw i64 %27777, 5
  %27846 = add nsw i64 %27845, %27636
  %27847 = getelementptr inbounds i16, i16* %blur_x879, i64 %27846
  %27848 = bitcast i16* %27847 to <16 x i16>*
  store <16 x i16> %27844, <16 x i16>* %27848, align 2, !tbaa !399
  %27849 = shufflevector <32 x i16> %27843, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27850 = getelementptr inbounds i16, i16* %27847, i64 16
  %27851 = bitcast i16* %27850 to <16 x i16>*
  store <16 x i16> %27849, <16 x i16>* %27851, align 2, !tbaa !399
  br label %"consume blur_x2312"

"consume blur_x2312":                             ; preds = %"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge", %"produce blur_x2310"
  %.pre-phi3660 = phi i64 [ %.pre3659, %"for blur_y.s0.x.x.rebased2304.consume blur_x2312_crit_edge" ], [ %27845, %"produce blur_x2310" ]
  %27852 = add nsw i64 %27639, %.pre-phi3660
  %27853 = getelementptr inbounds i16, i16* %blur_x879, i64 %27852
  %27854 = bitcast i16* %27853 to <16 x i16>*
  %27855 = load <16 x i16>, <16 x i16>* %27854, align 2, !tbaa !399
  %27856 = getelementptr inbounds i16, i16* %27853, i64 16
  %27857 = bitcast i16* %27856 to <16 x i16>*
  %27858 = load <16 x i16>, <16 x i16>* %27857, align 2, !tbaa !399
  %27859 = shufflevector <16 x i16> %27855, <16 x i16> %27858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27860 = add nsw i64 %27642, %.pre-phi3660
  %27861 = getelementptr inbounds i16, i16* %blur_x879, i64 %27860
  %27862 = bitcast i16* %27861 to <16 x i16>*
  %27863 = load <16 x i16>, <16 x i16>* %27862, align 2, !tbaa !399
  %27864 = getelementptr inbounds i16, i16* %27861, i64 16
  %27865 = bitcast i16* %27864 to <16 x i16>*
  %27866 = load <16 x i16>, <16 x i16>* %27865, align 2, !tbaa !399
  %27867 = shufflevector <16 x i16> %27863, <16 x i16> %27866, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27868 = add nsw i64 %27645, %.pre-phi3660
  %27869 = getelementptr inbounds i16, i16* %blur_x879, i64 %27868
  %27870 = bitcast i16* %27869 to <16 x i16>*
  %27871 = load <16 x i16>, <16 x i16>* %27870, align 2, !tbaa !399
  %27872 = getelementptr inbounds i16, i16* %27869, i64 16
  %27873 = bitcast i16* %27872 to <16 x i16>*
  %27874 = load <16 x i16>, <16 x i16>* %27873, align 2, !tbaa !399
  %27875 = shufflevector <16 x i16> %27871, <16 x i16> %27874, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27876 = add nsw i64 %27648, %.pre-phi3660
  %27877 = getelementptr inbounds i16, i16* %blur_x879, i64 %27876
  %27878 = bitcast i16* %27877 to <16 x i16>*
  %27879 = load <16 x i16>, <16 x i16>* %27878, align 2, !tbaa !399
  %27880 = getelementptr inbounds i16, i16* %27877, i64 16
  %27881 = bitcast i16* %27880 to <16 x i16>*
  %27882 = load <16 x i16>, <16 x i16>* %27881, align 2, !tbaa !399
  %27883 = shufflevector <16 x i16> %27879, <16 x i16> %27882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27884 = add nsw i64 %27651, %.pre-phi3660
  %27885 = getelementptr inbounds i16, i16* %blur_x879, i64 %27884
  %27886 = bitcast i16* %27885 to <16 x i16>*
  %27887 = load <16 x i16>, <16 x i16>* %27886, align 2, !tbaa !399
  %27888 = getelementptr inbounds i16, i16* %27885, i64 16
  %27889 = bitcast i16* %27888 to <16 x i16>*
  %27890 = load <16 x i16>, <16 x i16>* %27889, align 2, !tbaa !399
  %27891 = shufflevector <16 x i16> %27887, <16 x i16> %27890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27892 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27867, <32 x i16> %27875, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27893 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27891, <32 x i16> %27883, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27894 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27892, <32 x i16> %27893, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27895 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27894, <32 x i16> %27859, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27896 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27895, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27897 = shufflevector <32 x i16> %27896, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27898 = add nsw i64 %27655, %.pre-phi3660
  %27899 = getelementptr inbounds i16, i16* %263, i64 %27898
  %27900 = bitcast i16* %27899 to <16 x i16>*
  store <16 x i16> %27897, <16 x i16>* %27900, align 2, !tbaa !401
  %27901 = shufflevector <32 x i16> %27896, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27902 = getelementptr inbounds i16, i16* %27899, i64 16
  %27903 = bitcast i16* %27902 to <16 x i16>*
  store <16 x i16> %27901, <16 x i16>* %27903, align 2, !tbaa !401
  %indvars.iv.next3468 = add nuw nsw i64 %indvars.iv3467, 1
  %27904 = icmp eq i64 %indvars.iv.next3468, %zext3469
  br i1 %27904, label %"end for blur_y.s0.x.x.rebased2305", label %"for blur_y.s0.x.x.rebased2304"

"for blur_y.s0.x.x.rebased2320":                  ; preds = %"for blur_y.s0.x.x.rebased2320.preheader", %"consume blur_x2331"
  %blur_y.s0.x.x.rebased2322 = phi i32 [ %28013, %"consume blur_x2331" ], [ 0, %"for blur_y.s0.x.x.rebased2320.preheader" ]
  %27905 = add nsw i32 %blur_y.s0.x.x.rebased2322, %t1626814
  %a6019 = shl nsw i32 %27905, 5
  %27906 = icmp sgt i32 %t1647, %a6019
  %blur_y.s0.x.v0.base.s2323 = select i1 %27906, i32 %a6019, i32 %t1647
  %27907 = icmp slt i32 %27905, 1
  %27908 = icmp sgt i32 %198, %a6019
  %27909 = or i1 %27907, %27908
  br i1 %27909, label %"produce blur_x2328", label %"consume blur_x2331"

"end for blur_y.s0.x.x.rebased2321":              ; preds = %"consume blur_x2331", %"end for blur_y.s0.x.x.rebased2305"
  br i1 %229, label %"produce blur_x2335", label %after_bb2332

"produce blur_x2328":                             ; preds = %"for blur_y.s0.x.x.rebased2320"
  %27910 = icmp slt i32 %blur_y.s0.x.v0.base.s2323, %198
  %blur_x.s0.x.v1.base.s2329 = select i1 %27910, i32 %blur_y.s0.x.v0.base.s2323, i32 %198
  %t11972330 = add nsw i32 %517, %blur_x.s0.x.v1.base.s2329
  %27911 = sext i32 %t11972330 to i64
  %27912 = getelementptr inbounds i16, i16* %read_input822, i64 %27911
  %27913 = getelementptr inbounds i16, i16* %27912, i64 1
  %27914 = bitcast i16* %27913 to <16 x i16>*
  %27915 = load <16 x i16>, <16 x i16>* %27914, align 2, !tbaa !396
  %27916 = getelementptr inbounds i16, i16* %27912, i64 17
  %27917 = bitcast i16* %27916 to <16 x i16>*
  %27918 = load <16 x i16>, <16 x i16>* %27917, align 2, !tbaa !396
  %27919 = shufflevector <16 x i16> %27915, <16 x i16> %27918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27920 = bitcast i16* %27912 to <16 x i16>*
  %27921 = load <16 x i16>, <16 x i16>* %27920, align 2, !tbaa !396
  %27922 = getelementptr inbounds i16, i16* %27912, i64 16
  %27923 = bitcast i16* %27922 to <16 x i16>*
  %27924 = load <16 x i16>, <16 x i16>* %27923, align 2, !tbaa !396
  %27925 = shufflevector <16 x i16> %27921, <16 x i16> %27924, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27926 = getelementptr inbounds i16, i16* %27912, i64 2
  %27927 = bitcast i16* %27926 to <16 x i16>*
  %27928 = load <16 x i16>, <16 x i16>* %27927, align 2, !tbaa !396
  %27929 = getelementptr inbounds i16, i16* %27912, i64 18
  %27930 = bitcast i16* %27929 to <16 x i16>*
  %27931 = load <16 x i16>, <16 x i16>* %27930, align 2, !tbaa !396
  %27932 = shufflevector <16 x i16> %27928, <16 x i16> %27931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27933 = getelementptr inbounds i16, i16* %27912, i64 4
  %27934 = bitcast i16* %27933 to <16 x i16>*
  %27935 = load <16 x i16>, <16 x i16>* %27934, align 2, !tbaa !396
  %27936 = getelementptr inbounds i16, i16* %27912, i64 20
  %27937 = bitcast i16* %27936 to <16 x i16>*
  %27938 = load <16 x i16>, <16 x i16>* %27937, align 2, !tbaa !396
  %27939 = shufflevector <16 x i16> %27935, <16 x i16> %27938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27940 = getelementptr inbounds i16, i16* %27912, i64 3
  %27941 = bitcast i16* %27940 to <16 x i16>*
  %27942 = load <16 x i16>, <16 x i16>* %27941, align 2, !tbaa !396
  %27943 = getelementptr inbounds i16, i16* %27912, i64 19
  %27944 = bitcast i16* %27943 to <16 x i16>*
  %27945 = load <16 x i16>, <16 x i16>* %27944, align 2, !tbaa !396
  %27946 = shufflevector <16 x i16> %27942, <16 x i16> %27945, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27947 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27925, <32 x i16> %27932, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27948 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27946, <32 x i16> %27939, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27949 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27947, <32 x i16> %27948, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27950 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27949, <32 x i16> %27919, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %27951 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %27950, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %27952 = shufflevector <32 x i16> %27951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27953 = sext i32 %blur_x.s0.x.v1.base.s2329 to i64
  %27954 = add nsw i64 %27953, %27783
  %27955 = getelementptr inbounds i16, i16* %blur_x879, i64 %27954
  %27956 = bitcast i16* %27955 to <16 x i16>*
  store <16 x i16> %27952, <16 x i16>* %27956, align 2, !tbaa !399
  %27957 = shufflevector <32 x i16> %27951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27958 = getelementptr inbounds i16, i16* %27955, i64 16
  %27959 = bitcast i16* %27958 to <16 x i16>*
  store <16 x i16> %27957, <16 x i16>* %27959, align 2, !tbaa !399
  br label %"consume blur_x2331"

"consume blur_x2331":                             ; preds = %"for blur_y.s0.x.x.rebased2320", %"produce blur_x2328"
  %27960 = sext i32 %blur_y.s0.x.v0.base.s2323 to i64
  %27961 = add nsw i64 %27786, %27960
  %27962 = getelementptr inbounds i16, i16* %blur_x879, i64 %27961
  %27963 = bitcast i16* %27962 to <16 x i16>*
  %27964 = load <16 x i16>, <16 x i16>* %27963, align 2, !tbaa !399
  %27965 = getelementptr inbounds i16, i16* %27962, i64 16
  %27966 = bitcast i16* %27965 to <16 x i16>*
  %27967 = load <16 x i16>, <16 x i16>* %27966, align 2, !tbaa !399
  %27968 = shufflevector <16 x i16> %27964, <16 x i16> %27967, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27969 = add nsw i64 %27789, %27960
  %27970 = getelementptr inbounds i16, i16* %blur_x879, i64 %27969
  %27971 = bitcast i16* %27970 to <16 x i16>*
  %27972 = load <16 x i16>, <16 x i16>* %27971, align 2, !tbaa !399
  %27973 = getelementptr inbounds i16, i16* %27970, i64 16
  %27974 = bitcast i16* %27973 to <16 x i16>*
  %27975 = load <16 x i16>, <16 x i16>* %27974, align 2, !tbaa !399
  %27976 = shufflevector <16 x i16> %27972, <16 x i16> %27975, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27977 = add nsw i64 %27792, %27960
  %27978 = getelementptr inbounds i16, i16* %blur_x879, i64 %27977
  %27979 = bitcast i16* %27978 to <16 x i16>*
  %27980 = load <16 x i16>, <16 x i16>* %27979, align 2, !tbaa !399
  %27981 = getelementptr inbounds i16, i16* %27978, i64 16
  %27982 = bitcast i16* %27981 to <16 x i16>*
  %27983 = load <16 x i16>, <16 x i16>* %27982, align 2, !tbaa !399
  %27984 = shufflevector <16 x i16> %27980, <16 x i16> %27983, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27985 = add nsw i64 %27795, %27960
  %27986 = getelementptr inbounds i16, i16* %blur_x879, i64 %27985
  %27987 = bitcast i16* %27986 to <16 x i16>*
  %27988 = load <16 x i16>, <16 x i16>* %27987, align 2, !tbaa !399
  %27989 = getelementptr inbounds i16, i16* %27986, i64 16
  %27990 = bitcast i16* %27989 to <16 x i16>*
  %27991 = load <16 x i16>, <16 x i16>* %27990, align 2, !tbaa !399
  %27992 = shufflevector <16 x i16> %27988, <16 x i16> %27991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27993 = add nsw i64 %27798, %27960
  %27994 = getelementptr inbounds i16, i16* %blur_x879, i64 %27993
  %27995 = bitcast i16* %27994 to <16 x i16>*
  %27996 = load <16 x i16>, <16 x i16>* %27995, align 2, !tbaa !399
  %27997 = getelementptr inbounds i16, i16* %27994, i64 16
  %27998 = bitcast i16* %27997 to <16 x i16>*
  %27999 = load <16 x i16>, <16 x i16>* %27998, align 2, !tbaa !399
  %28000 = shufflevector <16 x i16> %27996, <16 x i16> %27999, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28001 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %27976, <32 x i16> %27984, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28002 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28000, <32 x i16> %27992, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28003 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28001, <32 x i16> %28002, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28004 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28003, <32 x i16> %27968, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28005 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28004, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28006 = shufflevector <32 x i16> %28005, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28007 = add nsw i64 %27802, %27960
  %28008 = getelementptr inbounds i16, i16* %263, i64 %28007
  %28009 = bitcast i16* %28008 to <16 x i16>*
  store <16 x i16> %28006, <16 x i16>* %28009, align 2, !tbaa !401
  %28010 = shufflevector <32 x i16> %28005, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28011 = getelementptr inbounds i16, i16* %28008, i64 16
  %28012 = bitcast i16* %28011 to <16 x i16>*
  store <16 x i16> %28010, <16 x i16>* %28012, align 2, !tbaa !401
  %28013 = add nuw nsw i32 %blur_y.s0.x.x.rebased2322, 1
  %.not2542 = icmp eq i32 %28013, %t1683898
  br i1 %.not2542, label %"end for blur_y.s0.x.x.rebased2321", label %"for blur_y.s0.x.x.rebased2320"

after_bb2332:                                     ; preds = %"end for blur_y.s0.x.x.rebased2321", %"produce blur_x2335"
  br i1 %302, label %"for blur_y.s0.x.x.rebased2347.preheader", label %"end for blur_y.s0.x.x.rebased2348", !prof !386

"for blur_y.s0.x.x.rebased2347.preheader":        ; preds = %after_bb2332
  %28014 = sext i32 %t1700974 to i64
  %28015 = zext i32 %.pre-phi3570 to i64
  %28016 = mul nsw i64 %28015, %337
  %28017 = sub nsw i64 %28016, %298
  %28018 = zext i32 %.pre-phi3604 to i64
  %28019 = mul nsw i64 %28018, %337
  %28020 = sub nsw i64 %28019, %298
  %28021 = zext i32 %.pre-phi3574 to i64
  %28022 = mul nsw i64 %28021, %337
  %28023 = sub nsw i64 %28022, %298
  %28024 = zext i32 %.pre-phi3582 to i64
  %28025 = mul nsw i64 %28024, %337
  %28026 = sub nsw i64 %28025, %298
  %28027 = zext i32 %.pre-phi3578 to i64
  %28028 = mul nsw i64 %28027, %337
  %28029 = sub nsw i64 %28028, %298
  %28030 = sext i32 %a379 to i64
  %28031 = add nsw i64 %28030, 31
  %28032 = mul nsw i64 %28031, %334
  %28033 = add nsw i64 %28032, %338
  br label %"for blur_y.s0.x.x.rebased2347"

"produce blur_x2335":                             ; preds = %"end for blur_y.s0.x.x.rebased2321"
  %28034 = getelementptr inbounds i16, i16* %read_input822, i64 %521
  %28035 = getelementptr inbounds i16, i16* %28034, i64 -31
  %28036 = bitcast i16* %28035 to <16 x i16>*
  %28037 = load <16 x i16>, <16 x i16>* %28036, align 2, !tbaa !396
  %28038 = getelementptr inbounds i16, i16* %28034, i64 -15
  %28039 = bitcast i16* %28038 to <16 x i16>*
  %28040 = load <16 x i16>, <16 x i16>* %28039, align 2, !tbaa !396
  %28041 = shufflevector <16 x i16> %28037, <16 x i16> %28040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28042 = getelementptr inbounds i16, i16* %28034, i64 -32
  %28043 = bitcast i16* %28042 to <16 x i16>*
  %28044 = load <16 x i16>, <16 x i16>* %28043, align 2, !tbaa !396
  %28045 = getelementptr inbounds i16, i16* %28034, i64 -16
  %28046 = bitcast i16* %28045 to <16 x i16>*
  %28047 = load <16 x i16>, <16 x i16>* %28046, align 2, !tbaa !396
  %28048 = shufflevector <16 x i16> %28044, <16 x i16> %28047, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28049 = getelementptr inbounds i16, i16* %28034, i64 -30
  %28050 = bitcast i16* %28049 to <16 x i16>*
  %28051 = load <16 x i16>, <16 x i16>* %28050, align 2, !tbaa !396
  %28052 = getelementptr inbounds i16, i16* %28034, i64 -14
  %28053 = bitcast i16* %28052 to <16 x i16>*
  %28054 = load <16 x i16>, <16 x i16>* %28053, align 2, !tbaa !396
  %28055 = shufflevector <16 x i16> %28051, <16 x i16> %28054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28056 = getelementptr inbounds i16, i16* %28034, i64 -28
  %28057 = bitcast i16* %28056 to <16 x i16>*
  %28058 = load <16 x i16>, <16 x i16>* %28057, align 2, !tbaa !396
  %28059 = getelementptr inbounds i16, i16* %28034, i64 -12
  %28060 = bitcast i16* %28059 to <16 x i16>*
  %28061 = load <16 x i16>, <16 x i16>* %28060, align 2, !tbaa !396
  %28062 = shufflevector <16 x i16> %28058, <16 x i16> %28061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28063 = getelementptr inbounds i16, i16* %28034, i64 -29
  %28064 = bitcast i16* %28063 to <16 x i16>*
  %28065 = load <16 x i16>, <16 x i16>* %28064, align 2, !tbaa !396
  %28066 = getelementptr inbounds i16, i16* %28034, i64 -13
  %28067 = bitcast i16* %28066 to <16 x i16>*
  %28068 = load <16 x i16>, <16 x i16>* %28067, align 2, !tbaa !396
  %28069 = shufflevector <16 x i16> %28065, <16 x i16> %28068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28070 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28048, <32 x i16> %28055, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28071 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28069, <32 x i16> %28062, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28072 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28070, <32 x i16> %28071, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28073 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28072, <32 x i16> %28041, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28074 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28073, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28075 = shufflevector <32 x i16> %28074, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28076 = zext i32 %.pre-phi3582 to i64
  %28077 = mul nsw i64 %299, %28076
  %28078 = add nsw i64 %301, %28077
  %28079 = getelementptr inbounds i16, i16* %blur_x879, i64 %28078
  %28080 = getelementptr inbounds i16, i16* %28079, i64 -32
  %28081 = bitcast i16* %28080 to <16 x i16>*
  store <16 x i16> %28075, <16 x i16>* %28081, align 2, !tbaa !399
  %28082 = shufflevector <32 x i16> %28074, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28083 = getelementptr inbounds i16, i16* %28079, i64 -16
  %28084 = bitcast i16* %28083 to <16 x i16>*
  store <16 x i16> %28082, <16 x i16>* %28084, align 2, !tbaa !399
  %28085 = zext i32 %.pre-phi3570 to i64
  %28086 = mul nsw i64 %28085, %333
  %28087 = add nsw i64 %28086, %296
  %28088 = getelementptr inbounds i16, i16* %blur_x879, i64 %28087
  %28089 = getelementptr inbounds i16, i16* %28088, i64 -32
  %28090 = bitcast i16* %28089 to <16 x i16>*
  %28091 = load <16 x i16>, <16 x i16>* %28090, align 2, !tbaa !399
  %28092 = getelementptr inbounds i16, i16* %28088, i64 -16
  %28093 = bitcast i16* %28092 to <16 x i16>*
  %28094 = load <16 x i16>, <16 x i16>* %28093, align 2, !tbaa !399
  %28095 = shufflevector <16 x i16> %28091, <16 x i16> %28094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28096 = zext i32 %.pre-phi3604 to i64
  %28097 = mul nsw i64 %28096, %333
  %28098 = add nsw i64 %28097, %296
  %28099 = getelementptr inbounds i16, i16* %blur_x879, i64 %28098
  %28100 = getelementptr inbounds i16, i16* %28099, i64 -32
  %28101 = bitcast i16* %28100 to <16 x i16>*
  %28102 = load <16 x i16>, <16 x i16>* %28101, align 2, !tbaa !399
  %28103 = getelementptr inbounds i16, i16* %28099, i64 -16
  %28104 = bitcast i16* %28103 to <16 x i16>*
  %28105 = load <16 x i16>, <16 x i16>* %28104, align 2, !tbaa !399
  %28106 = shufflevector <16 x i16> %28102, <16 x i16> %28105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28107 = zext i32 %.pre-phi3574 to i64
  %28108 = mul nsw i64 %28107, %333
  %28109 = add nsw i64 %28108, %296
  %28110 = getelementptr inbounds i16, i16* %blur_x879, i64 %28109
  %28111 = getelementptr inbounds i16, i16* %28110, i64 -32
  %28112 = bitcast i16* %28111 to <16 x i16>*
  %28113 = load <16 x i16>, <16 x i16>* %28112, align 2, !tbaa !399
  %28114 = getelementptr inbounds i16, i16* %28110, i64 -16
  %28115 = bitcast i16* %28114 to <16 x i16>*
  %28116 = load <16 x i16>, <16 x i16>* %28115, align 2, !tbaa !399
  %28117 = shufflevector <16 x i16> %28113, <16 x i16> %28116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28118 = mul nsw i64 %28076, %333
  %28119 = add nsw i64 %28118, %296
  %28120 = getelementptr inbounds i16, i16* %blur_x879, i64 %28119
  %28121 = getelementptr inbounds i16, i16* %28120, i64 -32
  %28122 = bitcast i16* %28121 to <16 x i16>*
  %28123 = load <16 x i16>, <16 x i16>* %28122, align 2, !tbaa !399
  %28124 = getelementptr inbounds i16, i16* %28120, i64 -16
  %28125 = bitcast i16* %28124 to <16 x i16>*
  %28126 = load <16 x i16>, <16 x i16>* %28125, align 2, !tbaa !399
  %28127 = shufflevector <16 x i16> %28123, <16 x i16> %28126, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28128 = zext i32 %.pre-phi3578 to i64
  %28129 = mul nsw i64 %28128, %333
  %28130 = add nsw i64 %28129, %296
  %28131 = getelementptr inbounds i16, i16* %blur_x879, i64 %28130
  %28132 = getelementptr inbounds i16, i16* %28131, i64 -32
  %28133 = bitcast i16* %28132 to <16 x i16>*
  %28134 = load <16 x i16>, <16 x i16>* %28133, align 2, !tbaa !399
  %28135 = getelementptr inbounds i16, i16* %28131, i64 -16
  %28136 = bitcast i16* %28135 to <16 x i16>*
  %28137 = load <16 x i16>, <16 x i16>* %28136, align 2, !tbaa !399
  %28138 = shufflevector <16 x i16> %28134, <16 x i16> %28137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28139 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28106, <32 x i16> %28117, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28140 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28138, <32 x i16> %28127, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28141 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28139, <32 x i16> %28140, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28142 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28141, <32 x i16> %28095, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28143 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28142, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28144 = shufflevector <32 x i16> %28143, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28145 = sext i32 %a379 to i64
  %28146 = add nsw i64 %28145, 31
  %28147 = mul nsw i64 %28146, %334
  %28148 = add nsw i64 %336, %28147
  %28149 = getelementptr inbounds i16, i16* %263, i64 %28148
  %28150 = getelementptr inbounds i16, i16* %28149, i64 -32
  %28151 = bitcast i16* %28150 to <16 x i16>*
  store <16 x i16> %28144, <16 x i16>* %28151, align 2, !tbaa !401
  %28152 = shufflevector <32 x i16> %28143, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28153 = getelementptr inbounds i16, i16* %28149, i64 -16
  %28154 = bitcast i16* %28153 to <16 x i16>*
  store <16 x i16> %28152, <16 x i16>* %28154, align 2, !tbaa !401
  br label %after_bb2332

"for blur_y.s0.x.x.rebased2347":                  ; preds = %"for blur_y.s0.x.x.rebased2347.preheader", %"consume blur_x2355"
  %indvars.iv3470 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2347.preheader" ], [ %indvars.iv.next3471, %"consume blur_x2355" ]
  %28155 = add nsw i64 %indvars.iv3470, %303
  %28156 = icmp slt i64 %28155, 1
  %28157 = trunc i64 %28155 to i32
  %28158 = shl nsw i32 %28157, 5
  %28159 = icmp sgt i32 %198, %28158
  %28160 = or i1 %28156, %28159
  br i1 %28160, label %"produce blur_x2353", label %"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge"

"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2347"
  %.pre3661 = shl nsw i64 %28155, 5
  br label %"consume blur_x2355"

"end for blur_y.s0.x.x.rebased2348":              ; preds = %"consume blur_x2355", %after_bb2332
  br i1 %304, label %"for blur_y.s0.x.x.rebased2363.preheader", label %"end for blur_y.s0.x.x.rebased2364", !prof !386

"for blur_y.s0.x.x.rebased2363.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2348"
  %28161 = sext i32 %t1700974 to i64
  %28162 = zext i32 %.pre-phi3570 to i64
  %28163 = mul nsw i64 %28162, %337
  %28164 = sub nsw i64 %28163, %298
  %28165 = zext i32 %.pre-phi3604 to i64
  %28166 = mul nsw i64 %28165, %337
  %28167 = sub nsw i64 %28166, %298
  %28168 = zext i32 %.pre-phi3574 to i64
  %28169 = mul nsw i64 %28168, %337
  %28170 = sub nsw i64 %28169, %298
  %28171 = zext i32 %.pre-phi3582 to i64
  %28172 = mul nsw i64 %28171, %337
  %28173 = sub nsw i64 %28172, %298
  %28174 = zext i32 %.pre-phi3578 to i64
  %28175 = mul nsw i64 %28174, %337
  %28176 = sub nsw i64 %28175, %298
  %28177 = sext i32 %a379 to i64
  %28178 = add nsw i64 %28177, 31
  %28179 = mul nsw i64 %28178, %334
  %28180 = add nsw i64 %28179, %338
  br label %"for blur_y.s0.x.x.rebased2363"

"produce blur_x2353":                             ; preds = %"for blur_y.s0.x.x.rebased2347"
  %t12082354 = add nsw i32 %523, %28158
  %28181 = sext i32 %t12082354 to i64
  %28182 = getelementptr inbounds i16, i16* %read_input822, i64 %28181
  %28183 = getelementptr inbounds i16, i16* %28182, i64 1
  %28184 = bitcast i16* %28183 to <16 x i16>*
  %28185 = load <16 x i16>, <16 x i16>* %28184, align 2, !tbaa !396
  %28186 = getelementptr inbounds i16, i16* %28182, i64 17
  %28187 = bitcast i16* %28186 to <16 x i16>*
  %28188 = load <16 x i16>, <16 x i16>* %28187, align 2, !tbaa !396
  %28189 = shufflevector <16 x i16> %28185, <16 x i16> %28188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28190 = bitcast i16* %28182 to <16 x i16>*
  %28191 = load <16 x i16>, <16 x i16>* %28190, align 2, !tbaa !396
  %28192 = getelementptr inbounds i16, i16* %28182, i64 16
  %28193 = bitcast i16* %28192 to <16 x i16>*
  %28194 = load <16 x i16>, <16 x i16>* %28193, align 2, !tbaa !396
  %28195 = shufflevector <16 x i16> %28191, <16 x i16> %28194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28196 = getelementptr inbounds i16, i16* %28182, i64 2
  %28197 = bitcast i16* %28196 to <16 x i16>*
  %28198 = load <16 x i16>, <16 x i16>* %28197, align 2, !tbaa !396
  %28199 = getelementptr inbounds i16, i16* %28182, i64 18
  %28200 = bitcast i16* %28199 to <16 x i16>*
  %28201 = load <16 x i16>, <16 x i16>* %28200, align 2, !tbaa !396
  %28202 = shufflevector <16 x i16> %28198, <16 x i16> %28201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28203 = getelementptr inbounds i16, i16* %28182, i64 4
  %28204 = bitcast i16* %28203 to <16 x i16>*
  %28205 = load <16 x i16>, <16 x i16>* %28204, align 2, !tbaa !396
  %28206 = getelementptr inbounds i16, i16* %28182, i64 20
  %28207 = bitcast i16* %28206 to <16 x i16>*
  %28208 = load <16 x i16>, <16 x i16>* %28207, align 2, !tbaa !396
  %28209 = shufflevector <16 x i16> %28205, <16 x i16> %28208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28210 = getelementptr inbounds i16, i16* %28182, i64 3
  %28211 = bitcast i16* %28210 to <16 x i16>*
  %28212 = load <16 x i16>, <16 x i16>* %28211, align 2, !tbaa !396
  %28213 = getelementptr inbounds i16, i16* %28182, i64 19
  %28214 = bitcast i16* %28213 to <16 x i16>*
  %28215 = load <16 x i16>, <16 x i16>* %28214, align 2, !tbaa !396
  %28216 = shufflevector <16 x i16> %28212, <16 x i16> %28215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28217 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28195, <32 x i16> %28202, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28218 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28216, <32 x i16> %28209, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28219 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28217, <32 x i16> %28218, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28220 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28219, <32 x i16> %28189, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28221 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28220, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28222 = shufflevector <32 x i16> %28221, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28223 = shl nsw i64 %28155, 5
  %28224 = add nsw i64 %28223, %28014
  %28225 = getelementptr inbounds i16, i16* %blur_x879, i64 %28224
  %28226 = bitcast i16* %28225 to <16 x i16>*
  store <16 x i16> %28222, <16 x i16>* %28226, align 2, !tbaa !399
  %28227 = shufflevector <32 x i16> %28221, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28228 = getelementptr inbounds i16, i16* %28225, i64 16
  %28229 = bitcast i16* %28228 to <16 x i16>*
  store <16 x i16> %28227, <16 x i16>* %28229, align 2, !tbaa !399
  br label %"consume blur_x2355"

"consume blur_x2355":                             ; preds = %"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge", %"produce blur_x2353"
  %.pre-phi3662 = phi i64 [ %.pre3661, %"for blur_y.s0.x.x.rebased2347.consume blur_x2355_crit_edge" ], [ %28223, %"produce blur_x2353" ]
  %28230 = add nsw i64 %28017, %.pre-phi3662
  %28231 = getelementptr inbounds i16, i16* %blur_x879, i64 %28230
  %28232 = bitcast i16* %28231 to <16 x i16>*
  %28233 = load <16 x i16>, <16 x i16>* %28232, align 2, !tbaa !399
  %28234 = getelementptr inbounds i16, i16* %28231, i64 16
  %28235 = bitcast i16* %28234 to <16 x i16>*
  %28236 = load <16 x i16>, <16 x i16>* %28235, align 2, !tbaa !399
  %28237 = shufflevector <16 x i16> %28233, <16 x i16> %28236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28238 = add nsw i64 %28020, %.pre-phi3662
  %28239 = getelementptr inbounds i16, i16* %blur_x879, i64 %28238
  %28240 = bitcast i16* %28239 to <16 x i16>*
  %28241 = load <16 x i16>, <16 x i16>* %28240, align 2, !tbaa !399
  %28242 = getelementptr inbounds i16, i16* %28239, i64 16
  %28243 = bitcast i16* %28242 to <16 x i16>*
  %28244 = load <16 x i16>, <16 x i16>* %28243, align 2, !tbaa !399
  %28245 = shufflevector <16 x i16> %28241, <16 x i16> %28244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28246 = add nsw i64 %28023, %.pre-phi3662
  %28247 = getelementptr inbounds i16, i16* %blur_x879, i64 %28246
  %28248 = bitcast i16* %28247 to <16 x i16>*
  %28249 = load <16 x i16>, <16 x i16>* %28248, align 2, !tbaa !399
  %28250 = getelementptr inbounds i16, i16* %28247, i64 16
  %28251 = bitcast i16* %28250 to <16 x i16>*
  %28252 = load <16 x i16>, <16 x i16>* %28251, align 2, !tbaa !399
  %28253 = shufflevector <16 x i16> %28249, <16 x i16> %28252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28254 = add nsw i64 %28026, %.pre-phi3662
  %28255 = getelementptr inbounds i16, i16* %blur_x879, i64 %28254
  %28256 = bitcast i16* %28255 to <16 x i16>*
  %28257 = load <16 x i16>, <16 x i16>* %28256, align 2, !tbaa !399
  %28258 = getelementptr inbounds i16, i16* %28255, i64 16
  %28259 = bitcast i16* %28258 to <16 x i16>*
  %28260 = load <16 x i16>, <16 x i16>* %28259, align 2, !tbaa !399
  %28261 = shufflevector <16 x i16> %28257, <16 x i16> %28260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28262 = add nsw i64 %28029, %.pre-phi3662
  %28263 = getelementptr inbounds i16, i16* %blur_x879, i64 %28262
  %28264 = bitcast i16* %28263 to <16 x i16>*
  %28265 = load <16 x i16>, <16 x i16>* %28264, align 2, !tbaa !399
  %28266 = getelementptr inbounds i16, i16* %28263, i64 16
  %28267 = bitcast i16* %28266 to <16 x i16>*
  %28268 = load <16 x i16>, <16 x i16>* %28267, align 2, !tbaa !399
  %28269 = shufflevector <16 x i16> %28265, <16 x i16> %28268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28270 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28245, <32 x i16> %28253, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28271 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28269, <32 x i16> %28261, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28272 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28270, <32 x i16> %28271, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28273 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28272, <32 x i16> %28237, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28274 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28273, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28275 = shufflevector <32 x i16> %28274, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28276 = add nsw i64 %28033, %.pre-phi3662
  %28277 = getelementptr inbounds i16, i16* %263, i64 %28276
  %28278 = bitcast i16* %28277 to <16 x i16>*
  store <16 x i16> %28275, <16 x i16>* %28278, align 2, !tbaa !401
  %28279 = shufflevector <32 x i16> %28274, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28280 = getelementptr inbounds i16, i16* %28277, i64 16
  %28281 = bitcast i16* %28280 to <16 x i16>*
  store <16 x i16> %28279, <16 x i16>* %28281, align 2, !tbaa !401
  %indvars.iv.next3471 = add nuw nsw i64 %indvars.iv3470, 1
  %28282 = icmp eq i64 %indvars.iv.next3471, %zext3472
  br i1 %28282, label %"end for blur_y.s0.x.x.rebased2348", label %"for blur_y.s0.x.x.rebased2347"

"for blur_y.s0.x.x.rebased2363":                  ; preds = %"for blur_y.s0.x.x.rebased2363.preheader", %"consume blur_x2374"
  %blur_y.s0.x.x.rebased2365 = phi i32 [ %28392, %"consume blur_x2374" ], [ 0, %"for blur_y.s0.x.x.rebased2363.preheader" ]
  %28283 = add nsw i32 %blur_y.s0.x.x.rebased2365, %t1626814
  %a6176 = shl nsw i32 %28283, 5
  %28284 = icmp sgt i32 %t1647, %a6176
  %blur_y.s0.x.v0.base.s2366 = select i1 %28284, i32 %a6176, i32 %t1647
  %28285 = icmp slt i32 %28283, 1
  %28286 = icmp sgt i32 %198, %a6176
  %28287 = or i1 %28285, %28286
  br i1 %28287, label %"produce blur_x2371", label %"consume blur_x2374"

"end for blur_y.s0.x.x.rebased2364":              ; preds = %"consume blur_x2374", %"end for blur_y.s0.x.x.rebased2348"
  %28288 = add nuw nsw i32 %blur_y.s0.y.y818, 1
  %.not2538 = icmp eq i32 %28288, %t1612815
  br i1 %.not2538, label %if.then.i2859.loopexit, label %"for blur_y.s0.y.y816"

"produce blur_x2371":                             ; preds = %"for blur_y.s0.x.x.rebased2363"
  %28289 = icmp slt i32 %blur_y.s0.x.v0.base.s2366, %198
  %blur_x.s0.x.v1.base.s2372 = select i1 %28289, i32 %blur_y.s0.x.v0.base.s2366, i32 %198
  %t12132373 = add nsw i32 %523, %blur_x.s0.x.v1.base.s2372
  %28290 = sext i32 %t12132373 to i64
  %28291 = getelementptr inbounds i16, i16* %read_input822, i64 %28290
  %28292 = getelementptr inbounds i16, i16* %28291, i64 1
  %28293 = bitcast i16* %28292 to <16 x i16>*
  %28294 = load <16 x i16>, <16 x i16>* %28293, align 2, !tbaa !396
  %28295 = getelementptr inbounds i16, i16* %28291, i64 17
  %28296 = bitcast i16* %28295 to <16 x i16>*
  %28297 = load <16 x i16>, <16 x i16>* %28296, align 2, !tbaa !396
  %28298 = shufflevector <16 x i16> %28294, <16 x i16> %28297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28299 = bitcast i16* %28291 to <16 x i16>*
  %28300 = load <16 x i16>, <16 x i16>* %28299, align 2, !tbaa !396
  %28301 = getelementptr inbounds i16, i16* %28291, i64 16
  %28302 = bitcast i16* %28301 to <16 x i16>*
  %28303 = load <16 x i16>, <16 x i16>* %28302, align 2, !tbaa !396
  %28304 = shufflevector <16 x i16> %28300, <16 x i16> %28303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28305 = getelementptr inbounds i16, i16* %28291, i64 2
  %28306 = bitcast i16* %28305 to <16 x i16>*
  %28307 = load <16 x i16>, <16 x i16>* %28306, align 2, !tbaa !396
  %28308 = getelementptr inbounds i16, i16* %28291, i64 18
  %28309 = bitcast i16* %28308 to <16 x i16>*
  %28310 = load <16 x i16>, <16 x i16>* %28309, align 2, !tbaa !396
  %28311 = shufflevector <16 x i16> %28307, <16 x i16> %28310, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28312 = getelementptr inbounds i16, i16* %28291, i64 4
  %28313 = bitcast i16* %28312 to <16 x i16>*
  %28314 = load <16 x i16>, <16 x i16>* %28313, align 2, !tbaa !396
  %28315 = getelementptr inbounds i16, i16* %28291, i64 20
  %28316 = bitcast i16* %28315 to <16 x i16>*
  %28317 = load <16 x i16>, <16 x i16>* %28316, align 2, !tbaa !396
  %28318 = shufflevector <16 x i16> %28314, <16 x i16> %28317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28319 = getelementptr inbounds i16, i16* %28291, i64 3
  %28320 = bitcast i16* %28319 to <16 x i16>*
  %28321 = load <16 x i16>, <16 x i16>* %28320, align 2, !tbaa !396
  %28322 = getelementptr inbounds i16, i16* %28291, i64 19
  %28323 = bitcast i16* %28322 to <16 x i16>*
  %28324 = load <16 x i16>, <16 x i16>* %28323, align 2, !tbaa !396
  %28325 = shufflevector <16 x i16> %28321, <16 x i16> %28324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28326 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28304, <32 x i16> %28311, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28327 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28325, <32 x i16> %28318, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28328 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28326, <32 x i16> %28327, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28329 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28328, <32 x i16> %28298, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28330 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28329, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28331 = shufflevector <32 x i16> %28330, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28332 = sext i32 %blur_x.s0.x.v1.base.s2372 to i64
  %28333 = add nsw i64 %28332, %28161
  %28334 = getelementptr inbounds i16, i16* %blur_x879, i64 %28333
  %28335 = bitcast i16* %28334 to <16 x i16>*
  store <16 x i16> %28331, <16 x i16>* %28335, align 2, !tbaa !399
  %28336 = shufflevector <32 x i16> %28330, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28337 = getelementptr inbounds i16, i16* %28334, i64 16
  %28338 = bitcast i16* %28337 to <16 x i16>*
  store <16 x i16> %28336, <16 x i16>* %28338, align 2, !tbaa !399
  br label %"consume blur_x2374"

"consume blur_x2374":                             ; preds = %"for blur_y.s0.x.x.rebased2363", %"produce blur_x2371"
  %28339 = sext i32 %blur_y.s0.x.v0.base.s2366 to i64
  %28340 = add nsw i64 %28164, %28339
  %28341 = getelementptr inbounds i16, i16* %blur_x879, i64 %28340
  %28342 = bitcast i16* %28341 to <16 x i16>*
  %28343 = load <16 x i16>, <16 x i16>* %28342, align 2, !tbaa !399
  %28344 = getelementptr inbounds i16, i16* %28341, i64 16
  %28345 = bitcast i16* %28344 to <16 x i16>*
  %28346 = load <16 x i16>, <16 x i16>* %28345, align 2, !tbaa !399
  %28347 = shufflevector <16 x i16> %28343, <16 x i16> %28346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28348 = add nsw i64 %28167, %28339
  %28349 = getelementptr inbounds i16, i16* %blur_x879, i64 %28348
  %28350 = bitcast i16* %28349 to <16 x i16>*
  %28351 = load <16 x i16>, <16 x i16>* %28350, align 2, !tbaa !399
  %28352 = getelementptr inbounds i16, i16* %28349, i64 16
  %28353 = bitcast i16* %28352 to <16 x i16>*
  %28354 = load <16 x i16>, <16 x i16>* %28353, align 2, !tbaa !399
  %28355 = shufflevector <16 x i16> %28351, <16 x i16> %28354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28356 = add nsw i64 %28170, %28339
  %28357 = getelementptr inbounds i16, i16* %blur_x879, i64 %28356
  %28358 = bitcast i16* %28357 to <16 x i16>*
  %28359 = load <16 x i16>, <16 x i16>* %28358, align 2, !tbaa !399
  %28360 = getelementptr inbounds i16, i16* %28357, i64 16
  %28361 = bitcast i16* %28360 to <16 x i16>*
  %28362 = load <16 x i16>, <16 x i16>* %28361, align 2, !tbaa !399
  %28363 = shufflevector <16 x i16> %28359, <16 x i16> %28362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28364 = add nsw i64 %28173, %28339
  %28365 = getelementptr inbounds i16, i16* %blur_x879, i64 %28364
  %28366 = bitcast i16* %28365 to <16 x i16>*
  %28367 = load <16 x i16>, <16 x i16>* %28366, align 2, !tbaa !399
  %28368 = getelementptr inbounds i16, i16* %28365, i64 16
  %28369 = bitcast i16* %28368 to <16 x i16>*
  %28370 = load <16 x i16>, <16 x i16>* %28369, align 2, !tbaa !399
  %28371 = shufflevector <16 x i16> %28367, <16 x i16> %28370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28372 = add nsw i64 %28176, %28339
  %28373 = getelementptr inbounds i16, i16* %blur_x879, i64 %28372
  %28374 = bitcast i16* %28373 to <16 x i16>*
  %28375 = load <16 x i16>, <16 x i16>* %28374, align 2, !tbaa !399
  %28376 = getelementptr inbounds i16, i16* %28373, i64 16
  %28377 = bitcast i16* %28376 to <16 x i16>*
  %28378 = load <16 x i16>, <16 x i16>* %28377, align 2, !tbaa !399
  %28379 = shufflevector <16 x i16> %28375, <16 x i16> %28378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28380 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28355, <32 x i16> %28363, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28381 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28379, <32 x i16> %28371, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28382 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28380, <32 x i16> %28381, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28383 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %28382, <32 x i16> %28347, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %28384 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %28383, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %28385 = shufflevector <32 x i16> %28384, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28386 = add nsw i64 %28180, %28339
  %28387 = getelementptr inbounds i16, i16* %263, i64 %28386
  %28388 = bitcast i16* %28387 to <16 x i16>*
  store <16 x i16> %28385, <16 x i16>* %28388, align 2, !tbaa !401
  %28389 = shufflevector <32 x i16> %28384, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28390 = getelementptr inbounds i16, i16* %28387, i64 16
  %28391 = bitcast i16* %28390 to <16 x i16>*
  store <16 x i16> %28389, <16 x i16>* %28391, align 2, !tbaa !401
  %28392 = add nuw nsw i32 %blur_y.s0.x.x.rebased2365, 1
  %.not2539 = icmp eq i32 %28392, %t1683898
  br i1 %.not2539, label %"end for blur_y.s0.x.x.rebased2364", label %"for blur_y.s0.x.x.rebased2363"
}

; Function Attrs: nounwind
define i32 @blur5x5_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur5x5(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur5x5_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur5x5_metadata_storage
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.0(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

declare <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16>, <32 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16>, <32 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.1(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.2(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.3(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.4(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.5(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.6(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.7(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.8(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.9(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.10(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.11(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.12(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.13(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.14(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.15(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.16(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.17(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.18(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.19(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.20(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.21(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.22(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.23(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.24(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.25(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.26(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.27(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.28(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.29(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.30(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.31(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.32(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.33(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.34(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.35(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.36(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.37(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.38(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.39(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.40(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.41(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.42(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.43(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.44(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.45(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.46(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.47(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.48(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.49(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.50(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.51(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.52(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.53(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.54(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.55(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.56(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.57(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.58(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.59(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.60(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.61(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.62(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.63(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.64(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.65(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.66(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.67(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.68(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.69(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.70(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.71(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.72(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.73(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.74(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.75(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.76(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.77(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.78(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.79(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.80(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.81(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.82(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.83(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.84(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.85(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.86(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.87(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.88(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.89(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.90(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.91(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.92(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.93(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.94(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.95(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.96(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.97(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.98(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.99(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.100(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.101(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.102(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.103(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.104(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.105(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.106(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.107(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.108(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.109(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.110(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.111(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.112(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.113(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.114(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.115(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.116(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.117(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.118(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.119(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.120(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.121(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.122(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.123(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.124(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.125(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.126(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.127(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.128(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.129(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.130(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.131(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.132(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.133(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.134(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.135(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.136(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.137(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.138(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.139(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.140(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.141(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.142(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.143(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.144(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.145(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.146(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.147(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.148(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.149(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.150(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.151(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.152(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.153(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.154(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.155(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.156(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.157(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.158(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.159(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.160(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.161(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.162(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.163(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.164(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.165(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.166(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.167(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.168(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.169(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.170(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.171(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.172(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.173(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.174(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.175(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.176(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.177(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.178(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.179(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.180(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.181(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.182(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.183(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.184(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.185(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.186(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.187(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.188(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.189(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.190(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.191(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.192(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.193(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.194(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.195(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.196(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.197(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.198(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.199(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.200(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.201(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.202(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

define <32 x i16> @hydride.node.blur5x5_x86_depth3_muchen_unlegalized.203(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2, <32 x i16> %arg.3, <32 x i16> %arg.4) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.1, <32 x i16> %arg.2, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.4, <32 x i16> %arg.3, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %0, <32 x i16> %1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %3 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %2, <32 x i16> %arg, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %4 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %3, <32 x i16> <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %4
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
