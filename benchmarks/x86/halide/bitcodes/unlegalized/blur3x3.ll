; ModuleID = 'blur3x3'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur3x3\00", align 32
@blur3x3_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur3x3(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2277 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2278 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2279 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2663 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2663, align 4, !tbaa !181
  %extent.i2665 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2665, align 4, !tbaa !178
  %stride.i2667 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2667, align 4, !tbaa !182
  %host.i2668 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2669 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2669, align 8, !tbaa !176
  %min.i2670 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2670, align 4, !tbaa !181
  %extent.i2672 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2672, align 4, !tbaa !178
  %min.i2676 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2676, align 4, !tbaa !181
  %extent.i2678 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2678, align 4, !tbaa !178
  %stride.i2680 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2680, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1590 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1591 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1593 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 33
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1591
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1591, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1601 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 1
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 33
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 2
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1591
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1601
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1590, %t1591
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1590, 29
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1591
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -30
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %.not2427 = icmp slt i32 %b21, %a17
  %57 = select i1 %.not2427, i32 %b19, i32 %a17
  %58 = ashr i32 %57, 5
  %a16 = add nsw i32 %58, 1
  %.not2428 = icmp slt i32 %58, %b18
  %t1580 = select i1 %.not2428, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %59 = icmp sgt i32 %a21, %b23
  %t1582 = select i1 %59, i32 %a21, i32 %b23
  %60 = add nsw i32 %6, 31
  %t1568 = ashr i32 %60, 5
  %61 = icmp sgt i32 %6, 0
  br i1 %61, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %62 = bitcast i8** %host.i2668 to i16**
  %63 = load i16*, i16** %62, align 8, !tbaa !172
  %64 = bitcast i8** %host.i to i16**
  %65 = load i16*, i16** %64, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2578 = icmp slt i32 %48, 0
  %66 = select i1 %.inv2578, i32 0, i32 %a24
  %t2230 = zext i32 %66 to i64
  %67 = mul nuw nsw i64 %t2230, 68
  %68 = add nuw nsw i64 %67, 6
  %69 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %70 = sub nsw i32 %11, %5
  %71 = sub i32 %5, %11
  %t1608 = add nsw i32 %t1601, %3
  %t1606 = add nsw i32 %t1591, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 2
  %72 = add nsw i32 %t1590, -1
  %73 = insertelement <32 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <32 x i32> %73, <32 x i32> undef, <8 x i32> zeroinitializer
  %75 = insertelement <32 x i32> undef, i32 %9, i32 0
  %76 = shufflevector <32 x i32> %75, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1617 = sub nsw i32 %20, %t1580
  %77 = icmp sgt i32 %b18, 0
  %78 = sext i32 %11 to i64
  %79 = sext i32 %5 to i64
  %80 = sub nsw i64 %78, %79
  %81 = sext i32 %a24 to i64
  %82 = sext i32 %t1608 to i64
  %t1623 = sub nsw i32 %t1580, %b18
  %83 = icmp sgt i32 %t1623, 0
  %84 = icmp sgt i32 %t1617, 0
  %85 = sub nsw i32 %5, %a40
  %86 = sext i32 %a40 to i64
  %87 = sub nsw i64 %86, %79
  %a73 = sub nsw i32 %4, %t1601
  %88 = icmp sgt i32 %a73, 0
  %89 = select i1 %88, i32 %a73, i32 0
  %t2231 = zext i32 %89 to i64
  %90 = shl nuw nsw i64 %t2231, 3
  %91 = or i64 %90, 6
  %92 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t654 = sub i32 %t1591, %t1601
  %93 = sext i32 %t654 to i64
  %94 = zext i32 %4 to i64
  %95 = sext i32 %t1601 to i64
  %96 = sub nsw i64 %94, %95
  %97 = sext i32 %t1591 to i64
  %98 = sub nsw i64 %97, %95
  %t1636 = sub nsw i32 %t1582, %b23
  %99 = icmp sgt i32 %t1636, 0
  %100 = sext i32 %b23 to i64
  %t1639 = sub nsw i32 %a3, %t1582
  %101 = icmp sgt i32 %t1639, 0
  %102 = shl nsw i32 %a24, 1
  %a24.neg = xor i32 %48, -1
  %103 = add i32 %t654, %a24.neg
  %t660 = add i32 %103, %102
  %104 = sext i32 %t660 to i64
  %105 = sub nsw i32 %102, %t1601
  %t1643 = sub nsw i32 %105, %a24
  %106 = add nsw i32 %102, %t1591
  %t666 = sub i32 %106, %t1601
  %107 = sext i32 %t666 to i64
  %108 = sext i32 %a73 to i64
  %109 = sext i32 %7 to i64
  %110 = sext i32 %t1593 to i64
  %111 = sub nsw i64 %97, %110
  %t1653 = sub nsw i32 0, %t1593
  %112 = sext i32 %t1653 to i64
  %t682 = add nsw i32 %t666, %a24
  %113 = sext i32 %t682 to i64
  %t1665 = add nsw i32 %105, %a24
  %114 = shl nsw i32 %a24, 2
  %t698 = add i32 %t654, %114
  %115 = sext i32 %t698 to i64
  %t1681 = sub nsw i32 %114, %t1601
  %116 = mul nsw i32 %a24, 5
  %t714 = add i32 %t654, %116
  %117 = sext i32 %t714 to i64
  %t1697 = sub nsw i32 %116, %t1601
  %118 = mul nsw i32 %a24, 6
  %t730 = add i32 %t654, %118
  %119 = sext i32 %t730 to i64
  %t1713 = sub nsw i32 %118, %t1601
  %120 = mul nsw i32 %a24, 7
  %t746 = add i32 %t654, %120
  %121 = sext i32 %t746 to i64
  %t1729 = sub nsw i32 %120, %t1601
  %122 = shl nsw i32 %a24, 3
  %t762 = add i32 %t654, %122
  %123 = sext i32 %t762 to i64
  %t1745 = sub nsw i32 %122, %t1601
  %124 = mul nsw i32 %a24, 9
  %t778 = add i32 %t654, %124
  %125 = sext i32 %t778 to i64
  %t1761 = sub nsw i32 %124, %t1601
  %126 = mul nsw i32 %a24, 10
  %t794 = add i32 %t654, %126
  %127 = sext i32 %t794 to i64
  %t1777 = sub nsw i32 %126, %t1601
  %128 = mul nsw i32 %a24, 11
  %t810 = add i32 %t654, %128
  %129 = sext i32 %t810 to i64
  %t1793 = sub nsw i32 %128, %t1601
  %130 = mul nsw i32 %a24, 12
  %t826 = add i32 %t654, %130
  %131 = sext i32 %t826 to i64
  %t1809 = sub nsw i32 %130, %t1601
  %132 = mul nsw i32 %a24, 13
  %t842 = add i32 %t654, %132
  %133 = sext i32 %t842 to i64
  %t1825 = sub nsw i32 %132, %t1601
  %134 = mul nsw i32 %a24, 14
  %t858 = add i32 %t654, %134
  %135 = sext i32 %t858 to i64
  %t1841 = sub nsw i32 %134, %t1601
  %136 = mul nsw i32 %a24, 15
  %t874 = add i32 %t654, %136
  %137 = sext i32 %t874 to i64
  %t1857 = sub nsw i32 %136, %t1601
  %138 = shl nsw i32 %a24, 4
  %t890 = add i32 %t654, %138
  %139 = sext i32 %t890 to i64
  %t1873 = sub nsw i32 %138, %t1601
  %140 = mul nsw i32 %a24, 17
  %t906 = add i32 %t654, %140
  %141 = sext i32 %t906 to i64
  %t1889 = sub nsw i32 %140, %t1601
  %142 = mul nsw i32 %a24, 18
  %t922 = add i32 %t654, %142
  %143 = sext i32 %t922 to i64
  %t1905 = sub nsw i32 %142, %t1601
  %144 = mul nsw i32 %a24, 19
  %t938 = add i32 %t654, %144
  %145 = sext i32 %t938 to i64
  %t1921 = sub nsw i32 %144, %t1601
  %146 = mul nsw i32 %a24, 20
  %t954 = add i32 %t654, %146
  %147 = sext i32 %t954 to i64
  %t1937 = sub nsw i32 %146, %t1601
  %148 = mul nsw i32 %a24, 21
  %t970 = add i32 %t654, %148
  %149 = sext i32 %t970 to i64
  %t1953 = sub nsw i32 %148, %t1601
  %150 = mul nsw i32 %a24, 22
  %t986 = add i32 %t654, %150
  %151 = sext i32 %t986 to i64
  %t1969 = sub nsw i32 %150, %t1601
  %152 = mul nsw i32 %a24, 23
  %t1002 = add i32 %t654, %152
  %153 = sext i32 %t1002 to i64
  %t1985 = sub nsw i32 %152, %t1601
  %154 = mul nsw i32 %a24, 24
  %t1018 = add i32 %t654, %154
  %155 = sext i32 %t1018 to i64
  %t2001 = sub nsw i32 %154, %t1601
  %156 = mul nsw i32 %a24, 25
  %t1034 = add i32 %t654, %156
  %157 = sext i32 %t1034 to i64
  %t2017 = sub nsw i32 %156, %t1601
  %158 = mul nsw i32 %a24, 26
  %t1050 = add i32 %t654, %158
  %159 = sext i32 %t1050 to i64
  %t2033 = sub nsw i32 %158, %t1601
  %160 = mul nsw i32 %a24, 27
  %t1066 = add i32 %t654, %160
  %161 = sext i32 %t1066 to i64
  %t2049 = sub nsw i32 %160, %t1601
  %162 = mul nsw i32 %a24, 28
  %t1082 = add i32 %t654, %162
  %163 = sext i32 %t1082 to i64
  %t2065 = sub nsw i32 %162, %t1601
  %164 = mul nsw i32 %a24, 29
  %t1098 = add i32 %t654, %164
  %165 = sext i32 %t1098 to i64
  %t2081 = sub nsw i32 %164, %t1601
  %166 = mul nsw i32 %a24, 30
  %t1114 = add i32 %t654, %166
  %167 = sext i32 %t1114 to i64
  %t2097 = sub nsw i32 %166, %t1601
  %168 = mul nsw i32 %a24, 31
  %t1130 = add i32 %t654, %168
  %169 = sext i32 %t1130 to i64
  %t2113 = sub nsw i32 %168, %t1601
  %170 = shl nsw i32 %a24, 5
  %t1146 = add i32 %t654, %170
  %171 = sext i32 %t1146 to i64
  %t2129 = sub nsw i32 %170, %t1601
  %172 = mul nsw i32 %a24, 33
  %t1162 = add i32 %t654, %172
  %173 = sext i32 %t1162 to i64
  %t2145 = sub nsw i32 %172, %t1601
  %174 = sext i32 %b36 to i64
  %175 = zext i32 %b18 to i64
  %176 = sext i32 %t1606 to i64
  %177 = zext i32 %t1623 to i64
  %178 = sext i32 %13 to i64
  %179 = sext i32 %9 to i64
  %180 = zext i32 %t1636 to i64
  %181 = add nsw i64 %177, -1
  %xtraiter = and i64 %177, 3
  %182 = icmp ult i64 %181, 3
  %unroll_iter = and i64 %177, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased749"
  %blur_y.s0.y.y = phi i32 [ %10258, %"end for blur_y.s0.x.x.rebased749" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %183 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %183, i32 %a22, i32 %b24
  %184 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %184, %68
  %185 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %185, null
  %186 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %186, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %185) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %187 = phi i64 [ %.pre, %if.then3.i ], [ %186, %if.then.i ]
  %add.i = add i64 %187, %68
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %68) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %68, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %188 = phi i8* [ %storemerge.i, %if.end11.i ], [ %185, %"for blur_y.s0.y.y" ]
  %189 = bitcast i8* %188 to i16*
  %.not2579 = icmp eq i8* %188, null
  br i1 %.not2579, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased749"
  %190 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %191 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02785 = phi i8* [ null, %entry ], [ %191, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %190, %"end for blur_y.s0.y.y.loopexit" ]
  %192 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2683 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 0, i32 0
  %193 = load i32, i32* %min.i2683, align 4, !tbaa !181
  %extent.i2685 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 0, i32 1
  %194 = load i32, i32* %extent.i2685, align 4, !tbaa !178
  %min.i2689 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 0
  %195 = load i32, i32* %min.i2689, align 4, !tbaa !181
  %extent.i2691 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 1
  %196 = load i32, i32* %extent.i2691, align 4, !tbaa !178
  %stride.i2693 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 2
  %197 = load i32, i32* %stride.i2693, align 4, !tbaa !182
  %198 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2669, align 8, !tbaa !176
  %min.i2696 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 0, i32 0
  %199 = load i32, i32* %min.i2696, align 4, !tbaa !181
  %extent.i2698 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 0, i32 1
  %200 = load i32, i32* %extent.i2698, align 4, !tbaa !178
  %min.i2702 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 0
  %201 = load i32, i32* %min.i2702, align 4, !tbaa !181
  %extent.i2704 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 1
  %202 = load i32, i32* %extent.i2704, align 4, !tbaa !178
  %stride.i2706 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 2
  %203 = load i32, i32* %stride.i2706, align 4, !tbaa !182
  %t1590769 = add nsw i32 %200, %199
  %204 = icmp slt i32 %194, 32
  %t1591770 = select i1 %204, i32 %194, i32 32
  %205 = icmp sgt i32 %202, 0
  %206 = select i1 %205, i32 %202, i32 0
  %t1592 = add nsw i32 %206, %201
  %t1593771 = mul nsw i32 %197, %195
  %207 = add nsw i32 %194, 31
  %208 = icmp sgt i32 %194, 32
  %209 = select i1 %208, i32 %194, i32 32
  %210 = add nuw nsw i32 %209, 33
  %211 = lshr i32 %210, 5
  %a317 = ashr i32 %207, 5
  %212 = icmp slt i32 %a317, 1
  %t1597 = select i1 %212, i32 %a317, i32 1
  %213 = sub i32 63, %193
  %214 = sub i32 %213, %t1591770
  %215 = add i32 %214, %199
  %a319 = ashr i32 %215, 5
  %216 = icmp sgt i32 %a319, 0
  %a318 = select i1 %216, i32 %a319, i32 0
  %217 = icmp sgt i32 %211, %a318
  %t1598 = select i1 %217, i32 %a318, i32 %211
  %t1600 = add nsw i32 %t1591770, -32
  %218 = icmp slt i32 %194, 0
  %219 = select i1 %218, i32 %194, i32 0
  %a323 = select i1 %208, i32 %219, i32 %t1600
  %220 = icmp sgt i32 %t1600, %a323
  %t1601773 = select i1 %220, i32 %a323, i32 %t1600
  %t1603 = add nsw i32 %194, -32
  %221 = add i32 %194, -1
  %222 = and i32 %221, -32
  %a327 = select i1 %208, i32 %222, i32 %t1603
  %223 = icmp sgt i32 %a327, %t1603
  %224 = select i1 %223, i32 %a327, i32 %t1603
  %225 = icmp sgt i32 %194, 0
  %226 = select i1 %225, i32 %194, i32 0
  %a328 = select i1 %208, i32 %226, i32 32
  %227 = icmp sgt i32 %a328, 32
  %228 = select i1 %227, i32 %a328, i32 32
  %229 = add nsw i32 %228, -1
  %230 = and i32 %229, -32
  %231 = add nsw i32 %230, %224
  %a332 = add nsw i32 %231, 32
  %232 = icmp sgt i32 %194, %a332
  %a331 = select i1 %232, i32 %a332, i32 %194
  %233 = icmp sgt i32 %231, %t1603
  %234 = select i1 %233, i32 %t1603, i32 %231
  %b333 = add nsw i32 %234, 33
  %235 = icmp sgt i32 %a331, %b333
  %a330 = select i1 %235, i32 %a331, i32 %b333
  %a340 = add nsw i32 %194, 2
  %236 = add nuw nsw i32 %209, 1
  %237 = and i32 %236, 2147483616
  %b342 = add nsw i32 %237, %t1591770
  %238 = icmp sgt i32 %b342, %a340
  %239 = select i1 %238, i32 %a340, i32 %b342
  %b332 = add nsw i32 %239, -1
  %.not2429 = icmp slt i32 %a330, %239
  %240 = select i1 %.not2429, i32 %b332, i32 %a330
  %241 = sub nsw i32 %240, %t1601773
  %a363 = add nsw i32 %241, 1
  %242 = sub nsw i32 %t1590769, %t1591770
  %a348 = sub i32 %242, %193
  %a351 = add nsw i32 %t1590769, 29
  %b353 = add nsw i32 %194, %193
  %243 = icmp sgt i32 %b353, %a351
  %244 = select i1 %243, i32 %a351, i32 %b353
  %245 = sub i32 32, %193
  %246 = sub i32 %245, %t1591770
  %a350 = add i32 %246, %244
  %247 = icmp sgt i32 %209, %a350
  %248 = select i1 %247, i32 %a350, i32 %209
  %b350 = add nsw i32 %248, -30
  %249 = icmp sgt i32 %b350, %a348
  %a347 = select i1 %249, i32 %a348, i32 %b350
  %.not2430 = icmp slt i32 %209, %a347
  %250 = select i1 %.not2430, i32 %236, i32 %a347
  %251 = ashr i32 %250, 5
  %a359 = ashr i32 %194, 5
  %252 = icmp sgt i32 %a359, %t1597
  %t1582776 = select i1 %252, i32 %a359, i32 %t1597
  %253 = add nsw i32 %196, 31
  %t1568777 = ashr i32 %253, 5
  %254 = icmp sgt i32 %196, 0
  br i1 %254, label %"for blur_y.s0.y.y778.preheader", label %"end for blur_y.s0.y.y779", !prof !386

"for blur_y.s0.y.y778.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %a363.neg = xor i32 %241, -1
  %255 = bitcast i8** %host.i2668 to i16**
  %256 = load i16*, i16** %255, align 8, !tbaa !172
  %257 = bitcast i8** %host.i to i16**
  %258 = load i16*, i16** %257, align 8, !tbaa !172
  %.not2431 = icmp slt i32 %251, %t1598
  %a346 = add nsw i32 %251, 1
  %b363 = add nsw i32 %196, -32
  %.inv = icmp slt i32 %241, 0
  %259 = select i1 %.inv, i32 0, i32 %a363
  %t2232 = zext i32 %259 to i64
  %260 = mul nuw nsw i64 %t2232, 68
  %261 = add nuw nsw i64 %260, 6
  %262 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b371 = add nsw i32 %202, %201
  %263 = sub nsw i32 %201, %195
  %264 = sub i32 %195, %201
  %b384 = add nsw i32 %202, -1
  %265 = add i32 %t1601773, %193
  %266 = add nsw i32 %t1591770, %193
  %b405 = add nsw i32 %b353, 2
  %267 = add nsw i32 %t1590769, -1
  %268 = insertelement <32 x i32> undef, i32 %267, i32 0
  %269 = shufflevector <32 x i32> %268, <32 x i32> undef, <8 x i32> zeroinitializer
  %270 = insertelement <32 x i32> undef, i32 %199, i32 0
  %271 = shufflevector <32 x i32> %270, <32 x i32> undef, <8 x i32> zeroinitializer
  %272 = select i1 %.not2431, i32 %t1598, i32 %a346
  %t1617803 = sub nsw i32 %211, %272
  %273 = icmp sgt i32 %t1598, 0
  %274 = sext i32 %201 to i64
  %275 = sext i32 %195 to i64
  %276 = sub nsw i64 %274, %275
  %277 = sext i32 %a363 to i64
  %278 = sext i32 %265 to i64
  %t1623816 = sub nsw i32 %272, %t1598
  %279 = icmp sgt i32 %t1623816, 0
  %280 = icmp sgt i32 %t1617803, 0
  %281 = sub nsw i32 %195, %t1592
  %282 = sext i32 %t1592 to i64
  %283 = sub nsw i64 %282, %275
  %a537 = sub nsw i32 %194, %t1601773
  %284 = icmp sgt i32 %a537, 0
  %285 = select i1 %284, i32 %a537, i32 0
  %t2233 = zext i32 %285 to i64
  %286 = shl nuw nsw i64 %t2233, 3
  %287 = or i64 %286, 6
  %288 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %a540 = select i1 %208, i32 0, i32 %t1600
  %289 = icmp sgt i32 %t1600, %a540
  %290 = select i1 %289, i32 %a540, i32 %t1600
  %t654847 = sub i32 %t1591770, %290
  %291 = sext i32 %t654847 to i64
  %292 = zext i32 %194 to i64
  %293 = sext i32 %t1601773 to i64
  %294 = sub nsw i64 %292, %293
  %295 = sext i32 %t1591770 to i64
  %296 = sub nsw i64 %295, %293
  %t1636849 = sub nsw i32 %t1582776, %t1597
  %297 = icmp sgt i32 %t1636849, 0
  %298 = sext i32 %t1597 to i64
  %t1639860 = sub nsw i32 %a317, %t1582776
  %299 = icmp sgt i32 %t1639860, 0
  %300 = select i1 %208, i32 %222, i32 0
  %301 = add nsw i32 %224, %300
  %a601 = add nsw i32 %301, 32
  %302 = icmp sgt i32 %194, %a601
  %a600 = select i1 %302, i32 %a601, i32 %194
  %303 = icmp sgt i32 %301, %t1603
  %304 = select i1 %303, i32 %t1603, i32 %301
  %b602 = add nsw i32 %304, 33
  %305 = icmp sgt i32 %a600, %b602
  %a599 = select i1 %305, i32 %a600, i32 %b602
  %.not2565 = icmp slt i32 %a599, %239
  %306 = select i1 %.not2565, i32 %b332, i32 %a599
  %307 = sub nsw i32 %306, %290
  %308 = shl i32 %307, 1
  %309 = add i32 %308, 2
  %.neg2950 = xor i32 %307, -1
  %310 = add i32 %t654847, %.neg2950
  %t660875 = add i32 %310, %309
  %311 = sext i32 %t660875 to i64
  %312 = shl nsw i32 %a363, 1
  %313 = sub nsw i32 %312, %t1601773
  %314 = add i32 %313, %a363.neg
  %315 = add nsw i32 %t1591770, 2
  %316 = sub i32 %315, %290
  %t666905 = add i32 %316, %308
  %317 = sext i32 %t666905 to i64
  %t1219909 = sub nsw i32 %194, %290
  %318 = sext i32 %t1219909 to i64
  %319 = sext i32 %197 to i64
  %320 = sext i32 %t1593771 to i64
  %321 = sub nsw i64 %295, %320
  %t1653915 = sub nsw i32 0, %t1593771
  %322 = sext i32 %a537 to i64
  %323 = sext i32 %t1653915 to i64
  %324 = add nsw i32 %307, 1
  %325 = shl nsw i32 %324, 1
  %326 = add i32 %t654847, %324
  %t682948 = add i32 %326, %325
  %327 = sext i32 %t682948 to i64
  %328 = add nsw i32 %313, %a363
  %329 = shl i32 %307, 2
  %330 = add nsw i32 %t1591770, 4
  %331 = sub i32 %330, %290
  %t698991 = add i32 %331, %329
  %332 = sext i32 %t698991 to i64
  %333 = shl nsw i32 %a363, 2
  %334 = sub i32 %333, %t1601773
  %335 = mul i32 %307, 5
  %336 = add nsw i32 %t1591770, 5
  %337 = sub i32 %336, %290
  %t7141034 = add i32 %337, %335
  %338 = sext i32 %t7141034 to i64
  %339 = mul nsw i32 %a363, 5
  %340 = sub i32 %339, %t1601773
  %341 = mul i32 %307, 6
  %342 = add nsw i32 %t1591770, 6
  %343 = sub i32 %342, %290
  %t7301077 = add i32 %343, %341
  %344 = sext i32 %t7301077 to i64
  %345 = mul nsw i32 %a363, 6
  %346 = sub i32 %345, %t1601773
  %347 = mul i32 %307, 7
  %348 = add nsw i32 %t1591770, 7
  %349 = sub i32 %348, %290
  %t7461120 = add i32 %349, %347
  %350 = sext i32 %t7461120 to i64
  %351 = mul nsw i32 %a363, 7
  %352 = sub i32 %351, %t1601773
  %353 = shl i32 %307, 3
  %354 = add nsw i32 %t1591770, 8
  %355 = sub i32 %354, %290
  %t7621163 = add i32 %355, %353
  %356 = sext i32 %t7621163 to i64
  %357 = shl nsw i32 %a363, 3
  %358 = sub i32 %357, %t1601773
  %359 = mul i32 %307, 9
  %360 = add nsw i32 %t1591770, 9
  %361 = sub i32 %360, %290
  %t7781206 = add i32 %361, %359
  %362 = sext i32 %t7781206 to i64
  %363 = mul nsw i32 %a363, 9
  %364 = sub i32 %363, %t1601773
  %365 = mul i32 %307, 10
  %366 = add nsw i32 %t1591770, 10
  %367 = sub i32 %366, %290
  %t7941249 = add i32 %367, %365
  %368 = sext i32 %t7941249 to i64
  %369 = mul nsw i32 %a363, 10
  %370 = sub i32 %369, %t1601773
  %371 = mul i32 %307, 11
  %372 = add nsw i32 %t1591770, 11
  %373 = sub i32 %372, %290
  %t8101292 = add i32 %373, %371
  %374 = sext i32 %t8101292 to i64
  %375 = mul nsw i32 %a363, 11
  %376 = sub i32 %375, %t1601773
  %377 = mul i32 %307, 12
  %378 = add nsw i32 %t1591770, 12
  %379 = sub i32 %378, %290
  %t8261335 = add i32 %379, %377
  %380 = sext i32 %t8261335 to i64
  %381 = mul nsw i32 %a363, 12
  %382 = sub i32 %381, %t1601773
  %383 = mul i32 %307, 13
  %384 = add nsw i32 %t1591770, 13
  %385 = sub i32 %384, %290
  %t8421378 = add i32 %385, %383
  %386 = sext i32 %t8421378 to i64
  %387 = mul nsw i32 %a363, 13
  %388 = sub i32 %387, %t1601773
  %389 = mul i32 %307, 14
  %390 = add nsw i32 %t1591770, 14
  %391 = sub i32 %390, %290
  %t8581421 = add i32 %391, %389
  %392 = sext i32 %t8581421 to i64
  %393 = mul nsw i32 %a363, 14
  %394 = sub i32 %393, %t1601773
  %395 = mul i32 %307, 15
  %396 = add nsw i32 %t1591770, 15
  %397 = sub i32 %396, %290
  %t8741464 = add i32 %397, %395
  %398 = sext i32 %t8741464 to i64
  %399 = mul nsw i32 %a363, 15
  %400 = sub i32 %399, %t1601773
  %401 = shl i32 %307, 4
  %402 = add nsw i32 %t1591770, 16
  %403 = sub i32 %402, %290
  %t8901507 = add i32 %403, %401
  %404 = sext i32 %t8901507 to i64
  %405 = shl nsw i32 %a363, 4
  %406 = sub i32 %405, %t1601773
  %407 = mul i32 %307, 17
  %408 = add nsw i32 %t1591770, 17
  %409 = sub i32 %408, %290
  %t9061550 = add i32 %409, %407
  %410 = sext i32 %t9061550 to i64
  %411 = mul nsw i32 %a363, 17
  %412 = sub i32 %411, %t1601773
  %413 = mul i32 %307, 18
  %414 = add nsw i32 %t1591770, 18
  %415 = sub i32 %414, %290
  %t9221593 = add i32 %415, %413
  %416 = sext i32 %t9221593 to i64
  %417 = mul nsw i32 %a363, 18
  %418 = sub i32 %417, %t1601773
  %419 = mul i32 %307, 19
  %420 = add nsw i32 %t1591770, 19
  %421 = sub i32 %420, %290
  %t9381636 = add i32 %421, %419
  %422 = sext i32 %t9381636 to i64
  %423 = mul nsw i32 %a363, 19
  %424 = sub i32 %423, %t1601773
  %425 = mul i32 %307, 20
  %426 = add nsw i32 %t1591770, 20
  %427 = sub i32 %426, %290
  %t9541679 = add i32 %427, %425
  %428 = sext i32 %t9541679 to i64
  %429 = mul nsw i32 %a363, 20
  %430 = sub i32 %429, %t1601773
  %431 = mul i32 %307, 21
  %432 = add nsw i32 %t1591770, 21
  %433 = sub i32 %432, %290
  %t9701722 = add i32 %433, %431
  %434 = sext i32 %t9701722 to i64
  %435 = mul nsw i32 %a363, 21
  %436 = sub i32 %435, %t1601773
  %437 = mul i32 %307, 22
  %438 = add nsw i32 %t1591770, 22
  %439 = sub i32 %438, %290
  %t9861765 = add i32 %439, %437
  %440 = sext i32 %t9861765 to i64
  %441 = mul nsw i32 %a363, 22
  %442 = sub i32 %441, %t1601773
  %443 = mul i32 %307, 23
  %444 = add nsw i32 %t1591770, 23
  %445 = sub i32 %444, %290
  %t10021808 = add i32 %445, %443
  %446 = sext i32 %t10021808 to i64
  %447 = mul nsw i32 %a363, 23
  %448 = sub i32 %447, %t1601773
  %449 = mul i32 %307, 24
  %450 = add nsw i32 %t1591770, 24
  %451 = sub i32 %450, %290
  %t10181851 = add i32 %451, %449
  %452 = sext i32 %t10181851 to i64
  %453 = mul nsw i32 %a363, 24
  %454 = sub i32 %453, %t1601773
  %455 = mul i32 %307, 25
  %456 = add nsw i32 %t1591770, 25
  %457 = sub i32 %456, %290
  %t10341894 = add i32 %457, %455
  %458 = sext i32 %t10341894 to i64
  %459 = mul nsw i32 %a363, 25
  %460 = sub i32 %459, %t1601773
  %461 = mul i32 %307, 26
  %462 = add nsw i32 %t1591770, 26
  %463 = sub i32 %462, %290
  %t10501937 = add i32 %463, %461
  %464 = sext i32 %t10501937 to i64
  %465 = mul nsw i32 %a363, 26
  %466 = sub i32 %465, %t1601773
  %467 = mul i32 %307, 27
  %468 = add nsw i32 %t1591770, 27
  %469 = sub i32 %468, %290
  %t10661980 = add i32 %469, %467
  %470 = sext i32 %t10661980 to i64
  %471 = mul nsw i32 %a363, 27
  %472 = sub i32 %471, %t1601773
  %473 = mul i32 %307, 28
  %474 = add nsw i32 %t1591770, 28
  %475 = sub i32 %474, %290
  %t10822023 = add i32 %475, %473
  %476 = sext i32 %t10822023 to i64
  %477 = mul nsw i32 %a363, 28
  %478 = sub i32 %477, %t1601773
  %479 = mul i32 %307, 29
  %480 = add nsw i32 %t1591770, 29
  %481 = sub i32 %480, %290
  %t10982066 = add i32 %481, %479
  %482 = sext i32 %t10982066 to i64
  %483 = mul nsw i32 %a363, 29
  %484 = sub i32 %483, %t1601773
  %485 = mul i32 %307, 30
  %486 = add nsw i32 %t1591770, 30
  %487 = sub i32 %486, %290
  %t11142109 = add i32 %487, %485
  %488 = sext i32 %t11142109 to i64
  %489 = mul nsw i32 %a363, 30
  %490 = sub i32 %489, %t1601773
  %491 = mul i32 %307, 31
  %492 = add nsw i32 %t1591770, 31
  %493 = sub i32 %492, %290
  %t11302152 = add i32 %493, %491
  %494 = sext i32 %t11302152 to i64
  %495 = mul nsw i32 %a363, 31
  %496 = sub i32 %495, %t1601773
  %497 = shl i32 %307, 5
  %498 = add nsw i32 %t1591770, 32
  %499 = sub i32 %498, %290
  %t11462195 = add i32 %499, %497
  %500 = sext i32 %t11462195 to i64
  %501 = shl nsw i32 %a363, 5
  %502 = sub i32 %501, %t1601773
  %503 = mul i32 %307, 33
  %504 = add nsw i32 %t1591770, 33
  %505 = sub i32 %504, %290
  %t11622238 = add i32 %505, %503
  %506 = sext i32 %t11622238 to i64
  %507 = mul nsw i32 %a363, 33
  %508 = sub i32 %507, %t1601773
  %509 = sext i32 %b384 to i64
  %510 = zext i32 %t1598 to i64
  %511 = sext i32 %266 to i64
  %512 = zext i32 %t1623816 to i64
  %513 = sext i32 %203 to i64
  %514 = sext i32 %199 to i64
  %zext = zext i32 %t1636849 to i64
  %zext3242 = zext i32 %t1636849 to i64
  %zext3245 = zext i32 %t1636849 to i64
  %zext3248 = zext i32 %t1636849 to i64
  %zext3251 = zext i32 %t1636849 to i64
  %zext3254 = zext i32 %t1636849 to i64
  %zext3257 = zext i32 %t1636849 to i64
  %zext3260 = zext i32 %t1636849 to i64
  %zext3263 = zext i32 %t1636849 to i64
  %zext3266 = zext i32 %t1636849 to i64
  %zext3269 = zext i32 %t1636849 to i64
  %zext3272 = zext i32 %t1636849 to i64
  %zext3275 = zext i32 %t1636849 to i64
  %zext3278 = zext i32 %t1636849 to i64
  %zext3281 = zext i32 %t1636849 to i64
  %zext3284 = zext i32 %t1636849 to i64
  %zext3287 = zext i32 %t1636849 to i64
  %zext3290 = zext i32 %t1636849 to i64
  %zext3293 = zext i32 %t1636849 to i64
  %zext3296 = zext i32 %t1636849 to i64
  %zext3299 = zext i32 %t1636849 to i64
  %zext3302 = zext i32 %t1636849 to i64
  %zext3305 = zext i32 %t1636849 to i64
  %zext3308 = zext i32 %t1636849 to i64
  %zext3311 = zext i32 %t1636849 to i64
  %zext3314 = zext i32 %t1636849 to i64
  %zext3317 = zext i32 %t1636849 to i64
  %zext3320 = zext i32 %t1636849 to i64
  %zext3323 = zext i32 %t1636849 to i64
  %zext3326 = zext i32 %t1636849 to i64
  %zext3329 = zext i32 %t1636849 to i64
  %zext3332 = zext i32 %t1636849 to i64
  %zext3335 = zext i32 %t1636849 to i64
  %zext3338 = zext i32 %t1636849 to i64
  %515 = add nsw i64 %512, -1
  %xtraiter3497 = and i64 %512, 3
  %516 = icmp ult i64 %515, 3
  %unroll_iter3500 = and i64 %512, 4294967292
  %lcmp.mod3499.not = icmp eq i64 %xtraiter3497, 0
  br label %"for blur_y.s0.y.y778"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %517 = alloca i8*, i64 %68, align 32
  %518 = bitcast i8** %517 to i16*
  store i8** %517, i8*** %69, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %518, %then_bb ], [ %189, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %519 = icmp sgt i32 %a26, %11
  %a25 = select i1 %519, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 34
  %520 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %520, i32 %a25, i32 %b27
  %521 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %521, i32 %a25, i32 %b30
  %522 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %522, i32 %a27, i32 %b27
  %a31 = sub i32 %70, %blur_y.s0.y.yi.base.s
  %523 = icmp sgt i32 %a31, 0
  br i1 %523, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1607 = add nsw i32 %71, %blur_y.s0.y.yi.base.s
  %524 = icmp slt i32 %a31, 34
  %a30 = select i1 %524, i32 %a31, i32 34
  %525 = sext i32 %t1607 to i64
  %526 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %527 = add nsw i64 %indvars.iv, %525
  %528 = icmp slt i64 %527, %174
  %529 = trunc i64 %527 to i32
  %a33 = select i1 %528, i32 %529, i32 %b36
  %530 = mul nsw i64 %indvars.iv, %81
  %531 = sub nsw i64 %530, %82
  %532 = icmp sgt i32 %a33, 0
  %533 = select i1 %532, i32 %a33, i32 0
  %534 = mul nsw i32 %533, %13
  %t1609 = sub nsw i32 %534, %9
  %535 = insertelement <32 x i32> undef, i32 %t1609, i32 0
  %536 = shufflevector <32 x i32> %535, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %537 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %537, i32 %a40, i32 %a26
  %538 = icmp sgt i32 %b27, %a39
  %539 = select i1 %538, i32 %a39, i32 %b27
  %t1611 = sub nsw i32 %539, %read_input.s0.y.prologue
  %540 = icmp sgt i32 %t1611, 0
  br i1 %540, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1614 = sub i32 %read_input.s0.y.prologue, %11
  %541 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %80, %541
  %542 = icmp slt i64 %a47, 34
  %a46 = select i1 %542, i64 %a47, i64 34
  %543 = icmp sgt i64 %a46, 0
  %544 = select i1 %543, i64 %a46, i64 0
  %545 = sext i32 %t1614 to i64
  %546 = zext i32 %t1611 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %745, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %547 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %547, %t1606
  %548 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %548, i32 %a35, i32 %b37
  %549 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %550 = insertelement <32 x i32> undef, i32 %549, i32 0
  %551 = shufflevector <32 x i32> %550, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %551, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %552 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %553 = icmp sgt <8 x i32> %74, %552
  %554 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %555 = icmp sgt <8 x i32> %74, %554
  %556 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %557 = icmp sgt <8 x i32> %74, %556
  %558 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %559 = icmp sgt <8 x i32> %74, %558
  %560 = select <8 x i1> %553, <8 x i32> %552, <8 x i32> %74
  %561 = select <8 x i1> %555, <8 x i32> %554, <8 x i32> %74
  %562 = select <8 x i1> %557, <8 x i32> %556, <8 x i32> %74
  %563 = select <8 x i1> %559, <8 x i32> %558, <8 x i32> %74
  %564 = icmp sgt <8 x i32> %560, %76
  %565 = icmp sgt <8 x i32> %561, %76
  %566 = icmp sgt <8 x i32> %562, %76
  %567 = icmp sgt <8 x i32> %563, %76
  %568 = select <8 x i1> %564, <8 x i32> %560, <8 x i32> %76
  %569 = select <8 x i1> %565, <8 x i32> %561, <8 x i32> %76
  %570 = select <8 x i1> %566, <8 x i32> %562, <8 x i32> %76
  %571 = select <8 x i1> %567, <8 x i32> %563, <8 x i32> %76
  %572 = shufflevector <8 x i32> %568, <8 x i32> %569, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %573 = shufflevector <8 x i32> %570, <8 x i32> %571, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %574 = shufflevector <16 x i32> %572, <16 x i32> %573, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %575 = add nsw <32 x i32> %574, %536
  %576 = extractelement <32 x i32> %575, i32 0
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i16, i16* %63, i64 %577
  %579 = load i16, i16* %578, align 2, !tbaa !393
  %580 = insertelement <32 x i16> undef, i16 %579, i32 0
  %581 = extractelement <32 x i32> %575, i32 1
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds i16, i16* %63, i64 %582
  %584 = load i16, i16* %583, align 2, !tbaa !393
  %585 = insertelement <32 x i16> %580, i16 %584, i32 1
  %586 = extractelement <32 x i32> %575, i32 2
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds i16, i16* %63, i64 %587
  %589 = load i16, i16* %588, align 2, !tbaa !393
  %590 = insertelement <32 x i16> %585, i16 %589, i32 2
  %591 = extractelement <32 x i32> %575, i32 3
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds i16, i16* %63, i64 %592
  %594 = load i16, i16* %593, align 2, !tbaa !393
  %595 = insertelement <32 x i16> %590, i16 %594, i32 3
  %596 = extractelement <32 x i32> %575, i32 4
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds i16, i16* %63, i64 %597
  %599 = load i16, i16* %598, align 2, !tbaa !393
  %600 = insertelement <32 x i16> %595, i16 %599, i32 4
  %601 = extractelement <32 x i32> %575, i32 5
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds i16, i16* %63, i64 %602
  %604 = load i16, i16* %603, align 2, !tbaa !393
  %605 = insertelement <32 x i16> %600, i16 %604, i32 5
  %606 = extractelement <32 x i32> %575, i32 6
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %63, i64 %607
  %609 = load i16, i16* %608, align 2, !tbaa !393
  %610 = insertelement <32 x i16> %605, i16 %609, i32 6
  %611 = extractelement <32 x i32> %575, i32 7
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds i16, i16* %63, i64 %612
  %614 = load i16, i16* %613, align 2, !tbaa !393
  %615 = insertelement <32 x i16> %610, i16 %614, i32 7
  %616 = extractelement <32 x i32> %575, i32 8
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i16, i16* %63, i64 %617
  %619 = load i16, i16* %618, align 2, !tbaa !393
  %620 = insertelement <32 x i16> %615, i16 %619, i32 8
  %621 = extractelement <32 x i32> %575, i32 9
  %622 = sext i32 %621 to i64
  %623 = getelementptr inbounds i16, i16* %63, i64 %622
  %624 = load i16, i16* %623, align 2, !tbaa !393
  %625 = insertelement <32 x i16> %620, i16 %624, i32 9
  %626 = extractelement <32 x i32> %575, i32 10
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds i16, i16* %63, i64 %627
  %629 = load i16, i16* %628, align 2, !tbaa !393
  %630 = insertelement <32 x i16> %625, i16 %629, i32 10
  %631 = extractelement <32 x i32> %575, i32 11
  %632 = sext i32 %631 to i64
  %633 = getelementptr inbounds i16, i16* %63, i64 %632
  %634 = load i16, i16* %633, align 2, !tbaa !393
  %635 = insertelement <32 x i16> %630, i16 %634, i32 11
  %636 = extractelement <32 x i32> %575, i32 12
  %637 = sext i32 %636 to i64
  %638 = getelementptr inbounds i16, i16* %63, i64 %637
  %639 = load i16, i16* %638, align 2, !tbaa !393
  %640 = insertelement <32 x i16> %635, i16 %639, i32 12
  %641 = extractelement <32 x i32> %575, i32 13
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds i16, i16* %63, i64 %642
  %644 = load i16, i16* %643, align 2, !tbaa !393
  %645 = insertelement <32 x i16> %640, i16 %644, i32 13
  %646 = extractelement <32 x i32> %575, i32 14
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i16, i16* %63, i64 %647
  %649 = load i16, i16* %648, align 2, !tbaa !393
  %650 = insertelement <32 x i16> %645, i16 %649, i32 14
  %651 = extractelement <32 x i32> %575, i32 15
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds i16, i16* %63, i64 %652
  %654 = load i16, i16* %653, align 2, !tbaa !393
  %655 = insertelement <32 x i16> %650, i16 %654, i32 15
  %656 = extractelement <32 x i32> %575, i32 16
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds i16, i16* %63, i64 %657
  %659 = load i16, i16* %658, align 2, !tbaa !393
  %660 = insertelement <32 x i16> %655, i16 %659, i32 16
  %661 = extractelement <32 x i32> %575, i32 17
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds i16, i16* %63, i64 %662
  %664 = load i16, i16* %663, align 2, !tbaa !393
  %665 = insertelement <32 x i16> %660, i16 %664, i32 17
  %666 = extractelement <32 x i32> %575, i32 18
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds i16, i16* %63, i64 %667
  %669 = load i16, i16* %668, align 2, !tbaa !393
  %670 = insertelement <32 x i16> %665, i16 %669, i32 18
  %671 = extractelement <32 x i32> %575, i32 19
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds i16, i16* %63, i64 %672
  %674 = load i16, i16* %673, align 2, !tbaa !393
  %675 = insertelement <32 x i16> %670, i16 %674, i32 19
  %676 = extractelement <32 x i32> %575, i32 20
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds i16, i16* %63, i64 %677
  %679 = load i16, i16* %678, align 2, !tbaa !393
  %680 = insertelement <32 x i16> %675, i16 %679, i32 20
  %681 = extractelement <32 x i32> %575, i32 21
  %682 = sext i32 %681 to i64
  %683 = getelementptr inbounds i16, i16* %63, i64 %682
  %684 = load i16, i16* %683, align 2, !tbaa !393
  %685 = insertelement <32 x i16> %680, i16 %684, i32 21
  %686 = extractelement <32 x i32> %575, i32 22
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds i16, i16* %63, i64 %687
  %689 = load i16, i16* %688, align 2, !tbaa !393
  %690 = insertelement <32 x i16> %685, i16 %689, i32 22
  %691 = extractelement <32 x i32> %575, i32 23
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i16, i16* %63, i64 %692
  %694 = load i16, i16* %693, align 2, !tbaa !393
  %695 = insertelement <32 x i16> %690, i16 %694, i32 23
  %696 = extractelement <32 x i32> %575, i32 24
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds i16, i16* %63, i64 %697
  %699 = load i16, i16* %698, align 2, !tbaa !393
  %700 = insertelement <32 x i16> %695, i16 %699, i32 24
  %701 = extractelement <32 x i32> %575, i32 25
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds i16, i16* %63, i64 %702
  %704 = load i16, i16* %703, align 2, !tbaa !393
  %705 = insertelement <32 x i16> %700, i16 %704, i32 25
  %706 = extractelement <32 x i32> %575, i32 26
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds i16, i16* %63, i64 %707
  %709 = load i16, i16* %708, align 2, !tbaa !393
  %710 = insertelement <32 x i16> %705, i16 %709, i32 26
  %711 = extractelement <32 x i32> %575, i32 27
  %712 = sext i32 %711 to i64
  %713 = getelementptr inbounds i16, i16* %63, i64 %712
  %714 = load i16, i16* %713, align 2, !tbaa !393
  %715 = insertelement <32 x i16> %710, i16 %714, i32 27
  %716 = extractelement <32 x i32> %575, i32 28
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds i16, i16* %63, i64 %717
  %719 = load i16, i16* %718, align 2, !tbaa !393
  %720 = insertelement <32 x i16> %715, i16 %719, i32 28
  %721 = extractelement <32 x i32> %575, i32 29
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds i16, i16* %63, i64 %722
  %724 = load i16, i16* %723, align 2, !tbaa !393
  %725 = insertelement <32 x i16> %720, i16 %724, i32 29
  %726 = extractelement <32 x i32> %575, i32 30
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds i16, i16* %63, i64 %727
  %729 = load i16, i16* %728, align 2, !tbaa !393
  %730 = insertelement <32 x i16> %725, i16 %729, i32 30
  %731 = extractelement <32 x i32> %575, i32 31
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds i16, i16* %63, i64 %732
  %734 = load i16, i16* %733, align 2, !tbaa !393
  %735 = insertelement <32 x i16> %730, i16 %734, i32 31
  %736 = shufflevector <32 x i16> %735, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %737 = sext i32 %read_input.s0.x.v2.base.s to i64
  %738 = add nsw i64 %531, %737
  %739 = getelementptr inbounds i16, i16* %read_input, i64 %738
  %740 = getelementptr inbounds i16, i16* %739, i64 -32
  %741 = bitcast i16* %740 to <16 x i16>*
  store <16 x i16> %736, <16 x i16>* %741, align 2, !tbaa !396
  %742 = shufflevector <32 x i16> %735, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %743 = getelementptr inbounds i16, i16* %739, i64 -16
  %744 = bitcast i16* %743 to <16 x i16>*
  store <16 x i16> %742, <16 x i16>* %744, align 2, !tbaa !396
  %745 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2659 = icmp eq i32 %745, %20
  br i1 %.not2659, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2658 = icmp eq i64 %indvars.iv.next, %526
  br i1 %.not2658, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3120 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3121, %"end for read_input.s0.x.x.rebased10" ]
  %746 = add nsw i64 %indvars.iv3120, %545
  %747 = mul nsw i64 %746, %178
  %748 = sub nsw i64 %747, %179
  br i1 %77, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %749 = trunc i64 %748 to i32
  %750 = insertelement <32 x i32> undef, i32 %749, i32 0
  %751 = shufflevector <32 x i32> %750, <32 x i32> undef, <32 x i32> zeroinitializer
  %752 = add nuw nsw i64 %544, %indvars.iv3120
  %753 = mul nsw i64 %752, %81
  %754 = sub i64 %753, %82
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %85
  %755 = icmp slt i32 %a63, 0
  %a62 = select i1 %755, i32 %a63, i32 0
  %756 = icmp sgt i32 %a62, -34
  %t1631 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %756, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %757 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %87, %757
  %758 = icmp slt i64 %a70, 34
  %a69 = select i1 %758, i64 %a70, i64 34
  %759 = icmp sgt i64 %a69, 0
  %760 = select i1 %759, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 33
  %761 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %960, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %762 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %762, %t1606
  %763 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %763, i32 %a43, i32 %b37
  %764 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %765 = insertelement <32 x i32> undef, i32 %764, i32 0
  %766 = shufflevector <32 x i32> %765, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %766, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %767 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %768 = icmp sgt <8 x i32> %74, %767
  %769 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %770 = icmp sgt <8 x i32> %74, %769
  %771 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %772 = icmp sgt <8 x i32> %74, %771
  %773 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %774 = icmp sgt <8 x i32> %74, %773
  %775 = select <8 x i1> %768, <8 x i32> %767, <8 x i32> %74
  %776 = select <8 x i1> %770, <8 x i32> %769, <8 x i32> %74
  %777 = select <8 x i1> %772, <8 x i32> %771, <8 x i32> %74
  %778 = select <8 x i1> %774, <8 x i32> %773, <8 x i32> %74
  %779 = icmp sgt <8 x i32> %775, %76
  %780 = icmp sgt <8 x i32> %776, %76
  %781 = icmp sgt <8 x i32> %777, %76
  %782 = icmp sgt <8 x i32> %778, %76
  %783 = select <8 x i1> %779, <8 x i32> %775, <8 x i32> %76
  %784 = select <8 x i1> %780, <8 x i32> %776, <8 x i32> %76
  %785 = select <8 x i1> %781, <8 x i32> %777, <8 x i32> %76
  %786 = select <8 x i1> %782, <8 x i32> %778, <8 x i32> %76
  %787 = shufflevector <8 x i32> %783, <8 x i32> %784, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %788 = shufflevector <8 x i32> %785, <8 x i32> %786, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %789 = shufflevector <16 x i32> %787, <16 x i32> %788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %790 = add nsw <32 x i32> %789, %751
  %791 = extractelement <32 x i32> %790, i32 0
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds i16, i16* %63, i64 %792
  %794 = load i16, i16* %793, align 2, !tbaa !393
  %795 = insertelement <32 x i16> undef, i16 %794, i32 0
  %796 = extractelement <32 x i32> %790, i32 1
  %797 = sext i32 %796 to i64
  %798 = getelementptr inbounds i16, i16* %63, i64 %797
  %799 = load i16, i16* %798, align 2, !tbaa !393
  %800 = insertelement <32 x i16> %795, i16 %799, i32 1
  %801 = extractelement <32 x i32> %790, i32 2
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i16, i16* %63, i64 %802
  %804 = load i16, i16* %803, align 2, !tbaa !393
  %805 = insertelement <32 x i16> %800, i16 %804, i32 2
  %806 = extractelement <32 x i32> %790, i32 3
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds i16, i16* %63, i64 %807
  %809 = load i16, i16* %808, align 2, !tbaa !393
  %810 = insertelement <32 x i16> %805, i16 %809, i32 3
  %811 = extractelement <32 x i32> %790, i32 4
  %812 = sext i32 %811 to i64
  %813 = getelementptr inbounds i16, i16* %63, i64 %812
  %814 = load i16, i16* %813, align 2, !tbaa !393
  %815 = insertelement <32 x i16> %810, i16 %814, i32 4
  %816 = extractelement <32 x i32> %790, i32 5
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds i16, i16* %63, i64 %817
  %819 = load i16, i16* %818, align 2, !tbaa !393
  %820 = insertelement <32 x i16> %815, i16 %819, i32 5
  %821 = extractelement <32 x i32> %790, i32 6
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds i16, i16* %63, i64 %822
  %824 = load i16, i16* %823, align 2, !tbaa !393
  %825 = insertelement <32 x i16> %820, i16 %824, i32 6
  %826 = extractelement <32 x i32> %790, i32 7
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i16, i16* %63, i64 %827
  %829 = load i16, i16* %828, align 2, !tbaa !393
  %830 = insertelement <32 x i16> %825, i16 %829, i32 7
  %831 = extractelement <32 x i32> %790, i32 8
  %832 = sext i32 %831 to i64
  %833 = getelementptr inbounds i16, i16* %63, i64 %832
  %834 = load i16, i16* %833, align 2, !tbaa !393
  %835 = insertelement <32 x i16> %830, i16 %834, i32 8
  %836 = extractelement <32 x i32> %790, i32 9
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds i16, i16* %63, i64 %837
  %839 = load i16, i16* %838, align 2, !tbaa !393
  %840 = insertelement <32 x i16> %835, i16 %839, i32 9
  %841 = extractelement <32 x i32> %790, i32 10
  %842 = sext i32 %841 to i64
  %843 = getelementptr inbounds i16, i16* %63, i64 %842
  %844 = load i16, i16* %843, align 2, !tbaa !393
  %845 = insertelement <32 x i16> %840, i16 %844, i32 10
  %846 = extractelement <32 x i32> %790, i32 11
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i16, i16* %63, i64 %847
  %849 = load i16, i16* %848, align 2, !tbaa !393
  %850 = insertelement <32 x i16> %845, i16 %849, i32 11
  %851 = extractelement <32 x i32> %790, i32 12
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds i16, i16* %63, i64 %852
  %854 = load i16, i16* %853, align 2, !tbaa !393
  %855 = insertelement <32 x i16> %850, i16 %854, i32 12
  %856 = extractelement <32 x i32> %790, i32 13
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds i16, i16* %63, i64 %857
  %859 = load i16, i16* %858, align 2, !tbaa !393
  %860 = insertelement <32 x i16> %855, i16 %859, i32 13
  %861 = extractelement <32 x i32> %790, i32 14
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i16, i16* %63, i64 %862
  %864 = load i16, i16* %863, align 2, !tbaa !393
  %865 = insertelement <32 x i16> %860, i16 %864, i32 14
  %866 = extractelement <32 x i32> %790, i32 15
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds i16, i16* %63, i64 %867
  %869 = load i16, i16* %868, align 2, !tbaa !393
  %870 = insertelement <32 x i16> %865, i16 %869, i32 15
  %871 = extractelement <32 x i32> %790, i32 16
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i16, i16* %63, i64 %872
  %874 = load i16, i16* %873, align 2, !tbaa !393
  %875 = insertelement <32 x i16> %870, i16 %874, i32 16
  %876 = extractelement <32 x i32> %790, i32 17
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds i16, i16* %63, i64 %877
  %879 = load i16, i16* %878, align 2, !tbaa !393
  %880 = insertelement <32 x i16> %875, i16 %879, i32 17
  %881 = extractelement <32 x i32> %790, i32 18
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i16, i16* %63, i64 %882
  %884 = load i16, i16* %883, align 2, !tbaa !393
  %885 = insertelement <32 x i16> %880, i16 %884, i32 18
  %886 = extractelement <32 x i32> %790, i32 19
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds i16, i16* %63, i64 %887
  %889 = load i16, i16* %888, align 2, !tbaa !393
  %890 = insertelement <32 x i16> %885, i16 %889, i32 19
  %891 = extractelement <32 x i32> %790, i32 20
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds i16, i16* %63, i64 %892
  %894 = load i16, i16* %893, align 2, !tbaa !393
  %895 = insertelement <32 x i16> %890, i16 %894, i32 20
  %896 = extractelement <32 x i32> %790, i32 21
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds i16, i16* %63, i64 %897
  %899 = load i16, i16* %898, align 2, !tbaa !393
  %900 = insertelement <32 x i16> %895, i16 %899, i32 21
  %901 = extractelement <32 x i32> %790, i32 22
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i16, i16* %63, i64 %902
  %904 = load i16, i16* %903, align 2, !tbaa !393
  %905 = insertelement <32 x i16> %900, i16 %904, i32 22
  %906 = extractelement <32 x i32> %790, i32 23
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds i16, i16* %63, i64 %907
  %909 = load i16, i16* %908, align 2, !tbaa !393
  %910 = insertelement <32 x i16> %905, i16 %909, i32 23
  %911 = extractelement <32 x i32> %790, i32 24
  %912 = sext i32 %911 to i64
  %913 = getelementptr inbounds i16, i16* %63, i64 %912
  %914 = load i16, i16* %913, align 2, !tbaa !393
  %915 = insertelement <32 x i16> %910, i16 %914, i32 24
  %916 = extractelement <32 x i32> %790, i32 25
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds i16, i16* %63, i64 %917
  %919 = load i16, i16* %918, align 2, !tbaa !393
  %920 = insertelement <32 x i16> %915, i16 %919, i32 25
  %921 = extractelement <32 x i32> %790, i32 26
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i16, i16* %63, i64 %922
  %924 = load i16, i16* %923, align 2, !tbaa !393
  %925 = insertelement <32 x i16> %920, i16 %924, i32 26
  %926 = extractelement <32 x i32> %790, i32 27
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds i16, i16* %63, i64 %927
  %929 = load i16, i16* %928, align 2, !tbaa !393
  %930 = insertelement <32 x i16> %925, i16 %929, i32 27
  %931 = extractelement <32 x i32> %790, i32 28
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i16, i16* %63, i64 %932
  %934 = load i16, i16* %933, align 2, !tbaa !393
  %935 = insertelement <32 x i16> %930, i16 %934, i32 28
  %936 = extractelement <32 x i32> %790, i32 29
  %937 = sext i32 %936 to i64
  %938 = getelementptr inbounds i16, i16* %63, i64 %937
  %939 = load i16, i16* %938, align 2, !tbaa !393
  %940 = insertelement <32 x i16> %935, i16 %939, i32 29
  %941 = extractelement <32 x i32> %790, i32 30
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds i16, i16* %63, i64 %942
  %944 = load i16, i16* %943, align 2, !tbaa !393
  %945 = insertelement <32 x i16> %940, i16 %944, i32 30
  %946 = extractelement <32 x i32> %790, i32 31
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i16, i16* %63, i64 %947
  %949 = load i16, i16* %948, align 2, !tbaa !393
  %950 = insertelement <32 x i16> %945, i16 %949, i32 31
  %951 = shufflevector <32 x i16> %950, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %952 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %953 = add nsw i64 %754, %952
  %954 = getelementptr inbounds i16, i16* %read_input, i64 %953
  %955 = getelementptr inbounds i16, i16* %954, i64 -32
  %956 = bitcast i16* %955 to <16 x i16>*
  store <16 x i16> %951, <16 x i16>* %956, align 2, !tbaa !396
  %957 = shufflevector <32 x i16> %950, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %958 = getelementptr inbounds i16, i16* %954, i64 -16
  %959 = bitcast i16* %958 to <16 x i16>*
  store <16 x i16> %957, <16 x i16>* %959, align 2, !tbaa !396
  %960 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2656 = icmp eq i32 %960, %b18
  br i1 %.not2656, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %83, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %961 = add nuw nsw i64 %544, %indvars.iv3120
  %962 = mul nsw i64 %961, %81
  %963 = sub i64 %962, %82
  br i1 %182, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3117 = phi i64 [ %indvars.iv.next3118.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %964 = add nuw nsw i64 %indvars.iv3117, %175
  %965 = shl nsw i64 %964, 5
  %966 = add nsw i64 %965, %176
  %967 = add nsw i64 %966, %748
  %968 = getelementptr inbounds i16, i16* %63, i64 %967
  %969 = getelementptr inbounds i16, i16* %968, i64 -32
  %970 = bitcast i16* %969 to <16 x i16>*
  %971 = load <16 x i16>, <16 x i16>* %970, align 2, !tbaa !393
  %972 = getelementptr inbounds i16, i16* %968, i64 -16
  %973 = bitcast i16* %972 to <16 x i16>*
  %974 = load <16 x i16>, <16 x i16>* %973, align 2, !tbaa !393
  %975 = add nsw i64 %963, %966
  %976 = getelementptr inbounds i16, i16* %read_input, i64 %975
  %977 = getelementptr inbounds i16, i16* %976, i64 -32
  %978 = bitcast i16* %977 to <16 x i16>*
  store <16 x i16> %971, <16 x i16>* %978, align 2, !tbaa !396
  %979 = getelementptr inbounds i16, i16* %976, i64 -16
  %980 = bitcast i16* %979 to <16 x i16>*
  store <16 x i16> %974, <16 x i16>* %980, align 2, !tbaa !396
  %indvars.iv.next3118 = or i64 %indvars.iv3117, 1
  %981 = add nuw nsw i64 %indvars.iv.next3118, %175
  %982 = shl nsw i64 %981, 5
  %983 = add nsw i64 %982, %176
  %984 = add nsw i64 %983, %748
  %985 = getelementptr inbounds i16, i16* %63, i64 %984
  %986 = getelementptr inbounds i16, i16* %985, i64 -32
  %987 = bitcast i16* %986 to <16 x i16>*
  %988 = load <16 x i16>, <16 x i16>* %987, align 2, !tbaa !393
  %989 = getelementptr inbounds i16, i16* %985, i64 -16
  %990 = bitcast i16* %989 to <16 x i16>*
  %991 = load <16 x i16>, <16 x i16>* %990, align 2, !tbaa !393
  %992 = add nsw i64 %963, %983
  %993 = getelementptr inbounds i16, i16* %read_input, i64 %992
  %994 = getelementptr inbounds i16, i16* %993, i64 -32
  %995 = bitcast i16* %994 to <16 x i16>*
  store <16 x i16> %988, <16 x i16>* %995, align 2, !tbaa !396
  %996 = getelementptr inbounds i16, i16* %993, i64 -16
  %997 = bitcast i16* %996 to <16 x i16>*
  store <16 x i16> %991, <16 x i16>* %997, align 2, !tbaa !396
  %indvars.iv.next3118.1 = or i64 %indvars.iv3117, 2
  %998 = add nuw nsw i64 %indvars.iv.next3118.1, %175
  %999 = shl nsw i64 %998, 5
  %1000 = add nsw i64 %999, %176
  %1001 = add nsw i64 %1000, %748
  %1002 = getelementptr inbounds i16, i16* %63, i64 %1001
  %1003 = getelementptr inbounds i16, i16* %1002, i64 -32
  %1004 = bitcast i16* %1003 to <16 x i16>*
  %1005 = load <16 x i16>, <16 x i16>* %1004, align 2, !tbaa !393
  %1006 = getelementptr inbounds i16, i16* %1002, i64 -16
  %1007 = bitcast i16* %1006 to <16 x i16>*
  %1008 = load <16 x i16>, <16 x i16>* %1007, align 2, !tbaa !393
  %1009 = add nsw i64 %963, %1000
  %1010 = getelementptr inbounds i16, i16* %read_input, i64 %1009
  %1011 = getelementptr inbounds i16, i16* %1010, i64 -32
  %1012 = bitcast i16* %1011 to <16 x i16>*
  store <16 x i16> %1005, <16 x i16>* %1012, align 2, !tbaa !396
  %1013 = getelementptr inbounds i16, i16* %1010, i64 -16
  %1014 = bitcast i16* %1013 to <16 x i16>*
  store <16 x i16> %1008, <16 x i16>* %1014, align 2, !tbaa !396
  %indvars.iv.next3118.2 = or i64 %indvars.iv3117, 3
  %1015 = add nuw nsw i64 %indvars.iv.next3118.2, %175
  %1016 = shl nsw i64 %1015, 5
  %1017 = add nsw i64 %1016, %176
  %1018 = add nsw i64 %1017, %748
  %1019 = getelementptr inbounds i16, i16* %63, i64 %1018
  %1020 = getelementptr inbounds i16, i16* %1019, i64 -32
  %1021 = bitcast i16* %1020 to <16 x i16>*
  %1022 = load <16 x i16>, <16 x i16>* %1021, align 2, !tbaa !393
  %1023 = getelementptr inbounds i16, i16* %1019, i64 -16
  %1024 = bitcast i16* %1023 to <16 x i16>*
  %1025 = load <16 x i16>, <16 x i16>* %1024, align 2, !tbaa !393
  %1026 = add nsw i64 %963, %1017
  %1027 = getelementptr inbounds i16, i16* %read_input, i64 %1026
  %1028 = getelementptr inbounds i16, i16* %1027, i64 -32
  %1029 = bitcast i16* %1028 to <16 x i16>*
  store <16 x i16> %1022, <16 x i16>* %1029, align 2, !tbaa !396
  %1030 = getelementptr inbounds i16, i16* %1027, i64 -16
  %1031 = bitcast i16* %1030 to <16 x i16>*
  store <16 x i16> %1025, <16 x i16>* %1031, align 2, !tbaa !396
  %indvars.iv.next3118.3 = add nuw nsw i64 %indvars.iv3117, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3117.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3118.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3117.epil = phi i64 [ %indvars.iv.next3118.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3117.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %1032 = add nuw nsw i64 %indvars.iv3117.epil, %175
  %1033 = shl nsw i64 %1032, 5
  %1034 = add nsw i64 %1033, %176
  %1035 = add nsw i64 %1034, %748
  %1036 = getelementptr inbounds i16, i16* %63, i64 %1035
  %1037 = getelementptr inbounds i16, i16* %1036, i64 -32
  %1038 = bitcast i16* %1037 to <16 x i16>*
  %1039 = load <16 x i16>, <16 x i16>* %1038, align 2, !tbaa !393
  %1040 = getelementptr inbounds i16, i16* %1036, i64 -16
  %1041 = bitcast i16* %1040 to <16 x i16>*
  %1042 = load <16 x i16>, <16 x i16>* %1041, align 2, !tbaa !393
  %1043 = add nsw i64 %963, %1034
  %1044 = getelementptr inbounds i16, i16* %read_input, i64 %1043
  %1045 = getelementptr inbounds i16, i16* %1044, i64 -32
  %1046 = bitcast i16* %1045 to <16 x i16>*
  store <16 x i16> %1039, <16 x i16>* %1046, align 2, !tbaa !396
  %1047 = getelementptr inbounds i16, i16* %1044, i64 -16
  %1048 = bitcast i16* %1047 to <16 x i16>*
  store <16 x i16> %1042, <16 x i16>* %1048, align 2, !tbaa !396
  %indvars.iv.next3118.epil = add nuw nsw i64 %indvars.iv3117.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %84, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %1049 = trunc i64 %748 to i32
  %1050 = insertelement <32 x i32> undef, i32 %1049, i32 0
  %1051 = shufflevector <32 x i32> %1050, <32 x i32> undef, <32 x i32> zeroinitializer
  %1052 = add nuw nsw i64 %544, %indvars.iv3120
  %1053 = mul nsw i64 %1052, %81
  %1054 = sub i64 %1053, %82
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1254, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %1055 = add nsw i32 %read_input.s0.x.x.rebased11, %t1580
  %1056 = shl nsw i32 %1055, 5
  %a54 = add nsw i32 %1056, %t1606
  %1057 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %1057, i32 %a54, i32 %b37
  %1058 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %1059 = insertelement <32 x i32> undef, i32 %1058, i32 0
  %1060 = shufflevector <32 x i32> %1059, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %1060, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1061 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1062 = icmp sgt <8 x i32> %74, %1061
  %1063 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1064 = icmp sgt <8 x i32> %74, %1063
  %1065 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1066 = icmp sgt <8 x i32> %74, %1065
  %1067 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1068 = icmp sgt <8 x i32> %74, %1067
  %1069 = select <8 x i1> %1062, <8 x i32> %1061, <8 x i32> %74
  %1070 = select <8 x i1> %1064, <8 x i32> %1063, <8 x i32> %74
  %1071 = select <8 x i1> %1066, <8 x i32> %1065, <8 x i32> %74
  %1072 = select <8 x i1> %1068, <8 x i32> %1067, <8 x i32> %74
  %1073 = icmp sgt <8 x i32> %1069, %76
  %1074 = icmp sgt <8 x i32> %1070, %76
  %1075 = icmp sgt <8 x i32> %1071, %76
  %1076 = icmp sgt <8 x i32> %1072, %76
  %1077 = select <8 x i1> %1073, <8 x i32> %1069, <8 x i32> %76
  %1078 = select <8 x i1> %1074, <8 x i32> %1070, <8 x i32> %76
  %1079 = select <8 x i1> %1075, <8 x i32> %1071, <8 x i32> %76
  %1080 = select <8 x i1> %1076, <8 x i32> %1072, <8 x i32> %76
  %1081 = shufflevector <8 x i32> %1077, <8 x i32> %1078, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1082 = shufflevector <8 x i32> %1079, <8 x i32> %1080, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1083 = shufflevector <16 x i32> %1081, <16 x i32> %1082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1084 = add nsw <32 x i32> %1083, %1051
  %1085 = extractelement <32 x i32> %1084, i32 0
  %1086 = sext i32 %1085 to i64
  %1087 = getelementptr inbounds i16, i16* %63, i64 %1086
  %1088 = load i16, i16* %1087, align 2, !tbaa !393
  %1089 = insertelement <32 x i16> undef, i16 %1088, i32 0
  %1090 = extractelement <32 x i32> %1084, i32 1
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds i16, i16* %63, i64 %1091
  %1093 = load i16, i16* %1092, align 2, !tbaa !393
  %1094 = insertelement <32 x i16> %1089, i16 %1093, i32 1
  %1095 = extractelement <32 x i32> %1084, i32 2
  %1096 = sext i32 %1095 to i64
  %1097 = getelementptr inbounds i16, i16* %63, i64 %1096
  %1098 = load i16, i16* %1097, align 2, !tbaa !393
  %1099 = insertelement <32 x i16> %1094, i16 %1098, i32 2
  %1100 = extractelement <32 x i32> %1084, i32 3
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i16, i16* %63, i64 %1101
  %1103 = load i16, i16* %1102, align 2, !tbaa !393
  %1104 = insertelement <32 x i16> %1099, i16 %1103, i32 3
  %1105 = extractelement <32 x i32> %1084, i32 4
  %1106 = sext i32 %1105 to i64
  %1107 = getelementptr inbounds i16, i16* %63, i64 %1106
  %1108 = load i16, i16* %1107, align 2, !tbaa !393
  %1109 = insertelement <32 x i16> %1104, i16 %1108, i32 4
  %1110 = extractelement <32 x i32> %1084, i32 5
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds i16, i16* %63, i64 %1111
  %1113 = load i16, i16* %1112, align 2, !tbaa !393
  %1114 = insertelement <32 x i16> %1109, i16 %1113, i32 5
  %1115 = extractelement <32 x i32> %1084, i32 6
  %1116 = sext i32 %1115 to i64
  %1117 = getelementptr inbounds i16, i16* %63, i64 %1116
  %1118 = load i16, i16* %1117, align 2, !tbaa !393
  %1119 = insertelement <32 x i16> %1114, i16 %1118, i32 6
  %1120 = extractelement <32 x i32> %1084, i32 7
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds i16, i16* %63, i64 %1121
  %1123 = load i16, i16* %1122, align 2, !tbaa !393
  %1124 = insertelement <32 x i16> %1119, i16 %1123, i32 7
  %1125 = extractelement <32 x i32> %1084, i32 8
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds i16, i16* %63, i64 %1126
  %1128 = load i16, i16* %1127, align 2, !tbaa !393
  %1129 = insertelement <32 x i16> %1124, i16 %1128, i32 8
  %1130 = extractelement <32 x i32> %1084, i32 9
  %1131 = sext i32 %1130 to i64
  %1132 = getelementptr inbounds i16, i16* %63, i64 %1131
  %1133 = load i16, i16* %1132, align 2, !tbaa !393
  %1134 = insertelement <32 x i16> %1129, i16 %1133, i32 9
  %1135 = extractelement <32 x i32> %1084, i32 10
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds i16, i16* %63, i64 %1136
  %1138 = load i16, i16* %1137, align 2, !tbaa !393
  %1139 = insertelement <32 x i16> %1134, i16 %1138, i32 10
  %1140 = extractelement <32 x i32> %1084, i32 11
  %1141 = sext i32 %1140 to i64
  %1142 = getelementptr inbounds i16, i16* %63, i64 %1141
  %1143 = load i16, i16* %1142, align 2, !tbaa !393
  %1144 = insertelement <32 x i16> %1139, i16 %1143, i32 11
  %1145 = extractelement <32 x i32> %1084, i32 12
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds i16, i16* %63, i64 %1146
  %1148 = load i16, i16* %1147, align 2, !tbaa !393
  %1149 = insertelement <32 x i16> %1144, i16 %1148, i32 12
  %1150 = extractelement <32 x i32> %1084, i32 13
  %1151 = sext i32 %1150 to i64
  %1152 = getelementptr inbounds i16, i16* %63, i64 %1151
  %1153 = load i16, i16* %1152, align 2, !tbaa !393
  %1154 = insertelement <32 x i16> %1149, i16 %1153, i32 13
  %1155 = extractelement <32 x i32> %1084, i32 14
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds i16, i16* %63, i64 %1156
  %1158 = load i16, i16* %1157, align 2, !tbaa !393
  %1159 = insertelement <32 x i16> %1154, i16 %1158, i32 14
  %1160 = extractelement <32 x i32> %1084, i32 15
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i16, i16* %63, i64 %1161
  %1163 = load i16, i16* %1162, align 2, !tbaa !393
  %1164 = insertelement <32 x i16> %1159, i16 %1163, i32 15
  %1165 = extractelement <32 x i32> %1084, i32 16
  %1166 = sext i32 %1165 to i64
  %1167 = getelementptr inbounds i16, i16* %63, i64 %1166
  %1168 = load i16, i16* %1167, align 2, !tbaa !393
  %1169 = insertelement <32 x i16> %1164, i16 %1168, i32 16
  %1170 = extractelement <32 x i32> %1084, i32 17
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds i16, i16* %63, i64 %1171
  %1173 = load i16, i16* %1172, align 2, !tbaa !393
  %1174 = insertelement <32 x i16> %1169, i16 %1173, i32 17
  %1175 = extractelement <32 x i32> %1084, i32 18
  %1176 = sext i32 %1175 to i64
  %1177 = getelementptr inbounds i16, i16* %63, i64 %1176
  %1178 = load i16, i16* %1177, align 2, !tbaa !393
  %1179 = insertelement <32 x i16> %1174, i16 %1178, i32 18
  %1180 = extractelement <32 x i32> %1084, i32 19
  %1181 = sext i32 %1180 to i64
  %1182 = getelementptr inbounds i16, i16* %63, i64 %1181
  %1183 = load i16, i16* %1182, align 2, !tbaa !393
  %1184 = insertelement <32 x i16> %1179, i16 %1183, i32 19
  %1185 = extractelement <32 x i32> %1084, i32 20
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds i16, i16* %63, i64 %1186
  %1188 = load i16, i16* %1187, align 2, !tbaa !393
  %1189 = insertelement <32 x i16> %1184, i16 %1188, i32 20
  %1190 = extractelement <32 x i32> %1084, i32 21
  %1191 = sext i32 %1190 to i64
  %1192 = getelementptr inbounds i16, i16* %63, i64 %1191
  %1193 = load i16, i16* %1192, align 2, !tbaa !393
  %1194 = insertelement <32 x i16> %1189, i16 %1193, i32 21
  %1195 = extractelement <32 x i32> %1084, i32 22
  %1196 = sext i32 %1195 to i64
  %1197 = getelementptr inbounds i16, i16* %63, i64 %1196
  %1198 = load i16, i16* %1197, align 2, !tbaa !393
  %1199 = insertelement <32 x i16> %1194, i16 %1198, i32 22
  %1200 = extractelement <32 x i32> %1084, i32 23
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds i16, i16* %63, i64 %1201
  %1203 = load i16, i16* %1202, align 2, !tbaa !393
  %1204 = insertelement <32 x i16> %1199, i16 %1203, i32 23
  %1205 = extractelement <32 x i32> %1084, i32 24
  %1206 = sext i32 %1205 to i64
  %1207 = getelementptr inbounds i16, i16* %63, i64 %1206
  %1208 = load i16, i16* %1207, align 2, !tbaa !393
  %1209 = insertelement <32 x i16> %1204, i16 %1208, i32 24
  %1210 = extractelement <32 x i32> %1084, i32 25
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds i16, i16* %63, i64 %1211
  %1213 = load i16, i16* %1212, align 2, !tbaa !393
  %1214 = insertelement <32 x i16> %1209, i16 %1213, i32 25
  %1215 = extractelement <32 x i32> %1084, i32 26
  %1216 = sext i32 %1215 to i64
  %1217 = getelementptr inbounds i16, i16* %63, i64 %1216
  %1218 = load i16, i16* %1217, align 2, !tbaa !393
  %1219 = insertelement <32 x i16> %1214, i16 %1218, i32 26
  %1220 = extractelement <32 x i32> %1084, i32 27
  %1221 = sext i32 %1220 to i64
  %1222 = getelementptr inbounds i16, i16* %63, i64 %1221
  %1223 = load i16, i16* %1222, align 2, !tbaa !393
  %1224 = insertelement <32 x i16> %1219, i16 %1223, i32 27
  %1225 = extractelement <32 x i32> %1084, i32 28
  %1226 = sext i32 %1225 to i64
  %1227 = getelementptr inbounds i16, i16* %63, i64 %1226
  %1228 = load i16, i16* %1227, align 2, !tbaa !393
  %1229 = insertelement <32 x i16> %1224, i16 %1228, i32 28
  %1230 = extractelement <32 x i32> %1084, i32 29
  %1231 = sext i32 %1230 to i64
  %1232 = getelementptr inbounds i16, i16* %63, i64 %1231
  %1233 = load i16, i16* %1232, align 2, !tbaa !393
  %1234 = insertelement <32 x i16> %1229, i16 %1233, i32 29
  %1235 = extractelement <32 x i32> %1084, i32 30
  %1236 = sext i32 %1235 to i64
  %1237 = getelementptr inbounds i16, i16* %63, i64 %1236
  %1238 = load i16, i16* %1237, align 2, !tbaa !393
  %1239 = insertelement <32 x i16> %1234, i16 %1238, i32 30
  %1240 = extractelement <32 x i32> %1084, i32 31
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds i16, i16* %63, i64 %1241
  %1243 = load i16, i16* %1242, align 2, !tbaa !393
  %1244 = insertelement <32 x i16> %1239, i16 %1243, i32 31
  %1245 = shufflevector <32 x i16> %1244, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1246 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1247 = add nsw i64 %1054, %1246
  %1248 = getelementptr inbounds i16, i16* %read_input, i64 %1247
  %1249 = getelementptr inbounds i16, i16* %1248, i64 -32
  %1250 = bitcast i16* %1249 to <16 x i16>*
  store <16 x i16> %1245, <16 x i16>* %1250, align 2, !tbaa !396
  %1251 = shufflevector <32 x i16> %1244, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1252 = getelementptr inbounds i16, i16* %1248, i64 -16
  %1253 = bitcast i16* %1252 to <16 x i16>*
  store <16 x i16> %1251, <16 x i16>* %1253, align 2, !tbaa !396
  %1254 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2654 = icmp eq i32 %1254, %t1617
  br i1 %.not2654, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3121 = add nuw nsw i64 %indvars.iv3120, 1
  %.not2653 = icmp eq i64 %indvars.iv.next3121, %546
  br i1 %.not2653, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3123 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3124, %"end for read_input.s0.x.x17" ]
  %1255 = trunc i64 %indvars.iv3123 to i32
  %a65 = add nsw i32 %t1631, %1255
  %1256 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1256, i32 %a65, i32 %b36
  %1257 = icmp sgt i32 %a64, 0
  %1258 = select i1 %1257, i32 %a64, i32 0
  %1259 = mul nsw i32 %1258, %13
  %t1635 = sub nsw i32 %1259, %9
  %1260 = insertelement <32 x i32> undef, i32 %t1635, i32 0
  %1261 = shufflevector <32 x i32> %1260, <32 x i32> undef, <32 x i32> zeroinitializer
  %1262 = add nuw nsw i64 %760, %indvars.iv3123
  %1263 = mul nsw i64 %1262, %81
  %1264 = sub i64 %1263, %82
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1265 = load i64, i64* %.fca.1.gep2278, align 8, !tbaa !387
  %cmp.i2708 = icmp ult i64 %1265, %91
  %1266 = load i8*, i8** %.fca.0.gep2277, align 8, !tbaa !389
  br i1 %cmp.i2708, label %if.then.i2711, label %pseudostack_alloc.exit2724, !prof !390

if.then.i2711:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2710 = icmp ne i8* %1266, null
  %1267 = load i64, i64* %.fca.2.gep2279, align 8
  %cmp2.i2713 = icmp ugt i64 %1267, 16384
  %or.cond2795 = and i1 %tobool1.not.i2710, %cmp2.i2713
  br i1 %or.cond2795, label %if.then3.i2715, label %if.end.i2719

if.then3.i2715:                                   ; preds = %if.then.i2711
  call void @halide_free(i8* null, i8* nonnull %1266) #16
  %.pre3339 = load i64, i64* %.fca.2.gep2279, align 8, !tbaa !391
  br label %if.end.i2719

if.end.i2719:                                     ; preds = %if.then3.i2715, %if.then.i2711
  %1268 = phi i64 [ %.pre3339, %if.then3.i2715 ], [ %1267, %if.then.i2711 ]
  %add.i2717 = add i64 %1268, %91
  store i64 %add.i2717, i64* %.fca.2.gep2279, align 8, !tbaa !391
  %cmp7.i2718 = icmp ugt i64 %add.i2717, 16384
  br i1 %cmp7.i2718, label %if.then8.i2721, label %if.end11.i2723

if.then8.i2721:                                   ; preds = %if.end.i2719
  %call.i2720 = call i8* @halide_malloc(i8* null, i64 %91) #16
  br label %if.end11.i2723

if.end11.i2723:                                   ; preds = %if.then8.i2721, %if.end.i2719
  %storemerge.i2722 = phi i8* [ %call.i2720, %if.then8.i2721 ], [ null, %if.end.i2719 ]
  store i8* %storemerge.i2722, i8** %.fca.0.gep2277, align 8, !tbaa !389
  store i64 %91, i64* %.fca.1.gep2278, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2724

pseudostack_alloc.exit2724:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2723
  %1269 = phi i8* [ %storemerge.i2722, %if.end11.i2723 ], [ %1266, %"end for read_input.s0.y.rebased14" ]
  %1270 = bitcast i8* %1269 to i16*
  %.not2580 = icmp eq i8* %1269, null
  br i1 %.not2580, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1469, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1271 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1271, %t1606
  %1272 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1272, i32 %a66, i32 %b37
  %1273 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1274 = insertelement <32 x i32> undef, i32 %1273, i32 0
  %1275 = shufflevector <32 x i32> %1274, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1275, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1276 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1277 = icmp sgt <8 x i32> %74, %1276
  %1278 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1279 = icmp sgt <8 x i32> %74, %1278
  %1280 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1281 = icmp sgt <8 x i32> %74, %1280
  %1282 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1283 = icmp sgt <8 x i32> %74, %1282
  %1284 = select <8 x i1> %1277, <8 x i32> %1276, <8 x i32> %74
  %1285 = select <8 x i1> %1279, <8 x i32> %1278, <8 x i32> %74
  %1286 = select <8 x i1> %1281, <8 x i32> %1280, <8 x i32> %74
  %1287 = select <8 x i1> %1283, <8 x i32> %1282, <8 x i32> %74
  %1288 = icmp sgt <8 x i32> %1284, %76
  %1289 = icmp sgt <8 x i32> %1285, %76
  %1290 = icmp sgt <8 x i32> %1286, %76
  %1291 = icmp sgt <8 x i32> %1287, %76
  %1292 = select <8 x i1> %1288, <8 x i32> %1284, <8 x i32> %76
  %1293 = select <8 x i1> %1289, <8 x i32> %1285, <8 x i32> %76
  %1294 = select <8 x i1> %1290, <8 x i32> %1286, <8 x i32> %76
  %1295 = select <8 x i1> %1291, <8 x i32> %1287, <8 x i32> %76
  %1296 = shufflevector <8 x i32> %1292, <8 x i32> %1293, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1297 = shufflevector <8 x i32> %1294, <8 x i32> %1295, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1298 = shufflevector <16 x i32> %1296, <16 x i32> %1297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1299 = add nsw <32 x i32> %1298, %1261
  %1300 = extractelement <32 x i32> %1299, i32 0
  %1301 = sext i32 %1300 to i64
  %1302 = getelementptr inbounds i16, i16* %63, i64 %1301
  %1303 = load i16, i16* %1302, align 2, !tbaa !393
  %1304 = insertelement <32 x i16> undef, i16 %1303, i32 0
  %1305 = extractelement <32 x i32> %1299, i32 1
  %1306 = sext i32 %1305 to i64
  %1307 = getelementptr inbounds i16, i16* %63, i64 %1306
  %1308 = load i16, i16* %1307, align 2, !tbaa !393
  %1309 = insertelement <32 x i16> %1304, i16 %1308, i32 1
  %1310 = extractelement <32 x i32> %1299, i32 2
  %1311 = sext i32 %1310 to i64
  %1312 = getelementptr inbounds i16, i16* %63, i64 %1311
  %1313 = load i16, i16* %1312, align 2, !tbaa !393
  %1314 = insertelement <32 x i16> %1309, i16 %1313, i32 2
  %1315 = extractelement <32 x i32> %1299, i32 3
  %1316 = sext i32 %1315 to i64
  %1317 = getelementptr inbounds i16, i16* %63, i64 %1316
  %1318 = load i16, i16* %1317, align 2, !tbaa !393
  %1319 = insertelement <32 x i16> %1314, i16 %1318, i32 3
  %1320 = extractelement <32 x i32> %1299, i32 4
  %1321 = sext i32 %1320 to i64
  %1322 = getelementptr inbounds i16, i16* %63, i64 %1321
  %1323 = load i16, i16* %1322, align 2, !tbaa !393
  %1324 = insertelement <32 x i16> %1319, i16 %1323, i32 4
  %1325 = extractelement <32 x i32> %1299, i32 5
  %1326 = sext i32 %1325 to i64
  %1327 = getelementptr inbounds i16, i16* %63, i64 %1326
  %1328 = load i16, i16* %1327, align 2, !tbaa !393
  %1329 = insertelement <32 x i16> %1324, i16 %1328, i32 5
  %1330 = extractelement <32 x i32> %1299, i32 6
  %1331 = sext i32 %1330 to i64
  %1332 = getelementptr inbounds i16, i16* %63, i64 %1331
  %1333 = load i16, i16* %1332, align 2, !tbaa !393
  %1334 = insertelement <32 x i16> %1329, i16 %1333, i32 6
  %1335 = extractelement <32 x i32> %1299, i32 7
  %1336 = sext i32 %1335 to i64
  %1337 = getelementptr inbounds i16, i16* %63, i64 %1336
  %1338 = load i16, i16* %1337, align 2, !tbaa !393
  %1339 = insertelement <32 x i16> %1334, i16 %1338, i32 7
  %1340 = extractelement <32 x i32> %1299, i32 8
  %1341 = sext i32 %1340 to i64
  %1342 = getelementptr inbounds i16, i16* %63, i64 %1341
  %1343 = load i16, i16* %1342, align 2, !tbaa !393
  %1344 = insertelement <32 x i16> %1339, i16 %1343, i32 8
  %1345 = extractelement <32 x i32> %1299, i32 9
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds i16, i16* %63, i64 %1346
  %1348 = load i16, i16* %1347, align 2, !tbaa !393
  %1349 = insertelement <32 x i16> %1344, i16 %1348, i32 9
  %1350 = extractelement <32 x i32> %1299, i32 10
  %1351 = sext i32 %1350 to i64
  %1352 = getelementptr inbounds i16, i16* %63, i64 %1351
  %1353 = load i16, i16* %1352, align 2, !tbaa !393
  %1354 = insertelement <32 x i16> %1349, i16 %1353, i32 10
  %1355 = extractelement <32 x i32> %1299, i32 11
  %1356 = sext i32 %1355 to i64
  %1357 = getelementptr inbounds i16, i16* %63, i64 %1356
  %1358 = load i16, i16* %1357, align 2, !tbaa !393
  %1359 = insertelement <32 x i16> %1354, i16 %1358, i32 11
  %1360 = extractelement <32 x i32> %1299, i32 12
  %1361 = sext i32 %1360 to i64
  %1362 = getelementptr inbounds i16, i16* %63, i64 %1361
  %1363 = load i16, i16* %1362, align 2, !tbaa !393
  %1364 = insertelement <32 x i16> %1359, i16 %1363, i32 12
  %1365 = extractelement <32 x i32> %1299, i32 13
  %1366 = sext i32 %1365 to i64
  %1367 = getelementptr inbounds i16, i16* %63, i64 %1366
  %1368 = load i16, i16* %1367, align 2, !tbaa !393
  %1369 = insertelement <32 x i16> %1364, i16 %1368, i32 13
  %1370 = extractelement <32 x i32> %1299, i32 14
  %1371 = sext i32 %1370 to i64
  %1372 = getelementptr inbounds i16, i16* %63, i64 %1371
  %1373 = load i16, i16* %1372, align 2, !tbaa !393
  %1374 = insertelement <32 x i16> %1369, i16 %1373, i32 14
  %1375 = extractelement <32 x i32> %1299, i32 15
  %1376 = sext i32 %1375 to i64
  %1377 = getelementptr inbounds i16, i16* %63, i64 %1376
  %1378 = load i16, i16* %1377, align 2, !tbaa !393
  %1379 = insertelement <32 x i16> %1374, i16 %1378, i32 15
  %1380 = extractelement <32 x i32> %1299, i32 16
  %1381 = sext i32 %1380 to i64
  %1382 = getelementptr inbounds i16, i16* %63, i64 %1381
  %1383 = load i16, i16* %1382, align 2, !tbaa !393
  %1384 = insertelement <32 x i16> %1379, i16 %1383, i32 16
  %1385 = extractelement <32 x i32> %1299, i32 17
  %1386 = sext i32 %1385 to i64
  %1387 = getelementptr inbounds i16, i16* %63, i64 %1386
  %1388 = load i16, i16* %1387, align 2, !tbaa !393
  %1389 = insertelement <32 x i16> %1384, i16 %1388, i32 17
  %1390 = extractelement <32 x i32> %1299, i32 18
  %1391 = sext i32 %1390 to i64
  %1392 = getelementptr inbounds i16, i16* %63, i64 %1391
  %1393 = load i16, i16* %1392, align 2, !tbaa !393
  %1394 = insertelement <32 x i16> %1389, i16 %1393, i32 18
  %1395 = extractelement <32 x i32> %1299, i32 19
  %1396 = sext i32 %1395 to i64
  %1397 = getelementptr inbounds i16, i16* %63, i64 %1396
  %1398 = load i16, i16* %1397, align 2, !tbaa !393
  %1399 = insertelement <32 x i16> %1394, i16 %1398, i32 19
  %1400 = extractelement <32 x i32> %1299, i32 20
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds i16, i16* %63, i64 %1401
  %1403 = load i16, i16* %1402, align 2, !tbaa !393
  %1404 = insertelement <32 x i16> %1399, i16 %1403, i32 20
  %1405 = extractelement <32 x i32> %1299, i32 21
  %1406 = sext i32 %1405 to i64
  %1407 = getelementptr inbounds i16, i16* %63, i64 %1406
  %1408 = load i16, i16* %1407, align 2, !tbaa !393
  %1409 = insertelement <32 x i16> %1404, i16 %1408, i32 21
  %1410 = extractelement <32 x i32> %1299, i32 22
  %1411 = sext i32 %1410 to i64
  %1412 = getelementptr inbounds i16, i16* %63, i64 %1411
  %1413 = load i16, i16* %1412, align 2, !tbaa !393
  %1414 = insertelement <32 x i16> %1409, i16 %1413, i32 22
  %1415 = extractelement <32 x i32> %1299, i32 23
  %1416 = sext i32 %1415 to i64
  %1417 = getelementptr inbounds i16, i16* %63, i64 %1416
  %1418 = load i16, i16* %1417, align 2, !tbaa !393
  %1419 = insertelement <32 x i16> %1414, i16 %1418, i32 23
  %1420 = extractelement <32 x i32> %1299, i32 24
  %1421 = sext i32 %1420 to i64
  %1422 = getelementptr inbounds i16, i16* %63, i64 %1421
  %1423 = load i16, i16* %1422, align 2, !tbaa !393
  %1424 = insertelement <32 x i16> %1419, i16 %1423, i32 24
  %1425 = extractelement <32 x i32> %1299, i32 25
  %1426 = sext i32 %1425 to i64
  %1427 = getelementptr inbounds i16, i16* %63, i64 %1426
  %1428 = load i16, i16* %1427, align 2, !tbaa !393
  %1429 = insertelement <32 x i16> %1424, i16 %1428, i32 25
  %1430 = extractelement <32 x i32> %1299, i32 26
  %1431 = sext i32 %1430 to i64
  %1432 = getelementptr inbounds i16, i16* %63, i64 %1431
  %1433 = load i16, i16* %1432, align 2, !tbaa !393
  %1434 = insertelement <32 x i16> %1429, i16 %1433, i32 26
  %1435 = extractelement <32 x i32> %1299, i32 27
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds i16, i16* %63, i64 %1436
  %1438 = load i16, i16* %1437, align 2, !tbaa !393
  %1439 = insertelement <32 x i16> %1434, i16 %1438, i32 27
  %1440 = extractelement <32 x i32> %1299, i32 28
  %1441 = sext i32 %1440 to i64
  %1442 = getelementptr inbounds i16, i16* %63, i64 %1441
  %1443 = load i16, i16* %1442, align 2, !tbaa !393
  %1444 = insertelement <32 x i16> %1439, i16 %1443, i32 28
  %1445 = extractelement <32 x i32> %1299, i32 29
  %1446 = sext i32 %1445 to i64
  %1447 = getelementptr inbounds i16, i16* %63, i64 %1446
  %1448 = load i16, i16* %1447, align 2, !tbaa !393
  %1449 = insertelement <32 x i16> %1444, i16 %1448, i32 29
  %1450 = extractelement <32 x i32> %1299, i32 30
  %1451 = sext i32 %1450 to i64
  %1452 = getelementptr inbounds i16, i16* %63, i64 %1451
  %1453 = load i16, i16* %1452, align 2, !tbaa !393
  %1454 = insertelement <32 x i16> %1449, i16 %1453, i32 30
  %1455 = extractelement <32 x i32> %1299, i32 31
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds i16, i16* %63, i64 %1456
  %1458 = load i16, i16* %1457, align 2, !tbaa !393
  %1459 = insertelement <32 x i16> %1454, i16 %1458, i32 31
  %1460 = shufflevector <32 x i16> %1459, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1461 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1462 = add nsw i64 %1264, %1461
  %1463 = getelementptr inbounds i16, i16* %read_input, i64 %1462
  %1464 = getelementptr inbounds i16, i16* %1463, i64 -32
  %1465 = bitcast i16* %1464 to <16 x i16>*
  store <16 x i16> %1460, <16 x i16>* %1465, align 2, !tbaa !396
  %1466 = shufflevector <32 x i16> %1459, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1467 = getelementptr inbounds i16, i16* %1463, i64 -16
  %1468 = bitcast i16* %1467 to <16 x i16>*
  store <16 x i16> %1466, <16 x i16>* %1468, align 2, !tbaa !396
  %1469 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2652 = icmp eq i32 %1469, %20
  br i1 %.not2652, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3124 = add nuw nsw i64 %indvars.iv3123, 1
  %.not2651 = icmp eq i64 %indvars.iv3123, %761
  br i1 %.not2651, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2724
  %1470 = alloca i8*, i64 %91, align 32
  %1471 = bitcast i8** %1470 to i16*
  store i8** %1470, i8*** %92, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2724, %then_bb21
  %blur_x = phi i16* [ %1471, %then_bb21 ], [ %1270, %pseudostack_alloc.exit2724 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3342 = and i32 %a26, 3
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3342, %"consume read_input.after_bb22_crit_edge" ], [ %1502, %"produce blur_x" ]
  %1472 = mul nsw i32 %.pre-phi, %a73
  %t1638 = sub nsw i32 %1472, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1473 = sext i32 %t1638 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1474 = getelementptr inbounds i16, i16* %read_input, i64 %93
  %1475 = getelementptr inbounds i16, i16* %1474, i64 -31
  %1476 = bitcast i16* %1475 to <16 x i16>*
  %1477 = load <16 x i16>, <16 x i16>* %1476, align 2, !tbaa !396
  %1478 = getelementptr inbounds i16, i16* %1474, i64 -15
  %1479 = bitcast i16* %1478 to <16 x i16>*
  %1480 = load <16 x i16>, <16 x i16>* %1479, align 2, !tbaa !396
  %1481 = getelementptr inbounds i16, i16* %1474, i64 -30
  %1482 = bitcast i16* %1481 to <16 x i16>*
  %1483 = load <16 x i16>, <16 x i16>* %1482, align 2, !tbaa !396
  %1484 = getelementptr inbounds i16, i16* %1474, i64 -14
  %1485 = bitcast i16* %1484 to <16 x i16>*
  %1486 = load <16 x i16>, <16 x i16>* %1485, align 2, !tbaa !396
  %1487 = getelementptr inbounds i16, i16* %1474, i64 -32
  %1488 = bitcast i16* %1487 to <16 x i16>*
  %1489 = load <16 x i16>, <16 x i16>* %1488, align 2, !tbaa !396
  %1490 = getelementptr inbounds i16, i16* %1474, i64 -16
  %1491 = bitcast i16* %1490 to <16 x i16>*
  %1492 = load <16 x i16>, <16 x i16>* %1491, align 2, !tbaa !396
  %1493 = add <16 x i16> %1483, %1477
  %1494 = add <16 x i16> %1493, %1489
  %1495 = add <16 x i16> %1486, %1480
  %1496 = add <16 x i16> %1495, %1492
  %1497 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1494, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1498 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1496, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1499 = shufflevector <16 x i16> %1497, <16 x i16> %1498, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1500 = lshr <32 x i16> %1499, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1501 = shufflevector <32 x i16> %1500, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1502 = and i32 %a26, 3
  %1503 = zext i32 %1502 to i64
  %1504 = mul nsw i64 %96, %1503
  %1505 = add nsw i64 %98, %1504
  %1506 = getelementptr inbounds i16, i16* %blur_x, i64 %1505
  %1507 = getelementptr inbounds i16, i16* %1506, i64 -32
  %1508 = bitcast i16* %1507 to <16 x i16>*
  store <16 x i16> %1501, <16 x i16>* %1508, align 2, !tbaa !399
  %1509 = shufflevector <32 x i16> %1500, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1510 = getelementptr inbounds i16, i16* %1506, i64 -16
  %1511 = bitcast i16* %1510 to <16 x i16>*
  store <16 x i16> %1509, <16 x i16>* %1511, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3125 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3126, %after_bb24 ]
  %1512 = add nsw i64 %indvars.iv3125, %100
  %1513 = icmp slt i64 %1512, 1
  %1514 = trunc i64 %1512 to i32
  %1515 = shl nsw i32 %1514, 5
  %1516 = icmp sgt i32 %4, %1515
  %1517 = or i1 %1513, %1516
  br i1 %1517, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %101, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1518 = sext i32 %t1638 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3126 = add nuw nsw i64 %indvars.iv3125, 1
  %.not2649 = icmp eq i64 %indvars.iv.next3126, %180
  br i1 %.not2649, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t656 = sub i32 %1515, %t1601
  %1519 = sext i32 %t656 to i64
  %1520 = getelementptr inbounds i16, i16* %read_input, i64 %1519
  %1521 = getelementptr inbounds i16, i16* %1520, i64 1
  %1522 = bitcast i16* %1521 to <16 x i16>*
  %1523 = load <16 x i16>, <16 x i16>* %1522, align 2, !tbaa !396
  %1524 = getelementptr inbounds i16, i16* %1520, i64 17
  %1525 = bitcast i16* %1524 to <16 x i16>*
  %1526 = load <16 x i16>, <16 x i16>* %1525, align 2, !tbaa !396
  %1527 = getelementptr inbounds i16, i16* %1520, i64 2
  %1528 = bitcast i16* %1527 to <16 x i16>*
  %1529 = load <16 x i16>, <16 x i16>* %1528, align 2, !tbaa !396
  %1530 = getelementptr inbounds i16, i16* %1520, i64 18
  %1531 = bitcast i16* %1530 to <16 x i16>*
  %1532 = load <16 x i16>, <16 x i16>* %1531, align 2, !tbaa !396
  %1533 = bitcast i16* %1520 to <16 x i16>*
  %1534 = load <16 x i16>, <16 x i16>* %1533, align 2, !tbaa !396
  %1535 = getelementptr inbounds i16, i16* %1520, i64 16
  %1536 = bitcast i16* %1535 to <16 x i16>*
  %1537 = load <16 x i16>, <16 x i16>* %1536, align 2, !tbaa !396
  %1538 = add <16 x i16> %1529, %1523
  %1539 = add <16 x i16> %1538, %1534
  %1540 = add <16 x i16> %1532, %1526
  %1541 = add <16 x i16> %1540, %1537
  %1542 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1539, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1541, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1544 = shufflevector <16 x i16> %1542, <16 x i16> %1543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1545 = lshr <32 x i16> %1544, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1546 = shufflevector <32 x i16> %1545, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1547 = shl nsw i64 %1512, 5
  %1548 = add nsw i64 %1547, %1473
  %1549 = getelementptr inbounds i16, i16* %blur_x, i64 %1548
  %1550 = bitcast i16* %1549 to <16 x i16>*
  store <16 x i16> %1546, <16 x i16>* %1550, align 2, !tbaa !399
  %1551 = shufflevector <32 x i16> %1545, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1552 = getelementptr inbounds i16, i16* %1549, i64 16
  %1553 = bitcast i16* %1552 to <16 x i16>*
  store <16 x i16> %1551, <16 x i16>* %1553, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1558, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2163 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1582
  %1554 = icmp slt i32 %t2163, 1
  %1555 = shl nsw i32 %t2163, 5
  %1556 = icmp sgt i32 %4, %1555
  %1557 = or i1 %1554, %1556
  br i1 %1557, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3343 = add nsw i32 %a26, 1
  %.pre3345 = and i32 %.pre3343, 3
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1558 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2648 = icmp eq i32 %1558, %t1639
  br i1 %.not2648, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1559 = icmp sgt i32 %a14, %1555
  %b83 = select i1 %1559, i32 %1555, i32 %a14
  %1560 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1560, i32 %b83, i32 %4
  %t658 = sub i32 %blur_x.s0.x.v1.base.s, %t1601
  %1561 = sext i32 %t658 to i64
  %1562 = getelementptr inbounds i16, i16* %read_input, i64 %1561
  %1563 = getelementptr inbounds i16, i16* %1562, i64 1
  %1564 = bitcast i16* %1563 to <16 x i16>*
  %1565 = load <16 x i16>, <16 x i16>* %1564, align 2, !tbaa !396
  %1566 = getelementptr inbounds i16, i16* %1562, i64 17
  %1567 = bitcast i16* %1566 to <16 x i16>*
  %1568 = load <16 x i16>, <16 x i16>* %1567, align 2, !tbaa !396
  %1569 = getelementptr inbounds i16, i16* %1562, i64 2
  %1570 = bitcast i16* %1569 to <16 x i16>*
  %1571 = load <16 x i16>, <16 x i16>* %1570, align 2, !tbaa !396
  %1572 = getelementptr inbounds i16, i16* %1562, i64 18
  %1573 = bitcast i16* %1572 to <16 x i16>*
  %1574 = load <16 x i16>, <16 x i16>* %1573, align 2, !tbaa !396
  %1575 = bitcast i16* %1562 to <16 x i16>*
  %1576 = load <16 x i16>, <16 x i16>* %1575, align 2, !tbaa !396
  %1577 = getelementptr inbounds i16, i16* %1562, i64 16
  %1578 = bitcast i16* %1577 to <16 x i16>*
  %1579 = load <16 x i16>, <16 x i16>* %1578, align 2, !tbaa !396
  %1580 = add <16 x i16> %1571, %1565
  %1581 = add <16 x i16> %1580, %1576
  %1582 = add <16 x i16> %1574, %1568
  %1583 = add <16 x i16> %1582, %1579
  %1584 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1581, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1585 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1583, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1586 = shufflevector <16 x i16> %1584, <16 x i16> %1585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1587 = lshr <32 x i16> %1586, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1588 = shufflevector <32 x i16> %1587, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1589 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1590 = add nsw i64 %1589, %1518
  %1591 = getelementptr inbounds i16, i16* %blur_x, i64 %1590
  %1592 = bitcast i16* %1591 to <16 x i16>*
  store <16 x i16> %1588, <16 x i16>* %1592, align 2, !tbaa !399
  %1593 = shufflevector <32 x i16> %1587, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1594 = getelementptr inbounds i16, i16* %1591, i64 16
  %1595 = bitcast i16* %1594 to <16 x i16>*
  store <16 x i16> %1593, <16 x i16>* %1595, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3346 = phi i32 [ %.pre3345, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1627, %"produce blur_x38" ]
  %1596 = mul nsw i32 %.pre-phi3346, %a73
  %t1644 = sub nsw i32 %1596, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1597 = sext i32 %t1644 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1598 = getelementptr inbounds i16, i16* %read_input, i64 %104
  %1599 = getelementptr inbounds i16, i16* %1598, i64 -31
  %1600 = bitcast i16* %1599 to <16 x i16>*
  %1601 = load <16 x i16>, <16 x i16>* %1600, align 2, !tbaa !396
  %1602 = getelementptr inbounds i16, i16* %1598, i64 -15
  %1603 = bitcast i16* %1602 to <16 x i16>*
  %1604 = load <16 x i16>, <16 x i16>* %1603, align 2, !tbaa !396
  %1605 = getelementptr inbounds i16, i16* %1598, i64 -30
  %1606 = bitcast i16* %1605 to <16 x i16>*
  %1607 = load <16 x i16>, <16 x i16>* %1606, align 2, !tbaa !396
  %1608 = getelementptr inbounds i16, i16* %1598, i64 -14
  %1609 = bitcast i16* %1608 to <16 x i16>*
  %1610 = load <16 x i16>, <16 x i16>* %1609, align 2, !tbaa !396
  %1611 = getelementptr inbounds i16, i16* %1598, i64 -32
  %1612 = bitcast i16* %1611 to <16 x i16>*
  %1613 = load <16 x i16>, <16 x i16>* %1612, align 2, !tbaa !396
  %1614 = getelementptr inbounds i16, i16* %1598, i64 -16
  %1615 = bitcast i16* %1614 to <16 x i16>*
  %1616 = load <16 x i16>, <16 x i16>* %1615, align 2, !tbaa !396
  %1617 = add <16 x i16> %1607, %1601
  %1618 = add <16 x i16> %1617, %1613
  %1619 = add <16 x i16> %1610, %1604
  %1620 = add <16 x i16> %1619, %1616
  %1621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1618, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1620, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1623 = shufflevector <16 x i16> %1621, <16 x i16> %1622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1624 = lshr <32 x i16> %1623, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1625 = shufflevector <32 x i16> %1624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1626 = add nsw i32 %a26, 1
  %1627 = and i32 %1626, 3
  %1628 = zext i32 %1627 to i64
  %1629 = mul nsw i64 %96, %1628
  %1630 = add nsw i64 %98, %1629
  %1631 = getelementptr inbounds i16, i16* %blur_x, i64 %1630
  %1632 = getelementptr inbounds i16, i16* %1631, i64 -32
  %1633 = bitcast i16* %1632 to <16 x i16>*
  store <16 x i16> %1625, <16 x i16>* %1633, align 2, !tbaa !399
  %1634 = shufflevector <32 x i16> %1624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1635 = getelementptr inbounds i16, i16* %1631, i64 -16
  %1636 = bitcast i16* %1635 to <16 x i16>*
  store <16 x i16> %1634, <16 x i16>* %1636, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3128 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3129, %after_bb42 ]
  %1637 = add nsw i64 %indvars.iv3128, %100
  %1638 = icmp slt i64 %1637, 1
  %1639 = trunc i64 %1637 to i32
  %1640 = shl nsw i32 %1639, 5
  %1641 = icmp sgt i32 %4, %1640
  %1642 = or i1 %1638, %1641
  br i1 %1642, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %101, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1643 = sext i32 %t1644 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3129 = add nuw nsw i64 %indvars.iv3128, 1
  %.not2647 = icmp eq i64 %indvars.iv.next3129, %180
  br i1 %.not2647, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t662 = add nsw i32 %1640, %t1643
  %1644 = sext i32 %t662 to i64
  %1645 = getelementptr inbounds i16, i16* %read_input, i64 %1644
  %1646 = getelementptr inbounds i16, i16* %1645, i64 1
  %1647 = bitcast i16* %1646 to <16 x i16>*
  %1648 = load <16 x i16>, <16 x i16>* %1647, align 2, !tbaa !396
  %1649 = getelementptr inbounds i16, i16* %1645, i64 17
  %1650 = bitcast i16* %1649 to <16 x i16>*
  %1651 = load <16 x i16>, <16 x i16>* %1650, align 2, !tbaa !396
  %1652 = getelementptr inbounds i16, i16* %1645, i64 2
  %1653 = bitcast i16* %1652 to <16 x i16>*
  %1654 = load <16 x i16>, <16 x i16>* %1653, align 2, !tbaa !396
  %1655 = getelementptr inbounds i16, i16* %1645, i64 18
  %1656 = bitcast i16* %1655 to <16 x i16>*
  %1657 = load <16 x i16>, <16 x i16>* %1656, align 2, !tbaa !396
  %1658 = bitcast i16* %1645 to <16 x i16>*
  %1659 = load <16 x i16>, <16 x i16>* %1658, align 2, !tbaa !396
  %1660 = getelementptr inbounds i16, i16* %1645, i64 16
  %1661 = bitcast i16* %1660 to <16 x i16>*
  %1662 = load <16 x i16>, <16 x i16>* %1661, align 2, !tbaa !396
  %1663 = add <16 x i16> %1654, %1648
  %1664 = add <16 x i16> %1663, %1659
  %1665 = add <16 x i16> %1657, %1651
  %1666 = add <16 x i16> %1665, %1662
  %1667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1664, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1666, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1669 = shufflevector <16 x i16> %1667, <16 x i16> %1668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1670 = lshr <32 x i16> %1669, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1671 = shufflevector <32 x i16> %1670, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1672 = shl nsw i64 %1637, 5
  %1673 = add nsw i64 %1672, %1597
  %1674 = getelementptr inbounds i16, i16* %blur_x, i64 %1673
  %1675 = bitcast i16* %1674 to <16 x i16>*
  store <16 x i16> %1671, <16 x i16>* %1675, align 2, !tbaa !399
  %1676 = shufflevector <32 x i16> %1670, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1677 = getelementptr inbounds i16, i16* %1674, i64 16
  %1678 = bitcast i16* %1677 to <16 x i16>*
  store <16 x i16> %1676, <16 x i16>* %1678, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1683, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2165 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1582
  %1679 = icmp slt i32 %t2165, 1
  %1680 = shl nsw i32 %t2165, 5
  %1681 = icmp sgt i32 %4, %1680
  %1682 = or i1 %1679, %1681
  br i1 %1682, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3347 = add nsw i32 %a26, 2
  %.pre3349 = and i32 %.pre3347, 3
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1683 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2646 = icmp eq i32 %1683, %t1639
  br i1 %.not2646, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1684 = icmp sgt i32 %a14, %1680
  %b90 = select i1 %1684, i32 %1680, i32 %a14
  %1685 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1685, i32 %b90, i32 %4
  %t664 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1643
  %1686 = sext i32 %t664 to i64
  %1687 = getelementptr inbounds i16, i16* %read_input, i64 %1686
  %1688 = getelementptr inbounds i16, i16* %1687, i64 1
  %1689 = bitcast i16* %1688 to <16 x i16>*
  %1690 = load <16 x i16>, <16 x i16>* %1689, align 2, !tbaa !396
  %1691 = getelementptr inbounds i16, i16* %1687, i64 17
  %1692 = bitcast i16* %1691 to <16 x i16>*
  %1693 = load <16 x i16>, <16 x i16>* %1692, align 2, !tbaa !396
  %1694 = getelementptr inbounds i16, i16* %1687, i64 2
  %1695 = bitcast i16* %1694 to <16 x i16>*
  %1696 = load <16 x i16>, <16 x i16>* %1695, align 2, !tbaa !396
  %1697 = getelementptr inbounds i16, i16* %1687, i64 18
  %1698 = bitcast i16* %1697 to <16 x i16>*
  %1699 = load <16 x i16>, <16 x i16>* %1698, align 2, !tbaa !396
  %1700 = bitcast i16* %1687 to <16 x i16>*
  %1701 = load <16 x i16>, <16 x i16>* %1700, align 2, !tbaa !396
  %1702 = getelementptr inbounds i16, i16* %1687, i64 16
  %1703 = bitcast i16* %1702 to <16 x i16>*
  %1704 = load <16 x i16>, <16 x i16>* %1703, align 2, !tbaa !396
  %1705 = add <16 x i16> %1696, %1690
  %1706 = add <16 x i16> %1705, %1701
  %1707 = add <16 x i16> %1699, %1693
  %1708 = add <16 x i16> %1707, %1704
  %1709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1706, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1711 = shufflevector <16 x i16> %1709, <16 x i16> %1710, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1712 = lshr <32 x i16> %1711, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1713 = shufflevector <32 x i16> %1712, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1714 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1715 = add nsw i64 %1714, %1643
  %1716 = getelementptr inbounds i16, i16* %blur_x, i64 %1715
  %1717 = bitcast i16* %1716 to <16 x i16>*
  store <16 x i16> %1713, <16 x i16>* %1717, align 2, !tbaa !399
  %1718 = shufflevector <32 x i16> %1712, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1719 = getelementptr inbounds i16, i16* %1716, i64 16
  %1720 = bitcast i16* %1719 to <16 x i16>*
  store <16 x i16> %1718, <16 x i16>* %1720, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3350 = phi i32 [ %.pre3349, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1764, %"produce blur_x57" ]
  %1721 = mul nsw i32 %.pre-phi3350, %a73
  %t1650 = sub nsw i32 %1721, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1722 = sext i32 %t1650 to i64
  %1723 = zext i32 %.pre-phi3346 to i64
  %1724 = mul nsw i64 %1723, %108
  %1725 = sub nsw i64 %1724, %95
  %1726 = zext i32 %.pre-phi3350 to i64
  %1727 = mul nsw i64 %1726, %108
  %1728 = sub nsw i64 %1727, %95
  %1729 = zext i32 %.pre-phi to i64
  %1730 = mul nsw i64 %1729, %108
  %1731 = sub nsw i64 %1730, %95
  %1732 = sext i32 %a26 to i64
  %1733 = mul nsw i64 %1732, %109
  %1734 = add nsw i64 %1733, %112
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1735 = getelementptr inbounds i16, i16* %read_input, i64 %107
  %1736 = getelementptr inbounds i16, i16* %1735, i64 -31
  %1737 = bitcast i16* %1736 to <16 x i16>*
  %1738 = load <16 x i16>, <16 x i16>* %1737, align 2, !tbaa !396
  %1739 = getelementptr inbounds i16, i16* %1735, i64 -15
  %1740 = bitcast i16* %1739 to <16 x i16>*
  %1741 = load <16 x i16>, <16 x i16>* %1740, align 2, !tbaa !396
  %1742 = getelementptr inbounds i16, i16* %1735, i64 -30
  %1743 = bitcast i16* %1742 to <16 x i16>*
  %1744 = load <16 x i16>, <16 x i16>* %1743, align 2, !tbaa !396
  %1745 = getelementptr inbounds i16, i16* %1735, i64 -14
  %1746 = bitcast i16* %1745 to <16 x i16>*
  %1747 = load <16 x i16>, <16 x i16>* %1746, align 2, !tbaa !396
  %1748 = getelementptr inbounds i16, i16* %1735, i64 -32
  %1749 = bitcast i16* %1748 to <16 x i16>*
  %1750 = load <16 x i16>, <16 x i16>* %1749, align 2, !tbaa !396
  %1751 = getelementptr inbounds i16, i16* %1735, i64 -16
  %1752 = bitcast i16* %1751 to <16 x i16>*
  %1753 = load <16 x i16>, <16 x i16>* %1752, align 2, !tbaa !396
  %1754 = add <16 x i16> %1744, %1738
  %1755 = add <16 x i16> %1754, %1750
  %1756 = add <16 x i16> %1747, %1741
  %1757 = add <16 x i16> %1756, %1753
  %1758 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1755, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1759 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1757, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1760 = shufflevector <16 x i16> %1758, <16 x i16> %1759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1761 = lshr <32 x i16> %1760, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1762 = shufflevector <32 x i16> %1761, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1763 = add nsw i32 %a26, 2
  %1764 = and i32 %1763, 3
  %1765 = zext i32 %1764 to i64
  %1766 = mul nsw i64 %96, %1765
  %1767 = add nsw i64 %98, %1766
  %1768 = getelementptr inbounds i16, i16* %blur_x, i64 %1767
  %1769 = getelementptr inbounds i16, i16* %1768, i64 -32
  %1770 = bitcast i16* %1769 to <16 x i16>*
  store <16 x i16> %1762, <16 x i16>* %1770, align 2, !tbaa !399
  %1771 = shufflevector <32 x i16> %1761, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1772 = getelementptr inbounds i16, i16* %1768, i64 -16
  %1773 = bitcast i16* %1772 to <16 x i16>*
  store <16 x i16> %1771, <16 x i16>* %1773, align 2, !tbaa !399
  %1774 = zext i32 %.pre-phi3346 to i64
  %1775 = mul nsw i64 %1774, %108
  %1776 = add nsw i64 %1775, %93
  %1777 = getelementptr inbounds i16, i16* %blur_x, i64 %1776
  %1778 = getelementptr inbounds i16, i16* %1777, i64 -32
  %1779 = bitcast i16* %1778 to <16 x i16>*
  %1780 = load <16 x i16>, <16 x i16>* %1779, align 2, !tbaa !399
  %1781 = getelementptr inbounds i16, i16* %1777, i64 -16
  %1782 = bitcast i16* %1781 to <16 x i16>*
  %1783 = load <16 x i16>, <16 x i16>* %1782, align 2, !tbaa !399
  %1784 = mul nsw i64 %1765, %108
  %1785 = add nsw i64 %1784, %93
  %1786 = getelementptr inbounds i16, i16* %blur_x, i64 %1785
  %1787 = getelementptr inbounds i16, i16* %1786, i64 -32
  %1788 = bitcast i16* %1787 to <16 x i16>*
  %1789 = load <16 x i16>, <16 x i16>* %1788, align 2, !tbaa !399
  %1790 = getelementptr inbounds i16, i16* %1786, i64 -16
  %1791 = bitcast i16* %1790 to <16 x i16>*
  %1792 = load <16 x i16>, <16 x i16>* %1791, align 2, !tbaa !399
  %1793 = zext i32 %.pre-phi to i64
  %1794 = mul nsw i64 %1793, %108
  %1795 = add nsw i64 %1794, %93
  %1796 = getelementptr inbounds i16, i16* %blur_x, i64 %1795
  %1797 = getelementptr inbounds i16, i16* %1796, i64 -32
  %1798 = bitcast i16* %1797 to <16 x i16>*
  %1799 = load <16 x i16>, <16 x i16>* %1798, align 2, !tbaa !399
  %1800 = getelementptr inbounds i16, i16* %1796, i64 -16
  %1801 = bitcast i16* %1800 to <16 x i16>*
  %1802 = load <16 x i16>, <16 x i16>* %1801, align 2, !tbaa !399
  %1803 = add <16 x i16> %1789, %1780
  %1804 = add <16 x i16> %1803, %1799
  %1805 = add <16 x i16> %1792, %1783
  %1806 = add <16 x i16> %1805, %1802
  %1807 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1804, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1808 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1806, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1809 = shufflevector <16 x i16> %1807, <16 x i16> %1808, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1810 = lshr <32 x i16> %1809, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1811 = shufflevector <32 x i16> %1810, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1812 = sext i32 %a26 to i64
  %1813 = mul nsw i64 %1812, %109
  %1814 = add nsw i64 %111, %1813
  %1815 = getelementptr inbounds i16, i16* %65, i64 %1814
  %1816 = getelementptr inbounds i16, i16* %1815, i64 -32
  %1817 = bitcast i16* %1816 to <16 x i16>*
  store <16 x i16> %1811, <16 x i16>* %1817, align 2, !tbaa !401
  %1818 = shufflevector <32 x i16> %1810, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1819 = getelementptr inbounds i16, i16* %1815, i64 -16
  %1820 = bitcast i16* %1819 to <16 x i16>*
  store <16 x i16> %1818, <16 x i16>* %1820, align 2, !tbaa !401
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %"consume blur_x65"
  %indvars.iv3131 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3132, %"consume blur_x65" ]
  %1821 = add nsw i64 %indvars.iv3131, %100
  %1822 = icmp slt i64 %1821, 1
  %1823 = trunc i64 %1821 to i32
  %1824 = shl nsw i32 %1823, 5
  %1825 = icmp sgt i32 %4, %1824
  %1826 = or i1 %1822, %1825
  br i1 %1826, label %"produce blur_x64", label %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge"

"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased58"
  %.pre3351 = shl nsw i64 %1821, 5
  br label %"consume blur_x65"

"end for blur_y.s0.x.x.rebased59":                ; preds = %"consume blur_x65", %after_bb54
  br i1 %101, label %"for blur_y.s0.x.x.rebased66.preheader", label %"end for blur_y.s0.x.x.rebased67", !prof !386

"for blur_y.s0.x.x.rebased66.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1827 = sext i32 %t1650 to i64
  %1828 = zext i32 %.pre-phi3346 to i64
  %1829 = mul nsw i64 %1828, %108
  %1830 = sub nsw i64 %1829, %95
  %1831 = zext i32 %.pre-phi3350 to i64
  %1832 = mul nsw i64 %1831, %108
  %1833 = sub nsw i64 %1832, %95
  %1834 = zext i32 %.pre-phi to i64
  %1835 = mul nsw i64 %1834, %108
  %1836 = sub nsw i64 %1835, %95
  %1837 = sext i32 %a26 to i64
  %1838 = mul nsw i64 %1837, %109
  %1839 = add nsw i64 %1838, %112
  br label %"for blur_y.s0.x.x.rebased66"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t672 = add nsw i32 %1824, %105
  %1840 = sext i32 %t672 to i64
  %1841 = getelementptr inbounds i16, i16* %read_input, i64 %1840
  %1842 = getelementptr inbounds i16, i16* %1841, i64 1
  %1843 = bitcast i16* %1842 to <16 x i16>*
  %1844 = load <16 x i16>, <16 x i16>* %1843, align 2, !tbaa !396
  %1845 = getelementptr inbounds i16, i16* %1841, i64 17
  %1846 = bitcast i16* %1845 to <16 x i16>*
  %1847 = load <16 x i16>, <16 x i16>* %1846, align 2, !tbaa !396
  %1848 = getelementptr inbounds i16, i16* %1841, i64 2
  %1849 = bitcast i16* %1848 to <16 x i16>*
  %1850 = load <16 x i16>, <16 x i16>* %1849, align 2, !tbaa !396
  %1851 = getelementptr inbounds i16, i16* %1841, i64 18
  %1852 = bitcast i16* %1851 to <16 x i16>*
  %1853 = load <16 x i16>, <16 x i16>* %1852, align 2, !tbaa !396
  %1854 = bitcast i16* %1841 to <16 x i16>*
  %1855 = load <16 x i16>, <16 x i16>* %1854, align 2, !tbaa !396
  %1856 = getelementptr inbounds i16, i16* %1841, i64 16
  %1857 = bitcast i16* %1856 to <16 x i16>*
  %1858 = load <16 x i16>, <16 x i16>* %1857, align 2, !tbaa !396
  %1859 = add <16 x i16> %1850, %1844
  %1860 = add <16 x i16> %1859, %1855
  %1861 = add <16 x i16> %1853, %1847
  %1862 = add <16 x i16> %1861, %1858
  %1863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1860, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1864 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1862, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1865 = shufflevector <16 x i16> %1863, <16 x i16> %1864, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1866 = lshr <32 x i16> %1865, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1867 = shufflevector <32 x i16> %1866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1868 = shl nsw i64 %1821, 5
  %1869 = add nsw i64 %1868, %1722
  %1870 = getelementptr inbounds i16, i16* %blur_x, i64 %1869
  %1871 = bitcast i16* %1870 to <16 x i16>*
  store <16 x i16> %1867, <16 x i16>* %1871, align 2, !tbaa !399
  %1872 = shufflevector <32 x i16> %1866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1873 = getelementptr inbounds i16, i16* %1870, i64 16
  %1874 = bitcast i16* %1873 to <16 x i16>*
  store <16 x i16> %1872, <16 x i16>* %1874, align 2, !tbaa !399
  br label %"consume blur_x65"

"consume blur_x65":                               ; preds = %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge", %"produce blur_x64"
  %.pre-phi3352 = phi i64 [ %.pre3351, %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge" ], [ %1868, %"produce blur_x64" ]
  %1875 = add nsw i64 %1725, %.pre-phi3352
  %1876 = getelementptr inbounds i16, i16* %blur_x, i64 %1875
  %1877 = bitcast i16* %1876 to <16 x i16>*
  %1878 = load <16 x i16>, <16 x i16>* %1877, align 2, !tbaa !399
  %1879 = getelementptr inbounds i16, i16* %1876, i64 16
  %1880 = bitcast i16* %1879 to <16 x i16>*
  %1881 = load <16 x i16>, <16 x i16>* %1880, align 2, !tbaa !399
  %1882 = add nsw i64 %1728, %.pre-phi3352
  %1883 = getelementptr inbounds i16, i16* %blur_x, i64 %1882
  %1884 = bitcast i16* %1883 to <16 x i16>*
  %1885 = load <16 x i16>, <16 x i16>* %1884, align 2, !tbaa !399
  %1886 = getelementptr inbounds i16, i16* %1883, i64 16
  %1887 = bitcast i16* %1886 to <16 x i16>*
  %1888 = load <16 x i16>, <16 x i16>* %1887, align 2, !tbaa !399
  %1889 = add nsw i64 %1731, %.pre-phi3352
  %1890 = getelementptr inbounds i16, i16* %blur_x, i64 %1889
  %1891 = bitcast i16* %1890 to <16 x i16>*
  %1892 = load <16 x i16>, <16 x i16>* %1891, align 2, !tbaa !399
  %1893 = getelementptr inbounds i16, i16* %1890, i64 16
  %1894 = bitcast i16* %1893 to <16 x i16>*
  %1895 = load <16 x i16>, <16 x i16>* %1894, align 2, !tbaa !399
  %1896 = add <16 x i16> %1885, %1878
  %1897 = add <16 x i16> %1896, %1892
  %1898 = add <16 x i16> %1888, %1881
  %1899 = add <16 x i16> %1898, %1895
  %1900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1897, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1899, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1902 = shufflevector <16 x i16> %1900, <16 x i16> %1901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1903 = lshr <32 x i16> %1902, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1904 = shufflevector <32 x i16> %1903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1905 = add nsw i64 %1734, %.pre-phi3352
  %1906 = getelementptr inbounds i16, i16* %65, i64 %1905
  %1907 = bitcast i16* %1906 to <16 x i16>*
  store <16 x i16> %1904, <16 x i16>* %1907, align 2, !tbaa !401
  %1908 = shufflevector <32 x i16> %1903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1909 = getelementptr inbounds i16, i16* %1906, i64 16
  %1910 = bitcast i16* %1909 to <16 x i16>*
  store <16 x i16> %1908, <16 x i16>* %1910, align 2, !tbaa !401
  %indvars.iv.next3132 = add nuw nsw i64 %indvars.iv3131, 1
  %.not2645 = icmp eq i64 %indvars.iv.next3132, %180
  br i1 %.not2645, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"for blur_y.s0.x.x.rebased66":                    ; preds = %"for blur_y.s0.x.x.rebased66.preheader", %"consume blur_x74"
  %blur_y.s0.x.x.rebased68 = phi i32 [ %1989, %"consume blur_x74" ], [ 0, %"for blur_y.s0.x.x.rebased66.preheader" ]
  %1911 = add nsw i32 %blur_y.s0.x.x.rebased68, %t1582
  %a91 = shl nsw i32 %1911, 5
  %1912 = icmp sgt i32 %a14, %a91
  %b97 = select i1 %1912, i32 %a91, i32 %a14
  %1913 = icmp slt i32 %1911, 1
  %1914 = icmp sgt i32 %4, %a91
  %1915 = or i1 %1913, %1914
  br i1 %1915, label %"produce blur_x72", label %"consume blur_x74"

"end for blur_y.s0.x.x.rebased67":                ; preds = %"consume blur_x74", %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x78", label %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge"

"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased67"
  %.pre3353 = add nsw i32 %a26, 3
  %.pre3355 = and i32 %.pre3353, 3
  br label %after_bb75

"produce blur_x72":                               ; preds = %"for blur_y.s0.x.x.rebased66"
  %1916 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s73 = select i1 %1916, i32 %b97, i32 %4
  %t677 = add nsw i32 %blur_x.s0.x.v1.base.s73, %105
  %1917 = sext i32 %t677 to i64
  %1918 = getelementptr inbounds i16, i16* %read_input, i64 %1917
  %1919 = getelementptr inbounds i16, i16* %1918, i64 1
  %1920 = bitcast i16* %1919 to <16 x i16>*
  %1921 = load <16 x i16>, <16 x i16>* %1920, align 2, !tbaa !396
  %1922 = getelementptr inbounds i16, i16* %1918, i64 17
  %1923 = bitcast i16* %1922 to <16 x i16>*
  %1924 = load <16 x i16>, <16 x i16>* %1923, align 2, !tbaa !396
  %1925 = getelementptr inbounds i16, i16* %1918, i64 2
  %1926 = bitcast i16* %1925 to <16 x i16>*
  %1927 = load <16 x i16>, <16 x i16>* %1926, align 2, !tbaa !396
  %1928 = getelementptr inbounds i16, i16* %1918, i64 18
  %1929 = bitcast i16* %1928 to <16 x i16>*
  %1930 = load <16 x i16>, <16 x i16>* %1929, align 2, !tbaa !396
  %1931 = bitcast i16* %1918 to <16 x i16>*
  %1932 = load <16 x i16>, <16 x i16>* %1931, align 2, !tbaa !396
  %1933 = getelementptr inbounds i16, i16* %1918, i64 16
  %1934 = bitcast i16* %1933 to <16 x i16>*
  %1935 = load <16 x i16>, <16 x i16>* %1934, align 2, !tbaa !396
  %1936 = add <16 x i16> %1927, %1921
  %1937 = add <16 x i16> %1936, %1932
  %1938 = add <16 x i16> %1930, %1924
  %1939 = add <16 x i16> %1938, %1935
  %1940 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1937, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1939, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1942 = shufflevector <16 x i16> %1940, <16 x i16> %1941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1943 = lshr <32 x i16> %1942, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1944 = shufflevector <32 x i16> %1943, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1945 = sext i32 %blur_x.s0.x.v1.base.s73 to i64
  %1946 = add nsw i64 %1945, %1827
  %1947 = getelementptr inbounds i16, i16* %blur_x, i64 %1946
  %1948 = bitcast i16* %1947 to <16 x i16>*
  store <16 x i16> %1944, <16 x i16>* %1948, align 2, !tbaa !399
  %1949 = shufflevector <32 x i16> %1943, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1950 = getelementptr inbounds i16, i16* %1947, i64 16
  %1951 = bitcast i16* %1950 to <16 x i16>*
  store <16 x i16> %1949, <16 x i16>* %1951, align 2, !tbaa !399
  br label %"consume blur_x74"

"consume blur_x74":                               ; preds = %"for blur_y.s0.x.x.rebased66", %"produce blur_x72"
  %1952 = sext i32 %b97 to i64
  %1953 = add nsw i64 %1830, %1952
  %1954 = getelementptr inbounds i16, i16* %blur_x, i64 %1953
  %1955 = bitcast i16* %1954 to <16 x i16>*
  %1956 = load <16 x i16>, <16 x i16>* %1955, align 2, !tbaa !399
  %1957 = getelementptr inbounds i16, i16* %1954, i64 16
  %1958 = bitcast i16* %1957 to <16 x i16>*
  %1959 = load <16 x i16>, <16 x i16>* %1958, align 2, !tbaa !399
  %1960 = add nsw i64 %1833, %1952
  %1961 = getelementptr inbounds i16, i16* %blur_x, i64 %1960
  %1962 = bitcast i16* %1961 to <16 x i16>*
  %1963 = load <16 x i16>, <16 x i16>* %1962, align 2, !tbaa !399
  %1964 = getelementptr inbounds i16, i16* %1961, i64 16
  %1965 = bitcast i16* %1964 to <16 x i16>*
  %1966 = load <16 x i16>, <16 x i16>* %1965, align 2, !tbaa !399
  %1967 = add nsw i64 %1836, %1952
  %1968 = getelementptr inbounds i16, i16* %blur_x, i64 %1967
  %1969 = bitcast i16* %1968 to <16 x i16>*
  %1970 = load <16 x i16>, <16 x i16>* %1969, align 2, !tbaa !399
  %1971 = getelementptr inbounds i16, i16* %1968, i64 16
  %1972 = bitcast i16* %1971 to <16 x i16>*
  %1973 = load <16 x i16>, <16 x i16>* %1972, align 2, !tbaa !399
  %1974 = add <16 x i16> %1963, %1956
  %1975 = add <16 x i16> %1974, %1970
  %1976 = add <16 x i16> %1966, %1959
  %1977 = add <16 x i16> %1976, %1973
  %1978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1975, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1977, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1980 = shufflevector <16 x i16> %1978, <16 x i16> %1979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1981 = lshr <32 x i16> %1980, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1982 = shufflevector <32 x i16> %1981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1983 = add nsw i64 %1839, %1952
  %1984 = getelementptr inbounds i16, i16* %65, i64 %1983
  %1985 = bitcast i16* %1984 to <16 x i16>*
  store <16 x i16> %1982, <16 x i16>* %1985, align 2, !tbaa !401
  %1986 = shufflevector <32 x i16> %1981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1987 = getelementptr inbounds i16, i16* %1984, i64 16
  %1988 = bitcast i16* %1987 to <16 x i16>*
  store <16 x i16> %1986, <16 x i16>* %1988, align 2, !tbaa !401
  %1989 = add nuw nsw i32 %blur_y.s0.x.x.rebased68, 1
  %.not2644 = icmp eq i32 %1989, %t1639
  br i1 %.not2644, label %"end for blur_y.s0.x.x.rebased67", label %"for blur_y.s0.x.x.rebased66"

after_bb75:                                       ; preds = %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge", %"produce blur_x78"
  %.pre-phi3356 = phi i32 [ %.pre3355, %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge" ], [ %2034, %"produce blur_x78" ]
  %1990 = mul nsw i32 %.pre-phi3356, %a73
  %t1666 = sub nsw i32 %1990, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased80.preheader", label %"end for blur_y.s0.x.x.rebased81", !prof !386

"for blur_y.s0.x.x.rebased80.preheader":          ; preds = %after_bb75
  %1991 = sext i32 %t1666 to i64
  %1992 = zext i32 %.pre-phi3350 to i64
  %1993 = mul nsw i64 %1992, %108
  %1994 = sub nsw i64 %1993, %95
  %1995 = zext i32 %.pre-phi3356 to i64
  %1996 = mul nsw i64 %1995, %108
  %1997 = sub nsw i64 %1996, %95
  %1998 = zext i32 %.pre-phi3346 to i64
  %1999 = mul nsw i64 %1998, %108
  %2000 = sub nsw i64 %1999, %95
  %2001 = sext i32 %a26 to i64
  %2002 = add nsw i64 %2001, 1
  %2003 = mul nsw i64 %2002, %109
  %2004 = add nsw i64 %2003, %112
  br label %"for blur_y.s0.x.x.rebased80"

"produce blur_x78":                               ; preds = %"end for blur_y.s0.x.x.rebased67"
  %2005 = getelementptr inbounds i16, i16* %read_input, i64 %113
  %2006 = getelementptr inbounds i16, i16* %2005, i64 -31
  %2007 = bitcast i16* %2006 to <16 x i16>*
  %2008 = load <16 x i16>, <16 x i16>* %2007, align 2, !tbaa !396
  %2009 = getelementptr inbounds i16, i16* %2005, i64 -15
  %2010 = bitcast i16* %2009 to <16 x i16>*
  %2011 = load <16 x i16>, <16 x i16>* %2010, align 2, !tbaa !396
  %2012 = getelementptr inbounds i16, i16* %2005, i64 -30
  %2013 = bitcast i16* %2012 to <16 x i16>*
  %2014 = load <16 x i16>, <16 x i16>* %2013, align 2, !tbaa !396
  %2015 = getelementptr inbounds i16, i16* %2005, i64 -14
  %2016 = bitcast i16* %2015 to <16 x i16>*
  %2017 = load <16 x i16>, <16 x i16>* %2016, align 2, !tbaa !396
  %2018 = getelementptr inbounds i16, i16* %2005, i64 -32
  %2019 = bitcast i16* %2018 to <16 x i16>*
  %2020 = load <16 x i16>, <16 x i16>* %2019, align 2, !tbaa !396
  %2021 = getelementptr inbounds i16, i16* %2005, i64 -16
  %2022 = bitcast i16* %2021 to <16 x i16>*
  %2023 = load <16 x i16>, <16 x i16>* %2022, align 2, !tbaa !396
  %2024 = add <16 x i16> %2014, %2008
  %2025 = add <16 x i16> %2024, %2020
  %2026 = add <16 x i16> %2017, %2011
  %2027 = add <16 x i16> %2026, %2023
  %2028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2025, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2029 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2027, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2030 = shufflevector <16 x i16> %2028, <16 x i16> %2029, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2031 = lshr <32 x i16> %2030, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2032 = shufflevector <32 x i16> %2031, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2033 = add nsw i32 %a26, 3
  %2034 = and i32 %2033, 3
  %2035 = zext i32 %2034 to i64
  %2036 = mul nsw i64 %96, %2035
  %2037 = add nsw i64 %98, %2036
  %2038 = getelementptr inbounds i16, i16* %blur_x, i64 %2037
  %2039 = getelementptr inbounds i16, i16* %2038, i64 -32
  %2040 = bitcast i16* %2039 to <16 x i16>*
  store <16 x i16> %2032, <16 x i16>* %2040, align 2, !tbaa !399
  %2041 = shufflevector <32 x i16> %2031, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2042 = getelementptr inbounds i16, i16* %2038, i64 -16
  %2043 = bitcast i16* %2042 to <16 x i16>*
  store <16 x i16> %2041, <16 x i16>* %2043, align 2, !tbaa !399
  %2044 = zext i32 %.pre-phi3350 to i64
  %2045 = mul nsw i64 %2044, %108
  %2046 = add nsw i64 %2045, %93
  %2047 = getelementptr inbounds i16, i16* %blur_x, i64 %2046
  %2048 = getelementptr inbounds i16, i16* %2047, i64 -32
  %2049 = bitcast i16* %2048 to <16 x i16>*
  %2050 = load <16 x i16>, <16 x i16>* %2049, align 2, !tbaa !399
  %2051 = getelementptr inbounds i16, i16* %2047, i64 -16
  %2052 = bitcast i16* %2051 to <16 x i16>*
  %2053 = load <16 x i16>, <16 x i16>* %2052, align 2, !tbaa !399
  %2054 = mul nsw i64 %2035, %108
  %2055 = add nsw i64 %2054, %93
  %2056 = getelementptr inbounds i16, i16* %blur_x, i64 %2055
  %2057 = getelementptr inbounds i16, i16* %2056, i64 -32
  %2058 = bitcast i16* %2057 to <16 x i16>*
  %2059 = load <16 x i16>, <16 x i16>* %2058, align 2, !tbaa !399
  %2060 = getelementptr inbounds i16, i16* %2056, i64 -16
  %2061 = bitcast i16* %2060 to <16 x i16>*
  %2062 = load <16 x i16>, <16 x i16>* %2061, align 2, !tbaa !399
  %2063 = zext i32 %.pre-phi3346 to i64
  %2064 = mul nsw i64 %2063, %108
  %2065 = add nsw i64 %2064, %93
  %2066 = getelementptr inbounds i16, i16* %blur_x, i64 %2065
  %2067 = getelementptr inbounds i16, i16* %2066, i64 -32
  %2068 = bitcast i16* %2067 to <16 x i16>*
  %2069 = load <16 x i16>, <16 x i16>* %2068, align 2, !tbaa !399
  %2070 = getelementptr inbounds i16, i16* %2066, i64 -16
  %2071 = bitcast i16* %2070 to <16 x i16>*
  %2072 = load <16 x i16>, <16 x i16>* %2071, align 2, !tbaa !399
  %2073 = add <16 x i16> %2059, %2050
  %2074 = add <16 x i16> %2073, %2069
  %2075 = add <16 x i16> %2062, %2053
  %2076 = add <16 x i16> %2075, %2072
  %2077 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2074, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2078 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2076, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2079 = shufflevector <16 x i16> %2077, <16 x i16> %2078, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2080 = lshr <32 x i16> %2079, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2081 = shufflevector <32 x i16> %2080, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2082 = sext i32 %a26 to i64
  %2083 = add nsw i64 %2082, 1
  %2084 = mul nsw i64 %2083, %109
  %2085 = add nsw i64 %111, %2084
  %2086 = getelementptr inbounds i16, i16* %65, i64 %2085
  %2087 = getelementptr inbounds i16, i16* %2086, i64 -32
  %2088 = bitcast i16* %2087 to <16 x i16>*
  store <16 x i16> %2081, <16 x i16>* %2088, align 2, !tbaa !401
  %2089 = shufflevector <32 x i16> %2080, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2090 = getelementptr inbounds i16, i16* %2086, i64 -16
  %2091 = bitcast i16* %2090 to <16 x i16>*
  store <16 x i16> %2089, <16 x i16>* %2091, align 2, !tbaa !401
  br label %after_bb75

"for blur_y.s0.x.x.rebased80":                    ; preds = %"for blur_y.s0.x.x.rebased80.preheader", %"consume blur_x87"
  %indvars.iv3134 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased80.preheader" ], [ %indvars.iv.next3135, %"consume blur_x87" ]
  %2092 = add nsw i64 %indvars.iv3134, %100
  %2093 = icmp slt i64 %2092, 1
  %2094 = trunc i64 %2092 to i32
  %2095 = shl nsw i32 %2094, 5
  %2096 = icmp sgt i32 %4, %2095
  %2097 = or i1 %2093, %2096
  br i1 %2097, label %"produce blur_x86", label %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge"

"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased80"
  %.pre3357 = shl nsw i64 %2092, 5
  br label %"consume blur_x87"

"end for blur_y.s0.x.x.rebased81":                ; preds = %"consume blur_x87", %after_bb75
  br i1 %101, label %"for blur_y.s0.x.x.rebased88.preheader", label %"end for blur_y.s0.x.x.rebased89", !prof !386

"for blur_y.s0.x.x.rebased88.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased81"
  %2098 = sext i32 %t1666 to i64
  %2099 = zext i32 %.pre-phi3350 to i64
  %2100 = mul nsw i64 %2099, %108
  %2101 = sub nsw i64 %2100, %95
  %2102 = zext i32 %.pre-phi3356 to i64
  %2103 = mul nsw i64 %2102, %108
  %2104 = sub nsw i64 %2103, %95
  %2105 = zext i32 %.pre-phi3346 to i64
  %2106 = mul nsw i64 %2105, %108
  %2107 = sub nsw i64 %2106, %95
  %2108 = sext i32 %a26 to i64
  %2109 = add nsw i64 %2108, 1
  %2110 = mul nsw i64 %2109, %109
  %2111 = add nsw i64 %2110, %112
  br label %"for blur_y.s0.x.x.rebased88"

"produce blur_x86":                               ; preds = %"for blur_y.s0.x.x.rebased80"
  %t688 = add nsw i32 %2095, %t1665
  %2112 = sext i32 %t688 to i64
  %2113 = getelementptr inbounds i16, i16* %read_input, i64 %2112
  %2114 = getelementptr inbounds i16, i16* %2113, i64 1
  %2115 = bitcast i16* %2114 to <16 x i16>*
  %2116 = load <16 x i16>, <16 x i16>* %2115, align 2, !tbaa !396
  %2117 = getelementptr inbounds i16, i16* %2113, i64 17
  %2118 = bitcast i16* %2117 to <16 x i16>*
  %2119 = load <16 x i16>, <16 x i16>* %2118, align 2, !tbaa !396
  %2120 = getelementptr inbounds i16, i16* %2113, i64 2
  %2121 = bitcast i16* %2120 to <16 x i16>*
  %2122 = load <16 x i16>, <16 x i16>* %2121, align 2, !tbaa !396
  %2123 = getelementptr inbounds i16, i16* %2113, i64 18
  %2124 = bitcast i16* %2123 to <16 x i16>*
  %2125 = load <16 x i16>, <16 x i16>* %2124, align 2, !tbaa !396
  %2126 = bitcast i16* %2113 to <16 x i16>*
  %2127 = load <16 x i16>, <16 x i16>* %2126, align 2, !tbaa !396
  %2128 = getelementptr inbounds i16, i16* %2113, i64 16
  %2129 = bitcast i16* %2128 to <16 x i16>*
  %2130 = load <16 x i16>, <16 x i16>* %2129, align 2, !tbaa !396
  %2131 = add <16 x i16> %2122, %2116
  %2132 = add <16 x i16> %2131, %2127
  %2133 = add <16 x i16> %2125, %2119
  %2134 = add <16 x i16> %2133, %2130
  %2135 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2132, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2134, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2137 = shufflevector <16 x i16> %2135, <16 x i16> %2136, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2138 = lshr <32 x i16> %2137, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2139 = shufflevector <32 x i16> %2138, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2140 = shl nsw i64 %2092, 5
  %2141 = add nsw i64 %2140, %1991
  %2142 = getelementptr inbounds i16, i16* %blur_x, i64 %2141
  %2143 = bitcast i16* %2142 to <16 x i16>*
  store <16 x i16> %2139, <16 x i16>* %2143, align 2, !tbaa !399
  %2144 = shufflevector <32 x i16> %2138, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2145 = getelementptr inbounds i16, i16* %2142, i64 16
  %2146 = bitcast i16* %2145 to <16 x i16>*
  store <16 x i16> %2144, <16 x i16>* %2146, align 2, !tbaa !399
  br label %"consume blur_x87"

"consume blur_x87":                               ; preds = %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge", %"produce blur_x86"
  %.pre-phi3358 = phi i64 [ %.pre3357, %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge" ], [ %2140, %"produce blur_x86" ]
  %2147 = add nsw i64 %1994, %.pre-phi3358
  %2148 = getelementptr inbounds i16, i16* %blur_x, i64 %2147
  %2149 = bitcast i16* %2148 to <16 x i16>*
  %2150 = load <16 x i16>, <16 x i16>* %2149, align 2, !tbaa !399
  %2151 = getelementptr inbounds i16, i16* %2148, i64 16
  %2152 = bitcast i16* %2151 to <16 x i16>*
  %2153 = load <16 x i16>, <16 x i16>* %2152, align 2, !tbaa !399
  %2154 = add nsw i64 %1997, %.pre-phi3358
  %2155 = getelementptr inbounds i16, i16* %blur_x, i64 %2154
  %2156 = bitcast i16* %2155 to <16 x i16>*
  %2157 = load <16 x i16>, <16 x i16>* %2156, align 2, !tbaa !399
  %2158 = getelementptr inbounds i16, i16* %2155, i64 16
  %2159 = bitcast i16* %2158 to <16 x i16>*
  %2160 = load <16 x i16>, <16 x i16>* %2159, align 2, !tbaa !399
  %2161 = add nsw i64 %2000, %.pre-phi3358
  %2162 = getelementptr inbounds i16, i16* %blur_x, i64 %2161
  %2163 = bitcast i16* %2162 to <16 x i16>*
  %2164 = load <16 x i16>, <16 x i16>* %2163, align 2, !tbaa !399
  %2165 = getelementptr inbounds i16, i16* %2162, i64 16
  %2166 = bitcast i16* %2165 to <16 x i16>*
  %2167 = load <16 x i16>, <16 x i16>* %2166, align 2, !tbaa !399
  %2168 = add <16 x i16> %2157, %2150
  %2169 = add <16 x i16> %2168, %2164
  %2170 = add <16 x i16> %2160, %2153
  %2171 = add <16 x i16> %2170, %2167
  %2172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2169, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2171, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2174 = shufflevector <16 x i16> %2172, <16 x i16> %2173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2175 = lshr <32 x i16> %2174, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2176 = shufflevector <32 x i16> %2175, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2177 = add nsw i64 %2004, %.pre-phi3358
  %2178 = getelementptr inbounds i16, i16* %65, i64 %2177
  %2179 = bitcast i16* %2178 to <16 x i16>*
  store <16 x i16> %2176, <16 x i16>* %2179, align 2, !tbaa !401
  %2180 = shufflevector <32 x i16> %2175, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2181 = getelementptr inbounds i16, i16* %2178, i64 16
  %2182 = bitcast i16* %2181 to <16 x i16>*
  store <16 x i16> %2180, <16 x i16>* %2182, align 2, !tbaa !401
  %indvars.iv.next3135 = add nuw nsw i64 %indvars.iv3134, 1
  %.not2643 = icmp eq i64 %indvars.iv.next3135, %180
  br i1 %.not2643, label %"end for blur_y.s0.x.x.rebased81", label %"for blur_y.s0.x.x.rebased80"

"for blur_y.s0.x.x.rebased88":                    ; preds = %"for blur_y.s0.x.x.rebased88.preheader", %"consume blur_x96"
  %blur_y.s0.x.x.rebased90 = phi i32 [ %2261, %"consume blur_x96" ], [ 0, %"for blur_y.s0.x.x.rebased88.preheader" ]
  %2183 = add nsw i32 %blur_y.s0.x.x.rebased90, %t1582
  %a98 = shl nsw i32 %2183, 5
  %2184 = icmp sgt i32 %a14, %a98
  %b104 = select i1 %2184, i32 %a98, i32 %a14
  %2185 = icmp slt i32 %2183, 1
  %2186 = icmp sgt i32 %4, %a98
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %"produce blur_x94", label %"consume blur_x96"

"end for blur_y.s0.x.x.rebased89":                ; preds = %"consume blur_x96", %"end for blur_y.s0.x.x.rebased81"
  br i1 %34, label %"produce blur_x100", label %after_bb97

"produce blur_x94":                               ; preds = %"for blur_y.s0.x.x.rebased88"
  %2188 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s95 = select i1 %2188, i32 %b104, i32 %4
  %t693 = add nsw i32 %blur_x.s0.x.v1.base.s95, %t1665
  %2189 = sext i32 %t693 to i64
  %2190 = getelementptr inbounds i16, i16* %read_input, i64 %2189
  %2191 = getelementptr inbounds i16, i16* %2190, i64 1
  %2192 = bitcast i16* %2191 to <16 x i16>*
  %2193 = load <16 x i16>, <16 x i16>* %2192, align 2, !tbaa !396
  %2194 = getelementptr inbounds i16, i16* %2190, i64 17
  %2195 = bitcast i16* %2194 to <16 x i16>*
  %2196 = load <16 x i16>, <16 x i16>* %2195, align 2, !tbaa !396
  %2197 = getelementptr inbounds i16, i16* %2190, i64 2
  %2198 = bitcast i16* %2197 to <16 x i16>*
  %2199 = load <16 x i16>, <16 x i16>* %2198, align 2, !tbaa !396
  %2200 = getelementptr inbounds i16, i16* %2190, i64 18
  %2201 = bitcast i16* %2200 to <16 x i16>*
  %2202 = load <16 x i16>, <16 x i16>* %2201, align 2, !tbaa !396
  %2203 = bitcast i16* %2190 to <16 x i16>*
  %2204 = load <16 x i16>, <16 x i16>* %2203, align 2, !tbaa !396
  %2205 = getelementptr inbounds i16, i16* %2190, i64 16
  %2206 = bitcast i16* %2205 to <16 x i16>*
  %2207 = load <16 x i16>, <16 x i16>* %2206, align 2, !tbaa !396
  %2208 = add <16 x i16> %2199, %2193
  %2209 = add <16 x i16> %2208, %2204
  %2210 = add <16 x i16> %2202, %2196
  %2211 = add <16 x i16> %2210, %2207
  %2212 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2209, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2213 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2211, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2214 = shufflevector <16 x i16> %2212, <16 x i16> %2213, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2215 = lshr <32 x i16> %2214, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2216 = shufflevector <32 x i16> %2215, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2217 = sext i32 %blur_x.s0.x.v1.base.s95 to i64
  %2218 = add nsw i64 %2217, %2098
  %2219 = getelementptr inbounds i16, i16* %blur_x, i64 %2218
  %2220 = bitcast i16* %2219 to <16 x i16>*
  store <16 x i16> %2216, <16 x i16>* %2220, align 2, !tbaa !399
  %2221 = shufflevector <32 x i16> %2215, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2222 = getelementptr inbounds i16, i16* %2219, i64 16
  %2223 = bitcast i16* %2222 to <16 x i16>*
  store <16 x i16> %2221, <16 x i16>* %2223, align 2, !tbaa !399
  br label %"consume blur_x96"

"consume blur_x96":                               ; preds = %"for blur_y.s0.x.x.rebased88", %"produce blur_x94"
  %2224 = sext i32 %b104 to i64
  %2225 = add nsw i64 %2101, %2224
  %2226 = getelementptr inbounds i16, i16* %blur_x, i64 %2225
  %2227 = bitcast i16* %2226 to <16 x i16>*
  %2228 = load <16 x i16>, <16 x i16>* %2227, align 2, !tbaa !399
  %2229 = getelementptr inbounds i16, i16* %2226, i64 16
  %2230 = bitcast i16* %2229 to <16 x i16>*
  %2231 = load <16 x i16>, <16 x i16>* %2230, align 2, !tbaa !399
  %2232 = add nsw i64 %2104, %2224
  %2233 = getelementptr inbounds i16, i16* %blur_x, i64 %2232
  %2234 = bitcast i16* %2233 to <16 x i16>*
  %2235 = load <16 x i16>, <16 x i16>* %2234, align 2, !tbaa !399
  %2236 = getelementptr inbounds i16, i16* %2233, i64 16
  %2237 = bitcast i16* %2236 to <16 x i16>*
  %2238 = load <16 x i16>, <16 x i16>* %2237, align 2, !tbaa !399
  %2239 = add nsw i64 %2107, %2224
  %2240 = getelementptr inbounds i16, i16* %blur_x, i64 %2239
  %2241 = bitcast i16* %2240 to <16 x i16>*
  %2242 = load <16 x i16>, <16 x i16>* %2241, align 2, !tbaa !399
  %2243 = getelementptr inbounds i16, i16* %2240, i64 16
  %2244 = bitcast i16* %2243 to <16 x i16>*
  %2245 = load <16 x i16>, <16 x i16>* %2244, align 2, !tbaa !399
  %2246 = add <16 x i16> %2235, %2228
  %2247 = add <16 x i16> %2246, %2242
  %2248 = add <16 x i16> %2238, %2231
  %2249 = add <16 x i16> %2248, %2245
  %2250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2247, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2251 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2249, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2252 = shufflevector <16 x i16> %2250, <16 x i16> %2251, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2253 = lshr <32 x i16> %2252, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2254 = shufflevector <32 x i16> %2253, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2255 = add nsw i64 %2111, %2224
  %2256 = getelementptr inbounds i16, i16* %65, i64 %2255
  %2257 = bitcast i16* %2256 to <16 x i16>*
  store <16 x i16> %2254, <16 x i16>* %2257, align 2, !tbaa !401
  %2258 = shufflevector <32 x i16> %2253, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2259 = getelementptr inbounds i16, i16* %2256, i64 16
  %2260 = bitcast i16* %2259 to <16 x i16>*
  store <16 x i16> %2258, <16 x i16>* %2260, align 2, !tbaa !401
  %2261 = add nuw nsw i32 %blur_y.s0.x.x.rebased90, 1
  %.not2642 = icmp eq i32 %2261, %t1639
  br i1 %.not2642, label %"end for blur_y.s0.x.x.rebased89", label %"for blur_y.s0.x.x.rebased88"

after_bb97:                                       ; preds = %"end for blur_y.s0.x.x.rebased89", %"produce blur_x100"
  br i1 %99, label %"for blur_y.s0.x.x.rebased102.preheader", label %"end for blur_y.s0.x.x.rebased103", !prof !386

"for blur_y.s0.x.x.rebased102.preheader":         ; preds = %after_bb97
  %2262 = sext i32 %t1638 to i64
  %2263 = zext i32 %.pre-phi3356 to i64
  %2264 = mul nsw i64 %2263, %108
  %2265 = sub nsw i64 %2264, %95
  %2266 = zext i32 %.pre-phi to i64
  %2267 = mul nsw i64 %2266, %108
  %2268 = sub nsw i64 %2267, %95
  %2269 = zext i32 %.pre-phi3350 to i64
  %2270 = mul nsw i64 %2269, %108
  %2271 = sub nsw i64 %2270, %95
  %2272 = sext i32 %a26 to i64
  %2273 = add nsw i64 %2272, 2
  %2274 = mul nsw i64 %2273, %109
  %2275 = add nsw i64 %2274, %112
  br label %"for blur_y.s0.x.x.rebased102"

"produce blur_x100":                              ; preds = %"end for blur_y.s0.x.x.rebased89"
  %2276 = getelementptr inbounds i16, i16* %read_input, i64 %115
  %2277 = getelementptr inbounds i16, i16* %2276, i64 -31
  %2278 = bitcast i16* %2277 to <16 x i16>*
  %2279 = load <16 x i16>, <16 x i16>* %2278, align 2, !tbaa !396
  %2280 = getelementptr inbounds i16, i16* %2276, i64 -15
  %2281 = bitcast i16* %2280 to <16 x i16>*
  %2282 = load <16 x i16>, <16 x i16>* %2281, align 2, !tbaa !396
  %2283 = getelementptr inbounds i16, i16* %2276, i64 -30
  %2284 = bitcast i16* %2283 to <16 x i16>*
  %2285 = load <16 x i16>, <16 x i16>* %2284, align 2, !tbaa !396
  %2286 = getelementptr inbounds i16, i16* %2276, i64 -14
  %2287 = bitcast i16* %2286 to <16 x i16>*
  %2288 = load <16 x i16>, <16 x i16>* %2287, align 2, !tbaa !396
  %2289 = getelementptr inbounds i16, i16* %2276, i64 -32
  %2290 = bitcast i16* %2289 to <16 x i16>*
  %2291 = load <16 x i16>, <16 x i16>* %2290, align 2, !tbaa !396
  %2292 = getelementptr inbounds i16, i16* %2276, i64 -16
  %2293 = bitcast i16* %2292 to <16 x i16>*
  %2294 = load <16 x i16>, <16 x i16>* %2293, align 2, !tbaa !396
  %2295 = add <16 x i16> %2285, %2279
  %2296 = add <16 x i16> %2295, %2291
  %2297 = add <16 x i16> %2288, %2282
  %2298 = add <16 x i16> %2297, %2294
  %2299 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2296, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2300 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2298, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2301 = shufflevector <16 x i16> %2299, <16 x i16> %2300, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2302 = lshr <32 x i16> %2301, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2303 = shufflevector <32 x i16> %2302, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2304 = zext i32 %.pre-phi to i64
  %2305 = mul nsw i64 %96, %2304
  %2306 = add nsw i64 %98, %2305
  %2307 = getelementptr inbounds i16, i16* %blur_x, i64 %2306
  %2308 = getelementptr inbounds i16, i16* %2307, i64 -32
  %2309 = bitcast i16* %2308 to <16 x i16>*
  store <16 x i16> %2303, <16 x i16>* %2309, align 2, !tbaa !399
  %2310 = shufflevector <32 x i16> %2302, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2311 = getelementptr inbounds i16, i16* %2307, i64 -16
  %2312 = bitcast i16* %2311 to <16 x i16>*
  store <16 x i16> %2310, <16 x i16>* %2312, align 2, !tbaa !399
  %2313 = zext i32 %.pre-phi3356 to i64
  %2314 = mul nsw i64 %2313, %108
  %2315 = add nsw i64 %2314, %93
  %2316 = getelementptr inbounds i16, i16* %blur_x, i64 %2315
  %2317 = getelementptr inbounds i16, i16* %2316, i64 -32
  %2318 = bitcast i16* %2317 to <16 x i16>*
  %2319 = load <16 x i16>, <16 x i16>* %2318, align 2, !tbaa !399
  %2320 = getelementptr inbounds i16, i16* %2316, i64 -16
  %2321 = bitcast i16* %2320 to <16 x i16>*
  %2322 = load <16 x i16>, <16 x i16>* %2321, align 2, !tbaa !399
  %2323 = mul nsw i64 %2304, %108
  %2324 = add nsw i64 %2323, %93
  %2325 = getelementptr inbounds i16, i16* %blur_x, i64 %2324
  %2326 = getelementptr inbounds i16, i16* %2325, i64 -32
  %2327 = bitcast i16* %2326 to <16 x i16>*
  %2328 = load <16 x i16>, <16 x i16>* %2327, align 2, !tbaa !399
  %2329 = getelementptr inbounds i16, i16* %2325, i64 -16
  %2330 = bitcast i16* %2329 to <16 x i16>*
  %2331 = load <16 x i16>, <16 x i16>* %2330, align 2, !tbaa !399
  %2332 = zext i32 %.pre-phi3350 to i64
  %2333 = mul nsw i64 %2332, %108
  %2334 = add nsw i64 %2333, %93
  %2335 = getelementptr inbounds i16, i16* %blur_x, i64 %2334
  %2336 = getelementptr inbounds i16, i16* %2335, i64 -32
  %2337 = bitcast i16* %2336 to <16 x i16>*
  %2338 = load <16 x i16>, <16 x i16>* %2337, align 2, !tbaa !399
  %2339 = getelementptr inbounds i16, i16* %2335, i64 -16
  %2340 = bitcast i16* %2339 to <16 x i16>*
  %2341 = load <16 x i16>, <16 x i16>* %2340, align 2, !tbaa !399
  %2342 = add <16 x i16> %2328, %2319
  %2343 = add <16 x i16> %2342, %2338
  %2344 = add <16 x i16> %2331, %2322
  %2345 = add <16 x i16> %2344, %2341
  %2346 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2343, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2347 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2345, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2348 = shufflevector <16 x i16> %2346, <16 x i16> %2347, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2349 = lshr <32 x i16> %2348, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2350 = shufflevector <32 x i16> %2349, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2351 = sext i32 %a26 to i64
  %2352 = add nsw i64 %2351, 2
  %2353 = mul nsw i64 %2352, %109
  %2354 = add nsw i64 %111, %2353
  %2355 = getelementptr inbounds i16, i16* %65, i64 %2354
  %2356 = getelementptr inbounds i16, i16* %2355, i64 -32
  %2357 = bitcast i16* %2356 to <16 x i16>*
  store <16 x i16> %2350, <16 x i16>* %2357, align 2, !tbaa !401
  %2358 = shufflevector <32 x i16> %2349, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2359 = getelementptr inbounds i16, i16* %2355, i64 -16
  %2360 = bitcast i16* %2359 to <16 x i16>*
  store <16 x i16> %2358, <16 x i16>* %2360, align 2, !tbaa !401
  br label %after_bb97

"for blur_y.s0.x.x.rebased102":                   ; preds = %"for blur_y.s0.x.x.rebased102.preheader", %"consume blur_x109"
  %indvars.iv3137 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased102.preheader" ], [ %indvars.iv.next3138, %"consume blur_x109" ]
  %2361 = add nsw i64 %indvars.iv3137, %100
  %2362 = icmp slt i64 %2361, 1
  %2363 = trunc i64 %2361 to i32
  %2364 = shl nsw i32 %2363, 5
  %2365 = icmp sgt i32 %4, %2364
  %2366 = or i1 %2362, %2365
  br i1 %2366, label %"produce blur_x108", label %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge"

"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased102"
  %.pre3359 = shl nsw i64 %2361, 5
  br label %"consume blur_x109"

"end for blur_y.s0.x.x.rebased103":               ; preds = %"consume blur_x109", %after_bb97
  br i1 %101, label %"for blur_y.s0.x.x.rebased110.preheader", label %"end for blur_y.s0.x.x.rebased111", !prof !386

"for blur_y.s0.x.x.rebased110.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased103"
  %2367 = sext i32 %t1638 to i64
  %2368 = zext i32 %.pre-phi3356 to i64
  %2369 = mul nsw i64 %2368, %108
  %2370 = sub nsw i64 %2369, %95
  %2371 = zext i32 %.pre-phi to i64
  %2372 = mul nsw i64 %2371, %108
  %2373 = sub nsw i64 %2372, %95
  %2374 = zext i32 %.pre-phi3350 to i64
  %2375 = mul nsw i64 %2374, %108
  %2376 = sub nsw i64 %2375, %95
  %2377 = sext i32 %a26 to i64
  %2378 = add nsw i64 %2377, 2
  %2379 = mul nsw i64 %2378, %109
  %2380 = add nsw i64 %2379, %112
  br label %"for blur_y.s0.x.x.rebased110"

"produce blur_x108":                              ; preds = %"for blur_y.s0.x.x.rebased102"
  %t704 = add nsw i32 %2364, %t1681
  %2381 = sext i32 %t704 to i64
  %2382 = getelementptr inbounds i16, i16* %read_input, i64 %2381
  %2383 = getelementptr inbounds i16, i16* %2382, i64 1
  %2384 = bitcast i16* %2383 to <16 x i16>*
  %2385 = load <16 x i16>, <16 x i16>* %2384, align 2, !tbaa !396
  %2386 = getelementptr inbounds i16, i16* %2382, i64 17
  %2387 = bitcast i16* %2386 to <16 x i16>*
  %2388 = load <16 x i16>, <16 x i16>* %2387, align 2, !tbaa !396
  %2389 = getelementptr inbounds i16, i16* %2382, i64 2
  %2390 = bitcast i16* %2389 to <16 x i16>*
  %2391 = load <16 x i16>, <16 x i16>* %2390, align 2, !tbaa !396
  %2392 = getelementptr inbounds i16, i16* %2382, i64 18
  %2393 = bitcast i16* %2392 to <16 x i16>*
  %2394 = load <16 x i16>, <16 x i16>* %2393, align 2, !tbaa !396
  %2395 = bitcast i16* %2382 to <16 x i16>*
  %2396 = load <16 x i16>, <16 x i16>* %2395, align 2, !tbaa !396
  %2397 = getelementptr inbounds i16, i16* %2382, i64 16
  %2398 = bitcast i16* %2397 to <16 x i16>*
  %2399 = load <16 x i16>, <16 x i16>* %2398, align 2, !tbaa !396
  %2400 = add <16 x i16> %2391, %2385
  %2401 = add <16 x i16> %2400, %2396
  %2402 = add <16 x i16> %2394, %2388
  %2403 = add <16 x i16> %2402, %2399
  %2404 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2401, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2405 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2403, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2406 = shufflevector <16 x i16> %2404, <16 x i16> %2405, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2407 = lshr <32 x i16> %2406, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2408 = shufflevector <32 x i16> %2407, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2409 = shl nsw i64 %2361, 5
  %2410 = add nsw i64 %2409, %2262
  %2411 = getelementptr inbounds i16, i16* %blur_x, i64 %2410
  %2412 = bitcast i16* %2411 to <16 x i16>*
  store <16 x i16> %2408, <16 x i16>* %2412, align 2, !tbaa !399
  %2413 = shufflevector <32 x i16> %2407, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2414 = getelementptr inbounds i16, i16* %2411, i64 16
  %2415 = bitcast i16* %2414 to <16 x i16>*
  store <16 x i16> %2413, <16 x i16>* %2415, align 2, !tbaa !399
  br label %"consume blur_x109"

"consume blur_x109":                              ; preds = %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge", %"produce blur_x108"
  %.pre-phi3360 = phi i64 [ %.pre3359, %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge" ], [ %2409, %"produce blur_x108" ]
  %2416 = add nsw i64 %2265, %.pre-phi3360
  %2417 = getelementptr inbounds i16, i16* %blur_x, i64 %2416
  %2418 = bitcast i16* %2417 to <16 x i16>*
  %2419 = load <16 x i16>, <16 x i16>* %2418, align 2, !tbaa !399
  %2420 = getelementptr inbounds i16, i16* %2417, i64 16
  %2421 = bitcast i16* %2420 to <16 x i16>*
  %2422 = load <16 x i16>, <16 x i16>* %2421, align 2, !tbaa !399
  %2423 = add nsw i64 %2268, %.pre-phi3360
  %2424 = getelementptr inbounds i16, i16* %blur_x, i64 %2423
  %2425 = bitcast i16* %2424 to <16 x i16>*
  %2426 = load <16 x i16>, <16 x i16>* %2425, align 2, !tbaa !399
  %2427 = getelementptr inbounds i16, i16* %2424, i64 16
  %2428 = bitcast i16* %2427 to <16 x i16>*
  %2429 = load <16 x i16>, <16 x i16>* %2428, align 2, !tbaa !399
  %2430 = add nsw i64 %2271, %.pre-phi3360
  %2431 = getelementptr inbounds i16, i16* %blur_x, i64 %2430
  %2432 = bitcast i16* %2431 to <16 x i16>*
  %2433 = load <16 x i16>, <16 x i16>* %2432, align 2, !tbaa !399
  %2434 = getelementptr inbounds i16, i16* %2431, i64 16
  %2435 = bitcast i16* %2434 to <16 x i16>*
  %2436 = load <16 x i16>, <16 x i16>* %2435, align 2, !tbaa !399
  %2437 = add <16 x i16> %2426, %2419
  %2438 = add <16 x i16> %2437, %2433
  %2439 = add <16 x i16> %2429, %2422
  %2440 = add <16 x i16> %2439, %2436
  %2441 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2438, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2442 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2440, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2443 = shufflevector <16 x i16> %2441, <16 x i16> %2442, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2444 = lshr <32 x i16> %2443, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2445 = shufflevector <32 x i16> %2444, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2446 = add nsw i64 %2275, %.pre-phi3360
  %2447 = getelementptr inbounds i16, i16* %65, i64 %2446
  %2448 = bitcast i16* %2447 to <16 x i16>*
  store <16 x i16> %2445, <16 x i16>* %2448, align 2, !tbaa !401
  %2449 = shufflevector <32 x i16> %2444, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2450 = getelementptr inbounds i16, i16* %2447, i64 16
  %2451 = bitcast i16* %2450 to <16 x i16>*
  store <16 x i16> %2449, <16 x i16>* %2451, align 2, !tbaa !401
  %indvars.iv.next3138 = add nuw nsw i64 %indvars.iv3137, 1
  %.not2641 = icmp eq i64 %indvars.iv.next3138, %180
  br i1 %.not2641, label %"end for blur_y.s0.x.x.rebased103", label %"for blur_y.s0.x.x.rebased102"

"for blur_y.s0.x.x.rebased110":                   ; preds = %"for blur_y.s0.x.x.rebased110.preheader", %"consume blur_x118"
  %blur_y.s0.x.x.rebased112 = phi i32 [ %2530, %"consume blur_x118" ], [ 0, %"for blur_y.s0.x.x.rebased110.preheader" ]
  %2452 = add nsw i32 %blur_y.s0.x.x.rebased112, %t1582
  %a105 = shl nsw i32 %2452, 5
  %2453 = icmp sgt i32 %a14, %a105
  %b111 = select i1 %2453, i32 %a105, i32 %a14
  %2454 = icmp slt i32 %2452, 1
  %2455 = icmp sgt i32 %4, %a105
  %2456 = or i1 %2454, %2455
  br i1 %2456, label %"produce blur_x116", label %"consume blur_x118"

"end for blur_y.s0.x.x.rebased111":               ; preds = %"consume blur_x118", %"end for blur_y.s0.x.x.rebased103"
  br i1 %34, label %"produce blur_x122", label %after_bb119

"produce blur_x116":                              ; preds = %"for blur_y.s0.x.x.rebased110"
  %2457 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s117 = select i1 %2457, i32 %b111, i32 %4
  %t709 = add nsw i32 %blur_x.s0.x.v1.base.s117, %t1681
  %2458 = sext i32 %t709 to i64
  %2459 = getelementptr inbounds i16, i16* %read_input, i64 %2458
  %2460 = getelementptr inbounds i16, i16* %2459, i64 1
  %2461 = bitcast i16* %2460 to <16 x i16>*
  %2462 = load <16 x i16>, <16 x i16>* %2461, align 2, !tbaa !396
  %2463 = getelementptr inbounds i16, i16* %2459, i64 17
  %2464 = bitcast i16* %2463 to <16 x i16>*
  %2465 = load <16 x i16>, <16 x i16>* %2464, align 2, !tbaa !396
  %2466 = getelementptr inbounds i16, i16* %2459, i64 2
  %2467 = bitcast i16* %2466 to <16 x i16>*
  %2468 = load <16 x i16>, <16 x i16>* %2467, align 2, !tbaa !396
  %2469 = getelementptr inbounds i16, i16* %2459, i64 18
  %2470 = bitcast i16* %2469 to <16 x i16>*
  %2471 = load <16 x i16>, <16 x i16>* %2470, align 2, !tbaa !396
  %2472 = bitcast i16* %2459 to <16 x i16>*
  %2473 = load <16 x i16>, <16 x i16>* %2472, align 2, !tbaa !396
  %2474 = getelementptr inbounds i16, i16* %2459, i64 16
  %2475 = bitcast i16* %2474 to <16 x i16>*
  %2476 = load <16 x i16>, <16 x i16>* %2475, align 2, !tbaa !396
  %2477 = add <16 x i16> %2468, %2462
  %2478 = add <16 x i16> %2477, %2473
  %2479 = add <16 x i16> %2471, %2465
  %2480 = add <16 x i16> %2479, %2476
  %2481 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2478, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2482 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2480, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2483 = shufflevector <16 x i16> %2481, <16 x i16> %2482, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2484 = lshr <32 x i16> %2483, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2485 = shufflevector <32 x i16> %2484, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2486 = sext i32 %blur_x.s0.x.v1.base.s117 to i64
  %2487 = add nsw i64 %2486, %2367
  %2488 = getelementptr inbounds i16, i16* %blur_x, i64 %2487
  %2489 = bitcast i16* %2488 to <16 x i16>*
  store <16 x i16> %2485, <16 x i16>* %2489, align 2, !tbaa !399
  %2490 = shufflevector <32 x i16> %2484, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2491 = getelementptr inbounds i16, i16* %2488, i64 16
  %2492 = bitcast i16* %2491 to <16 x i16>*
  store <16 x i16> %2490, <16 x i16>* %2492, align 2, !tbaa !399
  br label %"consume blur_x118"

"consume blur_x118":                              ; preds = %"for blur_y.s0.x.x.rebased110", %"produce blur_x116"
  %2493 = sext i32 %b111 to i64
  %2494 = add nsw i64 %2370, %2493
  %2495 = getelementptr inbounds i16, i16* %blur_x, i64 %2494
  %2496 = bitcast i16* %2495 to <16 x i16>*
  %2497 = load <16 x i16>, <16 x i16>* %2496, align 2, !tbaa !399
  %2498 = getelementptr inbounds i16, i16* %2495, i64 16
  %2499 = bitcast i16* %2498 to <16 x i16>*
  %2500 = load <16 x i16>, <16 x i16>* %2499, align 2, !tbaa !399
  %2501 = add nsw i64 %2373, %2493
  %2502 = getelementptr inbounds i16, i16* %blur_x, i64 %2501
  %2503 = bitcast i16* %2502 to <16 x i16>*
  %2504 = load <16 x i16>, <16 x i16>* %2503, align 2, !tbaa !399
  %2505 = getelementptr inbounds i16, i16* %2502, i64 16
  %2506 = bitcast i16* %2505 to <16 x i16>*
  %2507 = load <16 x i16>, <16 x i16>* %2506, align 2, !tbaa !399
  %2508 = add nsw i64 %2376, %2493
  %2509 = getelementptr inbounds i16, i16* %blur_x, i64 %2508
  %2510 = bitcast i16* %2509 to <16 x i16>*
  %2511 = load <16 x i16>, <16 x i16>* %2510, align 2, !tbaa !399
  %2512 = getelementptr inbounds i16, i16* %2509, i64 16
  %2513 = bitcast i16* %2512 to <16 x i16>*
  %2514 = load <16 x i16>, <16 x i16>* %2513, align 2, !tbaa !399
  %2515 = add <16 x i16> %2504, %2497
  %2516 = add <16 x i16> %2515, %2511
  %2517 = add <16 x i16> %2507, %2500
  %2518 = add <16 x i16> %2517, %2514
  %2519 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2516, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2520 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2518, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2521 = shufflevector <16 x i16> %2519, <16 x i16> %2520, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2522 = lshr <32 x i16> %2521, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2523 = shufflevector <32 x i16> %2522, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2524 = add nsw i64 %2380, %2493
  %2525 = getelementptr inbounds i16, i16* %65, i64 %2524
  %2526 = bitcast i16* %2525 to <16 x i16>*
  store <16 x i16> %2523, <16 x i16>* %2526, align 2, !tbaa !401
  %2527 = shufflevector <32 x i16> %2522, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2528 = getelementptr inbounds i16, i16* %2525, i64 16
  %2529 = bitcast i16* %2528 to <16 x i16>*
  store <16 x i16> %2527, <16 x i16>* %2529, align 2, !tbaa !401
  %2530 = add nuw nsw i32 %blur_y.s0.x.x.rebased112, 1
  %.not2640 = icmp eq i32 %2530, %t1639
  br i1 %.not2640, label %"end for blur_y.s0.x.x.rebased111", label %"for blur_y.s0.x.x.rebased110"

after_bb119:                                      ; preds = %"end for blur_y.s0.x.x.rebased111", %"produce blur_x122"
  br i1 %99, label %"for blur_y.s0.x.x.rebased124.preheader", label %"end for blur_y.s0.x.x.rebased125", !prof !386

"for blur_y.s0.x.x.rebased124.preheader":         ; preds = %after_bb119
  %2531 = sext i32 %t1644 to i64
  %2532 = zext i32 %.pre-phi to i64
  %2533 = mul nsw i64 %2532, %108
  %2534 = sub nsw i64 %2533, %95
  %2535 = zext i32 %.pre-phi3346 to i64
  %2536 = mul nsw i64 %2535, %108
  %2537 = sub nsw i64 %2536, %95
  %2538 = zext i32 %.pre-phi3356 to i64
  %2539 = mul nsw i64 %2538, %108
  %2540 = sub nsw i64 %2539, %95
  %2541 = sext i32 %a26 to i64
  %2542 = add nsw i64 %2541, 3
  %2543 = mul nsw i64 %2542, %109
  %2544 = add nsw i64 %2543, %112
  br label %"for blur_y.s0.x.x.rebased124"

"produce blur_x122":                              ; preds = %"end for blur_y.s0.x.x.rebased111"
  %2545 = getelementptr inbounds i16, i16* %read_input, i64 %117
  %2546 = getelementptr inbounds i16, i16* %2545, i64 -31
  %2547 = bitcast i16* %2546 to <16 x i16>*
  %2548 = load <16 x i16>, <16 x i16>* %2547, align 2, !tbaa !396
  %2549 = getelementptr inbounds i16, i16* %2545, i64 -15
  %2550 = bitcast i16* %2549 to <16 x i16>*
  %2551 = load <16 x i16>, <16 x i16>* %2550, align 2, !tbaa !396
  %2552 = getelementptr inbounds i16, i16* %2545, i64 -30
  %2553 = bitcast i16* %2552 to <16 x i16>*
  %2554 = load <16 x i16>, <16 x i16>* %2553, align 2, !tbaa !396
  %2555 = getelementptr inbounds i16, i16* %2545, i64 -14
  %2556 = bitcast i16* %2555 to <16 x i16>*
  %2557 = load <16 x i16>, <16 x i16>* %2556, align 2, !tbaa !396
  %2558 = getelementptr inbounds i16, i16* %2545, i64 -32
  %2559 = bitcast i16* %2558 to <16 x i16>*
  %2560 = load <16 x i16>, <16 x i16>* %2559, align 2, !tbaa !396
  %2561 = getelementptr inbounds i16, i16* %2545, i64 -16
  %2562 = bitcast i16* %2561 to <16 x i16>*
  %2563 = load <16 x i16>, <16 x i16>* %2562, align 2, !tbaa !396
  %2564 = add <16 x i16> %2554, %2548
  %2565 = add <16 x i16> %2564, %2560
  %2566 = add <16 x i16> %2557, %2551
  %2567 = add <16 x i16> %2566, %2563
  %2568 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2565, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2567, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2570 = shufflevector <16 x i16> %2568, <16 x i16> %2569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2571 = lshr <32 x i16> %2570, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2572 = shufflevector <32 x i16> %2571, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2573 = zext i32 %.pre-phi3346 to i64
  %2574 = mul nsw i64 %96, %2573
  %2575 = add nsw i64 %98, %2574
  %2576 = getelementptr inbounds i16, i16* %blur_x, i64 %2575
  %2577 = getelementptr inbounds i16, i16* %2576, i64 -32
  %2578 = bitcast i16* %2577 to <16 x i16>*
  store <16 x i16> %2572, <16 x i16>* %2578, align 2, !tbaa !399
  %2579 = shufflevector <32 x i16> %2571, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2580 = getelementptr inbounds i16, i16* %2576, i64 -16
  %2581 = bitcast i16* %2580 to <16 x i16>*
  store <16 x i16> %2579, <16 x i16>* %2581, align 2, !tbaa !399
  %2582 = zext i32 %.pre-phi to i64
  %2583 = mul nsw i64 %2582, %108
  %2584 = add nsw i64 %2583, %93
  %2585 = getelementptr inbounds i16, i16* %blur_x, i64 %2584
  %2586 = getelementptr inbounds i16, i16* %2585, i64 -32
  %2587 = bitcast i16* %2586 to <16 x i16>*
  %2588 = load <16 x i16>, <16 x i16>* %2587, align 2, !tbaa !399
  %2589 = getelementptr inbounds i16, i16* %2585, i64 -16
  %2590 = bitcast i16* %2589 to <16 x i16>*
  %2591 = load <16 x i16>, <16 x i16>* %2590, align 2, !tbaa !399
  %2592 = mul nsw i64 %2573, %108
  %2593 = add nsw i64 %2592, %93
  %2594 = getelementptr inbounds i16, i16* %blur_x, i64 %2593
  %2595 = getelementptr inbounds i16, i16* %2594, i64 -32
  %2596 = bitcast i16* %2595 to <16 x i16>*
  %2597 = load <16 x i16>, <16 x i16>* %2596, align 2, !tbaa !399
  %2598 = getelementptr inbounds i16, i16* %2594, i64 -16
  %2599 = bitcast i16* %2598 to <16 x i16>*
  %2600 = load <16 x i16>, <16 x i16>* %2599, align 2, !tbaa !399
  %2601 = zext i32 %.pre-phi3356 to i64
  %2602 = mul nsw i64 %2601, %108
  %2603 = add nsw i64 %2602, %93
  %2604 = getelementptr inbounds i16, i16* %blur_x, i64 %2603
  %2605 = getelementptr inbounds i16, i16* %2604, i64 -32
  %2606 = bitcast i16* %2605 to <16 x i16>*
  %2607 = load <16 x i16>, <16 x i16>* %2606, align 2, !tbaa !399
  %2608 = getelementptr inbounds i16, i16* %2604, i64 -16
  %2609 = bitcast i16* %2608 to <16 x i16>*
  %2610 = load <16 x i16>, <16 x i16>* %2609, align 2, !tbaa !399
  %2611 = add <16 x i16> %2597, %2588
  %2612 = add <16 x i16> %2611, %2607
  %2613 = add <16 x i16> %2600, %2591
  %2614 = add <16 x i16> %2613, %2610
  %2615 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2612, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2616 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2614, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2617 = shufflevector <16 x i16> %2615, <16 x i16> %2616, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2618 = lshr <32 x i16> %2617, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2619 = shufflevector <32 x i16> %2618, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2620 = sext i32 %a26 to i64
  %2621 = add nsw i64 %2620, 3
  %2622 = mul nsw i64 %2621, %109
  %2623 = add nsw i64 %111, %2622
  %2624 = getelementptr inbounds i16, i16* %65, i64 %2623
  %2625 = getelementptr inbounds i16, i16* %2624, i64 -32
  %2626 = bitcast i16* %2625 to <16 x i16>*
  store <16 x i16> %2619, <16 x i16>* %2626, align 2, !tbaa !401
  %2627 = shufflevector <32 x i16> %2618, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2628 = getelementptr inbounds i16, i16* %2624, i64 -16
  %2629 = bitcast i16* %2628 to <16 x i16>*
  store <16 x i16> %2627, <16 x i16>* %2629, align 2, !tbaa !401
  br label %after_bb119

"for blur_y.s0.x.x.rebased124":                   ; preds = %"for blur_y.s0.x.x.rebased124.preheader", %"consume blur_x131"
  %indvars.iv3140 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased124.preheader" ], [ %indvars.iv.next3141, %"consume blur_x131" ]
  %2630 = add nsw i64 %indvars.iv3140, %100
  %2631 = icmp slt i64 %2630, 1
  %2632 = trunc i64 %2630 to i32
  %2633 = shl nsw i32 %2632, 5
  %2634 = icmp sgt i32 %4, %2633
  %2635 = or i1 %2631, %2634
  br i1 %2635, label %"produce blur_x130", label %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge"

"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased124"
  %.pre3361 = shl nsw i64 %2630, 5
  br label %"consume blur_x131"

"end for blur_y.s0.x.x.rebased125":               ; preds = %"consume blur_x131", %after_bb119
  br i1 %101, label %"for blur_y.s0.x.x.rebased132.preheader", label %"end for blur_y.s0.x.x.rebased133", !prof !386

"for blur_y.s0.x.x.rebased132.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased125"
  %2636 = sext i32 %t1644 to i64
  %2637 = zext i32 %.pre-phi to i64
  %2638 = mul nsw i64 %2637, %108
  %2639 = sub nsw i64 %2638, %95
  %2640 = zext i32 %.pre-phi3346 to i64
  %2641 = mul nsw i64 %2640, %108
  %2642 = sub nsw i64 %2641, %95
  %2643 = zext i32 %.pre-phi3356 to i64
  %2644 = mul nsw i64 %2643, %108
  %2645 = sub nsw i64 %2644, %95
  %2646 = sext i32 %a26 to i64
  %2647 = add nsw i64 %2646, 3
  %2648 = mul nsw i64 %2647, %109
  %2649 = add nsw i64 %2648, %112
  br label %"for blur_y.s0.x.x.rebased132"

"produce blur_x130":                              ; preds = %"for blur_y.s0.x.x.rebased124"
  %t720 = add nsw i32 %2633, %t1697
  %2650 = sext i32 %t720 to i64
  %2651 = getelementptr inbounds i16, i16* %read_input, i64 %2650
  %2652 = getelementptr inbounds i16, i16* %2651, i64 1
  %2653 = bitcast i16* %2652 to <16 x i16>*
  %2654 = load <16 x i16>, <16 x i16>* %2653, align 2, !tbaa !396
  %2655 = getelementptr inbounds i16, i16* %2651, i64 17
  %2656 = bitcast i16* %2655 to <16 x i16>*
  %2657 = load <16 x i16>, <16 x i16>* %2656, align 2, !tbaa !396
  %2658 = getelementptr inbounds i16, i16* %2651, i64 2
  %2659 = bitcast i16* %2658 to <16 x i16>*
  %2660 = load <16 x i16>, <16 x i16>* %2659, align 2, !tbaa !396
  %2661 = getelementptr inbounds i16, i16* %2651, i64 18
  %2662 = bitcast i16* %2661 to <16 x i16>*
  %2663 = load <16 x i16>, <16 x i16>* %2662, align 2, !tbaa !396
  %2664 = bitcast i16* %2651 to <16 x i16>*
  %2665 = load <16 x i16>, <16 x i16>* %2664, align 2, !tbaa !396
  %2666 = getelementptr inbounds i16, i16* %2651, i64 16
  %2667 = bitcast i16* %2666 to <16 x i16>*
  %2668 = load <16 x i16>, <16 x i16>* %2667, align 2, !tbaa !396
  %2669 = add <16 x i16> %2660, %2654
  %2670 = add <16 x i16> %2669, %2665
  %2671 = add <16 x i16> %2663, %2657
  %2672 = add <16 x i16> %2671, %2668
  %2673 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2670, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2674 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2672, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2675 = shufflevector <16 x i16> %2673, <16 x i16> %2674, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2676 = lshr <32 x i16> %2675, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2677 = shufflevector <32 x i16> %2676, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2678 = shl nsw i64 %2630, 5
  %2679 = add nsw i64 %2678, %2531
  %2680 = getelementptr inbounds i16, i16* %blur_x, i64 %2679
  %2681 = bitcast i16* %2680 to <16 x i16>*
  store <16 x i16> %2677, <16 x i16>* %2681, align 2, !tbaa !399
  %2682 = shufflevector <32 x i16> %2676, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2683 = getelementptr inbounds i16, i16* %2680, i64 16
  %2684 = bitcast i16* %2683 to <16 x i16>*
  store <16 x i16> %2682, <16 x i16>* %2684, align 2, !tbaa !399
  br label %"consume blur_x131"

"consume blur_x131":                              ; preds = %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge", %"produce blur_x130"
  %.pre-phi3362 = phi i64 [ %.pre3361, %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge" ], [ %2678, %"produce blur_x130" ]
  %2685 = add nsw i64 %2534, %.pre-phi3362
  %2686 = getelementptr inbounds i16, i16* %blur_x, i64 %2685
  %2687 = bitcast i16* %2686 to <16 x i16>*
  %2688 = load <16 x i16>, <16 x i16>* %2687, align 2, !tbaa !399
  %2689 = getelementptr inbounds i16, i16* %2686, i64 16
  %2690 = bitcast i16* %2689 to <16 x i16>*
  %2691 = load <16 x i16>, <16 x i16>* %2690, align 2, !tbaa !399
  %2692 = add nsw i64 %2537, %.pre-phi3362
  %2693 = getelementptr inbounds i16, i16* %blur_x, i64 %2692
  %2694 = bitcast i16* %2693 to <16 x i16>*
  %2695 = load <16 x i16>, <16 x i16>* %2694, align 2, !tbaa !399
  %2696 = getelementptr inbounds i16, i16* %2693, i64 16
  %2697 = bitcast i16* %2696 to <16 x i16>*
  %2698 = load <16 x i16>, <16 x i16>* %2697, align 2, !tbaa !399
  %2699 = add nsw i64 %2540, %.pre-phi3362
  %2700 = getelementptr inbounds i16, i16* %blur_x, i64 %2699
  %2701 = bitcast i16* %2700 to <16 x i16>*
  %2702 = load <16 x i16>, <16 x i16>* %2701, align 2, !tbaa !399
  %2703 = getelementptr inbounds i16, i16* %2700, i64 16
  %2704 = bitcast i16* %2703 to <16 x i16>*
  %2705 = load <16 x i16>, <16 x i16>* %2704, align 2, !tbaa !399
  %2706 = add <16 x i16> %2695, %2688
  %2707 = add <16 x i16> %2706, %2702
  %2708 = add <16 x i16> %2698, %2691
  %2709 = add <16 x i16> %2708, %2705
  %2710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2707, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2709, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2712 = shufflevector <16 x i16> %2710, <16 x i16> %2711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2713 = lshr <32 x i16> %2712, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2714 = shufflevector <32 x i16> %2713, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2715 = add nsw i64 %2544, %.pre-phi3362
  %2716 = getelementptr inbounds i16, i16* %65, i64 %2715
  %2717 = bitcast i16* %2716 to <16 x i16>*
  store <16 x i16> %2714, <16 x i16>* %2717, align 2, !tbaa !401
  %2718 = shufflevector <32 x i16> %2713, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2719 = getelementptr inbounds i16, i16* %2716, i64 16
  %2720 = bitcast i16* %2719 to <16 x i16>*
  store <16 x i16> %2718, <16 x i16>* %2720, align 2, !tbaa !401
  %indvars.iv.next3141 = add nuw nsw i64 %indvars.iv3140, 1
  %.not2639 = icmp eq i64 %indvars.iv.next3141, %180
  br i1 %.not2639, label %"end for blur_y.s0.x.x.rebased125", label %"for blur_y.s0.x.x.rebased124"

"for blur_y.s0.x.x.rebased132":                   ; preds = %"for blur_y.s0.x.x.rebased132.preheader", %"consume blur_x140"
  %blur_y.s0.x.x.rebased134 = phi i32 [ %2799, %"consume blur_x140" ], [ 0, %"for blur_y.s0.x.x.rebased132.preheader" ]
  %2721 = add nsw i32 %blur_y.s0.x.x.rebased134, %t1582
  %a112 = shl nsw i32 %2721, 5
  %2722 = icmp sgt i32 %a14, %a112
  %b118 = select i1 %2722, i32 %a112, i32 %a14
  %2723 = icmp slt i32 %2721, 1
  %2724 = icmp sgt i32 %4, %a112
  %2725 = or i1 %2723, %2724
  br i1 %2725, label %"produce blur_x138", label %"consume blur_x140"

"end for blur_y.s0.x.x.rebased133":               ; preds = %"consume blur_x140", %"end for blur_y.s0.x.x.rebased125"
  br i1 %34, label %"produce blur_x144", label %after_bb141

"produce blur_x138":                              ; preds = %"for blur_y.s0.x.x.rebased132"
  %2726 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s139 = select i1 %2726, i32 %b118, i32 %4
  %t725 = add nsw i32 %blur_x.s0.x.v1.base.s139, %t1697
  %2727 = sext i32 %t725 to i64
  %2728 = getelementptr inbounds i16, i16* %read_input, i64 %2727
  %2729 = getelementptr inbounds i16, i16* %2728, i64 1
  %2730 = bitcast i16* %2729 to <16 x i16>*
  %2731 = load <16 x i16>, <16 x i16>* %2730, align 2, !tbaa !396
  %2732 = getelementptr inbounds i16, i16* %2728, i64 17
  %2733 = bitcast i16* %2732 to <16 x i16>*
  %2734 = load <16 x i16>, <16 x i16>* %2733, align 2, !tbaa !396
  %2735 = getelementptr inbounds i16, i16* %2728, i64 2
  %2736 = bitcast i16* %2735 to <16 x i16>*
  %2737 = load <16 x i16>, <16 x i16>* %2736, align 2, !tbaa !396
  %2738 = getelementptr inbounds i16, i16* %2728, i64 18
  %2739 = bitcast i16* %2738 to <16 x i16>*
  %2740 = load <16 x i16>, <16 x i16>* %2739, align 2, !tbaa !396
  %2741 = bitcast i16* %2728 to <16 x i16>*
  %2742 = load <16 x i16>, <16 x i16>* %2741, align 2, !tbaa !396
  %2743 = getelementptr inbounds i16, i16* %2728, i64 16
  %2744 = bitcast i16* %2743 to <16 x i16>*
  %2745 = load <16 x i16>, <16 x i16>* %2744, align 2, !tbaa !396
  %2746 = add <16 x i16> %2737, %2731
  %2747 = add <16 x i16> %2746, %2742
  %2748 = add <16 x i16> %2740, %2734
  %2749 = add <16 x i16> %2748, %2745
  %2750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2747, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2749, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2752 = shufflevector <16 x i16> %2750, <16 x i16> %2751, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2753 = lshr <32 x i16> %2752, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2754 = shufflevector <32 x i16> %2753, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2755 = sext i32 %blur_x.s0.x.v1.base.s139 to i64
  %2756 = add nsw i64 %2755, %2636
  %2757 = getelementptr inbounds i16, i16* %blur_x, i64 %2756
  %2758 = bitcast i16* %2757 to <16 x i16>*
  store <16 x i16> %2754, <16 x i16>* %2758, align 2, !tbaa !399
  %2759 = shufflevector <32 x i16> %2753, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2760 = getelementptr inbounds i16, i16* %2757, i64 16
  %2761 = bitcast i16* %2760 to <16 x i16>*
  store <16 x i16> %2759, <16 x i16>* %2761, align 2, !tbaa !399
  br label %"consume blur_x140"

"consume blur_x140":                              ; preds = %"for blur_y.s0.x.x.rebased132", %"produce blur_x138"
  %2762 = sext i32 %b118 to i64
  %2763 = add nsw i64 %2639, %2762
  %2764 = getelementptr inbounds i16, i16* %blur_x, i64 %2763
  %2765 = bitcast i16* %2764 to <16 x i16>*
  %2766 = load <16 x i16>, <16 x i16>* %2765, align 2, !tbaa !399
  %2767 = getelementptr inbounds i16, i16* %2764, i64 16
  %2768 = bitcast i16* %2767 to <16 x i16>*
  %2769 = load <16 x i16>, <16 x i16>* %2768, align 2, !tbaa !399
  %2770 = add nsw i64 %2642, %2762
  %2771 = getelementptr inbounds i16, i16* %blur_x, i64 %2770
  %2772 = bitcast i16* %2771 to <16 x i16>*
  %2773 = load <16 x i16>, <16 x i16>* %2772, align 2, !tbaa !399
  %2774 = getelementptr inbounds i16, i16* %2771, i64 16
  %2775 = bitcast i16* %2774 to <16 x i16>*
  %2776 = load <16 x i16>, <16 x i16>* %2775, align 2, !tbaa !399
  %2777 = add nsw i64 %2645, %2762
  %2778 = getelementptr inbounds i16, i16* %blur_x, i64 %2777
  %2779 = bitcast i16* %2778 to <16 x i16>*
  %2780 = load <16 x i16>, <16 x i16>* %2779, align 2, !tbaa !399
  %2781 = getelementptr inbounds i16, i16* %2778, i64 16
  %2782 = bitcast i16* %2781 to <16 x i16>*
  %2783 = load <16 x i16>, <16 x i16>* %2782, align 2, !tbaa !399
  %2784 = add <16 x i16> %2773, %2766
  %2785 = add <16 x i16> %2784, %2780
  %2786 = add <16 x i16> %2776, %2769
  %2787 = add <16 x i16> %2786, %2783
  %2788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2785, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2787, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2790 = shufflevector <16 x i16> %2788, <16 x i16> %2789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2791 = lshr <32 x i16> %2790, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2792 = shufflevector <32 x i16> %2791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2793 = add nsw i64 %2649, %2762
  %2794 = getelementptr inbounds i16, i16* %65, i64 %2793
  %2795 = bitcast i16* %2794 to <16 x i16>*
  store <16 x i16> %2792, <16 x i16>* %2795, align 2, !tbaa !401
  %2796 = shufflevector <32 x i16> %2791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2797 = getelementptr inbounds i16, i16* %2794, i64 16
  %2798 = bitcast i16* %2797 to <16 x i16>*
  store <16 x i16> %2796, <16 x i16>* %2798, align 2, !tbaa !401
  %2799 = add nuw nsw i32 %blur_y.s0.x.x.rebased134, 1
  %.not2638 = icmp eq i32 %2799, %t1639
  br i1 %.not2638, label %"end for blur_y.s0.x.x.rebased133", label %"for blur_y.s0.x.x.rebased132"

after_bb141:                                      ; preds = %"end for blur_y.s0.x.x.rebased133", %"produce blur_x144"
  br i1 %99, label %"for blur_y.s0.x.x.rebased146.preheader", label %"end for blur_y.s0.x.x.rebased147", !prof !386

"for blur_y.s0.x.x.rebased146.preheader":         ; preds = %after_bb141
  %2800 = sext i32 %t1650 to i64
  %2801 = zext i32 %.pre-phi3346 to i64
  %2802 = mul nsw i64 %2801, %108
  %2803 = sub nsw i64 %2802, %95
  %2804 = zext i32 %.pre-phi3350 to i64
  %2805 = mul nsw i64 %2804, %108
  %2806 = sub nsw i64 %2805, %95
  %2807 = zext i32 %.pre-phi to i64
  %2808 = mul nsw i64 %2807, %108
  %2809 = sub nsw i64 %2808, %95
  %2810 = sext i32 %a26 to i64
  %2811 = add nsw i64 %2810, 4
  %2812 = mul nsw i64 %2811, %109
  %2813 = add nsw i64 %2812, %112
  br label %"for blur_y.s0.x.x.rebased146"

"produce blur_x144":                              ; preds = %"end for blur_y.s0.x.x.rebased133"
  %2814 = getelementptr inbounds i16, i16* %read_input, i64 %119
  %2815 = getelementptr inbounds i16, i16* %2814, i64 -31
  %2816 = bitcast i16* %2815 to <16 x i16>*
  %2817 = load <16 x i16>, <16 x i16>* %2816, align 2, !tbaa !396
  %2818 = getelementptr inbounds i16, i16* %2814, i64 -15
  %2819 = bitcast i16* %2818 to <16 x i16>*
  %2820 = load <16 x i16>, <16 x i16>* %2819, align 2, !tbaa !396
  %2821 = getelementptr inbounds i16, i16* %2814, i64 -30
  %2822 = bitcast i16* %2821 to <16 x i16>*
  %2823 = load <16 x i16>, <16 x i16>* %2822, align 2, !tbaa !396
  %2824 = getelementptr inbounds i16, i16* %2814, i64 -14
  %2825 = bitcast i16* %2824 to <16 x i16>*
  %2826 = load <16 x i16>, <16 x i16>* %2825, align 2, !tbaa !396
  %2827 = getelementptr inbounds i16, i16* %2814, i64 -32
  %2828 = bitcast i16* %2827 to <16 x i16>*
  %2829 = load <16 x i16>, <16 x i16>* %2828, align 2, !tbaa !396
  %2830 = getelementptr inbounds i16, i16* %2814, i64 -16
  %2831 = bitcast i16* %2830 to <16 x i16>*
  %2832 = load <16 x i16>, <16 x i16>* %2831, align 2, !tbaa !396
  %2833 = add <16 x i16> %2823, %2817
  %2834 = add <16 x i16> %2833, %2829
  %2835 = add <16 x i16> %2826, %2820
  %2836 = add <16 x i16> %2835, %2832
  %2837 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2834, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2838 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2836, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2839 = shufflevector <16 x i16> %2837, <16 x i16> %2838, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2840 = lshr <32 x i16> %2839, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2841 = shufflevector <32 x i16> %2840, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2842 = zext i32 %.pre-phi3350 to i64
  %2843 = mul nsw i64 %96, %2842
  %2844 = add nsw i64 %98, %2843
  %2845 = getelementptr inbounds i16, i16* %blur_x, i64 %2844
  %2846 = getelementptr inbounds i16, i16* %2845, i64 -32
  %2847 = bitcast i16* %2846 to <16 x i16>*
  store <16 x i16> %2841, <16 x i16>* %2847, align 2, !tbaa !399
  %2848 = shufflevector <32 x i16> %2840, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2849 = getelementptr inbounds i16, i16* %2845, i64 -16
  %2850 = bitcast i16* %2849 to <16 x i16>*
  store <16 x i16> %2848, <16 x i16>* %2850, align 2, !tbaa !399
  %2851 = zext i32 %.pre-phi3346 to i64
  %2852 = mul nsw i64 %2851, %108
  %2853 = add nsw i64 %2852, %93
  %2854 = getelementptr inbounds i16, i16* %blur_x, i64 %2853
  %2855 = getelementptr inbounds i16, i16* %2854, i64 -32
  %2856 = bitcast i16* %2855 to <16 x i16>*
  %2857 = load <16 x i16>, <16 x i16>* %2856, align 2, !tbaa !399
  %2858 = getelementptr inbounds i16, i16* %2854, i64 -16
  %2859 = bitcast i16* %2858 to <16 x i16>*
  %2860 = load <16 x i16>, <16 x i16>* %2859, align 2, !tbaa !399
  %2861 = mul nsw i64 %2842, %108
  %2862 = add nsw i64 %2861, %93
  %2863 = getelementptr inbounds i16, i16* %blur_x, i64 %2862
  %2864 = getelementptr inbounds i16, i16* %2863, i64 -32
  %2865 = bitcast i16* %2864 to <16 x i16>*
  %2866 = load <16 x i16>, <16 x i16>* %2865, align 2, !tbaa !399
  %2867 = getelementptr inbounds i16, i16* %2863, i64 -16
  %2868 = bitcast i16* %2867 to <16 x i16>*
  %2869 = load <16 x i16>, <16 x i16>* %2868, align 2, !tbaa !399
  %2870 = zext i32 %.pre-phi to i64
  %2871 = mul nsw i64 %2870, %108
  %2872 = add nsw i64 %2871, %93
  %2873 = getelementptr inbounds i16, i16* %blur_x, i64 %2872
  %2874 = getelementptr inbounds i16, i16* %2873, i64 -32
  %2875 = bitcast i16* %2874 to <16 x i16>*
  %2876 = load <16 x i16>, <16 x i16>* %2875, align 2, !tbaa !399
  %2877 = getelementptr inbounds i16, i16* %2873, i64 -16
  %2878 = bitcast i16* %2877 to <16 x i16>*
  %2879 = load <16 x i16>, <16 x i16>* %2878, align 2, !tbaa !399
  %2880 = add <16 x i16> %2866, %2857
  %2881 = add <16 x i16> %2880, %2876
  %2882 = add <16 x i16> %2869, %2860
  %2883 = add <16 x i16> %2882, %2879
  %2884 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2881, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2885 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2883, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2886 = shufflevector <16 x i16> %2884, <16 x i16> %2885, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2887 = lshr <32 x i16> %2886, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2888 = shufflevector <32 x i16> %2887, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2889 = sext i32 %a26 to i64
  %2890 = add nsw i64 %2889, 4
  %2891 = mul nsw i64 %2890, %109
  %2892 = add nsw i64 %111, %2891
  %2893 = getelementptr inbounds i16, i16* %65, i64 %2892
  %2894 = getelementptr inbounds i16, i16* %2893, i64 -32
  %2895 = bitcast i16* %2894 to <16 x i16>*
  store <16 x i16> %2888, <16 x i16>* %2895, align 2, !tbaa !401
  %2896 = shufflevector <32 x i16> %2887, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2897 = getelementptr inbounds i16, i16* %2893, i64 -16
  %2898 = bitcast i16* %2897 to <16 x i16>*
  store <16 x i16> %2896, <16 x i16>* %2898, align 2, !tbaa !401
  br label %after_bb141

"for blur_y.s0.x.x.rebased146":                   ; preds = %"for blur_y.s0.x.x.rebased146.preheader", %"consume blur_x153"
  %indvars.iv3143 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased146.preheader" ], [ %indvars.iv.next3144, %"consume blur_x153" ]
  %2899 = add nsw i64 %indvars.iv3143, %100
  %2900 = icmp slt i64 %2899, 1
  %2901 = trunc i64 %2899 to i32
  %2902 = shl nsw i32 %2901, 5
  %2903 = icmp sgt i32 %4, %2902
  %2904 = or i1 %2900, %2903
  br i1 %2904, label %"produce blur_x152", label %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge"

"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased146"
  %.pre3363 = shl nsw i64 %2899, 5
  br label %"consume blur_x153"

"end for blur_y.s0.x.x.rebased147":               ; preds = %"consume blur_x153", %after_bb141
  br i1 %101, label %"for blur_y.s0.x.x.rebased154.preheader", label %"end for blur_y.s0.x.x.rebased155", !prof !386

"for blur_y.s0.x.x.rebased154.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased147"
  %2905 = sext i32 %t1650 to i64
  %2906 = zext i32 %.pre-phi3346 to i64
  %2907 = mul nsw i64 %2906, %108
  %2908 = sub nsw i64 %2907, %95
  %2909 = zext i32 %.pre-phi3350 to i64
  %2910 = mul nsw i64 %2909, %108
  %2911 = sub nsw i64 %2910, %95
  %2912 = zext i32 %.pre-phi to i64
  %2913 = mul nsw i64 %2912, %108
  %2914 = sub nsw i64 %2913, %95
  %2915 = sext i32 %a26 to i64
  %2916 = add nsw i64 %2915, 4
  %2917 = mul nsw i64 %2916, %109
  %2918 = add nsw i64 %2917, %112
  br label %"for blur_y.s0.x.x.rebased154"

"produce blur_x152":                              ; preds = %"for blur_y.s0.x.x.rebased146"
  %t736 = add nsw i32 %2902, %t1713
  %2919 = sext i32 %t736 to i64
  %2920 = getelementptr inbounds i16, i16* %read_input, i64 %2919
  %2921 = getelementptr inbounds i16, i16* %2920, i64 1
  %2922 = bitcast i16* %2921 to <16 x i16>*
  %2923 = load <16 x i16>, <16 x i16>* %2922, align 2, !tbaa !396
  %2924 = getelementptr inbounds i16, i16* %2920, i64 17
  %2925 = bitcast i16* %2924 to <16 x i16>*
  %2926 = load <16 x i16>, <16 x i16>* %2925, align 2, !tbaa !396
  %2927 = getelementptr inbounds i16, i16* %2920, i64 2
  %2928 = bitcast i16* %2927 to <16 x i16>*
  %2929 = load <16 x i16>, <16 x i16>* %2928, align 2, !tbaa !396
  %2930 = getelementptr inbounds i16, i16* %2920, i64 18
  %2931 = bitcast i16* %2930 to <16 x i16>*
  %2932 = load <16 x i16>, <16 x i16>* %2931, align 2, !tbaa !396
  %2933 = bitcast i16* %2920 to <16 x i16>*
  %2934 = load <16 x i16>, <16 x i16>* %2933, align 2, !tbaa !396
  %2935 = getelementptr inbounds i16, i16* %2920, i64 16
  %2936 = bitcast i16* %2935 to <16 x i16>*
  %2937 = load <16 x i16>, <16 x i16>* %2936, align 2, !tbaa !396
  %2938 = add <16 x i16> %2929, %2923
  %2939 = add <16 x i16> %2938, %2934
  %2940 = add <16 x i16> %2932, %2926
  %2941 = add <16 x i16> %2940, %2937
  %2942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2939, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2943 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2941, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2944 = shufflevector <16 x i16> %2942, <16 x i16> %2943, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2945 = lshr <32 x i16> %2944, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2946 = shufflevector <32 x i16> %2945, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2947 = shl nsw i64 %2899, 5
  %2948 = add nsw i64 %2947, %2800
  %2949 = getelementptr inbounds i16, i16* %blur_x, i64 %2948
  %2950 = bitcast i16* %2949 to <16 x i16>*
  store <16 x i16> %2946, <16 x i16>* %2950, align 2, !tbaa !399
  %2951 = shufflevector <32 x i16> %2945, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2952 = getelementptr inbounds i16, i16* %2949, i64 16
  %2953 = bitcast i16* %2952 to <16 x i16>*
  store <16 x i16> %2951, <16 x i16>* %2953, align 2, !tbaa !399
  br label %"consume blur_x153"

"consume blur_x153":                              ; preds = %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge", %"produce blur_x152"
  %.pre-phi3364 = phi i64 [ %.pre3363, %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge" ], [ %2947, %"produce blur_x152" ]
  %2954 = add nsw i64 %2803, %.pre-phi3364
  %2955 = getelementptr inbounds i16, i16* %blur_x, i64 %2954
  %2956 = bitcast i16* %2955 to <16 x i16>*
  %2957 = load <16 x i16>, <16 x i16>* %2956, align 2, !tbaa !399
  %2958 = getelementptr inbounds i16, i16* %2955, i64 16
  %2959 = bitcast i16* %2958 to <16 x i16>*
  %2960 = load <16 x i16>, <16 x i16>* %2959, align 2, !tbaa !399
  %2961 = add nsw i64 %2806, %.pre-phi3364
  %2962 = getelementptr inbounds i16, i16* %blur_x, i64 %2961
  %2963 = bitcast i16* %2962 to <16 x i16>*
  %2964 = load <16 x i16>, <16 x i16>* %2963, align 2, !tbaa !399
  %2965 = getelementptr inbounds i16, i16* %2962, i64 16
  %2966 = bitcast i16* %2965 to <16 x i16>*
  %2967 = load <16 x i16>, <16 x i16>* %2966, align 2, !tbaa !399
  %2968 = add nsw i64 %2809, %.pre-phi3364
  %2969 = getelementptr inbounds i16, i16* %blur_x, i64 %2968
  %2970 = bitcast i16* %2969 to <16 x i16>*
  %2971 = load <16 x i16>, <16 x i16>* %2970, align 2, !tbaa !399
  %2972 = getelementptr inbounds i16, i16* %2969, i64 16
  %2973 = bitcast i16* %2972 to <16 x i16>*
  %2974 = load <16 x i16>, <16 x i16>* %2973, align 2, !tbaa !399
  %2975 = add <16 x i16> %2964, %2957
  %2976 = add <16 x i16> %2975, %2971
  %2977 = add <16 x i16> %2967, %2960
  %2978 = add <16 x i16> %2977, %2974
  %2979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2976, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2978, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2981 = shufflevector <16 x i16> %2979, <16 x i16> %2980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2982 = lshr <32 x i16> %2981, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2983 = shufflevector <32 x i16> %2982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2984 = add nsw i64 %2813, %.pre-phi3364
  %2985 = getelementptr inbounds i16, i16* %65, i64 %2984
  %2986 = bitcast i16* %2985 to <16 x i16>*
  store <16 x i16> %2983, <16 x i16>* %2986, align 2, !tbaa !401
  %2987 = shufflevector <32 x i16> %2982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2988 = getelementptr inbounds i16, i16* %2985, i64 16
  %2989 = bitcast i16* %2988 to <16 x i16>*
  store <16 x i16> %2987, <16 x i16>* %2989, align 2, !tbaa !401
  %indvars.iv.next3144 = add nuw nsw i64 %indvars.iv3143, 1
  %.not2637 = icmp eq i64 %indvars.iv.next3144, %180
  br i1 %.not2637, label %"end for blur_y.s0.x.x.rebased147", label %"for blur_y.s0.x.x.rebased146"

"for blur_y.s0.x.x.rebased154":                   ; preds = %"for blur_y.s0.x.x.rebased154.preheader", %"consume blur_x162"
  %blur_y.s0.x.x.rebased156 = phi i32 [ %3068, %"consume blur_x162" ], [ 0, %"for blur_y.s0.x.x.rebased154.preheader" ]
  %2990 = add nsw i32 %blur_y.s0.x.x.rebased156, %t1582
  %a119 = shl nsw i32 %2990, 5
  %2991 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %2991, i32 %a119, i32 %a14
  %2992 = icmp slt i32 %2990, 1
  %2993 = icmp sgt i32 %4, %a119
  %2994 = or i1 %2992, %2993
  br i1 %2994, label %"produce blur_x160", label %"consume blur_x162"

"end for blur_y.s0.x.x.rebased155":               ; preds = %"consume blur_x162", %"end for blur_y.s0.x.x.rebased147"
  br i1 %34, label %"produce blur_x166", label %after_bb163

"produce blur_x160":                              ; preds = %"for blur_y.s0.x.x.rebased154"
  %2995 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s161 = select i1 %2995, i32 %b125, i32 %4
  %t741 = add nsw i32 %blur_x.s0.x.v1.base.s161, %t1713
  %2996 = sext i32 %t741 to i64
  %2997 = getelementptr inbounds i16, i16* %read_input, i64 %2996
  %2998 = getelementptr inbounds i16, i16* %2997, i64 1
  %2999 = bitcast i16* %2998 to <16 x i16>*
  %3000 = load <16 x i16>, <16 x i16>* %2999, align 2, !tbaa !396
  %3001 = getelementptr inbounds i16, i16* %2997, i64 17
  %3002 = bitcast i16* %3001 to <16 x i16>*
  %3003 = load <16 x i16>, <16 x i16>* %3002, align 2, !tbaa !396
  %3004 = getelementptr inbounds i16, i16* %2997, i64 2
  %3005 = bitcast i16* %3004 to <16 x i16>*
  %3006 = load <16 x i16>, <16 x i16>* %3005, align 2, !tbaa !396
  %3007 = getelementptr inbounds i16, i16* %2997, i64 18
  %3008 = bitcast i16* %3007 to <16 x i16>*
  %3009 = load <16 x i16>, <16 x i16>* %3008, align 2, !tbaa !396
  %3010 = bitcast i16* %2997 to <16 x i16>*
  %3011 = load <16 x i16>, <16 x i16>* %3010, align 2, !tbaa !396
  %3012 = getelementptr inbounds i16, i16* %2997, i64 16
  %3013 = bitcast i16* %3012 to <16 x i16>*
  %3014 = load <16 x i16>, <16 x i16>* %3013, align 2, !tbaa !396
  %3015 = add <16 x i16> %3006, %3000
  %3016 = add <16 x i16> %3015, %3011
  %3017 = add <16 x i16> %3009, %3003
  %3018 = add <16 x i16> %3017, %3014
  %3019 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3016, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3018, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3021 = shufflevector <16 x i16> %3019, <16 x i16> %3020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3022 = lshr <32 x i16> %3021, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3023 = shufflevector <32 x i16> %3022, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3024 = sext i32 %blur_x.s0.x.v1.base.s161 to i64
  %3025 = add nsw i64 %3024, %2905
  %3026 = getelementptr inbounds i16, i16* %blur_x, i64 %3025
  %3027 = bitcast i16* %3026 to <16 x i16>*
  store <16 x i16> %3023, <16 x i16>* %3027, align 2, !tbaa !399
  %3028 = shufflevector <32 x i16> %3022, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3029 = getelementptr inbounds i16, i16* %3026, i64 16
  %3030 = bitcast i16* %3029 to <16 x i16>*
  store <16 x i16> %3028, <16 x i16>* %3030, align 2, !tbaa !399
  br label %"consume blur_x162"

"consume blur_x162":                              ; preds = %"for blur_y.s0.x.x.rebased154", %"produce blur_x160"
  %3031 = sext i32 %b125 to i64
  %3032 = add nsw i64 %2908, %3031
  %3033 = getelementptr inbounds i16, i16* %blur_x, i64 %3032
  %3034 = bitcast i16* %3033 to <16 x i16>*
  %3035 = load <16 x i16>, <16 x i16>* %3034, align 2, !tbaa !399
  %3036 = getelementptr inbounds i16, i16* %3033, i64 16
  %3037 = bitcast i16* %3036 to <16 x i16>*
  %3038 = load <16 x i16>, <16 x i16>* %3037, align 2, !tbaa !399
  %3039 = add nsw i64 %2911, %3031
  %3040 = getelementptr inbounds i16, i16* %blur_x, i64 %3039
  %3041 = bitcast i16* %3040 to <16 x i16>*
  %3042 = load <16 x i16>, <16 x i16>* %3041, align 2, !tbaa !399
  %3043 = getelementptr inbounds i16, i16* %3040, i64 16
  %3044 = bitcast i16* %3043 to <16 x i16>*
  %3045 = load <16 x i16>, <16 x i16>* %3044, align 2, !tbaa !399
  %3046 = add nsw i64 %2914, %3031
  %3047 = getelementptr inbounds i16, i16* %blur_x, i64 %3046
  %3048 = bitcast i16* %3047 to <16 x i16>*
  %3049 = load <16 x i16>, <16 x i16>* %3048, align 2, !tbaa !399
  %3050 = getelementptr inbounds i16, i16* %3047, i64 16
  %3051 = bitcast i16* %3050 to <16 x i16>*
  %3052 = load <16 x i16>, <16 x i16>* %3051, align 2, !tbaa !399
  %3053 = add <16 x i16> %3042, %3035
  %3054 = add <16 x i16> %3053, %3049
  %3055 = add <16 x i16> %3045, %3038
  %3056 = add <16 x i16> %3055, %3052
  %3057 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3054, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3058 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3056, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3059 = shufflevector <16 x i16> %3057, <16 x i16> %3058, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3060 = lshr <32 x i16> %3059, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3061 = shufflevector <32 x i16> %3060, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3062 = add nsw i64 %2918, %3031
  %3063 = getelementptr inbounds i16, i16* %65, i64 %3062
  %3064 = bitcast i16* %3063 to <16 x i16>*
  store <16 x i16> %3061, <16 x i16>* %3064, align 2, !tbaa !401
  %3065 = shufflevector <32 x i16> %3060, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3066 = getelementptr inbounds i16, i16* %3063, i64 16
  %3067 = bitcast i16* %3066 to <16 x i16>*
  store <16 x i16> %3065, <16 x i16>* %3067, align 2, !tbaa !401
  %3068 = add nuw nsw i32 %blur_y.s0.x.x.rebased156, 1
  %.not2636 = icmp eq i32 %3068, %t1639
  br i1 %.not2636, label %"end for blur_y.s0.x.x.rebased155", label %"for blur_y.s0.x.x.rebased154"

after_bb163:                                      ; preds = %"end for blur_y.s0.x.x.rebased155", %"produce blur_x166"
  br i1 %99, label %"for blur_y.s0.x.x.rebased168.preheader", label %"end for blur_y.s0.x.x.rebased169", !prof !386

"for blur_y.s0.x.x.rebased168.preheader":         ; preds = %after_bb163
  %3069 = sext i32 %t1666 to i64
  %3070 = zext i32 %.pre-phi3350 to i64
  %3071 = mul nsw i64 %3070, %108
  %3072 = sub nsw i64 %3071, %95
  %3073 = zext i32 %.pre-phi3356 to i64
  %3074 = mul nsw i64 %3073, %108
  %3075 = sub nsw i64 %3074, %95
  %3076 = zext i32 %.pre-phi3346 to i64
  %3077 = mul nsw i64 %3076, %108
  %3078 = sub nsw i64 %3077, %95
  %3079 = sext i32 %a26 to i64
  %3080 = add nsw i64 %3079, 5
  %3081 = mul nsw i64 %3080, %109
  %3082 = add nsw i64 %3081, %112
  br label %"for blur_y.s0.x.x.rebased168"

"produce blur_x166":                              ; preds = %"end for blur_y.s0.x.x.rebased155"
  %3083 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3084 = getelementptr inbounds i16, i16* %3083, i64 -31
  %3085 = bitcast i16* %3084 to <16 x i16>*
  %3086 = load <16 x i16>, <16 x i16>* %3085, align 2, !tbaa !396
  %3087 = getelementptr inbounds i16, i16* %3083, i64 -15
  %3088 = bitcast i16* %3087 to <16 x i16>*
  %3089 = load <16 x i16>, <16 x i16>* %3088, align 2, !tbaa !396
  %3090 = getelementptr inbounds i16, i16* %3083, i64 -30
  %3091 = bitcast i16* %3090 to <16 x i16>*
  %3092 = load <16 x i16>, <16 x i16>* %3091, align 2, !tbaa !396
  %3093 = getelementptr inbounds i16, i16* %3083, i64 -14
  %3094 = bitcast i16* %3093 to <16 x i16>*
  %3095 = load <16 x i16>, <16 x i16>* %3094, align 2, !tbaa !396
  %3096 = getelementptr inbounds i16, i16* %3083, i64 -32
  %3097 = bitcast i16* %3096 to <16 x i16>*
  %3098 = load <16 x i16>, <16 x i16>* %3097, align 2, !tbaa !396
  %3099 = getelementptr inbounds i16, i16* %3083, i64 -16
  %3100 = bitcast i16* %3099 to <16 x i16>*
  %3101 = load <16 x i16>, <16 x i16>* %3100, align 2, !tbaa !396
  %3102 = add <16 x i16> %3092, %3086
  %3103 = add <16 x i16> %3102, %3098
  %3104 = add <16 x i16> %3095, %3089
  %3105 = add <16 x i16> %3104, %3101
  %3106 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3103, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3105, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3108 = shufflevector <16 x i16> %3106, <16 x i16> %3107, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3109 = lshr <32 x i16> %3108, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3110 = shufflevector <32 x i16> %3109, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3111 = zext i32 %.pre-phi3356 to i64
  %3112 = mul nsw i64 %96, %3111
  %3113 = add nsw i64 %98, %3112
  %3114 = getelementptr inbounds i16, i16* %blur_x, i64 %3113
  %3115 = getelementptr inbounds i16, i16* %3114, i64 -32
  %3116 = bitcast i16* %3115 to <16 x i16>*
  store <16 x i16> %3110, <16 x i16>* %3116, align 2, !tbaa !399
  %3117 = shufflevector <32 x i16> %3109, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3118 = getelementptr inbounds i16, i16* %3114, i64 -16
  %3119 = bitcast i16* %3118 to <16 x i16>*
  store <16 x i16> %3117, <16 x i16>* %3119, align 2, !tbaa !399
  %3120 = zext i32 %.pre-phi3350 to i64
  %3121 = mul nsw i64 %3120, %108
  %3122 = add nsw i64 %3121, %93
  %3123 = getelementptr inbounds i16, i16* %blur_x, i64 %3122
  %3124 = getelementptr inbounds i16, i16* %3123, i64 -32
  %3125 = bitcast i16* %3124 to <16 x i16>*
  %3126 = load <16 x i16>, <16 x i16>* %3125, align 2, !tbaa !399
  %3127 = getelementptr inbounds i16, i16* %3123, i64 -16
  %3128 = bitcast i16* %3127 to <16 x i16>*
  %3129 = load <16 x i16>, <16 x i16>* %3128, align 2, !tbaa !399
  %3130 = mul nsw i64 %3111, %108
  %3131 = add nsw i64 %3130, %93
  %3132 = getelementptr inbounds i16, i16* %blur_x, i64 %3131
  %3133 = getelementptr inbounds i16, i16* %3132, i64 -32
  %3134 = bitcast i16* %3133 to <16 x i16>*
  %3135 = load <16 x i16>, <16 x i16>* %3134, align 2, !tbaa !399
  %3136 = getelementptr inbounds i16, i16* %3132, i64 -16
  %3137 = bitcast i16* %3136 to <16 x i16>*
  %3138 = load <16 x i16>, <16 x i16>* %3137, align 2, !tbaa !399
  %3139 = zext i32 %.pre-phi3346 to i64
  %3140 = mul nsw i64 %3139, %108
  %3141 = add nsw i64 %3140, %93
  %3142 = getelementptr inbounds i16, i16* %blur_x, i64 %3141
  %3143 = getelementptr inbounds i16, i16* %3142, i64 -32
  %3144 = bitcast i16* %3143 to <16 x i16>*
  %3145 = load <16 x i16>, <16 x i16>* %3144, align 2, !tbaa !399
  %3146 = getelementptr inbounds i16, i16* %3142, i64 -16
  %3147 = bitcast i16* %3146 to <16 x i16>*
  %3148 = load <16 x i16>, <16 x i16>* %3147, align 2, !tbaa !399
  %3149 = add <16 x i16> %3135, %3126
  %3150 = add <16 x i16> %3149, %3145
  %3151 = add <16 x i16> %3138, %3129
  %3152 = add <16 x i16> %3151, %3148
  %3153 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3150, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3154 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3152, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3155 = shufflevector <16 x i16> %3153, <16 x i16> %3154, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3156 = lshr <32 x i16> %3155, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3157 = shufflevector <32 x i16> %3156, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3158 = sext i32 %a26 to i64
  %3159 = add nsw i64 %3158, 5
  %3160 = mul nsw i64 %3159, %109
  %3161 = add nsw i64 %111, %3160
  %3162 = getelementptr inbounds i16, i16* %65, i64 %3161
  %3163 = getelementptr inbounds i16, i16* %3162, i64 -32
  %3164 = bitcast i16* %3163 to <16 x i16>*
  store <16 x i16> %3157, <16 x i16>* %3164, align 2, !tbaa !401
  %3165 = shufflevector <32 x i16> %3156, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3166 = getelementptr inbounds i16, i16* %3162, i64 -16
  %3167 = bitcast i16* %3166 to <16 x i16>*
  store <16 x i16> %3165, <16 x i16>* %3167, align 2, !tbaa !401
  br label %after_bb163

"for blur_y.s0.x.x.rebased168":                   ; preds = %"for blur_y.s0.x.x.rebased168.preheader", %"consume blur_x175"
  %indvars.iv3146 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased168.preheader" ], [ %indvars.iv.next3147, %"consume blur_x175" ]
  %3168 = add nsw i64 %indvars.iv3146, %100
  %3169 = icmp slt i64 %3168, 1
  %3170 = trunc i64 %3168 to i32
  %3171 = shl nsw i32 %3170, 5
  %3172 = icmp sgt i32 %4, %3171
  %3173 = or i1 %3169, %3172
  br i1 %3173, label %"produce blur_x174", label %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge"

"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased168"
  %.pre3365 = shl nsw i64 %3168, 5
  br label %"consume blur_x175"

"end for blur_y.s0.x.x.rebased169":               ; preds = %"consume blur_x175", %after_bb163
  br i1 %101, label %"for blur_y.s0.x.x.rebased176.preheader", label %"end for blur_y.s0.x.x.rebased177", !prof !386

"for blur_y.s0.x.x.rebased176.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased169"
  %3174 = sext i32 %t1666 to i64
  %3175 = zext i32 %.pre-phi3350 to i64
  %3176 = mul nsw i64 %3175, %108
  %3177 = sub nsw i64 %3176, %95
  %3178 = zext i32 %.pre-phi3356 to i64
  %3179 = mul nsw i64 %3178, %108
  %3180 = sub nsw i64 %3179, %95
  %3181 = zext i32 %.pre-phi3346 to i64
  %3182 = mul nsw i64 %3181, %108
  %3183 = sub nsw i64 %3182, %95
  %3184 = sext i32 %a26 to i64
  %3185 = add nsw i64 %3184, 5
  %3186 = mul nsw i64 %3185, %109
  %3187 = add nsw i64 %3186, %112
  br label %"for blur_y.s0.x.x.rebased176"

"produce blur_x174":                              ; preds = %"for blur_y.s0.x.x.rebased168"
  %t752 = add nsw i32 %3171, %t1729
  %3188 = sext i32 %t752 to i64
  %3189 = getelementptr inbounds i16, i16* %read_input, i64 %3188
  %3190 = getelementptr inbounds i16, i16* %3189, i64 1
  %3191 = bitcast i16* %3190 to <16 x i16>*
  %3192 = load <16 x i16>, <16 x i16>* %3191, align 2, !tbaa !396
  %3193 = getelementptr inbounds i16, i16* %3189, i64 17
  %3194 = bitcast i16* %3193 to <16 x i16>*
  %3195 = load <16 x i16>, <16 x i16>* %3194, align 2, !tbaa !396
  %3196 = getelementptr inbounds i16, i16* %3189, i64 2
  %3197 = bitcast i16* %3196 to <16 x i16>*
  %3198 = load <16 x i16>, <16 x i16>* %3197, align 2, !tbaa !396
  %3199 = getelementptr inbounds i16, i16* %3189, i64 18
  %3200 = bitcast i16* %3199 to <16 x i16>*
  %3201 = load <16 x i16>, <16 x i16>* %3200, align 2, !tbaa !396
  %3202 = bitcast i16* %3189 to <16 x i16>*
  %3203 = load <16 x i16>, <16 x i16>* %3202, align 2, !tbaa !396
  %3204 = getelementptr inbounds i16, i16* %3189, i64 16
  %3205 = bitcast i16* %3204 to <16 x i16>*
  %3206 = load <16 x i16>, <16 x i16>* %3205, align 2, !tbaa !396
  %3207 = add <16 x i16> %3198, %3192
  %3208 = add <16 x i16> %3207, %3203
  %3209 = add <16 x i16> %3201, %3195
  %3210 = add <16 x i16> %3209, %3206
  %3211 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3208, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3212 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3210, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3213 = shufflevector <16 x i16> %3211, <16 x i16> %3212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3214 = lshr <32 x i16> %3213, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3215 = shufflevector <32 x i16> %3214, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3216 = shl nsw i64 %3168, 5
  %3217 = add nsw i64 %3216, %3069
  %3218 = getelementptr inbounds i16, i16* %blur_x, i64 %3217
  %3219 = bitcast i16* %3218 to <16 x i16>*
  store <16 x i16> %3215, <16 x i16>* %3219, align 2, !tbaa !399
  %3220 = shufflevector <32 x i16> %3214, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3221 = getelementptr inbounds i16, i16* %3218, i64 16
  %3222 = bitcast i16* %3221 to <16 x i16>*
  store <16 x i16> %3220, <16 x i16>* %3222, align 2, !tbaa !399
  br label %"consume blur_x175"

"consume blur_x175":                              ; preds = %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge", %"produce blur_x174"
  %.pre-phi3366 = phi i64 [ %.pre3365, %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge" ], [ %3216, %"produce blur_x174" ]
  %3223 = add nsw i64 %3072, %.pre-phi3366
  %3224 = getelementptr inbounds i16, i16* %blur_x, i64 %3223
  %3225 = bitcast i16* %3224 to <16 x i16>*
  %3226 = load <16 x i16>, <16 x i16>* %3225, align 2, !tbaa !399
  %3227 = getelementptr inbounds i16, i16* %3224, i64 16
  %3228 = bitcast i16* %3227 to <16 x i16>*
  %3229 = load <16 x i16>, <16 x i16>* %3228, align 2, !tbaa !399
  %3230 = add nsw i64 %3075, %.pre-phi3366
  %3231 = getelementptr inbounds i16, i16* %blur_x, i64 %3230
  %3232 = bitcast i16* %3231 to <16 x i16>*
  %3233 = load <16 x i16>, <16 x i16>* %3232, align 2, !tbaa !399
  %3234 = getelementptr inbounds i16, i16* %3231, i64 16
  %3235 = bitcast i16* %3234 to <16 x i16>*
  %3236 = load <16 x i16>, <16 x i16>* %3235, align 2, !tbaa !399
  %3237 = add nsw i64 %3078, %.pre-phi3366
  %3238 = getelementptr inbounds i16, i16* %blur_x, i64 %3237
  %3239 = bitcast i16* %3238 to <16 x i16>*
  %3240 = load <16 x i16>, <16 x i16>* %3239, align 2, !tbaa !399
  %3241 = getelementptr inbounds i16, i16* %3238, i64 16
  %3242 = bitcast i16* %3241 to <16 x i16>*
  %3243 = load <16 x i16>, <16 x i16>* %3242, align 2, !tbaa !399
  %3244 = add <16 x i16> %3233, %3226
  %3245 = add <16 x i16> %3244, %3240
  %3246 = add <16 x i16> %3236, %3229
  %3247 = add <16 x i16> %3246, %3243
  %3248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3245, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3247, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3250 = shufflevector <16 x i16> %3248, <16 x i16> %3249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3251 = lshr <32 x i16> %3250, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3252 = shufflevector <32 x i16> %3251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3253 = add nsw i64 %3082, %.pre-phi3366
  %3254 = getelementptr inbounds i16, i16* %65, i64 %3253
  %3255 = bitcast i16* %3254 to <16 x i16>*
  store <16 x i16> %3252, <16 x i16>* %3255, align 2, !tbaa !401
  %3256 = shufflevector <32 x i16> %3251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3257 = getelementptr inbounds i16, i16* %3254, i64 16
  %3258 = bitcast i16* %3257 to <16 x i16>*
  store <16 x i16> %3256, <16 x i16>* %3258, align 2, !tbaa !401
  %indvars.iv.next3147 = add nuw nsw i64 %indvars.iv3146, 1
  %.not2635 = icmp eq i64 %indvars.iv.next3147, %180
  br i1 %.not2635, label %"end for blur_y.s0.x.x.rebased169", label %"for blur_y.s0.x.x.rebased168"

"for blur_y.s0.x.x.rebased176":                   ; preds = %"for blur_y.s0.x.x.rebased176.preheader", %"consume blur_x184"
  %blur_y.s0.x.x.rebased178 = phi i32 [ %3337, %"consume blur_x184" ], [ 0, %"for blur_y.s0.x.x.rebased176.preheader" ]
  %3259 = add nsw i32 %blur_y.s0.x.x.rebased178, %t1582
  %a126 = shl nsw i32 %3259, 5
  %3260 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3260, i32 %a126, i32 %a14
  %3261 = icmp slt i32 %3259, 1
  %3262 = icmp sgt i32 %4, %a126
  %3263 = or i1 %3261, %3262
  br i1 %3263, label %"produce blur_x182", label %"consume blur_x184"

"end for blur_y.s0.x.x.rebased177":               ; preds = %"consume blur_x184", %"end for blur_y.s0.x.x.rebased169"
  br i1 %34, label %"produce blur_x188", label %after_bb185

"produce blur_x182":                              ; preds = %"for blur_y.s0.x.x.rebased176"
  %3264 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s183 = select i1 %3264, i32 %b132, i32 %4
  %t757 = add nsw i32 %blur_x.s0.x.v1.base.s183, %t1729
  %3265 = sext i32 %t757 to i64
  %3266 = getelementptr inbounds i16, i16* %read_input, i64 %3265
  %3267 = getelementptr inbounds i16, i16* %3266, i64 1
  %3268 = bitcast i16* %3267 to <16 x i16>*
  %3269 = load <16 x i16>, <16 x i16>* %3268, align 2, !tbaa !396
  %3270 = getelementptr inbounds i16, i16* %3266, i64 17
  %3271 = bitcast i16* %3270 to <16 x i16>*
  %3272 = load <16 x i16>, <16 x i16>* %3271, align 2, !tbaa !396
  %3273 = getelementptr inbounds i16, i16* %3266, i64 2
  %3274 = bitcast i16* %3273 to <16 x i16>*
  %3275 = load <16 x i16>, <16 x i16>* %3274, align 2, !tbaa !396
  %3276 = getelementptr inbounds i16, i16* %3266, i64 18
  %3277 = bitcast i16* %3276 to <16 x i16>*
  %3278 = load <16 x i16>, <16 x i16>* %3277, align 2, !tbaa !396
  %3279 = bitcast i16* %3266 to <16 x i16>*
  %3280 = load <16 x i16>, <16 x i16>* %3279, align 2, !tbaa !396
  %3281 = getelementptr inbounds i16, i16* %3266, i64 16
  %3282 = bitcast i16* %3281 to <16 x i16>*
  %3283 = load <16 x i16>, <16 x i16>* %3282, align 2, !tbaa !396
  %3284 = add <16 x i16> %3275, %3269
  %3285 = add <16 x i16> %3284, %3280
  %3286 = add <16 x i16> %3278, %3272
  %3287 = add <16 x i16> %3286, %3283
  %3288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3285, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3287, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3290 = shufflevector <16 x i16> %3288, <16 x i16> %3289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3291 = lshr <32 x i16> %3290, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3292 = shufflevector <32 x i16> %3291, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3293 = sext i32 %blur_x.s0.x.v1.base.s183 to i64
  %3294 = add nsw i64 %3293, %3174
  %3295 = getelementptr inbounds i16, i16* %blur_x, i64 %3294
  %3296 = bitcast i16* %3295 to <16 x i16>*
  store <16 x i16> %3292, <16 x i16>* %3296, align 2, !tbaa !399
  %3297 = shufflevector <32 x i16> %3291, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3298 = getelementptr inbounds i16, i16* %3295, i64 16
  %3299 = bitcast i16* %3298 to <16 x i16>*
  store <16 x i16> %3297, <16 x i16>* %3299, align 2, !tbaa !399
  br label %"consume blur_x184"

"consume blur_x184":                              ; preds = %"for blur_y.s0.x.x.rebased176", %"produce blur_x182"
  %3300 = sext i32 %b132 to i64
  %3301 = add nsw i64 %3177, %3300
  %3302 = getelementptr inbounds i16, i16* %blur_x, i64 %3301
  %3303 = bitcast i16* %3302 to <16 x i16>*
  %3304 = load <16 x i16>, <16 x i16>* %3303, align 2, !tbaa !399
  %3305 = getelementptr inbounds i16, i16* %3302, i64 16
  %3306 = bitcast i16* %3305 to <16 x i16>*
  %3307 = load <16 x i16>, <16 x i16>* %3306, align 2, !tbaa !399
  %3308 = add nsw i64 %3180, %3300
  %3309 = getelementptr inbounds i16, i16* %blur_x, i64 %3308
  %3310 = bitcast i16* %3309 to <16 x i16>*
  %3311 = load <16 x i16>, <16 x i16>* %3310, align 2, !tbaa !399
  %3312 = getelementptr inbounds i16, i16* %3309, i64 16
  %3313 = bitcast i16* %3312 to <16 x i16>*
  %3314 = load <16 x i16>, <16 x i16>* %3313, align 2, !tbaa !399
  %3315 = add nsw i64 %3183, %3300
  %3316 = getelementptr inbounds i16, i16* %blur_x, i64 %3315
  %3317 = bitcast i16* %3316 to <16 x i16>*
  %3318 = load <16 x i16>, <16 x i16>* %3317, align 2, !tbaa !399
  %3319 = getelementptr inbounds i16, i16* %3316, i64 16
  %3320 = bitcast i16* %3319 to <16 x i16>*
  %3321 = load <16 x i16>, <16 x i16>* %3320, align 2, !tbaa !399
  %3322 = add <16 x i16> %3311, %3304
  %3323 = add <16 x i16> %3322, %3318
  %3324 = add <16 x i16> %3314, %3307
  %3325 = add <16 x i16> %3324, %3321
  %3326 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3323, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3327 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3325, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3328 = shufflevector <16 x i16> %3326, <16 x i16> %3327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3329 = lshr <32 x i16> %3328, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3330 = shufflevector <32 x i16> %3329, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3331 = add nsw i64 %3187, %3300
  %3332 = getelementptr inbounds i16, i16* %65, i64 %3331
  %3333 = bitcast i16* %3332 to <16 x i16>*
  store <16 x i16> %3330, <16 x i16>* %3333, align 2, !tbaa !401
  %3334 = shufflevector <32 x i16> %3329, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3335 = getelementptr inbounds i16, i16* %3332, i64 16
  %3336 = bitcast i16* %3335 to <16 x i16>*
  store <16 x i16> %3334, <16 x i16>* %3336, align 2, !tbaa !401
  %3337 = add nuw nsw i32 %blur_y.s0.x.x.rebased178, 1
  %.not2634 = icmp eq i32 %3337, %t1639
  br i1 %.not2634, label %"end for blur_y.s0.x.x.rebased177", label %"for blur_y.s0.x.x.rebased176"

after_bb185:                                      ; preds = %"end for blur_y.s0.x.x.rebased177", %"produce blur_x188"
  br i1 %99, label %"for blur_y.s0.x.x.rebased190.preheader", label %"end for blur_y.s0.x.x.rebased191", !prof !386

"for blur_y.s0.x.x.rebased190.preheader":         ; preds = %after_bb185
  %3338 = sext i32 %t1638 to i64
  %3339 = zext i32 %.pre-phi3356 to i64
  %3340 = mul nsw i64 %3339, %108
  %3341 = sub nsw i64 %3340, %95
  %3342 = zext i32 %.pre-phi to i64
  %3343 = mul nsw i64 %3342, %108
  %3344 = sub nsw i64 %3343, %95
  %3345 = zext i32 %.pre-phi3350 to i64
  %3346 = mul nsw i64 %3345, %108
  %3347 = sub nsw i64 %3346, %95
  %3348 = sext i32 %a26 to i64
  %3349 = add nsw i64 %3348, 6
  %3350 = mul nsw i64 %3349, %109
  %3351 = add nsw i64 %3350, %112
  br label %"for blur_y.s0.x.x.rebased190"

"produce blur_x188":                              ; preds = %"end for blur_y.s0.x.x.rebased177"
  %3352 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3353 = getelementptr inbounds i16, i16* %3352, i64 -31
  %3354 = bitcast i16* %3353 to <16 x i16>*
  %3355 = load <16 x i16>, <16 x i16>* %3354, align 2, !tbaa !396
  %3356 = getelementptr inbounds i16, i16* %3352, i64 -15
  %3357 = bitcast i16* %3356 to <16 x i16>*
  %3358 = load <16 x i16>, <16 x i16>* %3357, align 2, !tbaa !396
  %3359 = getelementptr inbounds i16, i16* %3352, i64 -30
  %3360 = bitcast i16* %3359 to <16 x i16>*
  %3361 = load <16 x i16>, <16 x i16>* %3360, align 2, !tbaa !396
  %3362 = getelementptr inbounds i16, i16* %3352, i64 -14
  %3363 = bitcast i16* %3362 to <16 x i16>*
  %3364 = load <16 x i16>, <16 x i16>* %3363, align 2, !tbaa !396
  %3365 = getelementptr inbounds i16, i16* %3352, i64 -32
  %3366 = bitcast i16* %3365 to <16 x i16>*
  %3367 = load <16 x i16>, <16 x i16>* %3366, align 2, !tbaa !396
  %3368 = getelementptr inbounds i16, i16* %3352, i64 -16
  %3369 = bitcast i16* %3368 to <16 x i16>*
  %3370 = load <16 x i16>, <16 x i16>* %3369, align 2, !tbaa !396
  %3371 = add <16 x i16> %3361, %3355
  %3372 = add <16 x i16> %3371, %3367
  %3373 = add <16 x i16> %3364, %3358
  %3374 = add <16 x i16> %3373, %3370
  %3375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3372, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3374, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3377 = shufflevector <16 x i16> %3375, <16 x i16> %3376, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3378 = lshr <32 x i16> %3377, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3379 = shufflevector <32 x i16> %3378, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3380 = zext i32 %.pre-phi to i64
  %3381 = mul nsw i64 %96, %3380
  %3382 = add nsw i64 %98, %3381
  %3383 = getelementptr inbounds i16, i16* %blur_x, i64 %3382
  %3384 = getelementptr inbounds i16, i16* %3383, i64 -32
  %3385 = bitcast i16* %3384 to <16 x i16>*
  store <16 x i16> %3379, <16 x i16>* %3385, align 2, !tbaa !399
  %3386 = shufflevector <32 x i16> %3378, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3387 = getelementptr inbounds i16, i16* %3383, i64 -16
  %3388 = bitcast i16* %3387 to <16 x i16>*
  store <16 x i16> %3386, <16 x i16>* %3388, align 2, !tbaa !399
  %3389 = zext i32 %.pre-phi3356 to i64
  %3390 = mul nsw i64 %3389, %108
  %3391 = add nsw i64 %3390, %93
  %3392 = getelementptr inbounds i16, i16* %blur_x, i64 %3391
  %3393 = getelementptr inbounds i16, i16* %3392, i64 -32
  %3394 = bitcast i16* %3393 to <16 x i16>*
  %3395 = load <16 x i16>, <16 x i16>* %3394, align 2, !tbaa !399
  %3396 = getelementptr inbounds i16, i16* %3392, i64 -16
  %3397 = bitcast i16* %3396 to <16 x i16>*
  %3398 = load <16 x i16>, <16 x i16>* %3397, align 2, !tbaa !399
  %3399 = mul nsw i64 %3380, %108
  %3400 = add nsw i64 %3399, %93
  %3401 = getelementptr inbounds i16, i16* %blur_x, i64 %3400
  %3402 = getelementptr inbounds i16, i16* %3401, i64 -32
  %3403 = bitcast i16* %3402 to <16 x i16>*
  %3404 = load <16 x i16>, <16 x i16>* %3403, align 2, !tbaa !399
  %3405 = getelementptr inbounds i16, i16* %3401, i64 -16
  %3406 = bitcast i16* %3405 to <16 x i16>*
  %3407 = load <16 x i16>, <16 x i16>* %3406, align 2, !tbaa !399
  %3408 = zext i32 %.pre-phi3350 to i64
  %3409 = mul nsw i64 %3408, %108
  %3410 = add nsw i64 %3409, %93
  %3411 = getelementptr inbounds i16, i16* %blur_x, i64 %3410
  %3412 = getelementptr inbounds i16, i16* %3411, i64 -32
  %3413 = bitcast i16* %3412 to <16 x i16>*
  %3414 = load <16 x i16>, <16 x i16>* %3413, align 2, !tbaa !399
  %3415 = getelementptr inbounds i16, i16* %3411, i64 -16
  %3416 = bitcast i16* %3415 to <16 x i16>*
  %3417 = load <16 x i16>, <16 x i16>* %3416, align 2, !tbaa !399
  %3418 = add <16 x i16> %3404, %3395
  %3419 = add <16 x i16> %3418, %3414
  %3420 = add <16 x i16> %3407, %3398
  %3421 = add <16 x i16> %3420, %3417
  %3422 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3419, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3423 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3421, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3424 = shufflevector <16 x i16> %3422, <16 x i16> %3423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3425 = lshr <32 x i16> %3424, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3426 = shufflevector <32 x i16> %3425, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3427 = sext i32 %a26 to i64
  %3428 = add nsw i64 %3427, 6
  %3429 = mul nsw i64 %3428, %109
  %3430 = add nsw i64 %111, %3429
  %3431 = getelementptr inbounds i16, i16* %65, i64 %3430
  %3432 = getelementptr inbounds i16, i16* %3431, i64 -32
  %3433 = bitcast i16* %3432 to <16 x i16>*
  store <16 x i16> %3426, <16 x i16>* %3433, align 2, !tbaa !401
  %3434 = shufflevector <32 x i16> %3425, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3435 = getelementptr inbounds i16, i16* %3431, i64 -16
  %3436 = bitcast i16* %3435 to <16 x i16>*
  store <16 x i16> %3434, <16 x i16>* %3436, align 2, !tbaa !401
  br label %after_bb185

"for blur_y.s0.x.x.rebased190":                   ; preds = %"for blur_y.s0.x.x.rebased190.preheader", %"consume blur_x197"
  %indvars.iv3149 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased190.preheader" ], [ %indvars.iv.next3150, %"consume blur_x197" ]
  %3437 = add nsw i64 %indvars.iv3149, %100
  %3438 = icmp slt i64 %3437, 1
  %3439 = trunc i64 %3437 to i32
  %3440 = shl nsw i32 %3439, 5
  %3441 = icmp sgt i32 %4, %3440
  %3442 = or i1 %3438, %3441
  br i1 %3442, label %"produce blur_x196", label %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge"

"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased190"
  %.pre3367 = shl nsw i64 %3437, 5
  br label %"consume blur_x197"

"end for blur_y.s0.x.x.rebased191":               ; preds = %"consume blur_x197", %after_bb185
  br i1 %101, label %"for blur_y.s0.x.x.rebased198.preheader", label %"end for blur_y.s0.x.x.rebased199", !prof !386

"for blur_y.s0.x.x.rebased198.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased191"
  %3443 = sext i32 %t1638 to i64
  %3444 = zext i32 %.pre-phi3356 to i64
  %3445 = mul nsw i64 %3444, %108
  %3446 = sub nsw i64 %3445, %95
  %3447 = zext i32 %.pre-phi to i64
  %3448 = mul nsw i64 %3447, %108
  %3449 = sub nsw i64 %3448, %95
  %3450 = zext i32 %.pre-phi3350 to i64
  %3451 = mul nsw i64 %3450, %108
  %3452 = sub nsw i64 %3451, %95
  %3453 = sext i32 %a26 to i64
  %3454 = add nsw i64 %3453, 6
  %3455 = mul nsw i64 %3454, %109
  %3456 = add nsw i64 %3455, %112
  br label %"for blur_y.s0.x.x.rebased198"

"produce blur_x196":                              ; preds = %"for blur_y.s0.x.x.rebased190"
  %t768 = add nsw i32 %3440, %t1745
  %3457 = sext i32 %t768 to i64
  %3458 = getelementptr inbounds i16, i16* %read_input, i64 %3457
  %3459 = getelementptr inbounds i16, i16* %3458, i64 1
  %3460 = bitcast i16* %3459 to <16 x i16>*
  %3461 = load <16 x i16>, <16 x i16>* %3460, align 2, !tbaa !396
  %3462 = getelementptr inbounds i16, i16* %3458, i64 17
  %3463 = bitcast i16* %3462 to <16 x i16>*
  %3464 = load <16 x i16>, <16 x i16>* %3463, align 2, !tbaa !396
  %3465 = getelementptr inbounds i16, i16* %3458, i64 2
  %3466 = bitcast i16* %3465 to <16 x i16>*
  %3467 = load <16 x i16>, <16 x i16>* %3466, align 2, !tbaa !396
  %3468 = getelementptr inbounds i16, i16* %3458, i64 18
  %3469 = bitcast i16* %3468 to <16 x i16>*
  %3470 = load <16 x i16>, <16 x i16>* %3469, align 2, !tbaa !396
  %3471 = bitcast i16* %3458 to <16 x i16>*
  %3472 = load <16 x i16>, <16 x i16>* %3471, align 2, !tbaa !396
  %3473 = getelementptr inbounds i16, i16* %3458, i64 16
  %3474 = bitcast i16* %3473 to <16 x i16>*
  %3475 = load <16 x i16>, <16 x i16>* %3474, align 2, !tbaa !396
  %3476 = add <16 x i16> %3467, %3461
  %3477 = add <16 x i16> %3476, %3472
  %3478 = add <16 x i16> %3470, %3464
  %3479 = add <16 x i16> %3478, %3475
  %3480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3477, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3481 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3479, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3482 = shufflevector <16 x i16> %3480, <16 x i16> %3481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3483 = lshr <32 x i16> %3482, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3484 = shufflevector <32 x i16> %3483, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3485 = shl nsw i64 %3437, 5
  %3486 = add nsw i64 %3485, %3338
  %3487 = getelementptr inbounds i16, i16* %blur_x, i64 %3486
  %3488 = bitcast i16* %3487 to <16 x i16>*
  store <16 x i16> %3484, <16 x i16>* %3488, align 2, !tbaa !399
  %3489 = shufflevector <32 x i16> %3483, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3490 = getelementptr inbounds i16, i16* %3487, i64 16
  %3491 = bitcast i16* %3490 to <16 x i16>*
  store <16 x i16> %3489, <16 x i16>* %3491, align 2, !tbaa !399
  br label %"consume blur_x197"

"consume blur_x197":                              ; preds = %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge", %"produce blur_x196"
  %.pre-phi3368 = phi i64 [ %.pre3367, %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge" ], [ %3485, %"produce blur_x196" ]
  %3492 = add nsw i64 %3341, %.pre-phi3368
  %3493 = getelementptr inbounds i16, i16* %blur_x, i64 %3492
  %3494 = bitcast i16* %3493 to <16 x i16>*
  %3495 = load <16 x i16>, <16 x i16>* %3494, align 2, !tbaa !399
  %3496 = getelementptr inbounds i16, i16* %3493, i64 16
  %3497 = bitcast i16* %3496 to <16 x i16>*
  %3498 = load <16 x i16>, <16 x i16>* %3497, align 2, !tbaa !399
  %3499 = add nsw i64 %3344, %.pre-phi3368
  %3500 = getelementptr inbounds i16, i16* %blur_x, i64 %3499
  %3501 = bitcast i16* %3500 to <16 x i16>*
  %3502 = load <16 x i16>, <16 x i16>* %3501, align 2, !tbaa !399
  %3503 = getelementptr inbounds i16, i16* %3500, i64 16
  %3504 = bitcast i16* %3503 to <16 x i16>*
  %3505 = load <16 x i16>, <16 x i16>* %3504, align 2, !tbaa !399
  %3506 = add nsw i64 %3347, %.pre-phi3368
  %3507 = getelementptr inbounds i16, i16* %blur_x, i64 %3506
  %3508 = bitcast i16* %3507 to <16 x i16>*
  %3509 = load <16 x i16>, <16 x i16>* %3508, align 2, !tbaa !399
  %3510 = getelementptr inbounds i16, i16* %3507, i64 16
  %3511 = bitcast i16* %3510 to <16 x i16>*
  %3512 = load <16 x i16>, <16 x i16>* %3511, align 2, !tbaa !399
  %3513 = add <16 x i16> %3502, %3495
  %3514 = add <16 x i16> %3513, %3509
  %3515 = add <16 x i16> %3505, %3498
  %3516 = add <16 x i16> %3515, %3512
  %3517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3514, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3516, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3519 = shufflevector <16 x i16> %3517, <16 x i16> %3518, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3520 = lshr <32 x i16> %3519, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3521 = shufflevector <32 x i16> %3520, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3522 = add nsw i64 %3351, %.pre-phi3368
  %3523 = getelementptr inbounds i16, i16* %65, i64 %3522
  %3524 = bitcast i16* %3523 to <16 x i16>*
  store <16 x i16> %3521, <16 x i16>* %3524, align 2, !tbaa !401
  %3525 = shufflevector <32 x i16> %3520, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3526 = getelementptr inbounds i16, i16* %3523, i64 16
  %3527 = bitcast i16* %3526 to <16 x i16>*
  store <16 x i16> %3525, <16 x i16>* %3527, align 2, !tbaa !401
  %indvars.iv.next3150 = add nuw nsw i64 %indvars.iv3149, 1
  %.not2633 = icmp eq i64 %indvars.iv.next3150, %180
  br i1 %.not2633, label %"end for blur_y.s0.x.x.rebased191", label %"for blur_y.s0.x.x.rebased190"

"for blur_y.s0.x.x.rebased198":                   ; preds = %"for blur_y.s0.x.x.rebased198.preheader", %"consume blur_x206"
  %blur_y.s0.x.x.rebased200 = phi i32 [ %3606, %"consume blur_x206" ], [ 0, %"for blur_y.s0.x.x.rebased198.preheader" ]
  %3528 = add nsw i32 %blur_y.s0.x.x.rebased200, %t1582
  %a133 = shl nsw i32 %3528, 5
  %3529 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %3529, i32 %a133, i32 %a14
  %3530 = icmp slt i32 %3528, 1
  %3531 = icmp sgt i32 %4, %a133
  %3532 = or i1 %3530, %3531
  br i1 %3532, label %"produce blur_x204", label %"consume blur_x206"

"end for blur_y.s0.x.x.rebased199":               ; preds = %"consume blur_x206", %"end for blur_y.s0.x.x.rebased191"
  br i1 %34, label %"produce blur_x210", label %after_bb207

"produce blur_x204":                              ; preds = %"for blur_y.s0.x.x.rebased198"
  %3533 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s205 = select i1 %3533, i32 %b139, i32 %4
  %t773 = add nsw i32 %blur_x.s0.x.v1.base.s205, %t1745
  %3534 = sext i32 %t773 to i64
  %3535 = getelementptr inbounds i16, i16* %read_input, i64 %3534
  %3536 = getelementptr inbounds i16, i16* %3535, i64 1
  %3537 = bitcast i16* %3536 to <16 x i16>*
  %3538 = load <16 x i16>, <16 x i16>* %3537, align 2, !tbaa !396
  %3539 = getelementptr inbounds i16, i16* %3535, i64 17
  %3540 = bitcast i16* %3539 to <16 x i16>*
  %3541 = load <16 x i16>, <16 x i16>* %3540, align 2, !tbaa !396
  %3542 = getelementptr inbounds i16, i16* %3535, i64 2
  %3543 = bitcast i16* %3542 to <16 x i16>*
  %3544 = load <16 x i16>, <16 x i16>* %3543, align 2, !tbaa !396
  %3545 = getelementptr inbounds i16, i16* %3535, i64 18
  %3546 = bitcast i16* %3545 to <16 x i16>*
  %3547 = load <16 x i16>, <16 x i16>* %3546, align 2, !tbaa !396
  %3548 = bitcast i16* %3535 to <16 x i16>*
  %3549 = load <16 x i16>, <16 x i16>* %3548, align 2, !tbaa !396
  %3550 = getelementptr inbounds i16, i16* %3535, i64 16
  %3551 = bitcast i16* %3550 to <16 x i16>*
  %3552 = load <16 x i16>, <16 x i16>* %3551, align 2, !tbaa !396
  %3553 = add <16 x i16> %3544, %3538
  %3554 = add <16 x i16> %3553, %3549
  %3555 = add <16 x i16> %3547, %3541
  %3556 = add <16 x i16> %3555, %3552
  %3557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3554, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3558 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3556, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3559 = shufflevector <16 x i16> %3557, <16 x i16> %3558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3560 = lshr <32 x i16> %3559, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3561 = shufflevector <32 x i16> %3560, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3562 = sext i32 %blur_x.s0.x.v1.base.s205 to i64
  %3563 = add nsw i64 %3562, %3443
  %3564 = getelementptr inbounds i16, i16* %blur_x, i64 %3563
  %3565 = bitcast i16* %3564 to <16 x i16>*
  store <16 x i16> %3561, <16 x i16>* %3565, align 2, !tbaa !399
  %3566 = shufflevector <32 x i16> %3560, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3567 = getelementptr inbounds i16, i16* %3564, i64 16
  %3568 = bitcast i16* %3567 to <16 x i16>*
  store <16 x i16> %3566, <16 x i16>* %3568, align 2, !tbaa !399
  br label %"consume blur_x206"

"consume blur_x206":                              ; preds = %"for blur_y.s0.x.x.rebased198", %"produce blur_x204"
  %3569 = sext i32 %b139 to i64
  %3570 = add nsw i64 %3446, %3569
  %3571 = getelementptr inbounds i16, i16* %blur_x, i64 %3570
  %3572 = bitcast i16* %3571 to <16 x i16>*
  %3573 = load <16 x i16>, <16 x i16>* %3572, align 2, !tbaa !399
  %3574 = getelementptr inbounds i16, i16* %3571, i64 16
  %3575 = bitcast i16* %3574 to <16 x i16>*
  %3576 = load <16 x i16>, <16 x i16>* %3575, align 2, !tbaa !399
  %3577 = add nsw i64 %3449, %3569
  %3578 = getelementptr inbounds i16, i16* %blur_x, i64 %3577
  %3579 = bitcast i16* %3578 to <16 x i16>*
  %3580 = load <16 x i16>, <16 x i16>* %3579, align 2, !tbaa !399
  %3581 = getelementptr inbounds i16, i16* %3578, i64 16
  %3582 = bitcast i16* %3581 to <16 x i16>*
  %3583 = load <16 x i16>, <16 x i16>* %3582, align 2, !tbaa !399
  %3584 = add nsw i64 %3452, %3569
  %3585 = getelementptr inbounds i16, i16* %blur_x, i64 %3584
  %3586 = bitcast i16* %3585 to <16 x i16>*
  %3587 = load <16 x i16>, <16 x i16>* %3586, align 2, !tbaa !399
  %3588 = getelementptr inbounds i16, i16* %3585, i64 16
  %3589 = bitcast i16* %3588 to <16 x i16>*
  %3590 = load <16 x i16>, <16 x i16>* %3589, align 2, !tbaa !399
  %3591 = add <16 x i16> %3580, %3573
  %3592 = add <16 x i16> %3591, %3587
  %3593 = add <16 x i16> %3583, %3576
  %3594 = add <16 x i16> %3593, %3590
  %3595 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3592, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3594, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3597 = shufflevector <16 x i16> %3595, <16 x i16> %3596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3598 = lshr <32 x i16> %3597, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3599 = shufflevector <32 x i16> %3598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3600 = add nsw i64 %3456, %3569
  %3601 = getelementptr inbounds i16, i16* %65, i64 %3600
  %3602 = bitcast i16* %3601 to <16 x i16>*
  store <16 x i16> %3599, <16 x i16>* %3602, align 2, !tbaa !401
  %3603 = shufflevector <32 x i16> %3598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3604 = getelementptr inbounds i16, i16* %3601, i64 16
  %3605 = bitcast i16* %3604 to <16 x i16>*
  store <16 x i16> %3603, <16 x i16>* %3605, align 2, !tbaa !401
  %3606 = add nuw nsw i32 %blur_y.s0.x.x.rebased200, 1
  %.not2632 = icmp eq i32 %3606, %t1639
  br i1 %.not2632, label %"end for blur_y.s0.x.x.rebased199", label %"for blur_y.s0.x.x.rebased198"

after_bb207:                                      ; preds = %"end for blur_y.s0.x.x.rebased199", %"produce blur_x210"
  br i1 %99, label %"for blur_y.s0.x.x.rebased212.preheader", label %"end for blur_y.s0.x.x.rebased213", !prof !386

"for blur_y.s0.x.x.rebased212.preheader":         ; preds = %after_bb207
  %3607 = sext i32 %t1644 to i64
  %3608 = zext i32 %.pre-phi to i64
  %3609 = mul nsw i64 %3608, %108
  %3610 = sub nsw i64 %3609, %95
  %3611 = zext i32 %.pre-phi3346 to i64
  %3612 = mul nsw i64 %3611, %108
  %3613 = sub nsw i64 %3612, %95
  %3614 = zext i32 %.pre-phi3356 to i64
  %3615 = mul nsw i64 %3614, %108
  %3616 = sub nsw i64 %3615, %95
  %3617 = sext i32 %a26 to i64
  %3618 = add nsw i64 %3617, 7
  %3619 = mul nsw i64 %3618, %109
  %3620 = add nsw i64 %3619, %112
  br label %"for blur_y.s0.x.x.rebased212"

"produce blur_x210":                              ; preds = %"end for blur_y.s0.x.x.rebased199"
  %3621 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %3622 = getelementptr inbounds i16, i16* %3621, i64 -31
  %3623 = bitcast i16* %3622 to <16 x i16>*
  %3624 = load <16 x i16>, <16 x i16>* %3623, align 2, !tbaa !396
  %3625 = getelementptr inbounds i16, i16* %3621, i64 -15
  %3626 = bitcast i16* %3625 to <16 x i16>*
  %3627 = load <16 x i16>, <16 x i16>* %3626, align 2, !tbaa !396
  %3628 = getelementptr inbounds i16, i16* %3621, i64 -30
  %3629 = bitcast i16* %3628 to <16 x i16>*
  %3630 = load <16 x i16>, <16 x i16>* %3629, align 2, !tbaa !396
  %3631 = getelementptr inbounds i16, i16* %3621, i64 -14
  %3632 = bitcast i16* %3631 to <16 x i16>*
  %3633 = load <16 x i16>, <16 x i16>* %3632, align 2, !tbaa !396
  %3634 = getelementptr inbounds i16, i16* %3621, i64 -32
  %3635 = bitcast i16* %3634 to <16 x i16>*
  %3636 = load <16 x i16>, <16 x i16>* %3635, align 2, !tbaa !396
  %3637 = getelementptr inbounds i16, i16* %3621, i64 -16
  %3638 = bitcast i16* %3637 to <16 x i16>*
  %3639 = load <16 x i16>, <16 x i16>* %3638, align 2, !tbaa !396
  %3640 = add <16 x i16> %3630, %3624
  %3641 = add <16 x i16> %3640, %3636
  %3642 = add <16 x i16> %3633, %3627
  %3643 = add <16 x i16> %3642, %3639
  %3644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3641, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3643, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3646 = shufflevector <16 x i16> %3644, <16 x i16> %3645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3647 = lshr <32 x i16> %3646, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3648 = shufflevector <32 x i16> %3647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3649 = zext i32 %.pre-phi3346 to i64
  %3650 = mul nsw i64 %96, %3649
  %3651 = add nsw i64 %98, %3650
  %3652 = getelementptr inbounds i16, i16* %blur_x, i64 %3651
  %3653 = getelementptr inbounds i16, i16* %3652, i64 -32
  %3654 = bitcast i16* %3653 to <16 x i16>*
  store <16 x i16> %3648, <16 x i16>* %3654, align 2, !tbaa !399
  %3655 = shufflevector <32 x i16> %3647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3656 = getelementptr inbounds i16, i16* %3652, i64 -16
  %3657 = bitcast i16* %3656 to <16 x i16>*
  store <16 x i16> %3655, <16 x i16>* %3657, align 2, !tbaa !399
  %3658 = zext i32 %.pre-phi to i64
  %3659 = mul nsw i64 %3658, %108
  %3660 = add nsw i64 %3659, %93
  %3661 = getelementptr inbounds i16, i16* %blur_x, i64 %3660
  %3662 = getelementptr inbounds i16, i16* %3661, i64 -32
  %3663 = bitcast i16* %3662 to <16 x i16>*
  %3664 = load <16 x i16>, <16 x i16>* %3663, align 2, !tbaa !399
  %3665 = getelementptr inbounds i16, i16* %3661, i64 -16
  %3666 = bitcast i16* %3665 to <16 x i16>*
  %3667 = load <16 x i16>, <16 x i16>* %3666, align 2, !tbaa !399
  %3668 = mul nsw i64 %3649, %108
  %3669 = add nsw i64 %3668, %93
  %3670 = getelementptr inbounds i16, i16* %blur_x, i64 %3669
  %3671 = getelementptr inbounds i16, i16* %3670, i64 -32
  %3672 = bitcast i16* %3671 to <16 x i16>*
  %3673 = load <16 x i16>, <16 x i16>* %3672, align 2, !tbaa !399
  %3674 = getelementptr inbounds i16, i16* %3670, i64 -16
  %3675 = bitcast i16* %3674 to <16 x i16>*
  %3676 = load <16 x i16>, <16 x i16>* %3675, align 2, !tbaa !399
  %3677 = zext i32 %.pre-phi3356 to i64
  %3678 = mul nsw i64 %3677, %108
  %3679 = add nsw i64 %3678, %93
  %3680 = getelementptr inbounds i16, i16* %blur_x, i64 %3679
  %3681 = getelementptr inbounds i16, i16* %3680, i64 -32
  %3682 = bitcast i16* %3681 to <16 x i16>*
  %3683 = load <16 x i16>, <16 x i16>* %3682, align 2, !tbaa !399
  %3684 = getelementptr inbounds i16, i16* %3680, i64 -16
  %3685 = bitcast i16* %3684 to <16 x i16>*
  %3686 = load <16 x i16>, <16 x i16>* %3685, align 2, !tbaa !399
  %3687 = add <16 x i16> %3673, %3664
  %3688 = add <16 x i16> %3687, %3683
  %3689 = add <16 x i16> %3676, %3667
  %3690 = add <16 x i16> %3689, %3686
  %3691 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3688, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3690, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3693 = shufflevector <16 x i16> %3691, <16 x i16> %3692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3694 = lshr <32 x i16> %3693, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3695 = shufflevector <32 x i16> %3694, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3696 = sext i32 %a26 to i64
  %3697 = add nsw i64 %3696, 7
  %3698 = mul nsw i64 %3697, %109
  %3699 = add nsw i64 %111, %3698
  %3700 = getelementptr inbounds i16, i16* %65, i64 %3699
  %3701 = getelementptr inbounds i16, i16* %3700, i64 -32
  %3702 = bitcast i16* %3701 to <16 x i16>*
  store <16 x i16> %3695, <16 x i16>* %3702, align 2, !tbaa !401
  %3703 = shufflevector <32 x i16> %3694, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3704 = getelementptr inbounds i16, i16* %3700, i64 -16
  %3705 = bitcast i16* %3704 to <16 x i16>*
  store <16 x i16> %3703, <16 x i16>* %3705, align 2, !tbaa !401
  br label %after_bb207

"for blur_y.s0.x.x.rebased212":                   ; preds = %"for blur_y.s0.x.x.rebased212.preheader", %"consume blur_x219"
  %indvars.iv3152 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased212.preheader" ], [ %indvars.iv.next3153, %"consume blur_x219" ]
  %3706 = add nsw i64 %indvars.iv3152, %100
  %3707 = icmp slt i64 %3706, 1
  %3708 = trunc i64 %3706 to i32
  %3709 = shl nsw i32 %3708, 5
  %3710 = icmp sgt i32 %4, %3709
  %3711 = or i1 %3707, %3710
  br i1 %3711, label %"produce blur_x218", label %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge"

"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased212"
  %.pre3369 = shl nsw i64 %3706, 5
  br label %"consume blur_x219"

"end for blur_y.s0.x.x.rebased213":               ; preds = %"consume blur_x219", %after_bb207
  br i1 %101, label %"for blur_y.s0.x.x.rebased220.preheader", label %"end for blur_y.s0.x.x.rebased221", !prof !386

"for blur_y.s0.x.x.rebased220.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased213"
  %3712 = sext i32 %t1644 to i64
  %3713 = zext i32 %.pre-phi to i64
  %3714 = mul nsw i64 %3713, %108
  %3715 = sub nsw i64 %3714, %95
  %3716 = zext i32 %.pre-phi3346 to i64
  %3717 = mul nsw i64 %3716, %108
  %3718 = sub nsw i64 %3717, %95
  %3719 = zext i32 %.pre-phi3356 to i64
  %3720 = mul nsw i64 %3719, %108
  %3721 = sub nsw i64 %3720, %95
  %3722 = sext i32 %a26 to i64
  %3723 = add nsw i64 %3722, 7
  %3724 = mul nsw i64 %3723, %109
  %3725 = add nsw i64 %3724, %112
  br label %"for blur_y.s0.x.x.rebased220"

"produce blur_x218":                              ; preds = %"for blur_y.s0.x.x.rebased212"
  %t784 = add nsw i32 %3709, %t1761
  %3726 = sext i32 %t784 to i64
  %3727 = getelementptr inbounds i16, i16* %read_input, i64 %3726
  %3728 = getelementptr inbounds i16, i16* %3727, i64 1
  %3729 = bitcast i16* %3728 to <16 x i16>*
  %3730 = load <16 x i16>, <16 x i16>* %3729, align 2, !tbaa !396
  %3731 = getelementptr inbounds i16, i16* %3727, i64 17
  %3732 = bitcast i16* %3731 to <16 x i16>*
  %3733 = load <16 x i16>, <16 x i16>* %3732, align 2, !tbaa !396
  %3734 = getelementptr inbounds i16, i16* %3727, i64 2
  %3735 = bitcast i16* %3734 to <16 x i16>*
  %3736 = load <16 x i16>, <16 x i16>* %3735, align 2, !tbaa !396
  %3737 = getelementptr inbounds i16, i16* %3727, i64 18
  %3738 = bitcast i16* %3737 to <16 x i16>*
  %3739 = load <16 x i16>, <16 x i16>* %3738, align 2, !tbaa !396
  %3740 = bitcast i16* %3727 to <16 x i16>*
  %3741 = load <16 x i16>, <16 x i16>* %3740, align 2, !tbaa !396
  %3742 = getelementptr inbounds i16, i16* %3727, i64 16
  %3743 = bitcast i16* %3742 to <16 x i16>*
  %3744 = load <16 x i16>, <16 x i16>* %3743, align 2, !tbaa !396
  %3745 = add <16 x i16> %3736, %3730
  %3746 = add <16 x i16> %3745, %3741
  %3747 = add <16 x i16> %3739, %3733
  %3748 = add <16 x i16> %3747, %3744
  %3749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3746, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3748, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3751 = shufflevector <16 x i16> %3749, <16 x i16> %3750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3752 = lshr <32 x i16> %3751, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3753 = shufflevector <32 x i16> %3752, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3754 = shl nsw i64 %3706, 5
  %3755 = add nsw i64 %3754, %3607
  %3756 = getelementptr inbounds i16, i16* %blur_x, i64 %3755
  %3757 = bitcast i16* %3756 to <16 x i16>*
  store <16 x i16> %3753, <16 x i16>* %3757, align 2, !tbaa !399
  %3758 = shufflevector <32 x i16> %3752, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3759 = getelementptr inbounds i16, i16* %3756, i64 16
  %3760 = bitcast i16* %3759 to <16 x i16>*
  store <16 x i16> %3758, <16 x i16>* %3760, align 2, !tbaa !399
  br label %"consume blur_x219"

"consume blur_x219":                              ; preds = %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge", %"produce blur_x218"
  %.pre-phi3370 = phi i64 [ %.pre3369, %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge" ], [ %3754, %"produce blur_x218" ]
  %3761 = add nsw i64 %3610, %.pre-phi3370
  %3762 = getelementptr inbounds i16, i16* %blur_x, i64 %3761
  %3763 = bitcast i16* %3762 to <16 x i16>*
  %3764 = load <16 x i16>, <16 x i16>* %3763, align 2, !tbaa !399
  %3765 = getelementptr inbounds i16, i16* %3762, i64 16
  %3766 = bitcast i16* %3765 to <16 x i16>*
  %3767 = load <16 x i16>, <16 x i16>* %3766, align 2, !tbaa !399
  %3768 = add nsw i64 %3613, %.pre-phi3370
  %3769 = getelementptr inbounds i16, i16* %blur_x, i64 %3768
  %3770 = bitcast i16* %3769 to <16 x i16>*
  %3771 = load <16 x i16>, <16 x i16>* %3770, align 2, !tbaa !399
  %3772 = getelementptr inbounds i16, i16* %3769, i64 16
  %3773 = bitcast i16* %3772 to <16 x i16>*
  %3774 = load <16 x i16>, <16 x i16>* %3773, align 2, !tbaa !399
  %3775 = add nsw i64 %3616, %.pre-phi3370
  %3776 = getelementptr inbounds i16, i16* %blur_x, i64 %3775
  %3777 = bitcast i16* %3776 to <16 x i16>*
  %3778 = load <16 x i16>, <16 x i16>* %3777, align 2, !tbaa !399
  %3779 = getelementptr inbounds i16, i16* %3776, i64 16
  %3780 = bitcast i16* %3779 to <16 x i16>*
  %3781 = load <16 x i16>, <16 x i16>* %3780, align 2, !tbaa !399
  %3782 = add <16 x i16> %3771, %3764
  %3783 = add <16 x i16> %3782, %3778
  %3784 = add <16 x i16> %3774, %3767
  %3785 = add <16 x i16> %3784, %3781
  %3786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3783, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3785, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3788 = shufflevector <16 x i16> %3786, <16 x i16> %3787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3789 = lshr <32 x i16> %3788, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3790 = shufflevector <32 x i16> %3789, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3791 = add nsw i64 %3620, %.pre-phi3370
  %3792 = getelementptr inbounds i16, i16* %65, i64 %3791
  %3793 = bitcast i16* %3792 to <16 x i16>*
  store <16 x i16> %3790, <16 x i16>* %3793, align 2, !tbaa !401
  %3794 = shufflevector <32 x i16> %3789, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3795 = getelementptr inbounds i16, i16* %3792, i64 16
  %3796 = bitcast i16* %3795 to <16 x i16>*
  store <16 x i16> %3794, <16 x i16>* %3796, align 2, !tbaa !401
  %indvars.iv.next3153 = add nuw nsw i64 %indvars.iv3152, 1
  %.not2631 = icmp eq i64 %indvars.iv.next3153, %180
  br i1 %.not2631, label %"end for blur_y.s0.x.x.rebased213", label %"for blur_y.s0.x.x.rebased212"

"for blur_y.s0.x.x.rebased220":                   ; preds = %"for blur_y.s0.x.x.rebased220.preheader", %"consume blur_x228"
  %blur_y.s0.x.x.rebased222 = phi i32 [ %3875, %"consume blur_x228" ], [ 0, %"for blur_y.s0.x.x.rebased220.preheader" ]
  %3797 = add nsw i32 %blur_y.s0.x.x.rebased222, %t1582
  %a140 = shl nsw i32 %3797, 5
  %3798 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %3798, i32 %a140, i32 %a14
  %3799 = icmp slt i32 %3797, 1
  %3800 = icmp sgt i32 %4, %a140
  %3801 = or i1 %3799, %3800
  br i1 %3801, label %"produce blur_x226", label %"consume blur_x228"

"end for blur_y.s0.x.x.rebased221":               ; preds = %"consume blur_x228", %"end for blur_y.s0.x.x.rebased213"
  br i1 %34, label %"produce blur_x232", label %after_bb229

"produce blur_x226":                              ; preds = %"for blur_y.s0.x.x.rebased220"
  %3802 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s227 = select i1 %3802, i32 %b146, i32 %4
  %t789 = add nsw i32 %blur_x.s0.x.v1.base.s227, %t1761
  %3803 = sext i32 %t789 to i64
  %3804 = getelementptr inbounds i16, i16* %read_input, i64 %3803
  %3805 = getelementptr inbounds i16, i16* %3804, i64 1
  %3806 = bitcast i16* %3805 to <16 x i16>*
  %3807 = load <16 x i16>, <16 x i16>* %3806, align 2, !tbaa !396
  %3808 = getelementptr inbounds i16, i16* %3804, i64 17
  %3809 = bitcast i16* %3808 to <16 x i16>*
  %3810 = load <16 x i16>, <16 x i16>* %3809, align 2, !tbaa !396
  %3811 = getelementptr inbounds i16, i16* %3804, i64 2
  %3812 = bitcast i16* %3811 to <16 x i16>*
  %3813 = load <16 x i16>, <16 x i16>* %3812, align 2, !tbaa !396
  %3814 = getelementptr inbounds i16, i16* %3804, i64 18
  %3815 = bitcast i16* %3814 to <16 x i16>*
  %3816 = load <16 x i16>, <16 x i16>* %3815, align 2, !tbaa !396
  %3817 = bitcast i16* %3804 to <16 x i16>*
  %3818 = load <16 x i16>, <16 x i16>* %3817, align 2, !tbaa !396
  %3819 = getelementptr inbounds i16, i16* %3804, i64 16
  %3820 = bitcast i16* %3819 to <16 x i16>*
  %3821 = load <16 x i16>, <16 x i16>* %3820, align 2, !tbaa !396
  %3822 = add <16 x i16> %3813, %3807
  %3823 = add <16 x i16> %3822, %3818
  %3824 = add <16 x i16> %3816, %3810
  %3825 = add <16 x i16> %3824, %3821
  %3826 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3823, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3827 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3825, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3828 = shufflevector <16 x i16> %3826, <16 x i16> %3827, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3829 = lshr <32 x i16> %3828, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3830 = shufflevector <32 x i16> %3829, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3831 = sext i32 %blur_x.s0.x.v1.base.s227 to i64
  %3832 = add nsw i64 %3831, %3712
  %3833 = getelementptr inbounds i16, i16* %blur_x, i64 %3832
  %3834 = bitcast i16* %3833 to <16 x i16>*
  store <16 x i16> %3830, <16 x i16>* %3834, align 2, !tbaa !399
  %3835 = shufflevector <32 x i16> %3829, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3836 = getelementptr inbounds i16, i16* %3833, i64 16
  %3837 = bitcast i16* %3836 to <16 x i16>*
  store <16 x i16> %3835, <16 x i16>* %3837, align 2, !tbaa !399
  br label %"consume blur_x228"

"consume blur_x228":                              ; preds = %"for blur_y.s0.x.x.rebased220", %"produce blur_x226"
  %3838 = sext i32 %b146 to i64
  %3839 = add nsw i64 %3715, %3838
  %3840 = getelementptr inbounds i16, i16* %blur_x, i64 %3839
  %3841 = bitcast i16* %3840 to <16 x i16>*
  %3842 = load <16 x i16>, <16 x i16>* %3841, align 2, !tbaa !399
  %3843 = getelementptr inbounds i16, i16* %3840, i64 16
  %3844 = bitcast i16* %3843 to <16 x i16>*
  %3845 = load <16 x i16>, <16 x i16>* %3844, align 2, !tbaa !399
  %3846 = add nsw i64 %3718, %3838
  %3847 = getelementptr inbounds i16, i16* %blur_x, i64 %3846
  %3848 = bitcast i16* %3847 to <16 x i16>*
  %3849 = load <16 x i16>, <16 x i16>* %3848, align 2, !tbaa !399
  %3850 = getelementptr inbounds i16, i16* %3847, i64 16
  %3851 = bitcast i16* %3850 to <16 x i16>*
  %3852 = load <16 x i16>, <16 x i16>* %3851, align 2, !tbaa !399
  %3853 = add nsw i64 %3721, %3838
  %3854 = getelementptr inbounds i16, i16* %blur_x, i64 %3853
  %3855 = bitcast i16* %3854 to <16 x i16>*
  %3856 = load <16 x i16>, <16 x i16>* %3855, align 2, !tbaa !399
  %3857 = getelementptr inbounds i16, i16* %3854, i64 16
  %3858 = bitcast i16* %3857 to <16 x i16>*
  %3859 = load <16 x i16>, <16 x i16>* %3858, align 2, !tbaa !399
  %3860 = add <16 x i16> %3849, %3842
  %3861 = add <16 x i16> %3860, %3856
  %3862 = add <16 x i16> %3852, %3845
  %3863 = add <16 x i16> %3862, %3859
  %3864 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3861, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3865 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3863, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3866 = shufflevector <16 x i16> %3864, <16 x i16> %3865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3867 = lshr <32 x i16> %3866, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3868 = shufflevector <32 x i16> %3867, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3869 = add nsw i64 %3725, %3838
  %3870 = getelementptr inbounds i16, i16* %65, i64 %3869
  %3871 = bitcast i16* %3870 to <16 x i16>*
  store <16 x i16> %3868, <16 x i16>* %3871, align 2, !tbaa !401
  %3872 = shufflevector <32 x i16> %3867, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3873 = getelementptr inbounds i16, i16* %3870, i64 16
  %3874 = bitcast i16* %3873 to <16 x i16>*
  store <16 x i16> %3872, <16 x i16>* %3874, align 2, !tbaa !401
  %3875 = add nuw nsw i32 %blur_y.s0.x.x.rebased222, 1
  %.not2630 = icmp eq i32 %3875, %t1639
  br i1 %.not2630, label %"end for blur_y.s0.x.x.rebased221", label %"for blur_y.s0.x.x.rebased220"

after_bb229:                                      ; preds = %"end for blur_y.s0.x.x.rebased221", %"produce blur_x232"
  br i1 %99, label %"for blur_y.s0.x.x.rebased234.preheader", label %"end for blur_y.s0.x.x.rebased235", !prof !386

"for blur_y.s0.x.x.rebased234.preheader":         ; preds = %after_bb229
  %3876 = sext i32 %t1650 to i64
  %3877 = zext i32 %.pre-phi3346 to i64
  %3878 = mul nsw i64 %3877, %108
  %3879 = sub nsw i64 %3878, %95
  %3880 = zext i32 %.pre-phi3350 to i64
  %3881 = mul nsw i64 %3880, %108
  %3882 = sub nsw i64 %3881, %95
  %3883 = zext i32 %.pre-phi to i64
  %3884 = mul nsw i64 %3883, %108
  %3885 = sub nsw i64 %3884, %95
  %3886 = sext i32 %a26 to i64
  %3887 = add nsw i64 %3886, 8
  %3888 = mul nsw i64 %3887, %109
  %3889 = add nsw i64 %3888, %112
  br label %"for blur_y.s0.x.x.rebased234"

"produce blur_x232":                              ; preds = %"end for blur_y.s0.x.x.rebased221"
  %3890 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %3891 = getelementptr inbounds i16, i16* %3890, i64 -31
  %3892 = bitcast i16* %3891 to <16 x i16>*
  %3893 = load <16 x i16>, <16 x i16>* %3892, align 2, !tbaa !396
  %3894 = getelementptr inbounds i16, i16* %3890, i64 -15
  %3895 = bitcast i16* %3894 to <16 x i16>*
  %3896 = load <16 x i16>, <16 x i16>* %3895, align 2, !tbaa !396
  %3897 = getelementptr inbounds i16, i16* %3890, i64 -30
  %3898 = bitcast i16* %3897 to <16 x i16>*
  %3899 = load <16 x i16>, <16 x i16>* %3898, align 2, !tbaa !396
  %3900 = getelementptr inbounds i16, i16* %3890, i64 -14
  %3901 = bitcast i16* %3900 to <16 x i16>*
  %3902 = load <16 x i16>, <16 x i16>* %3901, align 2, !tbaa !396
  %3903 = getelementptr inbounds i16, i16* %3890, i64 -32
  %3904 = bitcast i16* %3903 to <16 x i16>*
  %3905 = load <16 x i16>, <16 x i16>* %3904, align 2, !tbaa !396
  %3906 = getelementptr inbounds i16, i16* %3890, i64 -16
  %3907 = bitcast i16* %3906 to <16 x i16>*
  %3908 = load <16 x i16>, <16 x i16>* %3907, align 2, !tbaa !396
  %3909 = add <16 x i16> %3899, %3893
  %3910 = add <16 x i16> %3909, %3905
  %3911 = add <16 x i16> %3902, %3896
  %3912 = add <16 x i16> %3911, %3908
  %3913 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3910, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3912, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3915 = shufflevector <16 x i16> %3913, <16 x i16> %3914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3916 = lshr <32 x i16> %3915, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3917 = shufflevector <32 x i16> %3916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3918 = zext i32 %.pre-phi3350 to i64
  %3919 = mul nsw i64 %96, %3918
  %3920 = add nsw i64 %98, %3919
  %3921 = getelementptr inbounds i16, i16* %blur_x, i64 %3920
  %3922 = getelementptr inbounds i16, i16* %3921, i64 -32
  %3923 = bitcast i16* %3922 to <16 x i16>*
  store <16 x i16> %3917, <16 x i16>* %3923, align 2, !tbaa !399
  %3924 = shufflevector <32 x i16> %3916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3925 = getelementptr inbounds i16, i16* %3921, i64 -16
  %3926 = bitcast i16* %3925 to <16 x i16>*
  store <16 x i16> %3924, <16 x i16>* %3926, align 2, !tbaa !399
  %3927 = zext i32 %.pre-phi3346 to i64
  %3928 = mul nsw i64 %3927, %108
  %3929 = add nsw i64 %3928, %93
  %3930 = getelementptr inbounds i16, i16* %blur_x, i64 %3929
  %3931 = getelementptr inbounds i16, i16* %3930, i64 -32
  %3932 = bitcast i16* %3931 to <16 x i16>*
  %3933 = load <16 x i16>, <16 x i16>* %3932, align 2, !tbaa !399
  %3934 = getelementptr inbounds i16, i16* %3930, i64 -16
  %3935 = bitcast i16* %3934 to <16 x i16>*
  %3936 = load <16 x i16>, <16 x i16>* %3935, align 2, !tbaa !399
  %3937 = mul nsw i64 %3918, %108
  %3938 = add nsw i64 %3937, %93
  %3939 = getelementptr inbounds i16, i16* %blur_x, i64 %3938
  %3940 = getelementptr inbounds i16, i16* %3939, i64 -32
  %3941 = bitcast i16* %3940 to <16 x i16>*
  %3942 = load <16 x i16>, <16 x i16>* %3941, align 2, !tbaa !399
  %3943 = getelementptr inbounds i16, i16* %3939, i64 -16
  %3944 = bitcast i16* %3943 to <16 x i16>*
  %3945 = load <16 x i16>, <16 x i16>* %3944, align 2, !tbaa !399
  %3946 = zext i32 %.pre-phi to i64
  %3947 = mul nsw i64 %3946, %108
  %3948 = add nsw i64 %3947, %93
  %3949 = getelementptr inbounds i16, i16* %blur_x, i64 %3948
  %3950 = getelementptr inbounds i16, i16* %3949, i64 -32
  %3951 = bitcast i16* %3950 to <16 x i16>*
  %3952 = load <16 x i16>, <16 x i16>* %3951, align 2, !tbaa !399
  %3953 = getelementptr inbounds i16, i16* %3949, i64 -16
  %3954 = bitcast i16* %3953 to <16 x i16>*
  %3955 = load <16 x i16>, <16 x i16>* %3954, align 2, !tbaa !399
  %3956 = add <16 x i16> %3942, %3933
  %3957 = add <16 x i16> %3956, %3952
  %3958 = add <16 x i16> %3945, %3936
  %3959 = add <16 x i16> %3958, %3955
  %3960 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3957, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3961 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3959, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3962 = shufflevector <16 x i16> %3960, <16 x i16> %3961, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3963 = lshr <32 x i16> %3962, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3964 = shufflevector <32 x i16> %3963, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3965 = sext i32 %a26 to i64
  %3966 = add nsw i64 %3965, 8
  %3967 = mul nsw i64 %3966, %109
  %3968 = add nsw i64 %111, %3967
  %3969 = getelementptr inbounds i16, i16* %65, i64 %3968
  %3970 = getelementptr inbounds i16, i16* %3969, i64 -32
  %3971 = bitcast i16* %3970 to <16 x i16>*
  store <16 x i16> %3964, <16 x i16>* %3971, align 2, !tbaa !401
  %3972 = shufflevector <32 x i16> %3963, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3973 = getelementptr inbounds i16, i16* %3969, i64 -16
  %3974 = bitcast i16* %3973 to <16 x i16>*
  store <16 x i16> %3972, <16 x i16>* %3974, align 2, !tbaa !401
  br label %after_bb229

"for blur_y.s0.x.x.rebased234":                   ; preds = %"for blur_y.s0.x.x.rebased234.preheader", %"consume blur_x241"
  %indvars.iv3155 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased234.preheader" ], [ %indvars.iv.next3156, %"consume blur_x241" ]
  %3975 = add nsw i64 %indvars.iv3155, %100
  %3976 = icmp slt i64 %3975, 1
  %3977 = trunc i64 %3975 to i32
  %3978 = shl nsw i32 %3977, 5
  %3979 = icmp sgt i32 %4, %3978
  %3980 = or i1 %3976, %3979
  br i1 %3980, label %"produce blur_x240", label %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge"

"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased234"
  %.pre3371 = shl nsw i64 %3975, 5
  br label %"consume blur_x241"

"end for blur_y.s0.x.x.rebased235":               ; preds = %"consume blur_x241", %after_bb229
  br i1 %101, label %"for blur_y.s0.x.x.rebased242.preheader", label %"end for blur_y.s0.x.x.rebased243", !prof !386

"for blur_y.s0.x.x.rebased242.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased235"
  %3981 = sext i32 %t1650 to i64
  %3982 = zext i32 %.pre-phi3346 to i64
  %3983 = mul nsw i64 %3982, %108
  %3984 = sub nsw i64 %3983, %95
  %3985 = zext i32 %.pre-phi3350 to i64
  %3986 = mul nsw i64 %3985, %108
  %3987 = sub nsw i64 %3986, %95
  %3988 = zext i32 %.pre-phi to i64
  %3989 = mul nsw i64 %3988, %108
  %3990 = sub nsw i64 %3989, %95
  %3991 = sext i32 %a26 to i64
  %3992 = add nsw i64 %3991, 8
  %3993 = mul nsw i64 %3992, %109
  %3994 = add nsw i64 %3993, %112
  br label %"for blur_y.s0.x.x.rebased242"

"produce blur_x240":                              ; preds = %"for blur_y.s0.x.x.rebased234"
  %t800 = add nsw i32 %3978, %t1777
  %3995 = sext i32 %t800 to i64
  %3996 = getelementptr inbounds i16, i16* %read_input, i64 %3995
  %3997 = getelementptr inbounds i16, i16* %3996, i64 1
  %3998 = bitcast i16* %3997 to <16 x i16>*
  %3999 = load <16 x i16>, <16 x i16>* %3998, align 2, !tbaa !396
  %4000 = getelementptr inbounds i16, i16* %3996, i64 17
  %4001 = bitcast i16* %4000 to <16 x i16>*
  %4002 = load <16 x i16>, <16 x i16>* %4001, align 2, !tbaa !396
  %4003 = getelementptr inbounds i16, i16* %3996, i64 2
  %4004 = bitcast i16* %4003 to <16 x i16>*
  %4005 = load <16 x i16>, <16 x i16>* %4004, align 2, !tbaa !396
  %4006 = getelementptr inbounds i16, i16* %3996, i64 18
  %4007 = bitcast i16* %4006 to <16 x i16>*
  %4008 = load <16 x i16>, <16 x i16>* %4007, align 2, !tbaa !396
  %4009 = bitcast i16* %3996 to <16 x i16>*
  %4010 = load <16 x i16>, <16 x i16>* %4009, align 2, !tbaa !396
  %4011 = getelementptr inbounds i16, i16* %3996, i64 16
  %4012 = bitcast i16* %4011 to <16 x i16>*
  %4013 = load <16 x i16>, <16 x i16>* %4012, align 2, !tbaa !396
  %4014 = add <16 x i16> %4005, %3999
  %4015 = add <16 x i16> %4014, %4010
  %4016 = add <16 x i16> %4008, %4002
  %4017 = add <16 x i16> %4016, %4013
  %4018 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4015, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4019 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4017, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4020 = shufflevector <16 x i16> %4018, <16 x i16> %4019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4021 = lshr <32 x i16> %4020, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4022 = shufflevector <32 x i16> %4021, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4023 = shl nsw i64 %3975, 5
  %4024 = add nsw i64 %4023, %3876
  %4025 = getelementptr inbounds i16, i16* %blur_x, i64 %4024
  %4026 = bitcast i16* %4025 to <16 x i16>*
  store <16 x i16> %4022, <16 x i16>* %4026, align 2, !tbaa !399
  %4027 = shufflevector <32 x i16> %4021, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4028 = getelementptr inbounds i16, i16* %4025, i64 16
  %4029 = bitcast i16* %4028 to <16 x i16>*
  store <16 x i16> %4027, <16 x i16>* %4029, align 2, !tbaa !399
  br label %"consume blur_x241"

"consume blur_x241":                              ; preds = %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge", %"produce blur_x240"
  %.pre-phi3372 = phi i64 [ %.pre3371, %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge" ], [ %4023, %"produce blur_x240" ]
  %4030 = add nsw i64 %3879, %.pre-phi3372
  %4031 = getelementptr inbounds i16, i16* %blur_x, i64 %4030
  %4032 = bitcast i16* %4031 to <16 x i16>*
  %4033 = load <16 x i16>, <16 x i16>* %4032, align 2, !tbaa !399
  %4034 = getelementptr inbounds i16, i16* %4031, i64 16
  %4035 = bitcast i16* %4034 to <16 x i16>*
  %4036 = load <16 x i16>, <16 x i16>* %4035, align 2, !tbaa !399
  %4037 = add nsw i64 %3882, %.pre-phi3372
  %4038 = getelementptr inbounds i16, i16* %blur_x, i64 %4037
  %4039 = bitcast i16* %4038 to <16 x i16>*
  %4040 = load <16 x i16>, <16 x i16>* %4039, align 2, !tbaa !399
  %4041 = getelementptr inbounds i16, i16* %4038, i64 16
  %4042 = bitcast i16* %4041 to <16 x i16>*
  %4043 = load <16 x i16>, <16 x i16>* %4042, align 2, !tbaa !399
  %4044 = add nsw i64 %3885, %.pre-phi3372
  %4045 = getelementptr inbounds i16, i16* %blur_x, i64 %4044
  %4046 = bitcast i16* %4045 to <16 x i16>*
  %4047 = load <16 x i16>, <16 x i16>* %4046, align 2, !tbaa !399
  %4048 = getelementptr inbounds i16, i16* %4045, i64 16
  %4049 = bitcast i16* %4048 to <16 x i16>*
  %4050 = load <16 x i16>, <16 x i16>* %4049, align 2, !tbaa !399
  %4051 = add <16 x i16> %4040, %4033
  %4052 = add <16 x i16> %4051, %4047
  %4053 = add <16 x i16> %4043, %4036
  %4054 = add <16 x i16> %4053, %4050
  %4055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4052, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4056 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4054, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4057 = shufflevector <16 x i16> %4055, <16 x i16> %4056, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4058 = lshr <32 x i16> %4057, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4059 = shufflevector <32 x i16> %4058, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4060 = add nsw i64 %3889, %.pre-phi3372
  %4061 = getelementptr inbounds i16, i16* %65, i64 %4060
  %4062 = bitcast i16* %4061 to <16 x i16>*
  store <16 x i16> %4059, <16 x i16>* %4062, align 2, !tbaa !401
  %4063 = shufflevector <32 x i16> %4058, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4064 = getelementptr inbounds i16, i16* %4061, i64 16
  %4065 = bitcast i16* %4064 to <16 x i16>*
  store <16 x i16> %4063, <16 x i16>* %4065, align 2, !tbaa !401
  %indvars.iv.next3156 = add nuw nsw i64 %indvars.iv3155, 1
  %.not2629 = icmp eq i64 %indvars.iv.next3156, %180
  br i1 %.not2629, label %"end for blur_y.s0.x.x.rebased235", label %"for blur_y.s0.x.x.rebased234"

"for blur_y.s0.x.x.rebased242":                   ; preds = %"for blur_y.s0.x.x.rebased242.preheader", %"consume blur_x250"
  %blur_y.s0.x.x.rebased244 = phi i32 [ %4144, %"consume blur_x250" ], [ 0, %"for blur_y.s0.x.x.rebased242.preheader" ]
  %4066 = add nsw i32 %blur_y.s0.x.x.rebased244, %t1582
  %a147 = shl nsw i32 %4066, 5
  %4067 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %4067, i32 %a147, i32 %a14
  %4068 = icmp slt i32 %4066, 1
  %4069 = icmp sgt i32 %4, %a147
  %4070 = or i1 %4068, %4069
  br i1 %4070, label %"produce blur_x248", label %"consume blur_x250"

"end for blur_y.s0.x.x.rebased243":               ; preds = %"consume blur_x250", %"end for blur_y.s0.x.x.rebased235"
  br i1 %34, label %"produce blur_x254", label %after_bb251

"produce blur_x248":                              ; preds = %"for blur_y.s0.x.x.rebased242"
  %4071 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s249 = select i1 %4071, i32 %b153, i32 %4
  %t805 = add nsw i32 %blur_x.s0.x.v1.base.s249, %t1777
  %4072 = sext i32 %t805 to i64
  %4073 = getelementptr inbounds i16, i16* %read_input, i64 %4072
  %4074 = getelementptr inbounds i16, i16* %4073, i64 1
  %4075 = bitcast i16* %4074 to <16 x i16>*
  %4076 = load <16 x i16>, <16 x i16>* %4075, align 2, !tbaa !396
  %4077 = getelementptr inbounds i16, i16* %4073, i64 17
  %4078 = bitcast i16* %4077 to <16 x i16>*
  %4079 = load <16 x i16>, <16 x i16>* %4078, align 2, !tbaa !396
  %4080 = getelementptr inbounds i16, i16* %4073, i64 2
  %4081 = bitcast i16* %4080 to <16 x i16>*
  %4082 = load <16 x i16>, <16 x i16>* %4081, align 2, !tbaa !396
  %4083 = getelementptr inbounds i16, i16* %4073, i64 18
  %4084 = bitcast i16* %4083 to <16 x i16>*
  %4085 = load <16 x i16>, <16 x i16>* %4084, align 2, !tbaa !396
  %4086 = bitcast i16* %4073 to <16 x i16>*
  %4087 = load <16 x i16>, <16 x i16>* %4086, align 2, !tbaa !396
  %4088 = getelementptr inbounds i16, i16* %4073, i64 16
  %4089 = bitcast i16* %4088 to <16 x i16>*
  %4090 = load <16 x i16>, <16 x i16>* %4089, align 2, !tbaa !396
  %4091 = add <16 x i16> %4082, %4076
  %4092 = add <16 x i16> %4091, %4087
  %4093 = add <16 x i16> %4085, %4079
  %4094 = add <16 x i16> %4093, %4090
  %4095 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4092, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4096 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4094, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4097 = shufflevector <16 x i16> %4095, <16 x i16> %4096, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4098 = lshr <32 x i16> %4097, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4099 = shufflevector <32 x i16> %4098, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4100 = sext i32 %blur_x.s0.x.v1.base.s249 to i64
  %4101 = add nsw i64 %4100, %3981
  %4102 = getelementptr inbounds i16, i16* %blur_x, i64 %4101
  %4103 = bitcast i16* %4102 to <16 x i16>*
  store <16 x i16> %4099, <16 x i16>* %4103, align 2, !tbaa !399
  %4104 = shufflevector <32 x i16> %4098, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4105 = getelementptr inbounds i16, i16* %4102, i64 16
  %4106 = bitcast i16* %4105 to <16 x i16>*
  store <16 x i16> %4104, <16 x i16>* %4106, align 2, !tbaa !399
  br label %"consume blur_x250"

"consume blur_x250":                              ; preds = %"for blur_y.s0.x.x.rebased242", %"produce blur_x248"
  %4107 = sext i32 %b153 to i64
  %4108 = add nsw i64 %3984, %4107
  %4109 = getelementptr inbounds i16, i16* %blur_x, i64 %4108
  %4110 = bitcast i16* %4109 to <16 x i16>*
  %4111 = load <16 x i16>, <16 x i16>* %4110, align 2, !tbaa !399
  %4112 = getelementptr inbounds i16, i16* %4109, i64 16
  %4113 = bitcast i16* %4112 to <16 x i16>*
  %4114 = load <16 x i16>, <16 x i16>* %4113, align 2, !tbaa !399
  %4115 = add nsw i64 %3987, %4107
  %4116 = getelementptr inbounds i16, i16* %blur_x, i64 %4115
  %4117 = bitcast i16* %4116 to <16 x i16>*
  %4118 = load <16 x i16>, <16 x i16>* %4117, align 2, !tbaa !399
  %4119 = getelementptr inbounds i16, i16* %4116, i64 16
  %4120 = bitcast i16* %4119 to <16 x i16>*
  %4121 = load <16 x i16>, <16 x i16>* %4120, align 2, !tbaa !399
  %4122 = add nsw i64 %3990, %4107
  %4123 = getelementptr inbounds i16, i16* %blur_x, i64 %4122
  %4124 = bitcast i16* %4123 to <16 x i16>*
  %4125 = load <16 x i16>, <16 x i16>* %4124, align 2, !tbaa !399
  %4126 = getelementptr inbounds i16, i16* %4123, i64 16
  %4127 = bitcast i16* %4126 to <16 x i16>*
  %4128 = load <16 x i16>, <16 x i16>* %4127, align 2, !tbaa !399
  %4129 = add <16 x i16> %4118, %4111
  %4130 = add <16 x i16> %4129, %4125
  %4131 = add <16 x i16> %4121, %4114
  %4132 = add <16 x i16> %4131, %4128
  %4133 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4130, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4134 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4132, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4135 = shufflevector <16 x i16> %4133, <16 x i16> %4134, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4136 = lshr <32 x i16> %4135, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4137 = shufflevector <32 x i16> %4136, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4138 = add nsw i64 %3994, %4107
  %4139 = getelementptr inbounds i16, i16* %65, i64 %4138
  %4140 = bitcast i16* %4139 to <16 x i16>*
  store <16 x i16> %4137, <16 x i16>* %4140, align 2, !tbaa !401
  %4141 = shufflevector <32 x i16> %4136, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4142 = getelementptr inbounds i16, i16* %4139, i64 16
  %4143 = bitcast i16* %4142 to <16 x i16>*
  store <16 x i16> %4141, <16 x i16>* %4143, align 2, !tbaa !401
  %4144 = add nuw nsw i32 %blur_y.s0.x.x.rebased244, 1
  %.not2628 = icmp eq i32 %4144, %t1639
  br i1 %.not2628, label %"end for blur_y.s0.x.x.rebased243", label %"for blur_y.s0.x.x.rebased242"

after_bb251:                                      ; preds = %"end for blur_y.s0.x.x.rebased243", %"produce blur_x254"
  br i1 %99, label %"for blur_y.s0.x.x.rebased256.preheader", label %"end for blur_y.s0.x.x.rebased257", !prof !386

"for blur_y.s0.x.x.rebased256.preheader":         ; preds = %after_bb251
  %4145 = sext i32 %t1666 to i64
  %4146 = zext i32 %.pre-phi3350 to i64
  %4147 = mul nsw i64 %4146, %108
  %4148 = sub nsw i64 %4147, %95
  %4149 = zext i32 %.pre-phi3356 to i64
  %4150 = mul nsw i64 %4149, %108
  %4151 = sub nsw i64 %4150, %95
  %4152 = zext i32 %.pre-phi3346 to i64
  %4153 = mul nsw i64 %4152, %108
  %4154 = sub nsw i64 %4153, %95
  %4155 = sext i32 %a26 to i64
  %4156 = add nsw i64 %4155, 9
  %4157 = mul nsw i64 %4156, %109
  %4158 = add nsw i64 %4157, %112
  br label %"for blur_y.s0.x.x.rebased256"

"produce blur_x254":                              ; preds = %"end for blur_y.s0.x.x.rebased243"
  %4159 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %4160 = getelementptr inbounds i16, i16* %4159, i64 -31
  %4161 = bitcast i16* %4160 to <16 x i16>*
  %4162 = load <16 x i16>, <16 x i16>* %4161, align 2, !tbaa !396
  %4163 = getelementptr inbounds i16, i16* %4159, i64 -15
  %4164 = bitcast i16* %4163 to <16 x i16>*
  %4165 = load <16 x i16>, <16 x i16>* %4164, align 2, !tbaa !396
  %4166 = getelementptr inbounds i16, i16* %4159, i64 -30
  %4167 = bitcast i16* %4166 to <16 x i16>*
  %4168 = load <16 x i16>, <16 x i16>* %4167, align 2, !tbaa !396
  %4169 = getelementptr inbounds i16, i16* %4159, i64 -14
  %4170 = bitcast i16* %4169 to <16 x i16>*
  %4171 = load <16 x i16>, <16 x i16>* %4170, align 2, !tbaa !396
  %4172 = getelementptr inbounds i16, i16* %4159, i64 -32
  %4173 = bitcast i16* %4172 to <16 x i16>*
  %4174 = load <16 x i16>, <16 x i16>* %4173, align 2, !tbaa !396
  %4175 = getelementptr inbounds i16, i16* %4159, i64 -16
  %4176 = bitcast i16* %4175 to <16 x i16>*
  %4177 = load <16 x i16>, <16 x i16>* %4176, align 2, !tbaa !396
  %4178 = add <16 x i16> %4168, %4162
  %4179 = add <16 x i16> %4178, %4174
  %4180 = add <16 x i16> %4171, %4165
  %4181 = add <16 x i16> %4180, %4177
  %4182 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4179, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4183 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4181, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4184 = shufflevector <16 x i16> %4182, <16 x i16> %4183, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4185 = lshr <32 x i16> %4184, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4186 = shufflevector <32 x i16> %4185, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4187 = zext i32 %.pre-phi3356 to i64
  %4188 = mul nsw i64 %96, %4187
  %4189 = add nsw i64 %98, %4188
  %4190 = getelementptr inbounds i16, i16* %blur_x, i64 %4189
  %4191 = getelementptr inbounds i16, i16* %4190, i64 -32
  %4192 = bitcast i16* %4191 to <16 x i16>*
  store <16 x i16> %4186, <16 x i16>* %4192, align 2, !tbaa !399
  %4193 = shufflevector <32 x i16> %4185, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4194 = getelementptr inbounds i16, i16* %4190, i64 -16
  %4195 = bitcast i16* %4194 to <16 x i16>*
  store <16 x i16> %4193, <16 x i16>* %4195, align 2, !tbaa !399
  %4196 = zext i32 %.pre-phi3350 to i64
  %4197 = mul nsw i64 %4196, %108
  %4198 = add nsw i64 %4197, %93
  %4199 = getelementptr inbounds i16, i16* %blur_x, i64 %4198
  %4200 = getelementptr inbounds i16, i16* %4199, i64 -32
  %4201 = bitcast i16* %4200 to <16 x i16>*
  %4202 = load <16 x i16>, <16 x i16>* %4201, align 2, !tbaa !399
  %4203 = getelementptr inbounds i16, i16* %4199, i64 -16
  %4204 = bitcast i16* %4203 to <16 x i16>*
  %4205 = load <16 x i16>, <16 x i16>* %4204, align 2, !tbaa !399
  %4206 = mul nsw i64 %4187, %108
  %4207 = add nsw i64 %4206, %93
  %4208 = getelementptr inbounds i16, i16* %blur_x, i64 %4207
  %4209 = getelementptr inbounds i16, i16* %4208, i64 -32
  %4210 = bitcast i16* %4209 to <16 x i16>*
  %4211 = load <16 x i16>, <16 x i16>* %4210, align 2, !tbaa !399
  %4212 = getelementptr inbounds i16, i16* %4208, i64 -16
  %4213 = bitcast i16* %4212 to <16 x i16>*
  %4214 = load <16 x i16>, <16 x i16>* %4213, align 2, !tbaa !399
  %4215 = zext i32 %.pre-phi3346 to i64
  %4216 = mul nsw i64 %4215, %108
  %4217 = add nsw i64 %4216, %93
  %4218 = getelementptr inbounds i16, i16* %blur_x, i64 %4217
  %4219 = getelementptr inbounds i16, i16* %4218, i64 -32
  %4220 = bitcast i16* %4219 to <16 x i16>*
  %4221 = load <16 x i16>, <16 x i16>* %4220, align 2, !tbaa !399
  %4222 = getelementptr inbounds i16, i16* %4218, i64 -16
  %4223 = bitcast i16* %4222 to <16 x i16>*
  %4224 = load <16 x i16>, <16 x i16>* %4223, align 2, !tbaa !399
  %4225 = add <16 x i16> %4211, %4202
  %4226 = add <16 x i16> %4225, %4221
  %4227 = add <16 x i16> %4214, %4205
  %4228 = add <16 x i16> %4227, %4224
  %4229 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4226, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4228, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4231 = shufflevector <16 x i16> %4229, <16 x i16> %4230, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4232 = lshr <32 x i16> %4231, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4233 = shufflevector <32 x i16> %4232, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4234 = sext i32 %a26 to i64
  %4235 = add nsw i64 %4234, 9
  %4236 = mul nsw i64 %4235, %109
  %4237 = add nsw i64 %111, %4236
  %4238 = getelementptr inbounds i16, i16* %65, i64 %4237
  %4239 = getelementptr inbounds i16, i16* %4238, i64 -32
  %4240 = bitcast i16* %4239 to <16 x i16>*
  store <16 x i16> %4233, <16 x i16>* %4240, align 2, !tbaa !401
  %4241 = shufflevector <32 x i16> %4232, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4242 = getelementptr inbounds i16, i16* %4238, i64 -16
  %4243 = bitcast i16* %4242 to <16 x i16>*
  store <16 x i16> %4241, <16 x i16>* %4243, align 2, !tbaa !401
  br label %after_bb251

"for blur_y.s0.x.x.rebased256":                   ; preds = %"for blur_y.s0.x.x.rebased256.preheader", %"consume blur_x263"
  %indvars.iv3158 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased256.preheader" ], [ %indvars.iv.next3159, %"consume blur_x263" ]
  %4244 = add nsw i64 %indvars.iv3158, %100
  %4245 = icmp slt i64 %4244, 1
  %4246 = trunc i64 %4244 to i32
  %4247 = shl nsw i32 %4246, 5
  %4248 = icmp sgt i32 %4, %4247
  %4249 = or i1 %4245, %4248
  br i1 %4249, label %"produce blur_x262", label %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge"

"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased256"
  %.pre3373 = shl nsw i64 %4244, 5
  br label %"consume blur_x263"

"end for blur_y.s0.x.x.rebased257":               ; preds = %"consume blur_x263", %after_bb251
  br i1 %101, label %"for blur_y.s0.x.x.rebased264.preheader", label %"end for blur_y.s0.x.x.rebased265", !prof !386

"for blur_y.s0.x.x.rebased264.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased257"
  %4250 = sext i32 %t1666 to i64
  %4251 = zext i32 %.pre-phi3350 to i64
  %4252 = mul nsw i64 %4251, %108
  %4253 = sub nsw i64 %4252, %95
  %4254 = zext i32 %.pre-phi3356 to i64
  %4255 = mul nsw i64 %4254, %108
  %4256 = sub nsw i64 %4255, %95
  %4257 = zext i32 %.pre-phi3346 to i64
  %4258 = mul nsw i64 %4257, %108
  %4259 = sub nsw i64 %4258, %95
  %4260 = sext i32 %a26 to i64
  %4261 = add nsw i64 %4260, 9
  %4262 = mul nsw i64 %4261, %109
  %4263 = add nsw i64 %4262, %112
  br label %"for blur_y.s0.x.x.rebased264"

"produce blur_x262":                              ; preds = %"for blur_y.s0.x.x.rebased256"
  %t816 = add nsw i32 %4247, %t1793
  %4264 = sext i32 %t816 to i64
  %4265 = getelementptr inbounds i16, i16* %read_input, i64 %4264
  %4266 = getelementptr inbounds i16, i16* %4265, i64 1
  %4267 = bitcast i16* %4266 to <16 x i16>*
  %4268 = load <16 x i16>, <16 x i16>* %4267, align 2, !tbaa !396
  %4269 = getelementptr inbounds i16, i16* %4265, i64 17
  %4270 = bitcast i16* %4269 to <16 x i16>*
  %4271 = load <16 x i16>, <16 x i16>* %4270, align 2, !tbaa !396
  %4272 = getelementptr inbounds i16, i16* %4265, i64 2
  %4273 = bitcast i16* %4272 to <16 x i16>*
  %4274 = load <16 x i16>, <16 x i16>* %4273, align 2, !tbaa !396
  %4275 = getelementptr inbounds i16, i16* %4265, i64 18
  %4276 = bitcast i16* %4275 to <16 x i16>*
  %4277 = load <16 x i16>, <16 x i16>* %4276, align 2, !tbaa !396
  %4278 = bitcast i16* %4265 to <16 x i16>*
  %4279 = load <16 x i16>, <16 x i16>* %4278, align 2, !tbaa !396
  %4280 = getelementptr inbounds i16, i16* %4265, i64 16
  %4281 = bitcast i16* %4280 to <16 x i16>*
  %4282 = load <16 x i16>, <16 x i16>* %4281, align 2, !tbaa !396
  %4283 = add <16 x i16> %4274, %4268
  %4284 = add <16 x i16> %4283, %4279
  %4285 = add <16 x i16> %4277, %4271
  %4286 = add <16 x i16> %4285, %4282
  %4287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4284, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4286, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4289 = shufflevector <16 x i16> %4287, <16 x i16> %4288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4290 = lshr <32 x i16> %4289, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4291 = shufflevector <32 x i16> %4290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4292 = shl nsw i64 %4244, 5
  %4293 = add nsw i64 %4292, %4145
  %4294 = getelementptr inbounds i16, i16* %blur_x, i64 %4293
  %4295 = bitcast i16* %4294 to <16 x i16>*
  store <16 x i16> %4291, <16 x i16>* %4295, align 2, !tbaa !399
  %4296 = shufflevector <32 x i16> %4290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4297 = getelementptr inbounds i16, i16* %4294, i64 16
  %4298 = bitcast i16* %4297 to <16 x i16>*
  store <16 x i16> %4296, <16 x i16>* %4298, align 2, !tbaa !399
  br label %"consume blur_x263"

"consume blur_x263":                              ; preds = %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge", %"produce blur_x262"
  %.pre-phi3374 = phi i64 [ %.pre3373, %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge" ], [ %4292, %"produce blur_x262" ]
  %4299 = add nsw i64 %4148, %.pre-phi3374
  %4300 = getelementptr inbounds i16, i16* %blur_x, i64 %4299
  %4301 = bitcast i16* %4300 to <16 x i16>*
  %4302 = load <16 x i16>, <16 x i16>* %4301, align 2, !tbaa !399
  %4303 = getelementptr inbounds i16, i16* %4300, i64 16
  %4304 = bitcast i16* %4303 to <16 x i16>*
  %4305 = load <16 x i16>, <16 x i16>* %4304, align 2, !tbaa !399
  %4306 = add nsw i64 %4151, %.pre-phi3374
  %4307 = getelementptr inbounds i16, i16* %blur_x, i64 %4306
  %4308 = bitcast i16* %4307 to <16 x i16>*
  %4309 = load <16 x i16>, <16 x i16>* %4308, align 2, !tbaa !399
  %4310 = getelementptr inbounds i16, i16* %4307, i64 16
  %4311 = bitcast i16* %4310 to <16 x i16>*
  %4312 = load <16 x i16>, <16 x i16>* %4311, align 2, !tbaa !399
  %4313 = add nsw i64 %4154, %.pre-phi3374
  %4314 = getelementptr inbounds i16, i16* %blur_x, i64 %4313
  %4315 = bitcast i16* %4314 to <16 x i16>*
  %4316 = load <16 x i16>, <16 x i16>* %4315, align 2, !tbaa !399
  %4317 = getelementptr inbounds i16, i16* %4314, i64 16
  %4318 = bitcast i16* %4317 to <16 x i16>*
  %4319 = load <16 x i16>, <16 x i16>* %4318, align 2, !tbaa !399
  %4320 = add <16 x i16> %4309, %4302
  %4321 = add <16 x i16> %4320, %4316
  %4322 = add <16 x i16> %4312, %4305
  %4323 = add <16 x i16> %4322, %4319
  %4324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4321, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4323, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4326 = shufflevector <16 x i16> %4324, <16 x i16> %4325, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4327 = lshr <32 x i16> %4326, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4328 = shufflevector <32 x i16> %4327, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4329 = add nsw i64 %4158, %.pre-phi3374
  %4330 = getelementptr inbounds i16, i16* %65, i64 %4329
  %4331 = bitcast i16* %4330 to <16 x i16>*
  store <16 x i16> %4328, <16 x i16>* %4331, align 2, !tbaa !401
  %4332 = shufflevector <32 x i16> %4327, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4333 = getelementptr inbounds i16, i16* %4330, i64 16
  %4334 = bitcast i16* %4333 to <16 x i16>*
  store <16 x i16> %4332, <16 x i16>* %4334, align 2, !tbaa !401
  %indvars.iv.next3159 = add nuw nsw i64 %indvars.iv3158, 1
  %.not2627 = icmp eq i64 %indvars.iv.next3159, %180
  br i1 %.not2627, label %"end for blur_y.s0.x.x.rebased257", label %"for blur_y.s0.x.x.rebased256"

"for blur_y.s0.x.x.rebased264":                   ; preds = %"for blur_y.s0.x.x.rebased264.preheader", %"consume blur_x272"
  %blur_y.s0.x.x.rebased266 = phi i32 [ %4413, %"consume blur_x272" ], [ 0, %"for blur_y.s0.x.x.rebased264.preheader" ]
  %4335 = add nsw i32 %blur_y.s0.x.x.rebased266, %t1582
  %a154 = shl nsw i32 %4335, 5
  %4336 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %4336, i32 %a154, i32 %a14
  %4337 = icmp slt i32 %4335, 1
  %4338 = icmp sgt i32 %4, %a154
  %4339 = or i1 %4337, %4338
  br i1 %4339, label %"produce blur_x270", label %"consume blur_x272"

"end for blur_y.s0.x.x.rebased265":               ; preds = %"consume blur_x272", %"end for blur_y.s0.x.x.rebased257"
  br i1 %34, label %"produce blur_x276", label %after_bb273

"produce blur_x270":                              ; preds = %"for blur_y.s0.x.x.rebased264"
  %4340 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s271 = select i1 %4340, i32 %b160, i32 %4
  %t821 = add nsw i32 %blur_x.s0.x.v1.base.s271, %t1793
  %4341 = sext i32 %t821 to i64
  %4342 = getelementptr inbounds i16, i16* %read_input, i64 %4341
  %4343 = getelementptr inbounds i16, i16* %4342, i64 1
  %4344 = bitcast i16* %4343 to <16 x i16>*
  %4345 = load <16 x i16>, <16 x i16>* %4344, align 2, !tbaa !396
  %4346 = getelementptr inbounds i16, i16* %4342, i64 17
  %4347 = bitcast i16* %4346 to <16 x i16>*
  %4348 = load <16 x i16>, <16 x i16>* %4347, align 2, !tbaa !396
  %4349 = getelementptr inbounds i16, i16* %4342, i64 2
  %4350 = bitcast i16* %4349 to <16 x i16>*
  %4351 = load <16 x i16>, <16 x i16>* %4350, align 2, !tbaa !396
  %4352 = getelementptr inbounds i16, i16* %4342, i64 18
  %4353 = bitcast i16* %4352 to <16 x i16>*
  %4354 = load <16 x i16>, <16 x i16>* %4353, align 2, !tbaa !396
  %4355 = bitcast i16* %4342 to <16 x i16>*
  %4356 = load <16 x i16>, <16 x i16>* %4355, align 2, !tbaa !396
  %4357 = getelementptr inbounds i16, i16* %4342, i64 16
  %4358 = bitcast i16* %4357 to <16 x i16>*
  %4359 = load <16 x i16>, <16 x i16>* %4358, align 2, !tbaa !396
  %4360 = add <16 x i16> %4351, %4345
  %4361 = add <16 x i16> %4360, %4356
  %4362 = add <16 x i16> %4354, %4348
  %4363 = add <16 x i16> %4362, %4359
  %4364 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4361, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4365 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4363, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4366 = shufflevector <16 x i16> %4364, <16 x i16> %4365, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4367 = lshr <32 x i16> %4366, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4368 = shufflevector <32 x i16> %4367, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4369 = sext i32 %blur_x.s0.x.v1.base.s271 to i64
  %4370 = add nsw i64 %4369, %4250
  %4371 = getelementptr inbounds i16, i16* %blur_x, i64 %4370
  %4372 = bitcast i16* %4371 to <16 x i16>*
  store <16 x i16> %4368, <16 x i16>* %4372, align 2, !tbaa !399
  %4373 = shufflevector <32 x i16> %4367, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4374 = getelementptr inbounds i16, i16* %4371, i64 16
  %4375 = bitcast i16* %4374 to <16 x i16>*
  store <16 x i16> %4373, <16 x i16>* %4375, align 2, !tbaa !399
  br label %"consume blur_x272"

"consume blur_x272":                              ; preds = %"for blur_y.s0.x.x.rebased264", %"produce blur_x270"
  %4376 = sext i32 %b160 to i64
  %4377 = add nsw i64 %4253, %4376
  %4378 = getelementptr inbounds i16, i16* %blur_x, i64 %4377
  %4379 = bitcast i16* %4378 to <16 x i16>*
  %4380 = load <16 x i16>, <16 x i16>* %4379, align 2, !tbaa !399
  %4381 = getelementptr inbounds i16, i16* %4378, i64 16
  %4382 = bitcast i16* %4381 to <16 x i16>*
  %4383 = load <16 x i16>, <16 x i16>* %4382, align 2, !tbaa !399
  %4384 = add nsw i64 %4256, %4376
  %4385 = getelementptr inbounds i16, i16* %blur_x, i64 %4384
  %4386 = bitcast i16* %4385 to <16 x i16>*
  %4387 = load <16 x i16>, <16 x i16>* %4386, align 2, !tbaa !399
  %4388 = getelementptr inbounds i16, i16* %4385, i64 16
  %4389 = bitcast i16* %4388 to <16 x i16>*
  %4390 = load <16 x i16>, <16 x i16>* %4389, align 2, !tbaa !399
  %4391 = add nsw i64 %4259, %4376
  %4392 = getelementptr inbounds i16, i16* %blur_x, i64 %4391
  %4393 = bitcast i16* %4392 to <16 x i16>*
  %4394 = load <16 x i16>, <16 x i16>* %4393, align 2, !tbaa !399
  %4395 = getelementptr inbounds i16, i16* %4392, i64 16
  %4396 = bitcast i16* %4395 to <16 x i16>*
  %4397 = load <16 x i16>, <16 x i16>* %4396, align 2, !tbaa !399
  %4398 = add <16 x i16> %4387, %4380
  %4399 = add <16 x i16> %4398, %4394
  %4400 = add <16 x i16> %4390, %4383
  %4401 = add <16 x i16> %4400, %4397
  %4402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4399, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4403 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4401, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4404 = shufflevector <16 x i16> %4402, <16 x i16> %4403, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4405 = lshr <32 x i16> %4404, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4406 = shufflevector <32 x i16> %4405, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4407 = add nsw i64 %4263, %4376
  %4408 = getelementptr inbounds i16, i16* %65, i64 %4407
  %4409 = bitcast i16* %4408 to <16 x i16>*
  store <16 x i16> %4406, <16 x i16>* %4409, align 2, !tbaa !401
  %4410 = shufflevector <32 x i16> %4405, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4411 = getelementptr inbounds i16, i16* %4408, i64 16
  %4412 = bitcast i16* %4411 to <16 x i16>*
  store <16 x i16> %4410, <16 x i16>* %4412, align 2, !tbaa !401
  %4413 = add nuw nsw i32 %blur_y.s0.x.x.rebased266, 1
  %.not2626 = icmp eq i32 %4413, %t1639
  br i1 %.not2626, label %"end for blur_y.s0.x.x.rebased265", label %"for blur_y.s0.x.x.rebased264"

after_bb273:                                      ; preds = %"end for blur_y.s0.x.x.rebased265", %"produce blur_x276"
  br i1 %99, label %"for blur_y.s0.x.x.rebased278.preheader", label %"end for blur_y.s0.x.x.rebased279", !prof !386

"for blur_y.s0.x.x.rebased278.preheader":         ; preds = %after_bb273
  %4414 = sext i32 %t1638 to i64
  %4415 = zext i32 %.pre-phi3356 to i64
  %4416 = mul nsw i64 %4415, %108
  %4417 = sub nsw i64 %4416, %95
  %4418 = zext i32 %.pre-phi to i64
  %4419 = mul nsw i64 %4418, %108
  %4420 = sub nsw i64 %4419, %95
  %4421 = zext i32 %.pre-phi3350 to i64
  %4422 = mul nsw i64 %4421, %108
  %4423 = sub nsw i64 %4422, %95
  %4424 = sext i32 %a26 to i64
  %4425 = add nsw i64 %4424, 10
  %4426 = mul nsw i64 %4425, %109
  %4427 = add nsw i64 %4426, %112
  br label %"for blur_y.s0.x.x.rebased278"

"produce blur_x276":                              ; preds = %"end for blur_y.s0.x.x.rebased265"
  %4428 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %4429 = getelementptr inbounds i16, i16* %4428, i64 -31
  %4430 = bitcast i16* %4429 to <16 x i16>*
  %4431 = load <16 x i16>, <16 x i16>* %4430, align 2, !tbaa !396
  %4432 = getelementptr inbounds i16, i16* %4428, i64 -15
  %4433 = bitcast i16* %4432 to <16 x i16>*
  %4434 = load <16 x i16>, <16 x i16>* %4433, align 2, !tbaa !396
  %4435 = getelementptr inbounds i16, i16* %4428, i64 -30
  %4436 = bitcast i16* %4435 to <16 x i16>*
  %4437 = load <16 x i16>, <16 x i16>* %4436, align 2, !tbaa !396
  %4438 = getelementptr inbounds i16, i16* %4428, i64 -14
  %4439 = bitcast i16* %4438 to <16 x i16>*
  %4440 = load <16 x i16>, <16 x i16>* %4439, align 2, !tbaa !396
  %4441 = getelementptr inbounds i16, i16* %4428, i64 -32
  %4442 = bitcast i16* %4441 to <16 x i16>*
  %4443 = load <16 x i16>, <16 x i16>* %4442, align 2, !tbaa !396
  %4444 = getelementptr inbounds i16, i16* %4428, i64 -16
  %4445 = bitcast i16* %4444 to <16 x i16>*
  %4446 = load <16 x i16>, <16 x i16>* %4445, align 2, !tbaa !396
  %4447 = add <16 x i16> %4437, %4431
  %4448 = add <16 x i16> %4447, %4443
  %4449 = add <16 x i16> %4440, %4434
  %4450 = add <16 x i16> %4449, %4446
  %4451 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4448, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4450, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4453 = shufflevector <16 x i16> %4451, <16 x i16> %4452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4454 = lshr <32 x i16> %4453, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4455 = shufflevector <32 x i16> %4454, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4456 = zext i32 %.pre-phi to i64
  %4457 = mul nsw i64 %96, %4456
  %4458 = add nsw i64 %98, %4457
  %4459 = getelementptr inbounds i16, i16* %blur_x, i64 %4458
  %4460 = getelementptr inbounds i16, i16* %4459, i64 -32
  %4461 = bitcast i16* %4460 to <16 x i16>*
  store <16 x i16> %4455, <16 x i16>* %4461, align 2, !tbaa !399
  %4462 = shufflevector <32 x i16> %4454, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4463 = getelementptr inbounds i16, i16* %4459, i64 -16
  %4464 = bitcast i16* %4463 to <16 x i16>*
  store <16 x i16> %4462, <16 x i16>* %4464, align 2, !tbaa !399
  %4465 = zext i32 %.pre-phi3356 to i64
  %4466 = mul nsw i64 %4465, %108
  %4467 = add nsw i64 %4466, %93
  %4468 = getelementptr inbounds i16, i16* %blur_x, i64 %4467
  %4469 = getelementptr inbounds i16, i16* %4468, i64 -32
  %4470 = bitcast i16* %4469 to <16 x i16>*
  %4471 = load <16 x i16>, <16 x i16>* %4470, align 2, !tbaa !399
  %4472 = getelementptr inbounds i16, i16* %4468, i64 -16
  %4473 = bitcast i16* %4472 to <16 x i16>*
  %4474 = load <16 x i16>, <16 x i16>* %4473, align 2, !tbaa !399
  %4475 = mul nsw i64 %4456, %108
  %4476 = add nsw i64 %4475, %93
  %4477 = getelementptr inbounds i16, i16* %blur_x, i64 %4476
  %4478 = getelementptr inbounds i16, i16* %4477, i64 -32
  %4479 = bitcast i16* %4478 to <16 x i16>*
  %4480 = load <16 x i16>, <16 x i16>* %4479, align 2, !tbaa !399
  %4481 = getelementptr inbounds i16, i16* %4477, i64 -16
  %4482 = bitcast i16* %4481 to <16 x i16>*
  %4483 = load <16 x i16>, <16 x i16>* %4482, align 2, !tbaa !399
  %4484 = zext i32 %.pre-phi3350 to i64
  %4485 = mul nsw i64 %4484, %108
  %4486 = add nsw i64 %4485, %93
  %4487 = getelementptr inbounds i16, i16* %blur_x, i64 %4486
  %4488 = getelementptr inbounds i16, i16* %4487, i64 -32
  %4489 = bitcast i16* %4488 to <16 x i16>*
  %4490 = load <16 x i16>, <16 x i16>* %4489, align 2, !tbaa !399
  %4491 = getelementptr inbounds i16, i16* %4487, i64 -16
  %4492 = bitcast i16* %4491 to <16 x i16>*
  %4493 = load <16 x i16>, <16 x i16>* %4492, align 2, !tbaa !399
  %4494 = add <16 x i16> %4480, %4471
  %4495 = add <16 x i16> %4494, %4490
  %4496 = add <16 x i16> %4483, %4474
  %4497 = add <16 x i16> %4496, %4493
  %4498 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4495, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4499 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4497, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4500 = shufflevector <16 x i16> %4498, <16 x i16> %4499, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4501 = lshr <32 x i16> %4500, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4502 = shufflevector <32 x i16> %4501, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4503 = sext i32 %a26 to i64
  %4504 = add nsw i64 %4503, 10
  %4505 = mul nsw i64 %4504, %109
  %4506 = add nsw i64 %111, %4505
  %4507 = getelementptr inbounds i16, i16* %65, i64 %4506
  %4508 = getelementptr inbounds i16, i16* %4507, i64 -32
  %4509 = bitcast i16* %4508 to <16 x i16>*
  store <16 x i16> %4502, <16 x i16>* %4509, align 2, !tbaa !401
  %4510 = shufflevector <32 x i16> %4501, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4511 = getelementptr inbounds i16, i16* %4507, i64 -16
  %4512 = bitcast i16* %4511 to <16 x i16>*
  store <16 x i16> %4510, <16 x i16>* %4512, align 2, !tbaa !401
  br label %after_bb273

"for blur_y.s0.x.x.rebased278":                   ; preds = %"for blur_y.s0.x.x.rebased278.preheader", %"consume blur_x285"
  %indvars.iv3161 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased278.preheader" ], [ %indvars.iv.next3162, %"consume blur_x285" ]
  %4513 = add nsw i64 %indvars.iv3161, %100
  %4514 = icmp slt i64 %4513, 1
  %4515 = trunc i64 %4513 to i32
  %4516 = shl nsw i32 %4515, 5
  %4517 = icmp sgt i32 %4, %4516
  %4518 = or i1 %4514, %4517
  br i1 %4518, label %"produce blur_x284", label %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge"

"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased278"
  %.pre3375 = shl nsw i64 %4513, 5
  br label %"consume blur_x285"

"end for blur_y.s0.x.x.rebased279":               ; preds = %"consume blur_x285", %after_bb273
  br i1 %101, label %"for blur_y.s0.x.x.rebased286.preheader", label %"end for blur_y.s0.x.x.rebased287", !prof !386

"for blur_y.s0.x.x.rebased286.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased279"
  %4519 = sext i32 %t1638 to i64
  %4520 = zext i32 %.pre-phi3356 to i64
  %4521 = mul nsw i64 %4520, %108
  %4522 = sub nsw i64 %4521, %95
  %4523 = zext i32 %.pre-phi to i64
  %4524 = mul nsw i64 %4523, %108
  %4525 = sub nsw i64 %4524, %95
  %4526 = zext i32 %.pre-phi3350 to i64
  %4527 = mul nsw i64 %4526, %108
  %4528 = sub nsw i64 %4527, %95
  %4529 = sext i32 %a26 to i64
  %4530 = add nsw i64 %4529, 10
  %4531 = mul nsw i64 %4530, %109
  %4532 = add nsw i64 %4531, %112
  br label %"for blur_y.s0.x.x.rebased286"

"produce blur_x284":                              ; preds = %"for blur_y.s0.x.x.rebased278"
  %t832 = add nsw i32 %4516, %t1809
  %4533 = sext i32 %t832 to i64
  %4534 = getelementptr inbounds i16, i16* %read_input, i64 %4533
  %4535 = getelementptr inbounds i16, i16* %4534, i64 1
  %4536 = bitcast i16* %4535 to <16 x i16>*
  %4537 = load <16 x i16>, <16 x i16>* %4536, align 2, !tbaa !396
  %4538 = getelementptr inbounds i16, i16* %4534, i64 17
  %4539 = bitcast i16* %4538 to <16 x i16>*
  %4540 = load <16 x i16>, <16 x i16>* %4539, align 2, !tbaa !396
  %4541 = getelementptr inbounds i16, i16* %4534, i64 2
  %4542 = bitcast i16* %4541 to <16 x i16>*
  %4543 = load <16 x i16>, <16 x i16>* %4542, align 2, !tbaa !396
  %4544 = getelementptr inbounds i16, i16* %4534, i64 18
  %4545 = bitcast i16* %4544 to <16 x i16>*
  %4546 = load <16 x i16>, <16 x i16>* %4545, align 2, !tbaa !396
  %4547 = bitcast i16* %4534 to <16 x i16>*
  %4548 = load <16 x i16>, <16 x i16>* %4547, align 2, !tbaa !396
  %4549 = getelementptr inbounds i16, i16* %4534, i64 16
  %4550 = bitcast i16* %4549 to <16 x i16>*
  %4551 = load <16 x i16>, <16 x i16>* %4550, align 2, !tbaa !396
  %4552 = add <16 x i16> %4543, %4537
  %4553 = add <16 x i16> %4552, %4548
  %4554 = add <16 x i16> %4546, %4540
  %4555 = add <16 x i16> %4554, %4551
  %4556 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4553, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4555, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4558 = shufflevector <16 x i16> %4556, <16 x i16> %4557, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4559 = lshr <32 x i16> %4558, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4560 = shufflevector <32 x i16> %4559, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4561 = shl nsw i64 %4513, 5
  %4562 = add nsw i64 %4561, %4414
  %4563 = getelementptr inbounds i16, i16* %blur_x, i64 %4562
  %4564 = bitcast i16* %4563 to <16 x i16>*
  store <16 x i16> %4560, <16 x i16>* %4564, align 2, !tbaa !399
  %4565 = shufflevector <32 x i16> %4559, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4566 = getelementptr inbounds i16, i16* %4563, i64 16
  %4567 = bitcast i16* %4566 to <16 x i16>*
  store <16 x i16> %4565, <16 x i16>* %4567, align 2, !tbaa !399
  br label %"consume blur_x285"

"consume blur_x285":                              ; preds = %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge", %"produce blur_x284"
  %.pre-phi3376 = phi i64 [ %.pre3375, %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge" ], [ %4561, %"produce blur_x284" ]
  %4568 = add nsw i64 %4417, %.pre-phi3376
  %4569 = getelementptr inbounds i16, i16* %blur_x, i64 %4568
  %4570 = bitcast i16* %4569 to <16 x i16>*
  %4571 = load <16 x i16>, <16 x i16>* %4570, align 2, !tbaa !399
  %4572 = getelementptr inbounds i16, i16* %4569, i64 16
  %4573 = bitcast i16* %4572 to <16 x i16>*
  %4574 = load <16 x i16>, <16 x i16>* %4573, align 2, !tbaa !399
  %4575 = add nsw i64 %4420, %.pre-phi3376
  %4576 = getelementptr inbounds i16, i16* %blur_x, i64 %4575
  %4577 = bitcast i16* %4576 to <16 x i16>*
  %4578 = load <16 x i16>, <16 x i16>* %4577, align 2, !tbaa !399
  %4579 = getelementptr inbounds i16, i16* %4576, i64 16
  %4580 = bitcast i16* %4579 to <16 x i16>*
  %4581 = load <16 x i16>, <16 x i16>* %4580, align 2, !tbaa !399
  %4582 = add nsw i64 %4423, %.pre-phi3376
  %4583 = getelementptr inbounds i16, i16* %blur_x, i64 %4582
  %4584 = bitcast i16* %4583 to <16 x i16>*
  %4585 = load <16 x i16>, <16 x i16>* %4584, align 2, !tbaa !399
  %4586 = getelementptr inbounds i16, i16* %4583, i64 16
  %4587 = bitcast i16* %4586 to <16 x i16>*
  %4588 = load <16 x i16>, <16 x i16>* %4587, align 2, !tbaa !399
  %4589 = add <16 x i16> %4578, %4571
  %4590 = add <16 x i16> %4589, %4585
  %4591 = add <16 x i16> %4581, %4574
  %4592 = add <16 x i16> %4591, %4588
  %4593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4590, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4594 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4592, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4595 = shufflevector <16 x i16> %4593, <16 x i16> %4594, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4596 = lshr <32 x i16> %4595, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4597 = shufflevector <32 x i16> %4596, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4598 = add nsw i64 %4427, %.pre-phi3376
  %4599 = getelementptr inbounds i16, i16* %65, i64 %4598
  %4600 = bitcast i16* %4599 to <16 x i16>*
  store <16 x i16> %4597, <16 x i16>* %4600, align 2, !tbaa !401
  %4601 = shufflevector <32 x i16> %4596, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4602 = getelementptr inbounds i16, i16* %4599, i64 16
  %4603 = bitcast i16* %4602 to <16 x i16>*
  store <16 x i16> %4601, <16 x i16>* %4603, align 2, !tbaa !401
  %indvars.iv.next3162 = add nuw nsw i64 %indvars.iv3161, 1
  %.not2625 = icmp eq i64 %indvars.iv.next3162, %180
  br i1 %.not2625, label %"end for blur_y.s0.x.x.rebased279", label %"for blur_y.s0.x.x.rebased278"

"for blur_y.s0.x.x.rebased286":                   ; preds = %"for blur_y.s0.x.x.rebased286.preheader", %"consume blur_x294"
  %blur_y.s0.x.x.rebased288 = phi i32 [ %4682, %"consume blur_x294" ], [ 0, %"for blur_y.s0.x.x.rebased286.preheader" ]
  %4604 = add nsw i32 %blur_y.s0.x.x.rebased288, %t1582
  %a161 = shl nsw i32 %4604, 5
  %4605 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %4605, i32 %a161, i32 %a14
  %4606 = icmp slt i32 %4604, 1
  %4607 = icmp sgt i32 %4, %a161
  %4608 = or i1 %4606, %4607
  br i1 %4608, label %"produce blur_x292", label %"consume blur_x294"

"end for blur_y.s0.x.x.rebased287":               ; preds = %"consume blur_x294", %"end for blur_y.s0.x.x.rebased279"
  br i1 %34, label %"produce blur_x298", label %after_bb295

"produce blur_x292":                              ; preds = %"for blur_y.s0.x.x.rebased286"
  %4609 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s293 = select i1 %4609, i32 %b167, i32 %4
  %t837 = add nsw i32 %blur_x.s0.x.v1.base.s293, %t1809
  %4610 = sext i32 %t837 to i64
  %4611 = getelementptr inbounds i16, i16* %read_input, i64 %4610
  %4612 = getelementptr inbounds i16, i16* %4611, i64 1
  %4613 = bitcast i16* %4612 to <16 x i16>*
  %4614 = load <16 x i16>, <16 x i16>* %4613, align 2, !tbaa !396
  %4615 = getelementptr inbounds i16, i16* %4611, i64 17
  %4616 = bitcast i16* %4615 to <16 x i16>*
  %4617 = load <16 x i16>, <16 x i16>* %4616, align 2, !tbaa !396
  %4618 = getelementptr inbounds i16, i16* %4611, i64 2
  %4619 = bitcast i16* %4618 to <16 x i16>*
  %4620 = load <16 x i16>, <16 x i16>* %4619, align 2, !tbaa !396
  %4621 = getelementptr inbounds i16, i16* %4611, i64 18
  %4622 = bitcast i16* %4621 to <16 x i16>*
  %4623 = load <16 x i16>, <16 x i16>* %4622, align 2, !tbaa !396
  %4624 = bitcast i16* %4611 to <16 x i16>*
  %4625 = load <16 x i16>, <16 x i16>* %4624, align 2, !tbaa !396
  %4626 = getelementptr inbounds i16, i16* %4611, i64 16
  %4627 = bitcast i16* %4626 to <16 x i16>*
  %4628 = load <16 x i16>, <16 x i16>* %4627, align 2, !tbaa !396
  %4629 = add <16 x i16> %4620, %4614
  %4630 = add <16 x i16> %4629, %4625
  %4631 = add <16 x i16> %4623, %4617
  %4632 = add <16 x i16> %4631, %4628
  %4633 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4630, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4634 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4632, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4635 = shufflevector <16 x i16> %4633, <16 x i16> %4634, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4636 = lshr <32 x i16> %4635, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4637 = shufflevector <32 x i16> %4636, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4638 = sext i32 %blur_x.s0.x.v1.base.s293 to i64
  %4639 = add nsw i64 %4638, %4519
  %4640 = getelementptr inbounds i16, i16* %blur_x, i64 %4639
  %4641 = bitcast i16* %4640 to <16 x i16>*
  store <16 x i16> %4637, <16 x i16>* %4641, align 2, !tbaa !399
  %4642 = shufflevector <32 x i16> %4636, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4643 = getelementptr inbounds i16, i16* %4640, i64 16
  %4644 = bitcast i16* %4643 to <16 x i16>*
  store <16 x i16> %4642, <16 x i16>* %4644, align 2, !tbaa !399
  br label %"consume blur_x294"

"consume blur_x294":                              ; preds = %"for blur_y.s0.x.x.rebased286", %"produce blur_x292"
  %4645 = sext i32 %b167 to i64
  %4646 = add nsw i64 %4522, %4645
  %4647 = getelementptr inbounds i16, i16* %blur_x, i64 %4646
  %4648 = bitcast i16* %4647 to <16 x i16>*
  %4649 = load <16 x i16>, <16 x i16>* %4648, align 2, !tbaa !399
  %4650 = getelementptr inbounds i16, i16* %4647, i64 16
  %4651 = bitcast i16* %4650 to <16 x i16>*
  %4652 = load <16 x i16>, <16 x i16>* %4651, align 2, !tbaa !399
  %4653 = add nsw i64 %4525, %4645
  %4654 = getelementptr inbounds i16, i16* %blur_x, i64 %4653
  %4655 = bitcast i16* %4654 to <16 x i16>*
  %4656 = load <16 x i16>, <16 x i16>* %4655, align 2, !tbaa !399
  %4657 = getelementptr inbounds i16, i16* %4654, i64 16
  %4658 = bitcast i16* %4657 to <16 x i16>*
  %4659 = load <16 x i16>, <16 x i16>* %4658, align 2, !tbaa !399
  %4660 = add nsw i64 %4528, %4645
  %4661 = getelementptr inbounds i16, i16* %blur_x, i64 %4660
  %4662 = bitcast i16* %4661 to <16 x i16>*
  %4663 = load <16 x i16>, <16 x i16>* %4662, align 2, !tbaa !399
  %4664 = getelementptr inbounds i16, i16* %4661, i64 16
  %4665 = bitcast i16* %4664 to <16 x i16>*
  %4666 = load <16 x i16>, <16 x i16>* %4665, align 2, !tbaa !399
  %4667 = add <16 x i16> %4656, %4649
  %4668 = add <16 x i16> %4667, %4663
  %4669 = add <16 x i16> %4659, %4652
  %4670 = add <16 x i16> %4669, %4666
  %4671 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4668, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4672 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4670, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4673 = shufflevector <16 x i16> %4671, <16 x i16> %4672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4674 = lshr <32 x i16> %4673, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4675 = shufflevector <32 x i16> %4674, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4676 = add nsw i64 %4532, %4645
  %4677 = getelementptr inbounds i16, i16* %65, i64 %4676
  %4678 = bitcast i16* %4677 to <16 x i16>*
  store <16 x i16> %4675, <16 x i16>* %4678, align 2, !tbaa !401
  %4679 = shufflevector <32 x i16> %4674, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4680 = getelementptr inbounds i16, i16* %4677, i64 16
  %4681 = bitcast i16* %4680 to <16 x i16>*
  store <16 x i16> %4679, <16 x i16>* %4681, align 2, !tbaa !401
  %4682 = add nuw nsw i32 %blur_y.s0.x.x.rebased288, 1
  %.not2624 = icmp eq i32 %4682, %t1639
  br i1 %.not2624, label %"end for blur_y.s0.x.x.rebased287", label %"for blur_y.s0.x.x.rebased286"

after_bb295:                                      ; preds = %"end for blur_y.s0.x.x.rebased287", %"produce blur_x298"
  br i1 %99, label %"for blur_y.s0.x.x.rebased300.preheader", label %"end for blur_y.s0.x.x.rebased301", !prof !386

"for blur_y.s0.x.x.rebased300.preheader":         ; preds = %after_bb295
  %4683 = sext i32 %t1644 to i64
  %4684 = zext i32 %.pre-phi to i64
  %4685 = mul nsw i64 %4684, %108
  %4686 = sub nsw i64 %4685, %95
  %4687 = zext i32 %.pre-phi3346 to i64
  %4688 = mul nsw i64 %4687, %108
  %4689 = sub nsw i64 %4688, %95
  %4690 = zext i32 %.pre-phi3356 to i64
  %4691 = mul nsw i64 %4690, %108
  %4692 = sub nsw i64 %4691, %95
  %4693 = sext i32 %a26 to i64
  %4694 = add nsw i64 %4693, 11
  %4695 = mul nsw i64 %4694, %109
  %4696 = add nsw i64 %4695, %112
  br label %"for blur_y.s0.x.x.rebased300"

"produce blur_x298":                              ; preds = %"end for blur_y.s0.x.x.rebased287"
  %4697 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %4698 = getelementptr inbounds i16, i16* %4697, i64 -31
  %4699 = bitcast i16* %4698 to <16 x i16>*
  %4700 = load <16 x i16>, <16 x i16>* %4699, align 2, !tbaa !396
  %4701 = getelementptr inbounds i16, i16* %4697, i64 -15
  %4702 = bitcast i16* %4701 to <16 x i16>*
  %4703 = load <16 x i16>, <16 x i16>* %4702, align 2, !tbaa !396
  %4704 = getelementptr inbounds i16, i16* %4697, i64 -30
  %4705 = bitcast i16* %4704 to <16 x i16>*
  %4706 = load <16 x i16>, <16 x i16>* %4705, align 2, !tbaa !396
  %4707 = getelementptr inbounds i16, i16* %4697, i64 -14
  %4708 = bitcast i16* %4707 to <16 x i16>*
  %4709 = load <16 x i16>, <16 x i16>* %4708, align 2, !tbaa !396
  %4710 = getelementptr inbounds i16, i16* %4697, i64 -32
  %4711 = bitcast i16* %4710 to <16 x i16>*
  %4712 = load <16 x i16>, <16 x i16>* %4711, align 2, !tbaa !396
  %4713 = getelementptr inbounds i16, i16* %4697, i64 -16
  %4714 = bitcast i16* %4713 to <16 x i16>*
  %4715 = load <16 x i16>, <16 x i16>* %4714, align 2, !tbaa !396
  %4716 = add <16 x i16> %4706, %4700
  %4717 = add <16 x i16> %4716, %4712
  %4718 = add <16 x i16> %4709, %4703
  %4719 = add <16 x i16> %4718, %4715
  %4720 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4717, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4721 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4719, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4722 = shufflevector <16 x i16> %4720, <16 x i16> %4721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4723 = lshr <32 x i16> %4722, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4724 = shufflevector <32 x i16> %4723, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4725 = zext i32 %.pre-phi3346 to i64
  %4726 = mul nsw i64 %96, %4725
  %4727 = add nsw i64 %98, %4726
  %4728 = getelementptr inbounds i16, i16* %blur_x, i64 %4727
  %4729 = getelementptr inbounds i16, i16* %4728, i64 -32
  %4730 = bitcast i16* %4729 to <16 x i16>*
  store <16 x i16> %4724, <16 x i16>* %4730, align 2, !tbaa !399
  %4731 = shufflevector <32 x i16> %4723, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4732 = getelementptr inbounds i16, i16* %4728, i64 -16
  %4733 = bitcast i16* %4732 to <16 x i16>*
  store <16 x i16> %4731, <16 x i16>* %4733, align 2, !tbaa !399
  %4734 = zext i32 %.pre-phi to i64
  %4735 = mul nsw i64 %4734, %108
  %4736 = add nsw i64 %4735, %93
  %4737 = getelementptr inbounds i16, i16* %blur_x, i64 %4736
  %4738 = getelementptr inbounds i16, i16* %4737, i64 -32
  %4739 = bitcast i16* %4738 to <16 x i16>*
  %4740 = load <16 x i16>, <16 x i16>* %4739, align 2, !tbaa !399
  %4741 = getelementptr inbounds i16, i16* %4737, i64 -16
  %4742 = bitcast i16* %4741 to <16 x i16>*
  %4743 = load <16 x i16>, <16 x i16>* %4742, align 2, !tbaa !399
  %4744 = mul nsw i64 %4725, %108
  %4745 = add nsw i64 %4744, %93
  %4746 = getelementptr inbounds i16, i16* %blur_x, i64 %4745
  %4747 = getelementptr inbounds i16, i16* %4746, i64 -32
  %4748 = bitcast i16* %4747 to <16 x i16>*
  %4749 = load <16 x i16>, <16 x i16>* %4748, align 2, !tbaa !399
  %4750 = getelementptr inbounds i16, i16* %4746, i64 -16
  %4751 = bitcast i16* %4750 to <16 x i16>*
  %4752 = load <16 x i16>, <16 x i16>* %4751, align 2, !tbaa !399
  %4753 = zext i32 %.pre-phi3356 to i64
  %4754 = mul nsw i64 %4753, %108
  %4755 = add nsw i64 %4754, %93
  %4756 = getelementptr inbounds i16, i16* %blur_x, i64 %4755
  %4757 = getelementptr inbounds i16, i16* %4756, i64 -32
  %4758 = bitcast i16* %4757 to <16 x i16>*
  %4759 = load <16 x i16>, <16 x i16>* %4758, align 2, !tbaa !399
  %4760 = getelementptr inbounds i16, i16* %4756, i64 -16
  %4761 = bitcast i16* %4760 to <16 x i16>*
  %4762 = load <16 x i16>, <16 x i16>* %4761, align 2, !tbaa !399
  %4763 = add <16 x i16> %4749, %4740
  %4764 = add <16 x i16> %4763, %4759
  %4765 = add <16 x i16> %4752, %4743
  %4766 = add <16 x i16> %4765, %4762
  %4767 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4764, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4768 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4766, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4769 = shufflevector <16 x i16> %4767, <16 x i16> %4768, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4770 = lshr <32 x i16> %4769, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4771 = shufflevector <32 x i16> %4770, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4772 = sext i32 %a26 to i64
  %4773 = add nsw i64 %4772, 11
  %4774 = mul nsw i64 %4773, %109
  %4775 = add nsw i64 %111, %4774
  %4776 = getelementptr inbounds i16, i16* %65, i64 %4775
  %4777 = getelementptr inbounds i16, i16* %4776, i64 -32
  %4778 = bitcast i16* %4777 to <16 x i16>*
  store <16 x i16> %4771, <16 x i16>* %4778, align 2, !tbaa !401
  %4779 = shufflevector <32 x i16> %4770, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4780 = getelementptr inbounds i16, i16* %4776, i64 -16
  %4781 = bitcast i16* %4780 to <16 x i16>*
  store <16 x i16> %4779, <16 x i16>* %4781, align 2, !tbaa !401
  br label %after_bb295

"for blur_y.s0.x.x.rebased300":                   ; preds = %"for blur_y.s0.x.x.rebased300.preheader", %"consume blur_x307"
  %indvars.iv3164 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased300.preheader" ], [ %indvars.iv.next3165, %"consume blur_x307" ]
  %4782 = add nsw i64 %indvars.iv3164, %100
  %4783 = icmp slt i64 %4782, 1
  %4784 = trunc i64 %4782 to i32
  %4785 = shl nsw i32 %4784, 5
  %4786 = icmp sgt i32 %4, %4785
  %4787 = or i1 %4783, %4786
  br i1 %4787, label %"produce blur_x306", label %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge"

"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased300"
  %.pre3377 = shl nsw i64 %4782, 5
  br label %"consume blur_x307"

"end for blur_y.s0.x.x.rebased301":               ; preds = %"consume blur_x307", %after_bb295
  br i1 %101, label %"for blur_y.s0.x.x.rebased308.preheader", label %"end for blur_y.s0.x.x.rebased309", !prof !386

"for blur_y.s0.x.x.rebased308.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased301"
  %4788 = sext i32 %t1644 to i64
  %4789 = zext i32 %.pre-phi to i64
  %4790 = mul nsw i64 %4789, %108
  %4791 = sub nsw i64 %4790, %95
  %4792 = zext i32 %.pre-phi3346 to i64
  %4793 = mul nsw i64 %4792, %108
  %4794 = sub nsw i64 %4793, %95
  %4795 = zext i32 %.pre-phi3356 to i64
  %4796 = mul nsw i64 %4795, %108
  %4797 = sub nsw i64 %4796, %95
  %4798 = sext i32 %a26 to i64
  %4799 = add nsw i64 %4798, 11
  %4800 = mul nsw i64 %4799, %109
  %4801 = add nsw i64 %4800, %112
  br label %"for blur_y.s0.x.x.rebased308"

"produce blur_x306":                              ; preds = %"for blur_y.s0.x.x.rebased300"
  %t848 = add nsw i32 %4785, %t1825
  %4802 = sext i32 %t848 to i64
  %4803 = getelementptr inbounds i16, i16* %read_input, i64 %4802
  %4804 = getelementptr inbounds i16, i16* %4803, i64 1
  %4805 = bitcast i16* %4804 to <16 x i16>*
  %4806 = load <16 x i16>, <16 x i16>* %4805, align 2, !tbaa !396
  %4807 = getelementptr inbounds i16, i16* %4803, i64 17
  %4808 = bitcast i16* %4807 to <16 x i16>*
  %4809 = load <16 x i16>, <16 x i16>* %4808, align 2, !tbaa !396
  %4810 = getelementptr inbounds i16, i16* %4803, i64 2
  %4811 = bitcast i16* %4810 to <16 x i16>*
  %4812 = load <16 x i16>, <16 x i16>* %4811, align 2, !tbaa !396
  %4813 = getelementptr inbounds i16, i16* %4803, i64 18
  %4814 = bitcast i16* %4813 to <16 x i16>*
  %4815 = load <16 x i16>, <16 x i16>* %4814, align 2, !tbaa !396
  %4816 = bitcast i16* %4803 to <16 x i16>*
  %4817 = load <16 x i16>, <16 x i16>* %4816, align 2, !tbaa !396
  %4818 = getelementptr inbounds i16, i16* %4803, i64 16
  %4819 = bitcast i16* %4818 to <16 x i16>*
  %4820 = load <16 x i16>, <16 x i16>* %4819, align 2, !tbaa !396
  %4821 = add <16 x i16> %4812, %4806
  %4822 = add <16 x i16> %4821, %4817
  %4823 = add <16 x i16> %4815, %4809
  %4824 = add <16 x i16> %4823, %4820
  %4825 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4822, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4826 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4824, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4827 = shufflevector <16 x i16> %4825, <16 x i16> %4826, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4828 = lshr <32 x i16> %4827, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4829 = shufflevector <32 x i16> %4828, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4830 = shl nsw i64 %4782, 5
  %4831 = add nsw i64 %4830, %4683
  %4832 = getelementptr inbounds i16, i16* %blur_x, i64 %4831
  %4833 = bitcast i16* %4832 to <16 x i16>*
  store <16 x i16> %4829, <16 x i16>* %4833, align 2, !tbaa !399
  %4834 = shufflevector <32 x i16> %4828, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4835 = getelementptr inbounds i16, i16* %4832, i64 16
  %4836 = bitcast i16* %4835 to <16 x i16>*
  store <16 x i16> %4834, <16 x i16>* %4836, align 2, !tbaa !399
  br label %"consume blur_x307"

"consume blur_x307":                              ; preds = %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge", %"produce blur_x306"
  %.pre-phi3378 = phi i64 [ %.pre3377, %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge" ], [ %4830, %"produce blur_x306" ]
  %4837 = add nsw i64 %4686, %.pre-phi3378
  %4838 = getelementptr inbounds i16, i16* %blur_x, i64 %4837
  %4839 = bitcast i16* %4838 to <16 x i16>*
  %4840 = load <16 x i16>, <16 x i16>* %4839, align 2, !tbaa !399
  %4841 = getelementptr inbounds i16, i16* %4838, i64 16
  %4842 = bitcast i16* %4841 to <16 x i16>*
  %4843 = load <16 x i16>, <16 x i16>* %4842, align 2, !tbaa !399
  %4844 = add nsw i64 %4689, %.pre-phi3378
  %4845 = getelementptr inbounds i16, i16* %blur_x, i64 %4844
  %4846 = bitcast i16* %4845 to <16 x i16>*
  %4847 = load <16 x i16>, <16 x i16>* %4846, align 2, !tbaa !399
  %4848 = getelementptr inbounds i16, i16* %4845, i64 16
  %4849 = bitcast i16* %4848 to <16 x i16>*
  %4850 = load <16 x i16>, <16 x i16>* %4849, align 2, !tbaa !399
  %4851 = add nsw i64 %4692, %.pre-phi3378
  %4852 = getelementptr inbounds i16, i16* %blur_x, i64 %4851
  %4853 = bitcast i16* %4852 to <16 x i16>*
  %4854 = load <16 x i16>, <16 x i16>* %4853, align 2, !tbaa !399
  %4855 = getelementptr inbounds i16, i16* %4852, i64 16
  %4856 = bitcast i16* %4855 to <16 x i16>*
  %4857 = load <16 x i16>, <16 x i16>* %4856, align 2, !tbaa !399
  %4858 = add <16 x i16> %4847, %4840
  %4859 = add <16 x i16> %4858, %4854
  %4860 = add <16 x i16> %4850, %4843
  %4861 = add <16 x i16> %4860, %4857
  %4862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4859, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4861, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4864 = shufflevector <16 x i16> %4862, <16 x i16> %4863, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4865 = lshr <32 x i16> %4864, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4866 = shufflevector <32 x i16> %4865, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4867 = add nsw i64 %4696, %.pre-phi3378
  %4868 = getelementptr inbounds i16, i16* %65, i64 %4867
  %4869 = bitcast i16* %4868 to <16 x i16>*
  store <16 x i16> %4866, <16 x i16>* %4869, align 2, !tbaa !401
  %4870 = shufflevector <32 x i16> %4865, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4871 = getelementptr inbounds i16, i16* %4868, i64 16
  %4872 = bitcast i16* %4871 to <16 x i16>*
  store <16 x i16> %4870, <16 x i16>* %4872, align 2, !tbaa !401
  %indvars.iv.next3165 = add nuw nsw i64 %indvars.iv3164, 1
  %.not2623 = icmp eq i64 %indvars.iv.next3165, %180
  br i1 %.not2623, label %"end for blur_y.s0.x.x.rebased301", label %"for blur_y.s0.x.x.rebased300"

"for blur_y.s0.x.x.rebased308":                   ; preds = %"for blur_y.s0.x.x.rebased308.preheader", %"consume blur_x316"
  %blur_y.s0.x.x.rebased310 = phi i32 [ %4951, %"consume blur_x316" ], [ 0, %"for blur_y.s0.x.x.rebased308.preheader" ]
  %4873 = add nsw i32 %blur_y.s0.x.x.rebased310, %t1582
  %a168 = shl nsw i32 %4873, 5
  %4874 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %4874, i32 %a168, i32 %a14
  %4875 = icmp slt i32 %4873, 1
  %4876 = icmp sgt i32 %4, %a168
  %4877 = or i1 %4875, %4876
  br i1 %4877, label %"produce blur_x314", label %"consume blur_x316"

"end for blur_y.s0.x.x.rebased309":               ; preds = %"consume blur_x316", %"end for blur_y.s0.x.x.rebased301"
  br i1 %34, label %"produce blur_x320", label %after_bb317

"produce blur_x314":                              ; preds = %"for blur_y.s0.x.x.rebased308"
  %4878 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s315 = select i1 %4878, i32 %b174, i32 %4
  %t853 = add nsw i32 %blur_x.s0.x.v1.base.s315, %t1825
  %4879 = sext i32 %t853 to i64
  %4880 = getelementptr inbounds i16, i16* %read_input, i64 %4879
  %4881 = getelementptr inbounds i16, i16* %4880, i64 1
  %4882 = bitcast i16* %4881 to <16 x i16>*
  %4883 = load <16 x i16>, <16 x i16>* %4882, align 2, !tbaa !396
  %4884 = getelementptr inbounds i16, i16* %4880, i64 17
  %4885 = bitcast i16* %4884 to <16 x i16>*
  %4886 = load <16 x i16>, <16 x i16>* %4885, align 2, !tbaa !396
  %4887 = getelementptr inbounds i16, i16* %4880, i64 2
  %4888 = bitcast i16* %4887 to <16 x i16>*
  %4889 = load <16 x i16>, <16 x i16>* %4888, align 2, !tbaa !396
  %4890 = getelementptr inbounds i16, i16* %4880, i64 18
  %4891 = bitcast i16* %4890 to <16 x i16>*
  %4892 = load <16 x i16>, <16 x i16>* %4891, align 2, !tbaa !396
  %4893 = bitcast i16* %4880 to <16 x i16>*
  %4894 = load <16 x i16>, <16 x i16>* %4893, align 2, !tbaa !396
  %4895 = getelementptr inbounds i16, i16* %4880, i64 16
  %4896 = bitcast i16* %4895 to <16 x i16>*
  %4897 = load <16 x i16>, <16 x i16>* %4896, align 2, !tbaa !396
  %4898 = add <16 x i16> %4889, %4883
  %4899 = add <16 x i16> %4898, %4894
  %4900 = add <16 x i16> %4892, %4886
  %4901 = add <16 x i16> %4900, %4897
  %4902 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4899, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4903 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4901, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4904 = shufflevector <16 x i16> %4902, <16 x i16> %4903, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4905 = lshr <32 x i16> %4904, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4906 = shufflevector <32 x i16> %4905, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4907 = sext i32 %blur_x.s0.x.v1.base.s315 to i64
  %4908 = add nsw i64 %4907, %4788
  %4909 = getelementptr inbounds i16, i16* %blur_x, i64 %4908
  %4910 = bitcast i16* %4909 to <16 x i16>*
  store <16 x i16> %4906, <16 x i16>* %4910, align 2, !tbaa !399
  %4911 = shufflevector <32 x i16> %4905, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4912 = getelementptr inbounds i16, i16* %4909, i64 16
  %4913 = bitcast i16* %4912 to <16 x i16>*
  store <16 x i16> %4911, <16 x i16>* %4913, align 2, !tbaa !399
  br label %"consume blur_x316"

"consume blur_x316":                              ; preds = %"for blur_y.s0.x.x.rebased308", %"produce blur_x314"
  %4914 = sext i32 %b174 to i64
  %4915 = add nsw i64 %4791, %4914
  %4916 = getelementptr inbounds i16, i16* %blur_x, i64 %4915
  %4917 = bitcast i16* %4916 to <16 x i16>*
  %4918 = load <16 x i16>, <16 x i16>* %4917, align 2, !tbaa !399
  %4919 = getelementptr inbounds i16, i16* %4916, i64 16
  %4920 = bitcast i16* %4919 to <16 x i16>*
  %4921 = load <16 x i16>, <16 x i16>* %4920, align 2, !tbaa !399
  %4922 = add nsw i64 %4794, %4914
  %4923 = getelementptr inbounds i16, i16* %blur_x, i64 %4922
  %4924 = bitcast i16* %4923 to <16 x i16>*
  %4925 = load <16 x i16>, <16 x i16>* %4924, align 2, !tbaa !399
  %4926 = getelementptr inbounds i16, i16* %4923, i64 16
  %4927 = bitcast i16* %4926 to <16 x i16>*
  %4928 = load <16 x i16>, <16 x i16>* %4927, align 2, !tbaa !399
  %4929 = add nsw i64 %4797, %4914
  %4930 = getelementptr inbounds i16, i16* %blur_x, i64 %4929
  %4931 = bitcast i16* %4930 to <16 x i16>*
  %4932 = load <16 x i16>, <16 x i16>* %4931, align 2, !tbaa !399
  %4933 = getelementptr inbounds i16, i16* %4930, i64 16
  %4934 = bitcast i16* %4933 to <16 x i16>*
  %4935 = load <16 x i16>, <16 x i16>* %4934, align 2, !tbaa !399
  %4936 = add <16 x i16> %4925, %4918
  %4937 = add <16 x i16> %4936, %4932
  %4938 = add <16 x i16> %4928, %4921
  %4939 = add <16 x i16> %4938, %4935
  %4940 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4937, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4939, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4942 = shufflevector <16 x i16> %4940, <16 x i16> %4941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4943 = lshr <32 x i16> %4942, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4944 = shufflevector <32 x i16> %4943, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4945 = add nsw i64 %4801, %4914
  %4946 = getelementptr inbounds i16, i16* %65, i64 %4945
  %4947 = bitcast i16* %4946 to <16 x i16>*
  store <16 x i16> %4944, <16 x i16>* %4947, align 2, !tbaa !401
  %4948 = shufflevector <32 x i16> %4943, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4949 = getelementptr inbounds i16, i16* %4946, i64 16
  %4950 = bitcast i16* %4949 to <16 x i16>*
  store <16 x i16> %4948, <16 x i16>* %4950, align 2, !tbaa !401
  %4951 = add nuw nsw i32 %blur_y.s0.x.x.rebased310, 1
  %.not2622 = icmp eq i32 %4951, %t1639
  br i1 %.not2622, label %"end for blur_y.s0.x.x.rebased309", label %"for blur_y.s0.x.x.rebased308"

after_bb317:                                      ; preds = %"end for blur_y.s0.x.x.rebased309", %"produce blur_x320"
  br i1 %99, label %"for blur_y.s0.x.x.rebased322.preheader", label %"end for blur_y.s0.x.x.rebased323", !prof !386

"for blur_y.s0.x.x.rebased322.preheader":         ; preds = %after_bb317
  %4952 = sext i32 %t1650 to i64
  %4953 = zext i32 %.pre-phi3346 to i64
  %4954 = mul nsw i64 %4953, %108
  %4955 = sub nsw i64 %4954, %95
  %4956 = zext i32 %.pre-phi3350 to i64
  %4957 = mul nsw i64 %4956, %108
  %4958 = sub nsw i64 %4957, %95
  %4959 = zext i32 %.pre-phi to i64
  %4960 = mul nsw i64 %4959, %108
  %4961 = sub nsw i64 %4960, %95
  %4962 = sext i32 %a26 to i64
  %4963 = add nsw i64 %4962, 12
  %4964 = mul nsw i64 %4963, %109
  %4965 = add nsw i64 %4964, %112
  br label %"for blur_y.s0.x.x.rebased322"

"produce blur_x320":                              ; preds = %"end for blur_y.s0.x.x.rebased309"
  %4966 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %4967 = getelementptr inbounds i16, i16* %4966, i64 -31
  %4968 = bitcast i16* %4967 to <16 x i16>*
  %4969 = load <16 x i16>, <16 x i16>* %4968, align 2, !tbaa !396
  %4970 = getelementptr inbounds i16, i16* %4966, i64 -15
  %4971 = bitcast i16* %4970 to <16 x i16>*
  %4972 = load <16 x i16>, <16 x i16>* %4971, align 2, !tbaa !396
  %4973 = getelementptr inbounds i16, i16* %4966, i64 -30
  %4974 = bitcast i16* %4973 to <16 x i16>*
  %4975 = load <16 x i16>, <16 x i16>* %4974, align 2, !tbaa !396
  %4976 = getelementptr inbounds i16, i16* %4966, i64 -14
  %4977 = bitcast i16* %4976 to <16 x i16>*
  %4978 = load <16 x i16>, <16 x i16>* %4977, align 2, !tbaa !396
  %4979 = getelementptr inbounds i16, i16* %4966, i64 -32
  %4980 = bitcast i16* %4979 to <16 x i16>*
  %4981 = load <16 x i16>, <16 x i16>* %4980, align 2, !tbaa !396
  %4982 = getelementptr inbounds i16, i16* %4966, i64 -16
  %4983 = bitcast i16* %4982 to <16 x i16>*
  %4984 = load <16 x i16>, <16 x i16>* %4983, align 2, !tbaa !396
  %4985 = add <16 x i16> %4975, %4969
  %4986 = add <16 x i16> %4985, %4981
  %4987 = add <16 x i16> %4978, %4972
  %4988 = add <16 x i16> %4987, %4984
  %4989 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4986, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4990 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4988, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4991 = shufflevector <16 x i16> %4989, <16 x i16> %4990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4992 = lshr <32 x i16> %4991, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4993 = shufflevector <32 x i16> %4992, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4994 = zext i32 %.pre-phi3350 to i64
  %4995 = mul nsw i64 %96, %4994
  %4996 = add nsw i64 %98, %4995
  %4997 = getelementptr inbounds i16, i16* %blur_x, i64 %4996
  %4998 = getelementptr inbounds i16, i16* %4997, i64 -32
  %4999 = bitcast i16* %4998 to <16 x i16>*
  store <16 x i16> %4993, <16 x i16>* %4999, align 2, !tbaa !399
  %5000 = shufflevector <32 x i16> %4992, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5001 = getelementptr inbounds i16, i16* %4997, i64 -16
  %5002 = bitcast i16* %5001 to <16 x i16>*
  store <16 x i16> %5000, <16 x i16>* %5002, align 2, !tbaa !399
  %5003 = zext i32 %.pre-phi3346 to i64
  %5004 = mul nsw i64 %5003, %108
  %5005 = add nsw i64 %5004, %93
  %5006 = getelementptr inbounds i16, i16* %blur_x, i64 %5005
  %5007 = getelementptr inbounds i16, i16* %5006, i64 -32
  %5008 = bitcast i16* %5007 to <16 x i16>*
  %5009 = load <16 x i16>, <16 x i16>* %5008, align 2, !tbaa !399
  %5010 = getelementptr inbounds i16, i16* %5006, i64 -16
  %5011 = bitcast i16* %5010 to <16 x i16>*
  %5012 = load <16 x i16>, <16 x i16>* %5011, align 2, !tbaa !399
  %5013 = mul nsw i64 %4994, %108
  %5014 = add nsw i64 %5013, %93
  %5015 = getelementptr inbounds i16, i16* %blur_x, i64 %5014
  %5016 = getelementptr inbounds i16, i16* %5015, i64 -32
  %5017 = bitcast i16* %5016 to <16 x i16>*
  %5018 = load <16 x i16>, <16 x i16>* %5017, align 2, !tbaa !399
  %5019 = getelementptr inbounds i16, i16* %5015, i64 -16
  %5020 = bitcast i16* %5019 to <16 x i16>*
  %5021 = load <16 x i16>, <16 x i16>* %5020, align 2, !tbaa !399
  %5022 = zext i32 %.pre-phi to i64
  %5023 = mul nsw i64 %5022, %108
  %5024 = add nsw i64 %5023, %93
  %5025 = getelementptr inbounds i16, i16* %blur_x, i64 %5024
  %5026 = getelementptr inbounds i16, i16* %5025, i64 -32
  %5027 = bitcast i16* %5026 to <16 x i16>*
  %5028 = load <16 x i16>, <16 x i16>* %5027, align 2, !tbaa !399
  %5029 = getelementptr inbounds i16, i16* %5025, i64 -16
  %5030 = bitcast i16* %5029 to <16 x i16>*
  %5031 = load <16 x i16>, <16 x i16>* %5030, align 2, !tbaa !399
  %5032 = add <16 x i16> %5018, %5009
  %5033 = add <16 x i16> %5032, %5028
  %5034 = add <16 x i16> %5021, %5012
  %5035 = add <16 x i16> %5034, %5031
  %5036 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5033, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5037 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5035, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5038 = shufflevector <16 x i16> %5036, <16 x i16> %5037, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5039 = lshr <32 x i16> %5038, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5040 = shufflevector <32 x i16> %5039, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5041 = sext i32 %a26 to i64
  %5042 = add nsw i64 %5041, 12
  %5043 = mul nsw i64 %5042, %109
  %5044 = add nsw i64 %111, %5043
  %5045 = getelementptr inbounds i16, i16* %65, i64 %5044
  %5046 = getelementptr inbounds i16, i16* %5045, i64 -32
  %5047 = bitcast i16* %5046 to <16 x i16>*
  store <16 x i16> %5040, <16 x i16>* %5047, align 2, !tbaa !401
  %5048 = shufflevector <32 x i16> %5039, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5049 = getelementptr inbounds i16, i16* %5045, i64 -16
  %5050 = bitcast i16* %5049 to <16 x i16>*
  store <16 x i16> %5048, <16 x i16>* %5050, align 2, !tbaa !401
  br label %after_bb317

"for blur_y.s0.x.x.rebased322":                   ; preds = %"for blur_y.s0.x.x.rebased322.preheader", %"consume blur_x329"
  %indvars.iv3167 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased322.preheader" ], [ %indvars.iv.next3168, %"consume blur_x329" ]
  %5051 = add nsw i64 %indvars.iv3167, %100
  %5052 = icmp slt i64 %5051, 1
  %5053 = trunc i64 %5051 to i32
  %5054 = shl nsw i32 %5053, 5
  %5055 = icmp sgt i32 %4, %5054
  %5056 = or i1 %5052, %5055
  br i1 %5056, label %"produce blur_x328", label %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge"

"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased322"
  %.pre3379 = shl nsw i64 %5051, 5
  br label %"consume blur_x329"

"end for blur_y.s0.x.x.rebased323":               ; preds = %"consume blur_x329", %after_bb317
  br i1 %101, label %"for blur_y.s0.x.x.rebased330.preheader", label %"end for blur_y.s0.x.x.rebased331", !prof !386

"for blur_y.s0.x.x.rebased330.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased323"
  %5057 = sext i32 %t1650 to i64
  %5058 = zext i32 %.pre-phi3346 to i64
  %5059 = mul nsw i64 %5058, %108
  %5060 = sub nsw i64 %5059, %95
  %5061 = zext i32 %.pre-phi3350 to i64
  %5062 = mul nsw i64 %5061, %108
  %5063 = sub nsw i64 %5062, %95
  %5064 = zext i32 %.pre-phi to i64
  %5065 = mul nsw i64 %5064, %108
  %5066 = sub nsw i64 %5065, %95
  %5067 = sext i32 %a26 to i64
  %5068 = add nsw i64 %5067, 12
  %5069 = mul nsw i64 %5068, %109
  %5070 = add nsw i64 %5069, %112
  br label %"for blur_y.s0.x.x.rebased330"

"produce blur_x328":                              ; preds = %"for blur_y.s0.x.x.rebased322"
  %t864 = add nsw i32 %5054, %t1841
  %5071 = sext i32 %t864 to i64
  %5072 = getelementptr inbounds i16, i16* %read_input, i64 %5071
  %5073 = getelementptr inbounds i16, i16* %5072, i64 1
  %5074 = bitcast i16* %5073 to <16 x i16>*
  %5075 = load <16 x i16>, <16 x i16>* %5074, align 2, !tbaa !396
  %5076 = getelementptr inbounds i16, i16* %5072, i64 17
  %5077 = bitcast i16* %5076 to <16 x i16>*
  %5078 = load <16 x i16>, <16 x i16>* %5077, align 2, !tbaa !396
  %5079 = getelementptr inbounds i16, i16* %5072, i64 2
  %5080 = bitcast i16* %5079 to <16 x i16>*
  %5081 = load <16 x i16>, <16 x i16>* %5080, align 2, !tbaa !396
  %5082 = getelementptr inbounds i16, i16* %5072, i64 18
  %5083 = bitcast i16* %5082 to <16 x i16>*
  %5084 = load <16 x i16>, <16 x i16>* %5083, align 2, !tbaa !396
  %5085 = bitcast i16* %5072 to <16 x i16>*
  %5086 = load <16 x i16>, <16 x i16>* %5085, align 2, !tbaa !396
  %5087 = getelementptr inbounds i16, i16* %5072, i64 16
  %5088 = bitcast i16* %5087 to <16 x i16>*
  %5089 = load <16 x i16>, <16 x i16>* %5088, align 2, !tbaa !396
  %5090 = add <16 x i16> %5081, %5075
  %5091 = add <16 x i16> %5090, %5086
  %5092 = add <16 x i16> %5084, %5078
  %5093 = add <16 x i16> %5092, %5089
  %5094 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5091, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5095 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5093, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5096 = shufflevector <16 x i16> %5094, <16 x i16> %5095, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5097 = lshr <32 x i16> %5096, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5098 = shufflevector <32 x i16> %5097, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5099 = shl nsw i64 %5051, 5
  %5100 = add nsw i64 %5099, %4952
  %5101 = getelementptr inbounds i16, i16* %blur_x, i64 %5100
  %5102 = bitcast i16* %5101 to <16 x i16>*
  store <16 x i16> %5098, <16 x i16>* %5102, align 2, !tbaa !399
  %5103 = shufflevector <32 x i16> %5097, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5104 = getelementptr inbounds i16, i16* %5101, i64 16
  %5105 = bitcast i16* %5104 to <16 x i16>*
  store <16 x i16> %5103, <16 x i16>* %5105, align 2, !tbaa !399
  br label %"consume blur_x329"

"consume blur_x329":                              ; preds = %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge", %"produce blur_x328"
  %.pre-phi3380 = phi i64 [ %.pre3379, %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge" ], [ %5099, %"produce blur_x328" ]
  %5106 = add nsw i64 %4955, %.pre-phi3380
  %5107 = getelementptr inbounds i16, i16* %blur_x, i64 %5106
  %5108 = bitcast i16* %5107 to <16 x i16>*
  %5109 = load <16 x i16>, <16 x i16>* %5108, align 2, !tbaa !399
  %5110 = getelementptr inbounds i16, i16* %5107, i64 16
  %5111 = bitcast i16* %5110 to <16 x i16>*
  %5112 = load <16 x i16>, <16 x i16>* %5111, align 2, !tbaa !399
  %5113 = add nsw i64 %4958, %.pre-phi3380
  %5114 = getelementptr inbounds i16, i16* %blur_x, i64 %5113
  %5115 = bitcast i16* %5114 to <16 x i16>*
  %5116 = load <16 x i16>, <16 x i16>* %5115, align 2, !tbaa !399
  %5117 = getelementptr inbounds i16, i16* %5114, i64 16
  %5118 = bitcast i16* %5117 to <16 x i16>*
  %5119 = load <16 x i16>, <16 x i16>* %5118, align 2, !tbaa !399
  %5120 = add nsw i64 %4961, %.pre-phi3380
  %5121 = getelementptr inbounds i16, i16* %blur_x, i64 %5120
  %5122 = bitcast i16* %5121 to <16 x i16>*
  %5123 = load <16 x i16>, <16 x i16>* %5122, align 2, !tbaa !399
  %5124 = getelementptr inbounds i16, i16* %5121, i64 16
  %5125 = bitcast i16* %5124 to <16 x i16>*
  %5126 = load <16 x i16>, <16 x i16>* %5125, align 2, !tbaa !399
  %5127 = add <16 x i16> %5116, %5109
  %5128 = add <16 x i16> %5127, %5123
  %5129 = add <16 x i16> %5119, %5112
  %5130 = add <16 x i16> %5129, %5126
  %5131 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5128, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5130, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5133 = shufflevector <16 x i16> %5131, <16 x i16> %5132, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5134 = lshr <32 x i16> %5133, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5135 = shufflevector <32 x i16> %5134, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5136 = add nsw i64 %4965, %.pre-phi3380
  %5137 = getelementptr inbounds i16, i16* %65, i64 %5136
  %5138 = bitcast i16* %5137 to <16 x i16>*
  store <16 x i16> %5135, <16 x i16>* %5138, align 2, !tbaa !401
  %5139 = shufflevector <32 x i16> %5134, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5140 = getelementptr inbounds i16, i16* %5137, i64 16
  %5141 = bitcast i16* %5140 to <16 x i16>*
  store <16 x i16> %5139, <16 x i16>* %5141, align 2, !tbaa !401
  %indvars.iv.next3168 = add nuw nsw i64 %indvars.iv3167, 1
  %.not2621 = icmp eq i64 %indvars.iv.next3168, %180
  br i1 %.not2621, label %"end for blur_y.s0.x.x.rebased323", label %"for blur_y.s0.x.x.rebased322"

"for blur_y.s0.x.x.rebased330":                   ; preds = %"for blur_y.s0.x.x.rebased330.preheader", %"consume blur_x338"
  %blur_y.s0.x.x.rebased332 = phi i32 [ %5220, %"consume blur_x338" ], [ 0, %"for blur_y.s0.x.x.rebased330.preheader" ]
  %5142 = add nsw i32 %blur_y.s0.x.x.rebased332, %t1582
  %a175 = shl nsw i32 %5142, 5
  %5143 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %5143, i32 %a175, i32 %a14
  %5144 = icmp slt i32 %5142, 1
  %5145 = icmp sgt i32 %4, %a175
  %5146 = or i1 %5144, %5145
  br i1 %5146, label %"produce blur_x336", label %"consume blur_x338"

"end for blur_y.s0.x.x.rebased331":               ; preds = %"consume blur_x338", %"end for blur_y.s0.x.x.rebased323"
  br i1 %34, label %"produce blur_x342", label %after_bb339

"produce blur_x336":                              ; preds = %"for blur_y.s0.x.x.rebased330"
  %5147 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s337 = select i1 %5147, i32 %b181, i32 %4
  %t869 = add nsw i32 %blur_x.s0.x.v1.base.s337, %t1841
  %5148 = sext i32 %t869 to i64
  %5149 = getelementptr inbounds i16, i16* %read_input, i64 %5148
  %5150 = getelementptr inbounds i16, i16* %5149, i64 1
  %5151 = bitcast i16* %5150 to <16 x i16>*
  %5152 = load <16 x i16>, <16 x i16>* %5151, align 2, !tbaa !396
  %5153 = getelementptr inbounds i16, i16* %5149, i64 17
  %5154 = bitcast i16* %5153 to <16 x i16>*
  %5155 = load <16 x i16>, <16 x i16>* %5154, align 2, !tbaa !396
  %5156 = getelementptr inbounds i16, i16* %5149, i64 2
  %5157 = bitcast i16* %5156 to <16 x i16>*
  %5158 = load <16 x i16>, <16 x i16>* %5157, align 2, !tbaa !396
  %5159 = getelementptr inbounds i16, i16* %5149, i64 18
  %5160 = bitcast i16* %5159 to <16 x i16>*
  %5161 = load <16 x i16>, <16 x i16>* %5160, align 2, !tbaa !396
  %5162 = bitcast i16* %5149 to <16 x i16>*
  %5163 = load <16 x i16>, <16 x i16>* %5162, align 2, !tbaa !396
  %5164 = getelementptr inbounds i16, i16* %5149, i64 16
  %5165 = bitcast i16* %5164 to <16 x i16>*
  %5166 = load <16 x i16>, <16 x i16>* %5165, align 2, !tbaa !396
  %5167 = add <16 x i16> %5158, %5152
  %5168 = add <16 x i16> %5167, %5163
  %5169 = add <16 x i16> %5161, %5155
  %5170 = add <16 x i16> %5169, %5166
  %5171 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5168, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5170, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5173 = shufflevector <16 x i16> %5171, <16 x i16> %5172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5174 = lshr <32 x i16> %5173, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5175 = shufflevector <32 x i16> %5174, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5176 = sext i32 %blur_x.s0.x.v1.base.s337 to i64
  %5177 = add nsw i64 %5176, %5057
  %5178 = getelementptr inbounds i16, i16* %blur_x, i64 %5177
  %5179 = bitcast i16* %5178 to <16 x i16>*
  store <16 x i16> %5175, <16 x i16>* %5179, align 2, !tbaa !399
  %5180 = shufflevector <32 x i16> %5174, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5181 = getelementptr inbounds i16, i16* %5178, i64 16
  %5182 = bitcast i16* %5181 to <16 x i16>*
  store <16 x i16> %5180, <16 x i16>* %5182, align 2, !tbaa !399
  br label %"consume blur_x338"

"consume blur_x338":                              ; preds = %"for blur_y.s0.x.x.rebased330", %"produce blur_x336"
  %5183 = sext i32 %b181 to i64
  %5184 = add nsw i64 %5060, %5183
  %5185 = getelementptr inbounds i16, i16* %blur_x, i64 %5184
  %5186 = bitcast i16* %5185 to <16 x i16>*
  %5187 = load <16 x i16>, <16 x i16>* %5186, align 2, !tbaa !399
  %5188 = getelementptr inbounds i16, i16* %5185, i64 16
  %5189 = bitcast i16* %5188 to <16 x i16>*
  %5190 = load <16 x i16>, <16 x i16>* %5189, align 2, !tbaa !399
  %5191 = add nsw i64 %5063, %5183
  %5192 = getelementptr inbounds i16, i16* %blur_x, i64 %5191
  %5193 = bitcast i16* %5192 to <16 x i16>*
  %5194 = load <16 x i16>, <16 x i16>* %5193, align 2, !tbaa !399
  %5195 = getelementptr inbounds i16, i16* %5192, i64 16
  %5196 = bitcast i16* %5195 to <16 x i16>*
  %5197 = load <16 x i16>, <16 x i16>* %5196, align 2, !tbaa !399
  %5198 = add nsw i64 %5066, %5183
  %5199 = getelementptr inbounds i16, i16* %blur_x, i64 %5198
  %5200 = bitcast i16* %5199 to <16 x i16>*
  %5201 = load <16 x i16>, <16 x i16>* %5200, align 2, !tbaa !399
  %5202 = getelementptr inbounds i16, i16* %5199, i64 16
  %5203 = bitcast i16* %5202 to <16 x i16>*
  %5204 = load <16 x i16>, <16 x i16>* %5203, align 2, !tbaa !399
  %5205 = add <16 x i16> %5194, %5187
  %5206 = add <16 x i16> %5205, %5201
  %5207 = add <16 x i16> %5197, %5190
  %5208 = add <16 x i16> %5207, %5204
  %5209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5206, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5210 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5208, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5211 = shufflevector <16 x i16> %5209, <16 x i16> %5210, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5212 = lshr <32 x i16> %5211, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5213 = shufflevector <32 x i16> %5212, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5214 = add nsw i64 %5070, %5183
  %5215 = getelementptr inbounds i16, i16* %65, i64 %5214
  %5216 = bitcast i16* %5215 to <16 x i16>*
  store <16 x i16> %5213, <16 x i16>* %5216, align 2, !tbaa !401
  %5217 = shufflevector <32 x i16> %5212, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5218 = getelementptr inbounds i16, i16* %5215, i64 16
  %5219 = bitcast i16* %5218 to <16 x i16>*
  store <16 x i16> %5217, <16 x i16>* %5219, align 2, !tbaa !401
  %5220 = add nuw nsw i32 %blur_y.s0.x.x.rebased332, 1
  %.not2620 = icmp eq i32 %5220, %t1639
  br i1 %.not2620, label %"end for blur_y.s0.x.x.rebased331", label %"for blur_y.s0.x.x.rebased330"

after_bb339:                                      ; preds = %"end for blur_y.s0.x.x.rebased331", %"produce blur_x342"
  br i1 %99, label %"for blur_y.s0.x.x.rebased344.preheader", label %"end for blur_y.s0.x.x.rebased345", !prof !386

"for blur_y.s0.x.x.rebased344.preheader":         ; preds = %after_bb339
  %5221 = sext i32 %t1666 to i64
  %5222 = zext i32 %.pre-phi3350 to i64
  %5223 = mul nsw i64 %5222, %108
  %5224 = sub nsw i64 %5223, %95
  %5225 = zext i32 %.pre-phi3356 to i64
  %5226 = mul nsw i64 %5225, %108
  %5227 = sub nsw i64 %5226, %95
  %5228 = zext i32 %.pre-phi3346 to i64
  %5229 = mul nsw i64 %5228, %108
  %5230 = sub nsw i64 %5229, %95
  %5231 = sext i32 %a26 to i64
  %5232 = add nsw i64 %5231, 13
  %5233 = mul nsw i64 %5232, %109
  %5234 = add nsw i64 %5233, %112
  br label %"for blur_y.s0.x.x.rebased344"

"produce blur_x342":                              ; preds = %"end for blur_y.s0.x.x.rebased331"
  %5235 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %5236 = getelementptr inbounds i16, i16* %5235, i64 -31
  %5237 = bitcast i16* %5236 to <16 x i16>*
  %5238 = load <16 x i16>, <16 x i16>* %5237, align 2, !tbaa !396
  %5239 = getelementptr inbounds i16, i16* %5235, i64 -15
  %5240 = bitcast i16* %5239 to <16 x i16>*
  %5241 = load <16 x i16>, <16 x i16>* %5240, align 2, !tbaa !396
  %5242 = getelementptr inbounds i16, i16* %5235, i64 -30
  %5243 = bitcast i16* %5242 to <16 x i16>*
  %5244 = load <16 x i16>, <16 x i16>* %5243, align 2, !tbaa !396
  %5245 = getelementptr inbounds i16, i16* %5235, i64 -14
  %5246 = bitcast i16* %5245 to <16 x i16>*
  %5247 = load <16 x i16>, <16 x i16>* %5246, align 2, !tbaa !396
  %5248 = getelementptr inbounds i16, i16* %5235, i64 -32
  %5249 = bitcast i16* %5248 to <16 x i16>*
  %5250 = load <16 x i16>, <16 x i16>* %5249, align 2, !tbaa !396
  %5251 = getelementptr inbounds i16, i16* %5235, i64 -16
  %5252 = bitcast i16* %5251 to <16 x i16>*
  %5253 = load <16 x i16>, <16 x i16>* %5252, align 2, !tbaa !396
  %5254 = add <16 x i16> %5244, %5238
  %5255 = add <16 x i16> %5254, %5250
  %5256 = add <16 x i16> %5247, %5241
  %5257 = add <16 x i16> %5256, %5253
  %5258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5255, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5259 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5257, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5260 = shufflevector <16 x i16> %5258, <16 x i16> %5259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5261 = lshr <32 x i16> %5260, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5262 = shufflevector <32 x i16> %5261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5263 = zext i32 %.pre-phi3356 to i64
  %5264 = mul nsw i64 %96, %5263
  %5265 = add nsw i64 %98, %5264
  %5266 = getelementptr inbounds i16, i16* %blur_x, i64 %5265
  %5267 = getelementptr inbounds i16, i16* %5266, i64 -32
  %5268 = bitcast i16* %5267 to <16 x i16>*
  store <16 x i16> %5262, <16 x i16>* %5268, align 2, !tbaa !399
  %5269 = shufflevector <32 x i16> %5261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5270 = getelementptr inbounds i16, i16* %5266, i64 -16
  %5271 = bitcast i16* %5270 to <16 x i16>*
  store <16 x i16> %5269, <16 x i16>* %5271, align 2, !tbaa !399
  %5272 = zext i32 %.pre-phi3350 to i64
  %5273 = mul nsw i64 %5272, %108
  %5274 = add nsw i64 %5273, %93
  %5275 = getelementptr inbounds i16, i16* %blur_x, i64 %5274
  %5276 = getelementptr inbounds i16, i16* %5275, i64 -32
  %5277 = bitcast i16* %5276 to <16 x i16>*
  %5278 = load <16 x i16>, <16 x i16>* %5277, align 2, !tbaa !399
  %5279 = getelementptr inbounds i16, i16* %5275, i64 -16
  %5280 = bitcast i16* %5279 to <16 x i16>*
  %5281 = load <16 x i16>, <16 x i16>* %5280, align 2, !tbaa !399
  %5282 = mul nsw i64 %5263, %108
  %5283 = add nsw i64 %5282, %93
  %5284 = getelementptr inbounds i16, i16* %blur_x, i64 %5283
  %5285 = getelementptr inbounds i16, i16* %5284, i64 -32
  %5286 = bitcast i16* %5285 to <16 x i16>*
  %5287 = load <16 x i16>, <16 x i16>* %5286, align 2, !tbaa !399
  %5288 = getelementptr inbounds i16, i16* %5284, i64 -16
  %5289 = bitcast i16* %5288 to <16 x i16>*
  %5290 = load <16 x i16>, <16 x i16>* %5289, align 2, !tbaa !399
  %5291 = zext i32 %.pre-phi3346 to i64
  %5292 = mul nsw i64 %5291, %108
  %5293 = add nsw i64 %5292, %93
  %5294 = getelementptr inbounds i16, i16* %blur_x, i64 %5293
  %5295 = getelementptr inbounds i16, i16* %5294, i64 -32
  %5296 = bitcast i16* %5295 to <16 x i16>*
  %5297 = load <16 x i16>, <16 x i16>* %5296, align 2, !tbaa !399
  %5298 = getelementptr inbounds i16, i16* %5294, i64 -16
  %5299 = bitcast i16* %5298 to <16 x i16>*
  %5300 = load <16 x i16>, <16 x i16>* %5299, align 2, !tbaa !399
  %5301 = add <16 x i16> %5287, %5278
  %5302 = add <16 x i16> %5301, %5297
  %5303 = add <16 x i16> %5290, %5281
  %5304 = add <16 x i16> %5303, %5300
  %5305 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5302, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5304, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5307 = shufflevector <16 x i16> %5305, <16 x i16> %5306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5308 = lshr <32 x i16> %5307, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5309 = shufflevector <32 x i16> %5308, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5310 = sext i32 %a26 to i64
  %5311 = add nsw i64 %5310, 13
  %5312 = mul nsw i64 %5311, %109
  %5313 = add nsw i64 %111, %5312
  %5314 = getelementptr inbounds i16, i16* %65, i64 %5313
  %5315 = getelementptr inbounds i16, i16* %5314, i64 -32
  %5316 = bitcast i16* %5315 to <16 x i16>*
  store <16 x i16> %5309, <16 x i16>* %5316, align 2, !tbaa !401
  %5317 = shufflevector <32 x i16> %5308, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5318 = getelementptr inbounds i16, i16* %5314, i64 -16
  %5319 = bitcast i16* %5318 to <16 x i16>*
  store <16 x i16> %5317, <16 x i16>* %5319, align 2, !tbaa !401
  br label %after_bb339

"for blur_y.s0.x.x.rebased344":                   ; preds = %"for blur_y.s0.x.x.rebased344.preheader", %"consume blur_x351"
  %indvars.iv3170 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased344.preheader" ], [ %indvars.iv.next3171, %"consume blur_x351" ]
  %5320 = add nsw i64 %indvars.iv3170, %100
  %5321 = icmp slt i64 %5320, 1
  %5322 = trunc i64 %5320 to i32
  %5323 = shl nsw i32 %5322, 5
  %5324 = icmp sgt i32 %4, %5323
  %5325 = or i1 %5321, %5324
  br i1 %5325, label %"produce blur_x350", label %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge"

"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased344"
  %.pre3381 = shl nsw i64 %5320, 5
  br label %"consume blur_x351"

"end for blur_y.s0.x.x.rebased345":               ; preds = %"consume blur_x351", %after_bb339
  br i1 %101, label %"for blur_y.s0.x.x.rebased352.preheader", label %"end for blur_y.s0.x.x.rebased353", !prof !386

"for blur_y.s0.x.x.rebased352.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased345"
  %5326 = sext i32 %t1666 to i64
  %5327 = zext i32 %.pre-phi3350 to i64
  %5328 = mul nsw i64 %5327, %108
  %5329 = sub nsw i64 %5328, %95
  %5330 = zext i32 %.pre-phi3356 to i64
  %5331 = mul nsw i64 %5330, %108
  %5332 = sub nsw i64 %5331, %95
  %5333 = zext i32 %.pre-phi3346 to i64
  %5334 = mul nsw i64 %5333, %108
  %5335 = sub nsw i64 %5334, %95
  %5336 = sext i32 %a26 to i64
  %5337 = add nsw i64 %5336, 13
  %5338 = mul nsw i64 %5337, %109
  %5339 = add nsw i64 %5338, %112
  br label %"for blur_y.s0.x.x.rebased352"

"produce blur_x350":                              ; preds = %"for blur_y.s0.x.x.rebased344"
  %t880 = add nsw i32 %5323, %t1857
  %5340 = sext i32 %t880 to i64
  %5341 = getelementptr inbounds i16, i16* %read_input, i64 %5340
  %5342 = getelementptr inbounds i16, i16* %5341, i64 1
  %5343 = bitcast i16* %5342 to <16 x i16>*
  %5344 = load <16 x i16>, <16 x i16>* %5343, align 2, !tbaa !396
  %5345 = getelementptr inbounds i16, i16* %5341, i64 17
  %5346 = bitcast i16* %5345 to <16 x i16>*
  %5347 = load <16 x i16>, <16 x i16>* %5346, align 2, !tbaa !396
  %5348 = getelementptr inbounds i16, i16* %5341, i64 2
  %5349 = bitcast i16* %5348 to <16 x i16>*
  %5350 = load <16 x i16>, <16 x i16>* %5349, align 2, !tbaa !396
  %5351 = getelementptr inbounds i16, i16* %5341, i64 18
  %5352 = bitcast i16* %5351 to <16 x i16>*
  %5353 = load <16 x i16>, <16 x i16>* %5352, align 2, !tbaa !396
  %5354 = bitcast i16* %5341 to <16 x i16>*
  %5355 = load <16 x i16>, <16 x i16>* %5354, align 2, !tbaa !396
  %5356 = getelementptr inbounds i16, i16* %5341, i64 16
  %5357 = bitcast i16* %5356 to <16 x i16>*
  %5358 = load <16 x i16>, <16 x i16>* %5357, align 2, !tbaa !396
  %5359 = add <16 x i16> %5350, %5344
  %5360 = add <16 x i16> %5359, %5355
  %5361 = add <16 x i16> %5353, %5347
  %5362 = add <16 x i16> %5361, %5358
  %5363 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5360, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5364 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5362, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5365 = shufflevector <16 x i16> %5363, <16 x i16> %5364, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5366 = lshr <32 x i16> %5365, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5367 = shufflevector <32 x i16> %5366, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5368 = shl nsw i64 %5320, 5
  %5369 = add nsw i64 %5368, %5221
  %5370 = getelementptr inbounds i16, i16* %blur_x, i64 %5369
  %5371 = bitcast i16* %5370 to <16 x i16>*
  store <16 x i16> %5367, <16 x i16>* %5371, align 2, !tbaa !399
  %5372 = shufflevector <32 x i16> %5366, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5373 = getelementptr inbounds i16, i16* %5370, i64 16
  %5374 = bitcast i16* %5373 to <16 x i16>*
  store <16 x i16> %5372, <16 x i16>* %5374, align 2, !tbaa !399
  br label %"consume blur_x351"

"consume blur_x351":                              ; preds = %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge", %"produce blur_x350"
  %.pre-phi3382 = phi i64 [ %.pre3381, %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge" ], [ %5368, %"produce blur_x350" ]
  %5375 = add nsw i64 %5224, %.pre-phi3382
  %5376 = getelementptr inbounds i16, i16* %blur_x, i64 %5375
  %5377 = bitcast i16* %5376 to <16 x i16>*
  %5378 = load <16 x i16>, <16 x i16>* %5377, align 2, !tbaa !399
  %5379 = getelementptr inbounds i16, i16* %5376, i64 16
  %5380 = bitcast i16* %5379 to <16 x i16>*
  %5381 = load <16 x i16>, <16 x i16>* %5380, align 2, !tbaa !399
  %5382 = add nsw i64 %5227, %.pre-phi3382
  %5383 = getelementptr inbounds i16, i16* %blur_x, i64 %5382
  %5384 = bitcast i16* %5383 to <16 x i16>*
  %5385 = load <16 x i16>, <16 x i16>* %5384, align 2, !tbaa !399
  %5386 = getelementptr inbounds i16, i16* %5383, i64 16
  %5387 = bitcast i16* %5386 to <16 x i16>*
  %5388 = load <16 x i16>, <16 x i16>* %5387, align 2, !tbaa !399
  %5389 = add nsw i64 %5230, %.pre-phi3382
  %5390 = getelementptr inbounds i16, i16* %blur_x, i64 %5389
  %5391 = bitcast i16* %5390 to <16 x i16>*
  %5392 = load <16 x i16>, <16 x i16>* %5391, align 2, !tbaa !399
  %5393 = getelementptr inbounds i16, i16* %5390, i64 16
  %5394 = bitcast i16* %5393 to <16 x i16>*
  %5395 = load <16 x i16>, <16 x i16>* %5394, align 2, !tbaa !399
  %5396 = add <16 x i16> %5385, %5378
  %5397 = add <16 x i16> %5396, %5392
  %5398 = add <16 x i16> %5388, %5381
  %5399 = add <16 x i16> %5398, %5395
  %5400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5397, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5399, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5402 = shufflevector <16 x i16> %5400, <16 x i16> %5401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5403 = lshr <32 x i16> %5402, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5404 = shufflevector <32 x i16> %5403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5405 = add nsw i64 %5234, %.pre-phi3382
  %5406 = getelementptr inbounds i16, i16* %65, i64 %5405
  %5407 = bitcast i16* %5406 to <16 x i16>*
  store <16 x i16> %5404, <16 x i16>* %5407, align 2, !tbaa !401
  %5408 = shufflevector <32 x i16> %5403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5409 = getelementptr inbounds i16, i16* %5406, i64 16
  %5410 = bitcast i16* %5409 to <16 x i16>*
  store <16 x i16> %5408, <16 x i16>* %5410, align 2, !tbaa !401
  %indvars.iv.next3171 = add nuw nsw i64 %indvars.iv3170, 1
  %.not2619 = icmp eq i64 %indvars.iv.next3171, %180
  br i1 %.not2619, label %"end for blur_y.s0.x.x.rebased345", label %"for blur_y.s0.x.x.rebased344"

"for blur_y.s0.x.x.rebased352":                   ; preds = %"for blur_y.s0.x.x.rebased352.preheader", %"consume blur_x360"
  %blur_y.s0.x.x.rebased354 = phi i32 [ %5489, %"consume blur_x360" ], [ 0, %"for blur_y.s0.x.x.rebased352.preheader" ]
  %5411 = add nsw i32 %blur_y.s0.x.x.rebased354, %t1582
  %a182 = shl nsw i32 %5411, 5
  %5412 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %5412, i32 %a182, i32 %a14
  %5413 = icmp slt i32 %5411, 1
  %5414 = icmp sgt i32 %4, %a182
  %5415 = or i1 %5413, %5414
  br i1 %5415, label %"produce blur_x358", label %"consume blur_x360"

"end for blur_y.s0.x.x.rebased353":               ; preds = %"consume blur_x360", %"end for blur_y.s0.x.x.rebased345"
  br i1 %34, label %"produce blur_x364", label %after_bb361

"produce blur_x358":                              ; preds = %"for blur_y.s0.x.x.rebased352"
  %5416 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s359 = select i1 %5416, i32 %b188, i32 %4
  %t885 = add nsw i32 %blur_x.s0.x.v1.base.s359, %t1857
  %5417 = sext i32 %t885 to i64
  %5418 = getelementptr inbounds i16, i16* %read_input, i64 %5417
  %5419 = getelementptr inbounds i16, i16* %5418, i64 1
  %5420 = bitcast i16* %5419 to <16 x i16>*
  %5421 = load <16 x i16>, <16 x i16>* %5420, align 2, !tbaa !396
  %5422 = getelementptr inbounds i16, i16* %5418, i64 17
  %5423 = bitcast i16* %5422 to <16 x i16>*
  %5424 = load <16 x i16>, <16 x i16>* %5423, align 2, !tbaa !396
  %5425 = getelementptr inbounds i16, i16* %5418, i64 2
  %5426 = bitcast i16* %5425 to <16 x i16>*
  %5427 = load <16 x i16>, <16 x i16>* %5426, align 2, !tbaa !396
  %5428 = getelementptr inbounds i16, i16* %5418, i64 18
  %5429 = bitcast i16* %5428 to <16 x i16>*
  %5430 = load <16 x i16>, <16 x i16>* %5429, align 2, !tbaa !396
  %5431 = bitcast i16* %5418 to <16 x i16>*
  %5432 = load <16 x i16>, <16 x i16>* %5431, align 2, !tbaa !396
  %5433 = getelementptr inbounds i16, i16* %5418, i64 16
  %5434 = bitcast i16* %5433 to <16 x i16>*
  %5435 = load <16 x i16>, <16 x i16>* %5434, align 2, !tbaa !396
  %5436 = add <16 x i16> %5427, %5421
  %5437 = add <16 x i16> %5436, %5432
  %5438 = add <16 x i16> %5430, %5424
  %5439 = add <16 x i16> %5438, %5435
  %5440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5437, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5441 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5439, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5442 = shufflevector <16 x i16> %5440, <16 x i16> %5441, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5443 = lshr <32 x i16> %5442, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5444 = shufflevector <32 x i16> %5443, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5445 = sext i32 %blur_x.s0.x.v1.base.s359 to i64
  %5446 = add nsw i64 %5445, %5326
  %5447 = getelementptr inbounds i16, i16* %blur_x, i64 %5446
  %5448 = bitcast i16* %5447 to <16 x i16>*
  store <16 x i16> %5444, <16 x i16>* %5448, align 2, !tbaa !399
  %5449 = shufflevector <32 x i16> %5443, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5450 = getelementptr inbounds i16, i16* %5447, i64 16
  %5451 = bitcast i16* %5450 to <16 x i16>*
  store <16 x i16> %5449, <16 x i16>* %5451, align 2, !tbaa !399
  br label %"consume blur_x360"

"consume blur_x360":                              ; preds = %"for blur_y.s0.x.x.rebased352", %"produce blur_x358"
  %5452 = sext i32 %b188 to i64
  %5453 = add nsw i64 %5329, %5452
  %5454 = getelementptr inbounds i16, i16* %blur_x, i64 %5453
  %5455 = bitcast i16* %5454 to <16 x i16>*
  %5456 = load <16 x i16>, <16 x i16>* %5455, align 2, !tbaa !399
  %5457 = getelementptr inbounds i16, i16* %5454, i64 16
  %5458 = bitcast i16* %5457 to <16 x i16>*
  %5459 = load <16 x i16>, <16 x i16>* %5458, align 2, !tbaa !399
  %5460 = add nsw i64 %5332, %5452
  %5461 = getelementptr inbounds i16, i16* %blur_x, i64 %5460
  %5462 = bitcast i16* %5461 to <16 x i16>*
  %5463 = load <16 x i16>, <16 x i16>* %5462, align 2, !tbaa !399
  %5464 = getelementptr inbounds i16, i16* %5461, i64 16
  %5465 = bitcast i16* %5464 to <16 x i16>*
  %5466 = load <16 x i16>, <16 x i16>* %5465, align 2, !tbaa !399
  %5467 = add nsw i64 %5335, %5452
  %5468 = getelementptr inbounds i16, i16* %blur_x, i64 %5467
  %5469 = bitcast i16* %5468 to <16 x i16>*
  %5470 = load <16 x i16>, <16 x i16>* %5469, align 2, !tbaa !399
  %5471 = getelementptr inbounds i16, i16* %5468, i64 16
  %5472 = bitcast i16* %5471 to <16 x i16>*
  %5473 = load <16 x i16>, <16 x i16>* %5472, align 2, !tbaa !399
  %5474 = add <16 x i16> %5463, %5456
  %5475 = add <16 x i16> %5474, %5470
  %5476 = add <16 x i16> %5466, %5459
  %5477 = add <16 x i16> %5476, %5473
  %5478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5475, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5477, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5480 = shufflevector <16 x i16> %5478, <16 x i16> %5479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5481 = lshr <32 x i16> %5480, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5482 = shufflevector <32 x i16> %5481, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5483 = add nsw i64 %5339, %5452
  %5484 = getelementptr inbounds i16, i16* %65, i64 %5483
  %5485 = bitcast i16* %5484 to <16 x i16>*
  store <16 x i16> %5482, <16 x i16>* %5485, align 2, !tbaa !401
  %5486 = shufflevector <32 x i16> %5481, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5487 = getelementptr inbounds i16, i16* %5484, i64 16
  %5488 = bitcast i16* %5487 to <16 x i16>*
  store <16 x i16> %5486, <16 x i16>* %5488, align 2, !tbaa !401
  %5489 = add nuw nsw i32 %blur_y.s0.x.x.rebased354, 1
  %.not2618 = icmp eq i32 %5489, %t1639
  br i1 %.not2618, label %"end for blur_y.s0.x.x.rebased353", label %"for blur_y.s0.x.x.rebased352"

after_bb361:                                      ; preds = %"end for blur_y.s0.x.x.rebased353", %"produce blur_x364"
  br i1 %99, label %"for blur_y.s0.x.x.rebased366.preheader", label %"end for blur_y.s0.x.x.rebased367", !prof !386

"for blur_y.s0.x.x.rebased366.preheader":         ; preds = %after_bb361
  %5490 = sext i32 %t1638 to i64
  %5491 = zext i32 %.pre-phi3356 to i64
  %5492 = mul nsw i64 %5491, %108
  %5493 = sub nsw i64 %5492, %95
  %5494 = zext i32 %.pre-phi to i64
  %5495 = mul nsw i64 %5494, %108
  %5496 = sub nsw i64 %5495, %95
  %5497 = zext i32 %.pre-phi3350 to i64
  %5498 = mul nsw i64 %5497, %108
  %5499 = sub nsw i64 %5498, %95
  %5500 = sext i32 %a26 to i64
  %5501 = add nsw i64 %5500, 14
  %5502 = mul nsw i64 %5501, %109
  %5503 = add nsw i64 %5502, %112
  br label %"for blur_y.s0.x.x.rebased366"

"produce blur_x364":                              ; preds = %"end for blur_y.s0.x.x.rebased353"
  %5504 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %5505 = getelementptr inbounds i16, i16* %5504, i64 -31
  %5506 = bitcast i16* %5505 to <16 x i16>*
  %5507 = load <16 x i16>, <16 x i16>* %5506, align 2, !tbaa !396
  %5508 = getelementptr inbounds i16, i16* %5504, i64 -15
  %5509 = bitcast i16* %5508 to <16 x i16>*
  %5510 = load <16 x i16>, <16 x i16>* %5509, align 2, !tbaa !396
  %5511 = getelementptr inbounds i16, i16* %5504, i64 -30
  %5512 = bitcast i16* %5511 to <16 x i16>*
  %5513 = load <16 x i16>, <16 x i16>* %5512, align 2, !tbaa !396
  %5514 = getelementptr inbounds i16, i16* %5504, i64 -14
  %5515 = bitcast i16* %5514 to <16 x i16>*
  %5516 = load <16 x i16>, <16 x i16>* %5515, align 2, !tbaa !396
  %5517 = getelementptr inbounds i16, i16* %5504, i64 -32
  %5518 = bitcast i16* %5517 to <16 x i16>*
  %5519 = load <16 x i16>, <16 x i16>* %5518, align 2, !tbaa !396
  %5520 = getelementptr inbounds i16, i16* %5504, i64 -16
  %5521 = bitcast i16* %5520 to <16 x i16>*
  %5522 = load <16 x i16>, <16 x i16>* %5521, align 2, !tbaa !396
  %5523 = add <16 x i16> %5513, %5507
  %5524 = add <16 x i16> %5523, %5519
  %5525 = add <16 x i16> %5516, %5510
  %5526 = add <16 x i16> %5525, %5522
  %5527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5524, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5526, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5529 = shufflevector <16 x i16> %5527, <16 x i16> %5528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5530 = lshr <32 x i16> %5529, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5531 = shufflevector <32 x i16> %5530, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5532 = zext i32 %.pre-phi to i64
  %5533 = mul nsw i64 %96, %5532
  %5534 = add nsw i64 %98, %5533
  %5535 = getelementptr inbounds i16, i16* %blur_x, i64 %5534
  %5536 = getelementptr inbounds i16, i16* %5535, i64 -32
  %5537 = bitcast i16* %5536 to <16 x i16>*
  store <16 x i16> %5531, <16 x i16>* %5537, align 2, !tbaa !399
  %5538 = shufflevector <32 x i16> %5530, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5539 = getelementptr inbounds i16, i16* %5535, i64 -16
  %5540 = bitcast i16* %5539 to <16 x i16>*
  store <16 x i16> %5538, <16 x i16>* %5540, align 2, !tbaa !399
  %5541 = zext i32 %.pre-phi3356 to i64
  %5542 = mul nsw i64 %5541, %108
  %5543 = add nsw i64 %5542, %93
  %5544 = getelementptr inbounds i16, i16* %blur_x, i64 %5543
  %5545 = getelementptr inbounds i16, i16* %5544, i64 -32
  %5546 = bitcast i16* %5545 to <16 x i16>*
  %5547 = load <16 x i16>, <16 x i16>* %5546, align 2, !tbaa !399
  %5548 = getelementptr inbounds i16, i16* %5544, i64 -16
  %5549 = bitcast i16* %5548 to <16 x i16>*
  %5550 = load <16 x i16>, <16 x i16>* %5549, align 2, !tbaa !399
  %5551 = mul nsw i64 %5532, %108
  %5552 = add nsw i64 %5551, %93
  %5553 = getelementptr inbounds i16, i16* %blur_x, i64 %5552
  %5554 = getelementptr inbounds i16, i16* %5553, i64 -32
  %5555 = bitcast i16* %5554 to <16 x i16>*
  %5556 = load <16 x i16>, <16 x i16>* %5555, align 2, !tbaa !399
  %5557 = getelementptr inbounds i16, i16* %5553, i64 -16
  %5558 = bitcast i16* %5557 to <16 x i16>*
  %5559 = load <16 x i16>, <16 x i16>* %5558, align 2, !tbaa !399
  %5560 = zext i32 %.pre-phi3350 to i64
  %5561 = mul nsw i64 %5560, %108
  %5562 = add nsw i64 %5561, %93
  %5563 = getelementptr inbounds i16, i16* %blur_x, i64 %5562
  %5564 = getelementptr inbounds i16, i16* %5563, i64 -32
  %5565 = bitcast i16* %5564 to <16 x i16>*
  %5566 = load <16 x i16>, <16 x i16>* %5565, align 2, !tbaa !399
  %5567 = getelementptr inbounds i16, i16* %5563, i64 -16
  %5568 = bitcast i16* %5567 to <16 x i16>*
  %5569 = load <16 x i16>, <16 x i16>* %5568, align 2, !tbaa !399
  %5570 = add <16 x i16> %5556, %5547
  %5571 = add <16 x i16> %5570, %5566
  %5572 = add <16 x i16> %5559, %5550
  %5573 = add <16 x i16> %5572, %5569
  %5574 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5571, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5575 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5573, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5576 = shufflevector <16 x i16> %5574, <16 x i16> %5575, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5577 = lshr <32 x i16> %5576, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5578 = shufflevector <32 x i16> %5577, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5579 = sext i32 %a26 to i64
  %5580 = add nsw i64 %5579, 14
  %5581 = mul nsw i64 %5580, %109
  %5582 = add nsw i64 %111, %5581
  %5583 = getelementptr inbounds i16, i16* %65, i64 %5582
  %5584 = getelementptr inbounds i16, i16* %5583, i64 -32
  %5585 = bitcast i16* %5584 to <16 x i16>*
  store <16 x i16> %5578, <16 x i16>* %5585, align 2, !tbaa !401
  %5586 = shufflevector <32 x i16> %5577, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5587 = getelementptr inbounds i16, i16* %5583, i64 -16
  %5588 = bitcast i16* %5587 to <16 x i16>*
  store <16 x i16> %5586, <16 x i16>* %5588, align 2, !tbaa !401
  br label %after_bb361

"for blur_y.s0.x.x.rebased366":                   ; preds = %"for blur_y.s0.x.x.rebased366.preheader", %"consume blur_x373"
  %indvars.iv3173 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased366.preheader" ], [ %indvars.iv.next3174, %"consume blur_x373" ]
  %5589 = add nsw i64 %indvars.iv3173, %100
  %5590 = icmp slt i64 %5589, 1
  %5591 = trunc i64 %5589 to i32
  %5592 = shl nsw i32 %5591, 5
  %5593 = icmp sgt i32 %4, %5592
  %5594 = or i1 %5590, %5593
  br i1 %5594, label %"produce blur_x372", label %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge"

"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased366"
  %.pre3383 = shl nsw i64 %5589, 5
  br label %"consume blur_x373"

"end for blur_y.s0.x.x.rebased367":               ; preds = %"consume blur_x373", %after_bb361
  br i1 %101, label %"for blur_y.s0.x.x.rebased374.preheader", label %"end for blur_y.s0.x.x.rebased375", !prof !386

"for blur_y.s0.x.x.rebased374.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased367"
  %5595 = sext i32 %t1638 to i64
  %5596 = zext i32 %.pre-phi3356 to i64
  %5597 = mul nsw i64 %5596, %108
  %5598 = sub nsw i64 %5597, %95
  %5599 = zext i32 %.pre-phi to i64
  %5600 = mul nsw i64 %5599, %108
  %5601 = sub nsw i64 %5600, %95
  %5602 = zext i32 %.pre-phi3350 to i64
  %5603 = mul nsw i64 %5602, %108
  %5604 = sub nsw i64 %5603, %95
  %5605 = sext i32 %a26 to i64
  %5606 = add nsw i64 %5605, 14
  %5607 = mul nsw i64 %5606, %109
  %5608 = add nsw i64 %5607, %112
  br label %"for blur_y.s0.x.x.rebased374"

"produce blur_x372":                              ; preds = %"for blur_y.s0.x.x.rebased366"
  %t896 = add nsw i32 %5592, %t1873
  %5609 = sext i32 %t896 to i64
  %5610 = getelementptr inbounds i16, i16* %read_input, i64 %5609
  %5611 = getelementptr inbounds i16, i16* %5610, i64 1
  %5612 = bitcast i16* %5611 to <16 x i16>*
  %5613 = load <16 x i16>, <16 x i16>* %5612, align 2, !tbaa !396
  %5614 = getelementptr inbounds i16, i16* %5610, i64 17
  %5615 = bitcast i16* %5614 to <16 x i16>*
  %5616 = load <16 x i16>, <16 x i16>* %5615, align 2, !tbaa !396
  %5617 = getelementptr inbounds i16, i16* %5610, i64 2
  %5618 = bitcast i16* %5617 to <16 x i16>*
  %5619 = load <16 x i16>, <16 x i16>* %5618, align 2, !tbaa !396
  %5620 = getelementptr inbounds i16, i16* %5610, i64 18
  %5621 = bitcast i16* %5620 to <16 x i16>*
  %5622 = load <16 x i16>, <16 x i16>* %5621, align 2, !tbaa !396
  %5623 = bitcast i16* %5610 to <16 x i16>*
  %5624 = load <16 x i16>, <16 x i16>* %5623, align 2, !tbaa !396
  %5625 = getelementptr inbounds i16, i16* %5610, i64 16
  %5626 = bitcast i16* %5625 to <16 x i16>*
  %5627 = load <16 x i16>, <16 x i16>* %5626, align 2, !tbaa !396
  %5628 = add <16 x i16> %5619, %5613
  %5629 = add <16 x i16> %5628, %5624
  %5630 = add <16 x i16> %5622, %5616
  %5631 = add <16 x i16> %5630, %5627
  %5632 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5629, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5633 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5631, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5634 = shufflevector <16 x i16> %5632, <16 x i16> %5633, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5635 = lshr <32 x i16> %5634, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5636 = shufflevector <32 x i16> %5635, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5637 = shl nsw i64 %5589, 5
  %5638 = add nsw i64 %5637, %5490
  %5639 = getelementptr inbounds i16, i16* %blur_x, i64 %5638
  %5640 = bitcast i16* %5639 to <16 x i16>*
  store <16 x i16> %5636, <16 x i16>* %5640, align 2, !tbaa !399
  %5641 = shufflevector <32 x i16> %5635, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5642 = getelementptr inbounds i16, i16* %5639, i64 16
  %5643 = bitcast i16* %5642 to <16 x i16>*
  store <16 x i16> %5641, <16 x i16>* %5643, align 2, !tbaa !399
  br label %"consume blur_x373"

"consume blur_x373":                              ; preds = %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge", %"produce blur_x372"
  %.pre-phi3384 = phi i64 [ %.pre3383, %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge" ], [ %5637, %"produce blur_x372" ]
  %5644 = add nsw i64 %5493, %.pre-phi3384
  %5645 = getelementptr inbounds i16, i16* %blur_x, i64 %5644
  %5646 = bitcast i16* %5645 to <16 x i16>*
  %5647 = load <16 x i16>, <16 x i16>* %5646, align 2, !tbaa !399
  %5648 = getelementptr inbounds i16, i16* %5645, i64 16
  %5649 = bitcast i16* %5648 to <16 x i16>*
  %5650 = load <16 x i16>, <16 x i16>* %5649, align 2, !tbaa !399
  %5651 = add nsw i64 %5496, %.pre-phi3384
  %5652 = getelementptr inbounds i16, i16* %blur_x, i64 %5651
  %5653 = bitcast i16* %5652 to <16 x i16>*
  %5654 = load <16 x i16>, <16 x i16>* %5653, align 2, !tbaa !399
  %5655 = getelementptr inbounds i16, i16* %5652, i64 16
  %5656 = bitcast i16* %5655 to <16 x i16>*
  %5657 = load <16 x i16>, <16 x i16>* %5656, align 2, !tbaa !399
  %5658 = add nsw i64 %5499, %.pre-phi3384
  %5659 = getelementptr inbounds i16, i16* %blur_x, i64 %5658
  %5660 = bitcast i16* %5659 to <16 x i16>*
  %5661 = load <16 x i16>, <16 x i16>* %5660, align 2, !tbaa !399
  %5662 = getelementptr inbounds i16, i16* %5659, i64 16
  %5663 = bitcast i16* %5662 to <16 x i16>*
  %5664 = load <16 x i16>, <16 x i16>* %5663, align 2, !tbaa !399
  %5665 = add <16 x i16> %5654, %5647
  %5666 = add <16 x i16> %5665, %5661
  %5667 = add <16 x i16> %5657, %5650
  %5668 = add <16 x i16> %5667, %5664
  %5669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5666, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5668, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5671 = shufflevector <16 x i16> %5669, <16 x i16> %5670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5672 = lshr <32 x i16> %5671, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5673 = shufflevector <32 x i16> %5672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5674 = add nsw i64 %5503, %.pre-phi3384
  %5675 = getelementptr inbounds i16, i16* %65, i64 %5674
  %5676 = bitcast i16* %5675 to <16 x i16>*
  store <16 x i16> %5673, <16 x i16>* %5676, align 2, !tbaa !401
  %5677 = shufflevector <32 x i16> %5672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5678 = getelementptr inbounds i16, i16* %5675, i64 16
  %5679 = bitcast i16* %5678 to <16 x i16>*
  store <16 x i16> %5677, <16 x i16>* %5679, align 2, !tbaa !401
  %indvars.iv.next3174 = add nuw nsw i64 %indvars.iv3173, 1
  %.not2617 = icmp eq i64 %indvars.iv.next3174, %180
  br i1 %.not2617, label %"end for blur_y.s0.x.x.rebased367", label %"for blur_y.s0.x.x.rebased366"

"for blur_y.s0.x.x.rebased374":                   ; preds = %"for blur_y.s0.x.x.rebased374.preheader", %"consume blur_x382"
  %blur_y.s0.x.x.rebased376 = phi i32 [ %5758, %"consume blur_x382" ], [ 0, %"for blur_y.s0.x.x.rebased374.preheader" ]
  %5680 = add nsw i32 %blur_y.s0.x.x.rebased376, %t1582
  %a189 = shl nsw i32 %5680, 5
  %5681 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %5681, i32 %a189, i32 %a14
  %5682 = icmp slt i32 %5680, 1
  %5683 = icmp sgt i32 %4, %a189
  %5684 = or i1 %5682, %5683
  br i1 %5684, label %"produce blur_x380", label %"consume blur_x382"

"end for blur_y.s0.x.x.rebased375":               ; preds = %"consume blur_x382", %"end for blur_y.s0.x.x.rebased367"
  br i1 %34, label %"produce blur_x386", label %after_bb383

"produce blur_x380":                              ; preds = %"for blur_y.s0.x.x.rebased374"
  %5685 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s381 = select i1 %5685, i32 %b195, i32 %4
  %t901 = add nsw i32 %blur_x.s0.x.v1.base.s381, %t1873
  %5686 = sext i32 %t901 to i64
  %5687 = getelementptr inbounds i16, i16* %read_input, i64 %5686
  %5688 = getelementptr inbounds i16, i16* %5687, i64 1
  %5689 = bitcast i16* %5688 to <16 x i16>*
  %5690 = load <16 x i16>, <16 x i16>* %5689, align 2, !tbaa !396
  %5691 = getelementptr inbounds i16, i16* %5687, i64 17
  %5692 = bitcast i16* %5691 to <16 x i16>*
  %5693 = load <16 x i16>, <16 x i16>* %5692, align 2, !tbaa !396
  %5694 = getelementptr inbounds i16, i16* %5687, i64 2
  %5695 = bitcast i16* %5694 to <16 x i16>*
  %5696 = load <16 x i16>, <16 x i16>* %5695, align 2, !tbaa !396
  %5697 = getelementptr inbounds i16, i16* %5687, i64 18
  %5698 = bitcast i16* %5697 to <16 x i16>*
  %5699 = load <16 x i16>, <16 x i16>* %5698, align 2, !tbaa !396
  %5700 = bitcast i16* %5687 to <16 x i16>*
  %5701 = load <16 x i16>, <16 x i16>* %5700, align 2, !tbaa !396
  %5702 = getelementptr inbounds i16, i16* %5687, i64 16
  %5703 = bitcast i16* %5702 to <16 x i16>*
  %5704 = load <16 x i16>, <16 x i16>* %5703, align 2, !tbaa !396
  %5705 = add <16 x i16> %5696, %5690
  %5706 = add <16 x i16> %5705, %5701
  %5707 = add <16 x i16> %5699, %5693
  %5708 = add <16 x i16> %5707, %5704
  %5709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5706, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5711 = shufflevector <16 x i16> %5709, <16 x i16> %5710, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5712 = lshr <32 x i16> %5711, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5713 = shufflevector <32 x i16> %5712, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5714 = sext i32 %blur_x.s0.x.v1.base.s381 to i64
  %5715 = add nsw i64 %5714, %5595
  %5716 = getelementptr inbounds i16, i16* %blur_x, i64 %5715
  %5717 = bitcast i16* %5716 to <16 x i16>*
  store <16 x i16> %5713, <16 x i16>* %5717, align 2, !tbaa !399
  %5718 = shufflevector <32 x i16> %5712, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5719 = getelementptr inbounds i16, i16* %5716, i64 16
  %5720 = bitcast i16* %5719 to <16 x i16>*
  store <16 x i16> %5718, <16 x i16>* %5720, align 2, !tbaa !399
  br label %"consume blur_x382"

"consume blur_x382":                              ; preds = %"for blur_y.s0.x.x.rebased374", %"produce blur_x380"
  %5721 = sext i32 %b195 to i64
  %5722 = add nsw i64 %5598, %5721
  %5723 = getelementptr inbounds i16, i16* %blur_x, i64 %5722
  %5724 = bitcast i16* %5723 to <16 x i16>*
  %5725 = load <16 x i16>, <16 x i16>* %5724, align 2, !tbaa !399
  %5726 = getelementptr inbounds i16, i16* %5723, i64 16
  %5727 = bitcast i16* %5726 to <16 x i16>*
  %5728 = load <16 x i16>, <16 x i16>* %5727, align 2, !tbaa !399
  %5729 = add nsw i64 %5601, %5721
  %5730 = getelementptr inbounds i16, i16* %blur_x, i64 %5729
  %5731 = bitcast i16* %5730 to <16 x i16>*
  %5732 = load <16 x i16>, <16 x i16>* %5731, align 2, !tbaa !399
  %5733 = getelementptr inbounds i16, i16* %5730, i64 16
  %5734 = bitcast i16* %5733 to <16 x i16>*
  %5735 = load <16 x i16>, <16 x i16>* %5734, align 2, !tbaa !399
  %5736 = add nsw i64 %5604, %5721
  %5737 = getelementptr inbounds i16, i16* %blur_x, i64 %5736
  %5738 = bitcast i16* %5737 to <16 x i16>*
  %5739 = load <16 x i16>, <16 x i16>* %5738, align 2, !tbaa !399
  %5740 = getelementptr inbounds i16, i16* %5737, i64 16
  %5741 = bitcast i16* %5740 to <16 x i16>*
  %5742 = load <16 x i16>, <16 x i16>* %5741, align 2, !tbaa !399
  %5743 = add <16 x i16> %5732, %5725
  %5744 = add <16 x i16> %5743, %5739
  %5745 = add <16 x i16> %5735, %5728
  %5746 = add <16 x i16> %5745, %5742
  %5747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5744, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5746, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5749 = shufflevector <16 x i16> %5747, <16 x i16> %5748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5750 = lshr <32 x i16> %5749, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5751 = shufflevector <32 x i16> %5750, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5752 = add nsw i64 %5608, %5721
  %5753 = getelementptr inbounds i16, i16* %65, i64 %5752
  %5754 = bitcast i16* %5753 to <16 x i16>*
  store <16 x i16> %5751, <16 x i16>* %5754, align 2, !tbaa !401
  %5755 = shufflevector <32 x i16> %5750, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5756 = getelementptr inbounds i16, i16* %5753, i64 16
  %5757 = bitcast i16* %5756 to <16 x i16>*
  store <16 x i16> %5755, <16 x i16>* %5757, align 2, !tbaa !401
  %5758 = add nuw nsw i32 %blur_y.s0.x.x.rebased376, 1
  %.not2616 = icmp eq i32 %5758, %t1639
  br i1 %.not2616, label %"end for blur_y.s0.x.x.rebased375", label %"for blur_y.s0.x.x.rebased374"

after_bb383:                                      ; preds = %"end for blur_y.s0.x.x.rebased375", %"produce blur_x386"
  br i1 %99, label %"for blur_y.s0.x.x.rebased388.preheader", label %"end for blur_y.s0.x.x.rebased389", !prof !386

"for blur_y.s0.x.x.rebased388.preheader":         ; preds = %after_bb383
  %5759 = sext i32 %t1644 to i64
  %5760 = zext i32 %.pre-phi to i64
  %5761 = mul nsw i64 %5760, %108
  %5762 = sub nsw i64 %5761, %95
  %5763 = zext i32 %.pre-phi3346 to i64
  %5764 = mul nsw i64 %5763, %108
  %5765 = sub nsw i64 %5764, %95
  %5766 = zext i32 %.pre-phi3356 to i64
  %5767 = mul nsw i64 %5766, %108
  %5768 = sub nsw i64 %5767, %95
  %5769 = sext i32 %a26 to i64
  %5770 = add nsw i64 %5769, 15
  %5771 = mul nsw i64 %5770, %109
  %5772 = add nsw i64 %5771, %112
  br label %"for blur_y.s0.x.x.rebased388"

"produce blur_x386":                              ; preds = %"end for blur_y.s0.x.x.rebased375"
  %5773 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %5774 = getelementptr inbounds i16, i16* %5773, i64 -31
  %5775 = bitcast i16* %5774 to <16 x i16>*
  %5776 = load <16 x i16>, <16 x i16>* %5775, align 2, !tbaa !396
  %5777 = getelementptr inbounds i16, i16* %5773, i64 -15
  %5778 = bitcast i16* %5777 to <16 x i16>*
  %5779 = load <16 x i16>, <16 x i16>* %5778, align 2, !tbaa !396
  %5780 = getelementptr inbounds i16, i16* %5773, i64 -30
  %5781 = bitcast i16* %5780 to <16 x i16>*
  %5782 = load <16 x i16>, <16 x i16>* %5781, align 2, !tbaa !396
  %5783 = getelementptr inbounds i16, i16* %5773, i64 -14
  %5784 = bitcast i16* %5783 to <16 x i16>*
  %5785 = load <16 x i16>, <16 x i16>* %5784, align 2, !tbaa !396
  %5786 = getelementptr inbounds i16, i16* %5773, i64 -32
  %5787 = bitcast i16* %5786 to <16 x i16>*
  %5788 = load <16 x i16>, <16 x i16>* %5787, align 2, !tbaa !396
  %5789 = getelementptr inbounds i16, i16* %5773, i64 -16
  %5790 = bitcast i16* %5789 to <16 x i16>*
  %5791 = load <16 x i16>, <16 x i16>* %5790, align 2, !tbaa !396
  %5792 = add <16 x i16> %5782, %5776
  %5793 = add <16 x i16> %5792, %5788
  %5794 = add <16 x i16> %5785, %5779
  %5795 = add <16 x i16> %5794, %5791
  %5796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5793, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5795, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5798 = shufflevector <16 x i16> %5796, <16 x i16> %5797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5799 = lshr <32 x i16> %5798, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5800 = shufflevector <32 x i16> %5799, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5801 = zext i32 %.pre-phi3346 to i64
  %5802 = mul nsw i64 %96, %5801
  %5803 = add nsw i64 %98, %5802
  %5804 = getelementptr inbounds i16, i16* %blur_x, i64 %5803
  %5805 = getelementptr inbounds i16, i16* %5804, i64 -32
  %5806 = bitcast i16* %5805 to <16 x i16>*
  store <16 x i16> %5800, <16 x i16>* %5806, align 2, !tbaa !399
  %5807 = shufflevector <32 x i16> %5799, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5808 = getelementptr inbounds i16, i16* %5804, i64 -16
  %5809 = bitcast i16* %5808 to <16 x i16>*
  store <16 x i16> %5807, <16 x i16>* %5809, align 2, !tbaa !399
  %5810 = zext i32 %.pre-phi to i64
  %5811 = mul nsw i64 %5810, %108
  %5812 = add nsw i64 %5811, %93
  %5813 = getelementptr inbounds i16, i16* %blur_x, i64 %5812
  %5814 = getelementptr inbounds i16, i16* %5813, i64 -32
  %5815 = bitcast i16* %5814 to <16 x i16>*
  %5816 = load <16 x i16>, <16 x i16>* %5815, align 2, !tbaa !399
  %5817 = getelementptr inbounds i16, i16* %5813, i64 -16
  %5818 = bitcast i16* %5817 to <16 x i16>*
  %5819 = load <16 x i16>, <16 x i16>* %5818, align 2, !tbaa !399
  %5820 = mul nsw i64 %5801, %108
  %5821 = add nsw i64 %5820, %93
  %5822 = getelementptr inbounds i16, i16* %blur_x, i64 %5821
  %5823 = getelementptr inbounds i16, i16* %5822, i64 -32
  %5824 = bitcast i16* %5823 to <16 x i16>*
  %5825 = load <16 x i16>, <16 x i16>* %5824, align 2, !tbaa !399
  %5826 = getelementptr inbounds i16, i16* %5822, i64 -16
  %5827 = bitcast i16* %5826 to <16 x i16>*
  %5828 = load <16 x i16>, <16 x i16>* %5827, align 2, !tbaa !399
  %5829 = zext i32 %.pre-phi3356 to i64
  %5830 = mul nsw i64 %5829, %108
  %5831 = add nsw i64 %5830, %93
  %5832 = getelementptr inbounds i16, i16* %blur_x, i64 %5831
  %5833 = getelementptr inbounds i16, i16* %5832, i64 -32
  %5834 = bitcast i16* %5833 to <16 x i16>*
  %5835 = load <16 x i16>, <16 x i16>* %5834, align 2, !tbaa !399
  %5836 = getelementptr inbounds i16, i16* %5832, i64 -16
  %5837 = bitcast i16* %5836 to <16 x i16>*
  %5838 = load <16 x i16>, <16 x i16>* %5837, align 2, !tbaa !399
  %5839 = add <16 x i16> %5825, %5816
  %5840 = add <16 x i16> %5839, %5835
  %5841 = add <16 x i16> %5828, %5819
  %5842 = add <16 x i16> %5841, %5838
  %5843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5840, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5842, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5845 = shufflevector <16 x i16> %5843, <16 x i16> %5844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5846 = lshr <32 x i16> %5845, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5847 = shufflevector <32 x i16> %5846, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5848 = sext i32 %a26 to i64
  %5849 = add nsw i64 %5848, 15
  %5850 = mul nsw i64 %5849, %109
  %5851 = add nsw i64 %111, %5850
  %5852 = getelementptr inbounds i16, i16* %65, i64 %5851
  %5853 = getelementptr inbounds i16, i16* %5852, i64 -32
  %5854 = bitcast i16* %5853 to <16 x i16>*
  store <16 x i16> %5847, <16 x i16>* %5854, align 2, !tbaa !401
  %5855 = shufflevector <32 x i16> %5846, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5856 = getelementptr inbounds i16, i16* %5852, i64 -16
  %5857 = bitcast i16* %5856 to <16 x i16>*
  store <16 x i16> %5855, <16 x i16>* %5857, align 2, !tbaa !401
  br label %after_bb383

"for blur_y.s0.x.x.rebased388":                   ; preds = %"for blur_y.s0.x.x.rebased388.preheader", %"consume blur_x395"
  %indvars.iv3176 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased388.preheader" ], [ %indvars.iv.next3177, %"consume blur_x395" ]
  %5858 = add nsw i64 %indvars.iv3176, %100
  %5859 = icmp slt i64 %5858, 1
  %5860 = trunc i64 %5858 to i32
  %5861 = shl nsw i32 %5860, 5
  %5862 = icmp sgt i32 %4, %5861
  %5863 = or i1 %5859, %5862
  br i1 %5863, label %"produce blur_x394", label %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge"

"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased388"
  %.pre3385 = shl nsw i64 %5858, 5
  br label %"consume blur_x395"

"end for blur_y.s0.x.x.rebased389":               ; preds = %"consume blur_x395", %after_bb383
  br i1 %101, label %"for blur_y.s0.x.x.rebased396.preheader", label %"end for blur_y.s0.x.x.rebased397", !prof !386

"for blur_y.s0.x.x.rebased396.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased389"
  %5864 = sext i32 %t1644 to i64
  %5865 = zext i32 %.pre-phi to i64
  %5866 = mul nsw i64 %5865, %108
  %5867 = sub nsw i64 %5866, %95
  %5868 = zext i32 %.pre-phi3346 to i64
  %5869 = mul nsw i64 %5868, %108
  %5870 = sub nsw i64 %5869, %95
  %5871 = zext i32 %.pre-phi3356 to i64
  %5872 = mul nsw i64 %5871, %108
  %5873 = sub nsw i64 %5872, %95
  %5874 = sext i32 %a26 to i64
  %5875 = add nsw i64 %5874, 15
  %5876 = mul nsw i64 %5875, %109
  %5877 = add nsw i64 %5876, %112
  br label %"for blur_y.s0.x.x.rebased396"

"produce blur_x394":                              ; preds = %"for blur_y.s0.x.x.rebased388"
  %t912 = add nsw i32 %5861, %t1889
  %5878 = sext i32 %t912 to i64
  %5879 = getelementptr inbounds i16, i16* %read_input, i64 %5878
  %5880 = getelementptr inbounds i16, i16* %5879, i64 1
  %5881 = bitcast i16* %5880 to <16 x i16>*
  %5882 = load <16 x i16>, <16 x i16>* %5881, align 2, !tbaa !396
  %5883 = getelementptr inbounds i16, i16* %5879, i64 17
  %5884 = bitcast i16* %5883 to <16 x i16>*
  %5885 = load <16 x i16>, <16 x i16>* %5884, align 2, !tbaa !396
  %5886 = getelementptr inbounds i16, i16* %5879, i64 2
  %5887 = bitcast i16* %5886 to <16 x i16>*
  %5888 = load <16 x i16>, <16 x i16>* %5887, align 2, !tbaa !396
  %5889 = getelementptr inbounds i16, i16* %5879, i64 18
  %5890 = bitcast i16* %5889 to <16 x i16>*
  %5891 = load <16 x i16>, <16 x i16>* %5890, align 2, !tbaa !396
  %5892 = bitcast i16* %5879 to <16 x i16>*
  %5893 = load <16 x i16>, <16 x i16>* %5892, align 2, !tbaa !396
  %5894 = getelementptr inbounds i16, i16* %5879, i64 16
  %5895 = bitcast i16* %5894 to <16 x i16>*
  %5896 = load <16 x i16>, <16 x i16>* %5895, align 2, !tbaa !396
  %5897 = add <16 x i16> %5888, %5882
  %5898 = add <16 x i16> %5897, %5893
  %5899 = add <16 x i16> %5891, %5885
  %5900 = add <16 x i16> %5899, %5896
  %5901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5898, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5902 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5900, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5903 = shufflevector <16 x i16> %5901, <16 x i16> %5902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5904 = lshr <32 x i16> %5903, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5905 = shufflevector <32 x i16> %5904, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5906 = shl nsw i64 %5858, 5
  %5907 = add nsw i64 %5906, %5759
  %5908 = getelementptr inbounds i16, i16* %blur_x, i64 %5907
  %5909 = bitcast i16* %5908 to <16 x i16>*
  store <16 x i16> %5905, <16 x i16>* %5909, align 2, !tbaa !399
  %5910 = shufflevector <32 x i16> %5904, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5911 = getelementptr inbounds i16, i16* %5908, i64 16
  %5912 = bitcast i16* %5911 to <16 x i16>*
  store <16 x i16> %5910, <16 x i16>* %5912, align 2, !tbaa !399
  br label %"consume blur_x395"

"consume blur_x395":                              ; preds = %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge", %"produce blur_x394"
  %.pre-phi3386 = phi i64 [ %.pre3385, %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge" ], [ %5906, %"produce blur_x394" ]
  %5913 = add nsw i64 %5762, %.pre-phi3386
  %5914 = getelementptr inbounds i16, i16* %blur_x, i64 %5913
  %5915 = bitcast i16* %5914 to <16 x i16>*
  %5916 = load <16 x i16>, <16 x i16>* %5915, align 2, !tbaa !399
  %5917 = getelementptr inbounds i16, i16* %5914, i64 16
  %5918 = bitcast i16* %5917 to <16 x i16>*
  %5919 = load <16 x i16>, <16 x i16>* %5918, align 2, !tbaa !399
  %5920 = add nsw i64 %5765, %.pre-phi3386
  %5921 = getelementptr inbounds i16, i16* %blur_x, i64 %5920
  %5922 = bitcast i16* %5921 to <16 x i16>*
  %5923 = load <16 x i16>, <16 x i16>* %5922, align 2, !tbaa !399
  %5924 = getelementptr inbounds i16, i16* %5921, i64 16
  %5925 = bitcast i16* %5924 to <16 x i16>*
  %5926 = load <16 x i16>, <16 x i16>* %5925, align 2, !tbaa !399
  %5927 = add nsw i64 %5768, %.pre-phi3386
  %5928 = getelementptr inbounds i16, i16* %blur_x, i64 %5927
  %5929 = bitcast i16* %5928 to <16 x i16>*
  %5930 = load <16 x i16>, <16 x i16>* %5929, align 2, !tbaa !399
  %5931 = getelementptr inbounds i16, i16* %5928, i64 16
  %5932 = bitcast i16* %5931 to <16 x i16>*
  %5933 = load <16 x i16>, <16 x i16>* %5932, align 2, !tbaa !399
  %5934 = add <16 x i16> %5923, %5916
  %5935 = add <16 x i16> %5934, %5930
  %5936 = add <16 x i16> %5926, %5919
  %5937 = add <16 x i16> %5936, %5933
  %5938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5935, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5939 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5937, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5940 = shufflevector <16 x i16> %5938, <16 x i16> %5939, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5941 = lshr <32 x i16> %5940, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5942 = shufflevector <32 x i16> %5941, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5943 = add nsw i64 %5772, %.pre-phi3386
  %5944 = getelementptr inbounds i16, i16* %65, i64 %5943
  %5945 = bitcast i16* %5944 to <16 x i16>*
  store <16 x i16> %5942, <16 x i16>* %5945, align 2, !tbaa !401
  %5946 = shufflevector <32 x i16> %5941, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5947 = getelementptr inbounds i16, i16* %5944, i64 16
  %5948 = bitcast i16* %5947 to <16 x i16>*
  store <16 x i16> %5946, <16 x i16>* %5948, align 2, !tbaa !401
  %indvars.iv.next3177 = add nuw nsw i64 %indvars.iv3176, 1
  %.not2615 = icmp eq i64 %indvars.iv.next3177, %180
  br i1 %.not2615, label %"end for blur_y.s0.x.x.rebased389", label %"for blur_y.s0.x.x.rebased388"

"for blur_y.s0.x.x.rebased396":                   ; preds = %"for blur_y.s0.x.x.rebased396.preheader", %"consume blur_x404"
  %blur_y.s0.x.x.rebased398 = phi i32 [ %6027, %"consume blur_x404" ], [ 0, %"for blur_y.s0.x.x.rebased396.preheader" ]
  %5949 = add nsw i32 %blur_y.s0.x.x.rebased398, %t1582
  %a196 = shl nsw i32 %5949, 5
  %5950 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %5950, i32 %a196, i32 %a14
  %5951 = icmp slt i32 %5949, 1
  %5952 = icmp sgt i32 %4, %a196
  %5953 = or i1 %5951, %5952
  br i1 %5953, label %"produce blur_x402", label %"consume blur_x404"

"end for blur_y.s0.x.x.rebased397":               ; preds = %"consume blur_x404", %"end for blur_y.s0.x.x.rebased389"
  br i1 %34, label %"produce blur_x408", label %after_bb405

"produce blur_x402":                              ; preds = %"for blur_y.s0.x.x.rebased396"
  %5954 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s403 = select i1 %5954, i32 %b202, i32 %4
  %t917 = add nsw i32 %blur_x.s0.x.v1.base.s403, %t1889
  %5955 = sext i32 %t917 to i64
  %5956 = getelementptr inbounds i16, i16* %read_input, i64 %5955
  %5957 = getelementptr inbounds i16, i16* %5956, i64 1
  %5958 = bitcast i16* %5957 to <16 x i16>*
  %5959 = load <16 x i16>, <16 x i16>* %5958, align 2, !tbaa !396
  %5960 = getelementptr inbounds i16, i16* %5956, i64 17
  %5961 = bitcast i16* %5960 to <16 x i16>*
  %5962 = load <16 x i16>, <16 x i16>* %5961, align 2, !tbaa !396
  %5963 = getelementptr inbounds i16, i16* %5956, i64 2
  %5964 = bitcast i16* %5963 to <16 x i16>*
  %5965 = load <16 x i16>, <16 x i16>* %5964, align 2, !tbaa !396
  %5966 = getelementptr inbounds i16, i16* %5956, i64 18
  %5967 = bitcast i16* %5966 to <16 x i16>*
  %5968 = load <16 x i16>, <16 x i16>* %5967, align 2, !tbaa !396
  %5969 = bitcast i16* %5956 to <16 x i16>*
  %5970 = load <16 x i16>, <16 x i16>* %5969, align 2, !tbaa !396
  %5971 = getelementptr inbounds i16, i16* %5956, i64 16
  %5972 = bitcast i16* %5971 to <16 x i16>*
  %5973 = load <16 x i16>, <16 x i16>* %5972, align 2, !tbaa !396
  %5974 = add <16 x i16> %5965, %5959
  %5975 = add <16 x i16> %5974, %5970
  %5976 = add <16 x i16> %5968, %5962
  %5977 = add <16 x i16> %5976, %5973
  %5978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5975, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5977, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5980 = shufflevector <16 x i16> %5978, <16 x i16> %5979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5981 = lshr <32 x i16> %5980, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5982 = shufflevector <32 x i16> %5981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5983 = sext i32 %blur_x.s0.x.v1.base.s403 to i64
  %5984 = add nsw i64 %5983, %5864
  %5985 = getelementptr inbounds i16, i16* %blur_x, i64 %5984
  %5986 = bitcast i16* %5985 to <16 x i16>*
  store <16 x i16> %5982, <16 x i16>* %5986, align 2, !tbaa !399
  %5987 = shufflevector <32 x i16> %5981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5988 = getelementptr inbounds i16, i16* %5985, i64 16
  %5989 = bitcast i16* %5988 to <16 x i16>*
  store <16 x i16> %5987, <16 x i16>* %5989, align 2, !tbaa !399
  br label %"consume blur_x404"

"consume blur_x404":                              ; preds = %"for blur_y.s0.x.x.rebased396", %"produce blur_x402"
  %5990 = sext i32 %b202 to i64
  %5991 = add nsw i64 %5867, %5990
  %5992 = getelementptr inbounds i16, i16* %blur_x, i64 %5991
  %5993 = bitcast i16* %5992 to <16 x i16>*
  %5994 = load <16 x i16>, <16 x i16>* %5993, align 2, !tbaa !399
  %5995 = getelementptr inbounds i16, i16* %5992, i64 16
  %5996 = bitcast i16* %5995 to <16 x i16>*
  %5997 = load <16 x i16>, <16 x i16>* %5996, align 2, !tbaa !399
  %5998 = add nsw i64 %5870, %5990
  %5999 = getelementptr inbounds i16, i16* %blur_x, i64 %5998
  %6000 = bitcast i16* %5999 to <16 x i16>*
  %6001 = load <16 x i16>, <16 x i16>* %6000, align 2, !tbaa !399
  %6002 = getelementptr inbounds i16, i16* %5999, i64 16
  %6003 = bitcast i16* %6002 to <16 x i16>*
  %6004 = load <16 x i16>, <16 x i16>* %6003, align 2, !tbaa !399
  %6005 = add nsw i64 %5873, %5990
  %6006 = getelementptr inbounds i16, i16* %blur_x, i64 %6005
  %6007 = bitcast i16* %6006 to <16 x i16>*
  %6008 = load <16 x i16>, <16 x i16>* %6007, align 2, !tbaa !399
  %6009 = getelementptr inbounds i16, i16* %6006, i64 16
  %6010 = bitcast i16* %6009 to <16 x i16>*
  %6011 = load <16 x i16>, <16 x i16>* %6010, align 2, !tbaa !399
  %6012 = add <16 x i16> %6001, %5994
  %6013 = add <16 x i16> %6012, %6008
  %6014 = add <16 x i16> %6004, %5997
  %6015 = add <16 x i16> %6014, %6011
  %6016 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6013, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6017 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6015, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6018 = shufflevector <16 x i16> %6016, <16 x i16> %6017, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6019 = lshr <32 x i16> %6018, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6020 = shufflevector <32 x i16> %6019, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6021 = add nsw i64 %5877, %5990
  %6022 = getelementptr inbounds i16, i16* %65, i64 %6021
  %6023 = bitcast i16* %6022 to <16 x i16>*
  store <16 x i16> %6020, <16 x i16>* %6023, align 2, !tbaa !401
  %6024 = shufflevector <32 x i16> %6019, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6025 = getelementptr inbounds i16, i16* %6022, i64 16
  %6026 = bitcast i16* %6025 to <16 x i16>*
  store <16 x i16> %6024, <16 x i16>* %6026, align 2, !tbaa !401
  %6027 = add nuw nsw i32 %blur_y.s0.x.x.rebased398, 1
  %.not2614 = icmp eq i32 %6027, %t1639
  br i1 %.not2614, label %"end for blur_y.s0.x.x.rebased397", label %"for blur_y.s0.x.x.rebased396"

after_bb405:                                      ; preds = %"end for blur_y.s0.x.x.rebased397", %"produce blur_x408"
  br i1 %99, label %"for blur_y.s0.x.x.rebased410.preheader", label %"end for blur_y.s0.x.x.rebased411", !prof !386

"for blur_y.s0.x.x.rebased410.preheader":         ; preds = %after_bb405
  %6028 = sext i32 %t1650 to i64
  %6029 = zext i32 %.pre-phi3346 to i64
  %6030 = mul nsw i64 %6029, %108
  %6031 = sub nsw i64 %6030, %95
  %6032 = zext i32 %.pre-phi3350 to i64
  %6033 = mul nsw i64 %6032, %108
  %6034 = sub nsw i64 %6033, %95
  %6035 = zext i32 %.pre-phi to i64
  %6036 = mul nsw i64 %6035, %108
  %6037 = sub nsw i64 %6036, %95
  %6038 = sext i32 %a26 to i64
  %6039 = add nsw i64 %6038, 16
  %6040 = mul nsw i64 %6039, %109
  %6041 = add nsw i64 %6040, %112
  br label %"for blur_y.s0.x.x.rebased410"

"produce blur_x408":                              ; preds = %"end for blur_y.s0.x.x.rebased397"
  %6042 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %6043 = getelementptr inbounds i16, i16* %6042, i64 -31
  %6044 = bitcast i16* %6043 to <16 x i16>*
  %6045 = load <16 x i16>, <16 x i16>* %6044, align 2, !tbaa !396
  %6046 = getelementptr inbounds i16, i16* %6042, i64 -15
  %6047 = bitcast i16* %6046 to <16 x i16>*
  %6048 = load <16 x i16>, <16 x i16>* %6047, align 2, !tbaa !396
  %6049 = getelementptr inbounds i16, i16* %6042, i64 -30
  %6050 = bitcast i16* %6049 to <16 x i16>*
  %6051 = load <16 x i16>, <16 x i16>* %6050, align 2, !tbaa !396
  %6052 = getelementptr inbounds i16, i16* %6042, i64 -14
  %6053 = bitcast i16* %6052 to <16 x i16>*
  %6054 = load <16 x i16>, <16 x i16>* %6053, align 2, !tbaa !396
  %6055 = getelementptr inbounds i16, i16* %6042, i64 -32
  %6056 = bitcast i16* %6055 to <16 x i16>*
  %6057 = load <16 x i16>, <16 x i16>* %6056, align 2, !tbaa !396
  %6058 = getelementptr inbounds i16, i16* %6042, i64 -16
  %6059 = bitcast i16* %6058 to <16 x i16>*
  %6060 = load <16 x i16>, <16 x i16>* %6059, align 2, !tbaa !396
  %6061 = add <16 x i16> %6051, %6045
  %6062 = add <16 x i16> %6061, %6057
  %6063 = add <16 x i16> %6054, %6048
  %6064 = add <16 x i16> %6063, %6060
  %6065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6062, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6064, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6067 = shufflevector <16 x i16> %6065, <16 x i16> %6066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6068 = lshr <32 x i16> %6067, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6069 = shufflevector <32 x i16> %6068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6070 = zext i32 %.pre-phi3350 to i64
  %6071 = mul nsw i64 %96, %6070
  %6072 = add nsw i64 %98, %6071
  %6073 = getelementptr inbounds i16, i16* %blur_x, i64 %6072
  %6074 = getelementptr inbounds i16, i16* %6073, i64 -32
  %6075 = bitcast i16* %6074 to <16 x i16>*
  store <16 x i16> %6069, <16 x i16>* %6075, align 2, !tbaa !399
  %6076 = shufflevector <32 x i16> %6068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6077 = getelementptr inbounds i16, i16* %6073, i64 -16
  %6078 = bitcast i16* %6077 to <16 x i16>*
  store <16 x i16> %6076, <16 x i16>* %6078, align 2, !tbaa !399
  %6079 = zext i32 %.pre-phi3346 to i64
  %6080 = mul nsw i64 %6079, %108
  %6081 = add nsw i64 %6080, %93
  %6082 = getelementptr inbounds i16, i16* %blur_x, i64 %6081
  %6083 = getelementptr inbounds i16, i16* %6082, i64 -32
  %6084 = bitcast i16* %6083 to <16 x i16>*
  %6085 = load <16 x i16>, <16 x i16>* %6084, align 2, !tbaa !399
  %6086 = getelementptr inbounds i16, i16* %6082, i64 -16
  %6087 = bitcast i16* %6086 to <16 x i16>*
  %6088 = load <16 x i16>, <16 x i16>* %6087, align 2, !tbaa !399
  %6089 = mul nsw i64 %6070, %108
  %6090 = add nsw i64 %6089, %93
  %6091 = getelementptr inbounds i16, i16* %blur_x, i64 %6090
  %6092 = getelementptr inbounds i16, i16* %6091, i64 -32
  %6093 = bitcast i16* %6092 to <16 x i16>*
  %6094 = load <16 x i16>, <16 x i16>* %6093, align 2, !tbaa !399
  %6095 = getelementptr inbounds i16, i16* %6091, i64 -16
  %6096 = bitcast i16* %6095 to <16 x i16>*
  %6097 = load <16 x i16>, <16 x i16>* %6096, align 2, !tbaa !399
  %6098 = zext i32 %.pre-phi to i64
  %6099 = mul nsw i64 %6098, %108
  %6100 = add nsw i64 %6099, %93
  %6101 = getelementptr inbounds i16, i16* %blur_x, i64 %6100
  %6102 = getelementptr inbounds i16, i16* %6101, i64 -32
  %6103 = bitcast i16* %6102 to <16 x i16>*
  %6104 = load <16 x i16>, <16 x i16>* %6103, align 2, !tbaa !399
  %6105 = getelementptr inbounds i16, i16* %6101, i64 -16
  %6106 = bitcast i16* %6105 to <16 x i16>*
  %6107 = load <16 x i16>, <16 x i16>* %6106, align 2, !tbaa !399
  %6108 = add <16 x i16> %6094, %6085
  %6109 = add <16 x i16> %6108, %6104
  %6110 = add <16 x i16> %6097, %6088
  %6111 = add <16 x i16> %6110, %6107
  %6112 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6109, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6113 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6111, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6114 = shufflevector <16 x i16> %6112, <16 x i16> %6113, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6115 = lshr <32 x i16> %6114, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6116 = shufflevector <32 x i16> %6115, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6117 = sext i32 %a26 to i64
  %6118 = add nsw i64 %6117, 16
  %6119 = mul nsw i64 %6118, %109
  %6120 = add nsw i64 %111, %6119
  %6121 = getelementptr inbounds i16, i16* %65, i64 %6120
  %6122 = getelementptr inbounds i16, i16* %6121, i64 -32
  %6123 = bitcast i16* %6122 to <16 x i16>*
  store <16 x i16> %6116, <16 x i16>* %6123, align 2, !tbaa !401
  %6124 = shufflevector <32 x i16> %6115, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6125 = getelementptr inbounds i16, i16* %6121, i64 -16
  %6126 = bitcast i16* %6125 to <16 x i16>*
  store <16 x i16> %6124, <16 x i16>* %6126, align 2, !tbaa !401
  br label %after_bb405

"for blur_y.s0.x.x.rebased410":                   ; preds = %"for blur_y.s0.x.x.rebased410.preheader", %"consume blur_x417"
  %indvars.iv3179 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased410.preheader" ], [ %indvars.iv.next3180, %"consume blur_x417" ]
  %6127 = add nsw i64 %indvars.iv3179, %100
  %6128 = icmp slt i64 %6127, 1
  %6129 = trunc i64 %6127 to i32
  %6130 = shl nsw i32 %6129, 5
  %6131 = icmp sgt i32 %4, %6130
  %6132 = or i1 %6128, %6131
  br i1 %6132, label %"produce blur_x416", label %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge"

"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased410"
  %.pre3387 = shl nsw i64 %6127, 5
  br label %"consume blur_x417"

"end for blur_y.s0.x.x.rebased411":               ; preds = %"consume blur_x417", %after_bb405
  br i1 %101, label %"for blur_y.s0.x.x.rebased418.preheader", label %"end for blur_y.s0.x.x.rebased419", !prof !386

"for blur_y.s0.x.x.rebased418.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased411"
  %6133 = sext i32 %t1650 to i64
  %6134 = zext i32 %.pre-phi3346 to i64
  %6135 = mul nsw i64 %6134, %108
  %6136 = sub nsw i64 %6135, %95
  %6137 = zext i32 %.pre-phi3350 to i64
  %6138 = mul nsw i64 %6137, %108
  %6139 = sub nsw i64 %6138, %95
  %6140 = zext i32 %.pre-phi to i64
  %6141 = mul nsw i64 %6140, %108
  %6142 = sub nsw i64 %6141, %95
  %6143 = sext i32 %a26 to i64
  %6144 = add nsw i64 %6143, 16
  %6145 = mul nsw i64 %6144, %109
  %6146 = add nsw i64 %6145, %112
  br label %"for blur_y.s0.x.x.rebased418"

"produce blur_x416":                              ; preds = %"for blur_y.s0.x.x.rebased410"
  %t928 = add nsw i32 %6130, %t1905
  %6147 = sext i32 %t928 to i64
  %6148 = getelementptr inbounds i16, i16* %read_input, i64 %6147
  %6149 = getelementptr inbounds i16, i16* %6148, i64 1
  %6150 = bitcast i16* %6149 to <16 x i16>*
  %6151 = load <16 x i16>, <16 x i16>* %6150, align 2, !tbaa !396
  %6152 = getelementptr inbounds i16, i16* %6148, i64 17
  %6153 = bitcast i16* %6152 to <16 x i16>*
  %6154 = load <16 x i16>, <16 x i16>* %6153, align 2, !tbaa !396
  %6155 = getelementptr inbounds i16, i16* %6148, i64 2
  %6156 = bitcast i16* %6155 to <16 x i16>*
  %6157 = load <16 x i16>, <16 x i16>* %6156, align 2, !tbaa !396
  %6158 = getelementptr inbounds i16, i16* %6148, i64 18
  %6159 = bitcast i16* %6158 to <16 x i16>*
  %6160 = load <16 x i16>, <16 x i16>* %6159, align 2, !tbaa !396
  %6161 = bitcast i16* %6148 to <16 x i16>*
  %6162 = load <16 x i16>, <16 x i16>* %6161, align 2, !tbaa !396
  %6163 = getelementptr inbounds i16, i16* %6148, i64 16
  %6164 = bitcast i16* %6163 to <16 x i16>*
  %6165 = load <16 x i16>, <16 x i16>* %6164, align 2, !tbaa !396
  %6166 = add <16 x i16> %6157, %6151
  %6167 = add <16 x i16> %6166, %6162
  %6168 = add <16 x i16> %6160, %6154
  %6169 = add <16 x i16> %6168, %6165
  %6170 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6167, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6171 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6169, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6172 = shufflevector <16 x i16> %6170, <16 x i16> %6171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6173 = lshr <32 x i16> %6172, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6174 = shufflevector <32 x i16> %6173, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6175 = shl nsw i64 %6127, 5
  %6176 = add nsw i64 %6175, %6028
  %6177 = getelementptr inbounds i16, i16* %blur_x, i64 %6176
  %6178 = bitcast i16* %6177 to <16 x i16>*
  store <16 x i16> %6174, <16 x i16>* %6178, align 2, !tbaa !399
  %6179 = shufflevector <32 x i16> %6173, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6180 = getelementptr inbounds i16, i16* %6177, i64 16
  %6181 = bitcast i16* %6180 to <16 x i16>*
  store <16 x i16> %6179, <16 x i16>* %6181, align 2, !tbaa !399
  br label %"consume blur_x417"

"consume blur_x417":                              ; preds = %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge", %"produce blur_x416"
  %.pre-phi3388 = phi i64 [ %.pre3387, %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge" ], [ %6175, %"produce blur_x416" ]
  %6182 = add nsw i64 %6031, %.pre-phi3388
  %6183 = getelementptr inbounds i16, i16* %blur_x, i64 %6182
  %6184 = bitcast i16* %6183 to <16 x i16>*
  %6185 = load <16 x i16>, <16 x i16>* %6184, align 2, !tbaa !399
  %6186 = getelementptr inbounds i16, i16* %6183, i64 16
  %6187 = bitcast i16* %6186 to <16 x i16>*
  %6188 = load <16 x i16>, <16 x i16>* %6187, align 2, !tbaa !399
  %6189 = add nsw i64 %6034, %.pre-phi3388
  %6190 = getelementptr inbounds i16, i16* %blur_x, i64 %6189
  %6191 = bitcast i16* %6190 to <16 x i16>*
  %6192 = load <16 x i16>, <16 x i16>* %6191, align 2, !tbaa !399
  %6193 = getelementptr inbounds i16, i16* %6190, i64 16
  %6194 = bitcast i16* %6193 to <16 x i16>*
  %6195 = load <16 x i16>, <16 x i16>* %6194, align 2, !tbaa !399
  %6196 = add nsw i64 %6037, %.pre-phi3388
  %6197 = getelementptr inbounds i16, i16* %blur_x, i64 %6196
  %6198 = bitcast i16* %6197 to <16 x i16>*
  %6199 = load <16 x i16>, <16 x i16>* %6198, align 2, !tbaa !399
  %6200 = getelementptr inbounds i16, i16* %6197, i64 16
  %6201 = bitcast i16* %6200 to <16 x i16>*
  %6202 = load <16 x i16>, <16 x i16>* %6201, align 2, !tbaa !399
  %6203 = add <16 x i16> %6192, %6185
  %6204 = add <16 x i16> %6203, %6199
  %6205 = add <16 x i16> %6195, %6188
  %6206 = add <16 x i16> %6205, %6202
  %6207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6204, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6206, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6209 = shufflevector <16 x i16> %6207, <16 x i16> %6208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6210 = lshr <32 x i16> %6209, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6211 = shufflevector <32 x i16> %6210, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6212 = add nsw i64 %6041, %.pre-phi3388
  %6213 = getelementptr inbounds i16, i16* %65, i64 %6212
  %6214 = bitcast i16* %6213 to <16 x i16>*
  store <16 x i16> %6211, <16 x i16>* %6214, align 2, !tbaa !401
  %6215 = shufflevector <32 x i16> %6210, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6216 = getelementptr inbounds i16, i16* %6213, i64 16
  %6217 = bitcast i16* %6216 to <16 x i16>*
  store <16 x i16> %6215, <16 x i16>* %6217, align 2, !tbaa !401
  %indvars.iv.next3180 = add nuw nsw i64 %indvars.iv3179, 1
  %.not2613 = icmp eq i64 %indvars.iv.next3180, %180
  br i1 %.not2613, label %"end for blur_y.s0.x.x.rebased411", label %"for blur_y.s0.x.x.rebased410"

"for blur_y.s0.x.x.rebased418":                   ; preds = %"for blur_y.s0.x.x.rebased418.preheader", %"consume blur_x426"
  %blur_y.s0.x.x.rebased420 = phi i32 [ %6296, %"consume blur_x426" ], [ 0, %"for blur_y.s0.x.x.rebased418.preheader" ]
  %6218 = add nsw i32 %blur_y.s0.x.x.rebased420, %t1582
  %a203 = shl nsw i32 %6218, 5
  %6219 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %6219, i32 %a203, i32 %a14
  %6220 = icmp slt i32 %6218, 1
  %6221 = icmp sgt i32 %4, %a203
  %6222 = or i1 %6220, %6221
  br i1 %6222, label %"produce blur_x424", label %"consume blur_x426"

"end for blur_y.s0.x.x.rebased419":               ; preds = %"consume blur_x426", %"end for blur_y.s0.x.x.rebased411"
  br i1 %34, label %"produce blur_x430", label %after_bb427

"produce blur_x424":                              ; preds = %"for blur_y.s0.x.x.rebased418"
  %6223 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s425 = select i1 %6223, i32 %b209, i32 %4
  %t933 = add nsw i32 %blur_x.s0.x.v1.base.s425, %t1905
  %6224 = sext i32 %t933 to i64
  %6225 = getelementptr inbounds i16, i16* %read_input, i64 %6224
  %6226 = getelementptr inbounds i16, i16* %6225, i64 1
  %6227 = bitcast i16* %6226 to <16 x i16>*
  %6228 = load <16 x i16>, <16 x i16>* %6227, align 2, !tbaa !396
  %6229 = getelementptr inbounds i16, i16* %6225, i64 17
  %6230 = bitcast i16* %6229 to <16 x i16>*
  %6231 = load <16 x i16>, <16 x i16>* %6230, align 2, !tbaa !396
  %6232 = getelementptr inbounds i16, i16* %6225, i64 2
  %6233 = bitcast i16* %6232 to <16 x i16>*
  %6234 = load <16 x i16>, <16 x i16>* %6233, align 2, !tbaa !396
  %6235 = getelementptr inbounds i16, i16* %6225, i64 18
  %6236 = bitcast i16* %6235 to <16 x i16>*
  %6237 = load <16 x i16>, <16 x i16>* %6236, align 2, !tbaa !396
  %6238 = bitcast i16* %6225 to <16 x i16>*
  %6239 = load <16 x i16>, <16 x i16>* %6238, align 2, !tbaa !396
  %6240 = getelementptr inbounds i16, i16* %6225, i64 16
  %6241 = bitcast i16* %6240 to <16 x i16>*
  %6242 = load <16 x i16>, <16 x i16>* %6241, align 2, !tbaa !396
  %6243 = add <16 x i16> %6234, %6228
  %6244 = add <16 x i16> %6243, %6239
  %6245 = add <16 x i16> %6237, %6231
  %6246 = add <16 x i16> %6245, %6242
  %6247 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6244, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6246, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6249 = shufflevector <16 x i16> %6247, <16 x i16> %6248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6250 = lshr <32 x i16> %6249, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6251 = shufflevector <32 x i16> %6250, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6252 = sext i32 %blur_x.s0.x.v1.base.s425 to i64
  %6253 = add nsw i64 %6252, %6133
  %6254 = getelementptr inbounds i16, i16* %blur_x, i64 %6253
  %6255 = bitcast i16* %6254 to <16 x i16>*
  store <16 x i16> %6251, <16 x i16>* %6255, align 2, !tbaa !399
  %6256 = shufflevector <32 x i16> %6250, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6257 = getelementptr inbounds i16, i16* %6254, i64 16
  %6258 = bitcast i16* %6257 to <16 x i16>*
  store <16 x i16> %6256, <16 x i16>* %6258, align 2, !tbaa !399
  br label %"consume blur_x426"

"consume blur_x426":                              ; preds = %"for blur_y.s0.x.x.rebased418", %"produce blur_x424"
  %6259 = sext i32 %b209 to i64
  %6260 = add nsw i64 %6136, %6259
  %6261 = getelementptr inbounds i16, i16* %blur_x, i64 %6260
  %6262 = bitcast i16* %6261 to <16 x i16>*
  %6263 = load <16 x i16>, <16 x i16>* %6262, align 2, !tbaa !399
  %6264 = getelementptr inbounds i16, i16* %6261, i64 16
  %6265 = bitcast i16* %6264 to <16 x i16>*
  %6266 = load <16 x i16>, <16 x i16>* %6265, align 2, !tbaa !399
  %6267 = add nsw i64 %6139, %6259
  %6268 = getelementptr inbounds i16, i16* %blur_x, i64 %6267
  %6269 = bitcast i16* %6268 to <16 x i16>*
  %6270 = load <16 x i16>, <16 x i16>* %6269, align 2, !tbaa !399
  %6271 = getelementptr inbounds i16, i16* %6268, i64 16
  %6272 = bitcast i16* %6271 to <16 x i16>*
  %6273 = load <16 x i16>, <16 x i16>* %6272, align 2, !tbaa !399
  %6274 = add nsw i64 %6142, %6259
  %6275 = getelementptr inbounds i16, i16* %blur_x, i64 %6274
  %6276 = bitcast i16* %6275 to <16 x i16>*
  %6277 = load <16 x i16>, <16 x i16>* %6276, align 2, !tbaa !399
  %6278 = getelementptr inbounds i16, i16* %6275, i64 16
  %6279 = bitcast i16* %6278 to <16 x i16>*
  %6280 = load <16 x i16>, <16 x i16>* %6279, align 2, !tbaa !399
  %6281 = add <16 x i16> %6270, %6263
  %6282 = add <16 x i16> %6281, %6277
  %6283 = add <16 x i16> %6273, %6266
  %6284 = add <16 x i16> %6283, %6280
  %6285 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6282, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6286 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6284, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6287 = shufflevector <16 x i16> %6285, <16 x i16> %6286, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6288 = lshr <32 x i16> %6287, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6289 = shufflevector <32 x i16> %6288, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6290 = add nsw i64 %6146, %6259
  %6291 = getelementptr inbounds i16, i16* %65, i64 %6290
  %6292 = bitcast i16* %6291 to <16 x i16>*
  store <16 x i16> %6289, <16 x i16>* %6292, align 2, !tbaa !401
  %6293 = shufflevector <32 x i16> %6288, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6294 = getelementptr inbounds i16, i16* %6291, i64 16
  %6295 = bitcast i16* %6294 to <16 x i16>*
  store <16 x i16> %6293, <16 x i16>* %6295, align 2, !tbaa !401
  %6296 = add nuw nsw i32 %blur_y.s0.x.x.rebased420, 1
  %.not2612 = icmp eq i32 %6296, %t1639
  br i1 %.not2612, label %"end for blur_y.s0.x.x.rebased419", label %"for blur_y.s0.x.x.rebased418"

after_bb427:                                      ; preds = %"end for blur_y.s0.x.x.rebased419", %"produce blur_x430"
  br i1 %99, label %"for blur_y.s0.x.x.rebased432.preheader", label %"end for blur_y.s0.x.x.rebased433", !prof !386

"for blur_y.s0.x.x.rebased432.preheader":         ; preds = %after_bb427
  %6297 = sext i32 %t1666 to i64
  %6298 = zext i32 %.pre-phi3350 to i64
  %6299 = mul nsw i64 %6298, %108
  %6300 = sub nsw i64 %6299, %95
  %6301 = zext i32 %.pre-phi3356 to i64
  %6302 = mul nsw i64 %6301, %108
  %6303 = sub nsw i64 %6302, %95
  %6304 = zext i32 %.pre-phi3346 to i64
  %6305 = mul nsw i64 %6304, %108
  %6306 = sub nsw i64 %6305, %95
  %6307 = sext i32 %a26 to i64
  %6308 = add nsw i64 %6307, 17
  %6309 = mul nsw i64 %6308, %109
  %6310 = add nsw i64 %6309, %112
  br label %"for blur_y.s0.x.x.rebased432"

"produce blur_x430":                              ; preds = %"end for blur_y.s0.x.x.rebased419"
  %6311 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %6312 = getelementptr inbounds i16, i16* %6311, i64 -31
  %6313 = bitcast i16* %6312 to <16 x i16>*
  %6314 = load <16 x i16>, <16 x i16>* %6313, align 2, !tbaa !396
  %6315 = getelementptr inbounds i16, i16* %6311, i64 -15
  %6316 = bitcast i16* %6315 to <16 x i16>*
  %6317 = load <16 x i16>, <16 x i16>* %6316, align 2, !tbaa !396
  %6318 = getelementptr inbounds i16, i16* %6311, i64 -30
  %6319 = bitcast i16* %6318 to <16 x i16>*
  %6320 = load <16 x i16>, <16 x i16>* %6319, align 2, !tbaa !396
  %6321 = getelementptr inbounds i16, i16* %6311, i64 -14
  %6322 = bitcast i16* %6321 to <16 x i16>*
  %6323 = load <16 x i16>, <16 x i16>* %6322, align 2, !tbaa !396
  %6324 = getelementptr inbounds i16, i16* %6311, i64 -32
  %6325 = bitcast i16* %6324 to <16 x i16>*
  %6326 = load <16 x i16>, <16 x i16>* %6325, align 2, !tbaa !396
  %6327 = getelementptr inbounds i16, i16* %6311, i64 -16
  %6328 = bitcast i16* %6327 to <16 x i16>*
  %6329 = load <16 x i16>, <16 x i16>* %6328, align 2, !tbaa !396
  %6330 = add <16 x i16> %6320, %6314
  %6331 = add <16 x i16> %6330, %6326
  %6332 = add <16 x i16> %6323, %6317
  %6333 = add <16 x i16> %6332, %6329
  %6334 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6331, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6333, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6336 = shufflevector <16 x i16> %6334, <16 x i16> %6335, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6337 = lshr <32 x i16> %6336, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6338 = shufflevector <32 x i16> %6337, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6339 = zext i32 %.pre-phi3356 to i64
  %6340 = mul nsw i64 %96, %6339
  %6341 = add nsw i64 %98, %6340
  %6342 = getelementptr inbounds i16, i16* %blur_x, i64 %6341
  %6343 = getelementptr inbounds i16, i16* %6342, i64 -32
  %6344 = bitcast i16* %6343 to <16 x i16>*
  store <16 x i16> %6338, <16 x i16>* %6344, align 2, !tbaa !399
  %6345 = shufflevector <32 x i16> %6337, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6346 = getelementptr inbounds i16, i16* %6342, i64 -16
  %6347 = bitcast i16* %6346 to <16 x i16>*
  store <16 x i16> %6345, <16 x i16>* %6347, align 2, !tbaa !399
  %6348 = zext i32 %.pre-phi3350 to i64
  %6349 = mul nsw i64 %6348, %108
  %6350 = add nsw i64 %6349, %93
  %6351 = getelementptr inbounds i16, i16* %blur_x, i64 %6350
  %6352 = getelementptr inbounds i16, i16* %6351, i64 -32
  %6353 = bitcast i16* %6352 to <16 x i16>*
  %6354 = load <16 x i16>, <16 x i16>* %6353, align 2, !tbaa !399
  %6355 = getelementptr inbounds i16, i16* %6351, i64 -16
  %6356 = bitcast i16* %6355 to <16 x i16>*
  %6357 = load <16 x i16>, <16 x i16>* %6356, align 2, !tbaa !399
  %6358 = mul nsw i64 %6339, %108
  %6359 = add nsw i64 %6358, %93
  %6360 = getelementptr inbounds i16, i16* %blur_x, i64 %6359
  %6361 = getelementptr inbounds i16, i16* %6360, i64 -32
  %6362 = bitcast i16* %6361 to <16 x i16>*
  %6363 = load <16 x i16>, <16 x i16>* %6362, align 2, !tbaa !399
  %6364 = getelementptr inbounds i16, i16* %6360, i64 -16
  %6365 = bitcast i16* %6364 to <16 x i16>*
  %6366 = load <16 x i16>, <16 x i16>* %6365, align 2, !tbaa !399
  %6367 = zext i32 %.pre-phi3346 to i64
  %6368 = mul nsw i64 %6367, %108
  %6369 = add nsw i64 %6368, %93
  %6370 = getelementptr inbounds i16, i16* %blur_x, i64 %6369
  %6371 = getelementptr inbounds i16, i16* %6370, i64 -32
  %6372 = bitcast i16* %6371 to <16 x i16>*
  %6373 = load <16 x i16>, <16 x i16>* %6372, align 2, !tbaa !399
  %6374 = getelementptr inbounds i16, i16* %6370, i64 -16
  %6375 = bitcast i16* %6374 to <16 x i16>*
  %6376 = load <16 x i16>, <16 x i16>* %6375, align 2, !tbaa !399
  %6377 = add <16 x i16> %6363, %6354
  %6378 = add <16 x i16> %6377, %6373
  %6379 = add <16 x i16> %6366, %6357
  %6380 = add <16 x i16> %6379, %6376
  %6381 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6378, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6382 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6380, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6383 = shufflevector <16 x i16> %6381, <16 x i16> %6382, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6384 = lshr <32 x i16> %6383, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6385 = shufflevector <32 x i16> %6384, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6386 = sext i32 %a26 to i64
  %6387 = add nsw i64 %6386, 17
  %6388 = mul nsw i64 %6387, %109
  %6389 = add nsw i64 %111, %6388
  %6390 = getelementptr inbounds i16, i16* %65, i64 %6389
  %6391 = getelementptr inbounds i16, i16* %6390, i64 -32
  %6392 = bitcast i16* %6391 to <16 x i16>*
  store <16 x i16> %6385, <16 x i16>* %6392, align 2, !tbaa !401
  %6393 = shufflevector <32 x i16> %6384, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6394 = getelementptr inbounds i16, i16* %6390, i64 -16
  %6395 = bitcast i16* %6394 to <16 x i16>*
  store <16 x i16> %6393, <16 x i16>* %6395, align 2, !tbaa !401
  br label %after_bb427

"for blur_y.s0.x.x.rebased432":                   ; preds = %"for blur_y.s0.x.x.rebased432.preheader", %"consume blur_x439"
  %indvars.iv3182 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased432.preheader" ], [ %indvars.iv.next3183, %"consume blur_x439" ]
  %6396 = add nsw i64 %indvars.iv3182, %100
  %6397 = icmp slt i64 %6396, 1
  %6398 = trunc i64 %6396 to i32
  %6399 = shl nsw i32 %6398, 5
  %6400 = icmp sgt i32 %4, %6399
  %6401 = or i1 %6397, %6400
  br i1 %6401, label %"produce blur_x438", label %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge"

"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased432"
  %.pre3389 = shl nsw i64 %6396, 5
  br label %"consume blur_x439"

"end for blur_y.s0.x.x.rebased433":               ; preds = %"consume blur_x439", %after_bb427
  br i1 %101, label %"for blur_y.s0.x.x.rebased440.preheader", label %"end for blur_y.s0.x.x.rebased441", !prof !386

"for blur_y.s0.x.x.rebased440.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased433"
  %6402 = sext i32 %t1666 to i64
  %6403 = zext i32 %.pre-phi3350 to i64
  %6404 = mul nsw i64 %6403, %108
  %6405 = sub nsw i64 %6404, %95
  %6406 = zext i32 %.pre-phi3356 to i64
  %6407 = mul nsw i64 %6406, %108
  %6408 = sub nsw i64 %6407, %95
  %6409 = zext i32 %.pre-phi3346 to i64
  %6410 = mul nsw i64 %6409, %108
  %6411 = sub nsw i64 %6410, %95
  %6412 = sext i32 %a26 to i64
  %6413 = add nsw i64 %6412, 17
  %6414 = mul nsw i64 %6413, %109
  %6415 = add nsw i64 %6414, %112
  br label %"for blur_y.s0.x.x.rebased440"

"produce blur_x438":                              ; preds = %"for blur_y.s0.x.x.rebased432"
  %t944 = add nsw i32 %6399, %t1921
  %6416 = sext i32 %t944 to i64
  %6417 = getelementptr inbounds i16, i16* %read_input, i64 %6416
  %6418 = getelementptr inbounds i16, i16* %6417, i64 1
  %6419 = bitcast i16* %6418 to <16 x i16>*
  %6420 = load <16 x i16>, <16 x i16>* %6419, align 2, !tbaa !396
  %6421 = getelementptr inbounds i16, i16* %6417, i64 17
  %6422 = bitcast i16* %6421 to <16 x i16>*
  %6423 = load <16 x i16>, <16 x i16>* %6422, align 2, !tbaa !396
  %6424 = getelementptr inbounds i16, i16* %6417, i64 2
  %6425 = bitcast i16* %6424 to <16 x i16>*
  %6426 = load <16 x i16>, <16 x i16>* %6425, align 2, !tbaa !396
  %6427 = getelementptr inbounds i16, i16* %6417, i64 18
  %6428 = bitcast i16* %6427 to <16 x i16>*
  %6429 = load <16 x i16>, <16 x i16>* %6428, align 2, !tbaa !396
  %6430 = bitcast i16* %6417 to <16 x i16>*
  %6431 = load <16 x i16>, <16 x i16>* %6430, align 2, !tbaa !396
  %6432 = getelementptr inbounds i16, i16* %6417, i64 16
  %6433 = bitcast i16* %6432 to <16 x i16>*
  %6434 = load <16 x i16>, <16 x i16>* %6433, align 2, !tbaa !396
  %6435 = add <16 x i16> %6426, %6420
  %6436 = add <16 x i16> %6435, %6431
  %6437 = add <16 x i16> %6429, %6423
  %6438 = add <16 x i16> %6437, %6434
  %6439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6436, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6438, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6441 = shufflevector <16 x i16> %6439, <16 x i16> %6440, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6442 = lshr <32 x i16> %6441, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6443 = shufflevector <32 x i16> %6442, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6444 = shl nsw i64 %6396, 5
  %6445 = add nsw i64 %6444, %6297
  %6446 = getelementptr inbounds i16, i16* %blur_x, i64 %6445
  %6447 = bitcast i16* %6446 to <16 x i16>*
  store <16 x i16> %6443, <16 x i16>* %6447, align 2, !tbaa !399
  %6448 = shufflevector <32 x i16> %6442, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6449 = getelementptr inbounds i16, i16* %6446, i64 16
  %6450 = bitcast i16* %6449 to <16 x i16>*
  store <16 x i16> %6448, <16 x i16>* %6450, align 2, !tbaa !399
  br label %"consume blur_x439"

"consume blur_x439":                              ; preds = %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge", %"produce blur_x438"
  %.pre-phi3390 = phi i64 [ %.pre3389, %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge" ], [ %6444, %"produce blur_x438" ]
  %6451 = add nsw i64 %6300, %.pre-phi3390
  %6452 = getelementptr inbounds i16, i16* %blur_x, i64 %6451
  %6453 = bitcast i16* %6452 to <16 x i16>*
  %6454 = load <16 x i16>, <16 x i16>* %6453, align 2, !tbaa !399
  %6455 = getelementptr inbounds i16, i16* %6452, i64 16
  %6456 = bitcast i16* %6455 to <16 x i16>*
  %6457 = load <16 x i16>, <16 x i16>* %6456, align 2, !tbaa !399
  %6458 = add nsw i64 %6303, %.pre-phi3390
  %6459 = getelementptr inbounds i16, i16* %blur_x, i64 %6458
  %6460 = bitcast i16* %6459 to <16 x i16>*
  %6461 = load <16 x i16>, <16 x i16>* %6460, align 2, !tbaa !399
  %6462 = getelementptr inbounds i16, i16* %6459, i64 16
  %6463 = bitcast i16* %6462 to <16 x i16>*
  %6464 = load <16 x i16>, <16 x i16>* %6463, align 2, !tbaa !399
  %6465 = add nsw i64 %6306, %.pre-phi3390
  %6466 = getelementptr inbounds i16, i16* %blur_x, i64 %6465
  %6467 = bitcast i16* %6466 to <16 x i16>*
  %6468 = load <16 x i16>, <16 x i16>* %6467, align 2, !tbaa !399
  %6469 = getelementptr inbounds i16, i16* %6466, i64 16
  %6470 = bitcast i16* %6469 to <16 x i16>*
  %6471 = load <16 x i16>, <16 x i16>* %6470, align 2, !tbaa !399
  %6472 = add <16 x i16> %6461, %6454
  %6473 = add <16 x i16> %6472, %6468
  %6474 = add <16 x i16> %6464, %6457
  %6475 = add <16 x i16> %6474, %6471
  %6476 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6473, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6475, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6478 = shufflevector <16 x i16> %6476, <16 x i16> %6477, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6479 = lshr <32 x i16> %6478, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6480 = shufflevector <32 x i16> %6479, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6481 = add nsw i64 %6310, %.pre-phi3390
  %6482 = getelementptr inbounds i16, i16* %65, i64 %6481
  %6483 = bitcast i16* %6482 to <16 x i16>*
  store <16 x i16> %6480, <16 x i16>* %6483, align 2, !tbaa !401
  %6484 = shufflevector <32 x i16> %6479, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6485 = getelementptr inbounds i16, i16* %6482, i64 16
  %6486 = bitcast i16* %6485 to <16 x i16>*
  store <16 x i16> %6484, <16 x i16>* %6486, align 2, !tbaa !401
  %indvars.iv.next3183 = add nuw nsw i64 %indvars.iv3182, 1
  %.not2611 = icmp eq i64 %indvars.iv.next3183, %180
  br i1 %.not2611, label %"end for blur_y.s0.x.x.rebased433", label %"for blur_y.s0.x.x.rebased432"

"for blur_y.s0.x.x.rebased440":                   ; preds = %"for blur_y.s0.x.x.rebased440.preheader", %"consume blur_x448"
  %blur_y.s0.x.x.rebased442 = phi i32 [ %6565, %"consume blur_x448" ], [ 0, %"for blur_y.s0.x.x.rebased440.preheader" ]
  %6487 = add nsw i32 %blur_y.s0.x.x.rebased442, %t1582
  %a210 = shl nsw i32 %6487, 5
  %6488 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %6488, i32 %a210, i32 %a14
  %6489 = icmp slt i32 %6487, 1
  %6490 = icmp sgt i32 %4, %a210
  %6491 = or i1 %6489, %6490
  br i1 %6491, label %"produce blur_x446", label %"consume blur_x448"

"end for blur_y.s0.x.x.rebased441":               ; preds = %"consume blur_x448", %"end for blur_y.s0.x.x.rebased433"
  br i1 %34, label %"produce blur_x452", label %after_bb449

"produce blur_x446":                              ; preds = %"for blur_y.s0.x.x.rebased440"
  %6492 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s447 = select i1 %6492, i32 %b216, i32 %4
  %t949 = add nsw i32 %blur_x.s0.x.v1.base.s447, %t1921
  %6493 = sext i32 %t949 to i64
  %6494 = getelementptr inbounds i16, i16* %read_input, i64 %6493
  %6495 = getelementptr inbounds i16, i16* %6494, i64 1
  %6496 = bitcast i16* %6495 to <16 x i16>*
  %6497 = load <16 x i16>, <16 x i16>* %6496, align 2, !tbaa !396
  %6498 = getelementptr inbounds i16, i16* %6494, i64 17
  %6499 = bitcast i16* %6498 to <16 x i16>*
  %6500 = load <16 x i16>, <16 x i16>* %6499, align 2, !tbaa !396
  %6501 = getelementptr inbounds i16, i16* %6494, i64 2
  %6502 = bitcast i16* %6501 to <16 x i16>*
  %6503 = load <16 x i16>, <16 x i16>* %6502, align 2, !tbaa !396
  %6504 = getelementptr inbounds i16, i16* %6494, i64 18
  %6505 = bitcast i16* %6504 to <16 x i16>*
  %6506 = load <16 x i16>, <16 x i16>* %6505, align 2, !tbaa !396
  %6507 = bitcast i16* %6494 to <16 x i16>*
  %6508 = load <16 x i16>, <16 x i16>* %6507, align 2, !tbaa !396
  %6509 = getelementptr inbounds i16, i16* %6494, i64 16
  %6510 = bitcast i16* %6509 to <16 x i16>*
  %6511 = load <16 x i16>, <16 x i16>* %6510, align 2, !tbaa !396
  %6512 = add <16 x i16> %6503, %6497
  %6513 = add <16 x i16> %6512, %6508
  %6514 = add <16 x i16> %6506, %6500
  %6515 = add <16 x i16> %6514, %6511
  %6516 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6513, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6515, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6518 = shufflevector <16 x i16> %6516, <16 x i16> %6517, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6519 = lshr <32 x i16> %6518, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6520 = shufflevector <32 x i16> %6519, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6521 = sext i32 %blur_x.s0.x.v1.base.s447 to i64
  %6522 = add nsw i64 %6521, %6402
  %6523 = getelementptr inbounds i16, i16* %blur_x, i64 %6522
  %6524 = bitcast i16* %6523 to <16 x i16>*
  store <16 x i16> %6520, <16 x i16>* %6524, align 2, !tbaa !399
  %6525 = shufflevector <32 x i16> %6519, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6526 = getelementptr inbounds i16, i16* %6523, i64 16
  %6527 = bitcast i16* %6526 to <16 x i16>*
  store <16 x i16> %6525, <16 x i16>* %6527, align 2, !tbaa !399
  br label %"consume blur_x448"

"consume blur_x448":                              ; preds = %"for blur_y.s0.x.x.rebased440", %"produce blur_x446"
  %6528 = sext i32 %b216 to i64
  %6529 = add nsw i64 %6405, %6528
  %6530 = getelementptr inbounds i16, i16* %blur_x, i64 %6529
  %6531 = bitcast i16* %6530 to <16 x i16>*
  %6532 = load <16 x i16>, <16 x i16>* %6531, align 2, !tbaa !399
  %6533 = getelementptr inbounds i16, i16* %6530, i64 16
  %6534 = bitcast i16* %6533 to <16 x i16>*
  %6535 = load <16 x i16>, <16 x i16>* %6534, align 2, !tbaa !399
  %6536 = add nsw i64 %6408, %6528
  %6537 = getelementptr inbounds i16, i16* %blur_x, i64 %6536
  %6538 = bitcast i16* %6537 to <16 x i16>*
  %6539 = load <16 x i16>, <16 x i16>* %6538, align 2, !tbaa !399
  %6540 = getelementptr inbounds i16, i16* %6537, i64 16
  %6541 = bitcast i16* %6540 to <16 x i16>*
  %6542 = load <16 x i16>, <16 x i16>* %6541, align 2, !tbaa !399
  %6543 = add nsw i64 %6411, %6528
  %6544 = getelementptr inbounds i16, i16* %blur_x, i64 %6543
  %6545 = bitcast i16* %6544 to <16 x i16>*
  %6546 = load <16 x i16>, <16 x i16>* %6545, align 2, !tbaa !399
  %6547 = getelementptr inbounds i16, i16* %6544, i64 16
  %6548 = bitcast i16* %6547 to <16 x i16>*
  %6549 = load <16 x i16>, <16 x i16>* %6548, align 2, !tbaa !399
  %6550 = add <16 x i16> %6539, %6532
  %6551 = add <16 x i16> %6550, %6546
  %6552 = add <16 x i16> %6542, %6535
  %6553 = add <16 x i16> %6552, %6549
  %6554 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6551, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6555 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6553, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6556 = shufflevector <16 x i16> %6554, <16 x i16> %6555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6557 = lshr <32 x i16> %6556, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6558 = shufflevector <32 x i16> %6557, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6559 = add nsw i64 %6415, %6528
  %6560 = getelementptr inbounds i16, i16* %65, i64 %6559
  %6561 = bitcast i16* %6560 to <16 x i16>*
  store <16 x i16> %6558, <16 x i16>* %6561, align 2, !tbaa !401
  %6562 = shufflevector <32 x i16> %6557, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6563 = getelementptr inbounds i16, i16* %6560, i64 16
  %6564 = bitcast i16* %6563 to <16 x i16>*
  store <16 x i16> %6562, <16 x i16>* %6564, align 2, !tbaa !401
  %6565 = add nuw nsw i32 %blur_y.s0.x.x.rebased442, 1
  %.not2610 = icmp eq i32 %6565, %t1639
  br i1 %.not2610, label %"end for blur_y.s0.x.x.rebased441", label %"for blur_y.s0.x.x.rebased440"

after_bb449:                                      ; preds = %"end for blur_y.s0.x.x.rebased441", %"produce blur_x452"
  br i1 %99, label %"for blur_y.s0.x.x.rebased454.preheader", label %"end for blur_y.s0.x.x.rebased455", !prof !386

"for blur_y.s0.x.x.rebased454.preheader":         ; preds = %after_bb449
  %6566 = sext i32 %t1638 to i64
  %6567 = zext i32 %.pre-phi3356 to i64
  %6568 = mul nsw i64 %6567, %108
  %6569 = sub nsw i64 %6568, %95
  %6570 = zext i32 %.pre-phi to i64
  %6571 = mul nsw i64 %6570, %108
  %6572 = sub nsw i64 %6571, %95
  %6573 = zext i32 %.pre-phi3350 to i64
  %6574 = mul nsw i64 %6573, %108
  %6575 = sub nsw i64 %6574, %95
  %6576 = sext i32 %a26 to i64
  %6577 = add nsw i64 %6576, 18
  %6578 = mul nsw i64 %6577, %109
  %6579 = add nsw i64 %6578, %112
  br label %"for blur_y.s0.x.x.rebased454"

"produce blur_x452":                              ; preds = %"end for blur_y.s0.x.x.rebased441"
  %6580 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %6581 = getelementptr inbounds i16, i16* %6580, i64 -31
  %6582 = bitcast i16* %6581 to <16 x i16>*
  %6583 = load <16 x i16>, <16 x i16>* %6582, align 2, !tbaa !396
  %6584 = getelementptr inbounds i16, i16* %6580, i64 -15
  %6585 = bitcast i16* %6584 to <16 x i16>*
  %6586 = load <16 x i16>, <16 x i16>* %6585, align 2, !tbaa !396
  %6587 = getelementptr inbounds i16, i16* %6580, i64 -30
  %6588 = bitcast i16* %6587 to <16 x i16>*
  %6589 = load <16 x i16>, <16 x i16>* %6588, align 2, !tbaa !396
  %6590 = getelementptr inbounds i16, i16* %6580, i64 -14
  %6591 = bitcast i16* %6590 to <16 x i16>*
  %6592 = load <16 x i16>, <16 x i16>* %6591, align 2, !tbaa !396
  %6593 = getelementptr inbounds i16, i16* %6580, i64 -32
  %6594 = bitcast i16* %6593 to <16 x i16>*
  %6595 = load <16 x i16>, <16 x i16>* %6594, align 2, !tbaa !396
  %6596 = getelementptr inbounds i16, i16* %6580, i64 -16
  %6597 = bitcast i16* %6596 to <16 x i16>*
  %6598 = load <16 x i16>, <16 x i16>* %6597, align 2, !tbaa !396
  %6599 = add <16 x i16> %6589, %6583
  %6600 = add <16 x i16> %6599, %6595
  %6601 = add <16 x i16> %6592, %6586
  %6602 = add <16 x i16> %6601, %6598
  %6603 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6600, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6604 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6602, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6605 = shufflevector <16 x i16> %6603, <16 x i16> %6604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6606 = lshr <32 x i16> %6605, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6607 = shufflevector <32 x i16> %6606, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6608 = zext i32 %.pre-phi to i64
  %6609 = mul nsw i64 %96, %6608
  %6610 = add nsw i64 %98, %6609
  %6611 = getelementptr inbounds i16, i16* %blur_x, i64 %6610
  %6612 = getelementptr inbounds i16, i16* %6611, i64 -32
  %6613 = bitcast i16* %6612 to <16 x i16>*
  store <16 x i16> %6607, <16 x i16>* %6613, align 2, !tbaa !399
  %6614 = shufflevector <32 x i16> %6606, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6615 = getelementptr inbounds i16, i16* %6611, i64 -16
  %6616 = bitcast i16* %6615 to <16 x i16>*
  store <16 x i16> %6614, <16 x i16>* %6616, align 2, !tbaa !399
  %6617 = zext i32 %.pre-phi3356 to i64
  %6618 = mul nsw i64 %6617, %108
  %6619 = add nsw i64 %6618, %93
  %6620 = getelementptr inbounds i16, i16* %blur_x, i64 %6619
  %6621 = getelementptr inbounds i16, i16* %6620, i64 -32
  %6622 = bitcast i16* %6621 to <16 x i16>*
  %6623 = load <16 x i16>, <16 x i16>* %6622, align 2, !tbaa !399
  %6624 = getelementptr inbounds i16, i16* %6620, i64 -16
  %6625 = bitcast i16* %6624 to <16 x i16>*
  %6626 = load <16 x i16>, <16 x i16>* %6625, align 2, !tbaa !399
  %6627 = mul nsw i64 %6608, %108
  %6628 = add nsw i64 %6627, %93
  %6629 = getelementptr inbounds i16, i16* %blur_x, i64 %6628
  %6630 = getelementptr inbounds i16, i16* %6629, i64 -32
  %6631 = bitcast i16* %6630 to <16 x i16>*
  %6632 = load <16 x i16>, <16 x i16>* %6631, align 2, !tbaa !399
  %6633 = getelementptr inbounds i16, i16* %6629, i64 -16
  %6634 = bitcast i16* %6633 to <16 x i16>*
  %6635 = load <16 x i16>, <16 x i16>* %6634, align 2, !tbaa !399
  %6636 = zext i32 %.pre-phi3350 to i64
  %6637 = mul nsw i64 %6636, %108
  %6638 = add nsw i64 %6637, %93
  %6639 = getelementptr inbounds i16, i16* %blur_x, i64 %6638
  %6640 = getelementptr inbounds i16, i16* %6639, i64 -32
  %6641 = bitcast i16* %6640 to <16 x i16>*
  %6642 = load <16 x i16>, <16 x i16>* %6641, align 2, !tbaa !399
  %6643 = getelementptr inbounds i16, i16* %6639, i64 -16
  %6644 = bitcast i16* %6643 to <16 x i16>*
  %6645 = load <16 x i16>, <16 x i16>* %6644, align 2, !tbaa !399
  %6646 = add <16 x i16> %6632, %6623
  %6647 = add <16 x i16> %6646, %6642
  %6648 = add <16 x i16> %6635, %6626
  %6649 = add <16 x i16> %6648, %6645
  %6650 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6647, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6651 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6649, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6652 = shufflevector <16 x i16> %6650, <16 x i16> %6651, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6653 = lshr <32 x i16> %6652, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6654 = shufflevector <32 x i16> %6653, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6655 = sext i32 %a26 to i64
  %6656 = add nsw i64 %6655, 18
  %6657 = mul nsw i64 %6656, %109
  %6658 = add nsw i64 %111, %6657
  %6659 = getelementptr inbounds i16, i16* %65, i64 %6658
  %6660 = getelementptr inbounds i16, i16* %6659, i64 -32
  %6661 = bitcast i16* %6660 to <16 x i16>*
  store <16 x i16> %6654, <16 x i16>* %6661, align 2, !tbaa !401
  %6662 = shufflevector <32 x i16> %6653, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6663 = getelementptr inbounds i16, i16* %6659, i64 -16
  %6664 = bitcast i16* %6663 to <16 x i16>*
  store <16 x i16> %6662, <16 x i16>* %6664, align 2, !tbaa !401
  br label %after_bb449

"for blur_y.s0.x.x.rebased454":                   ; preds = %"for blur_y.s0.x.x.rebased454.preheader", %"consume blur_x461"
  %indvars.iv3185 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased454.preheader" ], [ %indvars.iv.next3186, %"consume blur_x461" ]
  %6665 = add nsw i64 %indvars.iv3185, %100
  %6666 = icmp slt i64 %6665, 1
  %6667 = trunc i64 %6665 to i32
  %6668 = shl nsw i32 %6667, 5
  %6669 = icmp sgt i32 %4, %6668
  %6670 = or i1 %6666, %6669
  br i1 %6670, label %"produce blur_x460", label %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge"

"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased454"
  %.pre3391 = shl nsw i64 %6665, 5
  br label %"consume blur_x461"

"end for blur_y.s0.x.x.rebased455":               ; preds = %"consume blur_x461", %after_bb449
  br i1 %101, label %"for blur_y.s0.x.x.rebased462.preheader", label %"end for blur_y.s0.x.x.rebased463", !prof !386

"for blur_y.s0.x.x.rebased462.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased455"
  %6671 = sext i32 %t1638 to i64
  %6672 = zext i32 %.pre-phi3356 to i64
  %6673 = mul nsw i64 %6672, %108
  %6674 = sub nsw i64 %6673, %95
  %6675 = zext i32 %.pre-phi to i64
  %6676 = mul nsw i64 %6675, %108
  %6677 = sub nsw i64 %6676, %95
  %6678 = zext i32 %.pre-phi3350 to i64
  %6679 = mul nsw i64 %6678, %108
  %6680 = sub nsw i64 %6679, %95
  %6681 = sext i32 %a26 to i64
  %6682 = add nsw i64 %6681, 18
  %6683 = mul nsw i64 %6682, %109
  %6684 = add nsw i64 %6683, %112
  br label %"for blur_y.s0.x.x.rebased462"

"produce blur_x460":                              ; preds = %"for blur_y.s0.x.x.rebased454"
  %t960 = add nsw i32 %6668, %t1937
  %6685 = sext i32 %t960 to i64
  %6686 = getelementptr inbounds i16, i16* %read_input, i64 %6685
  %6687 = getelementptr inbounds i16, i16* %6686, i64 1
  %6688 = bitcast i16* %6687 to <16 x i16>*
  %6689 = load <16 x i16>, <16 x i16>* %6688, align 2, !tbaa !396
  %6690 = getelementptr inbounds i16, i16* %6686, i64 17
  %6691 = bitcast i16* %6690 to <16 x i16>*
  %6692 = load <16 x i16>, <16 x i16>* %6691, align 2, !tbaa !396
  %6693 = getelementptr inbounds i16, i16* %6686, i64 2
  %6694 = bitcast i16* %6693 to <16 x i16>*
  %6695 = load <16 x i16>, <16 x i16>* %6694, align 2, !tbaa !396
  %6696 = getelementptr inbounds i16, i16* %6686, i64 18
  %6697 = bitcast i16* %6696 to <16 x i16>*
  %6698 = load <16 x i16>, <16 x i16>* %6697, align 2, !tbaa !396
  %6699 = bitcast i16* %6686 to <16 x i16>*
  %6700 = load <16 x i16>, <16 x i16>* %6699, align 2, !tbaa !396
  %6701 = getelementptr inbounds i16, i16* %6686, i64 16
  %6702 = bitcast i16* %6701 to <16 x i16>*
  %6703 = load <16 x i16>, <16 x i16>* %6702, align 2, !tbaa !396
  %6704 = add <16 x i16> %6695, %6689
  %6705 = add <16 x i16> %6704, %6700
  %6706 = add <16 x i16> %6698, %6692
  %6707 = add <16 x i16> %6706, %6703
  %6708 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6705, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6707, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6710 = shufflevector <16 x i16> %6708, <16 x i16> %6709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6711 = lshr <32 x i16> %6710, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6712 = shufflevector <32 x i16> %6711, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6713 = shl nsw i64 %6665, 5
  %6714 = add nsw i64 %6713, %6566
  %6715 = getelementptr inbounds i16, i16* %blur_x, i64 %6714
  %6716 = bitcast i16* %6715 to <16 x i16>*
  store <16 x i16> %6712, <16 x i16>* %6716, align 2, !tbaa !399
  %6717 = shufflevector <32 x i16> %6711, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6718 = getelementptr inbounds i16, i16* %6715, i64 16
  %6719 = bitcast i16* %6718 to <16 x i16>*
  store <16 x i16> %6717, <16 x i16>* %6719, align 2, !tbaa !399
  br label %"consume blur_x461"

"consume blur_x461":                              ; preds = %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge", %"produce blur_x460"
  %.pre-phi3392 = phi i64 [ %.pre3391, %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge" ], [ %6713, %"produce blur_x460" ]
  %6720 = add nsw i64 %6569, %.pre-phi3392
  %6721 = getelementptr inbounds i16, i16* %blur_x, i64 %6720
  %6722 = bitcast i16* %6721 to <16 x i16>*
  %6723 = load <16 x i16>, <16 x i16>* %6722, align 2, !tbaa !399
  %6724 = getelementptr inbounds i16, i16* %6721, i64 16
  %6725 = bitcast i16* %6724 to <16 x i16>*
  %6726 = load <16 x i16>, <16 x i16>* %6725, align 2, !tbaa !399
  %6727 = add nsw i64 %6572, %.pre-phi3392
  %6728 = getelementptr inbounds i16, i16* %blur_x, i64 %6727
  %6729 = bitcast i16* %6728 to <16 x i16>*
  %6730 = load <16 x i16>, <16 x i16>* %6729, align 2, !tbaa !399
  %6731 = getelementptr inbounds i16, i16* %6728, i64 16
  %6732 = bitcast i16* %6731 to <16 x i16>*
  %6733 = load <16 x i16>, <16 x i16>* %6732, align 2, !tbaa !399
  %6734 = add nsw i64 %6575, %.pre-phi3392
  %6735 = getelementptr inbounds i16, i16* %blur_x, i64 %6734
  %6736 = bitcast i16* %6735 to <16 x i16>*
  %6737 = load <16 x i16>, <16 x i16>* %6736, align 2, !tbaa !399
  %6738 = getelementptr inbounds i16, i16* %6735, i64 16
  %6739 = bitcast i16* %6738 to <16 x i16>*
  %6740 = load <16 x i16>, <16 x i16>* %6739, align 2, !tbaa !399
  %6741 = add <16 x i16> %6730, %6723
  %6742 = add <16 x i16> %6741, %6737
  %6743 = add <16 x i16> %6733, %6726
  %6744 = add <16 x i16> %6743, %6740
  %6745 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6742, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6746 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6744, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6747 = shufflevector <16 x i16> %6745, <16 x i16> %6746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6748 = lshr <32 x i16> %6747, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6749 = shufflevector <32 x i16> %6748, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6750 = add nsw i64 %6579, %.pre-phi3392
  %6751 = getelementptr inbounds i16, i16* %65, i64 %6750
  %6752 = bitcast i16* %6751 to <16 x i16>*
  store <16 x i16> %6749, <16 x i16>* %6752, align 2, !tbaa !401
  %6753 = shufflevector <32 x i16> %6748, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6754 = getelementptr inbounds i16, i16* %6751, i64 16
  %6755 = bitcast i16* %6754 to <16 x i16>*
  store <16 x i16> %6753, <16 x i16>* %6755, align 2, !tbaa !401
  %indvars.iv.next3186 = add nuw nsw i64 %indvars.iv3185, 1
  %.not2609 = icmp eq i64 %indvars.iv.next3186, %180
  br i1 %.not2609, label %"end for blur_y.s0.x.x.rebased455", label %"for blur_y.s0.x.x.rebased454"

"for blur_y.s0.x.x.rebased462":                   ; preds = %"for blur_y.s0.x.x.rebased462.preheader", %"consume blur_x470"
  %blur_y.s0.x.x.rebased464 = phi i32 [ %6834, %"consume blur_x470" ], [ 0, %"for blur_y.s0.x.x.rebased462.preheader" ]
  %6756 = add nsw i32 %blur_y.s0.x.x.rebased464, %t1582
  %a217 = shl nsw i32 %6756, 5
  %6757 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %6757, i32 %a217, i32 %a14
  %6758 = icmp slt i32 %6756, 1
  %6759 = icmp sgt i32 %4, %a217
  %6760 = or i1 %6758, %6759
  br i1 %6760, label %"produce blur_x468", label %"consume blur_x470"

"end for blur_y.s0.x.x.rebased463":               ; preds = %"consume blur_x470", %"end for blur_y.s0.x.x.rebased455"
  br i1 %34, label %"produce blur_x474", label %after_bb471

"produce blur_x468":                              ; preds = %"for blur_y.s0.x.x.rebased462"
  %6761 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s469 = select i1 %6761, i32 %b223, i32 %4
  %t965 = add nsw i32 %blur_x.s0.x.v1.base.s469, %t1937
  %6762 = sext i32 %t965 to i64
  %6763 = getelementptr inbounds i16, i16* %read_input, i64 %6762
  %6764 = getelementptr inbounds i16, i16* %6763, i64 1
  %6765 = bitcast i16* %6764 to <16 x i16>*
  %6766 = load <16 x i16>, <16 x i16>* %6765, align 2, !tbaa !396
  %6767 = getelementptr inbounds i16, i16* %6763, i64 17
  %6768 = bitcast i16* %6767 to <16 x i16>*
  %6769 = load <16 x i16>, <16 x i16>* %6768, align 2, !tbaa !396
  %6770 = getelementptr inbounds i16, i16* %6763, i64 2
  %6771 = bitcast i16* %6770 to <16 x i16>*
  %6772 = load <16 x i16>, <16 x i16>* %6771, align 2, !tbaa !396
  %6773 = getelementptr inbounds i16, i16* %6763, i64 18
  %6774 = bitcast i16* %6773 to <16 x i16>*
  %6775 = load <16 x i16>, <16 x i16>* %6774, align 2, !tbaa !396
  %6776 = bitcast i16* %6763 to <16 x i16>*
  %6777 = load <16 x i16>, <16 x i16>* %6776, align 2, !tbaa !396
  %6778 = getelementptr inbounds i16, i16* %6763, i64 16
  %6779 = bitcast i16* %6778 to <16 x i16>*
  %6780 = load <16 x i16>, <16 x i16>* %6779, align 2, !tbaa !396
  %6781 = add <16 x i16> %6772, %6766
  %6782 = add <16 x i16> %6781, %6777
  %6783 = add <16 x i16> %6775, %6769
  %6784 = add <16 x i16> %6783, %6780
  %6785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6782, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6784, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6787 = shufflevector <16 x i16> %6785, <16 x i16> %6786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6788 = lshr <32 x i16> %6787, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6789 = shufflevector <32 x i16> %6788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6790 = sext i32 %blur_x.s0.x.v1.base.s469 to i64
  %6791 = add nsw i64 %6790, %6671
  %6792 = getelementptr inbounds i16, i16* %blur_x, i64 %6791
  %6793 = bitcast i16* %6792 to <16 x i16>*
  store <16 x i16> %6789, <16 x i16>* %6793, align 2, !tbaa !399
  %6794 = shufflevector <32 x i16> %6788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6795 = getelementptr inbounds i16, i16* %6792, i64 16
  %6796 = bitcast i16* %6795 to <16 x i16>*
  store <16 x i16> %6794, <16 x i16>* %6796, align 2, !tbaa !399
  br label %"consume blur_x470"

"consume blur_x470":                              ; preds = %"for blur_y.s0.x.x.rebased462", %"produce blur_x468"
  %6797 = sext i32 %b223 to i64
  %6798 = add nsw i64 %6674, %6797
  %6799 = getelementptr inbounds i16, i16* %blur_x, i64 %6798
  %6800 = bitcast i16* %6799 to <16 x i16>*
  %6801 = load <16 x i16>, <16 x i16>* %6800, align 2, !tbaa !399
  %6802 = getelementptr inbounds i16, i16* %6799, i64 16
  %6803 = bitcast i16* %6802 to <16 x i16>*
  %6804 = load <16 x i16>, <16 x i16>* %6803, align 2, !tbaa !399
  %6805 = add nsw i64 %6677, %6797
  %6806 = getelementptr inbounds i16, i16* %blur_x, i64 %6805
  %6807 = bitcast i16* %6806 to <16 x i16>*
  %6808 = load <16 x i16>, <16 x i16>* %6807, align 2, !tbaa !399
  %6809 = getelementptr inbounds i16, i16* %6806, i64 16
  %6810 = bitcast i16* %6809 to <16 x i16>*
  %6811 = load <16 x i16>, <16 x i16>* %6810, align 2, !tbaa !399
  %6812 = add nsw i64 %6680, %6797
  %6813 = getelementptr inbounds i16, i16* %blur_x, i64 %6812
  %6814 = bitcast i16* %6813 to <16 x i16>*
  %6815 = load <16 x i16>, <16 x i16>* %6814, align 2, !tbaa !399
  %6816 = getelementptr inbounds i16, i16* %6813, i64 16
  %6817 = bitcast i16* %6816 to <16 x i16>*
  %6818 = load <16 x i16>, <16 x i16>* %6817, align 2, !tbaa !399
  %6819 = add <16 x i16> %6808, %6801
  %6820 = add <16 x i16> %6819, %6815
  %6821 = add <16 x i16> %6811, %6804
  %6822 = add <16 x i16> %6821, %6818
  %6823 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6820, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6824 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6822, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6825 = shufflevector <16 x i16> %6823, <16 x i16> %6824, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6826 = lshr <32 x i16> %6825, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6827 = shufflevector <32 x i16> %6826, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6828 = add nsw i64 %6684, %6797
  %6829 = getelementptr inbounds i16, i16* %65, i64 %6828
  %6830 = bitcast i16* %6829 to <16 x i16>*
  store <16 x i16> %6827, <16 x i16>* %6830, align 2, !tbaa !401
  %6831 = shufflevector <32 x i16> %6826, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6832 = getelementptr inbounds i16, i16* %6829, i64 16
  %6833 = bitcast i16* %6832 to <16 x i16>*
  store <16 x i16> %6831, <16 x i16>* %6833, align 2, !tbaa !401
  %6834 = add nuw nsw i32 %blur_y.s0.x.x.rebased464, 1
  %.not2608 = icmp eq i32 %6834, %t1639
  br i1 %.not2608, label %"end for blur_y.s0.x.x.rebased463", label %"for blur_y.s0.x.x.rebased462"

after_bb471:                                      ; preds = %"end for blur_y.s0.x.x.rebased463", %"produce blur_x474"
  br i1 %99, label %"for blur_y.s0.x.x.rebased476.preheader", label %"end for blur_y.s0.x.x.rebased477", !prof !386

"for blur_y.s0.x.x.rebased476.preheader":         ; preds = %after_bb471
  %6835 = sext i32 %t1644 to i64
  %6836 = zext i32 %.pre-phi to i64
  %6837 = mul nsw i64 %6836, %108
  %6838 = sub nsw i64 %6837, %95
  %6839 = zext i32 %.pre-phi3346 to i64
  %6840 = mul nsw i64 %6839, %108
  %6841 = sub nsw i64 %6840, %95
  %6842 = zext i32 %.pre-phi3356 to i64
  %6843 = mul nsw i64 %6842, %108
  %6844 = sub nsw i64 %6843, %95
  %6845 = sext i32 %a26 to i64
  %6846 = add nsw i64 %6845, 19
  %6847 = mul nsw i64 %6846, %109
  %6848 = add nsw i64 %6847, %112
  br label %"for blur_y.s0.x.x.rebased476"

"produce blur_x474":                              ; preds = %"end for blur_y.s0.x.x.rebased463"
  %6849 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %6850 = getelementptr inbounds i16, i16* %6849, i64 -31
  %6851 = bitcast i16* %6850 to <16 x i16>*
  %6852 = load <16 x i16>, <16 x i16>* %6851, align 2, !tbaa !396
  %6853 = getelementptr inbounds i16, i16* %6849, i64 -15
  %6854 = bitcast i16* %6853 to <16 x i16>*
  %6855 = load <16 x i16>, <16 x i16>* %6854, align 2, !tbaa !396
  %6856 = getelementptr inbounds i16, i16* %6849, i64 -30
  %6857 = bitcast i16* %6856 to <16 x i16>*
  %6858 = load <16 x i16>, <16 x i16>* %6857, align 2, !tbaa !396
  %6859 = getelementptr inbounds i16, i16* %6849, i64 -14
  %6860 = bitcast i16* %6859 to <16 x i16>*
  %6861 = load <16 x i16>, <16 x i16>* %6860, align 2, !tbaa !396
  %6862 = getelementptr inbounds i16, i16* %6849, i64 -32
  %6863 = bitcast i16* %6862 to <16 x i16>*
  %6864 = load <16 x i16>, <16 x i16>* %6863, align 2, !tbaa !396
  %6865 = getelementptr inbounds i16, i16* %6849, i64 -16
  %6866 = bitcast i16* %6865 to <16 x i16>*
  %6867 = load <16 x i16>, <16 x i16>* %6866, align 2, !tbaa !396
  %6868 = add <16 x i16> %6858, %6852
  %6869 = add <16 x i16> %6868, %6864
  %6870 = add <16 x i16> %6861, %6855
  %6871 = add <16 x i16> %6870, %6867
  %6872 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6869, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6871, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6874 = shufflevector <16 x i16> %6872, <16 x i16> %6873, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6875 = lshr <32 x i16> %6874, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6876 = shufflevector <32 x i16> %6875, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6877 = zext i32 %.pre-phi3346 to i64
  %6878 = mul nsw i64 %96, %6877
  %6879 = add nsw i64 %98, %6878
  %6880 = getelementptr inbounds i16, i16* %blur_x, i64 %6879
  %6881 = getelementptr inbounds i16, i16* %6880, i64 -32
  %6882 = bitcast i16* %6881 to <16 x i16>*
  store <16 x i16> %6876, <16 x i16>* %6882, align 2, !tbaa !399
  %6883 = shufflevector <32 x i16> %6875, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6884 = getelementptr inbounds i16, i16* %6880, i64 -16
  %6885 = bitcast i16* %6884 to <16 x i16>*
  store <16 x i16> %6883, <16 x i16>* %6885, align 2, !tbaa !399
  %6886 = zext i32 %.pre-phi to i64
  %6887 = mul nsw i64 %6886, %108
  %6888 = add nsw i64 %6887, %93
  %6889 = getelementptr inbounds i16, i16* %blur_x, i64 %6888
  %6890 = getelementptr inbounds i16, i16* %6889, i64 -32
  %6891 = bitcast i16* %6890 to <16 x i16>*
  %6892 = load <16 x i16>, <16 x i16>* %6891, align 2, !tbaa !399
  %6893 = getelementptr inbounds i16, i16* %6889, i64 -16
  %6894 = bitcast i16* %6893 to <16 x i16>*
  %6895 = load <16 x i16>, <16 x i16>* %6894, align 2, !tbaa !399
  %6896 = mul nsw i64 %6877, %108
  %6897 = add nsw i64 %6896, %93
  %6898 = getelementptr inbounds i16, i16* %blur_x, i64 %6897
  %6899 = getelementptr inbounds i16, i16* %6898, i64 -32
  %6900 = bitcast i16* %6899 to <16 x i16>*
  %6901 = load <16 x i16>, <16 x i16>* %6900, align 2, !tbaa !399
  %6902 = getelementptr inbounds i16, i16* %6898, i64 -16
  %6903 = bitcast i16* %6902 to <16 x i16>*
  %6904 = load <16 x i16>, <16 x i16>* %6903, align 2, !tbaa !399
  %6905 = zext i32 %.pre-phi3356 to i64
  %6906 = mul nsw i64 %6905, %108
  %6907 = add nsw i64 %6906, %93
  %6908 = getelementptr inbounds i16, i16* %blur_x, i64 %6907
  %6909 = getelementptr inbounds i16, i16* %6908, i64 -32
  %6910 = bitcast i16* %6909 to <16 x i16>*
  %6911 = load <16 x i16>, <16 x i16>* %6910, align 2, !tbaa !399
  %6912 = getelementptr inbounds i16, i16* %6908, i64 -16
  %6913 = bitcast i16* %6912 to <16 x i16>*
  %6914 = load <16 x i16>, <16 x i16>* %6913, align 2, !tbaa !399
  %6915 = add <16 x i16> %6901, %6892
  %6916 = add <16 x i16> %6915, %6911
  %6917 = add <16 x i16> %6904, %6895
  %6918 = add <16 x i16> %6917, %6914
  %6919 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6916, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6920 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6918, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6921 = shufflevector <16 x i16> %6919, <16 x i16> %6920, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6922 = lshr <32 x i16> %6921, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6923 = shufflevector <32 x i16> %6922, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6924 = sext i32 %a26 to i64
  %6925 = add nsw i64 %6924, 19
  %6926 = mul nsw i64 %6925, %109
  %6927 = add nsw i64 %111, %6926
  %6928 = getelementptr inbounds i16, i16* %65, i64 %6927
  %6929 = getelementptr inbounds i16, i16* %6928, i64 -32
  %6930 = bitcast i16* %6929 to <16 x i16>*
  store <16 x i16> %6923, <16 x i16>* %6930, align 2, !tbaa !401
  %6931 = shufflevector <32 x i16> %6922, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6932 = getelementptr inbounds i16, i16* %6928, i64 -16
  %6933 = bitcast i16* %6932 to <16 x i16>*
  store <16 x i16> %6931, <16 x i16>* %6933, align 2, !tbaa !401
  br label %after_bb471

"for blur_y.s0.x.x.rebased476":                   ; preds = %"for blur_y.s0.x.x.rebased476.preheader", %"consume blur_x483"
  %indvars.iv3188 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased476.preheader" ], [ %indvars.iv.next3189, %"consume blur_x483" ]
  %6934 = add nsw i64 %indvars.iv3188, %100
  %6935 = icmp slt i64 %6934, 1
  %6936 = trunc i64 %6934 to i32
  %6937 = shl nsw i32 %6936, 5
  %6938 = icmp sgt i32 %4, %6937
  %6939 = or i1 %6935, %6938
  br i1 %6939, label %"produce blur_x482", label %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge"

"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased476"
  %.pre3393 = shl nsw i64 %6934, 5
  br label %"consume blur_x483"

"end for blur_y.s0.x.x.rebased477":               ; preds = %"consume blur_x483", %after_bb471
  br i1 %101, label %"for blur_y.s0.x.x.rebased484.preheader", label %"end for blur_y.s0.x.x.rebased485", !prof !386

"for blur_y.s0.x.x.rebased484.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased477"
  %6940 = sext i32 %t1644 to i64
  %6941 = zext i32 %.pre-phi to i64
  %6942 = mul nsw i64 %6941, %108
  %6943 = sub nsw i64 %6942, %95
  %6944 = zext i32 %.pre-phi3346 to i64
  %6945 = mul nsw i64 %6944, %108
  %6946 = sub nsw i64 %6945, %95
  %6947 = zext i32 %.pre-phi3356 to i64
  %6948 = mul nsw i64 %6947, %108
  %6949 = sub nsw i64 %6948, %95
  %6950 = sext i32 %a26 to i64
  %6951 = add nsw i64 %6950, 19
  %6952 = mul nsw i64 %6951, %109
  %6953 = add nsw i64 %6952, %112
  br label %"for blur_y.s0.x.x.rebased484"

"produce blur_x482":                              ; preds = %"for blur_y.s0.x.x.rebased476"
  %t976 = add nsw i32 %6937, %t1953
  %6954 = sext i32 %t976 to i64
  %6955 = getelementptr inbounds i16, i16* %read_input, i64 %6954
  %6956 = getelementptr inbounds i16, i16* %6955, i64 1
  %6957 = bitcast i16* %6956 to <16 x i16>*
  %6958 = load <16 x i16>, <16 x i16>* %6957, align 2, !tbaa !396
  %6959 = getelementptr inbounds i16, i16* %6955, i64 17
  %6960 = bitcast i16* %6959 to <16 x i16>*
  %6961 = load <16 x i16>, <16 x i16>* %6960, align 2, !tbaa !396
  %6962 = getelementptr inbounds i16, i16* %6955, i64 2
  %6963 = bitcast i16* %6962 to <16 x i16>*
  %6964 = load <16 x i16>, <16 x i16>* %6963, align 2, !tbaa !396
  %6965 = getelementptr inbounds i16, i16* %6955, i64 18
  %6966 = bitcast i16* %6965 to <16 x i16>*
  %6967 = load <16 x i16>, <16 x i16>* %6966, align 2, !tbaa !396
  %6968 = bitcast i16* %6955 to <16 x i16>*
  %6969 = load <16 x i16>, <16 x i16>* %6968, align 2, !tbaa !396
  %6970 = getelementptr inbounds i16, i16* %6955, i64 16
  %6971 = bitcast i16* %6970 to <16 x i16>*
  %6972 = load <16 x i16>, <16 x i16>* %6971, align 2, !tbaa !396
  %6973 = add <16 x i16> %6964, %6958
  %6974 = add <16 x i16> %6973, %6969
  %6975 = add <16 x i16> %6967, %6961
  %6976 = add <16 x i16> %6975, %6972
  %6977 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6974, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6976, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6979 = shufflevector <16 x i16> %6977, <16 x i16> %6978, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6980 = lshr <32 x i16> %6979, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6981 = shufflevector <32 x i16> %6980, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6982 = shl nsw i64 %6934, 5
  %6983 = add nsw i64 %6982, %6835
  %6984 = getelementptr inbounds i16, i16* %blur_x, i64 %6983
  %6985 = bitcast i16* %6984 to <16 x i16>*
  store <16 x i16> %6981, <16 x i16>* %6985, align 2, !tbaa !399
  %6986 = shufflevector <32 x i16> %6980, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6987 = getelementptr inbounds i16, i16* %6984, i64 16
  %6988 = bitcast i16* %6987 to <16 x i16>*
  store <16 x i16> %6986, <16 x i16>* %6988, align 2, !tbaa !399
  br label %"consume blur_x483"

"consume blur_x483":                              ; preds = %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge", %"produce blur_x482"
  %.pre-phi3394 = phi i64 [ %.pre3393, %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge" ], [ %6982, %"produce blur_x482" ]
  %6989 = add nsw i64 %6838, %.pre-phi3394
  %6990 = getelementptr inbounds i16, i16* %blur_x, i64 %6989
  %6991 = bitcast i16* %6990 to <16 x i16>*
  %6992 = load <16 x i16>, <16 x i16>* %6991, align 2, !tbaa !399
  %6993 = getelementptr inbounds i16, i16* %6990, i64 16
  %6994 = bitcast i16* %6993 to <16 x i16>*
  %6995 = load <16 x i16>, <16 x i16>* %6994, align 2, !tbaa !399
  %6996 = add nsw i64 %6841, %.pre-phi3394
  %6997 = getelementptr inbounds i16, i16* %blur_x, i64 %6996
  %6998 = bitcast i16* %6997 to <16 x i16>*
  %6999 = load <16 x i16>, <16 x i16>* %6998, align 2, !tbaa !399
  %7000 = getelementptr inbounds i16, i16* %6997, i64 16
  %7001 = bitcast i16* %7000 to <16 x i16>*
  %7002 = load <16 x i16>, <16 x i16>* %7001, align 2, !tbaa !399
  %7003 = add nsw i64 %6844, %.pre-phi3394
  %7004 = getelementptr inbounds i16, i16* %blur_x, i64 %7003
  %7005 = bitcast i16* %7004 to <16 x i16>*
  %7006 = load <16 x i16>, <16 x i16>* %7005, align 2, !tbaa !399
  %7007 = getelementptr inbounds i16, i16* %7004, i64 16
  %7008 = bitcast i16* %7007 to <16 x i16>*
  %7009 = load <16 x i16>, <16 x i16>* %7008, align 2, !tbaa !399
  %7010 = add <16 x i16> %6999, %6992
  %7011 = add <16 x i16> %7010, %7006
  %7012 = add <16 x i16> %7002, %6995
  %7013 = add <16 x i16> %7012, %7009
  %7014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7011, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7013, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7016 = shufflevector <16 x i16> %7014, <16 x i16> %7015, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7017 = lshr <32 x i16> %7016, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7018 = shufflevector <32 x i16> %7017, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7019 = add nsw i64 %6848, %.pre-phi3394
  %7020 = getelementptr inbounds i16, i16* %65, i64 %7019
  %7021 = bitcast i16* %7020 to <16 x i16>*
  store <16 x i16> %7018, <16 x i16>* %7021, align 2, !tbaa !401
  %7022 = shufflevector <32 x i16> %7017, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7023 = getelementptr inbounds i16, i16* %7020, i64 16
  %7024 = bitcast i16* %7023 to <16 x i16>*
  store <16 x i16> %7022, <16 x i16>* %7024, align 2, !tbaa !401
  %indvars.iv.next3189 = add nuw nsw i64 %indvars.iv3188, 1
  %.not2607 = icmp eq i64 %indvars.iv.next3189, %180
  br i1 %.not2607, label %"end for blur_y.s0.x.x.rebased477", label %"for blur_y.s0.x.x.rebased476"

"for blur_y.s0.x.x.rebased484":                   ; preds = %"for blur_y.s0.x.x.rebased484.preheader", %"consume blur_x492"
  %blur_y.s0.x.x.rebased486 = phi i32 [ %7103, %"consume blur_x492" ], [ 0, %"for blur_y.s0.x.x.rebased484.preheader" ]
  %7025 = add nsw i32 %blur_y.s0.x.x.rebased486, %t1582
  %a224 = shl nsw i32 %7025, 5
  %7026 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %7026, i32 %a224, i32 %a14
  %7027 = icmp slt i32 %7025, 1
  %7028 = icmp sgt i32 %4, %a224
  %7029 = or i1 %7027, %7028
  br i1 %7029, label %"produce blur_x490", label %"consume blur_x492"

"end for blur_y.s0.x.x.rebased485":               ; preds = %"consume blur_x492", %"end for blur_y.s0.x.x.rebased477"
  br i1 %34, label %"produce blur_x496", label %after_bb493

"produce blur_x490":                              ; preds = %"for blur_y.s0.x.x.rebased484"
  %7030 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s491 = select i1 %7030, i32 %b230, i32 %4
  %t981 = add nsw i32 %blur_x.s0.x.v1.base.s491, %t1953
  %7031 = sext i32 %t981 to i64
  %7032 = getelementptr inbounds i16, i16* %read_input, i64 %7031
  %7033 = getelementptr inbounds i16, i16* %7032, i64 1
  %7034 = bitcast i16* %7033 to <16 x i16>*
  %7035 = load <16 x i16>, <16 x i16>* %7034, align 2, !tbaa !396
  %7036 = getelementptr inbounds i16, i16* %7032, i64 17
  %7037 = bitcast i16* %7036 to <16 x i16>*
  %7038 = load <16 x i16>, <16 x i16>* %7037, align 2, !tbaa !396
  %7039 = getelementptr inbounds i16, i16* %7032, i64 2
  %7040 = bitcast i16* %7039 to <16 x i16>*
  %7041 = load <16 x i16>, <16 x i16>* %7040, align 2, !tbaa !396
  %7042 = getelementptr inbounds i16, i16* %7032, i64 18
  %7043 = bitcast i16* %7042 to <16 x i16>*
  %7044 = load <16 x i16>, <16 x i16>* %7043, align 2, !tbaa !396
  %7045 = bitcast i16* %7032 to <16 x i16>*
  %7046 = load <16 x i16>, <16 x i16>* %7045, align 2, !tbaa !396
  %7047 = getelementptr inbounds i16, i16* %7032, i64 16
  %7048 = bitcast i16* %7047 to <16 x i16>*
  %7049 = load <16 x i16>, <16 x i16>* %7048, align 2, !tbaa !396
  %7050 = add <16 x i16> %7041, %7035
  %7051 = add <16 x i16> %7050, %7046
  %7052 = add <16 x i16> %7044, %7038
  %7053 = add <16 x i16> %7052, %7049
  %7054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7051, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7053, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7056 = shufflevector <16 x i16> %7054, <16 x i16> %7055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7057 = lshr <32 x i16> %7056, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7058 = shufflevector <32 x i16> %7057, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7059 = sext i32 %blur_x.s0.x.v1.base.s491 to i64
  %7060 = add nsw i64 %7059, %6940
  %7061 = getelementptr inbounds i16, i16* %blur_x, i64 %7060
  %7062 = bitcast i16* %7061 to <16 x i16>*
  store <16 x i16> %7058, <16 x i16>* %7062, align 2, !tbaa !399
  %7063 = shufflevector <32 x i16> %7057, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7064 = getelementptr inbounds i16, i16* %7061, i64 16
  %7065 = bitcast i16* %7064 to <16 x i16>*
  store <16 x i16> %7063, <16 x i16>* %7065, align 2, !tbaa !399
  br label %"consume blur_x492"

"consume blur_x492":                              ; preds = %"for blur_y.s0.x.x.rebased484", %"produce blur_x490"
  %7066 = sext i32 %b230 to i64
  %7067 = add nsw i64 %6943, %7066
  %7068 = getelementptr inbounds i16, i16* %blur_x, i64 %7067
  %7069 = bitcast i16* %7068 to <16 x i16>*
  %7070 = load <16 x i16>, <16 x i16>* %7069, align 2, !tbaa !399
  %7071 = getelementptr inbounds i16, i16* %7068, i64 16
  %7072 = bitcast i16* %7071 to <16 x i16>*
  %7073 = load <16 x i16>, <16 x i16>* %7072, align 2, !tbaa !399
  %7074 = add nsw i64 %6946, %7066
  %7075 = getelementptr inbounds i16, i16* %blur_x, i64 %7074
  %7076 = bitcast i16* %7075 to <16 x i16>*
  %7077 = load <16 x i16>, <16 x i16>* %7076, align 2, !tbaa !399
  %7078 = getelementptr inbounds i16, i16* %7075, i64 16
  %7079 = bitcast i16* %7078 to <16 x i16>*
  %7080 = load <16 x i16>, <16 x i16>* %7079, align 2, !tbaa !399
  %7081 = add nsw i64 %6949, %7066
  %7082 = getelementptr inbounds i16, i16* %blur_x, i64 %7081
  %7083 = bitcast i16* %7082 to <16 x i16>*
  %7084 = load <16 x i16>, <16 x i16>* %7083, align 2, !tbaa !399
  %7085 = getelementptr inbounds i16, i16* %7082, i64 16
  %7086 = bitcast i16* %7085 to <16 x i16>*
  %7087 = load <16 x i16>, <16 x i16>* %7086, align 2, !tbaa !399
  %7088 = add <16 x i16> %7077, %7070
  %7089 = add <16 x i16> %7088, %7084
  %7090 = add <16 x i16> %7080, %7073
  %7091 = add <16 x i16> %7090, %7087
  %7092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7089, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7093 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7091, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7094 = shufflevector <16 x i16> %7092, <16 x i16> %7093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7095 = lshr <32 x i16> %7094, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7096 = shufflevector <32 x i16> %7095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7097 = add nsw i64 %6953, %7066
  %7098 = getelementptr inbounds i16, i16* %65, i64 %7097
  %7099 = bitcast i16* %7098 to <16 x i16>*
  store <16 x i16> %7096, <16 x i16>* %7099, align 2, !tbaa !401
  %7100 = shufflevector <32 x i16> %7095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7101 = getelementptr inbounds i16, i16* %7098, i64 16
  %7102 = bitcast i16* %7101 to <16 x i16>*
  store <16 x i16> %7100, <16 x i16>* %7102, align 2, !tbaa !401
  %7103 = add nuw nsw i32 %blur_y.s0.x.x.rebased486, 1
  %.not2606 = icmp eq i32 %7103, %t1639
  br i1 %.not2606, label %"end for blur_y.s0.x.x.rebased485", label %"for blur_y.s0.x.x.rebased484"

after_bb493:                                      ; preds = %"end for blur_y.s0.x.x.rebased485", %"produce blur_x496"
  br i1 %99, label %"for blur_y.s0.x.x.rebased498.preheader", label %"end for blur_y.s0.x.x.rebased499", !prof !386

"for blur_y.s0.x.x.rebased498.preheader":         ; preds = %after_bb493
  %7104 = sext i32 %t1650 to i64
  %7105 = zext i32 %.pre-phi3346 to i64
  %7106 = mul nsw i64 %7105, %108
  %7107 = sub nsw i64 %7106, %95
  %7108 = zext i32 %.pre-phi3350 to i64
  %7109 = mul nsw i64 %7108, %108
  %7110 = sub nsw i64 %7109, %95
  %7111 = zext i32 %.pre-phi to i64
  %7112 = mul nsw i64 %7111, %108
  %7113 = sub nsw i64 %7112, %95
  %7114 = sext i32 %a26 to i64
  %7115 = add nsw i64 %7114, 20
  %7116 = mul nsw i64 %7115, %109
  %7117 = add nsw i64 %7116, %112
  br label %"for blur_y.s0.x.x.rebased498"

"produce blur_x496":                              ; preds = %"end for blur_y.s0.x.x.rebased485"
  %7118 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %7119 = getelementptr inbounds i16, i16* %7118, i64 -31
  %7120 = bitcast i16* %7119 to <16 x i16>*
  %7121 = load <16 x i16>, <16 x i16>* %7120, align 2, !tbaa !396
  %7122 = getelementptr inbounds i16, i16* %7118, i64 -15
  %7123 = bitcast i16* %7122 to <16 x i16>*
  %7124 = load <16 x i16>, <16 x i16>* %7123, align 2, !tbaa !396
  %7125 = getelementptr inbounds i16, i16* %7118, i64 -30
  %7126 = bitcast i16* %7125 to <16 x i16>*
  %7127 = load <16 x i16>, <16 x i16>* %7126, align 2, !tbaa !396
  %7128 = getelementptr inbounds i16, i16* %7118, i64 -14
  %7129 = bitcast i16* %7128 to <16 x i16>*
  %7130 = load <16 x i16>, <16 x i16>* %7129, align 2, !tbaa !396
  %7131 = getelementptr inbounds i16, i16* %7118, i64 -32
  %7132 = bitcast i16* %7131 to <16 x i16>*
  %7133 = load <16 x i16>, <16 x i16>* %7132, align 2, !tbaa !396
  %7134 = getelementptr inbounds i16, i16* %7118, i64 -16
  %7135 = bitcast i16* %7134 to <16 x i16>*
  %7136 = load <16 x i16>, <16 x i16>* %7135, align 2, !tbaa !396
  %7137 = add <16 x i16> %7127, %7121
  %7138 = add <16 x i16> %7137, %7133
  %7139 = add <16 x i16> %7130, %7124
  %7140 = add <16 x i16> %7139, %7136
  %7141 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7138, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7142 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7140, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7143 = shufflevector <16 x i16> %7141, <16 x i16> %7142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7144 = lshr <32 x i16> %7143, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7145 = shufflevector <32 x i16> %7144, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7146 = zext i32 %.pre-phi3350 to i64
  %7147 = mul nsw i64 %96, %7146
  %7148 = add nsw i64 %98, %7147
  %7149 = getelementptr inbounds i16, i16* %blur_x, i64 %7148
  %7150 = getelementptr inbounds i16, i16* %7149, i64 -32
  %7151 = bitcast i16* %7150 to <16 x i16>*
  store <16 x i16> %7145, <16 x i16>* %7151, align 2, !tbaa !399
  %7152 = shufflevector <32 x i16> %7144, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7153 = getelementptr inbounds i16, i16* %7149, i64 -16
  %7154 = bitcast i16* %7153 to <16 x i16>*
  store <16 x i16> %7152, <16 x i16>* %7154, align 2, !tbaa !399
  %7155 = zext i32 %.pre-phi3346 to i64
  %7156 = mul nsw i64 %7155, %108
  %7157 = add nsw i64 %7156, %93
  %7158 = getelementptr inbounds i16, i16* %blur_x, i64 %7157
  %7159 = getelementptr inbounds i16, i16* %7158, i64 -32
  %7160 = bitcast i16* %7159 to <16 x i16>*
  %7161 = load <16 x i16>, <16 x i16>* %7160, align 2, !tbaa !399
  %7162 = getelementptr inbounds i16, i16* %7158, i64 -16
  %7163 = bitcast i16* %7162 to <16 x i16>*
  %7164 = load <16 x i16>, <16 x i16>* %7163, align 2, !tbaa !399
  %7165 = mul nsw i64 %7146, %108
  %7166 = add nsw i64 %7165, %93
  %7167 = getelementptr inbounds i16, i16* %blur_x, i64 %7166
  %7168 = getelementptr inbounds i16, i16* %7167, i64 -32
  %7169 = bitcast i16* %7168 to <16 x i16>*
  %7170 = load <16 x i16>, <16 x i16>* %7169, align 2, !tbaa !399
  %7171 = getelementptr inbounds i16, i16* %7167, i64 -16
  %7172 = bitcast i16* %7171 to <16 x i16>*
  %7173 = load <16 x i16>, <16 x i16>* %7172, align 2, !tbaa !399
  %7174 = zext i32 %.pre-phi to i64
  %7175 = mul nsw i64 %7174, %108
  %7176 = add nsw i64 %7175, %93
  %7177 = getelementptr inbounds i16, i16* %blur_x, i64 %7176
  %7178 = getelementptr inbounds i16, i16* %7177, i64 -32
  %7179 = bitcast i16* %7178 to <16 x i16>*
  %7180 = load <16 x i16>, <16 x i16>* %7179, align 2, !tbaa !399
  %7181 = getelementptr inbounds i16, i16* %7177, i64 -16
  %7182 = bitcast i16* %7181 to <16 x i16>*
  %7183 = load <16 x i16>, <16 x i16>* %7182, align 2, !tbaa !399
  %7184 = add <16 x i16> %7170, %7161
  %7185 = add <16 x i16> %7184, %7180
  %7186 = add <16 x i16> %7173, %7164
  %7187 = add <16 x i16> %7186, %7183
  %7188 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7185, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7189 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7187, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7190 = shufflevector <16 x i16> %7188, <16 x i16> %7189, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7191 = lshr <32 x i16> %7190, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7192 = shufflevector <32 x i16> %7191, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7193 = sext i32 %a26 to i64
  %7194 = add nsw i64 %7193, 20
  %7195 = mul nsw i64 %7194, %109
  %7196 = add nsw i64 %111, %7195
  %7197 = getelementptr inbounds i16, i16* %65, i64 %7196
  %7198 = getelementptr inbounds i16, i16* %7197, i64 -32
  %7199 = bitcast i16* %7198 to <16 x i16>*
  store <16 x i16> %7192, <16 x i16>* %7199, align 2, !tbaa !401
  %7200 = shufflevector <32 x i16> %7191, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7201 = getelementptr inbounds i16, i16* %7197, i64 -16
  %7202 = bitcast i16* %7201 to <16 x i16>*
  store <16 x i16> %7200, <16 x i16>* %7202, align 2, !tbaa !401
  br label %after_bb493

"for blur_y.s0.x.x.rebased498":                   ; preds = %"for blur_y.s0.x.x.rebased498.preheader", %"consume blur_x505"
  %indvars.iv3191 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased498.preheader" ], [ %indvars.iv.next3192, %"consume blur_x505" ]
  %7203 = add nsw i64 %indvars.iv3191, %100
  %7204 = icmp slt i64 %7203, 1
  %7205 = trunc i64 %7203 to i32
  %7206 = shl nsw i32 %7205, 5
  %7207 = icmp sgt i32 %4, %7206
  %7208 = or i1 %7204, %7207
  br i1 %7208, label %"produce blur_x504", label %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge"

"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased498"
  %.pre3395 = shl nsw i64 %7203, 5
  br label %"consume blur_x505"

"end for blur_y.s0.x.x.rebased499":               ; preds = %"consume blur_x505", %after_bb493
  br i1 %101, label %"for blur_y.s0.x.x.rebased506.preheader", label %"end for blur_y.s0.x.x.rebased507", !prof !386

"for blur_y.s0.x.x.rebased506.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased499"
  %7209 = sext i32 %t1650 to i64
  %7210 = zext i32 %.pre-phi3346 to i64
  %7211 = mul nsw i64 %7210, %108
  %7212 = sub nsw i64 %7211, %95
  %7213 = zext i32 %.pre-phi3350 to i64
  %7214 = mul nsw i64 %7213, %108
  %7215 = sub nsw i64 %7214, %95
  %7216 = zext i32 %.pre-phi to i64
  %7217 = mul nsw i64 %7216, %108
  %7218 = sub nsw i64 %7217, %95
  %7219 = sext i32 %a26 to i64
  %7220 = add nsw i64 %7219, 20
  %7221 = mul nsw i64 %7220, %109
  %7222 = add nsw i64 %7221, %112
  br label %"for blur_y.s0.x.x.rebased506"

"produce blur_x504":                              ; preds = %"for blur_y.s0.x.x.rebased498"
  %t992 = add nsw i32 %7206, %t1969
  %7223 = sext i32 %t992 to i64
  %7224 = getelementptr inbounds i16, i16* %read_input, i64 %7223
  %7225 = getelementptr inbounds i16, i16* %7224, i64 1
  %7226 = bitcast i16* %7225 to <16 x i16>*
  %7227 = load <16 x i16>, <16 x i16>* %7226, align 2, !tbaa !396
  %7228 = getelementptr inbounds i16, i16* %7224, i64 17
  %7229 = bitcast i16* %7228 to <16 x i16>*
  %7230 = load <16 x i16>, <16 x i16>* %7229, align 2, !tbaa !396
  %7231 = getelementptr inbounds i16, i16* %7224, i64 2
  %7232 = bitcast i16* %7231 to <16 x i16>*
  %7233 = load <16 x i16>, <16 x i16>* %7232, align 2, !tbaa !396
  %7234 = getelementptr inbounds i16, i16* %7224, i64 18
  %7235 = bitcast i16* %7234 to <16 x i16>*
  %7236 = load <16 x i16>, <16 x i16>* %7235, align 2, !tbaa !396
  %7237 = bitcast i16* %7224 to <16 x i16>*
  %7238 = load <16 x i16>, <16 x i16>* %7237, align 2, !tbaa !396
  %7239 = getelementptr inbounds i16, i16* %7224, i64 16
  %7240 = bitcast i16* %7239 to <16 x i16>*
  %7241 = load <16 x i16>, <16 x i16>* %7240, align 2, !tbaa !396
  %7242 = add <16 x i16> %7233, %7227
  %7243 = add <16 x i16> %7242, %7238
  %7244 = add <16 x i16> %7236, %7230
  %7245 = add <16 x i16> %7244, %7241
  %7246 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7243, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7247 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7245, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7248 = shufflevector <16 x i16> %7246, <16 x i16> %7247, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7249 = lshr <32 x i16> %7248, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7250 = shufflevector <32 x i16> %7249, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7251 = shl nsw i64 %7203, 5
  %7252 = add nsw i64 %7251, %7104
  %7253 = getelementptr inbounds i16, i16* %blur_x, i64 %7252
  %7254 = bitcast i16* %7253 to <16 x i16>*
  store <16 x i16> %7250, <16 x i16>* %7254, align 2, !tbaa !399
  %7255 = shufflevector <32 x i16> %7249, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7256 = getelementptr inbounds i16, i16* %7253, i64 16
  %7257 = bitcast i16* %7256 to <16 x i16>*
  store <16 x i16> %7255, <16 x i16>* %7257, align 2, !tbaa !399
  br label %"consume blur_x505"

"consume blur_x505":                              ; preds = %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge", %"produce blur_x504"
  %.pre-phi3396 = phi i64 [ %.pre3395, %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge" ], [ %7251, %"produce blur_x504" ]
  %7258 = add nsw i64 %7107, %.pre-phi3396
  %7259 = getelementptr inbounds i16, i16* %blur_x, i64 %7258
  %7260 = bitcast i16* %7259 to <16 x i16>*
  %7261 = load <16 x i16>, <16 x i16>* %7260, align 2, !tbaa !399
  %7262 = getelementptr inbounds i16, i16* %7259, i64 16
  %7263 = bitcast i16* %7262 to <16 x i16>*
  %7264 = load <16 x i16>, <16 x i16>* %7263, align 2, !tbaa !399
  %7265 = add nsw i64 %7110, %.pre-phi3396
  %7266 = getelementptr inbounds i16, i16* %blur_x, i64 %7265
  %7267 = bitcast i16* %7266 to <16 x i16>*
  %7268 = load <16 x i16>, <16 x i16>* %7267, align 2, !tbaa !399
  %7269 = getelementptr inbounds i16, i16* %7266, i64 16
  %7270 = bitcast i16* %7269 to <16 x i16>*
  %7271 = load <16 x i16>, <16 x i16>* %7270, align 2, !tbaa !399
  %7272 = add nsw i64 %7113, %.pre-phi3396
  %7273 = getelementptr inbounds i16, i16* %blur_x, i64 %7272
  %7274 = bitcast i16* %7273 to <16 x i16>*
  %7275 = load <16 x i16>, <16 x i16>* %7274, align 2, !tbaa !399
  %7276 = getelementptr inbounds i16, i16* %7273, i64 16
  %7277 = bitcast i16* %7276 to <16 x i16>*
  %7278 = load <16 x i16>, <16 x i16>* %7277, align 2, !tbaa !399
  %7279 = add <16 x i16> %7268, %7261
  %7280 = add <16 x i16> %7279, %7275
  %7281 = add <16 x i16> %7271, %7264
  %7282 = add <16 x i16> %7281, %7278
  %7283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7280, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7282, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7285 = shufflevector <16 x i16> %7283, <16 x i16> %7284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7286 = lshr <32 x i16> %7285, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7287 = shufflevector <32 x i16> %7286, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7288 = add nsw i64 %7117, %.pre-phi3396
  %7289 = getelementptr inbounds i16, i16* %65, i64 %7288
  %7290 = bitcast i16* %7289 to <16 x i16>*
  store <16 x i16> %7287, <16 x i16>* %7290, align 2, !tbaa !401
  %7291 = shufflevector <32 x i16> %7286, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7292 = getelementptr inbounds i16, i16* %7289, i64 16
  %7293 = bitcast i16* %7292 to <16 x i16>*
  store <16 x i16> %7291, <16 x i16>* %7293, align 2, !tbaa !401
  %indvars.iv.next3192 = add nuw nsw i64 %indvars.iv3191, 1
  %.not2605 = icmp eq i64 %indvars.iv.next3192, %180
  br i1 %.not2605, label %"end for blur_y.s0.x.x.rebased499", label %"for blur_y.s0.x.x.rebased498"

"for blur_y.s0.x.x.rebased506":                   ; preds = %"for blur_y.s0.x.x.rebased506.preheader", %"consume blur_x514"
  %blur_y.s0.x.x.rebased508 = phi i32 [ %7372, %"consume blur_x514" ], [ 0, %"for blur_y.s0.x.x.rebased506.preheader" ]
  %7294 = add nsw i32 %blur_y.s0.x.x.rebased508, %t1582
  %a231 = shl nsw i32 %7294, 5
  %7295 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %7295, i32 %a231, i32 %a14
  %7296 = icmp slt i32 %7294, 1
  %7297 = icmp sgt i32 %4, %a231
  %7298 = or i1 %7296, %7297
  br i1 %7298, label %"produce blur_x512", label %"consume blur_x514"

"end for blur_y.s0.x.x.rebased507":               ; preds = %"consume blur_x514", %"end for blur_y.s0.x.x.rebased499"
  br i1 %34, label %"produce blur_x518", label %after_bb515

"produce blur_x512":                              ; preds = %"for blur_y.s0.x.x.rebased506"
  %7299 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s513 = select i1 %7299, i32 %b237, i32 %4
  %t997 = add nsw i32 %blur_x.s0.x.v1.base.s513, %t1969
  %7300 = sext i32 %t997 to i64
  %7301 = getelementptr inbounds i16, i16* %read_input, i64 %7300
  %7302 = getelementptr inbounds i16, i16* %7301, i64 1
  %7303 = bitcast i16* %7302 to <16 x i16>*
  %7304 = load <16 x i16>, <16 x i16>* %7303, align 2, !tbaa !396
  %7305 = getelementptr inbounds i16, i16* %7301, i64 17
  %7306 = bitcast i16* %7305 to <16 x i16>*
  %7307 = load <16 x i16>, <16 x i16>* %7306, align 2, !tbaa !396
  %7308 = getelementptr inbounds i16, i16* %7301, i64 2
  %7309 = bitcast i16* %7308 to <16 x i16>*
  %7310 = load <16 x i16>, <16 x i16>* %7309, align 2, !tbaa !396
  %7311 = getelementptr inbounds i16, i16* %7301, i64 18
  %7312 = bitcast i16* %7311 to <16 x i16>*
  %7313 = load <16 x i16>, <16 x i16>* %7312, align 2, !tbaa !396
  %7314 = bitcast i16* %7301 to <16 x i16>*
  %7315 = load <16 x i16>, <16 x i16>* %7314, align 2, !tbaa !396
  %7316 = getelementptr inbounds i16, i16* %7301, i64 16
  %7317 = bitcast i16* %7316 to <16 x i16>*
  %7318 = load <16 x i16>, <16 x i16>* %7317, align 2, !tbaa !396
  %7319 = add <16 x i16> %7310, %7304
  %7320 = add <16 x i16> %7319, %7315
  %7321 = add <16 x i16> %7313, %7307
  %7322 = add <16 x i16> %7321, %7318
  %7323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7320, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7322, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7325 = shufflevector <16 x i16> %7323, <16 x i16> %7324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7326 = lshr <32 x i16> %7325, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7327 = shufflevector <32 x i16> %7326, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7328 = sext i32 %blur_x.s0.x.v1.base.s513 to i64
  %7329 = add nsw i64 %7328, %7209
  %7330 = getelementptr inbounds i16, i16* %blur_x, i64 %7329
  %7331 = bitcast i16* %7330 to <16 x i16>*
  store <16 x i16> %7327, <16 x i16>* %7331, align 2, !tbaa !399
  %7332 = shufflevector <32 x i16> %7326, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7333 = getelementptr inbounds i16, i16* %7330, i64 16
  %7334 = bitcast i16* %7333 to <16 x i16>*
  store <16 x i16> %7332, <16 x i16>* %7334, align 2, !tbaa !399
  br label %"consume blur_x514"

"consume blur_x514":                              ; preds = %"for blur_y.s0.x.x.rebased506", %"produce blur_x512"
  %7335 = sext i32 %b237 to i64
  %7336 = add nsw i64 %7212, %7335
  %7337 = getelementptr inbounds i16, i16* %blur_x, i64 %7336
  %7338 = bitcast i16* %7337 to <16 x i16>*
  %7339 = load <16 x i16>, <16 x i16>* %7338, align 2, !tbaa !399
  %7340 = getelementptr inbounds i16, i16* %7337, i64 16
  %7341 = bitcast i16* %7340 to <16 x i16>*
  %7342 = load <16 x i16>, <16 x i16>* %7341, align 2, !tbaa !399
  %7343 = add nsw i64 %7215, %7335
  %7344 = getelementptr inbounds i16, i16* %blur_x, i64 %7343
  %7345 = bitcast i16* %7344 to <16 x i16>*
  %7346 = load <16 x i16>, <16 x i16>* %7345, align 2, !tbaa !399
  %7347 = getelementptr inbounds i16, i16* %7344, i64 16
  %7348 = bitcast i16* %7347 to <16 x i16>*
  %7349 = load <16 x i16>, <16 x i16>* %7348, align 2, !tbaa !399
  %7350 = add nsw i64 %7218, %7335
  %7351 = getelementptr inbounds i16, i16* %blur_x, i64 %7350
  %7352 = bitcast i16* %7351 to <16 x i16>*
  %7353 = load <16 x i16>, <16 x i16>* %7352, align 2, !tbaa !399
  %7354 = getelementptr inbounds i16, i16* %7351, i64 16
  %7355 = bitcast i16* %7354 to <16 x i16>*
  %7356 = load <16 x i16>, <16 x i16>* %7355, align 2, !tbaa !399
  %7357 = add <16 x i16> %7346, %7339
  %7358 = add <16 x i16> %7357, %7353
  %7359 = add <16 x i16> %7349, %7342
  %7360 = add <16 x i16> %7359, %7356
  %7361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7358, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7362 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7360, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7363 = shufflevector <16 x i16> %7361, <16 x i16> %7362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7364 = lshr <32 x i16> %7363, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7365 = shufflevector <32 x i16> %7364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7366 = add nsw i64 %7222, %7335
  %7367 = getelementptr inbounds i16, i16* %65, i64 %7366
  %7368 = bitcast i16* %7367 to <16 x i16>*
  store <16 x i16> %7365, <16 x i16>* %7368, align 2, !tbaa !401
  %7369 = shufflevector <32 x i16> %7364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7370 = getelementptr inbounds i16, i16* %7367, i64 16
  %7371 = bitcast i16* %7370 to <16 x i16>*
  store <16 x i16> %7369, <16 x i16>* %7371, align 2, !tbaa !401
  %7372 = add nuw nsw i32 %blur_y.s0.x.x.rebased508, 1
  %.not2604 = icmp eq i32 %7372, %t1639
  br i1 %.not2604, label %"end for blur_y.s0.x.x.rebased507", label %"for blur_y.s0.x.x.rebased506"

after_bb515:                                      ; preds = %"end for blur_y.s0.x.x.rebased507", %"produce blur_x518"
  br i1 %99, label %"for blur_y.s0.x.x.rebased520.preheader", label %"end for blur_y.s0.x.x.rebased521", !prof !386

"for blur_y.s0.x.x.rebased520.preheader":         ; preds = %after_bb515
  %7373 = sext i32 %t1666 to i64
  %7374 = zext i32 %.pre-phi3350 to i64
  %7375 = mul nsw i64 %7374, %108
  %7376 = sub nsw i64 %7375, %95
  %7377 = zext i32 %.pre-phi3356 to i64
  %7378 = mul nsw i64 %7377, %108
  %7379 = sub nsw i64 %7378, %95
  %7380 = zext i32 %.pre-phi3346 to i64
  %7381 = mul nsw i64 %7380, %108
  %7382 = sub nsw i64 %7381, %95
  %7383 = sext i32 %a26 to i64
  %7384 = add nsw i64 %7383, 21
  %7385 = mul nsw i64 %7384, %109
  %7386 = add nsw i64 %7385, %112
  br label %"for blur_y.s0.x.x.rebased520"

"produce blur_x518":                              ; preds = %"end for blur_y.s0.x.x.rebased507"
  %7387 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %7388 = getelementptr inbounds i16, i16* %7387, i64 -31
  %7389 = bitcast i16* %7388 to <16 x i16>*
  %7390 = load <16 x i16>, <16 x i16>* %7389, align 2, !tbaa !396
  %7391 = getelementptr inbounds i16, i16* %7387, i64 -15
  %7392 = bitcast i16* %7391 to <16 x i16>*
  %7393 = load <16 x i16>, <16 x i16>* %7392, align 2, !tbaa !396
  %7394 = getelementptr inbounds i16, i16* %7387, i64 -30
  %7395 = bitcast i16* %7394 to <16 x i16>*
  %7396 = load <16 x i16>, <16 x i16>* %7395, align 2, !tbaa !396
  %7397 = getelementptr inbounds i16, i16* %7387, i64 -14
  %7398 = bitcast i16* %7397 to <16 x i16>*
  %7399 = load <16 x i16>, <16 x i16>* %7398, align 2, !tbaa !396
  %7400 = getelementptr inbounds i16, i16* %7387, i64 -32
  %7401 = bitcast i16* %7400 to <16 x i16>*
  %7402 = load <16 x i16>, <16 x i16>* %7401, align 2, !tbaa !396
  %7403 = getelementptr inbounds i16, i16* %7387, i64 -16
  %7404 = bitcast i16* %7403 to <16 x i16>*
  %7405 = load <16 x i16>, <16 x i16>* %7404, align 2, !tbaa !396
  %7406 = add <16 x i16> %7396, %7390
  %7407 = add <16 x i16> %7406, %7402
  %7408 = add <16 x i16> %7399, %7393
  %7409 = add <16 x i16> %7408, %7405
  %7410 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7407, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7409, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7412 = shufflevector <16 x i16> %7410, <16 x i16> %7411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7413 = lshr <32 x i16> %7412, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7414 = shufflevector <32 x i16> %7413, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7415 = zext i32 %.pre-phi3356 to i64
  %7416 = mul nsw i64 %96, %7415
  %7417 = add nsw i64 %98, %7416
  %7418 = getelementptr inbounds i16, i16* %blur_x, i64 %7417
  %7419 = getelementptr inbounds i16, i16* %7418, i64 -32
  %7420 = bitcast i16* %7419 to <16 x i16>*
  store <16 x i16> %7414, <16 x i16>* %7420, align 2, !tbaa !399
  %7421 = shufflevector <32 x i16> %7413, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7422 = getelementptr inbounds i16, i16* %7418, i64 -16
  %7423 = bitcast i16* %7422 to <16 x i16>*
  store <16 x i16> %7421, <16 x i16>* %7423, align 2, !tbaa !399
  %7424 = zext i32 %.pre-phi3350 to i64
  %7425 = mul nsw i64 %7424, %108
  %7426 = add nsw i64 %7425, %93
  %7427 = getelementptr inbounds i16, i16* %blur_x, i64 %7426
  %7428 = getelementptr inbounds i16, i16* %7427, i64 -32
  %7429 = bitcast i16* %7428 to <16 x i16>*
  %7430 = load <16 x i16>, <16 x i16>* %7429, align 2, !tbaa !399
  %7431 = getelementptr inbounds i16, i16* %7427, i64 -16
  %7432 = bitcast i16* %7431 to <16 x i16>*
  %7433 = load <16 x i16>, <16 x i16>* %7432, align 2, !tbaa !399
  %7434 = mul nsw i64 %7415, %108
  %7435 = add nsw i64 %7434, %93
  %7436 = getelementptr inbounds i16, i16* %blur_x, i64 %7435
  %7437 = getelementptr inbounds i16, i16* %7436, i64 -32
  %7438 = bitcast i16* %7437 to <16 x i16>*
  %7439 = load <16 x i16>, <16 x i16>* %7438, align 2, !tbaa !399
  %7440 = getelementptr inbounds i16, i16* %7436, i64 -16
  %7441 = bitcast i16* %7440 to <16 x i16>*
  %7442 = load <16 x i16>, <16 x i16>* %7441, align 2, !tbaa !399
  %7443 = zext i32 %.pre-phi3346 to i64
  %7444 = mul nsw i64 %7443, %108
  %7445 = add nsw i64 %7444, %93
  %7446 = getelementptr inbounds i16, i16* %blur_x, i64 %7445
  %7447 = getelementptr inbounds i16, i16* %7446, i64 -32
  %7448 = bitcast i16* %7447 to <16 x i16>*
  %7449 = load <16 x i16>, <16 x i16>* %7448, align 2, !tbaa !399
  %7450 = getelementptr inbounds i16, i16* %7446, i64 -16
  %7451 = bitcast i16* %7450 to <16 x i16>*
  %7452 = load <16 x i16>, <16 x i16>* %7451, align 2, !tbaa !399
  %7453 = add <16 x i16> %7439, %7430
  %7454 = add <16 x i16> %7453, %7449
  %7455 = add <16 x i16> %7442, %7433
  %7456 = add <16 x i16> %7455, %7452
  %7457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7454, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7458 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7456, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7459 = shufflevector <16 x i16> %7457, <16 x i16> %7458, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7460 = lshr <32 x i16> %7459, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7461 = shufflevector <32 x i16> %7460, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7462 = sext i32 %a26 to i64
  %7463 = add nsw i64 %7462, 21
  %7464 = mul nsw i64 %7463, %109
  %7465 = add nsw i64 %111, %7464
  %7466 = getelementptr inbounds i16, i16* %65, i64 %7465
  %7467 = getelementptr inbounds i16, i16* %7466, i64 -32
  %7468 = bitcast i16* %7467 to <16 x i16>*
  store <16 x i16> %7461, <16 x i16>* %7468, align 2, !tbaa !401
  %7469 = shufflevector <32 x i16> %7460, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7470 = getelementptr inbounds i16, i16* %7466, i64 -16
  %7471 = bitcast i16* %7470 to <16 x i16>*
  store <16 x i16> %7469, <16 x i16>* %7471, align 2, !tbaa !401
  br label %after_bb515

"for blur_y.s0.x.x.rebased520":                   ; preds = %"for blur_y.s0.x.x.rebased520.preheader", %"consume blur_x527"
  %indvars.iv3194 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased520.preheader" ], [ %indvars.iv.next3195, %"consume blur_x527" ]
  %7472 = add nsw i64 %indvars.iv3194, %100
  %7473 = icmp slt i64 %7472, 1
  %7474 = trunc i64 %7472 to i32
  %7475 = shl nsw i32 %7474, 5
  %7476 = icmp sgt i32 %4, %7475
  %7477 = or i1 %7473, %7476
  br i1 %7477, label %"produce blur_x526", label %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge"

"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased520"
  %.pre3397 = shl nsw i64 %7472, 5
  br label %"consume blur_x527"

"end for blur_y.s0.x.x.rebased521":               ; preds = %"consume blur_x527", %after_bb515
  br i1 %101, label %"for blur_y.s0.x.x.rebased528.preheader", label %"end for blur_y.s0.x.x.rebased529", !prof !386

"for blur_y.s0.x.x.rebased528.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased521"
  %7478 = sext i32 %t1666 to i64
  %7479 = zext i32 %.pre-phi3350 to i64
  %7480 = mul nsw i64 %7479, %108
  %7481 = sub nsw i64 %7480, %95
  %7482 = zext i32 %.pre-phi3356 to i64
  %7483 = mul nsw i64 %7482, %108
  %7484 = sub nsw i64 %7483, %95
  %7485 = zext i32 %.pre-phi3346 to i64
  %7486 = mul nsw i64 %7485, %108
  %7487 = sub nsw i64 %7486, %95
  %7488 = sext i32 %a26 to i64
  %7489 = add nsw i64 %7488, 21
  %7490 = mul nsw i64 %7489, %109
  %7491 = add nsw i64 %7490, %112
  br label %"for blur_y.s0.x.x.rebased528"

"produce blur_x526":                              ; preds = %"for blur_y.s0.x.x.rebased520"
  %t1008 = add nsw i32 %7475, %t1985
  %7492 = sext i32 %t1008 to i64
  %7493 = getelementptr inbounds i16, i16* %read_input, i64 %7492
  %7494 = getelementptr inbounds i16, i16* %7493, i64 1
  %7495 = bitcast i16* %7494 to <16 x i16>*
  %7496 = load <16 x i16>, <16 x i16>* %7495, align 2, !tbaa !396
  %7497 = getelementptr inbounds i16, i16* %7493, i64 17
  %7498 = bitcast i16* %7497 to <16 x i16>*
  %7499 = load <16 x i16>, <16 x i16>* %7498, align 2, !tbaa !396
  %7500 = getelementptr inbounds i16, i16* %7493, i64 2
  %7501 = bitcast i16* %7500 to <16 x i16>*
  %7502 = load <16 x i16>, <16 x i16>* %7501, align 2, !tbaa !396
  %7503 = getelementptr inbounds i16, i16* %7493, i64 18
  %7504 = bitcast i16* %7503 to <16 x i16>*
  %7505 = load <16 x i16>, <16 x i16>* %7504, align 2, !tbaa !396
  %7506 = bitcast i16* %7493 to <16 x i16>*
  %7507 = load <16 x i16>, <16 x i16>* %7506, align 2, !tbaa !396
  %7508 = getelementptr inbounds i16, i16* %7493, i64 16
  %7509 = bitcast i16* %7508 to <16 x i16>*
  %7510 = load <16 x i16>, <16 x i16>* %7509, align 2, !tbaa !396
  %7511 = add <16 x i16> %7502, %7496
  %7512 = add <16 x i16> %7511, %7507
  %7513 = add <16 x i16> %7505, %7499
  %7514 = add <16 x i16> %7513, %7510
  %7515 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7512, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7516 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7514, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7517 = shufflevector <16 x i16> %7515, <16 x i16> %7516, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7518 = lshr <32 x i16> %7517, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7519 = shufflevector <32 x i16> %7518, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7520 = shl nsw i64 %7472, 5
  %7521 = add nsw i64 %7520, %7373
  %7522 = getelementptr inbounds i16, i16* %blur_x, i64 %7521
  %7523 = bitcast i16* %7522 to <16 x i16>*
  store <16 x i16> %7519, <16 x i16>* %7523, align 2, !tbaa !399
  %7524 = shufflevector <32 x i16> %7518, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7525 = getelementptr inbounds i16, i16* %7522, i64 16
  %7526 = bitcast i16* %7525 to <16 x i16>*
  store <16 x i16> %7524, <16 x i16>* %7526, align 2, !tbaa !399
  br label %"consume blur_x527"

"consume blur_x527":                              ; preds = %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge", %"produce blur_x526"
  %.pre-phi3398 = phi i64 [ %.pre3397, %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge" ], [ %7520, %"produce blur_x526" ]
  %7527 = add nsw i64 %7376, %.pre-phi3398
  %7528 = getelementptr inbounds i16, i16* %blur_x, i64 %7527
  %7529 = bitcast i16* %7528 to <16 x i16>*
  %7530 = load <16 x i16>, <16 x i16>* %7529, align 2, !tbaa !399
  %7531 = getelementptr inbounds i16, i16* %7528, i64 16
  %7532 = bitcast i16* %7531 to <16 x i16>*
  %7533 = load <16 x i16>, <16 x i16>* %7532, align 2, !tbaa !399
  %7534 = add nsw i64 %7379, %.pre-phi3398
  %7535 = getelementptr inbounds i16, i16* %blur_x, i64 %7534
  %7536 = bitcast i16* %7535 to <16 x i16>*
  %7537 = load <16 x i16>, <16 x i16>* %7536, align 2, !tbaa !399
  %7538 = getelementptr inbounds i16, i16* %7535, i64 16
  %7539 = bitcast i16* %7538 to <16 x i16>*
  %7540 = load <16 x i16>, <16 x i16>* %7539, align 2, !tbaa !399
  %7541 = add nsw i64 %7382, %.pre-phi3398
  %7542 = getelementptr inbounds i16, i16* %blur_x, i64 %7541
  %7543 = bitcast i16* %7542 to <16 x i16>*
  %7544 = load <16 x i16>, <16 x i16>* %7543, align 2, !tbaa !399
  %7545 = getelementptr inbounds i16, i16* %7542, i64 16
  %7546 = bitcast i16* %7545 to <16 x i16>*
  %7547 = load <16 x i16>, <16 x i16>* %7546, align 2, !tbaa !399
  %7548 = add <16 x i16> %7537, %7530
  %7549 = add <16 x i16> %7548, %7544
  %7550 = add <16 x i16> %7540, %7533
  %7551 = add <16 x i16> %7550, %7547
  %7552 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7549, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7553 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7551, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7554 = shufflevector <16 x i16> %7552, <16 x i16> %7553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7555 = lshr <32 x i16> %7554, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7556 = shufflevector <32 x i16> %7555, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7557 = add nsw i64 %7386, %.pre-phi3398
  %7558 = getelementptr inbounds i16, i16* %65, i64 %7557
  %7559 = bitcast i16* %7558 to <16 x i16>*
  store <16 x i16> %7556, <16 x i16>* %7559, align 2, !tbaa !401
  %7560 = shufflevector <32 x i16> %7555, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7561 = getelementptr inbounds i16, i16* %7558, i64 16
  %7562 = bitcast i16* %7561 to <16 x i16>*
  store <16 x i16> %7560, <16 x i16>* %7562, align 2, !tbaa !401
  %indvars.iv.next3195 = add nuw nsw i64 %indvars.iv3194, 1
  %.not2603 = icmp eq i64 %indvars.iv.next3195, %180
  br i1 %.not2603, label %"end for blur_y.s0.x.x.rebased521", label %"for blur_y.s0.x.x.rebased520"

"for blur_y.s0.x.x.rebased528":                   ; preds = %"for blur_y.s0.x.x.rebased528.preheader", %"consume blur_x536"
  %blur_y.s0.x.x.rebased530 = phi i32 [ %7641, %"consume blur_x536" ], [ 0, %"for blur_y.s0.x.x.rebased528.preheader" ]
  %7563 = add nsw i32 %blur_y.s0.x.x.rebased530, %t1582
  %a238 = shl nsw i32 %7563, 5
  %7564 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %7564, i32 %a238, i32 %a14
  %7565 = icmp slt i32 %7563, 1
  %7566 = icmp sgt i32 %4, %a238
  %7567 = or i1 %7565, %7566
  br i1 %7567, label %"produce blur_x534", label %"consume blur_x536"

"end for blur_y.s0.x.x.rebased529":               ; preds = %"consume blur_x536", %"end for blur_y.s0.x.x.rebased521"
  br i1 %34, label %"produce blur_x540", label %after_bb537

"produce blur_x534":                              ; preds = %"for blur_y.s0.x.x.rebased528"
  %7568 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s535 = select i1 %7568, i32 %b244, i32 %4
  %t1013 = add nsw i32 %blur_x.s0.x.v1.base.s535, %t1985
  %7569 = sext i32 %t1013 to i64
  %7570 = getelementptr inbounds i16, i16* %read_input, i64 %7569
  %7571 = getelementptr inbounds i16, i16* %7570, i64 1
  %7572 = bitcast i16* %7571 to <16 x i16>*
  %7573 = load <16 x i16>, <16 x i16>* %7572, align 2, !tbaa !396
  %7574 = getelementptr inbounds i16, i16* %7570, i64 17
  %7575 = bitcast i16* %7574 to <16 x i16>*
  %7576 = load <16 x i16>, <16 x i16>* %7575, align 2, !tbaa !396
  %7577 = getelementptr inbounds i16, i16* %7570, i64 2
  %7578 = bitcast i16* %7577 to <16 x i16>*
  %7579 = load <16 x i16>, <16 x i16>* %7578, align 2, !tbaa !396
  %7580 = getelementptr inbounds i16, i16* %7570, i64 18
  %7581 = bitcast i16* %7580 to <16 x i16>*
  %7582 = load <16 x i16>, <16 x i16>* %7581, align 2, !tbaa !396
  %7583 = bitcast i16* %7570 to <16 x i16>*
  %7584 = load <16 x i16>, <16 x i16>* %7583, align 2, !tbaa !396
  %7585 = getelementptr inbounds i16, i16* %7570, i64 16
  %7586 = bitcast i16* %7585 to <16 x i16>*
  %7587 = load <16 x i16>, <16 x i16>* %7586, align 2, !tbaa !396
  %7588 = add <16 x i16> %7579, %7573
  %7589 = add <16 x i16> %7588, %7584
  %7590 = add <16 x i16> %7582, %7576
  %7591 = add <16 x i16> %7590, %7587
  %7592 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7589, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7591, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7594 = shufflevector <16 x i16> %7592, <16 x i16> %7593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7595 = lshr <32 x i16> %7594, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7596 = shufflevector <32 x i16> %7595, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7597 = sext i32 %blur_x.s0.x.v1.base.s535 to i64
  %7598 = add nsw i64 %7597, %7478
  %7599 = getelementptr inbounds i16, i16* %blur_x, i64 %7598
  %7600 = bitcast i16* %7599 to <16 x i16>*
  store <16 x i16> %7596, <16 x i16>* %7600, align 2, !tbaa !399
  %7601 = shufflevector <32 x i16> %7595, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7602 = getelementptr inbounds i16, i16* %7599, i64 16
  %7603 = bitcast i16* %7602 to <16 x i16>*
  store <16 x i16> %7601, <16 x i16>* %7603, align 2, !tbaa !399
  br label %"consume blur_x536"

"consume blur_x536":                              ; preds = %"for blur_y.s0.x.x.rebased528", %"produce blur_x534"
  %7604 = sext i32 %b244 to i64
  %7605 = add nsw i64 %7481, %7604
  %7606 = getelementptr inbounds i16, i16* %blur_x, i64 %7605
  %7607 = bitcast i16* %7606 to <16 x i16>*
  %7608 = load <16 x i16>, <16 x i16>* %7607, align 2, !tbaa !399
  %7609 = getelementptr inbounds i16, i16* %7606, i64 16
  %7610 = bitcast i16* %7609 to <16 x i16>*
  %7611 = load <16 x i16>, <16 x i16>* %7610, align 2, !tbaa !399
  %7612 = add nsw i64 %7484, %7604
  %7613 = getelementptr inbounds i16, i16* %blur_x, i64 %7612
  %7614 = bitcast i16* %7613 to <16 x i16>*
  %7615 = load <16 x i16>, <16 x i16>* %7614, align 2, !tbaa !399
  %7616 = getelementptr inbounds i16, i16* %7613, i64 16
  %7617 = bitcast i16* %7616 to <16 x i16>*
  %7618 = load <16 x i16>, <16 x i16>* %7617, align 2, !tbaa !399
  %7619 = add nsw i64 %7487, %7604
  %7620 = getelementptr inbounds i16, i16* %blur_x, i64 %7619
  %7621 = bitcast i16* %7620 to <16 x i16>*
  %7622 = load <16 x i16>, <16 x i16>* %7621, align 2, !tbaa !399
  %7623 = getelementptr inbounds i16, i16* %7620, i64 16
  %7624 = bitcast i16* %7623 to <16 x i16>*
  %7625 = load <16 x i16>, <16 x i16>* %7624, align 2, !tbaa !399
  %7626 = add <16 x i16> %7615, %7608
  %7627 = add <16 x i16> %7626, %7622
  %7628 = add <16 x i16> %7618, %7611
  %7629 = add <16 x i16> %7628, %7625
  %7630 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7627, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7631 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7629, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7632 = shufflevector <16 x i16> %7630, <16 x i16> %7631, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7633 = lshr <32 x i16> %7632, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7634 = shufflevector <32 x i16> %7633, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7635 = add nsw i64 %7491, %7604
  %7636 = getelementptr inbounds i16, i16* %65, i64 %7635
  %7637 = bitcast i16* %7636 to <16 x i16>*
  store <16 x i16> %7634, <16 x i16>* %7637, align 2, !tbaa !401
  %7638 = shufflevector <32 x i16> %7633, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7639 = getelementptr inbounds i16, i16* %7636, i64 16
  %7640 = bitcast i16* %7639 to <16 x i16>*
  store <16 x i16> %7638, <16 x i16>* %7640, align 2, !tbaa !401
  %7641 = add nuw nsw i32 %blur_y.s0.x.x.rebased530, 1
  %.not2602 = icmp eq i32 %7641, %t1639
  br i1 %.not2602, label %"end for blur_y.s0.x.x.rebased529", label %"for blur_y.s0.x.x.rebased528"

after_bb537:                                      ; preds = %"end for blur_y.s0.x.x.rebased529", %"produce blur_x540"
  br i1 %99, label %"for blur_y.s0.x.x.rebased542.preheader", label %"end for blur_y.s0.x.x.rebased543", !prof !386

"for blur_y.s0.x.x.rebased542.preheader":         ; preds = %after_bb537
  %7642 = sext i32 %t1638 to i64
  %7643 = zext i32 %.pre-phi3356 to i64
  %7644 = mul nsw i64 %7643, %108
  %7645 = sub nsw i64 %7644, %95
  %7646 = zext i32 %.pre-phi to i64
  %7647 = mul nsw i64 %7646, %108
  %7648 = sub nsw i64 %7647, %95
  %7649 = zext i32 %.pre-phi3350 to i64
  %7650 = mul nsw i64 %7649, %108
  %7651 = sub nsw i64 %7650, %95
  %7652 = sext i32 %a26 to i64
  %7653 = add nsw i64 %7652, 22
  %7654 = mul nsw i64 %7653, %109
  %7655 = add nsw i64 %7654, %112
  br label %"for blur_y.s0.x.x.rebased542"

"produce blur_x540":                              ; preds = %"end for blur_y.s0.x.x.rebased529"
  %7656 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %7657 = getelementptr inbounds i16, i16* %7656, i64 -31
  %7658 = bitcast i16* %7657 to <16 x i16>*
  %7659 = load <16 x i16>, <16 x i16>* %7658, align 2, !tbaa !396
  %7660 = getelementptr inbounds i16, i16* %7656, i64 -15
  %7661 = bitcast i16* %7660 to <16 x i16>*
  %7662 = load <16 x i16>, <16 x i16>* %7661, align 2, !tbaa !396
  %7663 = getelementptr inbounds i16, i16* %7656, i64 -30
  %7664 = bitcast i16* %7663 to <16 x i16>*
  %7665 = load <16 x i16>, <16 x i16>* %7664, align 2, !tbaa !396
  %7666 = getelementptr inbounds i16, i16* %7656, i64 -14
  %7667 = bitcast i16* %7666 to <16 x i16>*
  %7668 = load <16 x i16>, <16 x i16>* %7667, align 2, !tbaa !396
  %7669 = getelementptr inbounds i16, i16* %7656, i64 -32
  %7670 = bitcast i16* %7669 to <16 x i16>*
  %7671 = load <16 x i16>, <16 x i16>* %7670, align 2, !tbaa !396
  %7672 = getelementptr inbounds i16, i16* %7656, i64 -16
  %7673 = bitcast i16* %7672 to <16 x i16>*
  %7674 = load <16 x i16>, <16 x i16>* %7673, align 2, !tbaa !396
  %7675 = add <16 x i16> %7665, %7659
  %7676 = add <16 x i16> %7675, %7671
  %7677 = add <16 x i16> %7668, %7662
  %7678 = add <16 x i16> %7677, %7674
  %7679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7676, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7678, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7681 = shufflevector <16 x i16> %7679, <16 x i16> %7680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7682 = lshr <32 x i16> %7681, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7683 = shufflevector <32 x i16> %7682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7684 = zext i32 %.pre-phi to i64
  %7685 = mul nsw i64 %96, %7684
  %7686 = add nsw i64 %98, %7685
  %7687 = getelementptr inbounds i16, i16* %blur_x, i64 %7686
  %7688 = getelementptr inbounds i16, i16* %7687, i64 -32
  %7689 = bitcast i16* %7688 to <16 x i16>*
  store <16 x i16> %7683, <16 x i16>* %7689, align 2, !tbaa !399
  %7690 = shufflevector <32 x i16> %7682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7691 = getelementptr inbounds i16, i16* %7687, i64 -16
  %7692 = bitcast i16* %7691 to <16 x i16>*
  store <16 x i16> %7690, <16 x i16>* %7692, align 2, !tbaa !399
  %7693 = zext i32 %.pre-phi3356 to i64
  %7694 = mul nsw i64 %7693, %108
  %7695 = add nsw i64 %7694, %93
  %7696 = getelementptr inbounds i16, i16* %blur_x, i64 %7695
  %7697 = getelementptr inbounds i16, i16* %7696, i64 -32
  %7698 = bitcast i16* %7697 to <16 x i16>*
  %7699 = load <16 x i16>, <16 x i16>* %7698, align 2, !tbaa !399
  %7700 = getelementptr inbounds i16, i16* %7696, i64 -16
  %7701 = bitcast i16* %7700 to <16 x i16>*
  %7702 = load <16 x i16>, <16 x i16>* %7701, align 2, !tbaa !399
  %7703 = mul nsw i64 %7684, %108
  %7704 = add nsw i64 %7703, %93
  %7705 = getelementptr inbounds i16, i16* %blur_x, i64 %7704
  %7706 = getelementptr inbounds i16, i16* %7705, i64 -32
  %7707 = bitcast i16* %7706 to <16 x i16>*
  %7708 = load <16 x i16>, <16 x i16>* %7707, align 2, !tbaa !399
  %7709 = getelementptr inbounds i16, i16* %7705, i64 -16
  %7710 = bitcast i16* %7709 to <16 x i16>*
  %7711 = load <16 x i16>, <16 x i16>* %7710, align 2, !tbaa !399
  %7712 = zext i32 %.pre-phi3350 to i64
  %7713 = mul nsw i64 %7712, %108
  %7714 = add nsw i64 %7713, %93
  %7715 = getelementptr inbounds i16, i16* %blur_x, i64 %7714
  %7716 = getelementptr inbounds i16, i16* %7715, i64 -32
  %7717 = bitcast i16* %7716 to <16 x i16>*
  %7718 = load <16 x i16>, <16 x i16>* %7717, align 2, !tbaa !399
  %7719 = getelementptr inbounds i16, i16* %7715, i64 -16
  %7720 = bitcast i16* %7719 to <16 x i16>*
  %7721 = load <16 x i16>, <16 x i16>* %7720, align 2, !tbaa !399
  %7722 = add <16 x i16> %7708, %7699
  %7723 = add <16 x i16> %7722, %7718
  %7724 = add <16 x i16> %7711, %7702
  %7725 = add <16 x i16> %7724, %7721
  %7726 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7723, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7727 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7725, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7728 = shufflevector <16 x i16> %7726, <16 x i16> %7727, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7729 = lshr <32 x i16> %7728, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7730 = shufflevector <32 x i16> %7729, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7731 = sext i32 %a26 to i64
  %7732 = add nsw i64 %7731, 22
  %7733 = mul nsw i64 %7732, %109
  %7734 = add nsw i64 %111, %7733
  %7735 = getelementptr inbounds i16, i16* %65, i64 %7734
  %7736 = getelementptr inbounds i16, i16* %7735, i64 -32
  %7737 = bitcast i16* %7736 to <16 x i16>*
  store <16 x i16> %7730, <16 x i16>* %7737, align 2, !tbaa !401
  %7738 = shufflevector <32 x i16> %7729, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7739 = getelementptr inbounds i16, i16* %7735, i64 -16
  %7740 = bitcast i16* %7739 to <16 x i16>*
  store <16 x i16> %7738, <16 x i16>* %7740, align 2, !tbaa !401
  br label %after_bb537

"for blur_y.s0.x.x.rebased542":                   ; preds = %"for blur_y.s0.x.x.rebased542.preheader", %"consume blur_x549"
  %indvars.iv3197 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased542.preheader" ], [ %indvars.iv.next3198, %"consume blur_x549" ]
  %7741 = add nsw i64 %indvars.iv3197, %100
  %7742 = icmp slt i64 %7741, 1
  %7743 = trunc i64 %7741 to i32
  %7744 = shl nsw i32 %7743, 5
  %7745 = icmp sgt i32 %4, %7744
  %7746 = or i1 %7742, %7745
  br i1 %7746, label %"produce blur_x548", label %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge"

"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased542"
  %.pre3399 = shl nsw i64 %7741, 5
  br label %"consume blur_x549"

"end for blur_y.s0.x.x.rebased543":               ; preds = %"consume blur_x549", %after_bb537
  br i1 %101, label %"for blur_y.s0.x.x.rebased550.preheader", label %"end for blur_y.s0.x.x.rebased551", !prof !386

"for blur_y.s0.x.x.rebased550.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased543"
  %7747 = sext i32 %t1638 to i64
  %7748 = zext i32 %.pre-phi3356 to i64
  %7749 = mul nsw i64 %7748, %108
  %7750 = sub nsw i64 %7749, %95
  %7751 = zext i32 %.pre-phi to i64
  %7752 = mul nsw i64 %7751, %108
  %7753 = sub nsw i64 %7752, %95
  %7754 = zext i32 %.pre-phi3350 to i64
  %7755 = mul nsw i64 %7754, %108
  %7756 = sub nsw i64 %7755, %95
  %7757 = sext i32 %a26 to i64
  %7758 = add nsw i64 %7757, 22
  %7759 = mul nsw i64 %7758, %109
  %7760 = add nsw i64 %7759, %112
  br label %"for blur_y.s0.x.x.rebased550"

"produce blur_x548":                              ; preds = %"for blur_y.s0.x.x.rebased542"
  %t1024 = add nsw i32 %7744, %t2001
  %7761 = sext i32 %t1024 to i64
  %7762 = getelementptr inbounds i16, i16* %read_input, i64 %7761
  %7763 = getelementptr inbounds i16, i16* %7762, i64 1
  %7764 = bitcast i16* %7763 to <16 x i16>*
  %7765 = load <16 x i16>, <16 x i16>* %7764, align 2, !tbaa !396
  %7766 = getelementptr inbounds i16, i16* %7762, i64 17
  %7767 = bitcast i16* %7766 to <16 x i16>*
  %7768 = load <16 x i16>, <16 x i16>* %7767, align 2, !tbaa !396
  %7769 = getelementptr inbounds i16, i16* %7762, i64 2
  %7770 = bitcast i16* %7769 to <16 x i16>*
  %7771 = load <16 x i16>, <16 x i16>* %7770, align 2, !tbaa !396
  %7772 = getelementptr inbounds i16, i16* %7762, i64 18
  %7773 = bitcast i16* %7772 to <16 x i16>*
  %7774 = load <16 x i16>, <16 x i16>* %7773, align 2, !tbaa !396
  %7775 = bitcast i16* %7762 to <16 x i16>*
  %7776 = load <16 x i16>, <16 x i16>* %7775, align 2, !tbaa !396
  %7777 = getelementptr inbounds i16, i16* %7762, i64 16
  %7778 = bitcast i16* %7777 to <16 x i16>*
  %7779 = load <16 x i16>, <16 x i16>* %7778, align 2, !tbaa !396
  %7780 = add <16 x i16> %7771, %7765
  %7781 = add <16 x i16> %7780, %7776
  %7782 = add <16 x i16> %7774, %7768
  %7783 = add <16 x i16> %7782, %7779
  %7784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7781, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7783, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7786 = shufflevector <16 x i16> %7784, <16 x i16> %7785, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7787 = lshr <32 x i16> %7786, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7788 = shufflevector <32 x i16> %7787, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7789 = shl nsw i64 %7741, 5
  %7790 = add nsw i64 %7789, %7642
  %7791 = getelementptr inbounds i16, i16* %blur_x, i64 %7790
  %7792 = bitcast i16* %7791 to <16 x i16>*
  store <16 x i16> %7788, <16 x i16>* %7792, align 2, !tbaa !399
  %7793 = shufflevector <32 x i16> %7787, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7794 = getelementptr inbounds i16, i16* %7791, i64 16
  %7795 = bitcast i16* %7794 to <16 x i16>*
  store <16 x i16> %7793, <16 x i16>* %7795, align 2, !tbaa !399
  br label %"consume blur_x549"

"consume blur_x549":                              ; preds = %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge", %"produce blur_x548"
  %.pre-phi3400 = phi i64 [ %.pre3399, %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge" ], [ %7789, %"produce blur_x548" ]
  %7796 = add nsw i64 %7645, %.pre-phi3400
  %7797 = getelementptr inbounds i16, i16* %blur_x, i64 %7796
  %7798 = bitcast i16* %7797 to <16 x i16>*
  %7799 = load <16 x i16>, <16 x i16>* %7798, align 2, !tbaa !399
  %7800 = getelementptr inbounds i16, i16* %7797, i64 16
  %7801 = bitcast i16* %7800 to <16 x i16>*
  %7802 = load <16 x i16>, <16 x i16>* %7801, align 2, !tbaa !399
  %7803 = add nsw i64 %7648, %.pre-phi3400
  %7804 = getelementptr inbounds i16, i16* %blur_x, i64 %7803
  %7805 = bitcast i16* %7804 to <16 x i16>*
  %7806 = load <16 x i16>, <16 x i16>* %7805, align 2, !tbaa !399
  %7807 = getelementptr inbounds i16, i16* %7804, i64 16
  %7808 = bitcast i16* %7807 to <16 x i16>*
  %7809 = load <16 x i16>, <16 x i16>* %7808, align 2, !tbaa !399
  %7810 = add nsw i64 %7651, %.pre-phi3400
  %7811 = getelementptr inbounds i16, i16* %blur_x, i64 %7810
  %7812 = bitcast i16* %7811 to <16 x i16>*
  %7813 = load <16 x i16>, <16 x i16>* %7812, align 2, !tbaa !399
  %7814 = getelementptr inbounds i16, i16* %7811, i64 16
  %7815 = bitcast i16* %7814 to <16 x i16>*
  %7816 = load <16 x i16>, <16 x i16>* %7815, align 2, !tbaa !399
  %7817 = add <16 x i16> %7806, %7799
  %7818 = add <16 x i16> %7817, %7813
  %7819 = add <16 x i16> %7809, %7802
  %7820 = add <16 x i16> %7819, %7816
  %7821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7818, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7822 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7820, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7823 = shufflevector <16 x i16> %7821, <16 x i16> %7822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7824 = lshr <32 x i16> %7823, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7825 = shufflevector <32 x i16> %7824, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7826 = add nsw i64 %7655, %.pre-phi3400
  %7827 = getelementptr inbounds i16, i16* %65, i64 %7826
  %7828 = bitcast i16* %7827 to <16 x i16>*
  store <16 x i16> %7825, <16 x i16>* %7828, align 2, !tbaa !401
  %7829 = shufflevector <32 x i16> %7824, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7830 = getelementptr inbounds i16, i16* %7827, i64 16
  %7831 = bitcast i16* %7830 to <16 x i16>*
  store <16 x i16> %7829, <16 x i16>* %7831, align 2, !tbaa !401
  %indvars.iv.next3198 = add nuw nsw i64 %indvars.iv3197, 1
  %.not2601 = icmp eq i64 %indvars.iv.next3198, %180
  br i1 %.not2601, label %"end for blur_y.s0.x.x.rebased543", label %"for blur_y.s0.x.x.rebased542"

"for blur_y.s0.x.x.rebased550":                   ; preds = %"for blur_y.s0.x.x.rebased550.preheader", %"consume blur_x558"
  %blur_y.s0.x.x.rebased552 = phi i32 [ %7910, %"consume blur_x558" ], [ 0, %"for blur_y.s0.x.x.rebased550.preheader" ]
  %7832 = add nsw i32 %blur_y.s0.x.x.rebased552, %t1582
  %a245 = shl nsw i32 %7832, 5
  %7833 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %7833, i32 %a245, i32 %a14
  %7834 = icmp slt i32 %7832, 1
  %7835 = icmp sgt i32 %4, %a245
  %7836 = or i1 %7834, %7835
  br i1 %7836, label %"produce blur_x556", label %"consume blur_x558"

"end for blur_y.s0.x.x.rebased551":               ; preds = %"consume blur_x558", %"end for blur_y.s0.x.x.rebased543"
  br i1 %34, label %"produce blur_x562", label %after_bb559

"produce blur_x556":                              ; preds = %"for blur_y.s0.x.x.rebased550"
  %7837 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s557 = select i1 %7837, i32 %b251, i32 %4
  %t1029 = add nsw i32 %blur_x.s0.x.v1.base.s557, %t2001
  %7838 = sext i32 %t1029 to i64
  %7839 = getelementptr inbounds i16, i16* %read_input, i64 %7838
  %7840 = getelementptr inbounds i16, i16* %7839, i64 1
  %7841 = bitcast i16* %7840 to <16 x i16>*
  %7842 = load <16 x i16>, <16 x i16>* %7841, align 2, !tbaa !396
  %7843 = getelementptr inbounds i16, i16* %7839, i64 17
  %7844 = bitcast i16* %7843 to <16 x i16>*
  %7845 = load <16 x i16>, <16 x i16>* %7844, align 2, !tbaa !396
  %7846 = getelementptr inbounds i16, i16* %7839, i64 2
  %7847 = bitcast i16* %7846 to <16 x i16>*
  %7848 = load <16 x i16>, <16 x i16>* %7847, align 2, !tbaa !396
  %7849 = getelementptr inbounds i16, i16* %7839, i64 18
  %7850 = bitcast i16* %7849 to <16 x i16>*
  %7851 = load <16 x i16>, <16 x i16>* %7850, align 2, !tbaa !396
  %7852 = bitcast i16* %7839 to <16 x i16>*
  %7853 = load <16 x i16>, <16 x i16>* %7852, align 2, !tbaa !396
  %7854 = getelementptr inbounds i16, i16* %7839, i64 16
  %7855 = bitcast i16* %7854 to <16 x i16>*
  %7856 = load <16 x i16>, <16 x i16>* %7855, align 2, !tbaa !396
  %7857 = add <16 x i16> %7848, %7842
  %7858 = add <16 x i16> %7857, %7853
  %7859 = add <16 x i16> %7851, %7845
  %7860 = add <16 x i16> %7859, %7856
  %7861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7858, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7860, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7863 = shufflevector <16 x i16> %7861, <16 x i16> %7862, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7864 = lshr <32 x i16> %7863, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7865 = shufflevector <32 x i16> %7864, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7866 = sext i32 %blur_x.s0.x.v1.base.s557 to i64
  %7867 = add nsw i64 %7866, %7747
  %7868 = getelementptr inbounds i16, i16* %blur_x, i64 %7867
  %7869 = bitcast i16* %7868 to <16 x i16>*
  store <16 x i16> %7865, <16 x i16>* %7869, align 2, !tbaa !399
  %7870 = shufflevector <32 x i16> %7864, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7871 = getelementptr inbounds i16, i16* %7868, i64 16
  %7872 = bitcast i16* %7871 to <16 x i16>*
  store <16 x i16> %7870, <16 x i16>* %7872, align 2, !tbaa !399
  br label %"consume blur_x558"

"consume blur_x558":                              ; preds = %"for blur_y.s0.x.x.rebased550", %"produce blur_x556"
  %7873 = sext i32 %b251 to i64
  %7874 = add nsw i64 %7750, %7873
  %7875 = getelementptr inbounds i16, i16* %blur_x, i64 %7874
  %7876 = bitcast i16* %7875 to <16 x i16>*
  %7877 = load <16 x i16>, <16 x i16>* %7876, align 2, !tbaa !399
  %7878 = getelementptr inbounds i16, i16* %7875, i64 16
  %7879 = bitcast i16* %7878 to <16 x i16>*
  %7880 = load <16 x i16>, <16 x i16>* %7879, align 2, !tbaa !399
  %7881 = add nsw i64 %7753, %7873
  %7882 = getelementptr inbounds i16, i16* %blur_x, i64 %7881
  %7883 = bitcast i16* %7882 to <16 x i16>*
  %7884 = load <16 x i16>, <16 x i16>* %7883, align 2, !tbaa !399
  %7885 = getelementptr inbounds i16, i16* %7882, i64 16
  %7886 = bitcast i16* %7885 to <16 x i16>*
  %7887 = load <16 x i16>, <16 x i16>* %7886, align 2, !tbaa !399
  %7888 = add nsw i64 %7756, %7873
  %7889 = getelementptr inbounds i16, i16* %blur_x, i64 %7888
  %7890 = bitcast i16* %7889 to <16 x i16>*
  %7891 = load <16 x i16>, <16 x i16>* %7890, align 2, !tbaa !399
  %7892 = getelementptr inbounds i16, i16* %7889, i64 16
  %7893 = bitcast i16* %7892 to <16 x i16>*
  %7894 = load <16 x i16>, <16 x i16>* %7893, align 2, !tbaa !399
  %7895 = add <16 x i16> %7884, %7877
  %7896 = add <16 x i16> %7895, %7891
  %7897 = add <16 x i16> %7887, %7880
  %7898 = add <16 x i16> %7897, %7894
  %7899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7896, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7898, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7901 = shufflevector <16 x i16> %7899, <16 x i16> %7900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7902 = lshr <32 x i16> %7901, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7903 = shufflevector <32 x i16> %7902, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7904 = add nsw i64 %7760, %7873
  %7905 = getelementptr inbounds i16, i16* %65, i64 %7904
  %7906 = bitcast i16* %7905 to <16 x i16>*
  store <16 x i16> %7903, <16 x i16>* %7906, align 2, !tbaa !401
  %7907 = shufflevector <32 x i16> %7902, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7908 = getelementptr inbounds i16, i16* %7905, i64 16
  %7909 = bitcast i16* %7908 to <16 x i16>*
  store <16 x i16> %7907, <16 x i16>* %7909, align 2, !tbaa !401
  %7910 = add nuw nsw i32 %blur_y.s0.x.x.rebased552, 1
  %.not2600 = icmp eq i32 %7910, %t1639
  br i1 %.not2600, label %"end for blur_y.s0.x.x.rebased551", label %"for blur_y.s0.x.x.rebased550"

after_bb559:                                      ; preds = %"end for blur_y.s0.x.x.rebased551", %"produce blur_x562"
  br i1 %99, label %"for blur_y.s0.x.x.rebased564.preheader", label %"end for blur_y.s0.x.x.rebased565", !prof !386

"for blur_y.s0.x.x.rebased564.preheader":         ; preds = %after_bb559
  %7911 = sext i32 %t1644 to i64
  %7912 = zext i32 %.pre-phi to i64
  %7913 = mul nsw i64 %7912, %108
  %7914 = sub nsw i64 %7913, %95
  %7915 = zext i32 %.pre-phi3346 to i64
  %7916 = mul nsw i64 %7915, %108
  %7917 = sub nsw i64 %7916, %95
  %7918 = zext i32 %.pre-phi3356 to i64
  %7919 = mul nsw i64 %7918, %108
  %7920 = sub nsw i64 %7919, %95
  %7921 = sext i32 %a26 to i64
  %7922 = add nsw i64 %7921, 23
  %7923 = mul nsw i64 %7922, %109
  %7924 = add nsw i64 %7923, %112
  br label %"for blur_y.s0.x.x.rebased564"

"produce blur_x562":                              ; preds = %"end for blur_y.s0.x.x.rebased551"
  %7925 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %7926 = getelementptr inbounds i16, i16* %7925, i64 -31
  %7927 = bitcast i16* %7926 to <16 x i16>*
  %7928 = load <16 x i16>, <16 x i16>* %7927, align 2, !tbaa !396
  %7929 = getelementptr inbounds i16, i16* %7925, i64 -15
  %7930 = bitcast i16* %7929 to <16 x i16>*
  %7931 = load <16 x i16>, <16 x i16>* %7930, align 2, !tbaa !396
  %7932 = getelementptr inbounds i16, i16* %7925, i64 -30
  %7933 = bitcast i16* %7932 to <16 x i16>*
  %7934 = load <16 x i16>, <16 x i16>* %7933, align 2, !tbaa !396
  %7935 = getelementptr inbounds i16, i16* %7925, i64 -14
  %7936 = bitcast i16* %7935 to <16 x i16>*
  %7937 = load <16 x i16>, <16 x i16>* %7936, align 2, !tbaa !396
  %7938 = getelementptr inbounds i16, i16* %7925, i64 -32
  %7939 = bitcast i16* %7938 to <16 x i16>*
  %7940 = load <16 x i16>, <16 x i16>* %7939, align 2, !tbaa !396
  %7941 = getelementptr inbounds i16, i16* %7925, i64 -16
  %7942 = bitcast i16* %7941 to <16 x i16>*
  %7943 = load <16 x i16>, <16 x i16>* %7942, align 2, !tbaa !396
  %7944 = add <16 x i16> %7934, %7928
  %7945 = add <16 x i16> %7944, %7940
  %7946 = add <16 x i16> %7937, %7931
  %7947 = add <16 x i16> %7946, %7943
  %7948 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7945, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7949 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7947, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7950 = shufflevector <16 x i16> %7948, <16 x i16> %7949, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7951 = lshr <32 x i16> %7950, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7952 = shufflevector <32 x i16> %7951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7953 = zext i32 %.pre-phi3346 to i64
  %7954 = mul nsw i64 %96, %7953
  %7955 = add nsw i64 %98, %7954
  %7956 = getelementptr inbounds i16, i16* %blur_x, i64 %7955
  %7957 = getelementptr inbounds i16, i16* %7956, i64 -32
  %7958 = bitcast i16* %7957 to <16 x i16>*
  store <16 x i16> %7952, <16 x i16>* %7958, align 2, !tbaa !399
  %7959 = shufflevector <32 x i16> %7951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7960 = getelementptr inbounds i16, i16* %7956, i64 -16
  %7961 = bitcast i16* %7960 to <16 x i16>*
  store <16 x i16> %7959, <16 x i16>* %7961, align 2, !tbaa !399
  %7962 = zext i32 %.pre-phi to i64
  %7963 = mul nsw i64 %7962, %108
  %7964 = add nsw i64 %7963, %93
  %7965 = getelementptr inbounds i16, i16* %blur_x, i64 %7964
  %7966 = getelementptr inbounds i16, i16* %7965, i64 -32
  %7967 = bitcast i16* %7966 to <16 x i16>*
  %7968 = load <16 x i16>, <16 x i16>* %7967, align 2, !tbaa !399
  %7969 = getelementptr inbounds i16, i16* %7965, i64 -16
  %7970 = bitcast i16* %7969 to <16 x i16>*
  %7971 = load <16 x i16>, <16 x i16>* %7970, align 2, !tbaa !399
  %7972 = mul nsw i64 %7953, %108
  %7973 = add nsw i64 %7972, %93
  %7974 = getelementptr inbounds i16, i16* %blur_x, i64 %7973
  %7975 = getelementptr inbounds i16, i16* %7974, i64 -32
  %7976 = bitcast i16* %7975 to <16 x i16>*
  %7977 = load <16 x i16>, <16 x i16>* %7976, align 2, !tbaa !399
  %7978 = getelementptr inbounds i16, i16* %7974, i64 -16
  %7979 = bitcast i16* %7978 to <16 x i16>*
  %7980 = load <16 x i16>, <16 x i16>* %7979, align 2, !tbaa !399
  %7981 = zext i32 %.pre-phi3356 to i64
  %7982 = mul nsw i64 %7981, %108
  %7983 = add nsw i64 %7982, %93
  %7984 = getelementptr inbounds i16, i16* %blur_x, i64 %7983
  %7985 = getelementptr inbounds i16, i16* %7984, i64 -32
  %7986 = bitcast i16* %7985 to <16 x i16>*
  %7987 = load <16 x i16>, <16 x i16>* %7986, align 2, !tbaa !399
  %7988 = getelementptr inbounds i16, i16* %7984, i64 -16
  %7989 = bitcast i16* %7988 to <16 x i16>*
  %7990 = load <16 x i16>, <16 x i16>* %7989, align 2, !tbaa !399
  %7991 = add <16 x i16> %7977, %7968
  %7992 = add <16 x i16> %7991, %7987
  %7993 = add <16 x i16> %7980, %7971
  %7994 = add <16 x i16> %7993, %7990
  %7995 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7992, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7996 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7994, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7997 = shufflevector <16 x i16> %7995, <16 x i16> %7996, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7998 = lshr <32 x i16> %7997, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7999 = shufflevector <32 x i16> %7998, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8000 = sext i32 %a26 to i64
  %8001 = add nsw i64 %8000, 23
  %8002 = mul nsw i64 %8001, %109
  %8003 = add nsw i64 %111, %8002
  %8004 = getelementptr inbounds i16, i16* %65, i64 %8003
  %8005 = getelementptr inbounds i16, i16* %8004, i64 -32
  %8006 = bitcast i16* %8005 to <16 x i16>*
  store <16 x i16> %7999, <16 x i16>* %8006, align 2, !tbaa !401
  %8007 = shufflevector <32 x i16> %7998, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8008 = getelementptr inbounds i16, i16* %8004, i64 -16
  %8009 = bitcast i16* %8008 to <16 x i16>*
  store <16 x i16> %8007, <16 x i16>* %8009, align 2, !tbaa !401
  br label %after_bb559

"for blur_y.s0.x.x.rebased564":                   ; preds = %"for blur_y.s0.x.x.rebased564.preheader", %"consume blur_x571"
  %indvars.iv3200 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased564.preheader" ], [ %indvars.iv.next3201, %"consume blur_x571" ]
  %8010 = add nsw i64 %indvars.iv3200, %100
  %8011 = icmp slt i64 %8010, 1
  %8012 = trunc i64 %8010 to i32
  %8013 = shl nsw i32 %8012, 5
  %8014 = icmp sgt i32 %4, %8013
  %8015 = or i1 %8011, %8014
  br i1 %8015, label %"produce blur_x570", label %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge"

"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased564"
  %.pre3401 = shl nsw i64 %8010, 5
  br label %"consume blur_x571"

"end for blur_y.s0.x.x.rebased565":               ; preds = %"consume blur_x571", %after_bb559
  br i1 %101, label %"for blur_y.s0.x.x.rebased572.preheader", label %"end for blur_y.s0.x.x.rebased573", !prof !386

"for blur_y.s0.x.x.rebased572.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased565"
  %8016 = sext i32 %t1644 to i64
  %8017 = zext i32 %.pre-phi to i64
  %8018 = mul nsw i64 %8017, %108
  %8019 = sub nsw i64 %8018, %95
  %8020 = zext i32 %.pre-phi3346 to i64
  %8021 = mul nsw i64 %8020, %108
  %8022 = sub nsw i64 %8021, %95
  %8023 = zext i32 %.pre-phi3356 to i64
  %8024 = mul nsw i64 %8023, %108
  %8025 = sub nsw i64 %8024, %95
  %8026 = sext i32 %a26 to i64
  %8027 = add nsw i64 %8026, 23
  %8028 = mul nsw i64 %8027, %109
  %8029 = add nsw i64 %8028, %112
  br label %"for blur_y.s0.x.x.rebased572"

"produce blur_x570":                              ; preds = %"for blur_y.s0.x.x.rebased564"
  %t1040 = add nsw i32 %8013, %t2017
  %8030 = sext i32 %t1040 to i64
  %8031 = getelementptr inbounds i16, i16* %read_input, i64 %8030
  %8032 = getelementptr inbounds i16, i16* %8031, i64 1
  %8033 = bitcast i16* %8032 to <16 x i16>*
  %8034 = load <16 x i16>, <16 x i16>* %8033, align 2, !tbaa !396
  %8035 = getelementptr inbounds i16, i16* %8031, i64 17
  %8036 = bitcast i16* %8035 to <16 x i16>*
  %8037 = load <16 x i16>, <16 x i16>* %8036, align 2, !tbaa !396
  %8038 = getelementptr inbounds i16, i16* %8031, i64 2
  %8039 = bitcast i16* %8038 to <16 x i16>*
  %8040 = load <16 x i16>, <16 x i16>* %8039, align 2, !tbaa !396
  %8041 = getelementptr inbounds i16, i16* %8031, i64 18
  %8042 = bitcast i16* %8041 to <16 x i16>*
  %8043 = load <16 x i16>, <16 x i16>* %8042, align 2, !tbaa !396
  %8044 = bitcast i16* %8031 to <16 x i16>*
  %8045 = load <16 x i16>, <16 x i16>* %8044, align 2, !tbaa !396
  %8046 = getelementptr inbounds i16, i16* %8031, i64 16
  %8047 = bitcast i16* %8046 to <16 x i16>*
  %8048 = load <16 x i16>, <16 x i16>* %8047, align 2, !tbaa !396
  %8049 = add <16 x i16> %8040, %8034
  %8050 = add <16 x i16> %8049, %8045
  %8051 = add <16 x i16> %8043, %8037
  %8052 = add <16 x i16> %8051, %8048
  %8053 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8050, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8052, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8055 = shufflevector <16 x i16> %8053, <16 x i16> %8054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8056 = lshr <32 x i16> %8055, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8057 = shufflevector <32 x i16> %8056, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8058 = shl nsw i64 %8010, 5
  %8059 = add nsw i64 %8058, %7911
  %8060 = getelementptr inbounds i16, i16* %blur_x, i64 %8059
  %8061 = bitcast i16* %8060 to <16 x i16>*
  store <16 x i16> %8057, <16 x i16>* %8061, align 2, !tbaa !399
  %8062 = shufflevector <32 x i16> %8056, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8063 = getelementptr inbounds i16, i16* %8060, i64 16
  %8064 = bitcast i16* %8063 to <16 x i16>*
  store <16 x i16> %8062, <16 x i16>* %8064, align 2, !tbaa !399
  br label %"consume blur_x571"

"consume blur_x571":                              ; preds = %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge", %"produce blur_x570"
  %.pre-phi3402 = phi i64 [ %.pre3401, %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge" ], [ %8058, %"produce blur_x570" ]
  %8065 = add nsw i64 %7914, %.pre-phi3402
  %8066 = getelementptr inbounds i16, i16* %blur_x, i64 %8065
  %8067 = bitcast i16* %8066 to <16 x i16>*
  %8068 = load <16 x i16>, <16 x i16>* %8067, align 2, !tbaa !399
  %8069 = getelementptr inbounds i16, i16* %8066, i64 16
  %8070 = bitcast i16* %8069 to <16 x i16>*
  %8071 = load <16 x i16>, <16 x i16>* %8070, align 2, !tbaa !399
  %8072 = add nsw i64 %7917, %.pre-phi3402
  %8073 = getelementptr inbounds i16, i16* %blur_x, i64 %8072
  %8074 = bitcast i16* %8073 to <16 x i16>*
  %8075 = load <16 x i16>, <16 x i16>* %8074, align 2, !tbaa !399
  %8076 = getelementptr inbounds i16, i16* %8073, i64 16
  %8077 = bitcast i16* %8076 to <16 x i16>*
  %8078 = load <16 x i16>, <16 x i16>* %8077, align 2, !tbaa !399
  %8079 = add nsw i64 %7920, %.pre-phi3402
  %8080 = getelementptr inbounds i16, i16* %blur_x, i64 %8079
  %8081 = bitcast i16* %8080 to <16 x i16>*
  %8082 = load <16 x i16>, <16 x i16>* %8081, align 2, !tbaa !399
  %8083 = getelementptr inbounds i16, i16* %8080, i64 16
  %8084 = bitcast i16* %8083 to <16 x i16>*
  %8085 = load <16 x i16>, <16 x i16>* %8084, align 2, !tbaa !399
  %8086 = add <16 x i16> %8075, %8068
  %8087 = add <16 x i16> %8086, %8082
  %8088 = add <16 x i16> %8078, %8071
  %8089 = add <16 x i16> %8088, %8085
  %8090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8087, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8089, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8092 = shufflevector <16 x i16> %8090, <16 x i16> %8091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8093 = lshr <32 x i16> %8092, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8094 = shufflevector <32 x i16> %8093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8095 = add nsw i64 %7924, %.pre-phi3402
  %8096 = getelementptr inbounds i16, i16* %65, i64 %8095
  %8097 = bitcast i16* %8096 to <16 x i16>*
  store <16 x i16> %8094, <16 x i16>* %8097, align 2, !tbaa !401
  %8098 = shufflevector <32 x i16> %8093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8099 = getelementptr inbounds i16, i16* %8096, i64 16
  %8100 = bitcast i16* %8099 to <16 x i16>*
  store <16 x i16> %8098, <16 x i16>* %8100, align 2, !tbaa !401
  %indvars.iv.next3201 = add nuw nsw i64 %indvars.iv3200, 1
  %.not2599 = icmp eq i64 %indvars.iv.next3201, %180
  br i1 %.not2599, label %"end for blur_y.s0.x.x.rebased565", label %"for blur_y.s0.x.x.rebased564"

"for blur_y.s0.x.x.rebased572":                   ; preds = %"for blur_y.s0.x.x.rebased572.preheader", %"consume blur_x580"
  %blur_y.s0.x.x.rebased574 = phi i32 [ %8179, %"consume blur_x580" ], [ 0, %"for blur_y.s0.x.x.rebased572.preheader" ]
  %8101 = add nsw i32 %blur_y.s0.x.x.rebased574, %t1582
  %a252 = shl nsw i32 %8101, 5
  %8102 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %8102, i32 %a252, i32 %a14
  %8103 = icmp slt i32 %8101, 1
  %8104 = icmp sgt i32 %4, %a252
  %8105 = or i1 %8103, %8104
  br i1 %8105, label %"produce blur_x578", label %"consume blur_x580"

"end for blur_y.s0.x.x.rebased573":               ; preds = %"consume blur_x580", %"end for blur_y.s0.x.x.rebased565"
  br i1 %34, label %"produce blur_x584", label %after_bb581

"produce blur_x578":                              ; preds = %"for blur_y.s0.x.x.rebased572"
  %8106 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s579 = select i1 %8106, i32 %b258, i32 %4
  %t1045 = add nsw i32 %blur_x.s0.x.v1.base.s579, %t2017
  %8107 = sext i32 %t1045 to i64
  %8108 = getelementptr inbounds i16, i16* %read_input, i64 %8107
  %8109 = getelementptr inbounds i16, i16* %8108, i64 1
  %8110 = bitcast i16* %8109 to <16 x i16>*
  %8111 = load <16 x i16>, <16 x i16>* %8110, align 2, !tbaa !396
  %8112 = getelementptr inbounds i16, i16* %8108, i64 17
  %8113 = bitcast i16* %8112 to <16 x i16>*
  %8114 = load <16 x i16>, <16 x i16>* %8113, align 2, !tbaa !396
  %8115 = getelementptr inbounds i16, i16* %8108, i64 2
  %8116 = bitcast i16* %8115 to <16 x i16>*
  %8117 = load <16 x i16>, <16 x i16>* %8116, align 2, !tbaa !396
  %8118 = getelementptr inbounds i16, i16* %8108, i64 18
  %8119 = bitcast i16* %8118 to <16 x i16>*
  %8120 = load <16 x i16>, <16 x i16>* %8119, align 2, !tbaa !396
  %8121 = bitcast i16* %8108 to <16 x i16>*
  %8122 = load <16 x i16>, <16 x i16>* %8121, align 2, !tbaa !396
  %8123 = getelementptr inbounds i16, i16* %8108, i64 16
  %8124 = bitcast i16* %8123 to <16 x i16>*
  %8125 = load <16 x i16>, <16 x i16>* %8124, align 2, !tbaa !396
  %8126 = add <16 x i16> %8117, %8111
  %8127 = add <16 x i16> %8126, %8122
  %8128 = add <16 x i16> %8120, %8114
  %8129 = add <16 x i16> %8128, %8125
  %8130 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8127, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8131 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8129, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8132 = shufflevector <16 x i16> %8130, <16 x i16> %8131, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8133 = lshr <32 x i16> %8132, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8134 = shufflevector <32 x i16> %8133, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8135 = sext i32 %blur_x.s0.x.v1.base.s579 to i64
  %8136 = add nsw i64 %8135, %8016
  %8137 = getelementptr inbounds i16, i16* %blur_x, i64 %8136
  %8138 = bitcast i16* %8137 to <16 x i16>*
  store <16 x i16> %8134, <16 x i16>* %8138, align 2, !tbaa !399
  %8139 = shufflevector <32 x i16> %8133, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8140 = getelementptr inbounds i16, i16* %8137, i64 16
  %8141 = bitcast i16* %8140 to <16 x i16>*
  store <16 x i16> %8139, <16 x i16>* %8141, align 2, !tbaa !399
  br label %"consume blur_x580"

"consume blur_x580":                              ; preds = %"for blur_y.s0.x.x.rebased572", %"produce blur_x578"
  %8142 = sext i32 %b258 to i64
  %8143 = add nsw i64 %8019, %8142
  %8144 = getelementptr inbounds i16, i16* %blur_x, i64 %8143
  %8145 = bitcast i16* %8144 to <16 x i16>*
  %8146 = load <16 x i16>, <16 x i16>* %8145, align 2, !tbaa !399
  %8147 = getelementptr inbounds i16, i16* %8144, i64 16
  %8148 = bitcast i16* %8147 to <16 x i16>*
  %8149 = load <16 x i16>, <16 x i16>* %8148, align 2, !tbaa !399
  %8150 = add nsw i64 %8022, %8142
  %8151 = getelementptr inbounds i16, i16* %blur_x, i64 %8150
  %8152 = bitcast i16* %8151 to <16 x i16>*
  %8153 = load <16 x i16>, <16 x i16>* %8152, align 2, !tbaa !399
  %8154 = getelementptr inbounds i16, i16* %8151, i64 16
  %8155 = bitcast i16* %8154 to <16 x i16>*
  %8156 = load <16 x i16>, <16 x i16>* %8155, align 2, !tbaa !399
  %8157 = add nsw i64 %8025, %8142
  %8158 = getelementptr inbounds i16, i16* %blur_x, i64 %8157
  %8159 = bitcast i16* %8158 to <16 x i16>*
  %8160 = load <16 x i16>, <16 x i16>* %8159, align 2, !tbaa !399
  %8161 = getelementptr inbounds i16, i16* %8158, i64 16
  %8162 = bitcast i16* %8161 to <16 x i16>*
  %8163 = load <16 x i16>, <16 x i16>* %8162, align 2, !tbaa !399
  %8164 = add <16 x i16> %8153, %8146
  %8165 = add <16 x i16> %8164, %8160
  %8166 = add <16 x i16> %8156, %8149
  %8167 = add <16 x i16> %8166, %8163
  %8168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8165, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8169 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8167, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8170 = shufflevector <16 x i16> %8168, <16 x i16> %8169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8171 = lshr <32 x i16> %8170, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8172 = shufflevector <32 x i16> %8171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8173 = add nsw i64 %8029, %8142
  %8174 = getelementptr inbounds i16, i16* %65, i64 %8173
  %8175 = bitcast i16* %8174 to <16 x i16>*
  store <16 x i16> %8172, <16 x i16>* %8175, align 2, !tbaa !401
  %8176 = shufflevector <32 x i16> %8171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8177 = getelementptr inbounds i16, i16* %8174, i64 16
  %8178 = bitcast i16* %8177 to <16 x i16>*
  store <16 x i16> %8176, <16 x i16>* %8178, align 2, !tbaa !401
  %8179 = add nuw nsw i32 %blur_y.s0.x.x.rebased574, 1
  %.not2598 = icmp eq i32 %8179, %t1639
  br i1 %.not2598, label %"end for blur_y.s0.x.x.rebased573", label %"for blur_y.s0.x.x.rebased572"

after_bb581:                                      ; preds = %"end for blur_y.s0.x.x.rebased573", %"produce blur_x584"
  br i1 %99, label %"for blur_y.s0.x.x.rebased586.preheader", label %"end for blur_y.s0.x.x.rebased587", !prof !386

"for blur_y.s0.x.x.rebased586.preheader":         ; preds = %after_bb581
  %8180 = sext i32 %t1650 to i64
  %8181 = zext i32 %.pre-phi3346 to i64
  %8182 = mul nsw i64 %8181, %108
  %8183 = sub nsw i64 %8182, %95
  %8184 = zext i32 %.pre-phi3350 to i64
  %8185 = mul nsw i64 %8184, %108
  %8186 = sub nsw i64 %8185, %95
  %8187 = zext i32 %.pre-phi to i64
  %8188 = mul nsw i64 %8187, %108
  %8189 = sub nsw i64 %8188, %95
  %8190 = sext i32 %a26 to i64
  %8191 = add nsw i64 %8190, 24
  %8192 = mul nsw i64 %8191, %109
  %8193 = add nsw i64 %8192, %112
  br label %"for blur_y.s0.x.x.rebased586"

"produce blur_x584":                              ; preds = %"end for blur_y.s0.x.x.rebased573"
  %8194 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %8195 = getelementptr inbounds i16, i16* %8194, i64 -31
  %8196 = bitcast i16* %8195 to <16 x i16>*
  %8197 = load <16 x i16>, <16 x i16>* %8196, align 2, !tbaa !396
  %8198 = getelementptr inbounds i16, i16* %8194, i64 -15
  %8199 = bitcast i16* %8198 to <16 x i16>*
  %8200 = load <16 x i16>, <16 x i16>* %8199, align 2, !tbaa !396
  %8201 = getelementptr inbounds i16, i16* %8194, i64 -30
  %8202 = bitcast i16* %8201 to <16 x i16>*
  %8203 = load <16 x i16>, <16 x i16>* %8202, align 2, !tbaa !396
  %8204 = getelementptr inbounds i16, i16* %8194, i64 -14
  %8205 = bitcast i16* %8204 to <16 x i16>*
  %8206 = load <16 x i16>, <16 x i16>* %8205, align 2, !tbaa !396
  %8207 = getelementptr inbounds i16, i16* %8194, i64 -32
  %8208 = bitcast i16* %8207 to <16 x i16>*
  %8209 = load <16 x i16>, <16 x i16>* %8208, align 2, !tbaa !396
  %8210 = getelementptr inbounds i16, i16* %8194, i64 -16
  %8211 = bitcast i16* %8210 to <16 x i16>*
  %8212 = load <16 x i16>, <16 x i16>* %8211, align 2, !tbaa !396
  %8213 = add <16 x i16> %8203, %8197
  %8214 = add <16 x i16> %8213, %8209
  %8215 = add <16 x i16> %8206, %8200
  %8216 = add <16 x i16> %8215, %8212
  %8217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8214, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8218 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8216, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8219 = shufflevector <16 x i16> %8217, <16 x i16> %8218, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8220 = lshr <32 x i16> %8219, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8221 = shufflevector <32 x i16> %8220, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8222 = zext i32 %.pre-phi3350 to i64
  %8223 = mul nsw i64 %96, %8222
  %8224 = add nsw i64 %98, %8223
  %8225 = getelementptr inbounds i16, i16* %blur_x, i64 %8224
  %8226 = getelementptr inbounds i16, i16* %8225, i64 -32
  %8227 = bitcast i16* %8226 to <16 x i16>*
  store <16 x i16> %8221, <16 x i16>* %8227, align 2, !tbaa !399
  %8228 = shufflevector <32 x i16> %8220, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8229 = getelementptr inbounds i16, i16* %8225, i64 -16
  %8230 = bitcast i16* %8229 to <16 x i16>*
  store <16 x i16> %8228, <16 x i16>* %8230, align 2, !tbaa !399
  %8231 = zext i32 %.pre-phi3346 to i64
  %8232 = mul nsw i64 %8231, %108
  %8233 = add nsw i64 %8232, %93
  %8234 = getelementptr inbounds i16, i16* %blur_x, i64 %8233
  %8235 = getelementptr inbounds i16, i16* %8234, i64 -32
  %8236 = bitcast i16* %8235 to <16 x i16>*
  %8237 = load <16 x i16>, <16 x i16>* %8236, align 2, !tbaa !399
  %8238 = getelementptr inbounds i16, i16* %8234, i64 -16
  %8239 = bitcast i16* %8238 to <16 x i16>*
  %8240 = load <16 x i16>, <16 x i16>* %8239, align 2, !tbaa !399
  %8241 = mul nsw i64 %8222, %108
  %8242 = add nsw i64 %8241, %93
  %8243 = getelementptr inbounds i16, i16* %blur_x, i64 %8242
  %8244 = getelementptr inbounds i16, i16* %8243, i64 -32
  %8245 = bitcast i16* %8244 to <16 x i16>*
  %8246 = load <16 x i16>, <16 x i16>* %8245, align 2, !tbaa !399
  %8247 = getelementptr inbounds i16, i16* %8243, i64 -16
  %8248 = bitcast i16* %8247 to <16 x i16>*
  %8249 = load <16 x i16>, <16 x i16>* %8248, align 2, !tbaa !399
  %8250 = zext i32 %.pre-phi to i64
  %8251 = mul nsw i64 %8250, %108
  %8252 = add nsw i64 %8251, %93
  %8253 = getelementptr inbounds i16, i16* %blur_x, i64 %8252
  %8254 = getelementptr inbounds i16, i16* %8253, i64 -32
  %8255 = bitcast i16* %8254 to <16 x i16>*
  %8256 = load <16 x i16>, <16 x i16>* %8255, align 2, !tbaa !399
  %8257 = getelementptr inbounds i16, i16* %8253, i64 -16
  %8258 = bitcast i16* %8257 to <16 x i16>*
  %8259 = load <16 x i16>, <16 x i16>* %8258, align 2, !tbaa !399
  %8260 = add <16 x i16> %8246, %8237
  %8261 = add <16 x i16> %8260, %8256
  %8262 = add <16 x i16> %8249, %8240
  %8263 = add <16 x i16> %8262, %8259
  %8264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8261, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8263, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8266 = shufflevector <16 x i16> %8264, <16 x i16> %8265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8267 = lshr <32 x i16> %8266, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8268 = shufflevector <32 x i16> %8267, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8269 = sext i32 %a26 to i64
  %8270 = add nsw i64 %8269, 24
  %8271 = mul nsw i64 %8270, %109
  %8272 = add nsw i64 %111, %8271
  %8273 = getelementptr inbounds i16, i16* %65, i64 %8272
  %8274 = getelementptr inbounds i16, i16* %8273, i64 -32
  %8275 = bitcast i16* %8274 to <16 x i16>*
  store <16 x i16> %8268, <16 x i16>* %8275, align 2, !tbaa !401
  %8276 = shufflevector <32 x i16> %8267, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8277 = getelementptr inbounds i16, i16* %8273, i64 -16
  %8278 = bitcast i16* %8277 to <16 x i16>*
  store <16 x i16> %8276, <16 x i16>* %8278, align 2, !tbaa !401
  br label %after_bb581

"for blur_y.s0.x.x.rebased586":                   ; preds = %"for blur_y.s0.x.x.rebased586.preheader", %"consume blur_x593"
  %indvars.iv3203 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased586.preheader" ], [ %indvars.iv.next3204, %"consume blur_x593" ]
  %8279 = add nsw i64 %indvars.iv3203, %100
  %8280 = icmp slt i64 %8279, 1
  %8281 = trunc i64 %8279 to i32
  %8282 = shl nsw i32 %8281, 5
  %8283 = icmp sgt i32 %4, %8282
  %8284 = or i1 %8280, %8283
  br i1 %8284, label %"produce blur_x592", label %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge"

"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased586"
  %.pre3403 = shl nsw i64 %8279, 5
  br label %"consume blur_x593"

"end for blur_y.s0.x.x.rebased587":               ; preds = %"consume blur_x593", %after_bb581
  br i1 %101, label %"for blur_y.s0.x.x.rebased594.preheader", label %"end for blur_y.s0.x.x.rebased595", !prof !386

"for blur_y.s0.x.x.rebased594.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased587"
  %8285 = sext i32 %t1650 to i64
  %8286 = zext i32 %.pre-phi3346 to i64
  %8287 = mul nsw i64 %8286, %108
  %8288 = sub nsw i64 %8287, %95
  %8289 = zext i32 %.pre-phi3350 to i64
  %8290 = mul nsw i64 %8289, %108
  %8291 = sub nsw i64 %8290, %95
  %8292 = zext i32 %.pre-phi to i64
  %8293 = mul nsw i64 %8292, %108
  %8294 = sub nsw i64 %8293, %95
  %8295 = sext i32 %a26 to i64
  %8296 = add nsw i64 %8295, 24
  %8297 = mul nsw i64 %8296, %109
  %8298 = add nsw i64 %8297, %112
  br label %"for blur_y.s0.x.x.rebased594"

"produce blur_x592":                              ; preds = %"for blur_y.s0.x.x.rebased586"
  %t1056 = add nsw i32 %8282, %t2033
  %8299 = sext i32 %t1056 to i64
  %8300 = getelementptr inbounds i16, i16* %read_input, i64 %8299
  %8301 = getelementptr inbounds i16, i16* %8300, i64 1
  %8302 = bitcast i16* %8301 to <16 x i16>*
  %8303 = load <16 x i16>, <16 x i16>* %8302, align 2, !tbaa !396
  %8304 = getelementptr inbounds i16, i16* %8300, i64 17
  %8305 = bitcast i16* %8304 to <16 x i16>*
  %8306 = load <16 x i16>, <16 x i16>* %8305, align 2, !tbaa !396
  %8307 = getelementptr inbounds i16, i16* %8300, i64 2
  %8308 = bitcast i16* %8307 to <16 x i16>*
  %8309 = load <16 x i16>, <16 x i16>* %8308, align 2, !tbaa !396
  %8310 = getelementptr inbounds i16, i16* %8300, i64 18
  %8311 = bitcast i16* %8310 to <16 x i16>*
  %8312 = load <16 x i16>, <16 x i16>* %8311, align 2, !tbaa !396
  %8313 = bitcast i16* %8300 to <16 x i16>*
  %8314 = load <16 x i16>, <16 x i16>* %8313, align 2, !tbaa !396
  %8315 = getelementptr inbounds i16, i16* %8300, i64 16
  %8316 = bitcast i16* %8315 to <16 x i16>*
  %8317 = load <16 x i16>, <16 x i16>* %8316, align 2, !tbaa !396
  %8318 = add <16 x i16> %8309, %8303
  %8319 = add <16 x i16> %8318, %8314
  %8320 = add <16 x i16> %8312, %8306
  %8321 = add <16 x i16> %8320, %8317
  %8322 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8319, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8321, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8324 = shufflevector <16 x i16> %8322, <16 x i16> %8323, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8325 = lshr <32 x i16> %8324, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8326 = shufflevector <32 x i16> %8325, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8327 = shl nsw i64 %8279, 5
  %8328 = add nsw i64 %8327, %8180
  %8329 = getelementptr inbounds i16, i16* %blur_x, i64 %8328
  %8330 = bitcast i16* %8329 to <16 x i16>*
  store <16 x i16> %8326, <16 x i16>* %8330, align 2, !tbaa !399
  %8331 = shufflevector <32 x i16> %8325, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8332 = getelementptr inbounds i16, i16* %8329, i64 16
  %8333 = bitcast i16* %8332 to <16 x i16>*
  store <16 x i16> %8331, <16 x i16>* %8333, align 2, !tbaa !399
  br label %"consume blur_x593"

"consume blur_x593":                              ; preds = %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge", %"produce blur_x592"
  %.pre-phi3404 = phi i64 [ %.pre3403, %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge" ], [ %8327, %"produce blur_x592" ]
  %8334 = add nsw i64 %8183, %.pre-phi3404
  %8335 = getelementptr inbounds i16, i16* %blur_x, i64 %8334
  %8336 = bitcast i16* %8335 to <16 x i16>*
  %8337 = load <16 x i16>, <16 x i16>* %8336, align 2, !tbaa !399
  %8338 = getelementptr inbounds i16, i16* %8335, i64 16
  %8339 = bitcast i16* %8338 to <16 x i16>*
  %8340 = load <16 x i16>, <16 x i16>* %8339, align 2, !tbaa !399
  %8341 = add nsw i64 %8186, %.pre-phi3404
  %8342 = getelementptr inbounds i16, i16* %blur_x, i64 %8341
  %8343 = bitcast i16* %8342 to <16 x i16>*
  %8344 = load <16 x i16>, <16 x i16>* %8343, align 2, !tbaa !399
  %8345 = getelementptr inbounds i16, i16* %8342, i64 16
  %8346 = bitcast i16* %8345 to <16 x i16>*
  %8347 = load <16 x i16>, <16 x i16>* %8346, align 2, !tbaa !399
  %8348 = add nsw i64 %8189, %.pre-phi3404
  %8349 = getelementptr inbounds i16, i16* %blur_x, i64 %8348
  %8350 = bitcast i16* %8349 to <16 x i16>*
  %8351 = load <16 x i16>, <16 x i16>* %8350, align 2, !tbaa !399
  %8352 = getelementptr inbounds i16, i16* %8349, i64 16
  %8353 = bitcast i16* %8352 to <16 x i16>*
  %8354 = load <16 x i16>, <16 x i16>* %8353, align 2, !tbaa !399
  %8355 = add <16 x i16> %8344, %8337
  %8356 = add <16 x i16> %8355, %8351
  %8357 = add <16 x i16> %8347, %8340
  %8358 = add <16 x i16> %8357, %8354
  %8359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8356, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8358, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8361 = shufflevector <16 x i16> %8359, <16 x i16> %8360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8362 = lshr <32 x i16> %8361, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8363 = shufflevector <32 x i16> %8362, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8364 = add nsw i64 %8193, %.pre-phi3404
  %8365 = getelementptr inbounds i16, i16* %65, i64 %8364
  %8366 = bitcast i16* %8365 to <16 x i16>*
  store <16 x i16> %8363, <16 x i16>* %8366, align 2, !tbaa !401
  %8367 = shufflevector <32 x i16> %8362, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8368 = getelementptr inbounds i16, i16* %8365, i64 16
  %8369 = bitcast i16* %8368 to <16 x i16>*
  store <16 x i16> %8367, <16 x i16>* %8369, align 2, !tbaa !401
  %indvars.iv.next3204 = add nuw nsw i64 %indvars.iv3203, 1
  %.not2597 = icmp eq i64 %indvars.iv.next3204, %180
  br i1 %.not2597, label %"end for blur_y.s0.x.x.rebased587", label %"for blur_y.s0.x.x.rebased586"

"for blur_y.s0.x.x.rebased594":                   ; preds = %"for blur_y.s0.x.x.rebased594.preheader", %"consume blur_x602"
  %blur_y.s0.x.x.rebased596 = phi i32 [ %8448, %"consume blur_x602" ], [ 0, %"for blur_y.s0.x.x.rebased594.preheader" ]
  %8370 = add nsw i32 %blur_y.s0.x.x.rebased596, %t1582
  %a259 = shl nsw i32 %8370, 5
  %8371 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %8371, i32 %a259, i32 %a14
  %8372 = icmp slt i32 %8370, 1
  %8373 = icmp sgt i32 %4, %a259
  %8374 = or i1 %8372, %8373
  br i1 %8374, label %"produce blur_x600", label %"consume blur_x602"

"end for blur_y.s0.x.x.rebased595":               ; preds = %"consume blur_x602", %"end for blur_y.s0.x.x.rebased587"
  br i1 %34, label %"produce blur_x606", label %after_bb603

"produce blur_x600":                              ; preds = %"for blur_y.s0.x.x.rebased594"
  %8375 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s601 = select i1 %8375, i32 %b265, i32 %4
  %t1061 = add nsw i32 %blur_x.s0.x.v1.base.s601, %t2033
  %8376 = sext i32 %t1061 to i64
  %8377 = getelementptr inbounds i16, i16* %read_input, i64 %8376
  %8378 = getelementptr inbounds i16, i16* %8377, i64 1
  %8379 = bitcast i16* %8378 to <16 x i16>*
  %8380 = load <16 x i16>, <16 x i16>* %8379, align 2, !tbaa !396
  %8381 = getelementptr inbounds i16, i16* %8377, i64 17
  %8382 = bitcast i16* %8381 to <16 x i16>*
  %8383 = load <16 x i16>, <16 x i16>* %8382, align 2, !tbaa !396
  %8384 = getelementptr inbounds i16, i16* %8377, i64 2
  %8385 = bitcast i16* %8384 to <16 x i16>*
  %8386 = load <16 x i16>, <16 x i16>* %8385, align 2, !tbaa !396
  %8387 = getelementptr inbounds i16, i16* %8377, i64 18
  %8388 = bitcast i16* %8387 to <16 x i16>*
  %8389 = load <16 x i16>, <16 x i16>* %8388, align 2, !tbaa !396
  %8390 = bitcast i16* %8377 to <16 x i16>*
  %8391 = load <16 x i16>, <16 x i16>* %8390, align 2, !tbaa !396
  %8392 = getelementptr inbounds i16, i16* %8377, i64 16
  %8393 = bitcast i16* %8392 to <16 x i16>*
  %8394 = load <16 x i16>, <16 x i16>* %8393, align 2, !tbaa !396
  %8395 = add <16 x i16> %8386, %8380
  %8396 = add <16 x i16> %8395, %8391
  %8397 = add <16 x i16> %8389, %8383
  %8398 = add <16 x i16> %8397, %8394
  %8399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8396, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8398, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8401 = shufflevector <16 x i16> %8399, <16 x i16> %8400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8402 = lshr <32 x i16> %8401, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8403 = shufflevector <32 x i16> %8402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8404 = sext i32 %blur_x.s0.x.v1.base.s601 to i64
  %8405 = add nsw i64 %8404, %8285
  %8406 = getelementptr inbounds i16, i16* %blur_x, i64 %8405
  %8407 = bitcast i16* %8406 to <16 x i16>*
  store <16 x i16> %8403, <16 x i16>* %8407, align 2, !tbaa !399
  %8408 = shufflevector <32 x i16> %8402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8409 = getelementptr inbounds i16, i16* %8406, i64 16
  %8410 = bitcast i16* %8409 to <16 x i16>*
  store <16 x i16> %8408, <16 x i16>* %8410, align 2, !tbaa !399
  br label %"consume blur_x602"

"consume blur_x602":                              ; preds = %"for blur_y.s0.x.x.rebased594", %"produce blur_x600"
  %8411 = sext i32 %b265 to i64
  %8412 = add nsw i64 %8288, %8411
  %8413 = getelementptr inbounds i16, i16* %blur_x, i64 %8412
  %8414 = bitcast i16* %8413 to <16 x i16>*
  %8415 = load <16 x i16>, <16 x i16>* %8414, align 2, !tbaa !399
  %8416 = getelementptr inbounds i16, i16* %8413, i64 16
  %8417 = bitcast i16* %8416 to <16 x i16>*
  %8418 = load <16 x i16>, <16 x i16>* %8417, align 2, !tbaa !399
  %8419 = add nsw i64 %8291, %8411
  %8420 = getelementptr inbounds i16, i16* %blur_x, i64 %8419
  %8421 = bitcast i16* %8420 to <16 x i16>*
  %8422 = load <16 x i16>, <16 x i16>* %8421, align 2, !tbaa !399
  %8423 = getelementptr inbounds i16, i16* %8420, i64 16
  %8424 = bitcast i16* %8423 to <16 x i16>*
  %8425 = load <16 x i16>, <16 x i16>* %8424, align 2, !tbaa !399
  %8426 = add nsw i64 %8294, %8411
  %8427 = getelementptr inbounds i16, i16* %blur_x, i64 %8426
  %8428 = bitcast i16* %8427 to <16 x i16>*
  %8429 = load <16 x i16>, <16 x i16>* %8428, align 2, !tbaa !399
  %8430 = getelementptr inbounds i16, i16* %8427, i64 16
  %8431 = bitcast i16* %8430 to <16 x i16>*
  %8432 = load <16 x i16>, <16 x i16>* %8431, align 2, !tbaa !399
  %8433 = add <16 x i16> %8422, %8415
  %8434 = add <16 x i16> %8433, %8429
  %8435 = add <16 x i16> %8425, %8418
  %8436 = add <16 x i16> %8435, %8432
  %8437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8434, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8438 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8436, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8439 = shufflevector <16 x i16> %8437, <16 x i16> %8438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8440 = lshr <32 x i16> %8439, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8441 = shufflevector <32 x i16> %8440, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8442 = add nsw i64 %8298, %8411
  %8443 = getelementptr inbounds i16, i16* %65, i64 %8442
  %8444 = bitcast i16* %8443 to <16 x i16>*
  store <16 x i16> %8441, <16 x i16>* %8444, align 2, !tbaa !401
  %8445 = shufflevector <32 x i16> %8440, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8446 = getelementptr inbounds i16, i16* %8443, i64 16
  %8447 = bitcast i16* %8446 to <16 x i16>*
  store <16 x i16> %8445, <16 x i16>* %8447, align 2, !tbaa !401
  %8448 = add nuw nsw i32 %blur_y.s0.x.x.rebased596, 1
  %.not2596 = icmp eq i32 %8448, %t1639
  br i1 %.not2596, label %"end for blur_y.s0.x.x.rebased595", label %"for blur_y.s0.x.x.rebased594"

after_bb603:                                      ; preds = %"end for blur_y.s0.x.x.rebased595", %"produce blur_x606"
  br i1 %99, label %"for blur_y.s0.x.x.rebased608.preheader", label %"end for blur_y.s0.x.x.rebased609", !prof !386

"for blur_y.s0.x.x.rebased608.preheader":         ; preds = %after_bb603
  %8449 = sext i32 %t1666 to i64
  %8450 = zext i32 %.pre-phi3350 to i64
  %8451 = mul nsw i64 %8450, %108
  %8452 = sub nsw i64 %8451, %95
  %8453 = zext i32 %.pre-phi3356 to i64
  %8454 = mul nsw i64 %8453, %108
  %8455 = sub nsw i64 %8454, %95
  %8456 = zext i32 %.pre-phi3346 to i64
  %8457 = mul nsw i64 %8456, %108
  %8458 = sub nsw i64 %8457, %95
  %8459 = sext i32 %a26 to i64
  %8460 = add nsw i64 %8459, 25
  %8461 = mul nsw i64 %8460, %109
  %8462 = add nsw i64 %8461, %112
  br label %"for blur_y.s0.x.x.rebased608"

"produce blur_x606":                              ; preds = %"end for blur_y.s0.x.x.rebased595"
  %8463 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %8464 = getelementptr inbounds i16, i16* %8463, i64 -31
  %8465 = bitcast i16* %8464 to <16 x i16>*
  %8466 = load <16 x i16>, <16 x i16>* %8465, align 2, !tbaa !396
  %8467 = getelementptr inbounds i16, i16* %8463, i64 -15
  %8468 = bitcast i16* %8467 to <16 x i16>*
  %8469 = load <16 x i16>, <16 x i16>* %8468, align 2, !tbaa !396
  %8470 = getelementptr inbounds i16, i16* %8463, i64 -30
  %8471 = bitcast i16* %8470 to <16 x i16>*
  %8472 = load <16 x i16>, <16 x i16>* %8471, align 2, !tbaa !396
  %8473 = getelementptr inbounds i16, i16* %8463, i64 -14
  %8474 = bitcast i16* %8473 to <16 x i16>*
  %8475 = load <16 x i16>, <16 x i16>* %8474, align 2, !tbaa !396
  %8476 = getelementptr inbounds i16, i16* %8463, i64 -32
  %8477 = bitcast i16* %8476 to <16 x i16>*
  %8478 = load <16 x i16>, <16 x i16>* %8477, align 2, !tbaa !396
  %8479 = getelementptr inbounds i16, i16* %8463, i64 -16
  %8480 = bitcast i16* %8479 to <16 x i16>*
  %8481 = load <16 x i16>, <16 x i16>* %8480, align 2, !tbaa !396
  %8482 = add <16 x i16> %8472, %8466
  %8483 = add <16 x i16> %8482, %8478
  %8484 = add <16 x i16> %8475, %8469
  %8485 = add <16 x i16> %8484, %8481
  %8486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8483, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8485, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8488 = shufflevector <16 x i16> %8486, <16 x i16> %8487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8489 = lshr <32 x i16> %8488, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8490 = shufflevector <32 x i16> %8489, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8491 = zext i32 %.pre-phi3356 to i64
  %8492 = mul nsw i64 %96, %8491
  %8493 = add nsw i64 %98, %8492
  %8494 = getelementptr inbounds i16, i16* %blur_x, i64 %8493
  %8495 = getelementptr inbounds i16, i16* %8494, i64 -32
  %8496 = bitcast i16* %8495 to <16 x i16>*
  store <16 x i16> %8490, <16 x i16>* %8496, align 2, !tbaa !399
  %8497 = shufflevector <32 x i16> %8489, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8498 = getelementptr inbounds i16, i16* %8494, i64 -16
  %8499 = bitcast i16* %8498 to <16 x i16>*
  store <16 x i16> %8497, <16 x i16>* %8499, align 2, !tbaa !399
  %8500 = zext i32 %.pre-phi3350 to i64
  %8501 = mul nsw i64 %8500, %108
  %8502 = add nsw i64 %8501, %93
  %8503 = getelementptr inbounds i16, i16* %blur_x, i64 %8502
  %8504 = getelementptr inbounds i16, i16* %8503, i64 -32
  %8505 = bitcast i16* %8504 to <16 x i16>*
  %8506 = load <16 x i16>, <16 x i16>* %8505, align 2, !tbaa !399
  %8507 = getelementptr inbounds i16, i16* %8503, i64 -16
  %8508 = bitcast i16* %8507 to <16 x i16>*
  %8509 = load <16 x i16>, <16 x i16>* %8508, align 2, !tbaa !399
  %8510 = mul nsw i64 %8491, %108
  %8511 = add nsw i64 %8510, %93
  %8512 = getelementptr inbounds i16, i16* %blur_x, i64 %8511
  %8513 = getelementptr inbounds i16, i16* %8512, i64 -32
  %8514 = bitcast i16* %8513 to <16 x i16>*
  %8515 = load <16 x i16>, <16 x i16>* %8514, align 2, !tbaa !399
  %8516 = getelementptr inbounds i16, i16* %8512, i64 -16
  %8517 = bitcast i16* %8516 to <16 x i16>*
  %8518 = load <16 x i16>, <16 x i16>* %8517, align 2, !tbaa !399
  %8519 = zext i32 %.pre-phi3346 to i64
  %8520 = mul nsw i64 %8519, %108
  %8521 = add nsw i64 %8520, %93
  %8522 = getelementptr inbounds i16, i16* %blur_x, i64 %8521
  %8523 = getelementptr inbounds i16, i16* %8522, i64 -32
  %8524 = bitcast i16* %8523 to <16 x i16>*
  %8525 = load <16 x i16>, <16 x i16>* %8524, align 2, !tbaa !399
  %8526 = getelementptr inbounds i16, i16* %8522, i64 -16
  %8527 = bitcast i16* %8526 to <16 x i16>*
  %8528 = load <16 x i16>, <16 x i16>* %8527, align 2, !tbaa !399
  %8529 = add <16 x i16> %8515, %8506
  %8530 = add <16 x i16> %8529, %8525
  %8531 = add <16 x i16> %8518, %8509
  %8532 = add <16 x i16> %8531, %8528
  %8533 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8530, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8532, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8535 = shufflevector <16 x i16> %8533, <16 x i16> %8534, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8536 = lshr <32 x i16> %8535, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8537 = shufflevector <32 x i16> %8536, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8538 = sext i32 %a26 to i64
  %8539 = add nsw i64 %8538, 25
  %8540 = mul nsw i64 %8539, %109
  %8541 = add nsw i64 %111, %8540
  %8542 = getelementptr inbounds i16, i16* %65, i64 %8541
  %8543 = getelementptr inbounds i16, i16* %8542, i64 -32
  %8544 = bitcast i16* %8543 to <16 x i16>*
  store <16 x i16> %8537, <16 x i16>* %8544, align 2, !tbaa !401
  %8545 = shufflevector <32 x i16> %8536, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8546 = getelementptr inbounds i16, i16* %8542, i64 -16
  %8547 = bitcast i16* %8546 to <16 x i16>*
  store <16 x i16> %8545, <16 x i16>* %8547, align 2, !tbaa !401
  br label %after_bb603

"for blur_y.s0.x.x.rebased608":                   ; preds = %"for blur_y.s0.x.x.rebased608.preheader", %"consume blur_x615"
  %indvars.iv3206 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased608.preheader" ], [ %indvars.iv.next3207, %"consume blur_x615" ]
  %8548 = add nsw i64 %indvars.iv3206, %100
  %8549 = icmp slt i64 %8548, 1
  %8550 = trunc i64 %8548 to i32
  %8551 = shl nsw i32 %8550, 5
  %8552 = icmp sgt i32 %4, %8551
  %8553 = or i1 %8549, %8552
  br i1 %8553, label %"produce blur_x614", label %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge"

"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased608"
  %.pre3405 = shl nsw i64 %8548, 5
  br label %"consume blur_x615"

"end for blur_y.s0.x.x.rebased609":               ; preds = %"consume blur_x615", %after_bb603
  br i1 %101, label %"for blur_y.s0.x.x.rebased616.preheader", label %"end for blur_y.s0.x.x.rebased617", !prof !386

"for blur_y.s0.x.x.rebased616.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased609"
  %8554 = sext i32 %t1666 to i64
  %8555 = zext i32 %.pre-phi3350 to i64
  %8556 = mul nsw i64 %8555, %108
  %8557 = sub nsw i64 %8556, %95
  %8558 = zext i32 %.pre-phi3356 to i64
  %8559 = mul nsw i64 %8558, %108
  %8560 = sub nsw i64 %8559, %95
  %8561 = zext i32 %.pre-phi3346 to i64
  %8562 = mul nsw i64 %8561, %108
  %8563 = sub nsw i64 %8562, %95
  %8564 = sext i32 %a26 to i64
  %8565 = add nsw i64 %8564, 25
  %8566 = mul nsw i64 %8565, %109
  %8567 = add nsw i64 %8566, %112
  br label %"for blur_y.s0.x.x.rebased616"

"produce blur_x614":                              ; preds = %"for blur_y.s0.x.x.rebased608"
  %t1072 = add nsw i32 %8551, %t2049
  %8568 = sext i32 %t1072 to i64
  %8569 = getelementptr inbounds i16, i16* %read_input, i64 %8568
  %8570 = getelementptr inbounds i16, i16* %8569, i64 1
  %8571 = bitcast i16* %8570 to <16 x i16>*
  %8572 = load <16 x i16>, <16 x i16>* %8571, align 2, !tbaa !396
  %8573 = getelementptr inbounds i16, i16* %8569, i64 17
  %8574 = bitcast i16* %8573 to <16 x i16>*
  %8575 = load <16 x i16>, <16 x i16>* %8574, align 2, !tbaa !396
  %8576 = getelementptr inbounds i16, i16* %8569, i64 2
  %8577 = bitcast i16* %8576 to <16 x i16>*
  %8578 = load <16 x i16>, <16 x i16>* %8577, align 2, !tbaa !396
  %8579 = getelementptr inbounds i16, i16* %8569, i64 18
  %8580 = bitcast i16* %8579 to <16 x i16>*
  %8581 = load <16 x i16>, <16 x i16>* %8580, align 2, !tbaa !396
  %8582 = bitcast i16* %8569 to <16 x i16>*
  %8583 = load <16 x i16>, <16 x i16>* %8582, align 2, !tbaa !396
  %8584 = getelementptr inbounds i16, i16* %8569, i64 16
  %8585 = bitcast i16* %8584 to <16 x i16>*
  %8586 = load <16 x i16>, <16 x i16>* %8585, align 2, !tbaa !396
  %8587 = add <16 x i16> %8578, %8572
  %8588 = add <16 x i16> %8587, %8583
  %8589 = add <16 x i16> %8581, %8575
  %8590 = add <16 x i16> %8589, %8586
  %8591 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8588, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8592 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8590, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8593 = shufflevector <16 x i16> %8591, <16 x i16> %8592, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8594 = lshr <32 x i16> %8593, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8595 = shufflevector <32 x i16> %8594, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8596 = shl nsw i64 %8548, 5
  %8597 = add nsw i64 %8596, %8449
  %8598 = getelementptr inbounds i16, i16* %blur_x, i64 %8597
  %8599 = bitcast i16* %8598 to <16 x i16>*
  store <16 x i16> %8595, <16 x i16>* %8599, align 2, !tbaa !399
  %8600 = shufflevector <32 x i16> %8594, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8601 = getelementptr inbounds i16, i16* %8598, i64 16
  %8602 = bitcast i16* %8601 to <16 x i16>*
  store <16 x i16> %8600, <16 x i16>* %8602, align 2, !tbaa !399
  br label %"consume blur_x615"

"consume blur_x615":                              ; preds = %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge", %"produce blur_x614"
  %.pre-phi3406 = phi i64 [ %.pre3405, %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge" ], [ %8596, %"produce blur_x614" ]
  %8603 = add nsw i64 %8452, %.pre-phi3406
  %8604 = getelementptr inbounds i16, i16* %blur_x, i64 %8603
  %8605 = bitcast i16* %8604 to <16 x i16>*
  %8606 = load <16 x i16>, <16 x i16>* %8605, align 2, !tbaa !399
  %8607 = getelementptr inbounds i16, i16* %8604, i64 16
  %8608 = bitcast i16* %8607 to <16 x i16>*
  %8609 = load <16 x i16>, <16 x i16>* %8608, align 2, !tbaa !399
  %8610 = add nsw i64 %8455, %.pre-phi3406
  %8611 = getelementptr inbounds i16, i16* %blur_x, i64 %8610
  %8612 = bitcast i16* %8611 to <16 x i16>*
  %8613 = load <16 x i16>, <16 x i16>* %8612, align 2, !tbaa !399
  %8614 = getelementptr inbounds i16, i16* %8611, i64 16
  %8615 = bitcast i16* %8614 to <16 x i16>*
  %8616 = load <16 x i16>, <16 x i16>* %8615, align 2, !tbaa !399
  %8617 = add nsw i64 %8458, %.pre-phi3406
  %8618 = getelementptr inbounds i16, i16* %blur_x, i64 %8617
  %8619 = bitcast i16* %8618 to <16 x i16>*
  %8620 = load <16 x i16>, <16 x i16>* %8619, align 2, !tbaa !399
  %8621 = getelementptr inbounds i16, i16* %8618, i64 16
  %8622 = bitcast i16* %8621 to <16 x i16>*
  %8623 = load <16 x i16>, <16 x i16>* %8622, align 2, !tbaa !399
  %8624 = add <16 x i16> %8613, %8606
  %8625 = add <16 x i16> %8624, %8620
  %8626 = add <16 x i16> %8616, %8609
  %8627 = add <16 x i16> %8626, %8623
  %8628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8625, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8627, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8630 = shufflevector <16 x i16> %8628, <16 x i16> %8629, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8631 = lshr <32 x i16> %8630, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8632 = shufflevector <32 x i16> %8631, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8633 = add nsw i64 %8462, %.pre-phi3406
  %8634 = getelementptr inbounds i16, i16* %65, i64 %8633
  %8635 = bitcast i16* %8634 to <16 x i16>*
  store <16 x i16> %8632, <16 x i16>* %8635, align 2, !tbaa !401
  %8636 = shufflevector <32 x i16> %8631, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8637 = getelementptr inbounds i16, i16* %8634, i64 16
  %8638 = bitcast i16* %8637 to <16 x i16>*
  store <16 x i16> %8636, <16 x i16>* %8638, align 2, !tbaa !401
  %indvars.iv.next3207 = add nuw nsw i64 %indvars.iv3206, 1
  %.not2595 = icmp eq i64 %indvars.iv.next3207, %180
  br i1 %.not2595, label %"end for blur_y.s0.x.x.rebased609", label %"for blur_y.s0.x.x.rebased608"

"for blur_y.s0.x.x.rebased616":                   ; preds = %"for blur_y.s0.x.x.rebased616.preheader", %"consume blur_x624"
  %blur_y.s0.x.x.rebased618 = phi i32 [ %8717, %"consume blur_x624" ], [ 0, %"for blur_y.s0.x.x.rebased616.preheader" ]
  %8639 = add nsw i32 %blur_y.s0.x.x.rebased618, %t1582
  %a266 = shl nsw i32 %8639, 5
  %8640 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %8640, i32 %a266, i32 %a14
  %8641 = icmp slt i32 %8639, 1
  %8642 = icmp sgt i32 %4, %a266
  %8643 = or i1 %8641, %8642
  br i1 %8643, label %"produce blur_x622", label %"consume blur_x624"

"end for blur_y.s0.x.x.rebased617":               ; preds = %"consume blur_x624", %"end for blur_y.s0.x.x.rebased609"
  br i1 %34, label %"produce blur_x628", label %after_bb625

"produce blur_x622":                              ; preds = %"for blur_y.s0.x.x.rebased616"
  %8644 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s623 = select i1 %8644, i32 %b272, i32 %4
  %t1077 = add nsw i32 %blur_x.s0.x.v1.base.s623, %t2049
  %8645 = sext i32 %t1077 to i64
  %8646 = getelementptr inbounds i16, i16* %read_input, i64 %8645
  %8647 = getelementptr inbounds i16, i16* %8646, i64 1
  %8648 = bitcast i16* %8647 to <16 x i16>*
  %8649 = load <16 x i16>, <16 x i16>* %8648, align 2, !tbaa !396
  %8650 = getelementptr inbounds i16, i16* %8646, i64 17
  %8651 = bitcast i16* %8650 to <16 x i16>*
  %8652 = load <16 x i16>, <16 x i16>* %8651, align 2, !tbaa !396
  %8653 = getelementptr inbounds i16, i16* %8646, i64 2
  %8654 = bitcast i16* %8653 to <16 x i16>*
  %8655 = load <16 x i16>, <16 x i16>* %8654, align 2, !tbaa !396
  %8656 = getelementptr inbounds i16, i16* %8646, i64 18
  %8657 = bitcast i16* %8656 to <16 x i16>*
  %8658 = load <16 x i16>, <16 x i16>* %8657, align 2, !tbaa !396
  %8659 = bitcast i16* %8646 to <16 x i16>*
  %8660 = load <16 x i16>, <16 x i16>* %8659, align 2, !tbaa !396
  %8661 = getelementptr inbounds i16, i16* %8646, i64 16
  %8662 = bitcast i16* %8661 to <16 x i16>*
  %8663 = load <16 x i16>, <16 x i16>* %8662, align 2, !tbaa !396
  %8664 = add <16 x i16> %8655, %8649
  %8665 = add <16 x i16> %8664, %8660
  %8666 = add <16 x i16> %8658, %8652
  %8667 = add <16 x i16> %8666, %8663
  %8668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8665, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8667, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8670 = shufflevector <16 x i16> %8668, <16 x i16> %8669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8671 = lshr <32 x i16> %8670, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8672 = shufflevector <32 x i16> %8671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8673 = sext i32 %blur_x.s0.x.v1.base.s623 to i64
  %8674 = add nsw i64 %8673, %8554
  %8675 = getelementptr inbounds i16, i16* %blur_x, i64 %8674
  %8676 = bitcast i16* %8675 to <16 x i16>*
  store <16 x i16> %8672, <16 x i16>* %8676, align 2, !tbaa !399
  %8677 = shufflevector <32 x i16> %8671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8678 = getelementptr inbounds i16, i16* %8675, i64 16
  %8679 = bitcast i16* %8678 to <16 x i16>*
  store <16 x i16> %8677, <16 x i16>* %8679, align 2, !tbaa !399
  br label %"consume blur_x624"

"consume blur_x624":                              ; preds = %"for blur_y.s0.x.x.rebased616", %"produce blur_x622"
  %8680 = sext i32 %b272 to i64
  %8681 = add nsw i64 %8557, %8680
  %8682 = getelementptr inbounds i16, i16* %blur_x, i64 %8681
  %8683 = bitcast i16* %8682 to <16 x i16>*
  %8684 = load <16 x i16>, <16 x i16>* %8683, align 2, !tbaa !399
  %8685 = getelementptr inbounds i16, i16* %8682, i64 16
  %8686 = bitcast i16* %8685 to <16 x i16>*
  %8687 = load <16 x i16>, <16 x i16>* %8686, align 2, !tbaa !399
  %8688 = add nsw i64 %8560, %8680
  %8689 = getelementptr inbounds i16, i16* %blur_x, i64 %8688
  %8690 = bitcast i16* %8689 to <16 x i16>*
  %8691 = load <16 x i16>, <16 x i16>* %8690, align 2, !tbaa !399
  %8692 = getelementptr inbounds i16, i16* %8689, i64 16
  %8693 = bitcast i16* %8692 to <16 x i16>*
  %8694 = load <16 x i16>, <16 x i16>* %8693, align 2, !tbaa !399
  %8695 = add nsw i64 %8563, %8680
  %8696 = getelementptr inbounds i16, i16* %blur_x, i64 %8695
  %8697 = bitcast i16* %8696 to <16 x i16>*
  %8698 = load <16 x i16>, <16 x i16>* %8697, align 2, !tbaa !399
  %8699 = getelementptr inbounds i16, i16* %8696, i64 16
  %8700 = bitcast i16* %8699 to <16 x i16>*
  %8701 = load <16 x i16>, <16 x i16>* %8700, align 2, !tbaa !399
  %8702 = add <16 x i16> %8691, %8684
  %8703 = add <16 x i16> %8702, %8698
  %8704 = add <16 x i16> %8694, %8687
  %8705 = add <16 x i16> %8704, %8701
  %8706 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8703, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8707 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8705, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8708 = shufflevector <16 x i16> %8706, <16 x i16> %8707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8709 = lshr <32 x i16> %8708, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8710 = shufflevector <32 x i16> %8709, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8711 = add nsw i64 %8567, %8680
  %8712 = getelementptr inbounds i16, i16* %65, i64 %8711
  %8713 = bitcast i16* %8712 to <16 x i16>*
  store <16 x i16> %8710, <16 x i16>* %8713, align 2, !tbaa !401
  %8714 = shufflevector <32 x i16> %8709, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8715 = getelementptr inbounds i16, i16* %8712, i64 16
  %8716 = bitcast i16* %8715 to <16 x i16>*
  store <16 x i16> %8714, <16 x i16>* %8716, align 2, !tbaa !401
  %8717 = add nuw nsw i32 %blur_y.s0.x.x.rebased618, 1
  %.not2594 = icmp eq i32 %8717, %t1639
  br i1 %.not2594, label %"end for blur_y.s0.x.x.rebased617", label %"for blur_y.s0.x.x.rebased616"

after_bb625:                                      ; preds = %"end for blur_y.s0.x.x.rebased617", %"produce blur_x628"
  br i1 %99, label %"for blur_y.s0.x.x.rebased630.preheader", label %"end for blur_y.s0.x.x.rebased631", !prof !386

"for blur_y.s0.x.x.rebased630.preheader":         ; preds = %after_bb625
  %8718 = sext i32 %t1638 to i64
  %8719 = zext i32 %.pre-phi3356 to i64
  %8720 = mul nsw i64 %8719, %108
  %8721 = sub nsw i64 %8720, %95
  %8722 = zext i32 %.pre-phi to i64
  %8723 = mul nsw i64 %8722, %108
  %8724 = sub nsw i64 %8723, %95
  %8725 = zext i32 %.pre-phi3350 to i64
  %8726 = mul nsw i64 %8725, %108
  %8727 = sub nsw i64 %8726, %95
  %8728 = sext i32 %a26 to i64
  %8729 = add nsw i64 %8728, 26
  %8730 = mul nsw i64 %8729, %109
  %8731 = add nsw i64 %8730, %112
  br label %"for blur_y.s0.x.x.rebased630"

"produce blur_x628":                              ; preds = %"end for blur_y.s0.x.x.rebased617"
  %8732 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %8733 = getelementptr inbounds i16, i16* %8732, i64 -31
  %8734 = bitcast i16* %8733 to <16 x i16>*
  %8735 = load <16 x i16>, <16 x i16>* %8734, align 2, !tbaa !396
  %8736 = getelementptr inbounds i16, i16* %8732, i64 -15
  %8737 = bitcast i16* %8736 to <16 x i16>*
  %8738 = load <16 x i16>, <16 x i16>* %8737, align 2, !tbaa !396
  %8739 = getelementptr inbounds i16, i16* %8732, i64 -30
  %8740 = bitcast i16* %8739 to <16 x i16>*
  %8741 = load <16 x i16>, <16 x i16>* %8740, align 2, !tbaa !396
  %8742 = getelementptr inbounds i16, i16* %8732, i64 -14
  %8743 = bitcast i16* %8742 to <16 x i16>*
  %8744 = load <16 x i16>, <16 x i16>* %8743, align 2, !tbaa !396
  %8745 = getelementptr inbounds i16, i16* %8732, i64 -32
  %8746 = bitcast i16* %8745 to <16 x i16>*
  %8747 = load <16 x i16>, <16 x i16>* %8746, align 2, !tbaa !396
  %8748 = getelementptr inbounds i16, i16* %8732, i64 -16
  %8749 = bitcast i16* %8748 to <16 x i16>*
  %8750 = load <16 x i16>, <16 x i16>* %8749, align 2, !tbaa !396
  %8751 = add <16 x i16> %8741, %8735
  %8752 = add <16 x i16> %8751, %8747
  %8753 = add <16 x i16> %8744, %8738
  %8754 = add <16 x i16> %8753, %8750
  %8755 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8752, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8754, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8757 = shufflevector <16 x i16> %8755, <16 x i16> %8756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8758 = lshr <32 x i16> %8757, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8759 = shufflevector <32 x i16> %8758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8760 = zext i32 %.pre-phi to i64
  %8761 = mul nsw i64 %96, %8760
  %8762 = add nsw i64 %98, %8761
  %8763 = getelementptr inbounds i16, i16* %blur_x, i64 %8762
  %8764 = getelementptr inbounds i16, i16* %8763, i64 -32
  %8765 = bitcast i16* %8764 to <16 x i16>*
  store <16 x i16> %8759, <16 x i16>* %8765, align 2, !tbaa !399
  %8766 = shufflevector <32 x i16> %8758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8767 = getelementptr inbounds i16, i16* %8763, i64 -16
  %8768 = bitcast i16* %8767 to <16 x i16>*
  store <16 x i16> %8766, <16 x i16>* %8768, align 2, !tbaa !399
  %8769 = zext i32 %.pre-phi3356 to i64
  %8770 = mul nsw i64 %8769, %108
  %8771 = add nsw i64 %8770, %93
  %8772 = getelementptr inbounds i16, i16* %blur_x, i64 %8771
  %8773 = getelementptr inbounds i16, i16* %8772, i64 -32
  %8774 = bitcast i16* %8773 to <16 x i16>*
  %8775 = load <16 x i16>, <16 x i16>* %8774, align 2, !tbaa !399
  %8776 = getelementptr inbounds i16, i16* %8772, i64 -16
  %8777 = bitcast i16* %8776 to <16 x i16>*
  %8778 = load <16 x i16>, <16 x i16>* %8777, align 2, !tbaa !399
  %8779 = mul nsw i64 %8760, %108
  %8780 = add nsw i64 %8779, %93
  %8781 = getelementptr inbounds i16, i16* %blur_x, i64 %8780
  %8782 = getelementptr inbounds i16, i16* %8781, i64 -32
  %8783 = bitcast i16* %8782 to <16 x i16>*
  %8784 = load <16 x i16>, <16 x i16>* %8783, align 2, !tbaa !399
  %8785 = getelementptr inbounds i16, i16* %8781, i64 -16
  %8786 = bitcast i16* %8785 to <16 x i16>*
  %8787 = load <16 x i16>, <16 x i16>* %8786, align 2, !tbaa !399
  %8788 = zext i32 %.pre-phi3350 to i64
  %8789 = mul nsw i64 %8788, %108
  %8790 = add nsw i64 %8789, %93
  %8791 = getelementptr inbounds i16, i16* %blur_x, i64 %8790
  %8792 = getelementptr inbounds i16, i16* %8791, i64 -32
  %8793 = bitcast i16* %8792 to <16 x i16>*
  %8794 = load <16 x i16>, <16 x i16>* %8793, align 2, !tbaa !399
  %8795 = getelementptr inbounds i16, i16* %8791, i64 -16
  %8796 = bitcast i16* %8795 to <16 x i16>*
  %8797 = load <16 x i16>, <16 x i16>* %8796, align 2, !tbaa !399
  %8798 = add <16 x i16> %8784, %8775
  %8799 = add <16 x i16> %8798, %8794
  %8800 = add <16 x i16> %8787, %8778
  %8801 = add <16 x i16> %8800, %8797
  %8802 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8799, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8801, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8804 = shufflevector <16 x i16> %8802, <16 x i16> %8803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8805 = lshr <32 x i16> %8804, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8806 = shufflevector <32 x i16> %8805, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8807 = sext i32 %a26 to i64
  %8808 = add nsw i64 %8807, 26
  %8809 = mul nsw i64 %8808, %109
  %8810 = add nsw i64 %111, %8809
  %8811 = getelementptr inbounds i16, i16* %65, i64 %8810
  %8812 = getelementptr inbounds i16, i16* %8811, i64 -32
  %8813 = bitcast i16* %8812 to <16 x i16>*
  store <16 x i16> %8806, <16 x i16>* %8813, align 2, !tbaa !401
  %8814 = shufflevector <32 x i16> %8805, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8815 = getelementptr inbounds i16, i16* %8811, i64 -16
  %8816 = bitcast i16* %8815 to <16 x i16>*
  store <16 x i16> %8814, <16 x i16>* %8816, align 2, !tbaa !401
  br label %after_bb625

"for blur_y.s0.x.x.rebased630":                   ; preds = %"for blur_y.s0.x.x.rebased630.preheader", %"consume blur_x637"
  %indvars.iv3209 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased630.preheader" ], [ %indvars.iv.next3210, %"consume blur_x637" ]
  %8817 = add nsw i64 %indvars.iv3209, %100
  %8818 = icmp slt i64 %8817, 1
  %8819 = trunc i64 %8817 to i32
  %8820 = shl nsw i32 %8819, 5
  %8821 = icmp sgt i32 %4, %8820
  %8822 = or i1 %8818, %8821
  br i1 %8822, label %"produce blur_x636", label %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge"

"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased630"
  %.pre3407 = shl nsw i64 %8817, 5
  br label %"consume blur_x637"

"end for blur_y.s0.x.x.rebased631":               ; preds = %"consume blur_x637", %after_bb625
  br i1 %101, label %"for blur_y.s0.x.x.rebased638.preheader", label %"end for blur_y.s0.x.x.rebased639", !prof !386

"for blur_y.s0.x.x.rebased638.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased631"
  %8823 = sext i32 %t1638 to i64
  %8824 = zext i32 %.pre-phi3356 to i64
  %8825 = mul nsw i64 %8824, %108
  %8826 = sub nsw i64 %8825, %95
  %8827 = zext i32 %.pre-phi to i64
  %8828 = mul nsw i64 %8827, %108
  %8829 = sub nsw i64 %8828, %95
  %8830 = zext i32 %.pre-phi3350 to i64
  %8831 = mul nsw i64 %8830, %108
  %8832 = sub nsw i64 %8831, %95
  %8833 = sext i32 %a26 to i64
  %8834 = add nsw i64 %8833, 26
  %8835 = mul nsw i64 %8834, %109
  %8836 = add nsw i64 %8835, %112
  br label %"for blur_y.s0.x.x.rebased638"

"produce blur_x636":                              ; preds = %"for blur_y.s0.x.x.rebased630"
  %t1088 = add nsw i32 %8820, %t2065
  %8837 = sext i32 %t1088 to i64
  %8838 = getelementptr inbounds i16, i16* %read_input, i64 %8837
  %8839 = getelementptr inbounds i16, i16* %8838, i64 1
  %8840 = bitcast i16* %8839 to <16 x i16>*
  %8841 = load <16 x i16>, <16 x i16>* %8840, align 2, !tbaa !396
  %8842 = getelementptr inbounds i16, i16* %8838, i64 17
  %8843 = bitcast i16* %8842 to <16 x i16>*
  %8844 = load <16 x i16>, <16 x i16>* %8843, align 2, !tbaa !396
  %8845 = getelementptr inbounds i16, i16* %8838, i64 2
  %8846 = bitcast i16* %8845 to <16 x i16>*
  %8847 = load <16 x i16>, <16 x i16>* %8846, align 2, !tbaa !396
  %8848 = getelementptr inbounds i16, i16* %8838, i64 18
  %8849 = bitcast i16* %8848 to <16 x i16>*
  %8850 = load <16 x i16>, <16 x i16>* %8849, align 2, !tbaa !396
  %8851 = bitcast i16* %8838 to <16 x i16>*
  %8852 = load <16 x i16>, <16 x i16>* %8851, align 2, !tbaa !396
  %8853 = getelementptr inbounds i16, i16* %8838, i64 16
  %8854 = bitcast i16* %8853 to <16 x i16>*
  %8855 = load <16 x i16>, <16 x i16>* %8854, align 2, !tbaa !396
  %8856 = add <16 x i16> %8847, %8841
  %8857 = add <16 x i16> %8856, %8852
  %8858 = add <16 x i16> %8850, %8844
  %8859 = add <16 x i16> %8858, %8855
  %8860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8857, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8859, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8862 = shufflevector <16 x i16> %8860, <16 x i16> %8861, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8863 = lshr <32 x i16> %8862, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8864 = shufflevector <32 x i16> %8863, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8865 = shl nsw i64 %8817, 5
  %8866 = add nsw i64 %8865, %8718
  %8867 = getelementptr inbounds i16, i16* %blur_x, i64 %8866
  %8868 = bitcast i16* %8867 to <16 x i16>*
  store <16 x i16> %8864, <16 x i16>* %8868, align 2, !tbaa !399
  %8869 = shufflevector <32 x i16> %8863, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8870 = getelementptr inbounds i16, i16* %8867, i64 16
  %8871 = bitcast i16* %8870 to <16 x i16>*
  store <16 x i16> %8869, <16 x i16>* %8871, align 2, !tbaa !399
  br label %"consume blur_x637"

"consume blur_x637":                              ; preds = %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge", %"produce blur_x636"
  %.pre-phi3408 = phi i64 [ %.pre3407, %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge" ], [ %8865, %"produce blur_x636" ]
  %8872 = add nsw i64 %8721, %.pre-phi3408
  %8873 = getelementptr inbounds i16, i16* %blur_x, i64 %8872
  %8874 = bitcast i16* %8873 to <16 x i16>*
  %8875 = load <16 x i16>, <16 x i16>* %8874, align 2, !tbaa !399
  %8876 = getelementptr inbounds i16, i16* %8873, i64 16
  %8877 = bitcast i16* %8876 to <16 x i16>*
  %8878 = load <16 x i16>, <16 x i16>* %8877, align 2, !tbaa !399
  %8879 = add nsw i64 %8724, %.pre-phi3408
  %8880 = getelementptr inbounds i16, i16* %blur_x, i64 %8879
  %8881 = bitcast i16* %8880 to <16 x i16>*
  %8882 = load <16 x i16>, <16 x i16>* %8881, align 2, !tbaa !399
  %8883 = getelementptr inbounds i16, i16* %8880, i64 16
  %8884 = bitcast i16* %8883 to <16 x i16>*
  %8885 = load <16 x i16>, <16 x i16>* %8884, align 2, !tbaa !399
  %8886 = add nsw i64 %8727, %.pre-phi3408
  %8887 = getelementptr inbounds i16, i16* %blur_x, i64 %8886
  %8888 = bitcast i16* %8887 to <16 x i16>*
  %8889 = load <16 x i16>, <16 x i16>* %8888, align 2, !tbaa !399
  %8890 = getelementptr inbounds i16, i16* %8887, i64 16
  %8891 = bitcast i16* %8890 to <16 x i16>*
  %8892 = load <16 x i16>, <16 x i16>* %8891, align 2, !tbaa !399
  %8893 = add <16 x i16> %8882, %8875
  %8894 = add <16 x i16> %8893, %8889
  %8895 = add <16 x i16> %8885, %8878
  %8896 = add <16 x i16> %8895, %8892
  %8897 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8894, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8896, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8899 = shufflevector <16 x i16> %8897, <16 x i16> %8898, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8900 = lshr <32 x i16> %8899, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8901 = shufflevector <32 x i16> %8900, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8902 = add nsw i64 %8731, %.pre-phi3408
  %8903 = getelementptr inbounds i16, i16* %65, i64 %8902
  %8904 = bitcast i16* %8903 to <16 x i16>*
  store <16 x i16> %8901, <16 x i16>* %8904, align 2, !tbaa !401
  %8905 = shufflevector <32 x i16> %8900, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8906 = getelementptr inbounds i16, i16* %8903, i64 16
  %8907 = bitcast i16* %8906 to <16 x i16>*
  store <16 x i16> %8905, <16 x i16>* %8907, align 2, !tbaa !401
  %indvars.iv.next3210 = add nuw nsw i64 %indvars.iv3209, 1
  %.not2593 = icmp eq i64 %indvars.iv.next3210, %180
  br i1 %.not2593, label %"end for blur_y.s0.x.x.rebased631", label %"for blur_y.s0.x.x.rebased630"

"for blur_y.s0.x.x.rebased638":                   ; preds = %"for blur_y.s0.x.x.rebased638.preheader", %"consume blur_x646"
  %blur_y.s0.x.x.rebased640 = phi i32 [ %8986, %"consume blur_x646" ], [ 0, %"for blur_y.s0.x.x.rebased638.preheader" ]
  %8908 = add nsw i32 %blur_y.s0.x.x.rebased640, %t1582
  %a273 = shl nsw i32 %8908, 5
  %8909 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %8909, i32 %a273, i32 %a14
  %8910 = icmp slt i32 %8908, 1
  %8911 = icmp sgt i32 %4, %a273
  %8912 = or i1 %8910, %8911
  br i1 %8912, label %"produce blur_x644", label %"consume blur_x646"

"end for blur_y.s0.x.x.rebased639":               ; preds = %"consume blur_x646", %"end for blur_y.s0.x.x.rebased631"
  br i1 %34, label %"produce blur_x650", label %after_bb647

"produce blur_x644":                              ; preds = %"for blur_y.s0.x.x.rebased638"
  %8913 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s645 = select i1 %8913, i32 %b279, i32 %4
  %t1093 = add nsw i32 %blur_x.s0.x.v1.base.s645, %t2065
  %8914 = sext i32 %t1093 to i64
  %8915 = getelementptr inbounds i16, i16* %read_input, i64 %8914
  %8916 = getelementptr inbounds i16, i16* %8915, i64 1
  %8917 = bitcast i16* %8916 to <16 x i16>*
  %8918 = load <16 x i16>, <16 x i16>* %8917, align 2, !tbaa !396
  %8919 = getelementptr inbounds i16, i16* %8915, i64 17
  %8920 = bitcast i16* %8919 to <16 x i16>*
  %8921 = load <16 x i16>, <16 x i16>* %8920, align 2, !tbaa !396
  %8922 = getelementptr inbounds i16, i16* %8915, i64 2
  %8923 = bitcast i16* %8922 to <16 x i16>*
  %8924 = load <16 x i16>, <16 x i16>* %8923, align 2, !tbaa !396
  %8925 = getelementptr inbounds i16, i16* %8915, i64 18
  %8926 = bitcast i16* %8925 to <16 x i16>*
  %8927 = load <16 x i16>, <16 x i16>* %8926, align 2, !tbaa !396
  %8928 = bitcast i16* %8915 to <16 x i16>*
  %8929 = load <16 x i16>, <16 x i16>* %8928, align 2, !tbaa !396
  %8930 = getelementptr inbounds i16, i16* %8915, i64 16
  %8931 = bitcast i16* %8930 to <16 x i16>*
  %8932 = load <16 x i16>, <16 x i16>* %8931, align 2, !tbaa !396
  %8933 = add <16 x i16> %8924, %8918
  %8934 = add <16 x i16> %8933, %8929
  %8935 = add <16 x i16> %8927, %8921
  %8936 = add <16 x i16> %8935, %8932
  %8937 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8934, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8936, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8939 = shufflevector <16 x i16> %8937, <16 x i16> %8938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8940 = lshr <32 x i16> %8939, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8941 = shufflevector <32 x i16> %8940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8942 = sext i32 %blur_x.s0.x.v1.base.s645 to i64
  %8943 = add nsw i64 %8942, %8823
  %8944 = getelementptr inbounds i16, i16* %blur_x, i64 %8943
  %8945 = bitcast i16* %8944 to <16 x i16>*
  store <16 x i16> %8941, <16 x i16>* %8945, align 2, !tbaa !399
  %8946 = shufflevector <32 x i16> %8940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8947 = getelementptr inbounds i16, i16* %8944, i64 16
  %8948 = bitcast i16* %8947 to <16 x i16>*
  store <16 x i16> %8946, <16 x i16>* %8948, align 2, !tbaa !399
  br label %"consume blur_x646"

"consume blur_x646":                              ; preds = %"for blur_y.s0.x.x.rebased638", %"produce blur_x644"
  %8949 = sext i32 %b279 to i64
  %8950 = add nsw i64 %8826, %8949
  %8951 = getelementptr inbounds i16, i16* %blur_x, i64 %8950
  %8952 = bitcast i16* %8951 to <16 x i16>*
  %8953 = load <16 x i16>, <16 x i16>* %8952, align 2, !tbaa !399
  %8954 = getelementptr inbounds i16, i16* %8951, i64 16
  %8955 = bitcast i16* %8954 to <16 x i16>*
  %8956 = load <16 x i16>, <16 x i16>* %8955, align 2, !tbaa !399
  %8957 = add nsw i64 %8829, %8949
  %8958 = getelementptr inbounds i16, i16* %blur_x, i64 %8957
  %8959 = bitcast i16* %8958 to <16 x i16>*
  %8960 = load <16 x i16>, <16 x i16>* %8959, align 2, !tbaa !399
  %8961 = getelementptr inbounds i16, i16* %8958, i64 16
  %8962 = bitcast i16* %8961 to <16 x i16>*
  %8963 = load <16 x i16>, <16 x i16>* %8962, align 2, !tbaa !399
  %8964 = add nsw i64 %8832, %8949
  %8965 = getelementptr inbounds i16, i16* %blur_x, i64 %8964
  %8966 = bitcast i16* %8965 to <16 x i16>*
  %8967 = load <16 x i16>, <16 x i16>* %8966, align 2, !tbaa !399
  %8968 = getelementptr inbounds i16, i16* %8965, i64 16
  %8969 = bitcast i16* %8968 to <16 x i16>*
  %8970 = load <16 x i16>, <16 x i16>* %8969, align 2, !tbaa !399
  %8971 = add <16 x i16> %8960, %8953
  %8972 = add <16 x i16> %8971, %8967
  %8973 = add <16 x i16> %8963, %8956
  %8974 = add <16 x i16> %8973, %8970
  %8975 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8972, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8976 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8974, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8977 = shufflevector <16 x i16> %8975, <16 x i16> %8976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8978 = lshr <32 x i16> %8977, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8979 = shufflevector <32 x i16> %8978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8980 = add nsw i64 %8836, %8949
  %8981 = getelementptr inbounds i16, i16* %65, i64 %8980
  %8982 = bitcast i16* %8981 to <16 x i16>*
  store <16 x i16> %8979, <16 x i16>* %8982, align 2, !tbaa !401
  %8983 = shufflevector <32 x i16> %8978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8984 = getelementptr inbounds i16, i16* %8981, i64 16
  %8985 = bitcast i16* %8984 to <16 x i16>*
  store <16 x i16> %8983, <16 x i16>* %8985, align 2, !tbaa !401
  %8986 = add nuw nsw i32 %blur_y.s0.x.x.rebased640, 1
  %.not2592 = icmp eq i32 %8986, %t1639
  br i1 %.not2592, label %"end for blur_y.s0.x.x.rebased639", label %"for blur_y.s0.x.x.rebased638"

after_bb647:                                      ; preds = %"end for blur_y.s0.x.x.rebased639", %"produce blur_x650"
  br i1 %99, label %"for blur_y.s0.x.x.rebased652.preheader", label %"end for blur_y.s0.x.x.rebased653", !prof !386

"for blur_y.s0.x.x.rebased652.preheader":         ; preds = %after_bb647
  %8987 = sext i32 %t1644 to i64
  %8988 = zext i32 %.pre-phi to i64
  %8989 = mul nsw i64 %8988, %108
  %8990 = sub nsw i64 %8989, %95
  %8991 = zext i32 %.pre-phi3346 to i64
  %8992 = mul nsw i64 %8991, %108
  %8993 = sub nsw i64 %8992, %95
  %8994 = zext i32 %.pre-phi3356 to i64
  %8995 = mul nsw i64 %8994, %108
  %8996 = sub nsw i64 %8995, %95
  %8997 = sext i32 %a26 to i64
  %8998 = add nsw i64 %8997, 27
  %8999 = mul nsw i64 %8998, %109
  %9000 = add nsw i64 %8999, %112
  br label %"for blur_y.s0.x.x.rebased652"

"produce blur_x650":                              ; preds = %"end for blur_y.s0.x.x.rebased639"
  %9001 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %9002 = getelementptr inbounds i16, i16* %9001, i64 -31
  %9003 = bitcast i16* %9002 to <16 x i16>*
  %9004 = load <16 x i16>, <16 x i16>* %9003, align 2, !tbaa !396
  %9005 = getelementptr inbounds i16, i16* %9001, i64 -15
  %9006 = bitcast i16* %9005 to <16 x i16>*
  %9007 = load <16 x i16>, <16 x i16>* %9006, align 2, !tbaa !396
  %9008 = getelementptr inbounds i16, i16* %9001, i64 -30
  %9009 = bitcast i16* %9008 to <16 x i16>*
  %9010 = load <16 x i16>, <16 x i16>* %9009, align 2, !tbaa !396
  %9011 = getelementptr inbounds i16, i16* %9001, i64 -14
  %9012 = bitcast i16* %9011 to <16 x i16>*
  %9013 = load <16 x i16>, <16 x i16>* %9012, align 2, !tbaa !396
  %9014 = getelementptr inbounds i16, i16* %9001, i64 -32
  %9015 = bitcast i16* %9014 to <16 x i16>*
  %9016 = load <16 x i16>, <16 x i16>* %9015, align 2, !tbaa !396
  %9017 = getelementptr inbounds i16, i16* %9001, i64 -16
  %9018 = bitcast i16* %9017 to <16 x i16>*
  %9019 = load <16 x i16>, <16 x i16>* %9018, align 2, !tbaa !396
  %9020 = add <16 x i16> %9010, %9004
  %9021 = add <16 x i16> %9020, %9016
  %9022 = add <16 x i16> %9013, %9007
  %9023 = add <16 x i16> %9022, %9019
  %9024 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9021, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9025 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9023, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9026 = shufflevector <16 x i16> %9024, <16 x i16> %9025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9027 = lshr <32 x i16> %9026, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9028 = shufflevector <32 x i16> %9027, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9029 = zext i32 %.pre-phi3346 to i64
  %9030 = mul nsw i64 %96, %9029
  %9031 = add nsw i64 %98, %9030
  %9032 = getelementptr inbounds i16, i16* %blur_x, i64 %9031
  %9033 = getelementptr inbounds i16, i16* %9032, i64 -32
  %9034 = bitcast i16* %9033 to <16 x i16>*
  store <16 x i16> %9028, <16 x i16>* %9034, align 2, !tbaa !399
  %9035 = shufflevector <32 x i16> %9027, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9036 = getelementptr inbounds i16, i16* %9032, i64 -16
  %9037 = bitcast i16* %9036 to <16 x i16>*
  store <16 x i16> %9035, <16 x i16>* %9037, align 2, !tbaa !399
  %9038 = zext i32 %.pre-phi to i64
  %9039 = mul nsw i64 %9038, %108
  %9040 = add nsw i64 %9039, %93
  %9041 = getelementptr inbounds i16, i16* %blur_x, i64 %9040
  %9042 = getelementptr inbounds i16, i16* %9041, i64 -32
  %9043 = bitcast i16* %9042 to <16 x i16>*
  %9044 = load <16 x i16>, <16 x i16>* %9043, align 2, !tbaa !399
  %9045 = getelementptr inbounds i16, i16* %9041, i64 -16
  %9046 = bitcast i16* %9045 to <16 x i16>*
  %9047 = load <16 x i16>, <16 x i16>* %9046, align 2, !tbaa !399
  %9048 = mul nsw i64 %9029, %108
  %9049 = add nsw i64 %9048, %93
  %9050 = getelementptr inbounds i16, i16* %blur_x, i64 %9049
  %9051 = getelementptr inbounds i16, i16* %9050, i64 -32
  %9052 = bitcast i16* %9051 to <16 x i16>*
  %9053 = load <16 x i16>, <16 x i16>* %9052, align 2, !tbaa !399
  %9054 = getelementptr inbounds i16, i16* %9050, i64 -16
  %9055 = bitcast i16* %9054 to <16 x i16>*
  %9056 = load <16 x i16>, <16 x i16>* %9055, align 2, !tbaa !399
  %9057 = zext i32 %.pre-phi3356 to i64
  %9058 = mul nsw i64 %9057, %108
  %9059 = add nsw i64 %9058, %93
  %9060 = getelementptr inbounds i16, i16* %blur_x, i64 %9059
  %9061 = getelementptr inbounds i16, i16* %9060, i64 -32
  %9062 = bitcast i16* %9061 to <16 x i16>*
  %9063 = load <16 x i16>, <16 x i16>* %9062, align 2, !tbaa !399
  %9064 = getelementptr inbounds i16, i16* %9060, i64 -16
  %9065 = bitcast i16* %9064 to <16 x i16>*
  %9066 = load <16 x i16>, <16 x i16>* %9065, align 2, !tbaa !399
  %9067 = add <16 x i16> %9053, %9044
  %9068 = add <16 x i16> %9067, %9063
  %9069 = add <16 x i16> %9056, %9047
  %9070 = add <16 x i16> %9069, %9066
  %9071 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9068, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9070, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9073 = shufflevector <16 x i16> %9071, <16 x i16> %9072, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9074 = lshr <32 x i16> %9073, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9075 = shufflevector <32 x i16> %9074, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9076 = sext i32 %a26 to i64
  %9077 = add nsw i64 %9076, 27
  %9078 = mul nsw i64 %9077, %109
  %9079 = add nsw i64 %111, %9078
  %9080 = getelementptr inbounds i16, i16* %65, i64 %9079
  %9081 = getelementptr inbounds i16, i16* %9080, i64 -32
  %9082 = bitcast i16* %9081 to <16 x i16>*
  store <16 x i16> %9075, <16 x i16>* %9082, align 2, !tbaa !401
  %9083 = shufflevector <32 x i16> %9074, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9084 = getelementptr inbounds i16, i16* %9080, i64 -16
  %9085 = bitcast i16* %9084 to <16 x i16>*
  store <16 x i16> %9083, <16 x i16>* %9085, align 2, !tbaa !401
  br label %after_bb647

"for blur_y.s0.x.x.rebased652":                   ; preds = %"for blur_y.s0.x.x.rebased652.preheader", %"consume blur_x659"
  %indvars.iv3212 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased652.preheader" ], [ %indvars.iv.next3213, %"consume blur_x659" ]
  %9086 = add nsw i64 %indvars.iv3212, %100
  %9087 = icmp slt i64 %9086, 1
  %9088 = trunc i64 %9086 to i32
  %9089 = shl nsw i32 %9088, 5
  %9090 = icmp sgt i32 %4, %9089
  %9091 = or i1 %9087, %9090
  br i1 %9091, label %"produce blur_x658", label %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge"

"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased652"
  %.pre3409 = shl nsw i64 %9086, 5
  br label %"consume blur_x659"

"end for blur_y.s0.x.x.rebased653":               ; preds = %"consume blur_x659", %after_bb647
  br i1 %101, label %"for blur_y.s0.x.x.rebased660.preheader", label %"end for blur_y.s0.x.x.rebased661", !prof !386

"for blur_y.s0.x.x.rebased660.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased653"
  %9092 = sext i32 %t1644 to i64
  %9093 = zext i32 %.pre-phi to i64
  %9094 = mul nsw i64 %9093, %108
  %9095 = sub nsw i64 %9094, %95
  %9096 = zext i32 %.pre-phi3346 to i64
  %9097 = mul nsw i64 %9096, %108
  %9098 = sub nsw i64 %9097, %95
  %9099 = zext i32 %.pre-phi3356 to i64
  %9100 = mul nsw i64 %9099, %108
  %9101 = sub nsw i64 %9100, %95
  %9102 = sext i32 %a26 to i64
  %9103 = add nsw i64 %9102, 27
  %9104 = mul nsw i64 %9103, %109
  %9105 = add nsw i64 %9104, %112
  br label %"for blur_y.s0.x.x.rebased660"

"produce blur_x658":                              ; preds = %"for blur_y.s0.x.x.rebased652"
  %t1104 = add nsw i32 %9089, %t2081
  %9106 = sext i32 %t1104 to i64
  %9107 = getelementptr inbounds i16, i16* %read_input, i64 %9106
  %9108 = getelementptr inbounds i16, i16* %9107, i64 1
  %9109 = bitcast i16* %9108 to <16 x i16>*
  %9110 = load <16 x i16>, <16 x i16>* %9109, align 2, !tbaa !396
  %9111 = getelementptr inbounds i16, i16* %9107, i64 17
  %9112 = bitcast i16* %9111 to <16 x i16>*
  %9113 = load <16 x i16>, <16 x i16>* %9112, align 2, !tbaa !396
  %9114 = getelementptr inbounds i16, i16* %9107, i64 2
  %9115 = bitcast i16* %9114 to <16 x i16>*
  %9116 = load <16 x i16>, <16 x i16>* %9115, align 2, !tbaa !396
  %9117 = getelementptr inbounds i16, i16* %9107, i64 18
  %9118 = bitcast i16* %9117 to <16 x i16>*
  %9119 = load <16 x i16>, <16 x i16>* %9118, align 2, !tbaa !396
  %9120 = bitcast i16* %9107 to <16 x i16>*
  %9121 = load <16 x i16>, <16 x i16>* %9120, align 2, !tbaa !396
  %9122 = getelementptr inbounds i16, i16* %9107, i64 16
  %9123 = bitcast i16* %9122 to <16 x i16>*
  %9124 = load <16 x i16>, <16 x i16>* %9123, align 2, !tbaa !396
  %9125 = add <16 x i16> %9116, %9110
  %9126 = add <16 x i16> %9125, %9121
  %9127 = add <16 x i16> %9119, %9113
  %9128 = add <16 x i16> %9127, %9124
  %9129 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9126, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9130 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9128, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9131 = shufflevector <16 x i16> %9129, <16 x i16> %9130, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9132 = lshr <32 x i16> %9131, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9133 = shufflevector <32 x i16> %9132, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9134 = shl nsw i64 %9086, 5
  %9135 = add nsw i64 %9134, %8987
  %9136 = getelementptr inbounds i16, i16* %blur_x, i64 %9135
  %9137 = bitcast i16* %9136 to <16 x i16>*
  store <16 x i16> %9133, <16 x i16>* %9137, align 2, !tbaa !399
  %9138 = shufflevector <32 x i16> %9132, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9139 = getelementptr inbounds i16, i16* %9136, i64 16
  %9140 = bitcast i16* %9139 to <16 x i16>*
  store <16 x i16> %9138, <16 x i16>* %9140, align 2, !tbaa !399
  br label %"consume blur_x659"

"consume blur_x659":                              ; preds = %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge", %"produce blur_x658"
  %.pre-phi3410 = phi i64 [ %.pre3409, %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge" ], [ %9134, %"produce blur_x658" ]
  %9141 = add nsw i64 %8990, %.pre-phi3410
  %9142 = getelementptr inbounds i16, i16* %blur_x, i64 %9141
  %9143 = bitcast i16* %9142 to <16 x i16>*
  %9144 = load <16 x i16>, <16 x i16>* %9143, align 2, !tbaa !399
  %9145 = getelementptr inbounds i16, i16* %9142, i64 16
  %9146 = bitcast i16* %9145 to <16 x i16>*
  %9147 = load <16 x i16>, <16 x i16>* %9146, align 2, !tbaa !399
  %9148 = add nsw i64 %8993, %.pre-phi3410
  %9149 = getelementptr inbounds i16, i16* %blur_x, i64 %9148
  %9150 = bitcast i16* %9149 to <16 x i16>*
  %9151 = load <16 x i16>, <16 x i16>* %9150, align 2, !tbaa !399
  %9152 = getelementptr inbounds i16, i16* %9149, i64 16
  %9153 = bitcast i16* %9152 to <16 x i16>*
  %9154 = load <16 x i16>, <16 x i16>* %9153, align 2, !tbaa !399
  %9155 = add nsw i64 %8996, %.pre-phi3410
  %9156 = getelementptr inbounds i16, i16* %blur_x, i64 %9155
  %9157 = bitcast i16* %9156 to <16 x i16>*
  %9158 = load <16 x i16>, <16 x i16>* %9157, align 2, !tbaa !399
  %9159 = getelementptr inbounds i16, i16* %9156, i64 16
  %9160 = bitcast i16* %9159 to <16 x i16>*
  %9161 = load <16 x i16>, <16 x i16>* %9160, align 2, !tbaa !399
  %9162 = add <16 x i16> %9151, %9144
  %9163 = add <16 x i16> %9162, %9158
  %9164 = add <16 x i16> %9154, %9147
  %9165 = add <16 x i16> %9164, %9161
  %9166 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9163, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9165, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9168 = shufflevector <16 x i16> %9166, <16 x i16> %9167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9169 = lshr <32 x i16> %9168, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9170 = shufflevector <32 x i16> %9169, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9171 = add nsw i64 %9000, %.pre-phi3410
  %9172 = getelementptr inbounds i16, i16* %65, i64 %9171
  %9173 = bitcast i16* %9172 to <16 x i16>*
  store <16 x i16> %9170, <16 x i16>* %9173, align 2, !tbaa !401
  %9174 = shufflevector <32 x i16> %9169, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9175 = getelementptr inbounds i16, i16* %9172, i64 16
  %9176 = bitcast i16* %9175 to <16 x i16>*
  store <16 x i16> %9174, <16 x i16>* %9176, align 2, !tbaa !401
  %indvars.iv.next3213 = add nuw nsw i64 %indvars.iv3212, 1
  %.not2591 = icmp eq i64 %indvars.iv.next3213, %180
  br i1 %.not2591, label %"end for blur_y.s0.x.x.rebased653", label %"for blur_y.s0.x.x.rebased652"

"for blur_y.s0.x.x.rebased660":                   ; preds = %"for blur_y.s0.x.x.rebased660.preheader", %"consume blur_x668"
  %blur_y.s0.x.x.rebased662 = phi i32 [ %9255, %"consume blur_x668" ], [ 0, %"for blur_y.s0.x.x.rebased660.preheader" ]
  %9177 = add nsw i32 %blur_y.s0.x.x.rebased662, %t1582
  %a280 = shl nsw i32 %9177, 5
  %9178 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %9178, i32 %a280, i32 %a14
  %9179 = icmp slt i32 %9177, 1
  %9180 = icmp sgt i32 %4, %a280
  %9181 = or i1 %9179, %9180
  br i1 %9181, label %"produce blur_x666", label %"consume blur_x668"

"end for blur_y.s0.x.x.rebased661":               ; preds = %"consume blur_x668", %"end for blur_y.s0.x.x.rebased653"
  br i1 %34, label %"produce blur_x672", label %after_bb669

"produce blur_x666":                              ; preds = %"for blur_y.s0.x.x.rebased660"
  %9182 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s667 = select i1 %9182, i32 %b286, i32 %4
  %t1109 = add nsw i32 %blur_x.s0.x.v1.base.s667, %t2081
  %9183 = sext i32 %t1109 to i64
  %9184 = getelementptr inbounds i16, i16* %read_input, i64 %9183
  %9185 = getelementptr inbounds i16, i16* %9184, i64 1
  %9186 = bitcast i16* %9185 to <16 x i16>*
  %9187 = load <16 x i16>, <16 x i16>* %9186, align 2, !tbaa !396
  %9188 = getelementptr inbounds i16, i16* %9184, i64 17
  %9189 = bitcast i16* %9188 to <16 x i16>*
  %9190 = load <16 x i16>, <16 x i16>* %9189, align 2, !tbaa !396
  %9191 = getelementptr inbounds i16, i16* %9184, i64 2
  %9192 = bitcast i16* %9191 to <16 x i16>*
  %9193 = load <16 x i16>, <16 x i16>* %9192, align 2, !tbaa !396
  %9194 = getelementptr inbounds i16, i16* %9184, i64 18
  %9195 = bitcast i16* %9194 to <16 x i16>*
  %9196 = load <16 x i16>, <16 x i16>* %9195, align 2, !tbaa !396
  %9197 = bitcast i16* %9184 to <16 x i16>*
  %9198 = load <16 x i16>, <16 x i16>* %9197, align 2, !tbaa !396
  %9199 = getelementptr inbounds i16, i16* %9184, i64 16
  %9200 = bitcast i16* %9199 to <16 x i16>*
  %9201 = load <16 x i16>, <16 x i16>* %9200, align 2, !tbaa !396
  %9202 = add <16 x i16> %9193, %9187
  %9203 = add <16 x i16> %9202, %9198
  %9204 = add <16 x i16> %9196, %9190
  %9205 = add <16 x i16> %9204, %9201
  %9206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9203, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9205, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9208 = shufflevector <16 x i16> %9206, <16 x i16> %9207, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9209 = lshr <32 x i16> %9208, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9210 = shufflevector <32 x i16> %9209, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9211 = sext i32 %blur_x.s0.x.v1.base.s667 to i64
  %9212 = add nsw i64 %9211, %9092
  %9213 = getelementptr inbounds i16, i16* %blur_x, i64 %9212
  %9214 = bitcast i16* %9213 to <16 x i16>*
  store <16 x i16> %9210, <16 x i16>* %9214, align 2, !tbaa !399
  %9215 = shufflevector <32 x i16> %9209, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9216 = getelementptr inbounds i16, i16* %9213, i64 16
  %9217 = bitcast i16* %9216 to <16 x i16>*
  store <16 x i16> %9215, <16 x i16>* %9217, align 2, !tbaa !399
  br label %"consume blur_x668"

"consume blur_x668":                              ; preds = %"for blur_y.s0.x.x.rebased660", %"produce blur_x666"
  %9218 = sext i32 %b286 to i64
  %9219 = add nsw i64 %9095, %9218
  %9220 = getelementptr inbounds i16, i16* %blur_x, i64 %9219
  %9221 = bitcast i16* %9220 to <16 x i16>*
  %9222 = load <16 x i16>, <16 x i16>* %9221, align 2, !tbaa !399
  %9223 = getelementptr inbounds i16, i16* %9220, i64 16
  %9224 = bitcast i16* %9223 to <16 x i16>*
  %9225 = load <16 x i16>, <16 x i16>* %9224, align 2, !tbaa !399
  %9226 = add nsw i64 %9098, %9218
  %9227 = getelementptr inbounds i16, i16* %blur_x, i64 %9226
  %9228 = bitcast i16* %9227 to <16 x i16>*
  %9229 = load <16 x i16>, <16 x i16>* %9228, align 2, !tbaa !399
  %9230 = getelementptr inbounds i16, i16* %9227, i64 16
  %9231 = bitcast i16* %9230 to <16 x i16>*
  %9232 = load <16 x i16>, <16 x i16>* %9231, align 2, !tbaa !399
  %9233 = add nsw i64 %9101, %9218
  %9234 = getelementptr inbounds i16, i16* %blur_x, i64 %9233
  %9235 = bitcast i16* %9234 to <16 x i16>*
  %9236 = load <16 x i16>, <16 x i16>* %9235, align 2, !tbaa !399
  %9237 = getelementptr inbounds i16, i16* %9234, i64 16
  %9238 = bitcast i16* %9237 to <16 x i16>*
  %9239 = load <16 x i16>, <16 x i16>* %9238, align 2, !tbaa !399
  %9240 = add <16 x i16> %9229, %9222
  %9241 = add <16 x i16> %9240, %9236
  %9242 = add <16 x i16> %9232, %9225
  %9243 = add <16 x i16> %9242, %9239
  %9244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9241, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9245 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9243, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9246 = shufflevector <16 x i16> %9244, <16 x i16> %9245, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9247 = lshr <32 x i16> %9246, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9248 = shufflevector <32 x i16> %9247, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9249 = add nsw i64 %9105, %9218
  %9250 = getelementptr inbounds i16, i16* %65, i64 %9249
  %9251 = bitcast i16* %9250 to <16 x i16>*
  store <16 x i16> %9248, <16 x i16>* %9251, align 2, !tbaa !401
  %9252 = shufflevector <32 x i16> %9247, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9253 = getelementptr inbounds i16, i16* %9250, i64 16
  %9254 = bitcast i16* %9253 to <16 x i16>*
  store <16 x i16> %9252, <16 x i16>* %9254, align 2, !tbaa !401
  %9255 = add nuw nsw i32 %blur_y.s0.x.x.rebased662, 1
  %.not2590 = icmp eq i32 %9255, %t1639
  br i1 %.not2590, label %"end for blur_y.s0.x.x.rebased661", label %"for blur_y.s0.x.x.rebased660"

after_bb669:                                      ; preds = %"end for blur_y.s0.x.x.rebased661", %"produce blur_x672"
  br i1 %99, label %"for blur_y.s0.x.x.rebased674.preheader", label %"end for blur_y.s0.x.x.rebased675", !prof !386

"for blur_y.s0.x.x.rebased674.preheader":         ; preds = %after_bb669
  %9256 = sext i32 %t1650 to i64
  %9257 = zext i32 %.pre-phi3346 to i64
  %9258 = mul nsw i64 %9257, %108
  %9259 = sub nsw i64 %9258, %95
  %9260 = zext i32 %.pre-phi3350 to i64
  %9261 = mul nsw i64 %9260, %108
  %9262 = sub nsw i64 %9261, %95
  %9263 = zext i32 %.pre-phi to i64
  %9264 = mul nsw i64 %9263, %108
  %9265 = sub nsw i64 %9264, %95
  %9266 = sext i32 %a26 to i64
  %9267 = add nsw i64 %9266, 28
  %9268 = mul nsw i64 %9267, %109
  %9269 = add nsw i64 %9268, %112
  br label %"for blur_y.s0.x.x.rebased674"

"produce blur_x672":                              ; preds = %"end for blur_y.s0.x.x.rebased661"
  %9270 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %9271 = getelementptr inbounds i16, i16* %9270, i64 -31
  %9272 = bitcast i16* %9271 to <16 x i16>*
  %9273 = load <16 x i16>, <16 x i16>* %9272, align 2, !tbaa !396
  %9274 = getelementptr inbounds i16, i16* %9270, i64 -15
  %9275 = bitcast i16* %9274 to <16 x i16>*
  %9276 = load <16 x i16>, <16 x i16>* %9275, align 2, !tbaa !396
  %9277 = getelementptr inbounds i16, i16* %9270, i64 -30
  %9278 = bitcast i16* %9277 to <16 x i16>*
  %9279 = load <16 x i16>, <16 x i16>* %9278, align 2, !tbaa !396
  %9280 = getelementptr inbounds i16, i16* %9270, i64 -14
  %9281 = bitcast i16* %9280 to <16 x i16>*
  %9282 = load <16 x i16>, <16 x i16>* %9281, align 2, !tbaa !396
  %9283 = getelementptr inbounds i16, i16* %9270, i64 -32
  %9284 = bitcast i16* %9283 to <16 x i16>*
  %9285 = load <16 x i16>, <16 x i16>* %9284, align 2, !tbaa !396
  %9286 = getelementptr inbounds i16, i16* %9270, i64 -16
  %9287 = bitcast i16* %9286 to <16 x i16>*
  %9288 = load <16 x i16>, <16 x i16>* %9287, align 2, !tbaa !396
  %9289 = add <16 x i16> %9279, %9273
  %9290 = add <16 x i16> %9289, %9285
  %9291 = add <16 x i16> %9282, %9276
  %9292 = add <16 x i16> %9291, %9288
  %9293 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9290, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9294 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9292, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9295 = shufflevector <16 x i16> %9293, <16 x i16> %9294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9296 = lshr <32 x i16> %9295, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9297 = shufflevector <32 x i16> %9296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9298 = zext i32 %.pre-phi3350 to i64
  %9299 = mul nsw i64 %96, %9298
  %9300 = add nsw i64 %98, %9299
  %9301 = getelementptr inbounds i16, i16* %blur_x, i64 %9300
  %9302 = getelementptr inbounds i16, i16* %9301, i64 -32
  %9303 = bitcast i16* %9302 to <16 x i16>*
  store <16 x i16> %9297, <16 x i16>* %9303, align 2, !tbaa !399
  %9304 = shufflevector <32 x i16> %9296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9305 = getelementptr inbounds i16, i16* %9301, i64 -16
  %9306 = bitcast i16* %9305 to <16 x i16>*
  store <16 x i16> %9304, <16 x i16>* %9306, align 2, !tbaa !399
  %9307 = zext i32 %.pre-phi3346 to i64
  %9308 = mul nsw i64 %9307, %108
  %9309 = add nsw i64 %9308, %93
  %9310 = getelementptr inbounds i16, i16* %blur_x, i64 %9309
  %9311 = getelementptr inbounds i16, i16* %9310, i64 -32
  %9312 = bitcast i16* %9311 to <16 x i16>*
  %9313 = load <16 x i16>, <16 x i16>* %9312, align 2, !tbaa !399
  %9314 = getelementptr inbounds i16, i16* %9310, i64 -16
  %9315 = bitcast i16* %9314 to <16 x i16>*
  %9316 = load <16 x i16>, <16 x i16>* %9315, align 2, !tbaa !399
  %9317 = mul nsw i64 %9298, %108
  %9318 = add nsw i64 %9317, %93
  %9319 = getelementptr inbounds i16, i16* %blur_x, i64 %9318
  %9320 = getelementptr inbounds i16, i16* %9319, i64 -32
  %9321 = bitcast i16* %9320 to <16 x i16>*
  %9322 = load <16 x i16>, <16 x i16>* %9321, align 2, !tbaa !399
  %9323 = getelementptr inbounds i16, i16* %9319, i64 -16
  %9324 = bitcast i16* %9323 to <16 x i16>*
  %9325 = load <16 x i16>, <16 x i16>* %9324, align 2, !tbaa !399
  %9326 = zext i32 %.pre-phi to i64
  %9327 = mul nsw i64 %9326, %108
  %9328 = add nsw i64 %9327, %93
  %9329 = getelementptr inbounds i16, i16* %blur_x, i64 %9328
  %9330 = getelementptr inbounds i16, i16* %9329, i64 -32
  %9331 = bitcast i16* %9330 to <16 x i16>*
  %9332 = load <16 x i16>, <16 x i16>* %9331, align 2, !tbaa !399
  %9333 = getelementptr inbounds i16, i16* %9329, i64 -16
  %9334 = bitcast i16* %9333 to <16 x i16>*
  %9335 = load <16 x i16>, <16 x i16>* %9334, align 2, !tbaa !399
  %9336 = add <16 x i16> %9322, %9313
  %9337 = add <16 x i16> %9336, %9332
  %9338 = add <16 x i16> %9325, %9316
  %9339 = add <16 x i16> %9338, %9335
  %9340 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9337, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9339, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9342 = shufflevector <16 x i16> %9340, <16 x i16> %9341, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9343 = lshr <32 x i16> %9342, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9344 = shufflevector <32 x i16> %9343, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9345 = sext i32 %a26 to i64
  %9346 = add nsw i64 %9345, 28
  %9347 = mul nsw i64 %9346, %109
  %9348 = add nsw i64 %111, %9347
  %9349 = getelementptr inbounds i16, i16* %65, i64 %9348
  %9350 = getelementptr inbounds i16, i16* %9349, i64 -32
  %9351 = bitcast i16* %9350 to <16 x i16>*
  store <16 x i16> %9344, <16 x i16>* %9351, align 2, !tbaa !401
  %9352 = shufflevector <32 x i16> %9343, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9353 = getelementptr inbounds i16, i16* %9349, i64 -16
  %9354 = bitcast i16* %9353 to <16 x i16>*
  store <16 x i16> %9352, <16 x i16>* %9354, align 2, !tbaa !401
  br label %after_bb669

"for blur_y.s0.x.x.rebased674":                   ; preds = %"for blur_y.s0.x.x.rebased674.preheader", %"consume blur_x681"
  %indvars.iv3215 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased674.preheader" ], [ %indvars.iv.next3216, %"consume blur_x681" ]
  %9355 = add nsw i64 %indvars.iv3215, %100
  %9356 = icmp slt i64 %9355, 1
  %9357 = trunc i64 %9355 to i32
  %9358 = shl nsw i32 %9357, 5
  %9359 = icmp sgt i32 %4, %9358
  %9360 = or i1 %9356, %9359
  br i1 %9360, label %"produce blur_x680", label %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge"

"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased674"
  %.pre3411 = shl nsw i64 %9355, 5
  br label %"consume blur_x681"

"end for blur_y.s0.x.x.rebased675":               ; preds = %"consume blur_x681", %after_bb669
  br i1 %101, label %"for blur_y.s0.x.x.rebased682.preheader", label %"end for blur_y.s0.x.x.rebased683", !prof !386

"for blur_y.s0.x.x.rebased682.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased675"
  %9361 = sext i32 %t1650 to i64
  %9362 = zext i32 %.pre-phi3346 to i64
  %9363 = mul nsw i64 %9362, %108
  %9364 = sub nsw i64 %9363, %95
  %9365 = zext i32 %.pre-phi3350 to i64
  %9366 = mul nsw i64 %9365, %108
  %9367 = sub nsw i64 %9366, %95
  %9368 = zext i32 %.pre-phi to i64
  %9369 = mul nsw i64 %9368, %108
  %9370 = sub nsw i64 %9369, %95
  %9371 = sext i32 %a26 to i64
  %9372 = add nsw i64 %9371, 28
  %9373 = mul nsw i64 %9372, %109
  %9374 = add nsw i64 %9373, %112
  br label %"for blur_y.s0.x.x.rebased682"

"produce blur_x680":                              ; preds = %"for blur_y.s0.x.x.rebased674"
  %t1120 = add nsw i32 %9358, %t2097
  %9375 = sext i32 %t1120 to i64
  %9376 = getelementptr inbounds i16, i16* %read_input, i64 %9375
  %9377 = getelementptr inbounds i16, i16* %9376, i64 1
  %9378 = bitcast i16* %9377 to <16 x i16>*
  %9379 = load <16 x i16>, <16 x i16>* %9378, align 2, !tbaa !396
  %9380 = getelementptr inbounds i16, i16* %9376, i64 17
  %9381 = bitcast i16* %9380 to <16 x i16>*
  %9382 = load <16 x i16>, <16 x i16>* %9381, align 2, !tbaa !396
  %9383 = getelementptr inbounds i16, i16* %9376, i64 2
  %9384 = bitcast i16* %9383 to <16 x i16>*
  %9385 = load <16 x i16>, <16 x i16>* %9384, align 2, !tbaa !396
  %9386 = getelementptr inbounds i16, i16* %9376, i64 18
  %9387 = bitcast i16* %9386 to <16 x i16>*
  %9388 = load <16 x i16>, <16 x i16>* %9387, align 2, !tbaa !396
  %9389 = bitcast i16* %9376 to <16 x i16>*
  %9390 = load <16 x i16>, <16 x i16>* %9389, align 2, !tbaa !396
  %9391 = getelementptr inbounds i16, i16* %9376, i64 16
  %9392 = bitcast i16* %9391 to <16 x i16>*
  %9393 = load <16 x i16>, <16 x i16>* %9392, align 2, !tbaa !396
  %9394 = add <16 x i16> %9385, %9379
  %9395 = add <16 x i16> %9394, %9390
  %9396 = add <16 x i16> %9388, %9382
  %9397 = add <16 x i16> %9396, %9393
  %9398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9395, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9397, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9400 = shufflevector <16 x i16> %9398, <16 x i16> %9399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9401 = lshr <32 x i16> %9400, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9402 = shufflevector <32 x i16> %9401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9403 = shl nsw i64 %9355, 5
  %9404 = add nsw i64 %9403, %9256
  %9405 = getelementptr inbounds i16, i16* %blur_x, i64 %9404
  %9406 = bitcast i16* %9405 to <16 x i16>*
  store <16 x i16> %9402, <16 x i16>* %9406, align 2, !tbaa !399
  %9407 = shufflevector <32 x i16> %9401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9408 = getelementptr inbounds i16, i16* %9405, i64 16
  %9409 = bitcast i16* %9408 to <16 x i16>*
  store <16 x i16> %9407, <16 x i16>* %9409, align 2, !tbaa !399
  br label %"consume blur_x681"

"consume blur_x681":                              ; preds = %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge", %"produce blur_x680"
  %.pre-phi3412 = phi i64 [ %.pre3411, %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge" ], [ %9403, %"produce blur_x680" ]
  %9410 = add nsw i64 %9259, %.pre-phi3412
  %9411 = getelementptr inbounds i16, i16* %blur_x, i64 %9410
  %9412 = bitcast i16* %9411 to <16 x i16>*
  %9413 = load <16 x i16>, <16 x i16>* %9412, align 2, !tbaa !399
  %9414 = getelementptr inbounds i16, i16* %9411, i64 16
  %9415 = bitcast i16* %9414 to <16 x i16>*
  %9416 = load <16 x i16>, <16 x i16>* %9415, align 2, !tbaa !399
  %9417 = add nsw i64 %9262, %.pre-phi3412
  %9418 = getelementptr inbounds i16, i16* %blur_x, i64 %9417
  %9419 = bitcast i16* %9418 to <16 x i16>*
  %9420 = load <16 x i16>, <16 x i16>* %9419, align 2, !tbaa !399
  %9421 = getelementptr inbounds i16, i16* %9418, i64 16
  %9422 = bitcast i16* %9421 to <16 x i16>*
  %9423 = load <16 x i16>, <16 x i16>* %9422, align 2, !tbaa !399
  %9424 = add nsw i64 %9265, %.pre-phi3412
  %9425 = getelementptr inbounds i16, i16* %blur_x, i64 %9424
  %9426 = bitcast i16* %9425 to <16 x i16>*
  %9427 = load <16 x i16>, <16 x i16>* %9426, align 2, !tbaa !399
  %9428 = getelementptr inbounds i16, i16* %9425, i64 16
  %9429 = bitcast i16* %9428 to <16 x i16>*
  %9430 = load <16 x i16>, <16 x i16>* %9429, align 2, !tbaa !399
  %9431 = add <16 x i16> %9420, %9413
  %9432 = add <16 x i16> %9431, %9427
  %9433 = add <16 x i16> %9423, %9416
  %9434 = add <16 x i16> %9433, %9430
  %9435 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9432, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9436 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9434, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9437 = shufflevector <16 x i16> %9435, <16 x i16> %9436, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9438 = lshr <32 x i16> %9437, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9439 = shufflevector <32 x i16> %9438, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9440 = add nsw i64 %9269, %.pre-phi3412
  %9441 = getelementptr inbounds i16, i16* %65, i64 %9440
  %9442 = bitcast i16* %9441 to <16 x i16>*
  store <16 x i16> %9439, <16 x i16>* %9442, align 2, !tbaa !401
  %9443 = shufflevector <32 x i16> %9438, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9444 = getelementptr inbounds i16, i16* %9441, i64 16
  %9445 = bitcast i16* %9444 to <16 x i16>*
  store <16 x i16> %9443, <16 x i16>* %9445, align 2, !tbaa !401
  %indvars.iv.next3216 = add nuw nsw i64 %indvars.iv3215, 1
  %.not2589 = icmp eq i64 %indvars.iv.next3216, %180
  br i1 %.not2589, label %"end for blur_y.s0.x.x.rebased675", label %"for blur_y.s0.x.x.rebased674"

"for blur_y.s0.x.x.rebased682":                   ; preds = %"for blur_y.s0.x.x.rebased682.preheader", %"consume blur_x690"
  %blur_y.s0.x.x.rebased684 = phi i32 [ %9524, %"consume blur_x690" ], [ 0, %"for blur_y.s0.x.x.rebased682.preheader" ]
  %9446 = add nsw i32 %blur_y.s0.x.x.rebased684, %t1582
  %a287 = shl nsw i32 %9446, 5
  %9447 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %9447, i32 %a287, i32 %a14
  %9448 = icmp slt i32 %9446, 1
  %9449 = icmp sgt i32 %4, %a287
  %9450 = or i1 %9448, %9449
  br i1 %9450, label %"produce blur_x688", label %"consume blur_x690"

"end for blur_y.s0.x.x.rebased683":               ; preds = %"consume blur_x690", %"end for blur_y.s0.x.x.rebased675"
  br i1 %34, label %"produce blur_x694", label %after_bb691

"produce blur_x688":                              ; preds = %"for blur_y.s0.x.x.rebased682"
  %9451 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s689 = select i1 %9451, i32 %b293, i32 %4
  %t1125 = add nsw i32 %blur_x.s0.x.v1.base.s689, %t2097
  %9452 = sext i32 %t1125 to i64
  %9453 = getelementptr inbounds i16, i16* %read_input, i64 %9452
  %9454 = getelementptr inbounds i16, i16* %9453, i64 1
  %9455 = bitcast i16* %9454 to <16 x i16>*
  %9456 = load <16 x i16>, <16 x i16>* %9455, align 2, !tbaa !396
  %9457 = getelementptr inbounds i16, i16* %9453, i64 17
  %9458 = bitcast i16* %9457 to <16 x i16>*
  %9459 = load <16 x i16>, <16 x i16>* %9458, align 2, !tbaa !396
  %9460 = getelementptr inbounds i16, i16* %9453, i64 2
  %9461 = bitcast i16* %9460 to <16 x i16>*
  %9462 = load <16 x i16>, <16 x i16>* %9461, align 2, !tbaa !396
  %9463 = getelementptr inbounds i16, i16* %9453, i64 18
  %9464 = bitcast i16* %9463 to <16 x i16>*
  %9465 = load <16 x i16>, <16 x i16>* %9464, align 2, !tbaa !396
  %9466 = bitcast i16* %9453 to <16 x i16>*
  %9467 = load <16 x i16>, <16 x i16>* %9466, align 2, !tbaa !396
  %9468 = getelementptr inbounds i16, i16* %9453, i64 16
  %9469 = bitcast i16* %9468 to <16 x i16>*
  %9470 = load <16 x i16>, <16 x i16>* %9469, align 2, !tbaa !396
  %9471 = add <16 x i16> %9462, %9456
  %9472 = add <16 x i16> %9471, %9467
  %9473 = add <16 x i16> %9465, %9459
  %9474 = add <16 x i16> %9473, %9470
  %9475 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9472, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9476 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9474, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9477 = shufflevector <16 x i16> %9475, <16 x i16> %9476, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9478 = lshr <32 x i16> %9477, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9479 = shufflevector <32 x i16> %9478, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9480 = sext i32 %blur_x.s0.x.v1.base.s689 to i64
  %9481 = add nsw i64 %9480, %9361
  %9482 = getelementptr inbounds i16, i16* %blur_x, i64 %9481
  %9483 = bitcast i16* %9482 to <16 x i16>*
  store <16 x i16> %9479, <16 x i16>* %9483, align 2, !tbaa !399
  %9484 = shufflevector <32 x i16> %9478, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9485 = getelementptr inbounds i16, i16* %9482, i64 16
  %9486 = bitcast i16* %9485 to <16 x i16>*
  store <16 x i16> %9484, <16 x i16>* %9486, align 2, !tbaa !399
  br label %"consume blur_x690"

"consume blur_x690":                              ; preds = %"for blur_y.s0.x.x.rebased682", %"produce blur_x688"
  %9487 = sext i32 %b293 to i64
  %9488 = add nsw i64 %9364, %9487
  %9489 = getelementptr inbounds i16, i16* %blur_x, i64 %9488
  %9490 = bitcast i16* %9489 to <16 x i16>*
  %9491 = load <16 x i16>, <16 x i16>* %9490, align 2, !tbaa !399
  %9492 = getelementptr inbounds i16, i16* %9489, i64 16
  %9493 = bitcast i16* %9492 to <16 x i16>*
  %9494 = load <16 x i16>, <16 x i16>* %9493, align 2, !tbaa !399
  %9495 = add nsw i64 %9367, %9487
  %9496 = getelementptr inbounds i16, i16* %blur_x, i64 %9495
  %9497 = bitcast i16* %9496 to <16 x i16>*
  %9498 = load <16 x i16>, <16 x i16>* %9497, align 2, !tbaa !399
  %9499 = getelementptr inbounds i16, i16* %9496, i64 16
  %9500 = bitcast i16* %9499 to <16 x i16>*
  %9501 = load <16 x i16>, <16 x i16>* %9500, align 2, !tbaa !399
  %9502 = add nsw i64 %9370, %9487
  %9503 = getelementptr inbounds i16, i16* %blur_x, i64 %9502
  %9504 = bitcast i16* %9503 to <16 x i16>*
  %9505 = load <16 x i16>, <16 x i16>* %9504, align 2, !tbaa !399
  %9506 = getelementptr inbounds i16, i16* %9503, i64 16
  %9507 = bitcast i16* %9506 to <16 x i16>*
  %9508 = load <16 x i16>, <16 x i16>* %9507, align 2, !tbaa !399
  %9509 = add <16 x i16> %9498, %9491
  %9510 = add <16 x i16> %9509, %9505
  %9511 = add <16 x i16> %9501, %9494
  %9512 = add <16 x i16> %9511, %9508
  %9513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9510, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9514 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9512, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9515 = shufflevector <16 x i16> %9513, <16 x i16> %9514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9516 = lshr <32 x i16> %9515, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9517 = shufflevector <32 x i16> %9516, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9518 = add nsw i64 %9374, %9487
  %9519 = getelementptr inbounds i16, i16* %65, i64 %9518
  %9520 = bitcast i16* %9519 to <16 x i16>*
  store <16 x i16> %9517, <16 x i16>* %9520, align 2, !tbaa !401
  %9521 = shufflevector <32 x i16> %9516, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9522 = getelementptr inbounds i16, i16* %9519, i64 16
  %9523 = bitcast i16* %9522 to <16 x i16>*
  store <16 x i16> %9521, <16 x i16>* %9523, align 2, !tbaa !401
  %9524 = add nuw nsw i32 %blur_y.s0.x.x.rebased684, 1
  %.not2588 = icmp eq i32 %9524, %t1639
  br i1 %.not2588, label %"end for blur_y.s0.x.x.rebased683", label %"for blur_y.s0.x.x.rebased682"

after_bb691:                                      ; preds = %"end for blur_y.s0.x.x.rebased683", %"produce blur_x694"
  br i1 %99, label %"for blur_y.s0.x.x.rebased696.preheader", label %"end for blur_y.s0.x.x.rebased697", !prof !386

"for blur_y.s0.x.x.rebased696.preheader":         ; preds = %after_bb691
  %9525 = sext i32 %t1666 to i64
  %9526 = zext i32 %.pre-phi3350 to i64
  %9527 = mul nsw i64 %9526, %108
  %9528 = sub nsw i64 %9527, %95
  %9529 = zext i32 %.pre-phi3356 to i64
  %9530 = mul nsw i64 %9529, %108
  %9531 = sub nsw i64 %9530, %95
  %9532 = zext i32 %.pre-phi3346 to i64
  %9533 = mul nsw i64 %9532, %108
  %9534 = sub nsw i64 %9533, %95
  %9535 = sext i32 %a26 to i64
  %9536 = add nsw i64 %9535, 29
  %9537 = mul nsw i64 %9536, %109
  %9538 = add nsw i64 %9537, %112
  br label %"for blur_y.s0.x.x.rebased696"

"produce blur_x694":                              ; preds = %"end for blur_y.s0.x.x.rebased683"
  %9539 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %9540 = getelementptr inbounds i16, i16* %9539, i64 -31
  %9541 = bitcast i16* %9540 to <16 x i16>*
  %9542 = load <16 x i16>, <16 x i16>* %9541, align 2, !tbaa !396
  %9543 = getelementptr inbounds i16, i16* %9539, i64 -15
  %9544 = bitcast i16* %9543 to <16 x i16>*
  %9545 = load <16 x i16>, <16 x i16>* %9544, align 2, !tbaa !396
  %9546 = getelementptr inbounds i16, i16* %9539, i64 -30
  %9547 = bitcast i16* %9546 to <16 x i16>*
  %9548 = load <16 x i16>, <16 x i16>* %9547, align 2, !tbaa !396
  %9549 = getelementptr inbounds i16, i16* %9539, i64 -14
  %9550 = bitcast i16* %9549 to <16 x i16>*
  %9551 = load <16 x i16>, <16 x i16>* %9550, align 2, !tbaa !396
  %9552 = getelementptr inbounds i16, i16* %9539, i64 -32
  %9553 = bitcast i16* %9552 to <16 x i16>*
  %9554 = load <16 x i16>, <16 x i16>* %9553, align 2, !tbaa !396
  %9555 = getelementptr inbounds i16, i16* %9539, i64 -16
  %9556 = bitcast i16* %9555 to <16 x i16>*
  %9557 = load <16 x i16>, <16 x i16>* %9556, align 2, !tbaa !396
  %9558 = add <16 x i16> %9548, %9542
  %9559 = add <16 x i16> %9558, %9554
  %9560 = add <16 x i16> %9551, %9545
  %9561 = add <16 x i16> %9560, %9557
  %9562 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9559, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9563 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9561, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9564 = shufflevector <16 x i16> %9562, <16 x i16> %9563, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9565 = lshr <32 x i16> %9564, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9566 = shufflevector <32 x i16> %9565, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9567 = zext i32 %.pre-phi3356 to i64
  %9568 = mul nsw i64 %96, %9567
  %9569 = add nsw i64 %98, %9568
  %9570 = getelementptr inbounds i16, i16* %blur_x, i64 %9569
  %9571 = getelementptr inbounds i16, i16* %9570, i64 -32
  %9572 = bitcast i16* %9571 to <16 x i16>*
  store <16 x i16> %9566, <16 x i16>* %9572, align 2, !tbaa !399
  %9573 = shufflevector <32 x i16> %9565, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9574 = getelementptr inbounds i16, i16* %9570, i64 -16
  %9575 = bitcast i16* %9574 to <16 x i16>*
  store <16 x i16> %9573, <16 x i16>* %9575, align 2, !tbaa !399
  %9576 = zext i32 %.pre-phi3350 to i64
  %9577 = mul nsw i64 %9576, %108
  %9578 = add nsw i64 %9577, %93
  %9579 = getelementptr inbounds i16, i16* %blur_x, i64 %9578
  %9580 = getelementptr inbounds i16, i16* %9579, i64 -32
  %9581 = bitcast i16* %9580 to <16 x i16>*
  %9582 = load <16 x i16>, <16 x i16>* %9581, align 2, !tbaa !399
  %9583 = getelementptr inbounds i16, i16* %9579, i64 -16
  %9584 = bitcast i16* %9583 to <16 x i16>*
  %9585 = load <16 x i16>, <16 x i16>* %9584, align 2, !tbaa !399
  %9586 = mul nsw i64 %9567, %108
  %9587 = add nsw i64 %9586, %93
  %9588 = getelementptr inbounds i16, i16* %blur_x, i64 %9587
  %9589 = getelementptr inbounds i16, i16* %9588, i64 -32
  %9590 = bitcast i16* %9589 to <16 x i16>*
  %9591 = load <16 x i16>, <16 x i16>* %9590, align 2, !tbaa !399
  %9592 = getelementptr inbounds i16, i16* %9588, i64 -16
  %9593 = bitcast i16* %9592 to <16 x i16>*
  %9594 = load <16 x i16>, <16 x i16>* %9593, align 2, !tbaa !399
  %9595 = zext i32 %.pre-phi3346 to i64
  %9596 = mul nsw i64 %9595, %108
  %9597 = add nsw i64 %9596, %93
  %9598 = getelementptr inbounds i16, i16* %blur_x, i64 %9597
  %9599 = getelementptr inbounds i16, i16* %9598, i64 -32
  %9600 = bitcast i16* %9599 to <16 x i16>*
  %9601 = load <16 x i16>, <16 x i16>* %9600, align 2, !tbaa !399
  %9602 = getelementptr inbounds i16, i16* %9598, i64 -16
  %9603 = bitcast i16* %9602 to <16 x i16>*
  %9604 = load <16 x i16>, <16 x i16>* %9603, align 2, !tbaa !399
  %9605 = add <16 x i16> %9591, %9582
  %9606 = add <16 x i16> %9605, %9601
  %9607 = add <16 x i16> %9594, %9585
  %9608 = add <16 x i16> %9607, %9604
  %9609 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9606, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9610 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9608, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9611 = shufflevector <16 x i16> %9609, <16 x i16> %9610, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9612 = lshr <32 x i16> %9611, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9613 = shufflevector <32 x i16> %9612, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9614 = sext i32 %a26 to i64
  %9615 = add nsw i64 %9614, 29
  %9616 = mul nsw i64 %9615, %109
  %9617 = add nsw i64 %111, %9616
  %9618 = getelementptr inbounds i16, i16* %65, i64 %9617
  %9619 = getelementptr inbounds i16, i16* %9618, i64 -32
  %9620 = bitcast i16* %9619 to <16 x i16>*
  store <16 x i16> %9613, <16 x i16>* %9620, align 2, !tbaa !401
  %9621 = shufflevector <32 x i16> %9612, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9622 = getelementptr inbounds i16, i16* %9618, i64 -16
  %9623 = bitcast i16* %9622 to <16 x i16>*
  store <16 x i16> %9621, <16 x i16>* %9623, align 2, !tbaa !401
  br label %after_bb691

"for blur_y.s0.x.x.rebased696":                   ; preds = %"for blur_y.s0.x.x.rebased696.preheader", %"consume blur_x703"
  %indvars.iv3218 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased696.preheader" ], [ %indvars.iv.next3219, %"consume blur_x703" ]
  %9624 = add nsw i64 %indvars.iv3218, %100
  %9625 = icmp slt i64 %9624, 1
  %9626 = trunc i64 %9624 to i32
  %9627 = shl nsw i32 %9626, 5
  %9628 = icmp sgt i32 %4, %9627
  %9629 = or i1 %9625, %9628
  br i1 %9629, label %"produce blur_x702", label %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge"

"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased696"
  %.pre3413 = shl nsw i64 %9624, 5
  br label %"consume blur_x703"

"end for blur_y.s0.x.x.rebased697":               ; preds = %"consume blur_x703", %after_bb691
  br i1 %101, label %"for blur_y.s0.x.x.rebased704.preheader", label %"end for blur_y.s0.x.x.rebased705", !prof !386

"for blur_y.s0.x.x.rebased704.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased697"
  %9630 = sext i32 %t1666 to i64
  %9631 = zext i32 %.pre-phi3350 to i64
  %9632 = mul nsw i64 %9631, %108
  %9633 = sub nsw i64 %9632, %95
  %9634 = zext i32 %.pre-phi3356 to i64
  %9635 = mul nsw i64 %9634, %108
  %9636 = sub nsw i64 %9635, %95
  %9637 = zext i32 %.pre-phi3346 to i64
  %9638 = mul nsw i64 %9637, %108
  %9639 = sub nsw i64 %9638, %95
  %9640 = sext i32 %a26 to i64
  %9641 = add nsw i64 %9640, 29
  %9642 = mul nsw i64 %9641, %109
  %9643 = add nsw i64 %9642, %112
  br label %"for blur_y.s0.x.x.rebased704"

"produce blur_x702":                              ; preds = %"for blur_y.s0.x.x.rebased696"
  %t1136 = add nsw i32 %9627, %t2113
  %9644 = sext i32 %t1136 to i64
  %9645 = getelementptr inbounds i16, i16* %read_input, i64 %9644
  %9646 = getelementptr inbounds i16, i16* %9645, i64 1
  %9647 = bitcast i16* %9646 to <16 x i16>*
  %9648 = load <16 x i16>, <16 x i16>* %9647, align 2, !tbaa !396
  %9649 = getelementptr inbounds i16, i16* %9645, i64 17
  %9650 = bitcast i16* %9649 to <16 x i16>*
  %9651 = load <16 x i16>, <16 x i16>* %9650, align 2, !tbaa !396
  %9652 = getelementptr inbounds i16, i16* %9645, i64 2
  %9653 = bitcast i16* %9652 to <16 x i16>*
  %9654 = load <16 x i16>, <16 x i16>* %9653, align 2, !tbaa !396
  %9655 = getelementptr inbounds i16, i16* %9645, i64 18
  %9656 = bitcast i16* %9655 to <16 x i16>*
  %9657 = load <16 x i16>, <16 x i16>* %9656, align 2, !tbaa !396
  %9658 = bitcast i16* %9645 to <16 x i16>*
  %9659 = load <16 x i16>, <16 x i16>* %9658, align 2, !tbaa !396
  %9660 = getelementptr inbounds i16, i16* %9645, i64 16
  %9661 = bitcast i16* %9660 to <16 x i16>*
  %9662 = load <16 x i16>, <16 x i16>* %9661, align 2, !tbaa !396
  %9663 = add <16 x i16> %9654, %9648
  %9664 = add <16 x i16> %9663, %9659
  %9665 = add <16 x i16> %9657, %9651
  %9666 = add <16 x i16> %9665, %9662
  %9667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9664, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9666, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9669 = shufflevector <16 x i16> %9667, <16 x i16> %9668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9670 = lshr <32 x i16> %9669, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9671 = shufflevector <32 x i16> %9670, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9672 = shl nsw i64 %9624, 5
  %9673 = add nsw i64 %9672, %9525
  %9674 = getelementptr inbounds i16, i16* %blur_x, i64 %9673
  %9675 = bitcast i16* %9674 to <16 x i16>*
  store <16 x i16> %9671, <16 x i16>* %9675, align 2, !tbaa !399
  %9676 = shufflevector <32 x i16> %9670, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9677 = getelementptr inbounds i16, i16* %9674, i64 16
  %9678 = bitcast i16* %9677 to <16 x i16>*
  store <16 x i16> %9676, <16 x i16>* %9678, align 2, !tbaa !399
  br label %"consume blur_x703"

"consume blur_x703":                              ; preds = %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge", %"produce blur_x702"
  %.pre-phi3414 = phi i64 [ %.pre3413, %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge" ], [ %9672, %"produce blur_x702" ]
  %9679 = add nsw i64 %9528, %.pre-phi3414
  %9680 = getelementptr inbounds i16, i16* %blur_x, i64 %9679
  %9681 = bitcast i16* %9680 to <16 x i16>*
  %9682 = load <16 x i16>, <16 x i16>* %9681, align 2, !tbaa !399
  %9683 = getelementptr inbounds i16, i16* %9680, i64 16
  %9684 = bitcast i16* %9683 to <16 x i16>*
  %9685 = load <16 x i16>, <16 x i16>* %9684, align 2, !tbaa !399
  %9686 = add nsw i64 %9531, %.pre-phi3414
  %9687 = getelementptr inbounds i16, i16* %blur_x, i64 %9686
  %9688 = bitcast i16* %9687 to <16 x i16>*
  %9689 = load <16 x i16>, <16 x i16>* %9688, align 2, !tbaa !399
  %9690 = getelementptr inbounds i16, i16* %9687, i64 16
  %9691 = bitcast i16* %9690 to <16 x i16>*
  %9692 = load <16 x i16>, <16 x i16>* %9691, align 2, !tbaa !399
  %9693 = add nsw i64 %9534, %.pre-phi3414
  %9694 = getelementptr inbounds i16, i16* %blur_x, i64 %9693
  %9695 = bitcast i16* %9694 to <16 x i16>*
  %9696 = load <16 x i16>, <16 x i16>* %9695, align 2, !tbaa !399
  %9697 = getelementptr inbounds i16, i16* %9694, i64 16
  %9698 = bitcast i16* %9697 to <16 x i16>*
  %9699 = load <16 x i16>, <16 x i16>* %9698, align 2, !tbaa !399
  %9700 = add <16 x i16> %9689, %9682
  %9701 = add <16 x i16> %9700, %9696
  %9702 = add <16 x i16> %9692, %9685
  %9703 = add <16 x i16> %9702, %9699
  %9704 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9701, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9705 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9703, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9706 = shufflevector <16 x i16> %9704, <16 x i16> %9705, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9707 = lshr <32 x i16> %9706, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9708 = shufflevector <32 x i16> %9707, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9709 = add nsw i64 %9538, %.pre-phi3414
  %9710 = getelementptr inbounds i16, i16* %65, i64 %9709
  %9711 = bitcast i16* %9710 to <16 x i16>*
  store <16 x i16> %9708, <16 x i16>* %9711, align 2, !tbaa !401
  %9712 = shufflevector <32 x i16> %9707, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9713 = getelementptr inbounds i16, i16* %9710, i64 16
  %9714 = bitcast i16* %9713 to <16 x i16>*
  store <16 x i16> %9712, <16 x i16>* %9714, align 2, !tbaa !401
  %indvars.iv.next3219 = add nuw nsw i64 %indvars.iv3218, 1
  %.not2587 = icmp eq i64 %indvars.iv.next3219, %180
  br i1 %.not2587, label %"end for blur_y.s0.x.x.rebased697", label %"for blur_y.s0.x.x.rebased696"

"for blur_y.s0.x.x.rebased704":                   ; preds = %"for blur_y.s0.x.x.rebased704.preheader", %"consume blur_x712"
  %blur_y.s0.x.x.rebased706 = phi i32 [ %9793, %"consume blur_x712" ], [ 0, %"for blur_y.s0.x.x.rebased704.preheader" ]
  %9715 = add nsw i32 %blur_y.s0.x.x.rebased706, %t1582
  %a294 = shl nsw i32 %9715, 5
  %9716 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %9716, i32 %a294, i32 %a14
  %9717 = icmp slt i32 %9715, 1
  %9718 = icmp sgt i32 %4, %a294
  %9719 = or i1 %9717, %9718
  br i1 %9719, label %"produce blur_x710", label %"consume blur_x712"

"end for blur_y.s0.x.x.rebased705":               ; preds = %"consume blur_x712", %"end for blur_y.s0.x.x.rebased697"
  br i1 %34, label %"produce blur_x716", label %after_bb713

"produce blur_x710":                              ; preds = %"for blur_y.s0.x.x.rebased704"
  %9720 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s711 = select i1 %9720, i32 %b300, i32 %4
  %t1141 = add nsw i32 %blur_x.s0.x.v1.base.s711, %t2113
  %9721 = sext i32 %t1141 to i64
  %9722 = getelementptr inbounds i16, i16* %read_input, i64 %9721
  %9723 = getelementptr inbounds i16, i16* %9722, i64 1
  %9724 = bitcast i16* %9723 to <16 x i16>*
  %9725 = load <16 x i16>, <16 x i16>* %9724, align 2, !tbaa !396
  %9726 = getelementptr inbounds i16, i16* %9722, i64 17
  %9727 = bitcast i16* %9726 to <16 x i16>*
  %9728 = load <16 x i16>, <16 x i16>* %9727, align 2, !tbaa !396
  %9729 = getelementptr inbounds i16, i16* %9722, i64 2
  %9730 = bitcast i16* %9729 to <16 x i16>*
  %9731 = load <16 x i16>, <16 x i16>* %9730, align 2, !tbaa !396
  %9732 = getelementptr inbounds i16, i16* %9722, i64 18
  %9733 = bitcast i16* %9732 to <16 x i16>*
  %9734 = load <16 x i16>, <16 x i16>* %9733, align 2, !tbaa !396
  %9735 = bitcast i16* %9722 to <16 x i16>*
  %9736 = load <16 x i16>, <16 x i16>* %9735, align 2, !tbaa !396
  %9737 = getelementptr inbounds i16, i16* %9722, i64 16
  %9738 = bitcast i16* %9737 to <16 x i16>*
  %9739 = load <16 x i16>, <16 x i16>* %9738, align 2, !tbaa !396
  %9740 = add <16 x i16> %9731, %9725
  %9741 = add <16 x i16> %9740, %9736
  %9742 = add <16 x i16> %9734, %9728
  %9743 = add <16 x i16> %9742, %9739
  %9744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9741, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9745 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9743, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9746 = shufflevector <16 x i16> %9744, <16 x i16> %9745, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9747 = lshr <32 x i16> %9746, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9748 = shufflevector <32 x i16> %9747, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9749 = sext i32 %blur_x.s0.x.v1.base.s711 to i64
  %9750 = add nsw i64 %9749, %9630
  %9751 = getelementptr inbounds i16, i16* %blur_x, i64 %9750
  %9752 = bitcast i16* %9751 to <16 x i16>*
  store <16 x i16> %9748, <16 x i16>* %9752, align 2, !tbaa !399
  %9753 = shufflevector <32 x i16> %9747, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9754 = getelementptr inbounds i16, i16* %9751, i64 16
  %9755 = bitcast i16* %9754 to <16 x i16>*
  store <16 x i16> %9753, <16 x i16>* %9755, align 2, !tbaa !399
  br label %"consume blur_x712"

"consume blur_x712":                              ; preds = %"for blur_y.s0.x.x.rebased704", %"produce blur_x710"
  %9756 = sext i32 %b300 to i64
  %9757 = add nsw i64 %9633, %9756
  %9758 = getelementptr inbounds i16, i16* %blur_x, i64 %9757
  %9759 = bitcast i16* %9758 to <16 x i16>*
  %9760 = load <16 x i16>, <16 x i16>* %9759, align 2, !tbaa !399
  %9761 = getelementptr inbounds i16, i16* %9758, i64 16
  %9762 = bitcast i16* %9761 to <16 x i16>*
  %9763 = load <16 x i16>, <16 x i16>* %9762, align 2, !tbaa !399
  %9764 = add nsw i64 %9636, %9756
  %9765 = getelementptr inbounds i16, i16* %blur_x, i64 %9764
  %9766 = bitcast i16* %9765 to <16 x i16>*
  %9767 = load <16 x i16>, <16 x i16>* %9766, align 2, !tbaa !399
  %9768 = getelementptr inbounds i16, i16* %9765, i64 16
  %9769 = bitcast i16* %9768 to <16 x i16>*
  %9770 = load <16 x i16>, <16 x i16>* %9769, align 2, !tbaa !399
  %9771 = add nsw i64 %9639, %9756
  %9772 = getelementptr inbounds i16, i16* %blur_x, i64 %9771
  %9773 = bitcast i16* %9772 to <16 x i16>*
  %9774 = load <16 x i16>, <16 x i16>* %9773, align 2, !tbaa !399
  %9775 = getelementptr inbounds i16, i16* %9772, i64 16
  %9776 = bitcast i16* %9775 to <16 x i16>*
  %9777 = load <16 x i16>, <16 x i16>* %9776, align 2, !tbaa !399
  %9778 = add <16 x i16> %9767, %9760
  %9779 = add <16 x i16> %9778, %9774
  %9780 = add <16 x i16> %9770, %9763
  %9781 = add <16 x i16> %9780, %9777
  %9782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9779, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9783 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9781, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9784 = shufflevector <16 x i16> %9782, <16 x i16> %9783, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9785 = lshr <32 x i16> %9784, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9786 = shufflevector <32 x i16> %9785, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9787 = add nsw i64 %9643, %9756
  %9788 = getelementptr inbounds i16, i16* %65, i64 %9787
  %9789 = bitcast i16* %9788 to <16 x i16>*
  store <16 x i16> %9786, <16 x i16>* %9789, align 2, !tbaa !401
  %9790 = shufflevector <32 x i16> %9785, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9791 = getelementptr inbounds i16, i16* %9788, i64 16
  %9792 = bitcast i16* %9791 to <16 x i16>*
  store <16 x i16> %9790, <16 x i16>* %9792, align 2, !tbaa !401
  %9793 = add nuw nsw i32 %blur_y.s0.x.x.rebased706, 1
  %.not2586 = icmp eq i32 %9793, %t1639
  br i1 %.not2586, label %"end for blur_y.s0.x.x.rebased705", label %"for blur_y.s0.x.x.rebased704"

after_bb713:                                      ; preds = %"end for blur_y.s0.x.x.rebased705", %"produce blur_x716"
  br i1 %99, label %"for blur_y.s0.x.x.rebased718.preheader", label %"end for blur_y.s0.x.x.rebased719", !prof !386

"for blur_y.s0.x.x.rebased718.preheader":         ; preds = %after_bb713
  %9794 = sext i32 %t1638 to i64
  %9795 = zext i32 %.pre-phi3356 to i64
  %9796 = mul nsw i64 %9795, %108
  %9797 = sub nsw i64 %9796, %95
  %9798 = zext i32 %.pre-phi to i64
  %9799 = mul nsw i64 %9798, %108
  %9800 = sub nsw i64 %9799, %95
  %9801 = zext i32 %.pre-phi3350 to i64
  %9802 = mul nsw i64 %9801, %108
  %9803 = sub nsw i64 %9802, %95
  %9804 = sext i32 %a26 to i64
  %9805 = add nsw i64 %9804, 30
  %9806 = mul nsw i64 %9805, %109
  %9807 = add nsw i64 %9806, %112
  br label %"for blur_y.s0.x.x.rebased718"

"produce blur_x716":                              ; preds = %"end for blur_y.s0.x.x.rebased705"
  %9808 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %9809 = getelementptr inbounds i16, i16* %9808, i64 -31
  %9810 = bitcast i16* %9809 to <16 x i16>*
  %9811 = load <16 x i16>, <16 x i16>* %9810, align 2, !tbaa !396
  %9812 = getelementptr inbounds i16, i16* %9808, i64 -15
  %9813 = bitcast i16* %9812 to <16 x i16>*
  %9814 = load <16 x i16>, <16 x i16>* %9813, align 2, !tbaa !396
  %9815 = getelementptr inbounds i16, i16* %9808, i64 -30
  %9816 = bitcast i16* %9815 to <16 x i16>*
  %9817 = load <16 x i16>, <16 x i16>* %9816, align 2, !tbaa !396
  %9818 = getelementptr inbounds i16, i16* %9808, i64 -14
  %9819 = bitcast i16* %9818 to <16 x i16>*
  %9820 = load <16 x i16>, <16 x i16>* %9819, align 2, !tbaa !396
  %9821 = getelementptr inbounds i16, i16* %9808, i64 -32
  %9822 = bitcast i16* %9821 to <16 x i16>*
  %9823 = load <16 x i16>, <16 x i16>* %9822, align 2, !tbaa !396
  %9824 = getelementptr inbounds i16, i16* %9808, i64 -16
  %9825 = bitcast i16* %9824 to <16 x i16>*
  %9826 = load <16 x i16>, <16 x i16>* %9825, align 2, !tbaa !396
  %9827 = add <16 x i16> %9817, %9811
  %9828 = add <16 x i16> %9827, %9823
  %9829 = add <16 x i16> %9820, %9814
  %9830 = add <16 x i16> %9829, %9826
  %9831 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9828, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9832 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9830, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9833 = shufflevector <16 x i16> %9831, <16 x i16> %9832, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9834 = lshr <32 x i16> %9833, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9835 = shufflevector <32 x i16> %9834, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9836 = zext i32 %.pre-phi to i64
  %9837 = mul nsw i64 %96, %9836
  %9838 = add nsw i64 %98, %9837
  %9839 = getelementptr inbounds i16, i16* %blur_x, i64 %9838
  %9840 = getelementptr inbounds i16, i16* %9839, i64 -32
  %9841 = bitcast i16* %9840 to <16 x i16>*
  store <16 x i16> %9835, <16 x i16>* %9841, align 2, !tbaa !399
  %9842 = shufflevector <32 x i16> %9834, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9843 = getelementptr inbounds i16, i16* %9839, i64 -16
  %9844 = bitcast i16* %9843 to <16 x i16>*
  store <16 x i16> %9842, <16 x i16>* %9844, align 2, !tbaa !399
  %9845 = zext i32 %.pre-phi3356 to i64
  %9846 = mul nsw i64 %9845, %108
  %9847 = add nsw i64 %9846, %93
  %9848 = getelementptr inbounds i16, i16* %blur_x, i64 %9847
  %9849 = getelementptr inbounds i16, i16* %9848, i64 -32
  %9850 = bitcast i16* %9849 to <16 x i16>*
  %9851 = load <16 x i16>, <16 x i16>* %9850, align 2, !tbaa !399
  %9852 = getelementptr inbounds i16, i16* %9848, i64 -16
  %9853 = bitcast i16* %9852 to <16 x i16>*
  %9854 = load <16 x i16>, <16 x i16>* %9853, align 2, !tbaa !399
  %9855 = mul nsw i64 %9836, %108
  %9856 = add nsw i64 %9855, %93
  %9857 = getelementptr inbounds i16, i16* %blur_x, i64 %9856
  %9858 = getelementptr inbounds i16, i16* %9857, i64 -32
  %9859 = bitcast i16* %9858 to <16 x i16>*
  %9860 = load <16 x i16>, <16 x i16>* %9859, align 2, !tbaa !399
  %9861 = getelementptr inbounds i16, i16* %9857, i64 -16
  %9862 = bitcast i16* %9861 to <16 x i16>*
  %9863 = load <16 x i16>, <16 x i16>* %9862, align 2, !tbaa !399
  %9864 = zext i32 %.pre-phi3350 to i64
  %9865 = mul nsw i64 %9864, %108
  %9866 = add nsw i64 %9865, %93
  %9867 = getelementptr inbounds i16, i16* %blur_x, i64 %9866
  %9868 = getelementptr inbounds i16, i16* %9867, i64 -32
  %9869 = bitcast i16* %9868 to <16 x i16>*
  %9870 = load <16 x i16>, <16 x i16>* %9869, align 2, !tbaa !399
  %9871 = getelementptr inbounds i16, i16* %9867, i64 -16
  %9872 = bitcast i16* %9871 to <16 x i16>*
  %9873 = load <16 x i16>, <16 x i16>* %9872, align 2, !tbaa !399
  %9874 = add <16 x i16> %9860, %9851
  %9875 = add <16 x i16> %9874, %9870
  %9876 = add <16 x i16> %9863, %9854
  %9877 = add <16 x i16> %9876, %9873
  %9878 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9875, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9879 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9877, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9880 = shufflevector <16 x i16> %9878, <16 x i16> %9879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9881 = lshr <32 x i16> %9880, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9882 = shufflevector <32 x i16> %9881, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9883 = sext i32 %a26 to i64
  %9884 = add nsw i64 %9883, 30
  %9885 = mul nsw i64 %9884, %109
  %9886 = add nsw i64 %111, %9885
  %9887 = getelementptr inbounds i16, i16* %65, i64 %9886
  %9888 = getelementptr inbounds i16, i16* %9887, i64 -32
  %9889 = bitcast i16* %9888 to <16 x i16>*
  store <16 x i16> %9882, <16 x i16>* %9889, align 2, !tbaa !401
  %9890 = shufflevector <32 x i16> %9881, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9891 = getelementptr inbounds i16, i16* %9887, i64 -16
  %9892 = bitcast i16* %9891 to <16 x i16>*
  store <16 x i16> %9890, <16 x i16>* %9892, align 2, !tbaa !401
  br label %after_bb713

"for blur_y.s0.x.x.rebased718":                   ; preds = %"for blur_y.s0.x.x.rebased718.preheader", %"consume blur_x725"
  %indvars.iv3221 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased718.preheader" ], [ %indvars.iv.next3222, %"consume blur_x725" ]
  %9893 = add nsw i64 %indvars.iv3221, %100
  %9894 = icmp slt i64 %9893, 1
  %9895 = trunc i64 %9893 to i32
  %9896 = shl nsw i32 %9895, 5
  %9897 = icmp sgt i32 %4, %9896
  %9898 = or i1 %9894, %9897
  br i1 %9898, label %"produce blur_x724", label %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge"

"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased718"
  %.pre3415 = shl nsw i64 %9893, 5
  br label %"consume blur_x725"

"end for blur_y.s0.x.x.rebased719":               ; preds = %"consume blur_x725", %after_bb713
  br i1 %101, label %"for blur_y.s0.x.x.rebased726.preheader", label %"end for blur_y.s0.x.x.rebased727", !prof !386

"for blur_y.s0.x.x.rebased726.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased719"
  %9899 = sext i32 %t1638 to i64
  %9900 = zext i32 %.pre-phi3356 to i64
  %9901 = mul nsw i64 %9900, %108
  %9902 = sub nsw i64 %9901, %95
  %9903 = zext i32 %.pre-phi to i64
  %9904 = mul nsw i64 %9903, %108
  %9905 = sub nsw i64 %9904, %95
  %9906 = zext i32 %.pre-phi3350 to i64
  %9907 = mul nsw i64 %9906, %108
  %9908 = sub nsw i64 %9907, %95
  %9909 = sext i32 %a26 to i64
  %9910 = add nsw i64 %9909, 30
  %9911 = mul nsw i64 %9910, %109
  %9912 = add nsw i64 %9911, %112
  br label %"for blur_y.s0.x.x.rebased726"

"produce blur_x724":                              ; preds = %"for blur_y.s0.x.x.rebased718"
  %t1152 = add nsw i32 %9896, %t2129
  %9913 = sext i32 %t1152 to i64
  %9914 = getelementptr inbounds i16, i16* %read_input, i64 %9913
  %9915 = getelementptr inbounds i16, i16* %9914, i64 1
  %9916 = bitcast i16* %9915 to <16 x i16>*
  %9917 = load <16 x i16>, <16 x i16>* %9916, align 2, !tbaa !396
  %9918 = getelementptr inbounds i16, i16* %9914, i64 17
  %9919 = bitcast i16* %9918 to <16 x i16>*
  %9920 = load <16 x i16>, <16 x i16>* %9919, align 2, !tbaa !396
  %9921 = getelementptr inbounds i16, i16* %9914, i64 2
  %9922 = bitcast i16* %9921 to <16 x i16>*
  %9923 = load <16 x i16>, <16 x i16>* %9922, align 2, !tbaa !396
  %9924 = getelementptr inbounds i16, i16* %9914, i64 18
  %9925 = bitcast i16* %9924 to <16 x i16>*
  %9926 = load <16 x i16>, <16 x i16>* %9925, align 2, !tbaa !396
  %9927 = bitcast i16* %9914 to <16 x i16>*
  %9928 = load <16 x i16>, <16 x i16>* %9927, align 2, !tbaa !396
  %9929 = getelementptr inbounds i16, i16* %9914, i64 16
  %9930 = bitcast i16* %9929 to <16 x i16>*
  %9931 = load <16 x i16>, <16 x i16>* %9930, align 2, !tbaa !396
  %9932 = add <16 x i16> %9923, %9917
  %9933 = add <16 x i16> %9932, %9928
  %9934 = add <16 x i16> %9926, %9920
  %9935 = add <16 x i16> %9934, %9931
  %9936 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9933, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9937 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9935, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9938 = shufflevector <16 x i16> %9936, <16 x i16> %9937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9939 = lshr <32 x i16> %9938, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9940 = shufflevector <32 x i16> %9939, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9941 = shl nsw i64 %9893, 5
  %9942 = add nsw i64 %9941, %9794
  %9943 = getelementptr inbounds i16, i16* %blur_x, i64 %9942
  %9944 = bitcast i16* %9943 to <16 x i16>*
  store <16 x i16> %9940, <16 x i16>* %9944, align 2, !tbaa !399
  %9945 = shufflevector <32 x i16> %9939, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9946 = getelementptr inbounds i16, i16* %9943, i64 16
  %9947 = bitcast i16* %9946 to <16 x i16>*
  store <16 x i16> %9945, <16 x i16>* %9947, align 2, !tbaa !399
  br label %"consume blur_x725"

"consume blur_x725":                              ; preds = %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge", %"produce blur_x724"
  %.pre-phi3416 = phi i64 [ %.pre3415, %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge" ], [ %9941, %"produce blur_x724" ]
  %9948 = add nsw i64 %9797, %.pre-phi3416
  %9949 = getelementptr inbounds i16, i16* %blur_x, i64 %9948
  %9950 = bitcast i16* %9949 to <16 x i16>*
  %9951 = load <16 x i16>, <16 x i16>* %9950, align 2, !tbaa !399
  %9952 = getelementptr inbounds i16, i16* %9949, i64 16
  %9953 = bitcast i16* %9952 to <16 x i16>*
  %9954 = load <16 x i16>, <16 x i16>* %9953, align 2, !tbaa !399
  %9955 = add nsw i64 %9800, %.pre-phi3416
  %9956 = getelementptr inbounds i16, i16* %blur_x, i64 %9955
  %9957 = bitcast i16* %9956 to <16 x i16>*
  %9958 = load <16 x i16>, <16 x i16>* %9957, align 2, !tbaa !399
  %9959 = getelementptr inbounds i16, i16* %9956, i64 16
  %9960 = bitcast i16* %9959 to <16 x i16>*
  %9961 = load <16 x i16>, <16 x i16>* %9960, align 2, !tbaa !399
  %9962 = add nsw i64 %9803, %.pre-phi3416
  %9963 = getelementptr inbounds i16, i16* %blur_x, i64 %9962
  %9964 = bitcast i16* %9963 to <16 x i16>*
  %9965 = load <16 x i16>, <16 x i16>* %9964, align 2, !tbaa !399
  %9966 = getelementptr inbounds i16, i16* %9963, i64 16
  %9967 = bitcast i16* %9966 to <16 x i16>*
  %9968 = load <16 x i16>, <16 x i16>* %9967, align 2, !tbaa !399
  %9969 = add <16 x i16> %9958, %9951
  %9970 = add <16 x i16> %9969, %9965
  %9971 = add <16 x i16> %9961, %9954
  %9972 = add <16 x i16> %9971, %9968
  %9973 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9970, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9974 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9972, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9975 = shufflevector <16 x i16> %9973, <16 x i16> %9974, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9976 = lshr <32 x i16> %9975, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9977 = shufflevector <32 x i16> %9976, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9978 = add nsw i64 %9807, %.pre-phi3416
  %9979 = getelementptr inbounds i16, i16* %65, i64 %9978
  %9980 = bitcast i16* %9979 to <16 x i16>*
  store <16 x i16> %9977, <16 x i16>* %9980, align 2, !tbaa !401
  %9981 = shufflevector <32 x i16> %9976, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9982 = getelementptr inbounds i16, i16* %9979, i64 16
  %9983 = bitcast i16* %9982 to <16 x i16>*
  store <16 x i16> %9981, <16 x i16>* %9983, align 2, !tbaa !401
  %indvars.iv.next3222 = add nuw nsw i64 %indvars.iv3221, 1
  %.not2585 = icmp eq i64 %indvars.iv.next3222, %180
  br i1 %.not2585, label %"end for blur_y.s0.x.x.rebased719", label %"for blur_y.s0.x.x.rebased718"

"for blur_y.s0.x.x.rebased726":                   ; preds = %"for blur_y.s0.x.x.rebased726.preheader", %"consume blur_x734"
  %blur_y.s0.x.x.rebased728 = phi i32 [ %10062, %"consume blur_x734" ], [ 0, %"for blur_y.s0.x.x.rebased726.preheader" ]
  %9984 = add nsw i32 %blur_y.s0.x.x.rebased728, %t1582
  %a301 = shl nsw i32 %9984, 5
  %9985 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %9985, i32 %a301, i32 %a14
  %9986 = icmp slt i32 %9984, 1
  %9987 = icmp sgt i32 %4, %a301
  %9988 = or i1 %9986, %9987
  br i1 %9988, label %"produce blur_x732", label %"consume blur_x734"

"end for blur_y.s0.x.x.rebased727":               ; preds = %"consume blur_x734", %"end for blur_y.s0.x.x.rebased719"
  br i1 %34, label %"produce blur_x738", label %after_bb735

"produce blur_x732":                              ; preds = %"for blur_y.s0.x.x.rebased726"
  %9989 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s733 = select i1 %9989, i32 %b307, i32 %4
  %t1157 = add nsw i32 %blur_x.s0.x.v1.base.s733, %t2129
  %9990 = sext i32 %t1157 to i64
  %9991 = getelementptr inbounds i16, i16* %read_input, i64 %9990
  %9992 = getelementptr inbounds i16, i16* %9991, i64 1
  %9993 = bitcast i16* %9992 to <16 x i16>*
  %9994 = load <16 x i16>, <16 x i16>* %9993, align 2, !tbaa !396
  %9995 = getelementptr inbounds i16, i16* %9991, i64 17
  %9996 = bitcast i16* %9995 to <16 x i16>*
  %9997 = load <16 x i16>, <16 x i16>* %9996, align 2, !tbaa !396
  %9998 = getelementptr inbounds i16, i16* %9991, i64 2
  %9999 = bitcast i16* %9998 to <16 x i16>*
  %10000 = load <16 x i16>, <16 x i16>* %9999, align 2, !tbaa !396
  %10001 = getelementptr inbounds i16, i16* %9991, i64 18
  %10002 = bitcast i16* %10001 to <16 x i16>*
  %10003 = load <16 x i16>, <16 x i16>* %10002, align 2, !tbaa !396
  %10004 = bitcast i16* %9991 to <16 x i16>*
  %10005 = load <16 x i16>, <16 x i16>* %10004, align 2, !tbaa !396
  %10006 = getelementptr inbounds i16, i16* %9991, i64 16
  %10007 = bitcast i16* %10006 to <16 x i16>*
  %10008 = load <16 x i16>, <16 x i16>* %10007, align 2, !tbaa !396
  %10009 = add <16 x i16> %10000, %9994
  %10010 = add <16 x i16> %10009, %10005
  %10011 = add <16 x i16> %10003, %9997
  %10012 = add <16 x i16> %10011, %10008
  %10013 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10010, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10012, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10015 = shufflevector <16 x i16> %10013, <16 x i16> %10014, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10016 = lshr <32 x i16> %10015, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10017 = shufflevector <32 x i16> %10016, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10018 = sext i32 %blur_x.s0.x.v1.base.s733 to i64
  %10019 = add nsw i64 %10018, %9899
  %10020 = getelementptr inbounds i16, i16* %blur_x, i64 %10019
  %10021 = bitcast i16* %10020 to <16 x i16>*
  store <16 x i16> %10017, <16 x i16>* %10021, align 2, !tbaa !399
  %10022 = shufflevector <32 x i16> %10016, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10023 = getelementptr inbounds i16, i16* %10020, i64 16
  %10024 = bitcast i16* %10023 to <16 x i16>*
  store <16 x i16> %10022, <16 x i16>* %10024, align 2, !tbaa !399
  br label %"consume blur_x734"

"consume blur_x734":                              ; preds = %"for blur_y.s0.x.x.rebased726", %"produce blur_x732"
  %10025 = sext i32 %b307 to i64
  %10026 = add nsw i64 %9902, %10025
  %10027 = getelementptr inbounds i16, i16* %blur_x, i64 %10026
  %10028 = bitcast i16* %10027 to <16 x i16>*
  %10029 = load <16 x i16>, <16 x i16>* %10028, align 2, !tbaa !399
  %10030 = getelementptr inbounds i16, i16* %10027, i64 16
  %10031 = bitcast i16* %10030 to <16 x i16>*
  %10032 = load <16 x i16>, <16 x i16>* %10031, align 2, !tbaa !399
  %10033 = add nsw i64 %9905, %10025
  %10034 = getelementptr inbounds i16, i16* %blur_x, i64 %10033
  %10035 = bitcast i16* %10034 to <16 x i16>*
  %10036 = load <16 x i16>, <16 x i16>* %10035, align 2, !tbaa !399
  %10037 = getelementptr inbounds i16, i16* %10034, i64 16
  %10038 = bitcast i16* %10037 to <16 x i16>*
  %10039 = load <16 x i16>, <16 x i16>* %10038, align 2, !tbaa !399
  %10040 = add nsw i64 %9908, %10025
  %10041 = getelementptr inbounds i16, i16* %blur_x, i64 %10040
  %10042 = bitcast i16* %10041 to <16 x i16>*
  %10043 = load <16 x i16>, <16 x i16>* %10042, align 2, !tbaa !399
  %10044 = getelementptr inbounds i16, i16* %10041, i64 16
  %10045 = bitcast i16* %10044 to <16 x i16>*
  %10046 = load <16 x i16>, <16 x i16>* %10045, align 2, !tbaa !399
  %10047 = add <16 x i16> %10036, %10029
  %10048 = add <16 x i16> %10047, %10043
  %10049 = add <16 x i16> %10039, %10032
  %10050 = add <16 x i16> %10049, %10046
  %10051 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10048, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10052 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10050, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10053 = shufflevector <16 x i16> %10051, <16 x i16> %10052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10054 = lshr <32 x i16> %10053, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10055 = shufflevector <32 x i16> %10054, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10056 = add nsw i64 %9912, %10025
  %10057 = getelementptr inbounds i16, i16* %65, i64 %10056
  %10058 = bitcast i16* %10057 to <16 x i16>*
  store <16 x i16> %10055, <16 x i16>* %10058, align 2, !tbaa !401
  %10059 = shufflevector <32 x i16> %10054, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10060 = getelementptr inbounds i16, i16* %10057, i64 16
  %10061 = bitcast i16* %10060 to <16 x i16>*
  store <16 x i16> %10059, <16 x i16>* %10061, align 2, !tbaa !401
  %10062 = add nuw nsw i32 %blur_y.s0.x.x.rebased728, 1
  %.not2584 = icmp eq i32 %10062, %t1639
  br i1 %.not2584, label %"end for blur_y.s0.x.x.rebased727", label %"for blur_y.s0.x.x.rebased726"

after_bb735:                                      ; preds = %"end for blur_y.s0.x.x.rebased727", %"produce blur_x738"
  br i1 %99, label %"for blur_y.s0.x.x.rebased740.preheader", label %"end for blur_y.s0.x.x.rebased741", !prof !386

"for blur_y.s0.x.x.rebased740.preheader":         ; preds = %after_bb735
  %10063 = sext i32 %t1644 to i64
  %10064 = zext i32 %.pre-phi to i64
  %10065 = mul nsw i64 %10064, %108
  %10066 = sub nsw i64 %10065, %95
  %10067 = zext i32 %.pre-phi3346 to i64
  %10068 = mul nsw i64 %10067, %108
  %10069 = sub nsw i64 %10068, %95
  %10070 = zext i32 %.pre-phi3356 to i64
  %10071 = mul nsw i64 %10070, %108
  %10072 = sub nsw i64 %10071, %95
  %10073 = sext i32 %a26 to i64
  %10074 = add nsw i64 %10073, 31
  %10075 = mul nsw i64 %10074, %109
  %10076 = add nsw i64 %10075, %112
  br label %"for blur_y.s0.x.x.rebased740"

"produce blur_x738":                              ; preds = %"end for blur_y.s0.x.x.rebased727"
  %10077 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %10078 = getelementptr inbounds i16, i16* %10077, i64 -31
  %10079 = bitcast i16* %10078 to <16 x i16>*
  %10080 = load <16 x i16>, <16 x i16>* %10079, align 2, !tbaa !396
  %10081 = getelementptr inbounds i16, i16* %10077, i64 -15
  %10082 = bitcast i16* %10081 to <16 x i16>*
  %10083 = load <16 x i16>, <16 x i16>* %10082, align 2, !tbaa !396
  %10084 = getelementptr inbounds i16, i16* %10077, i64 -30
  %10085 = bitcast i16* %10084 to <16 x i16>*
  %10086 = load <16 x i16>, <16 x i16>* %10085, align 2, !tbaa !396
  %10087 = getelementptr inbounds i16, i16* %10077, i64 -14
  %10088 = bitcast i16* %10087 to <16 x i16>*
  %10089 = load <16 x i16>, <16 x i16>* %10088, align 2, !tbaa !396
  %10090 = getelementptr inbounds i16, i16* %10077, i64 -32
  %10091 = bitcast i16* %10090 to <16 x i16>*
  %10092 = load <16 x i16>, <16 x i16>* %10091, align 2, !tbaa !396
  %10093 = getelementptr inbounds i16, i16* %10077, i64 -16
  %10094 = bitcast i16* %10093 to <16 x i16>*
  %10095 = load <16 x i16>, <16 x i16>* %10094, align 2, !tbaa !396
  %10096 = add <16 x i16> %10086, %10080
  %10097 = add <16 x i16> %10096, %10092
  %10098 = add <16 x i16> %10089, %10083
  %10099 = add <16 x i16> %10098, %10095
  %10100 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10097, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10101 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10099, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10102 = shufflevector <16 x i16> %10100, <16 x i16> %10101, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10103 = lshr <32 x i16> %10102, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10104 = shufflevector <32 x i16> %10103, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10105 = zext i32 %.pre-phi3346 to i64
  %10106 = mul nsw i64 %96, %10105
  %10107 = add nsw i64 %98, %10106
  %10108 = getelementptr inbounds i16, i16* %blur_x, i64 %10107
  %10109 = getelementptr inbounds i16, i16* %10108, i64 -32
  %10110 = bitcast i16* %10109 to <16 x i16>*
  store <16 x i16> %10104, <16 x i16>* %10110, align 2, !tbaa !399
  %10111 = shufflevector <32 x i16> %10103, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10112 = getelementptr inbounds i16, i16* %10108, i64 -16
  %10113 = bitcast i16* %10112 to <16 x i16>*
  store <16 x i16> %10111, <16 x i16>* %10113, align 2, !tbaa !399
  %10114 = zext i32 %.pre-phi to i64
  %10115 = mul nsw i64 %10114, %108
  %10116 = add nsw i64 %10115, %93
  %10117 = getelementptr inbounds i16, i16* %blur_x, i64 %10116
  %10118 = getelementptr inbounds i16, i16* %10117, i64 -32
  %10119 = bitcast i16* %10118 to <16 x i16>*
  %10120 = load <16 x i16>, <16 x i16>* %10119, align 2, !tbaa !399
  %10121 = getelementptr inbounds i16, i16* %10117, i64 -16
  %10122 = bitcast i16* %10121 to <16 x i16>*
  %10123 = load <16 x i16>, <16 x i16>* %10122, align 2, !tbaa !399
  %10124 = mul nsw i64 %10105, %108
  %10125 = add nsw i64 %10124, %93
  %10126 = getelementptr inbounds i16, i16* %blur_x, i64 %10125
  %10127 = getelementptr inbounds i16, i16* %10126, i64 -32
  %10128 = bitcast i16* %10127 to <16 x i16>*
  %10129 = load <16 x i16>, <16 x i16>* %10128, align 2, !tbaa !399
  %10130 = getelementptr inbounds i16, i16* %10126, i64 -16
  %10131 = bitcast i16* %10130 to <16 x i16>*
  %10132 = load <16 x i16>, <16 x i16>* %10131, align 2, !tbaa !399
  %10133 = zext i32 %.pre-phi3356 to i64
  %10134 = mul nsw i64 %10133, %108
  %10135 = add nsw i64 %10134, %93
  %10136 = getelementptr inbounds i16, i16* %blur_x, i64 %10135
  %10137 = getelementptr inbounds i16, i16* %10136, i64 -32
  %10138 = bitcast i16* %10137 to <16 x i16>*
  %10139 = load <16 x i16>, <16 x i16>* %10138, align 2, !tbaa !399
  %10140 = getelementptr inbounds i16, i16* %10136, i64 -16
  %10141 = bitcast i16* %10140 to <16 x i16>*
  %10142 = load <16 x i16>, <16 x i16>* %10141, align 2, !tbaa !399
  %10143 = add <16 x i16> %10129, %10120
  %10144 = add <16 x i16> %10143, %10139
  %10145 = add <16 x i16> %10132, %10123
  %10146 = add <16 x i16> %10145, %10142
  %10147 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10144, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10148 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10146, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10149 = shufflevector <16 x i16> %10147, <16 x i16> %10148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10150 = lshr <32 x i16> %10149, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10151 = shufflevector <32 x i16> %10150, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10152 = sext i32 %a26 to i64
  %10153 = add nsw i64 %10152, 31
  %10154 = mul nsw i64 %10153, %109
  %10155 = add nsw i64 %111, %10154
  %10156 = getelementptr inbounds i16, i16* %65, i64 %10155
  %10157 = getelementptr inbounds i16, i16* %10156, i64 -32
  %10158 = bitcast i16* %10157 to <16 x i16>*
  store <16 x i16> %10151, <16 x i16>* %10158, align 2, !tbaa !401
  %10159 = shufflevector <32 x i16> %10150, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10160 = getelementptr inbounds i16, i16* %10156, i64 -16
  %10161 = bitcast i16* %10160 to <16 x i16>*
  store <16 x i16> %10159, <16 x i16>* %10161, align 2, !tbaa !401
  br label %after_bb735

"for blur_y.s0.x.x.rebased740":                   ; preds = %"for blur_y.s0.x.x.rebased740.preheader", %"consume blur_x747"
  %indvars.iv3224 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased740.preheader" ], [ %indvars.iv.next3225, %"consume blur_x747" ]
  %10162 = add nsw i64 %indvars.iv3224, %100
  %10163 = icmp slt i64 %10162, 1
  %10164 = trunc i64 %10162 to i32
  %10165 = shl nsw i32 %10164, 5
  %10166 = icmp sgt i32 %4, %10165
  %10167 = or i1 %10163, %10166
  br i1 %10167, label %"produce blur_x746", label %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge"

"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased740"
  %.pre3417 = shl nsw i64 %10162, 5
  br label %"consume blur_x747"

"end for blur_y.s0.x.x.rebased741":               ; preds = %"consume blur_x747", %after_bb735
  br i1 %101, label %"for blur_y.s0.x.x.rebased748.preheader", label %"end for blur_y.s0.x.x.rebased749", !prof !386

"for blur_y.s0.x.x.rebased748.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased741"
  %10168 = sext i32 %t1644 to i64
  %10169 = zext i32 %.pre-phi to i64
  %10170 = mul nsw i64 %10169, %108
  %10171 = sub nsw i64 %10170, %95
  %10172 = zext i32 %.pre-phi3346 to i64
  %10173 = mul nsw i64 %10172, %108
  %10174 = sub nsw i64 %10173, %95
  %10175 = zext i32 %.pre-phi3356 to i64
  %10176 = mul nsw i64 %10175, %108
  %10177 = sub nsw i64 %10176, %95
  %10178 = sext i32 %a26 to i64
  %10179 = add nsw i64 %10178, 31
  %10180 = mul nsw i64 %10179, %109
  %10181 = add nsw i64 %10180, %112
  br label %"for blur_y.s0.x.x.rebased748"

"produce blur_x746":                              ; preds = %"for blur_y.s0.x.x.rebased740"
  %t1168 = add nsw i32 %10165, %t2145
  %10182 = sext i32 %t1168 to i64
  %10183 = getelementptr inbounds i16, i16* %read_input, i64 %10182
  %10184 = getelementptr inbounds i16, i16* %10183, i64 1
  %10185 = bitcast i16* %10184 to <16 x i16>*
  %10186 = load <16 x i16>, <16 x i16>* %10185, align 2, !tbaa !396
  %10187 = getelementptr inbounds i16, i16* %10183, i64 17
  %10188 = bitcast i16* %10187 to <16 x i16>*
  %10189 = load <16 x i16>, <16 x i16>* %10188, align 2, !tbaa !396
  %10190 = getelementptr inbounds i16, i16* %10183, i64 2
  %10191 = bitcast i16* %10190 to <16 x i16>*
  %10192 = load <16 x i16>, <16 x i16>* %10191, align 2, !tbaa !396
  %10193 = getelementptr inbounds i16, i16* %10183, i64 18
  %10194 = bitcast i16* %10193 to <16 x i16>*
  %10195 = load <16 x i16>, <16 x i16>* %10194, align 2, !tbaa !396
  %10196 = bitcast i16* %10183 to <16 x i16>*
  %10197 = load <16 x i16>, <16 x i16>* %10196, align 2, !tbaa !396
  %10198 = getelementptr inbounds i16, i16* %10183, i64 16
  %10199 = bitcast i16* %10198 to <16 x i16>*
  %10200 = load <16 x i16>, <16 x i16>* %10199, align 2, !tbaa !396
  %10201 = add <16 x i16> %10192, %10186
  %10202 = add <16 x i16> %10201, %10197
  %10203 = add <16 x i16> %10195, %10189
  %10204 = add <16 x i16> %10203, %10200
  %10205 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10202, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10204, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10207 = shufflevector <16 x i16> %10205, <16 x i16> %10206, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10208 = lshr <32 x i16> %10207, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10209 = shufflevector <32 x i16> %10208, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10210 = shl nsw i64 %10162, 5
  %10211 = add nsw i64 %10210, %10063
  %10212 = getelementptr inbounds i16, i16* %blur_x, i64 %10211
  %10213 = bitcast i16* %10212 to <16 x i16>*
  store <16 x i16> %10209, <16 x i16>* %10213, align 2, !tbaa !399
  %10214 = shufflevector <32 x i16> %10208, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10215 = getelementptr inbounds i16, i16* %10212, i64 16
  %10216 = bitcast i16* %10215 to <16 x i16>*
  store <16 x i16> %10214, <16 x i16>* %10216, align 2, !tbaa !399
  br label %"consume blur_x747"

"consume blur_x747":                              ; preds = %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge", %"produce blur_x746"
  %.pre-phi3418 = phi i64 [ %.pre3417, %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge" ], [ %10210, %"produce blur_x746" ]
  %10217 = add nsw i64 %10066, %.pre-phi3418
  %10218 = getelementptr inbounds i16, i16* %blur_x, i64 %10217
  %10219 = bitcast i16* %10218 to <16 x i16>*
  %10220 = load <16 x i16>, <16 x i16>* %10219, align 2, !tbaa !399
  %10221 = getelementptr inbounds i16, i16* %10218, i64 16
  %10222 = bitcast i16* %10221 to <16 x i16>*
  %10223 = load <16 x i16>, <16 x i16>* %10222, align 2, !tbaa !399
  %10224 = add nsw i64 %10069, %.pre-phi3418
  %10225 = getelementptr inbounds i16, i16* %blur_x, i64 %10224
  %10226 = bitcast i16* %10225 to <16 x i16>*
  %10227 = load <16 x i16>, <16 x i16>* %10226, align 2, !tbaa !399
  %10228 = getelementptr inbounds i16, i16* %10225, i64 16
  %10229 = bitcast i16* %10228 to <16 x i16>*
  %10230 = load <16 x i16>, <16 x i16>* %10229, align 2, !tbaa !399
  %10231 = add nsw i64 %10072, %.pre-phi3418
  %10232 = getelementptr inbounds i16, i16* %blur_x, i64 %10231
  %10233 = bitcast i16* %10232 to <16 x i16>*
  %10234 = load <16 x i16>, <16 x i16>* %10233, align 2, !tbaa !399
  %10235 = getelementptr inbounds i16, i16* %10232, i64 16
  %10236 = bitcast i16* %10235 to <16 x i16>*
  %10237 = load <16 x i16>, <16 x i16>* %10236, align 2, !tbaa !399
  %10238 = add <16 x i16> %10227, %10220
  %10239 = add <16 x i16> %10238, %10234
  %10240 = add <16 x i16> %10230, %10223
  %10241 = add <16 x i16> %10240, %10237
  %10242 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10239, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10243 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10241, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10244 = shufflevector <16 x i16> %10242, <16 x i16> %10243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10245 = lshr <32 x i16> %10244, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10246 = shufflevector <32 x i16> %10245, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10247 = add nsw i64 %10076, %.pre-phi3418
  %10248 = getelementptr inbounds i16, i16* %65, i64 %10247
  %10249 = bitcast i16* %10248 to <16 x i16>*
  store <16 x i16> %10246, <16 x i16>* %10249, align 2, !tbaa !401
  %10250 = shufflevector <32 x i16> %10245, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10251 = getelementptr inbounds i16, i16* %10248, i64 16
  %10252 = bitcast i16* %10251 to <16 x i16>*
  store <16 x i16> %10250, <16 x i16>* %10252, align 2, !tbaa !401
  %indvars.iv.next3225 = add nuw nsw i64 %indvars.iv3224, 1
  %.not2583 = icmp eq i64 %indvars.iv.next3225, %180
  br i1 %.not2583, label %"end for blur_y.s0.x.x.rebased741", label %"for blur_y.s0.x.x.rebased740"

"for blur_y.s0.x.x.rebased748":                   ; preds = %"for blur_y.s0.x.x.rebased748.preheader", %"consume blur_x756"
  %blur_y.s0.x.x.rebased750 = phi i32 [ %10332, %"consume blur_x756" ], [ 0, %"for blur_y.s0.x.x.rebased748.preheader" ]
  %10253 = add nsw i32 %blur_y.s0.x.x.rebased750, %t1582
  %a308 = shl nsw i32 %10253, 5
  %10254 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %10254, i32 %a308, i32 %a14
  %10255 = icmp slt i32 %10253, 1
  %10256 = icmp sgt i32 %4, %a308
  %10257 = or i1 %10255, %10256
  br i1 %10257, label %"produce blur_x754", label %"consume blur_x756"

"end for blur_y.s0.x.x.rebased749":               ; preds = %"consume blur_x756", %"end for blur_y.s0.x.x.rebased741"
  %10258 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2581 = icmp eq i32 %10258, %t1568
  br i1 %.not2581, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x754":                              ; preds = %"for blur_y.s0.x.x.rebased748"
  %10259 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s755 = select i1 %10259, i32 %b314, i32 %4
  %t1173 = add nsw i32 %blur_x.s0.x.v1.base.s755, %t2145
  %10260 = sext i32 %t1173 to i64
  %10261 = getelementptr inbounds i16, i16* %read_input, i64 %10260
  %10262 = getelementptr inbounds i16, i16* %10261, i64 1
  %10263 = bitcast i16* %10262 to <16 x i16>*
  %10264 = load <16 x i16>, <16 x i16>* %10263, align 2, !tbaa !396
  %10265 = getelementptr inbounds i16, i16* %10261, i64 17
  %10266 = bitcast i16* %10265 to <16 x i16>*
  %10267 = load <16 x i16>, <16 x i16>* %10266, align 2, !tbaa !396
  %10268 = getelementptr inbounds i16, i16* %10261, i64 2
  %10269 = bitcast i16* %10268 to <16 x i16>*
  %10270 = load <16 x i16>, <16 x i16>* %10269, align 2, !tbaa !396
  %10271 = getelementptr inbounds i16, i16* %10261, i64 18
  %10272 = bitcast i16* %10271 to <16 x i16>*
  %10273 = load <16 x i16>, <16 x i16>* %10272, align 2, !tbaa !396
  %10274 = bitcast i16* %10261 to <16 x i16>*
  %10275 = load <16 x i16>, <16 x i16>* %10274, align 2, !tbaa !396
  %10276 = getelementptr inbounds i16, i16* %10261, i64 16
  %10277 = bitcast i16* %10276 to <16 x i16>*
  %10278 = load <16 x i16>, <16 x i16>* %10277, align 2, !tbaa !396
  %10279 = add <16 x i16> %10270, %10264
  %10280 = add <16 x i16> %10279, %10275
  %10281 = add <16 x i16> %10273, %10267
  %10282 = add <16 x i16> %10281, %10278
  %10283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10280, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10282, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10285 = shufflevector <16 x i16> %10283, <16 x i16> %10284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10286 = lshr <32 x i16> %10285, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10287 = shufflevector <32 x i16> %10286, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10288 = sext i32 %blur_x.s0.x.v1.base.s755 to i64
  %10289 = add nsw i64 %10288, %10168
  %10290 = getelementptr inbounds i16, i16* %blur_x, i64 %10289
  %10291 = bitcast i16* %10290 to <16 x i16>*
  store <16 x i16> %10287, <16 x i16>* %10291, align 2, !tbaa !399
  %10292 = shufflevector <32 x i16> %10286, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10293 = getelementptr inbounds i16, i16* %10290, i64 16
  %10294 = bitcast i16* %10293 to <16 x i16>*
  store <16 x i16> %10292, <16 x i16>* %10294, align 2, !tbaa !399
  br label %"consume blur_x756"

"consume blur_x756":                              ; preds = %"for blur_y.s0.x.x.rebased748", %"produce blur_x754"
  %10295 = sext i32 %b314 to i64
  %10296 = add nsw i64 %10171, %10295
  %10297 = getelementptr inbounds i16, i16* %blur_x, i64 %10296
  %10298 = bitcast i16* %10297 to <16 x i16>*
  %10299 = load <16 x i16>, <16 x i16>* %10298, align 2, !tbaa !399
  %10300 = getelementptr inbounds i16, i16* %10297, i64 16
  %10301 = bitcast i16* %10300 to <16 x i16>*
  %10302 = load <16 x i16>, <16 x i16>* %10301, align 2, !tbaa !399
  %10303 = add nsw i64 %10174, %10295
  %10304 = getelementptr inbounds i16, i16* %blur_x, i64 %10303
  %10305 = bitcast i16* %10304 to <16 x i16>*
  %10306 = load <16 x i16>, <16 x i16>* %10305, align 2, !tbaa !399
  %10307 = getelementptr inbounds i16, i16* %10304, i64 16
  %10308 = bitcast i16* %10307 to <16 x i16>*
  %10309 = load <16 x i16>, <16 x i16>* %10308, align 2, !tbaa !399
  %10310 = add nsw i64 %10177, %10295
  %10311 = getelementptr inbounds i16, i16* %blur_x, i64 %10310
  %10312 = bitcast i16* %10311 to <16 x i16>*
  %10313 = load <16 x i16>, <16 x i16>* %10312, align 2, !tbaa !399
  %10314 = getelementptr inbounds i16, i16* %10311, i64 16
  %10315 = bitcast i16* %10314 to <16 x i16>*
  %10316 = load <16 x i16>, <16 x i16>* %10315, align 2, !tbaa !399
  %10317 = add <16 x i16> %10306, %10299
  %10318 = add <16 x i16> %10317, %10313
  %10319 = add <16 x i16> %10309, %10302
  %10320 = add <16 x i16> %10319, %10316
  %10321 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10318, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10322 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10320, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10323 = shufflevector <16 x i16> %10321, <16 x i16> %10322, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10324 = lshr <32 x i16> %10323, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10325 = shufflevector <32 x i16> %10324, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10326 = add nsw i64 %10181, %10295
  %10327 = getelementptr inbounds i16, i16* %65, i64 %10326
  %10328 = bitcast i16* %10327 to <16 x i16>*
  store <16 x i16> %10325, <16 x i16>* %10328, align 2, !tbaa !401
  %10329 = shufflevector <32 x i16> %10324, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10330 = getelementptr inbounds i16, i16* %10327, i64 16
  %10331 = bitcast i16* %10330 to <16 x i16>*
  store <16 x i16> %10329, <16 x i16>* %10331, align 2, !tbaa !401
  %10332 = add nuw nsw i32 %blur_y.s0.x.x.rebased750, 1
  %.not2582 = icmp eq i32 %10332, %t1639
  br i1 %.not2582, label %"end for blur_y.s0.x.x.rebased749", label %"for blur_y.s0.x.x.rebased748"

"for blur_y.s0.y.y778":                           ; preds = %"for blur_y.s0.y.y778.preheader", %"end for blur_y.s0.x.x.rebased2266"
  %blur_y.s0.y.y780 = phi i32 [ %19739, %"end for blur_y.s0.x.x.rebased2266" ], [ 0, %"for blur_y.s0.y.y778.preheader" ]
  %a361 = shl nsw i32 %blur_y.s0.y.y780, 5
  %10333 = icmp sgt i32 %b363, %a361
  %blur_y.s0.y.yi.base.s781 = select i1 %10333, i32 %a361, i32 %b363
  %10334 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2726 = icmp ult i64 %10334, %261
  %10335 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2726, label %if.then.i2729, label %pseudostack_alloc.exit2742, !prof !390

if.then.i2729:                                    ; preds = %"for blur_y.s0.y.y778"
  %tobool1.not.i2728 = icmp ne i8* %10335, null
  %10336 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2731 = icmp ugt i64 %10336, 16384
  %or.cond2796 = and i1 %tobool1.not.i2728, %cmp2.i2731
  br i1 %or.cond2796, label %if.then3.i2733, label %if.end.i2737

if.then3.i2733:                                   ; preds = %if.then.i2729
  call void @halide_free(i8* null, i8* nonnull %10335) #16
  %.pre3340 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2737

if.end.i2737:                                     ; preds = %if.then3.i2733, %if.then.i2729
  %10337 = phi i64 [ %.pre3340, %if.then3.i2733 ], [ %10336, %if.then.i2729 ]
  %add.i2735 = add i64 %10337, %261
  store i64 %add.i2735, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2736 = icmp ugt i64 %add.i2735, 16384
  br i1 %cmp7.i2736, label %if.then8.i2739, label %if.end11.i2741

if.then8.i2739:                                   ; preds = %if.end.i2737
  %call.i2738 = call i8* @halide_malloc(i8* null, i64 %261) #16
  br label %if.end11.i2741

if.end11.i2741:                                   ; preds = %if.then8.i2739, %if.end.i2737
  %storemerge.i2740 = phi i8* [ %call.i2738, %if.then8.i2739 ], [ null, %if.end.i2737 ]
  store i8* %storemerge.i2740, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %261, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2742

pseudostack_alloc.exit2742:                       ; preds = %"for blur_y.s0.y.y778", %if.end11.i2741
  %10338 = phi i8* [ %storemerge.i2740, %if.end11.i2741 ], [ %10335, %"for blur_y.s0.y.y778" ]
  %10339 = bitcast i8* %10338 to i16*
  %.not2432 = icmp eq i8* %10338, null
  br i1 %.not2432, label %then_bb783, label %"produce read_input785", !prof !392

"end for blur_y.s0.y.y779":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02785, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2743

if.then.i2743.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2266"
  %10340 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %10341 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2743

if.then.i2743:                                    ; preds = %if.then.i2743.loopexit, %"end for blur_y.s0.y.y779"
  %.12793 = phi i8* [ %.0, %"end for blur_y.s0.y.y779" ], [ %10340, %if.then.i2743.loopexit ]
  %.127862790 = phi i8* [ %.02785, %"end for blur_y.s0.y.y779" ], [ %10341, %if.then.i2743.loopexit ]
  %ptr1.i = bitcast i8* %.127862790 to i8**
  %10342 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2767 = icmp eq i8* %10342, null
  br i1 %tobool.not.i2767, label %pseudostack_free.exit, label %land.lhs.true.i2770

land.lhs.true.i2770:                              ; preds = %if.then.i2743
  %cumulative_size.i2768 = getelementptr inbounds i8, i8* %.127862790, i64 16
  %10343 = bitcast i8* %cumulative_size.i2768 to i64*
  %10344 = load i64, i64* %10343, align 8, !tbaa !391
  %cmp.i2769 = icmp ugt i64 %10344, 16384
  br i1 %cmp.i2769, label %if.then.i2771, label %pseudostack_free.exit

if.then.i2771:                                    ; preds = %land.lhs.true.i2770
  call void @halide_free(i8* null, i8* nonnull %10342) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2743, %land.lhs.true.i2770, %if.then.i2771
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.127862790, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y779", %pseudostack_free.exit
  %.12792 = phi i8* [ %.0, %"end for blur_y.s0.y.y779" ], [ %.12793, %pseudostack_free.exit ]
  %tobool.not.i2745.not = icmp eq i8* %.12792, null
  br i1 %tobool.not.i2745.not, label %call_destructor.exit2748, label %if.then.i2746

if.then.i2746:                                    ; preds = %call_destructor.exit
  %ptr1.i2774 = bitcast i8* %.12792 to i8**
  %10345 = load i8*, i8** %ptr1.i2774, align 8, !tbaa !389
  %tobool.not.i2775 = icmp eq i8* %10345, null
  br i1 %tobool.not.i2775, label %pseudostack_free.exit2783, label %land.lhs.true.i2778

land.lhs.true.i2778:                              ; preds = %if.then.i2746
  %cumulative_size.i2776 = getelementptr inbounds i8, i8* %.12792, i64 16
  %10346 = bitcast i8* %cumulative_size.i2776 to i64*
  %10347 = load i64, i64* %10346, align 8, !tbaa !391
  %cmp.i2777 = icmp ugt i64 %10347, 16384
  br i1 %cmp.i2777, label %if.then.i2779, label %pseudostack_free.exit2783

if.then.i2779:                                    ; preds = %land.lhs.true.i2778
  call void @halide_free(i8* null, i8* nonnull %10345) #16
  br label %pseudostack_free.exit2783

pseudostack_free.exit2783:                        ; preds = %if.then.i2746, %land.lhs.true.i2778, %if.then.i2779
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12792, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2748

call_destructor.exit2748:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2783
  ret i32 0

then_bb783:                                       ; preds = %pseudostack_alloc.exit2742
  %10348 = alloca i8*, i64 %261, align 32
  %10349 = bitcast i8** %10348 to i16*
  store i8** %10348, i8*** %262, align 8
  br label %"produce read_input785"

"produce read_input785":                          ; preds = %pseudostack_alloc.exit2742, %then_bb783
  %read_input784 = phi i16* [ %10349, %then_bb783 ], [ %10339, %pseudostack_alloc.exit2742 ]
  %a365 = add nsw i32 %blur_y.s0.y.yi.base.s781, %195
  %10350 = icmp sgt i32 %a365, %201
  %a364 = select i1 %10350, i32 %a365, i32 %201
  %b366 = add nsw i32 %a365, 34
  %10351 = icmp sgt i32 %b366, %a364
  %10352 = icmp sgt i32 %a364, %b371
  %a368 = select i1 %10352, i32 %a364, i32 %b371
  %10353 = icmp sgt i32 %b366, %a368
  %a374 = sub i32 %263, %blur_y.s0.y.yi.base.s781
  %10354 = icmp sgt i32 %a374, 0
  br i1 %10354, label %"for read_input.s0.y.rebased792.preheader", label %"end for read_input.s0.y.rebased793", !prof !386

"for read_input.s0.y.rebased792.preheader":       ; preds = %"produce read_input785"
  %10355 = icmp slt i32 %a374, 34
  %a373 = select i1 %10355, i32 %a374, i32 34
  %10356 = add nsw i32 %264, %blur_y.s0.y.yi.base.s781
  %10357 = sext i32 %10356 to i64
  %10358 = zext i32 %a373 to i64
  br label %"for read_input.s0.y.rebased792"

"for read_input.s0.y.rebased792":                 ; preds = %"for read_input.s0.y.rebased792.preheader", %"end for read_input.s0.x.x798"
  %indvars.iv3227 = phi i64 [ 0, %"for read_input.s0.y.rebased792.preheader" ], [ %indvars.iv.next3228, %"end for read_input.s0.x.x798" ]
  %10359 = add nsw i64 %indvars.iv3227, %10357
  %10360 = icmp slt i64 %10359, %509
  %10361 = trunc i64 %10359 to i32
  %a381 = select i1 %10360, i32 %10361, i32 %b384
  %10362 = trunc i64 %indvars.iv3227 to i32
  %10363 = mul i32 %a363, %10362
  %t1610796 = sub i32 %10363, %265
  %10364 = icmp sgt i32 %a381, 0
  %10365 = select i1 %10364, i32 %a381, i32 0
  %10366 = mul nsw i32 %10365, %203
  %t1609795 = sub nsw i32 %10366, %199
  %10367 = insertelement <32 x i32> undef, i32 %t1609795, i32 0
  %10368 = shufflevector <32 x i32> %10367, <32 x i32> undef, <32 x i32> zeroinitializer
  %10369 = sext i32 %t1610796 to i64
  br label %"for read_input.s0.x.x797"

"end for read_input.s0.y.rebased793":             ; preds = %"end for read_input.s0.x.x798", %"produce read_input785"
  %10370 = icmp sgt i32 %t1592, %a365
  %a410 = select i1 %10370, i32 %t1592, i32 %a365
  %10371 = icmp sgt i32 %b366, %a410
  %10372 = select i1 %10371, i32 %a410, i32 %b366
  %10373 = select i1 %10351, i32 %a364, i32 %b366
  %t1611802 = sub nsw i32 %10372, %10373
  %10374 = icmp sgt i32 %t1611802, 0
  br i1 %10374, label %"for read_input.s0.y.rebased807.preheader", label %"end for read_input.s0.y.rebased808", !prof !386

"for read_input.s0.y.rebased807.preheader":       ; preds = %"end for read_input.s0.y.rebased793"
  %10375 = sub i32 %10373, %201
  %10376 = sext i32 %blur_y.s0.y.yi.base.s781 to i64
  %a450 = sub nsw i64 %276, %10376
  %10377 = icmp slt i64 %a450, 34
  %a449 = select i1 %10377, i64 %a450, i64 34
  %10378 = icmp sgt i64 %a449, 0
  %10379 = select i1 %10378, i64 %a449, i64 0
  %10380 = sext i32 %10375 to i64
  %10381 = zext i32 %t1611802 to i64
  br label %"for read_input.s0.y.rebased807"

"for read_input.s0.x.x797":                       ; preds = %"for read_input.s0.y.rebased792", %"for read_input.s0.x.x797"
  %read_input.s0.x.x799 = phi i32 [ %10580, %"for read_input.s0.x.x797" ], [ 0, %"for read_input.s0.y.rebased792" ]
  %10382 = shl nsw i32 %read_input.s0.x.x799, 5
  %a403 = add nsw i32 %266, %10382
  %10383 = icmp sgt i32 %b405, %a403
  %read_input.s0.x.v2.base.s800 = select i1 %10383, i32 %a403, i32 %b405
  %10384 = add nsw i32 %read_input.s0.x.v2.base.s800, -32
  %10385 = insertelement <32 x i32> undef, i32 %10384, i32 0
  %10386 = shufflevector <32 x i32> %10385, <32 x i32> undef, <32 x i32> zeroinitializer
  %a406 = add nsw <32 x i32> %10386, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10387 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10388 = icmp sgt <8 x i32> %269, %10387
  %10389 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10390 = icmp sgt <8 x i32> %269, %10389
  %10391 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10392 = icmp sgt <8 x i32> %269, %10391
  %10393 = shufflevector <32 x i32> %a406, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10394 = icmp sgt <8 x i32> %269, %10393
  %10395 = select <8 x i1> %10388, <8 x i32> %10387, <8 x i32> %269
  %10396 = select <8 x i1> %10390, <8 x i32> %10389, <8 x i32> %269
  %10397 = select <8 x i1> %10392, <8 x i32> %10391, <8 x i32> %269
  %10398 = select <8 x i1> %10394, <8 x i32> %10393, <8 x i32> %269
  %10399 = icmp sgt <8 x i32> %10395, %271
  %10400 = icmp sgt <8 x i32> %10396, %271
  %10401 = icmp sgt <8 x i32> %10397, %271
  %10402 = icmp sgt <8 x i32> %10398, %271
  %10403 = select <8 x i1> %10399, <8 x i32> %10395, <8 x i32> %271
  %10404 = select <8 x i1> %10400, <8 x i32> %10396, <8 x i32> %271
  %10405 = select <8 x i1> %10401, <8 x i32> %10397, <8 x i32> %271
  %10406 = select <8 x i1> %10402, <8 x i32> %10398, <8 x i32> %271
  %10407 = shufflevector <8 x i32> %10403, <8 x i32> %10404, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10408 = shufflevector <8 x i32> %10405, <8 x i32> %10406, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10409 = shufflevector <16 x i32> %10407, <16 x i32> %10408, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10410 = add nsw <32 x i32> %10409, %10368
  %10411 = extractelement <32 x i32> %10410, i32 0
  %10412 = sext i32 %10411 to i64
  %10413 = getelementptr inbounds i16, i16* %256, i64 %10412
  %10414 = load i16, i16* %10413, align 2, !tbaa !393
  %10415 = insertelement <32 x i16> undef, i16 %10414, i32 0
  %10416 = extractelement <32 x i32> %10410, i32 1
  %10417 = sext i32 %10416 to i64
  %10418 = getelementptr inbounds i16, i16* %256, i64 %10417
  %10419 = load i16, i16* %10418, align 2, !tbaa !393
  %10420 = insertelement <32 x i16> %10415, i16 %10419, i32 1
  %10421 = extractelement <32 x i32> %10410, i32 2
  %10422 = sext i32 %10421 to i64
  %10423 = getelementptr inbounds i16, i16* %256, i64 %10422
  %10424 = load i16, i16* %10423, align 2, !tbaa !393
  %10425 = insertelement <32 x i16> %10420, i16 %10424, i32 2
  %10426 = extractelement <32 x i32> %10410, i32 3
  %10427 = sext i32 %10426 to i64
  %10428 = getelementptr inbounds i16, i16* %256, i64 %10427
  %10429 = load i16, i16* %10428, align 2, !tbaa !393
  %10430 = insertelement <32 x i16> %10425, i16 %10429, i32 3
  %10431 = extractelement <32 x i32> %10410, i32 4
  %10432 = sext i32 %10431 to i64
  %10433 = getelementptr inbounds i16, i16* %256, i64 %10432
  %10434 = load i16, i16* %10433, align 2, !tbaa !393
  %10435 = insertelement <32 x i16> %10430, i16 %10434, i32 4
  %10436 = extractelement <32 x i32> %10410, i32 5
  %10437 = sext i32 %10436 to i64
  %10438 = getelementptr inbounds i16, i16* %256, i64 %10437
  %10439 = load i16, i16* %10438, align 2, !tbaa !393
  %10440 = insertelement <32 x i16> %10435, i16 %10439, i32 5
  %10441 = extractelement <32 x i32> %10410, i32 6
  %10442 = sext i32 %10441 to i64
  %10443 = getelementptr inbounds i16, i16* %256, i64 %10442
  %10444 = load i16, i16* %10443, align 2, !tbaa !393
  %10445 = insertelement <32 x i16> %10440, i16 %10444, i32 6
  %10446 = extractelement <32 x i32> %10410, i32 7
  %10447 = sext i32 %10446 to i64
  %10448 = getelementptr inbounds i16, i16* %256, i64 %10447
  %10449 = load i16, i16* %10448, align 2, !tbaa !393
  %10450 = insertelement <32 x i16> %10445, i16 %10449, i32 7
  %10451 = extractelement <32 x i32> %10410, i32 8
  %10452 = sext i32 %10451 to i64
  %10453 = getelementptr inbounds i16, i16* %256, i64 %10452
  %10454 = load i16, i16* %10453, align 2, !tbaa !393
  %10455 = insertelement <32 x i16> %10450, i16 %10454, i32 8
  %10456 = extractelement <32 x i32> %10410, i32 9
  %10457 = sext i32 %10456 to i64
  %10458 = getelementptr inbounds i16, i16* %256, i64 %10457
  %10459 = load i16, i16* %10458, align 2, !tbaa !393
  %10460 = insertelement <32 x i16> %10455, i16 %10459, i32 9
  %10461 = extractelement <32 x i32> %10410, i32 10
  %10462 = sext i32 %10461 to i64
  %10463 = getelementptr inbounds i16, i16* %256, i64 %10462
  %10464 = load i16, i16* %10463, align 2, !tbaa !393
  %10465 = insertelement <32 x i16> %10460, i16 %10464, i32 10
  %10466 = extractelement <32 x i32> %10410, i32 11
  %10467 = sext i32 %10466 to i64
  %10468 = getelementptr inbounds i16, i16* %256, i64 %10467
  %10469 = load i16, i16* %10468, align 2, !tbaa !393
  %10470 = insertelement <32 x i16> %10465, i16 %10469, i32 11
  %10471 = extractelement <32 x i32> %10410, i32 12
  %10472 = sext i32 %10471 to i64
  %10473 = getelementptr inbounds i16, i16* %256, i64 %10472
  %10474 = load i16, i16* %10473, align 2, !tbaa !393
  %10475 = insertelement <32 x i16> %10470, i16 %10474, i32 12
  %10476 = extractelement <32 x i32> %10410, i32 13
  %10477 = sext i32 %10476 to i64
  %10478 = getelementptr inbounds i16, i16* %256, i64 %10477
  %10479 = load i16, i16* %10478, align 2, !tbaa !393
  %10480 = insertelement <32 x i16> %10475, i16 %10479, i32 13
  %10481 = extractelement <32 x i32> %10410, i32 14
  %10482 = sext i32 %10481 to i64
  %10483 = getelementptr inbounds i16, i16* %256, i64 %10482
  %10484 = load i16, i16* %10483, align 2, !tbaa !393
  %10485 = insertelement <32 x i16> %10480, i16 %10484, i32 14
  %10486 = extractelement <32 x i32> %10410, i32 15
  %10487 = sext i32 %10486 to i64
  %10488 = getelementptr inbounds i16, i16* %256, i64 %10487
  %10489 = load i16, i16* %10488, align 2, !tbaa !393
  %10490 = insertelement <32 x i16> %10485, i16 %10489, i32 15
  %10491 = extractelement <32 x i32> %10410, i32 16
  %10492 = sext i32 %10491 to i64
  %10493 = getelementptr inbounds i16, i16* %256, i64 %10492
  %10494 = load i16, i16* %10493, align 2, !tbaa !393
  %10495 = insertelement <32 x i16> %10490, i16 %10494, i32 16
  %10496 = extractelement <32 x i32> %10410, i32 17
  %10497 = sext i32 %10496 to i64
  %10498 = getelementptr inbounds i16, i16* %256, i64 %10497
  %10499 = load i16, i16* %10498, align 2, !tbaa !393
  %10500 = insertelement <32 x i16> %10495, i16 %10499, i32 17
  %10501 = extractelement <32 x i32> %10410, i32 18
  %10502 = sext i32 %10501 to i64
  %10503 = getelementptr inbounds i16, i16* %256, i64 %10502
  %10504 = load i16, i16* %10503, align 2, !tbaa !393
  %10505 = insertelement <32 x i16> %10500, i16 %10504, i32 18
  %10506 = extractelement <32 x i32> %10410, i32 19
  %10507 = sext i32 %10506 to i64
  %10508 = getelementptr inbounds i16, i16* %256, i64 %10507
  %10509 = load i16, i16* %10508, align 2, !tbaa !393
  %10510 = insertelement <32 x i16> %10505, i16 %10509, i32 19
  %10511 = extractelement <32 x i32> %10410, i32 20
  %10512 = sext i32 %10511 to i64
  %10513 = getelementptr inbounds i16, i16* %256, i64 %10512
  %10514 = load i16, i16* %10513, align 2, !tbaa !393
  %10515 = insertelement <32 x i16> %10510, i16 %10514, i32 20
  %10516 = extractelement <32 x i32> %10410, i32 21
  %10517 = sext i32 %10516 to i64
  %10518 = getelementptr inbounds i16, i16* %256, i64 %10517
  %10519 = load i16, i16* %10518, align 2, !tbaa !393
  %10520 = insertelement <32 x i16> %10515, i16 %10519, i32 21
  %10521 = extractelement <32 x i32> %10410, i32 22
  %10522 = sext i32 %10521 to i64
  %10523 = getelementptr inbounds i16, i16* %256, i64 %10522
  %10524 = load i16, i16* %10523, align 2, !tbaa !393
  %10525 = insertelement <32 x i16> %10520, i16 %10524, i32 22
  %10526 = extractelement <32 x i32> %10410, i32 23
  %10527 = sext i32 %10526 to i64
  %10528 = getelementptr inbounds i16, i16* %256, i64 %10527
  %10529 = load i16, i16* %10528, align 2, !tbaa !393
  %10530 = insertelement <32 x i16> %10525, i16 %10529, i32 23
  %10531 = extractelement <32 x i32> %10410, i32 24
  %10532 = sext i32 %10531 to i64
  %10533 = getelementptr inbounds i16, i16* %256, i64 %10532
  %10534 = load i16, i16* %10533, align 2, !tbaa !393
  %10535 = insertelement <32 x i16> %10530, i16 %10534, i32 24
  %10536 = extractelement <32 x i32> %10410, i32 25
  %10537 = sext i32 %10536 to i64
  %10538 = getelementptr inbounds i16, i16* %256, i64 %10537
  %10539 = load i16, i16* %10538, align 2, !tbaa !393
  %10540 = insertelement <32 x i16> %10535, i16 %10539, i32 25
  %10541 = extractelement <32 x i32> %10410, i32 26
  %10542 = sext i32 %10541 to i64
  %10543 = getelementptr inbounds i16, i16* %256, i64 %10542
  %10544 = load i16, i16* %10543, align 2, !tbaa !393
  %10545 = insertelement <32 x i16> %10540, i16 %10544, i32 26
  %10546 = extractelement <32 x i32> %10410, i32 27
  %10547 = sext i32 %10546 to i64
  %10548 = getelementptr inbounds i16, i16* %256, i64 %10547
  %10549 = load i16, i16* %10548, align 2, !tbaa !393
  %10550 = insertelement <32 x i16> %10545, i16 %10549, i32 27
  %10551 = extractelement <32 x i32> %10410, i32 28
  %10552 = sext i32 %10551 to i64
  %10553 = getelementptr inbounds i16, i16* %256, i64 %10552
  %10554 = load i16, i16* %10553, align 2, !tbaa !393
  %10555 = insertelement <32 x i16> %10550, i16 %10554, i32 28
  %10556 = extractelement <32 x i32> %10410, i32 29
  %10557 = sext i32 %10556 to i64
  %10558 = getelementptr inbounds i16, i16* %256, i64 %10557
  %10559 = load i16, i16* %10558, align 2, !tbaa !393
  %10560 = insertelement <32 x i16> %10555, i16 %10559, i32 29
  %10561 = extractelement <32 x i32> %10410, i32 30
  %10562 = sext i32 %10561 to i64
  %10563 = getelementptr inbounds i16, i16* %256, i64 %10562
  %10564 = load i16, i16* %10563, align 2, !tbaa !393
  %10565 = insertelement <32 x i16> %10560, i16 %10564, i32 30
  %10566 = extractelement <32 x i32> %10410, i32 31
  %10567 = sext i32 %10566 to i64
  %10568 = getelementptr inbounds i16, i16* %256, i64 %10567
  %10569 = load i16, i16* %10568, align 2, !tbaa !393
  %10570 = insertelement <32 x i16> %10565, i16 %10569, i32 31
  %10571 = shufflevector <32 x i16> %10570, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10572 = sext i32 %read_input.s0.x.v2.base.s800 to i64
  %10573 = add nsw i64 %10572, %10369
  %10574 = getelementptr inbounds i16, i16* %read_input784, i64 %10573
  %10575 = getelementptr inbounds i16, i16* %10574, i64 -32
  %10576 = bitcast i16* %10575 to <16 x i16>*
  store <16 x i16> %10571, <16 x i16>* %10576, align 2, !tbaa !396
  %10577 = shufflevector <32 x i16> %10570, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10578 = getelementptr inbounds i16, i16* %10574, i64 -16
  %10579 = bitcast i16* %10578 to <16 x i16>*
  store <16 x i16> %10577, <16 x i16>* %10579, align 2, !tbaa !396
  %10580 = add nuw nsw i32 %read_input.s0.x.x799, 1
  %.not2577 = icmp eq i32 %10580, %211
  br i1 %.not2577, label %"end for read_input.s0.x.x798", label %"for read_input.s0.x.x797"

"end for read_input.s0.x.x798":                   ; preds = %"for read_input.s0.x.x797"
  %indvars.iv.next3228 = add nuw nsw i64 %indvars.iv3227, 1
  %.not2576 = icmp eq i64 %indvars.iv.next3228, %10358
  br i1 %.not2576, label %"end for read_input.s0.y.rebased793", label %"for read_input.s0.y.rebased792"

"for read_input.s0.y.rebased807":                 ; preds = %"for read_input.s0.y.rebased807.preheader", %"end for read_input.s0.x.x.rebased823"
  %indvars.iv3233 = phi i64 [ 0, %"for read_input.s0.y.rebased807.preheader" ], [ %indvars.iv.next3234, %"end for read_input.s0.x.x.rebased823" ]
  %10581 = add nsw i64 %indvars.iv3233, %10380
  %10582 = mul nsw i64 %10581, %513
  %10583 = sub nsw i64 %10582, %514
  br i1 %273, label %"for read_input.s0.x.x811.preheader", label %"end for read_input.s0.x.x812", !prof !386

"for read_input.s0.x.x811.preheader":             ; preds = %"for read_input.s0.y.rebased807"
  %10584 = trunc i64 %10583 to i32
  %10585 = insertelement <32 x i32> undef, i32 %10584, i32 0
  %10586 = shufflevector <32 x i32> %10585, <32 x i32> undef, <32 x i32> zeroinitializer
  %10587 = add nuw nsw i64 %10379, %indvars.iv3233
  %10588 = mul nsw i64 %10587, %277
  %10589 = sub i64 %10588, %278
  br label %"for read_input.s0.x.x811"

"end for read_input.s0.y.rebased808":             ; preds = %"end for read_input.s0.x.x.rebased823", %"end for read_input.s0.y.rebased793"
  %a510 = add nsw i32 %blur_y.s0.y.yi.base.s781, %281
  %10590 = icmp slt i32 %a510, 0
  %a509 = select i1 %10590, i32 %a510, i32 0
  %10591 = icmp sgt i32 %a509, -34
  br i1 %10591, label %"for read_input.s0.y.rebased831.preheader", label %"end for read_input.s0.y.rebased832", !prof !386

"for read_input.s0.y.rebased831.preheader":       ; preds = %"end for read_input.s0.y.rebased808"
  %10592 = select i1 %10353, i32 %a368, i32 %b366
  %10593 = sub nsw i32 %10592, %201
  %10594 = sext i32 %blur_y.s0.y.yi.base.s781 to i64
  %a534 = sub nsw i64 %283, %10594
  %10595 = icmp slt i64 %a534, 34
  %a533 = select i1 %10595, i64 %a534, i64 34
  %10596 = icmp sgt i64 %a533, 0
  %10597 = select i1 %10596, i64 %a533, i64 0
  %a509.op = add nsw i32 %a509, 33
  %10598 = zext i32 %a509.op to i64
  br label %"for read_input.s0.y.rebased831"

"for read_input.s0.x.x811":                       ; preds = %"for read_input.s0.x.x811.preheader", %"for read_input.s0.x.x811"
  %read_input.s0.x.x813 = phi i32 [ %10797, %"for read_input.s0.x.x811" ], [ 0, %"for read_input.s0.x.x811.preheader" ]
  %10599 = shl nsw i32 %read_input.s0.x.x813, 5
  %a445 = add nsw i32 %266, %10599
  %10600 = icmp sgt i32 %b405, %a445
  %read_input.s0.x.v2.base.s814 = select i1 %10600, i32 %a445, i32 %b405
  %10601 = add nsw i32 %read_input.s0.x.v2.base.s814, -32
  %10602 = insertelement <32 x i32> undef, i32 %10601, i32 0
  %10603 = shufflevector <32 x i32> %10602, <32 x i32> undef, <32 x i32> zeroinitializer
  %a448 = add nsw <32 x i32> %10603, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10604 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10605 = icmp sgt <8 x i32> %269, %10604
  %10606 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10607 = icmp sgt <8 x i32> %269, %10606
  %10608 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10609 = icmp sgt <8 x i32> %269, %10608
  %10610 = shufflevector <32 x i32> %a448, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10611 = icmp sgt <8 x i32> %269, %10610
  %10612 = select <8 x i1> %10605, <8 x i32> %10604, <8 x i32> %269
  %10613 = select <8 x i1> %10607, <8 x i32> %10606, <8 x i32> %269
  %10614 = select <8 x i1> %10609, <8 x i32> %10608, <8 x i32> %269
  %10615 = select <8 x i1> %10611, <8 x i32> %10610, <8 x i32> %269
  %10616 = icmp sgt <8 x i32> %10612, %271
  %10617 = icmp sgt <8 x i32> %10613, %271
  %10618 = icmp sgt <8 x i32> %10614, %271
  %10619 = icmp sgt <8 x i32> %10615, %271
  %10620 = select <8 x i1> %10616, <8 x i32> %10612, <8 x i32> %271
  %10621 = select <8 x i1> %10617, <8 x i32> %10613, <8 x i32> %271
  %10622 = select <8 x i1> %10618, <8 x i32> %10614, <8 x i32> %271
  %10623 = select <8 x i1> %10619, <8 x i32> %10615, <8 x i32> %271
  %10624 = shufflevector <8 x i32> %10620, <8 x i32> %10621, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10625 = shufflevector <8 x i32> %10622, <8 x i32> %10623, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10626 = shufflevector <16 x i32> %10624, <16 x i32> %10625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10627 = add nsw <32 x i32> %10626, %10586
  %10628 = extractelement <32 x i32> %10627, i32 0
  %10629 = sext i32 %10628 to i64
  %10630 = getelementptr inbounds i16, i16* %256, i64 %10629
  %10631 = load i16, i16* %10630, align 2, !tbaa !393
  %10632 = insertelement <32 x i16> undef, i16 %10631, i32 0
  %10633 = extractelement <32 x i32> %10627, i32 1
  %10634 = sext i32 %10633 to i64
  %10635 = getelementptr inbounds i16, i16* %256, i64 %10634
  %10636 = load i16, i16* %10635, align 2, !tbaa !393
  %10637 = insertelement <32 x i16> %10632, i16 %10636, i32 1
  %10638 = extractelement <32 x i32> %10627, i32 2
  %10639 = sext i32 %10638 to i64
  %10640 = getelementptr inbounds i16, i16* %256, i64 %10639
  %10641 = load i16, i16* %10640, align 2, !tbaa !393
  %10642 = insertelement <32 x i16> %10637, i16 %10641, i32 2
  %10643 = extractelement <32 x i32> %10627, i32 3
  %10644 = sext i32 %10643 to i64
  %10645 = getelementptr inbounds i16, i16* %256, i64 %10644
  %10646 = load i16, i16* %10645, align 2, !tbaa !393
  %10647 = insertelement <32 x i16> %10642, i16 %10646, i32 3
  %10648 = extractelement <32 x i32> %10627, i32 4
  %10649 = sext i32 %10648 to i64
  %10650 = getelementptr inbounds i16, i16* %256, i64 %10649
  %10651 = load i16, i16* %10650, align 2, !tbaa !393
  %10652 = insertelement <32 x i16> %10647, i16 %10651, i32 4
  %10653 = extractelement <32 x i32> %10627, i32 5
  %10654 = sext i32 %10653 to i64
  %10655 = getelementptr inbounds i16, i16* %256, i64 %10654
  %10656 = load i16, i16* %10655, align 2, !tbaa !393
  %10657 = insertelement <32 x i16> %10652, i16 %10656, i32 5
  %10658 = extractelement <32 x i32> %10627, i32 6
  %10659 = sext i32 %10658 to i64
  %10660 = getelementptr inbounds i16, i16* %256, i64 %10659
  %10661 = load i16, i16* %10660, align 2, !tbaa !393
  %10662 = insertelement <32 x i16> %10657, i16 %10661, i32 6
  %10663 = extractelement <32 x i32> %10627, i32 7
  %10664 = sext i32 %10663 to i64
  %10665 = getelementptr inbounds i16, i16* %256, i64 %10664
  %10666 = load i16, i16* %10665, align 2, !tbaa !393
  %10667 = insertelement <32 x i16> %10662, i16 %10666, i32 7
  %10668 = extractelement <32 x i32> %10627, i32 8
  %10669 = sext i32 %10668 to i64
  %10670 = getelementptr inbounds i16, i16* %256, i64 %10669
  %10671 = load i16, i16* %10670, align 2, !tbaa !393
  %10672 = insertelement <32 x i16> %10667, i16 %10671, i32 8
  %10673 = extractelement <32 x i32> %10627, i32 9
  %10674 = sext i32 %10673 to i64
  %10675 = getelementptr inbounds i16, i16* %256, i64 %10674
  %10676 = load i16, i16* %10675, align 2, !tbaa !393
  %10677 = insertelement <32 x i16> %10672, i16 %10676, i32 9
  %10678 = extractelement <32 x i32> %10627, i32 10
  %10679 = sext i32 %10678 to i64
  %10680 = getelementptr inbounds i16, i16* %256, i64 %10679
  %10681 = load i16, i16* %10680, align 2, !tbaa !393
  %10682 = insertelement <32 x i16> %10677, i16 %10681, i32 10
  %10683 = extractelement <32 x i32> %10627, i32 11
  %10684 = sext i32 %10683 to i64
  %10685 = getelementptr inbounds i16, i16* %256, i64 %10684
  %10686 = load i16, i16* %10685, align 2, !tbaa !393
  %10687 = insertelement <32 x i16> %10682, i16 %10686, i32 11
  %10688 = extractelement <32 x i32> %10627, i32 12
  %10689 = sext i32 %10688 to i64
  %10690 = getelementptr inbounds i16, i16* %256, i64 %10689
  %10691 = load i16, i16* %10690, align 2, !tbaa !393
  %10692 = insertelement <32 x i16> %10687, i16 %10691, i32 12
  %10693 = extractelement <32 x i32> %10627, i32 13
  %10694 = sext i32 %10693 to i64
  %10695 = getelementptr inbounds i16, i16* %256, i64 %10694
  %10696 = load i16, i16* %10695, align 2, !tbaa !393
  %10697 = insertelement <32 x i16> %10692, i16 %10696, i32 13
  %10698 = extractelement <32 x i32> %10627, i32 14
  %10699 = sext i32 %10698 to i64
  %10700 = getelementptr inbounds i16, i16* %256, i64 %10699
  %10701 = load i16, i16* %10700, align 2, !tbaa !393
  %10702 = insertelement <32 x i16> %10697, i16 %10701, i32 14
  %10703 = extractelement <32 x i32> %10627, i32 15
  %10704 = sext i32 %10703 to i64
  %10705 = getelementptr inbounds i16, i16* %256, i64 %10704
  %10706 = load i16, i16* %10705, align 2, !tbaa !393
  %10707 = insertelement <32 x i16> %10702, i16 %10706, i32 15
  %10708 = extractelement <32 x i32> %10627, i32 16
  %10709 = sext i32 %10708 to i64
  %10710 = getelementptr inbounds i16, i16* %256, i64 %10709
  %10711 = load i16, i16* %10710, align 2, !tbaa !393
  %10712 = insertelement <32 x i16> %10707, i16 %10711, i32 16
  %10713 = extractelement <32 x i32> %10627, i32 17
  %10714 = sext i32 %10713 to i64
  %10715 = getelementptr inbounds i16, i16* %256, i64 %10714
  %10716 = load i16, i16* %10715, align 2, !tbaa !393
  %10717 = insertelement <32 x i16> %10712, i16 %10716, i32 17
  %10718 = extractelement <32 x i32> %10627, i32 18
  %10719 = sext i32 %10718 to i64
  %10720 = getelementptr inbounds i16, i16* %256, i64 %10719
  %10721 = load i16, i16* %10720, align 2, !tbaa !393
  %10722 = insertelement <32 x i16> %10717, i16 %10721, i32 18
  %10723 = extractelement <32 x i32> %10627, i32 19
  %10724 = sext i32 %10723 to i64
  %10725 = getelementptr inbounds i16, i16* %256, i64 %10724
  %10726 = load i16, i16* %10725, align 2, !tbaa !393
  %10727 = insertelement <32 x i16> %10722, i16 %10726, i32 19
  %10728 = extractelement <32 x i32> %10627, i32 20
  %10729 = sext i32 %10728 to i64
  %10730 = getelementptr inbounds i16, i16* %256, i64 %10729
  %10731 = load i16, i16* %10730, align 2, !tbaa !393
  %10732 = insertelement <32 x i16> %10727, i16 %10731, i32 20
  %10733 = extractelement <32 x i32> %10627, i32 21
  %10734 = sext i32 %10733 to i64
  %10735 = getelementptr inbounds i16, i16* %256, i64 %10734
  %10736 = load i16, i16* %10735, align 2, !tbaa !393
  %10737 = insertelement <32 x i16> %10732, i16 %10736, i32 21
  %10738 = extractelement <32 x i32> %10627, i32 22
  %10739 = sext i32 %10738 to i64
  %10740 = getelementptr inbounds i16, i16* %256, i64 %10739
  %10741 = load i16, i16* %10740, align 2, !tbaa !393
  %10742 = insertelement <32 x i16> %10737, i16 %10741, i32 22
  %10743 = extractelement <32 x i32> %10627, i32 23
  %10744 = sext i32 %10743 to i64
  %10745 = getelementptr inbounds i16, i16* %256, i64 %10744
  %10746 = load i16, i16* %10745, align 2, !tbaa !393
  %10747 = insertelement <32 x i16> %10742, i16 %10746, i32 23
  %10748 = extractelement <32 x i32> %10627, i32 24
  %10749 = sext i32 %10748 to i64
  %10750 = getelementptr inbounds i16, i16* %256, i64 %10749
  %10751 = load i16, i16* %10750, align 2, !tbaa !393
  %10752 = insertelement <32 x i16> %10747, i16 %10751, i32 24
  %10753 = extractelement <32 x i32> %10627, i32 25
  %10754 = sext i32 %10753 to i64
  %10755 = getelementptr inbounds i16, i16* %256, i64 %10754
  %10756 = load i16, i16* %10755, align 2, !tbaa !393
  %10757 = insertelement <32 x i16> %10752, i16 %10756, i32 25
  %10758 = extractelement <32 x i32> %10627, i32 26
  %10759 = sext i32 %10758 to i64
  %10760 = getelementptr inbounds i16, i16* %256, i64 %10759
  %10761 = load i16, i16* %10760, align 2, !tbaa !393
  %10762 = insertelement <32 x i16> %10757, i16 %10761, i32 26
  %10763 = extractelement <32 x i32> %10627, i32 27
  %10764 = sext i32 %10763 to i64
  %10765 = getelementptr inbounds i16, i16* %256, i64 %10764
  %10766 = load i16, i16* %10765, align 2, !tbaa !393
  %10767 = insertelement <32 x i16> %10762, i16 %10766, i32 27
  %10768 = extractelement <32 x i32> %10627, i32 28
  %10769 = sext i32 %10768 to i64
  %10770 = getelementptr inbounds i16, i16* %256, i64 %10769
  %10771 = load i16, i16* %10770, align 2, !tbaa !393
  %10772 = insertelement <32 x i16> %10767, i16 %10771, i32 28
  %10773 = extractelement <32 x i32> %10627, i32 29
  %10774 = sext i32 %10773 to i64
  %10775 = getelementptr inbounds i16, i16* %256, i64 %10774
  %10776 = load i16, i16* %10775, align 2, !tbaa !393
  %10777 = insertelement <32 x i16> %10772, i16 %10776, i32 29
  %10778 = extractelement <32 x i32> %10627, i32 30
  %10779 = sext i32 %10778 to i64
  %10780 = getelementptr inbounds i16, i16* %256, i64 %10779
  %10781 = load i16, i16* %10780, align 2, !tbaa !393
  %10782 = insertelement <32 x i16> %10777, i16 %10781, i32 30
  %10783 = extractelement <32 x i32> %10627, i32 31
  %10784 = sext i32 %10783 to i64
  %10785 = getelementptr inbounds i16, i16* %256, i64 %10784
  %10786 = load i16, i16* %10785, align 2, !tbaa !393
  %10787 = insertelement <32 x i16> %10782, i16 %10786, i32 31
  %10788 = shufflevector <32 x i16> %10787, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10789 = sext i32 %read_input.s0.x.v2.base.s814 to i64
  %10790 = add nsw i64 %10589, %10789
  %10791 = getelementptr inbounds i16, i16* %read_input784, i64 %10790
  %10792 = getelementptr inbounds i16, i16* %10791, i64 -32
  %10793 = bitcast i16* %10792 to <16 x i16>*
  store <16 x i16> %10788, <16 x i16>* %10793, align 2, !tbaa !396
  %10794 = shufflevector <32 x i16> %10787, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10795 = getelementptr inbounds i16, i16* %10791, i64 -16
  %10796 = bitcast i16* %10795 to <16 x i16>*
  store <16 x i16> %10794, <16 x i16>* %10796, align 2, !tbaa !396
  %10797 = add nuw nsw i32 %read_input.s0.x.x813, 1
  %.not2574 = icmp eq i32 %10797, %t1598
  br i1 %.not2574, label %"end for read_input.s0.x.x812", label %"for read_input.s0.x.x811"

"end for read_input.s0.x.x812":                   ; preds = %"for read_input.s0.x.x811", %"for read_input.s0.y.rebased807"
  br i1 %279, label %"for read_input.s0.x.x.rebased817.preheader", label %"end for read_input.s0.x.x.rebased818", !prof !386

"for read_input.s0.x.x.rebased817.preheader":     ; preds = %"end for read_input.s0.x.x812"
  %10798 = add nuw nsw i64 %10379, %indvars.iv3233
  %10799 = mul nsw i64 %10798, %277
  %10800 = sub i64 %10799, %278
  br i1 %516, label %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased817"

"for read_input.s0.x.x.rebased817":               ; preds = %"for read_input.s0.x.x.rebased817.preheader", %"for read_input.s0.x.x.rebased817"
  %indvars.iv3230 = phi i64 [ %indvars.iv.next3231.3, %"for read_input.s0.x.x.rebased817" ], [ 0, %"for read_input.s0.x.x.rebased817.preheader" ]
  %niter3501 = phi i64 [ %niter3501.nsub.3, %"for read_input.s0.x.x.rebased817" ], [ %unroll_iter3500, %"for read_input.s0.x.x.rebased817.preheader" ]
  %10801 = add nuw nsw i64 %indvars.iv3230, %510
  %10802 = shl nsw i64 %10801, 5
  %10803 = add nsw i64 %10802, %511
  %10804 = add nsw i64 %10803, %10583
  %10805 = getelementptr inbounds i16, i16* %256, i64 %10804
  %10806 = getelementptr inbounds i16, i16* %10805, i64 -32
  %10807 = bitcast i16* %10806 to <16 x i16>*
  %10808 = load <16 x i16>, <16 x i16>* %10807, align 2, !tbaa !393
  %10809 = getelementptr inbounds i16, i16* %10805, i64 -16
  %10810 = bitcast i16* %10809 to <16 x i16>*
  %10811 = load <16 x i16>, <16 x i16>* %10810, align 2, !tbaa !393
  %10812 = add nsw i64 %10800, %10803
  %10813 = getelementptr inbounds i16, i16* %read_input784, i64 %10812
  %10814 = getelementptr inbounds i16, i16* %10813, i64 -32
  %10815 = bitcast i16* %10814 to <16 x i16>*
  store <16 x i16> %10808, <16 x i16>* %10815, align 2, !tbaa !396
  %10816 = getelementptr inbounds i16, i16* %10813, i64 -16
  %10817 = bitcast i16* %10816 to <16 x i16>*
  store <16 x i16> %10811, <16 x i16>* %10817, align 2, !tbaa !396
  %indvars.iv.next3231 = or i64 %indvars.iv3230, 1
  %10818 = add nuw nsw i64 %indvars.iv.next3231, %510
  %10819 = shl nsw i64 %10818, 5
  %10820 = add nsw i64 %10819, %511
  %10821 = add nsw i64 %10820, %10583
  %10822 = getelementptr inbounds i16, i16* %256, i64 %10821
  %10823 = getelementptr inbounds i16, i16* %10822, i64 -32
  %10824 = bitcast i16* %10823 to <16 x i16>*
  %10825 = load <16 x i16>, <16 x i16>* %10824, align 2, !tbaa !393
  %10826 = getelementptr inbounds i16, i16* %10822, i64 -16
  %10827 = bitcast i16* %10826 to <16 x i16>*
  %10828 = load <16 x i16>, <16 x i16>* %10827, align 2, !tbaa !393
  %10829 = add nsw i64 %10800, %10820
  %10830 = getelementptr inbounds i16, i16* %read_input784, i64 %10829
  %10831 = getelementptr inbounds i16, i16* %10830, i64 -32
  %10832 = bitcast i16* %10831 to <16 x i16>*
  store <16 x i16> %10825, <16 x i16>* %10832, align 2, !tbaa !396
  %10833 = getelementptr inbounds i16, i16* %10830, i64 -16
  %10834 = bitcast i16* %10833 to <16 x i16>*
  store <16 x i16> %10828, <16 x i16>* %10834, align 2, !tbaa !396
  %indvars.iv.next3231.1 = or i64 %indvars.iv3230, 2
  %10835 = add nuw nsw i64 %indvars.iv.next3231.1, %510
  %10836 = shl nsw i64 %10835, 5
  %10837 = add nsw i64 %10836, %511
  %10838 = add nsw i64 %10837, %10583
  %10839 = getelementptr inbounds i16, i16* %256, i64 %10838
  %10840 = getelementptr inbounds i16, i16* %10839, i64 -32
  %10841 = bitcast i16* %10840 to <16 x i16>*
  %10842 = load <16 x i16>, <16 x i16>* %10841, align 2, !tbaa !393
  %10843 = getelementptr inbounds i16, i16* %10839, i64 -16
  %10844 = bitcast i16* %10843 to <16 x i16>*
  %10845 = load <16 x i16>, <16 x i16>* %10844, align 2, !tbaa !393
  %10846 = add nsw i64 %10800, %10837
  %10847 = getelementptr inbounds i16, i16* %read_input784, i64 %10846
  %10848 = getelementptr inbounds i16, i16* %10847, i64 -32
  %10849 = bitcast i16* %10848 to <16 x i16>*
  store <16 x i16> %10842, <16 x i16>* %10849, align 2, !tbaa !396
  %10850 = getelementptr inbounds i16, i16* %10847, i64 -16
  %10851 = bitcast i16* %10850 to <16 x i16>*
  store <16 x i16> %10845, <16 x i16>* %10851, align 2, !tbaa !396
  %indvars.iv.next3231.2 = or i64 %indvars.iv3230, 3
  %10852 = add nuw nsw i64 %indvars.iv.next3231.2, %510
  %10853 = shl nsw i64 %10852, 5
  %10854 = add nsw i64 %10853, %511
  %10855 = add nsw i64 %10854, %10583
  %10856 = getelementptr inbounds i16, i16* %256, i64 %10855
  %10857 = getelementptr inbounds i16, i16* %10856, i64 -32
  %10858 = bitcast i16* %10857 to <16 x i16>*
  %10859 = load <16 x i16>, <16 x i16>* %10858, align 2, !tbaa !393
  %10860 = getelementptr inbounds i16, i16* %10856, i64 -16
  %10861 = bitcast i16* %10860 to <16 x i16>*
  %10862 = load <16 x i16>, <16 x i16>* %10861, align 2, !tbaa !393
  %10863 = add nsw i64 %10800, %10854
  %10864 = getelementptr inbounds i16, i16* %read_input784, i64 %10863
  %10865 = getelementptr inbounds i16, i16* %10864, i64 -32
  %10866 = bitcast i16* %10865 to <16 x i16>*
  store <16 x i16> %10859, <16 x i16>* %10866, align 2, !tbaa !396
  %10867 = getelementptr inbounds i16, i16* %10864, i64 -16
  %10868 = bitcast i16* %10867 to <16 x i16>*
  store <16 x i16> %10862, <16 x i16>* %10868, align 2, !tbaa !396
  %indvars.iv.next3231.3 = add nuw nsw i64 %indvars.iv3230, 4
  %niter3501.nsub.3 = add i64 %niter3501, -4
  %niter3501.ncmp.3 = icmp eq i64 %niter3501.nsub.3, 0
  br i1 %niter3501.ncmp.3, label %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased817"

"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased817", %"for read_input.s0.x.x.rebased817.preheader"
  %indvars.iv3230.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased817.preheader" ], [ %indvars.iv.next3231.3, %"for read_input.s0.x.x.rebased817" ]
  br i1 %lcmp.mod3499.not, label %"end for read_input.s0.x.x.rebased818", label %"for read_input.s0.x.x.rebased817.epil"

"for read_input.s0.x.x.rebased817.epil":          ; preds = %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased817.epil"
  %indvars.iv3230.epil = phi i64 [ %indvars.iv.next3231.epil, %"for read_input.s0.x.x.rebased817.epil" ], [ %indvars.iv3230.unr, %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa" ]
  %epil.iter3498 = phi i64 [ %epil.iter3498.sub, %"for read_input.s0.x.x.rebased817.epil" ], [ %xtraiter3497, %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa" ]
  %10869 = add nuw nsw i64 %indvars.iv3230.epil, %510
  %10870 = shl nsw i64 %10869, 5
  %10871 = add nsw i64 %10870, %511
  %10872 = add nsw i64 %10871, %10583
  %10873 = getelementptr inbounds i16, i16* %256, i64 %10872
  %10874 = getelementptr inbounds i16, i16* %10873, i64 -32
  %10875 = bitcast i16* %10874 to <16 x i16>*
  %10876 = load <16 x i16>, <16 x i16>* %10875, align 2, !tbaa !393
  %10877 = getelementptr inbounds i16, i16* %10873, i64 -16
  %10878 = bitcast i16* %10877 to <16 x i16>*
  %10879 = load <16 x i16>, <16 x i16>* %10878, align 2, !tbaa !393
  %10880 = add nsw i64 %10800, %10871
  %10881 = getelementptr inbounds i16, i16* %read_input784, i64 %10880
  %10882 = getelementptr inbounds i16, i16* %10881, i64 -32
  %10883 = bitcast i16* %10882 to <16 x i16>*
  store <16 x i16> %10876, <16 x i16>* %10883, align 2, !tbaa !396
  %10884 = getelementptr inbounds i16, i16* %10881, i64 -16
  %10885 = bitcast i16* %10884 to <16 x i16>*
  store <16 x i16> %10879, <16 x i16>* %10885, align 2, !tbaa !396
  %indvars.iv.next3231.epil = add nuw nsw i64 %indvars.iv3230.epil, 1
  %epil.iter3498.sub = add i64 %epil.iter3498, -1
  %epil.iter3498.cmp.not = icmp eq i64 %epil.iter3498.sub, 0
  br i1 %epil.iter3498.cmp.not, label %"end for read_input.s0.x.x.rebased818", label %"for read_input.s0.x.x.rebased817.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased818":           ; preds = %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased817.epil", %"end for read_input.s0.x.x812"
  br i1 %280, label %"for read_input.s0.x.x.rebased822.preheader", label %"end for read_input.s0.x.x.rebased823", !prof !386

"for read_input.s0.x.x.rebased822.preheader":     ; preds = %"end for read_input.s0.x.x.rebased818"
  %10886 = trunc i64 %10583 to i32
  %10887 = insertelement <32 x i32> undef, i32 %10886, i32 0
  %10888 = shufflevector <32 x i32> %10887, <32 x i32> undef, <32 x i32> zeroinitializer
  %10889 = add nuw nsw i64 %10379, %indvars.iv3233
  %10890 = mul nsw i64 %10889, %277
  %10891 = sub i64 %10890, %278
  br label %"for read_input.s0.x.x.rebased822"

"for read_input.s0.x.x.rebased822":               ; preds = %"for read_input.s0.x.x.rebased822.preheader", %"for read_input.s0.x.x.rebased822"
  %read_input.s0.x.x.rebased824 = phi i32 [ %11091, %"for read_input.s0.x.x.rebased822" ], [ 0, %"for read_input.s0.x.x.rebased822.preheader" ]
  %10892 = add nsw i32 %read_input.s0.x.x.rebased824, %272
  %10893 = shl nsw i32 %10892, 5
  %a487 = add nsw i32 %266, %10893
  %10894 = icmp sgt i32 %b405, %a487
  %read_input.s0.x.v2.base.s825 = select i1 %10894, i32 %a487, i32 %b405
  %10895 = add nsw i32 %read_input.s0.x.v2.base.s825, -32
  %10896 = insertelement <32 x i32> undef, i32 %10895, i32 0
  %10897 = shufflevector <32 x i32> %10896, <32 x i32> undef, <32 x i32> zeroinitializer
  %a503 = add nsw <32 x i32> %10897, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10898 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10899 = icmp sgt <8 x i32> %269, %10898
  %10900 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10901 = icmp sgt <8 x i32> %269, %10900
  %10902 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10903 = icmp sgt <8 x i32> %269, %10902
  %10904 = shufflevector <32 x i32> %a503, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10905 = icmp sgt <8 x i32> %269, %10904
  %10906 = select <8 x i1> %10899, <8 x i32> %10898, <8 x i32> %269
  %10907 = select <8 x i1> %10901, <8 x i32> %10900, <8 x i32> %269
  %10908 = select <8 x i1> %10903, <8 x i32> %10902, <8 x i32> %269
  %10909 = select <8 x i1> %10905, <8 x i32> %10904, <8 x i32> %269
  %10910 = icmp sgt <8 x i32> %10906, %271
  %10911 = icmp sgt <8 x i32> %10907, %271
  %10912 = icmp sgt <8 x i32> %10908, %271
  %10913 = icmp sgt <8 x i32> %10909, %271
  %10914 = select <8 x i1> %10910, <8 x i32> %10906, <8 x i32> %271
  %10915 = select <8 x i1> %10911, <8 x i32> %10907, <8 x i32> %271
  %10916 = select <8 x i1> %10912, <8 x i32> %10908, <8 x i32> %271
  %10917 = select <8 x i1> %10913, <8 x i32> %10909, <8 x i32> %271
  %10918 = shufflevector <8 x i32> %10914, <8 x i32> %10915, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10919 = shufflevector <8 x i32> %10916, <8 x i32> %10917, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10920 = shufflevector <16 x i32> %10918, <16 x i32> %10919, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10921 = add nsw <32 x i32> %10920, %10888
  %10922 = extractelement <32 x i32> %10921, i32 0
  %10923 = sext i32 %10922 to i64
  %10924 = getelementptr inbounds i16, i16* %256, i64 %10923
  %10925 = load i16, i16* %10924, align 2, !tbaa !393
  %10926 = insertelement <32 x i16> undef, i16 %10925, i32 0
  %10927 = extractelement <32 x i32> %10921, i32 1
  %10928 = sext i32 %10927 to i64
  %10929 = getelementptr inbounds i16, i16* %256, i64 %10928
  %10930 = load i16, i16* %10929, align 2, !tbaa !393
  %10931 = insertelement <32 x i16> %10926, i16 %10930, i32 1
  %10932 = extractelement <32 x i32> %10921, i32 2
  %10933 = sext i32 %10932 to i64
  %10934 = getelementptr inbounds i16, i16* %256, i64 %10933
  %10935 = load i16, i16* %10934, align 2, !tbaa !393
  %10936 = insertelement <32 x i16> %10931, i16 %10935, i32 2
  %10937 = extractelement <32 x i32> %10921, i32 3
  %10938 = sext i32 %10937 to i64
  %10939 = getelementptr inbounds i16, i16* %256, i64 %10938
  %10940 = load i16, i16* %10939, align 2, !tbaa !393
  %10941 = insertelement <32 x i16> %10936, i16 %10940, i32 3
  %10942 = extractelement <32 x i32> %10921, i32 4
  %10943 = sext i32 %10942 to i64
  %10944 = getelementptr inbounds i16, i16* %256, i64 %10943
  %10945 = load i16, i16* %10944, align 2, !tbaa !393
  %10946 = insertelement <32 x i16> %10941, i16 %10945, i32 4
  %10947 = extractelement <32 x i32> %10921, i32 5
  %10948 = sext i32 %10947 to i64
  %10949 = getelementptr inbounds i16, i16* %256, i64 %10948
  %10950 = load i16, i16* %10949, align 2, !tbaa !393
  %10951 = insertelement <32 x i16> %10946, i16 %10950, i32 5
  %10952 = extractelement <32 x i32> %10921, i32 6
  %10953 = sext i32 %10952 to i64
  %10954 = getelementptr inbounds i16, i16* %256, i64 %10953
  %10955 = load i16, i16* %10954, align 2, !tbaa !393
  %10956 = insertelement <32 x i16> %10951, i16 %10955, i32 6
  %10957 = extractelement <32 x i32> %10921, i32 7
  %10958 = sext i32 %10957 to i64
  %10959 = getelementptr inbounds i16, i16* %256, i64 %10958
  %10960 = load i16, i16* %10959, align 2, !tbaa !393
  %10961 = insertelement <32 x i16> %10956, i16 %10960, i32 7
  %10962 = extractelement <32 x i32> %10921, i32 8
  %10963 = sext i32 %10962 to i64
  %10964 = getelementptr inbounds i16, i16* %256, i64 %10963
  %10965 = load i16, i16* %10964, align 2, !tbaa !393
  %10966 = insertelement <32 x i16> %10961, i16 %10965, i32 8
  %10967 = extractelement <32 x i32> %10921, i32 9
  %10968 = sext i32 %10967 to i64
  %10969 = getelementptr inbounds i16, i16* %256, i64 %10968
  %10970 = load i16, i16* %10969, align 2, !tbaa !393
  %10971 = insertelement <32 x i16> %10966, i16 %10970, i32 9
  %10972 = extractelement <32 x i32> %10921, i32 10
  %10973 = sext i32 %10972 to i64
  %10974 = getelementptr inbounds i16, i16* %256, i64 %10973
  %10975 = load i16, i16* %10974, align 2, !tbaa !393
  %10976 = insertelement <32 x i16> %10971, i16 %10975, i32 10
  %10977 = extractelement <32 x i32> %10921, i32 11
  %10978 = sext i32 %10977 to i64
  %10979 = getelementptr inbounds i16, i16* %256, i64 %10978
  %10980 = load i16, i16* %10979, align 2, !tbaa !393
  %10981 = insertelement <32 x i16> %10976, i16 %10980, i32 11
  %10982 = extractelement <32 x i32> %10921, i32 12
  %10983 = sext i32 %10982 to i64
  %10984 = getelementptr inbounds i16, i16* %256, i64 %10983
  %10985 = load i16, i16* %10984, align 2, !tbaa !393
  %10986 = insertelement <32 x i16> %10981, i16 %10985, i32 12
  %10987 = extractelement <32 x i32> %10921, i32 13
  %10988 = sext i32 %10987 to i64
  %10989 = getelementptr inbounds i16, i16* %256, i64 %10988
  %10990 = load i16, i16* %10989, align 2, !tbaa !393
  %10991 = insertelement <32 x i16> %10986, i16 %10990, i32 13
  %10992 = extractelement <32 x i32> %10921, i32 14
  %10993 = sext i32 %10992 to i64
  %10994 = getelementptr inbounds i16, i16* %256, i64 %10993
  %10995 = load i16, i16* %10994, align 2, !tbaa !393
  %10996 = insertelement <32 x i16> %10991, i16 %10995, i32 14
  %10997 = extractelement <32 x i32> %10921, i32 15
  %10998 = sext i32 %10997 to i64
  %10999 = getelementptr inbounds i16, i16* %256, i64 %10998
  %11000 = load i16, i16* %10999, align 2, !tbaa !393
  %11001 = insertelement <32 x i16> %10996, i16 %11000, i32 15
  %11002 = extractelement <32 x i32> %10921, i32 16
  %11003 = sext i32 %11002 to i64
  %11004 = getelementptr inbounds i16, i16* %256, i64 %11003
  %11005 = load i16, i16* %11004, align 2, !tbaa !393
  %11006 = insertelement <32 x i16> %11001, i16 %11005, i32 16
  %11007 = extractelement <32 x i32> %10921, i32 17
  %11008 = sext i32 %11007 to i64
  %11009 = getelementptr inbounds i16, i16* %256, i64 %11008
  %11010 = load i16, i16* %11009, align 2, !tbaa !393
  %11011 = insertelement <32 x i16> %11006, i16 %11010, i32 17
  %11012 = extractelement <32 x i32> %10921, i32 18
  %11013 = sext i32 %11012 to i64
  %11014 = getelementptr inbounds i16, i16* %256, i64 %11013
  %11015 = load i16, i16* %11014, align 2, !tbaa !393
  %11016 = insertelement <32 x i16> %11011, i16 %11015, i32 18
  %11017 = extractelement <32 x i32> %10921, i32 19
  %11018 = sext i32 %11017 to i64
  %11019 = getelementptr inbounds i16, i16* %256, i64 %11018
  %11020 = load i16, i16* %11019, align 2, !tbaa !393
  %11021 = insertelement <32 x i16> %11016, i16 %11020, i32 19
  %11022 = extractelement <32 x i32> %10921, i32 20
  %11023 = sext i32 %11022 to i64
  %11024 = getelementptr inbounds i16, i16* %256, i64 %11023
  %11025 = load i16, i16* %11024, align 2, !tbaa !393
  %11026 = insertelement <32 x i16> %11021, i16 %11025, i32 20
  %11027 = extractelement <32 x i32> %10921, i32 21
  %11028 = sext i32 %11027 to i64
  %11029 = getelementptr inbounds i16, i16* %256, i64 %11028
  %11030 = load i16, i16* %11029, align 2, !tbaa !393
  %11031 = insertelement <32 x i16> %11026, i16 %11030, i32 21
  %11032 = extractelement <32 x i32> %10921, i32 22
  %11033 = sext i32 %11032 to i64
  %11034 = getelementptr inbounds i16, i16* %256, i64 %11033
  %11035 = load i16, i16* %11034, align 2, !tbaa !393
  %11036 = insertelement <32 x i16> %11031, i16 %11035, i32 22
  %11037 = extractelement <32 x i32> %10921, i32 23
  %11038 = sext i32 %11037 to i64
  %11039 = getelementptr inbounds i16, i16* %256, i64 %11038
  %11040 = load i16, i16* %11039, align 2, !tbaa !393
  %11041 = insertelement <32 x i16> %11036, i16 %11040, i32 23
  %11042 = extractelement <32 x i32> %10921, i32 24
  %11043 = sext i32 %11042 to i64
  %11044 = getelementptr inbounds i16, i16* %256, i64 %11043
  %11045 = load i16, i16* %11044, align 2, !tbaa !393
  %11046 = insertelement <32 x i16> %11041, i16 %11045, i32 24
  %11047 = extractelement <32 x i32> %10921, i32 25
  %11048 = sext i32 %11047 to i64
  %11049 = getelementptr inbounds i16, i16* %256, i64 %11048
  %11050 = load i16, i16* %11049, align 2, !tbaa !393
  %11051 = insertelement <32 x i16> %11046, i16 %11050, i32 25
  %11052 = extractelement <32 x i32> %10921, i32 26
  %11053 = sext i32 %11052 to i64
  %11054 = getelementptr inbounds i16, i16* %256, i64 %11053
  %11055 = load i16, i16* %11054, align 2, !tbaa !393
  %11056 = insertelement <32 x i16> %11051, i16 %11055, i32 26
  %11057 = extractelement <32 x i32> %10921, i32 27
  %11058 = sext i32 %11057 to i64
  %11059 = getelementptr inbounds i16, i16* %256, i64 %11058
  %11060 = load i16, i16* %11059, align 2, !tbaa !393
  %11061 = insertelement <32 x i16> %11056, i16 %11060, i32 27
  %11062 = extractelement <32 x i32> %10921, i32 28
  %11063 = sext i32 %11062 to i64
  %11064 = getelementptr inbounds i16, i16* %256, i64 %11063
  %11065 = load i16, i16* %11064, align 2, !tbaa !393
  %11066 = insertelement <32 x i16> %11061, i16 %11065, i32 28
  %11067 = extractelement <32 x i32> %10921, i32 29
  %11068 = sext i32 %11067 to i64
  %11069 = getelementptr inbounds i16, i16* %256, i64 %11068
  %11070 = load i16, i16* %11069, align 2, !tbaa !393
  %11071 = insertelement <32 x i16> %11066, i16 %11070, i32 29
  %11072 = extractelement <32 x i32> %10921, i32 30
  %11073 = sext i32 %11072 to i64
  %11074 = getelementptr inbounds i16, i16* %256, i64 %11073
  %11075 = load i16, i16* %11074, align 2, !tbaa !393
  %11076 = insertelement <32 x i16> %11071, i16 %11075, i32 30
  %11077 = extractelement <32 x i32> %10921, i32 31
  %11078 = sext i32 %11077 to i64
  %11079 = getelementptr inbounds i16, i16* %256, i64 %11078
  %11080 = load i16, i16* %11079, align 2, !tbaa !393
  %11081 = insertelement <32 x i16> %11076, i16 %11080, i32 31
  %11082 = shufflevector <32 x i16> %11081, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11083 = sext i32 %read_input.s0.x.v2.base.s825 to i64
  %11084 = add nsw i64 %10891, %11083
  %11085 = getelementptr inbounds i16, i16* %read_input784, i64 %11084
  %11086 = getelementptr inbounds i16, i16* %11085, i64 -32
  %11087 = bitcast i16* %11086 to <16 x i16>*
  store <16 x i16> %11082, <16 x i16>* %11087, align 2, !tbaa !396
  %11088 = shufflevector <32 x i16> %11081, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11089 = getelementptr inbounds i16, i16* %11085, i64 -16
  %11090 = bitcast i16* %11089 to <16 x i16>*
  store <16 x i16> %11088, <16 x i16>* %11090, align 2, !tbaa !396
  %11091 = add nuw nsw i32 %read_input.s0.x.x.rebased824, 1
  %.not2572 = icmp eq i32 %11091, %t1617803
  br i1 %.not2572, label %"end for read_input.s0.x.x.rebased823", label %"for read_input.s0.x.x.rebased822"

"end for read_input.s0.x.x.rebased823":           ; preds = %"for read_input.s0.x.x.rebased822", %"end for read_input.s0.x.x.rebased818"
  %indvars.iv.next3234 = add nuw nsw i64 %indvars.iv3233, 1
  %.not2571 = icmp eq i64 %indvars.iv.next3234, %10381
  br i1 %.not2571, label %"end for read_input.s0.y.rebased808", label %"for read_input.s0.y.rebased807"

"for read_input.s0.y.rebased831":                 ; preds = %"for read_input.s0.y.rebased831.preheader", %"end for read_input.s0.x.x836"
  %indvars.iv3236 = phi i64 [ 0, %"for read_input.s0.y.rebased831.preheader" ], [ %indvars.iv.next3237, %"end for read_input.s0.x.x836" ]
  %11092 = trunc i64 %indvars.iv3236 to i32
  %a523 = add nsw i32 %10593, %11092
  %11093 = icmp sgt i32 %b384, %a523
  %a522 = select i1 %11093, i32 %a523, i32 %b384
  %11094 = icmp sgt i32 %a522, 0
  %11095 = select i1 %11094, i32 %a522, i32 0
  %11096 = mul nsw i32 %11095, %203
  %t1635834 = sub nsw i32 %11096, %199
  %11097 = insertelement <32 x i32> undef, i32 %t1635834, i32 0
  %11098 = shufflevector <32 x i32> %11097, <32 x i32> undef, <32 x i32> zeroinitializer
  %11099 = add nuw nsw i64 %10597, %indvars.iv3236
  %11100 = mul nsw i64 %11099, %277
  %11101 = sub i64 %11100, %278
  br label %"for read_input.s0.x.x835"

"end for read_input.s0.y.rebased832":             ; preds = %"end for read_input.s0.x.x836", %"end for read_input.s0.y.rebased808"
  %11102 = load i64, i64* %.fca.1.gep2278, align 8, !tbaa !387
  %cmp.i2750 = icmp ult i64 %11102, %287
  %11103 = load i8*, i8** %.fca.0.gep2277, align 8, !tbaa !389
  br i1 %cmp.i2750, label %if.then.i2753, label %pseudostack_alloc.exit2766, !prof !390

if.then.i2753:                                    ; preds = %"end for read_input.s0.y.rebased832"
  %tobool1.not.i2752 = icmp ne i8* %11103, null
  %11104 = load i64, i64* %.fca.2.gep2279, align 8
  %cmp2.i2755 = icmp ugt i64 %11104, 16384
  %or.cond2797 = and i1 %tobool1.not.i2752, %cmp2.i2755
  br i1 %or.cond2797, label %if.then3.i2757, label %if.end.i2761

if.then3.i2757:                                   ; preds = %if.then.i2753
  call void @halide_free(i8* null, i8* nonnull %11103) #16
  %.pre3341 = load i64, i64* %.fca.2.gep2279, align 8, !tbaa !391
  br label %if.end.i2761

if.end.i2761:                                     ; preds = %if.then3.i2757, %if.then.i2753
  %11105 = phi i64 [ %.pre3341, %if.then3.i2757 ], [ %11104, %if.then.i2753 ]
  %add.i2759 = add i64 %11105, %287
  store i64 %add.i2759, i64* %.fca.2.gep2279, align 8, !tbaa !391
  %cmp7.i2760 = icmp ugt i64 %add.i2759, 16384
  br i1 %cmp7.i2760, label %if.then8.i2763, label %if.end11.i2765

if.then8.i2763:                                   ; preds = %if.end.i2761
  %call.i2762 = call i8* @halide_malloc(i8* null, i64 %287) #16
  br label %if.end11.i2765

if.end11.i2765:                                   ; preds = %if.then8.i2763, %if.end.i2761
  %storemerge.i2764 = phi i8* [ %call.i2762, %if.then8.i2763 ], [ null, %if.end.i2761 ]
  store i8* %storemerge.i2764, i8** %.fca.0.gep2277, align 8, !tbaa !389
  store i64 %287, i64* %.fca.1.gep2278, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2766

pseudostack_alloc.exit2766:                       ; preds = %"end for read_input.s0.y.rebased832", %if.end11.i2765
  %11106 = phi i8* [ %storemerge.i2764, %if.end11.i2765 ], [ %11103, %"end for read_input.s0.y.rebased832" ]
  %11107 = bitcast i8* %11106 to i16*
  %.not2433 = icmp eq i8* %11106, null
  br i1 %.not2433, label %then_bb840, label %"consume read_input842", !prof !392

"for read_input.s0.x.x835":                       ; preds = %"for read_input.s0.y.rebased831", %"for read_input.s0.x.x835"
  %read_input.s0.x.x837 = phi i32 [ %11306, %"for read_input.s0.x.x835" ], [ 0, %"for read_input.s0.y.rebased831" ]
  %11108 = shl nsw i32 %read_input.s0.x.x837, 5
  %a529 = add nsw i32 %266, %11108
  %11109 = icmp sgt i32 %b405, %a529
  %read_input.s0.x.v2.base.s838 = select i1 %11109, i32 %a529, i32 %b405
  %11110 = add nsw i32 %read_input.s0.x.v2.base.s838, -32
  %11111 = insertelement <32 x i32> undef, i32 %11110, i32 0
  %11112 = shufflevector <32 x i32> %11111, <32 x i32> undef, <32 x i32> zeroinitializer
  %a532 = add nsw <32 x i32> %11112, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11113 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11114 = icmp sgt <8 x i32> %269, %11113
  %11115 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11116 = icmp sgt <8 x i32> %269, %11115
  %11117 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11118 = icmp sgt <8 x i32> %269, %11117
  %11119 = shufflevector <32 x i32> %a532, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11120 = icmp sgt <8 x i32> %269, %11119
  %11121 = select <8 x i1> %11114, <8 x i32> %11113, <8 x i32> %269
  %11122 = select <8 x i1> %11116, <8 x i32> %11115, <8 x i32> %269
  %11123 = select <8 x i1> %11118, <8 x i32> %11117, <8 x i32> %269
  %11124 = select <8 x i1> %11120, <8 x i32> %11119, <8 x i32> %269
  %11125 = icmp sgt <8 x i32> %11121, %271
  %11126 = icmp sgt <8 x i32> %11122, %271
  %11127 = icmp sgt <8 x i32> %11123, %271
  %11128 = icmp sgt <8 x i32> %11124, %271
  %11129 = select <8 x i1> %11125, <8 x i32> %11121, <8 x i32> %271
  %11130 = select <8 x i1> %11126, <8 x i32> %11122, <8 x i32> %271
  %11131 = select <8 x i1> %11127, <8 x i32> %11123, <8 x i32> %271
  %11132 = select <8 x i1> %11128, <8 x i32> %11124, <8 x i32> %271
  %11133 = shufflevector <8 x i32> %11129, <8 x i32> %11130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11134 = shufflevector <8 x i32> %11131, <8 x i32> %11132, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11135 = shufflevector <16 x i32> %11133, <16 x i32> %11134, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11136 = add nsw <32 x i32> %11135, %11098
  %11137 = extractelement <32 x i32> %11136, i32 0
  %11138 = sext i32 %11137 to i64
  %11139 = getelementptr inbounds i16, i16* %256, i64 %11138
  %11140 = load i16, i16* %11139, align 2, !tbaa !393
  %11141 = insertelement <32 x i16> undef, i16 %11140, i32 0
  %11142 = extractelement <32 x i32> %11136, i32 1
  %11143 = sext i32 %11142 to i64
  %11144 = getelementptr inbounds i16, i16* %256, i64 %11143
  %11145 = load i16, i16* %11144, align 2, !tbaa !393
  %11146 = insertelement <32 x i16> %11141, i16 %11145, i32 1
  %11147 = extractelement <32 x i32> %11136, i32 2
  %11148 = sext i32 %11147 to i64
  %11149 = getelementptr inbounds i16, i16* %256, i64 %11148
  %11150 = load i16, i16* %11149, align 2, !tbaa !393
  %11151 = insertelement <32 x i16> %11146, i16 %11150, i32 2
  %11152 = extractelement <32 x i32> %11136, i32 3
  %11153 = sext i32 %11152 to i64
  %11154 = getelementptr inbounds i16, i16* %256, i64 %11153
  %11155 = load i16, i16* %11154, align 2, !tbaa !393
  %11156 = insertelement <32 x i16> %11151, i16 %11155, i32 3
  %11157 = extractelement <32 x i32> %11136, i32 4
  %11158 = sext i32 %11157 to i64
  %11159 = getelementptr inbounds i16, i16* %256, i64 %11158
  %11160 = load i16, i16* %11159, align 2, !tbaa !393
  %11161 = insertelement <32 x i16> %11156, i16 %11160, i32 4
  %11162 = extractelement <32 x i32> %11136, i32 5
  %11163 = sext i32 %11162 to i64
  %11164 = getelementptr inbounds i16, i16* %256, i64 %11163
  %11165 = load i16, i16* %11164, align 2, !tbaa !393
  %11166 = insertelement <32 x i16> %11161, i16 %11165, i32 5
  %11167 = extractelement <32 x i32> %11136, i32 6
  %11168 = sext i32 %11167 to i64
  %11169 = getelementptr inbounds i16, i16* %256, i64 %11168
  %11170 = load i16, i16* %11169, align 2, !tbaa !393
  %11171 = insertelement <32 x i16> %11166, i16 %11170, i32 6
  %11172 = extractelement <32 x i32> %11136, i32 7
  %11173 = sext i32 %11172 to i64
  %11174 = getelementptr inbounds i16, i16* %256, i64 %11173
  %11175 = load i16, i16* %11174, align 2, !tbaa !393
  %11176 = insertelement <32 x i16> %11171, i16 %11175, i32 7
  %11177 = extractelement <32 x i32> %11136, i32 8
  %11178 = sext i32 %11177 to i64
  %11179 = getelementptr inbounds i16, i16* %256, i64 %11178
  %11180 = load i16, i16* %11179, align 2, !tbaa !393
  %11181 = insertelement <32 x i16> %11176, i16 %11180, i32 8
  %11182 = extractelement <32 x i32> %11136, i32 9
  %11183 = sext i32 %11182 to i64
  %11184 = getelementptr inbounds i16, i16* %256, i64 %11183
  %11185 = load i16, i16* %11184, align 2, !tbaa !393
  %11186 = insertelement <32 x i16> %11181, i16 %11185, i32 9
  %11187 = extractelement <32 x i32> %11136, i32 10
  %11188 = sext i32 %11187 to i64
  %11189 = getelementptr inbounds i16, i16* %256, i64 %11188
  %11190 = load i16, i16* %11189, align 2, !tbaa !393
  %11191 = insertelement <32 x i16> %11186, i16 %11190, i32 10
  %11192 = extractelement <32 x i32> %11136, i32 11
  %11193 = sext i32 %11192 to i64
  %11194 = getelementptr inbounds i16, i16* %256, i64 %11193
  %11195 = load i16, i16* %11194, align 2, !tbaa !393
  %11196 = insertelement <32 x i16> %11191, i16 %11195, i32 11
  %11197 = extractelement <32 x i32> %11136, i32 12
  %11198 = sext i32 %11197 to i64
  %11199 = getelementptr inbounds i16, i16* %256, i64 %11198
  %11200 = load i16, i16* %11199, align 2, !tbaa !393
  %11201 = insertelement <32 x i16> %11196, i16 %11200, i32 12
  %11202 = extractelement <32 x i32> %11136, i32 13
  %11203 = sext i32 %11202 to i64
  %11204 = getelementptr inbounds i16, i16* %256, i64 %11203
  %11205 = load i16, i16* %11204, align 2, !tbaa !393
  %11206 = insertelement <32 x i16> %11201, i16 %11205, i32 13
  %11207 = extractelement <32 x i32> %11136, i32 14
  %11208 = sext i32 %11207 to i64
  %11209 = getelementptr inbounds i16, i16* %256, i64 %11208
  %11210 = load i16, i16* %11209, align 2, !tbaa !393
  %11211 = insertelement <32 x i16> %11206, i16 %11210, i32 14
  %11212 = extractelement <32 x i32> %11136, i32 15
  %11213 = sext i32 %11212 to i64
  %11214 = getelementptr inbounds i16, i16* %256, i64 %11213
  %11215 = load i16, i16* %11214, align 2, !tbaa !393
  %11216 = insertelement <32 x i16> %11211, i16 %11215, i32 15
  %11217 = extractelement <32 x i32> %11136, i32 16
  %11218 = sext i32 %11217 to i64
  %11219 = getelementptr inbounds i16, i16* %256, i64 %11218
  %11220 = load i16, i16* %11219, align 2, !tbaa !393
  %11221 = insertelement <32 x i16> %11216, i16 %11220, i32 16
  %11222 = extractelement <32 x i32> %11136, i32 17
  %11223 = sext i32 %11222 to i64
  %11224 = getelementptr inbounds i16, i16* %256, i64 %11223
  %11225 = load i16, i16* %11224, align 2, !tbaa !393
  %11226 = insertelement <32 x i16> %11221, i16 %11225, i32 17
  %11227 = extractelement <32 x i32> %11136, i32 18
  %11228 = sext i32 %11227 to i64
  %11229 = getelementptr inbounds i16, i16* %256, i64 %11228
  %11230 = load i16, i16* %11229, align 2, !tbaa !393
  %11231 = insertelement <32 x i16> %11226, i16 %11230, i32 18
  %11232 = extractelement <32 x i32> %11136, i32 19
  %11233 = sext i32 %11232 to i64
  %11234 = getelementptr inbounds i16, i16* %256, i64 %11233
  %11235 = load i16, i16* %11234, align 2, !tbaa !393
  %11236 = insertelement <32 x i16> %11231, i16 %11235, i32 19
  %11237 = extractelement <32 x i32> %11136, i32 20
  %11238 = sext i32 %11237 to i64
  %11239 = getelementptr inbounds i16, i16* %256, i64 %11238
  %11240 = load i16, i16* %11239, align 2, !tbaa !393
  %11241 = insertelement <32 x i16> %11236, i16 %11240, i32 20
  %11242 = extractelement <32 x i32> %11136, i32 21
  %11243 = sext i32 %11242 to i64
  %11244 = getelementptr inbounds i16, i16* %256, i64 %11243
  %11245 = load i16, i16* %11244, align 2, !tbaa !393
  %11246 = insertelement <32 x i16> %11241, i16 %11245, i32 21
  %11247 = extractelement <32 x i32> %11136, i32 22
  %11248 = sext i32 %11247 to i64
  %11249 = getelementptr inbounds i16, i16* %256, i64 %11248
  %11250 = load i16, i16* %11249, align 2, !tbaa !393
  %11251 = insertelement <32 x i16> %11246, i16 %11250, i32 22
  %11252 = extractelement <32 x i32> %11136, i32 23
  %11253 = sext i32 %11252 to i64
  %11254 = getelementptr inbounds i16, i16* %256, i64 %11253
  %11255 = load i16, i16* %11254, align 2, !tbaa !393
  %11256 = insertelement <32 x i16> %11251, i16 %11255, i32 23
  %11257 = extractelement <32 x i32> %11136, i32 24
  %11258 = sext i32 %11257 to i64
  %11259 = getelementptr inbounds i16, i16* %256, i64 %11258
  %11260 = load i16, i16* %11259, align 2, !tbaa !393
  %11261 = insertelement <32 x i16> %11256, i16 %11260, i32 24
  %11262 = extractelement <32 x i32> %11136, i32 25
  %11263 = sext i32 %11262 to i64
  %11264 = getelementptr inbounds i16, i16* %256, i64 %11263
  %11265 = load i16, i16* %11264, align 2, !tbaa !393
  %11266 = insertelement <32 x i16> %11261, i16 %11265, i32 25
  %11267 = extractelement <32 x i32> %11136, i32 26
  %11268 = sext i32 %11267 to i64
  %11269 = getelementptr inbounds i16, i16* %256, i64 %11268
  %11270 = load i16, i16* %11269, align 2, !tbaa !393
  %11271 = insertelement <32 x i16> %11266, i16 %11270, i32 26
  %11272 = extractelement <32 x i32> %11136, i32 27
  %11273 = sext i32 %11272 to i64
  %11274 = getelementptr inbounds i16, i16* %256, i64 %11273
  %11275 = load i16, i16* %11274, align 2, !tbaa !393
  %11276 = insertelement <32 x i16> %11271, i16 %11275, i32 27
  %11277 = extractelement <32 x i32> %11136, i32 28
  %11278 = sext i32 %11277 to i64
  %11279 = getelementptr inbounds i16, i16* %256, i64 %11278
  %11280 = load i16, i16* %11279, align 2, !tbaa !393
  %11281 = insertelement <32 x i16> %11276, i16 %11280, i32 28
  %11282 = extractelement <32 x i32> %11136, i32 29
  %11283 = sext i32 %11282 to i64
  %11284 = getelementptr inbounds i16, i16* %256, i64 %11283
  %11285 = load i16, i16* %11284, align 2, !tbaa !393
  %11286 = insertelement <32 x i16> %11281, i16 %11285, i32 29
  %11287 = extractelement <32 x i32> %11136, i32 30
  %11288 = sext i32 %11287 to i64
  %11289 = getelementptr inbounds i16, i16* %256, i64 %11288
  %11290 = load i16, i16* %11289, align 2, !tbaa !393
  %11291 = insertelement <32 x i16> %11286, i16 %11290, i32 30
  %11292 = extractelement <32 x i32> %11136, i32 31
  %11293 = sext i32 %11292 to i64
  %11294 = getelementptr inbounds i16, i16* %256, i64 %11293
  %11295 = load i16, i16* %11294, align 2, !tbaa !393
  %11296 = insertelement <32 x i16> %11291, i16 %11295, i32 31
  %11297 = shufflevector <32 x i16> %11296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11298 = sext i32 %read_input.s0.x.v2.base.s838 to i64
  %11299 = add nsw i64 %11101, %11298
  %11300 = getelementptr inbounds i16, i16* %read_input784, i64 %11299
  %11301 = getelementptr inbounds i16, i16* %11300, i64 -32
  %11302 = bitcast i16* %11301 to <16 x i16>*
  store <16 x i16> %11297, <16 x i16>* %11302, align 2, !tbaa !396
  %11303 = shufflevector <32 x i16> %11296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11304 = getelementptr inbounds i16, i16* %11300, i64 -16
  %11305 = bitcast i16* %11304 to <16 x i16>*
  store <16 x i16> %11303, <16 x i16>* %11305, align 2, !tbaa !396
  %11306 = add nuw nsw i32 %read_input.s0.x.x837, 1
  %.not2570 = icmp eq i32 %11306, %211
  br i1 %.not2570, label %"end for read_input.s0.x.x836", label %"for read_input.s0.x.x835"

"end for read_input.s0.x.x836":                   ; preds = %"for read_input.s0.x.x835"
  %indvars.iv.next3237 = add nuw nsw i64 %indvars.iv3236, 1
  %.not2569 = icmp eq i64 %indvars.iv3236, %10598
  br i1 %.not2569, label %"end for read_input.s0.y.rebased832", label %"for read_input.s0.y.rebased831"

then_bb840:                                       ; preds = %pseudostack_alloc.exit2766
  %11307 = alloca i8*, i64 %287, align 32
  %11308 = bitcast i8** %11307 to i16*
  store i8** %11307, i8*** %288, align 8
  br label %"consume read_input842"

"consume read_input842":                          ; preds = %pseudostack_alloc.exit2766, %then_bb840
  %blur_x841 = phi i16* [ %11308, %then_bb840 ], [ %11107, %pseudostack_alloc.exit2766 ]
  br i1 %225, label %"produce blur_x846", label %"consume read_input842.after_bb843_crit_edge"

"consume read_input842.after_bb843_crit_edge":    ; preds = %"consume read_input842"
  %.pre3419 = and i32 %a365, 3
  br label %after_bb843

after_bb843:                                      ; preds = %"consume read_input842.after_bb843_crit_edge", %"produce blur_x846"
  %.pre-phi3420 = phi i32 [ %.pre3419, %"consume read_input842.after_bb843_crit_edge" ], [ %11337, %"produce blur_x846" ]
  %11309 = mul nsw i32 %.pre-phi3420, %a537
  %t1638848 = sub nsw i32 %11309, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased851.preheader", label %"end for blur_y.s0.x.x.rebased852", !prof !386

"for blur_y.s0.x.x.rebased851.preheader":         ; preds = %after_bb843
  %11310 = sext i32 %t1638848 to i64
  br label %"for blur_y.s0.x.x.rebased851"

"produce blur_x846":                              ; preds = %"consume read_input842"
  %11311 = getelementptr inbounds i16, i16* %read_input784, i64 %291
  %11312 = getelementptr inbounds i16, i16* %11311, i64 -31
  %11313 = bitcast i16* %11312 to <16 x i16>*
  %11314 = load <16 x i16>, <16 x i16>* %11313, align 2, !tbaa !396
  %11315 = getelementptr inbounds i16, i16* %11311, i64 -15
  %11316 = bitcast i16* %11315 to <16 x i16>*
  %11317 = load <16 x i16>, <16 x i16>* %11316, align 2, !tbaa !396
  %11318 = shufflevector <16 x i16> %11314, <16 x i16> %11317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11319 = getelementptr inbounds i16, i16* %11311, i64 -30
  %11320 = bitcast i16* %11319 to <16 x i16>*
  %11321 = load <16 x i16>, <16 x i16>* %11320, align 2, !tbaa !396
  %11322 = getelementptr inbounds i16, i16* %11311, i64 -14
  %11323 = bitcast i16* %11322 to <16 x i16>*
  %11324 = load <16 x i16>, <16 x i16>* %11323, align 2, !tbaa !396
  %11325 = shufflevector <16 x i16> %11321, <16 x i16> %11324, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11326 = getelementptr inbounds i16, i16* %11311, i64 -32
  %11327 = bitcast i16* %11326 to <16 x i16>*
  %11328 = load <16 x i16>, <16 x i16>* %11327, align 2, !tbaa !396
  %11329 = getelementptr inbounds i16, i16* %11311, i64 -16
  %11330 = bitcast i16* %11329 to <16 x i16>*
  %11331 = load <16 x i16>, <16 x i16>* %11330, align 2, !tbaa !396
  %11332 = shufflevector <16 x i16> %11328, <16 x i16> %11331, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11333 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11332, <32 x i16> %11325, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11334 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11318, <32 x i16> %11333, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11335 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11334, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11336 = shufflevector <32 x i16> %11335, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11337 = and i32 %a365, 3
  %11338 = zext i32 %11337 to i64
  %11339 = mul nsw i64 %294, %11338
  %11340 = add nsw i64 %296, %11339
  %11341 = getelementptr inbounds i16, i16* %blur_x841, i64 %11340
  %11342 = getelementptr inbounds i16, i16* %11341, i64 -32
  %11343 = bitcast i16* %11342 to <16 x i16>*
  store <16 x i16> %11336, <16 x i16>* %11343, align 2, !tbaa !399
  %11344 = shufflevector <32 x i16> %11335, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11345 = getelementptr inbounds i16, i16* %11341, i64 -16
  %11346 = bitcast i16* %11345 to <16 x i16>*
  store <16 x i16> %11344, <16 x i16>* %11346, align 2, !tbaa !399
  br label %after_bb843

"for blur_y.s0.x.x.rebased851":                   ; preds = %"for blur_y.s0.x.x.rebased851.preheader", %after_bb854
  %indvars.iv3238 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased851.preheader" ], [ %indvars.iv.next3239, %after_bb854 ]
  %11347 = add nsw i64 %indvars.iv3238, %298
  %11348 = icmp slt i64 %11347, 1
  %11349 = trunc i64 %11347 to i32
  %11350 = shl nsw i32 %11349, 5
  %11351 = icmp sgt i32 %194, %11350
  %11352 = or i1 %11348, %11351
  br i1 %11352, label %"produce blur_x857", label %after_bb854

"end for blur_y.s0.x.x.rebased852":               ; preds = %after_bb854, %after_bb843
  br i1 %299, label %"for blur_y.s0.x.x.rebased862.preheader", label %"end for blur_y.s0.x.x.rebased863", !prof !386

"for blur_y.s0.x.x.rebased862.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased852"
  %11353 = sext i32 %t1638848 to i64
  br label %"for blur_y.s0.x.x.rebased862"

after_bb854:                                      ; preds = %"for blur_y.s0.x.x.rebased851", %"produce blur_x857"
  %indvars.iv.next3239 = add nuw nsw i64 %indvars.iv3238, 1
  %11354 = icmp eq i64 %indvars.iv.next3239, %zext
  br i1 %11354, label %"end for blur_y.s0.x.x.rebased852", label %"for blur_y.s0.x.x.rebased851"

"produce blur_x857":                              ; preds = %"for blur_y.s0.x.x.rebased851"
  %t656858 = sub i32 %11350, %t1601773
  %11355 = sext i32 %t656858 to i64
  %11356 = getelementptr inbounds i16, i16* %read_input784, i64 %11355
  %11357 = getelementptr inbounds i16, i16* %11356, i64 1
  %11358 = bitcast i16* %11357 to <16 x i16>*
  %11359 = load <16 x i16>, <16 x i16>* %11358, align 2, !tbaa !396
  %11360 = getelementptr inbounds i16, i16* %11356, i64 17
  %11361 = bitcast i16* %11360 to <16 x i16>*
  %11362 = load <16 x i16>, <16 x i16>* %11361, align 2, !tbaa !396
  %11363 = shufflevector <16 x i16> %11359, <16 x i16> %11362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11364 = getelementptr inbounds i16, i16* %11356, i64 2
  %11365 = bitcast i16* %11364 to <16 x i16>*
  %11366 = load <16 x i16>, <16 x i16>* %11365, align 2, !tbaa !396
  %11367 = getelementptr inbounds i16, i16* %11356, i64 18
  %11368 = bitcast i16* %11367 to <16 x i16>*
  %11369 = load <16 x i16>, <16 x i16>* %11368, align 2, !tbaa !396
  %11370 = shufflevector <16 x i16> %11366, <16 x i16> %11369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11371 = bitcast i16* %11356 to <16 x i16>*
  %11372 = load <16 x i16>, <16 x i16>* %11371, align 2, !tbaa !396
  %11373 = getelementptr inbounds i16, i16* %11356, i64 16
  %11374 = bitcast i16* %11373 to <16 x i16>*
  %11375 = load <16 x i16>, <16 x i16>* %11374, align 2, !tbaa !396
  %11376 = shufflevector <16 x i16> %11372, <16 x i16> %11375, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11377 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11376, <32 x i16> %11370, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11378 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11363, <32 x i16> %11377, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11379 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11378, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11380 = shufflevector <32 x i16> %11379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11381 = shl nsw i64 %11347, 5
  %11382 = add nsw i64 %11381, %11310
  %11383 = getelementptr inbounds i16, i16* %blur_x841, i64 %11382
  %11384 = bitcast i16* %11383 to <16 x i16>*
  store <16 x i16> %11380, <16 x i16>* %11384, align 2, !tbaa !399
  %11385 = shufflevector <32 x i16> %11379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11386 = getelementptr inbounds i16, i16* %11383, i64 16
  %11387 = bitcast i16* %11386 to <16 x i16>*
  store <16 x i16> %11385, <16 x i16>* %11387, align 2, !tbaa !399
  br label %after_bb854

"for blur_y.s0.x.x.rebased862":                   ; preds = %"for blur_y.s0.x.x.rebased862.preheader", %after_bb865
  %blur_y.s0.x.x.rebased864 = phi i32 [ %11393, %after_bb865 ], [ 0, %"for blur_y.s0.x.x.rebased862.preheader" ]
  %11388 = add nsw i32 %blur_y.s0.x.x.rebased864, %t1582776
  %11389 = icmp slt i32 %11388, 1
  %11390 = shl nsw i32 %11388, 5
  %11391 = icmp sgt i32 %194, %11390
  %11392 = or i1 %11389, %11391
  br i1 %11392, label %then_bb866, label %after_bb865

"end for blur_y.s0.x.x.rebased863":               ; preds = %after_bb865, %"end for blur_y.s0.x.x.rebased852"
  br i1 %225, label %"produce blur_x874", label %"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge"

"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased863"
  %.pre3421 = add nsw i32 %a365, 1
  %.pre3423 = and i32 %.pre3421, 3
  br label %after_bb871

after_bb865:                                      ; preds = %"for blur_y.s0.x.x.rebased862", %then_bb866
  %11393 = add nuw nsw i32 %blur_y.s0.x.x.rebased864, 1
  %.not2566 = icmp eq i32 %11393, %t1639860
  br i1 %.not2566, label %"end for blur_y.s0.x.x.rebased863", label %"for blur_y.s0.x.x.rebased862"

then_bb866:                                       ; preds = %"for blur_y.s0.x.x.rebased862"
  %11394 = icmp sgt i32 %t1603, %11390
  %b584 = select i1 %11394, i32 %11390, i32 %t1603
  %11395 = icmp slt i32 %b584, %194
  %blur_x.s0.x.v1.base.s869 = select i1 %11395, i32 %b584, i32 %194
  %t658870 = sub i32 %blur_x.s0.x.v1.base.s869, %t1601773
  %11396 = sext i32 %t658870 to i64
  %11397 = getelementptr inbounds i16, i16* %read_input784, i64 %11396
  %11398 = getelementptr inbounds i16, i16* %11397, i64 1
  %11399 = bitcast i16* %11398 to <16 x i16>*
  %11400 = load <16 x i16>, <16 x i16>* %11399, align 2, !tbaa !396
  %11401 = getelementptr inbounds i16, i16* %11397, i64 17
  %11402 = bitcast i16* %11401 to <16 x i16>*
  %11403 = load <16 x i16>, <16 x i16>* %11402, align 2, !tbaa !396
  %11404 = shufflevector <16 x i16> %11400, <16 x i16> %11403, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11405 = getelementptr inbounds i16, i16* %11397, i64 2
  %11406 = bitcast i16* %11405 to <16 x i16>*
  %11407 = load <16 x i16>, <16 x i16>* %11406, align 2, !tbaa !396
  %11408 = getelementptr inbounds i16, i16* %11397, i64 18
  %11409 = bitcast i16* %11408 to <16 x i16>*
  %11410 = load <16 x i16>, <16 x i16>* %11409, align 2, !tbaa !396
  %11411 = shufflevector <16 x i16> %11407, <16 x i16> %11410, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11412 = bitcast i16* %11397 to <16 x i16>*
  %11413 = load <16 x i16>, <16 x i16>* %11412, align 2, !tbaa !396
  %11414 = getelementptr inbounds i16, i16* %11397, i64 16
  %11415 = bitcast i16* %11414 to <16 x i16>*
  %11416 = load <16 x i16>, <16 x i16>* %11415, align 2, !tbaa !396
  %11417 = shufflevector <16 x i16> %11413, <16 x i16> %11416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11418 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11417, <32 x i16> %11411, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11419 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11404, <32 x i16> %11418, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11420 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11419, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11421 = shufflevector <32 x i16> %11420, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11422 = sext i32 %blur_x.s0.x.v1.base.s869 to i64
  %11423 = add nsw i64 %11422, %11353
  %11424 = getelementptr inbounds i16, i16* %blur_x841, i64 %11423
  %11425 = bitcast i16* %11424 to <16 x i16>*
  store <16 x i16> %11421, <16 x i16>* %11425, align 2, !tbaa !399
  %11426 = shufflevector <32 x i16> %11420, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11427 = getelementptr inbounds i16, i16* %11424, i64 16
  %11428 = bitcast i16* %11427 to <16 x i16>*
  store <16 x i16> %11426, <16 x i16>* %11428, align 2, !tbaa !399
  br label %after_bb865

after_bb871:                                      ; preds = %"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge", %"produce blur_x874"
  %.pre-phi3424 = phi i32 [ %.pre3423, %"end for blur_y.s0.x.x.rebased863.after_bb871_crit_edge" ], [ %11458, %"produce blur_x874" ]
  %11429 = mul nsw i32 %.pre-phi3424, %a537
  %t1644876 = sub nsw i32 %11429, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased879.preheader", label %"end for blur_y.s0.x.x.rebased880", !prof !386

"for blur_y.s0.x.x.rebased879.preheader":         ; preds = %after_bb871
  %11430 = sext i32 %t1644876 to i64
  br label %"for blur_y.s0.x.x.rebased879"

"produce blur_x874":                              ; preds = %"end for blur_y.s0.x.x.rebased863"
  %11431 = getelementptr inbounds i16, i16* %read_input784, i64 %311
  %11432 = getelementptr inbounds i16, i16* %11431, i64 -31
  %11433 = bitcast i16* %11432 to <16 x i16>*
  %11434 = load <16 x i16>, <16 x i16>* %11433, align 2, !tbaa !396
  %11435 = getelementptr inbounds i16, i16* %11431, i64 -15
  %11436 = bitcast i16* %11435 to <16 x i16>*
  %11437 = load <16 x i16>, <16 x i16>* %11436, align 2, !tbaa !396
  %11438 = shufflevector <16 x i16> %11434, <16 x i16> %11437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11439 = getelementptr inbounds i16, i16* %11431, i64 -30
  %11440 = bitcast i16* %11439 to <16 x i16>*
  %11441 = load <16 x i16>, <16 x i16>* %11440, align 2, !tbaa !396
  %11442 = getelementptr inbounds i16, i16* %11431, i64 -14
  %11443 = bitcast i16* %11442 to <16 x i16>*
  %11444 = load <16 x i16>, <16 x i16>* %11443, align 2, !tbaa !396
  %11445 = shufflevector <16 x i16> %11441, <16 x i16> %11444, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11446 = getelementptr inbounds i16, i16* %11431, i64 -32
  %11447 = bitcast i16* %11446 to <16 x i16>*
  %11448 = load <16 x i16>, <16 x i16>* %11447, align 2, !tbaa !396
  %11449 = getelementptr inbounds i16, i16* %11431, i64 -16
  %11450 = bitcast i16* %11449 to <16 x i16>*
  %11451 = load <16 x i16>, <16 x i16>* %11450, align 2, !tbaa !396
  %11452 = shufflevector <16 x i16> %11448, <16 x i16> %11451, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11453 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11452, <32 x i16> %11445, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11454 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11438, <32 x i16> %11453, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11455 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11454, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11456 = shufflevector <32 x i16> %11455, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11457 = add nsw i32 %a365, 1
  %11458 = and i32 %11457, 3
  %11459 = zext i32 %11458 to i64
  %11460 = mul nsw i64 %294, %11459
  %11461 = add nsw i64 %296, %11460
  %11462 = getelementptr inbounds i16, i16* %blur_x841, i64 %11461
  %11463 = getelementptr inbounds i16, i16* %11462, i64 -32
  %11464 = bitcast i16* %11463 to <16 x i16>*
  store <16 x i16> %11456, <16 x i16>* %11464, align 2, !tbaa !399
  %11465 = shufflevector <32 x i16> %11455, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11466 = getelementptr inbounds i16, i16* %11462, i64 -16
  %11467 = bitcast i16* %11466 to <16 x i16>*
  store <16 x i16> %11465, <16 x i16>* %11467, align 2, !tbaa !399
  br label %after_bb871

"for blur_y.s0.x.x.rebased879":                   ; preds = %"for blur_y.s0.x.x.rebased879.preheader", %after_bb882
  %indvars.iv3240 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased879.preheader" ], [ %indvars.iv.next3241, %after_bb882 ]
  %11468 = add nsw i64 %indvars.iv3240, %298
  %11469 = icmp slt i64 %11468, 1
  %11470 = trunc i64 %11468 to i32
  %11471 = shl nsw i32 %11470, 5
  %11472 = icmp sgt i32 %194, %11471
  %11473 = or i1 %11469, %11472
  br i1 %11473, label %"produce blur_x885", label %after_bb882

"end for blur_y.s0.x.x.rebased880":               ; preds = %after_bb882, %after_bb871
  br i1 %299, label %"for blur_y.s0.x.x.rebased890.preheader", label %"end for blur_y.s0.x.x.rebased891", !prof !386

"for blur_y.s0.x.x.rebased890.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased880"
  %11474 = sext i32 %t1644876 to i64
  br label %"for blur_y.s0.x.x.rebased890"

after_bb882:                                      ; preds = %"for blur_y.s0.x.x.rebased879", %"produce blur_x885"
  %indvars.iv.next3241 = add nuw nsw i64 %indvars.iv3240, 1
  %11475 = icmp eq i64 %indvars.iv.next3241, %zext3242
  br i1 %11475, label %"end for blur_y.s0.x.x.rebased880", label %"for blur_y.s0.x.x.rebased879"

"produce blur_x885":                              ; preds = %"for blur_y.s0.x.x.rebased879"
  %t662886 = add nsw i32 %314, %11471
  %11476 = sext i32 %t662886 to i64
  %11477 = getelementptr inbounds i16, i16* %read_input784, i64 %11476
  %11478 = getelementptr inbounds i16, i16* %11477, i64 1
  %11479 = bitcast i16* %11478 to <16 x i16>*
  %11480 = load <16 x i16>, <16 x i16>* %11479, align 2, !tbaa !396
  %11481 = getelementptr inbounds i16, i16* %11477, i64 17
  %11482 = bitcast i16* %11481 to <16 x i16>*
  %11483 = load <16 x i16>, <16 x i16>* %11482, align 2, !tbaa !396
  %11484 = shufflevector <16 x i16> %11480, <16 x i16> %11483, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11485 = getelementptr inbounds i16, i16* %11477, i64 2
  %11486 = bitcast i16* %11485 to <16 x i16>*
  %11487 = load <16 x i16>, <16 x i16>* %11486, align 2, !tbaa !396
  %11488 = getelementptr inbounds i16, i16* %11477, i64 18
  %11489 = bitcast i16* %11488 to <16 x i16>*
  %11490 = load <16 x i16>, <16 x i16>* %11489, align 2, !tbaa !396
  %11491 = shufflevector <16 x i16> %11487, <16 x i16> %11490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11492 = bitcast i16* %11477 to <16 x i16>*
  %11493 = load <16 x i16>, <16 x i16>* %11492, align 2, !tbaa !396
  %11494 = getelementptr inbounds i16, i16* %11477, i64 16
  %11495 = bitcast i16* %11494 to <16 x i16>*
  %11496 = load <16 x i16>, <16 x i16>* %11495, align 2, !tbaa !396
  %11497 = shufflevector <16 x i16> %11493, <16 x i16> %11496, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11498 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11497, <32 x i16> %11491, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11499 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11484, <32 x i16> %11498, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11500 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11499, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11501 = shufflevector <32 x i16> %11500, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11502 = shl nsw i64 %11468, 5
  %11503 = add nsw i64 %11502, %11430
  %11504 = getelementptr inbounds i16, i16* %blur_x841, i64 %11503
  %11505 = bitcast i16* %11504 to <16 x i16>*
  store <16 x i16> %11501, <16 x i16>* %11505, align 2, !tbaa !399
  %11506 = shufflevector <32 x i16> %11500, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11507 = getelementptr inbounds i16, i16* %11504, i64 16
  %11508 = bitcast i16* %11507 to <16 x i16>*
  store <16 x i16> %11506, <16 x i16>* %11508, align 2, !tbaa !399
  br label %after_bb882

"for blur_y.s0.x.x.rebased890":                   ; preds = %"for blur_y.s0.x.x.rebased890.preheader", %after_bb893
  %blur_y.s0.x.x.rebased892 = phi i32 [ %11514, %after_bb893 ], [ 0, %"for blur_y.s0.x.x.rebased890.preheader" ]
  %11509 = add nsw i32 %blur_y.s0.x.x.rebased892, %t1582776
  %11510 = icmp slt i32 %11509, 1
  %11511 = shl nsw i32 %11509, 5
  %11512 = icmp sgt i32 %194, %11511
  %11513 = or i1 %11510, %11512
  br i1 %11513, label %then_bb894, label %after_bb893

"end for blur_y.s0.x.x.rebased891":               ; preds = %after_bb893, %"end for blur_y.s0.x.x.rebased880"
  br i1 %225, label %"produce blur_x904", label %"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge"

"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased891"
  %.pre3425 = add nsw i32 %a365, 2
  %.pre3427 = and i32 %.pre3425, 3
  br label %after_bb901

after_bb893:                                      ; preds = %"for blur_y.s0.x.x.rebased890", %then_bb894
  %11514 = add nuw nsw i32 %blur_y.s0.x.x.rebased892, 1
  %.not2562 = icmp eq i32 %11514, %t1639860
  br i1 %.not2562, label %"end for blur_y.s0.x.x.rebased891", label %"for blur_y.s0.x.x.rebased890"

then_bb894:                                       ; preds = %"for blur_y.s0.x.x.rebased890"
  %11515 = icmp sgt i32 %t1603, %11511
  %b772 = select i1 %11515, i32 %11511, i32 %t1603
  %11516 = icmp slt i32 %b772, %194
  %blur_x.s0.x.v1.base.s899 = select i1 %11516, i32 %b772, i32 %194
  %t664900 = add nsw i32 %314, %blur_x.s0.x.v1.base.s899
  %11517 = sext i32 %t664900 to i64
  %11518 = getelementptr inbounds i16, i16* %read_input784, i64 %11517
  %11519 = getelementptr inbounds i16, i16* %11518, i64 1
  %11520 = bitcast i16* %11519 to <16 x i16>*
  %11521 = load <16 x i16>, <16 x i16>* %11520, align 2, !tbaa !396
  %11522 = getelementptr inbounds i16, i16* %11518, i64 17
  %11523 = bitcast i16* %11522 to <16 x i16>*
  %11524 = load <16 x i16>, <16 x i16>* %11523, align 2, !tbaa !396
  %11525 = shufflevector <16 x i16> %11521, <16 x i16> %11524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11526 = getelementptr inbounds i16, i16* %11518, i64 2
  %11527 = bitcast i16* %11526 to <16 x i16>*
  %11528 = load <16 x i16>, <16 x i16>* %11527, align 2, !tbaa !396
  %11529 = getelementptr inbounds i16, i16* %11518, i64 18
  %11530 = bitcast i16* %11529 to <16 x i16>*
  %11531 = load <16 x i16>, <16 x i16>* %11530, align 2, !tbaa !396
  %11532 = shufflevector <16 x i16> %11528, <16 x i16> %11531, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11533 = bitcast i16* %11518 to <16 x i16>*
  %11534 = load <16 x i16>, <16 x i16>* %11533, align 2, !tbaa !396
  %11535 = getelementptr inbounds i16, i16* %11518, i64 16
  %11536 = bitcast i16* %11535 to <16 x i16>*
  %11537 = load <16 x i16>, <16 x i16>* %11536, align 2, !tbaa !396
  %11538 = shufflevector <16 x i16> %11534, <16 x i16> %11537, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11539 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11538, <32 x i16> %11532, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11540 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11525, <32 x i16> %11539, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11541 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11540, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11542 = shufflevector <32 x i16> %11541, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11543 = sext i32 %blur_x.s0.x.v1.base.s899 to i64
  %11544 = add nsw i64 %11543, %11474
  %11545 = getelementptr inbounds i16, i16* %blur_x841, i64 %11544
  %11546 = bitcast i16* %11545 to <16 x i16>*
  store <16 x i16> %11542, <16 x i16>* %11546, align 2, !tbaa !399
  %11547 = shufflevector <32 x i16> %11541, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11548 = getelementptr inbounds i16, i16* %11545, i64 16
  %11549 = bitcast i16* %11548 to <16 x i16>*
  store <16 x i16> %11547, <16 x i16>* %11549, align 2, !tbaa !399
  br label %after_bb893

after_bb901:                                      ; preds = %"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge", %"produce blur_x904"
  %.pre-phi3428 = phi i32 [ %.pre3427, %"end for blur_y.s0.x.x.rebased891.after_bb901_crit_edge" ], [ %11591, %"produce blur_x904" ]
  %11550 = mul nsw i32 %.pre-phi3428, %a537
  %t1650912 = sub nsw i32 %11550, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased916.preheader", label %"end for blur_y.s0.x.x.rebased917", !prof !386

"for blur_y.s0.x.x.rebased916.preheader":         ; preds = %after_bb901
  %11551 = sext i32 %t1650912 to i64
  %11552 = zext i32 %.pre-phi3424 to i64
  %11553 = mul nsw i64 %11552, %322
  %11554 = sub nsw i64 %11553, %293
  %11555 = zext i32 %.pre-phi3428 to i64
  %11556 = mul nsw i64 %11555, %322
  %11557 = sub nsw i64 %11556, %293
  %11558 = zext i32 %.pre-phi3420 to i64
  %11559 = mul nsw i64 %11558, %322
  %11560 = sub nsw i64 %11559, %293
  %11561 = sext i32 %a365 to i64
  %11562 = mul nsw i64 %11561, %319
  %11563 = add nsw i64 %11562, %323
  br label %"for blur_y.s0.x.x.rebased916"

"produce blur_x904":                              ; preds = %"end for blur_y.s0.x.x.rebased891"
  %11564 = getelementptr inbounds i16, i16* %read_input784, i64 %317
  %11565 = getelementptr inbounds i16, i16* %11564, i64 -31
  %11566 = bitcast i16* %11565 to <16 x i16>*
  %11567 = load <16 x i16>, <16 x i16>* %11566, align 2, !tbaa !396
  %11568 = getelementptr inbounds i16, i16* %11564, i64 -15
  %11569 = bitcast i16* %11568 to <16 x i16>*
  %11570 = load <16 x i16>, <16 x i16>* %11569, align 2, !tbaa !396
  %11571 = shufflevector <16 x i16> %11567, <16 x i16> %11570, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11572 = getelementptr inbounds i16, i16* %11564, i64 -30
  %11573 = bitcast i16* %11572 to <16 x i16>*
  %11574 = load <16 x i16>, <16 x i16>* %11573, align 2, !tbaa !396
  %11575 = getelementptr inbounds i16, i16* %11564, i64 -14
  %11576 = bitcast i16* %11575 to <16 x i16>*
  %11577 = load <16 x i16>, <16 x i16>* %11576, align 2, !tbaa !396
  %11578 = shufflevector <16 x i16> %11574, <16 x i16> %11577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11579 = getelementptr inbounds i16, i16* %11564, i64 -32
  %11580 = bitcast i16* %11579 to <16 x i16>*
  %11581 = load <16 x i16>, <16 x i16>* %11580, align 2, !tbaa !396
  %11582 = getelementptr inbounds i16, i16* %11564, i64 -16
  %11583 = bitcast i16* %11582 to <16 x i16>*
  %11584 = load <16 x i16>, <16 x i16>* %11583, align 2, !tbaa !396
  %11585 = shufflevector <16 x i16> %11581, <16 x i16> %11584, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11586 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11585, <32 x i16> %11578, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11587 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11571, <32 x i16> %11586, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11588 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11587, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11589 = shufflevector <32 x i16> %11588, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11590 = add nsw i32 %a365, 2
  %11591 = and i32 %11590, 3
  %11592 = zext i32 %11591 to i64
  %11593 = mul nsw i64 %294, %11592
  %11594 = add nsw i64 %296, %11593
  %11595 = getelementptr inbounds i16, i16* %blur_x841, i64 %11594
  %11596 = getelementptr inbounds i16, i16* %11595, i64 -32
  %11597 = bitcast i16* %11596 to <16 x i16>*
  store <16 x i16> %11589, <16 x i16>* %11597, align 2, !tbaa !399
  %11598 = shufflevector <32 x i16> %11588, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11599 = getelementptr inbounds i16, i16* %11595, i64 -16
  %11600 = bitcast i16* %11599 to <16 x i16>*
  store <16 x i16> %11598, <16 x i16>* %11600, align 2, !tbaa !399
  %11601 = zext i32 %.pre-phi3424 to i64
  %11602 = mul nsw i64 %11601, %318
  %11603 = add nsw i64 %11602, %291
  %11604 = getelementptr inbounds i16, i16* %blur_x841, i64 %11603
  %11605 = getelementptr inbounds i16, i16* %11604, i64 -32
  %11606 = bitcast i16* %11605 to <16 x i16>*
  %11607 = load <16 x i16>, <16 x i16>* %11606, align 2, !tbaa !399
  %11608 = getelementptr inbounds i16, i16* %11604, i64 -16
  %11609 = bitcast i16* %11608 to <16 x i16>*
  %11610 = load <16 x i16>, <16 x i16>* %11609, align 2, !tbaa !399
  %11611 = shufflevector <16 x i16> %11607, <16 x i16> %11610, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11612 = mul nsw i64 %11592, %318
  %11613 = add nsw i64 %11612, %291
  %11614 = getelementptr inbounds i16, i16* %blur_x841, i64 %11613
  %11615 = getelementptr inbounds i16, i16* %11614, i64 -32
  %11616 = bitcast i16* %11615 to <16 x i16>*
  %11617 = load <16 x i16>, <16 x i16>* %11616, align 2, !tbaa !399
  %11618 = getelementptr inbounds i16, i16* %11614, i64 -16
  %11619 = bitcast i16* %11618 to <16 x i16>*
  %11620 = load <16 x i16>, <16 x i16>* %11619, align 2, !tbaa !399
  %11621 = shufflevector <16 x i16> %11617, <16 x i16> %11620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11622 = zext i32 %.pre-phi3420 to i64
  %11623 = mul nsw i64 %11622, %318
  %11624 = add nsw i64 %11623, %291
  %11625 = getelementptr inbounds i16, i16* %blur_x841, i64 %11624
  %11626 = getelementptr inbounds i16, i16* %11625, i64 -32
  %11627 = bitcast i16* %11626 to <16 x i16>*
  %11628 = load <16 x i16>, <16 x i16>* %11627, align 2, !tbaa !399
  %11629 = getelementptr inbounds i16, i16* %11625, i64 -16
  %11630 = bitcast i16* %11629 to <16 x i16>*
  %11631 = load <16 x i16>, <16 x i16>* %11630, align 2, !tbaa !399
  %11632 = shufflevector <16 x i16> %11628, <16 x i16> %11631, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11633 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11632, <32 x i16> %11621, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11634 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11611, <32 x i16> %11633, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11635 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11634, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11636 = shufflevector <32 x i16> %11635, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11637 = sext i32 %a365 to i64
  %11638 = mul nsw i64 %11637, %319
  %11639 = add nsw i64 %321, %11638
  %11640 = getelementptr inbounds i16, i16* %258, i64 %11639
  %11641 = getelementptr inbounds i16, i16* %11640, i64 -32
  %11642 = bitcast i16* %11641 to <16 x i16>*
  store <16 x i16> %11636, <16 x i16>* %11642, align 2, !tbaa !401
  %11643 = shufflevector <32 x i16> %11635, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11644 = getelementptr inbounds i16, i16* %11640, i64 -16
  %11645 = bitcast i16* %11644 to <16 x i16>*
  store <16 x i16> %11643, <16 x i16>* %11645, align 2, !tbaa !401
  br label %after_bb901

"for blur_y.s0.x.x.rebased916":                   ; preds = %"for blur_y.s0.x.x.rebased916.preheader", %"consume blur_x924"
  %indvars.iv3243 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased916.preheader" ], [ %indvars.iv.next3244, %"consume blur_x924" ]
  %11646 = add nsw i64 %indvars.iv3243, %298
  %11647 = icmp slt i64 %11646, 1
  %11648 = trunc i64 %11646 to i32
  %11649 = shl nsw i32 %11648, 5
  %11650 = icmp sgt i32 %194, %11649
  %11651 = or i1 %11647, %11650
  br i1 %11651, label %"produce blur_x922", label %"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge"

"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased916"
  %.pre3429 = shl nsw i64 %11646, 5
  br label %"consume blur_x924"

"end for blur_y.s0.x.x.rebased917":               ; preds = %"consume blur_x924", %after_bb901
  br i1 %299, label %"for blur_y.s0.x.x.rebased932.preheader", label %"end for blur_y.s0.x.x.rebased933", !prof !386

"for blur_y.s0.x.x.rebased932.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased917"
  %11652 = sext i32 %t1650912 to i64
  %11653 = zext i32 %.pre-phi3424 to i64
  %11654 = mul nsw i64 %11653, %322
  %11655 = sub nsw i64 %11654, %293
  %11656 = zext i32 %.pre-phi3428 to i64
  %11657 = mul nsw i64 %11656, %322
  %11658 = sub nsw i64 %11657, %293
  %11659 = zext i32 %.pre-phi3420 to i64
  %11660 = mul nsw i64 %11659, %322
  %11661 = sub nsw i64 %11660, %293
  %11662 = sext i32 %a365 to i64
  %11663 = mul nsw i64 %11662, %319
  %11664 = add nsw i64 %11663, %323
  br label %"for blur_y.s0.x.x.rebased932"

"produce blur_x922":                              ; preds = %"for blur_y.s0.x.x.rebased916"
  %t672923 = add nsw i32 %11649, %313
  %11665 = sext i32 %t672923 to i64
  %11666 = getelementptr inbounds i16, i16* %read_input784, i64 %11665
  %11667 = getelementptr inbounds i16, i16* %11666, i64 1
  %11668 = bitcast i16* %11667 to <16 x i16>*
  %11669 = load <16 x i16>, <16 x i16>* %11668, align 2, !tbaa !396
  %11670 = getelementptr inbounds i16, i16* %11666, i64 17
  %11671 = bitcast i16* %11670 to <16 x i16>*
  %11672 = load <16 x i16>, <16 x i16>* %11671, align 2, !tbaa !396
  %11673 = shufflevector <16 x i16> %11669, <16 x i16> %11672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11674 = getelementptr inbounds i16, i16* %11666, i64 2
  %11675 = bitcast i16* %11674 to <16 x i16>*
  %11676 = load <16 x i16>, <16 x i16>* %11675, align 2, !tbaa !396
  %11677 = getelementptr inbounds i16, i16* %11666, i64 18
  %11678 = bitcast i16* %11677 to <16 x i16>*
  %11679 = load <16 x i16>, <16 x i16>* %11678, align 2, !tbaa !396
  %11680 = shufflevector <16 x i16> %11676, <16 x i16> %11679, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11681 = bitcast i16* %11666 to <16 x i16>*
  %11682 = load <16 x i16>, <16 x i16>* %11681, align 2, !tbaa !396
  %11683 = getelementptr inbounds i16, i16* %11666, i64 16
  %11684 = bitcast i16* %11683 to <16 x i16>*
  %11685 = load <16 x i16>, <16 x i16>* %11684, align 2, !tbaa !396
  %11686 = shufflevector <16 x i16> %11682, <16 x i16> %11685, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11687 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11686, <32 x i16> %11680, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11688 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11673, <32 x i16> %11687, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11689 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11688, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11690 = shufflevector <32 x i16> %11689, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11691 = shl nsw i64 %11646, 5
  %11692 = add nsw i64 %11691, %11551
  %11693 = getelementptr inbounds i16, i16* %blur_x841, i64 %11692
  %11694 = bitcast i16* %11693 to <16 x i16>*
  store <16 x i16> %11690, <16 x i16>* %11694, align 2, !tbaa !399
  %11695 = shufflevector <32 x i16> %11689, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11696 = getelementptr inbounds i16, i16* %11693, i64 16
  %11697 = bitcast i16* %11696 to <16 x i16>*
  store <16 x i16> %11695, <16 x i16>* %11697, align 2, !tbaa !399
  br label %"consume blur_x924"

"consume blur_x924":                              ; preds = %"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge", %"produce blur_x922"
  %.pre-phi3430 = phi i64 [ %.pre3429, %"for blur_y.s0.x.x.rebased916.consume blur_x924_crit_edge" ], [ %11691, %"produce blur_x922" ]
  %11698 = add nsw i64 %11554, %.pre-phi3430
  %11699 = getelementptr inbounds i16, i16* %blur_x841, i64 %11698
  %11700 = bitcast i16* %11699 to <16 x i16>*
  %11701 = load <16 x i16>, <16 x i16>* %11700, align 2, !tbaa !399
  %11702 = getelementptr inbounds i16, i16* %11699, i64 16
  %11703 = bitcast i16* %11702 to <16 x i16>*
  %11704 = load <16 x i16>, <16 x i16>* %11703, align 2, !tbaa !399
  %11705 = shufflevector <16 x i16> %11701, <16 x i16> %11704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11706 = add nsw i64 %11557, %.pre-phi3430
  %11707 = getelementptr inbounds i16, i16* %blur_x841, i64 %11706
  %11708 = bitcast i16* %11707 to <16 x i16>*
  %11709 = load <16 x i16>, <16 x i16>* %11708, align 2, !tbaa !399
  %11710 = getelementptr inbounds i16, i16* %11707, i64 16
  %11711 = bitcast i16* %11710 to <16 x i16>*
  %11712 = load <16 x i16>, <16 x i16>* %11711, align 2, !tbaa !399
  %11713 = shufflevector <16 x i16> %11709, <16 x i16> %11712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11714 = add nsw i64 %11560, %.pre-phi3430
  %11715 = getelementptr inbounds i16, i16* %blur_x841, i64 %11714
  %11716 = bitcast i16* %11715 to <16 x i16>*
  %11717 = load <16 x i16>, <16 x i16>* %11716, align 2, !tbaa !399
  %11718 = getelementptr inbounds i16, i16* %11715, i64 16
  %11719 = bitcast i16* %11718 to <16 x i16>*
  %11720 = load <16 x i16>, <16 x i16>* %11719, align 2, !tbaa !399
  %11721 = shufflevector <16 x i16> %11717, <16 x i16> %11720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11722 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11721, <32 x i16> %11713, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11723 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11705, <32 x i16> %11722, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11724 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11723, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11725 = shufflevector <32 x i16> %11724, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11726 = add nsw i64 %11563, %.pre-phi3430
  %11727 = getelementptr inbounds i16, i16* %258, i64 %11726
  %11728 = bitcast i16* %11727 to <16 x i16>*
  store <16 x i16> %11725, <16 x i16>* %11728, align 2, !tbaa !401
  %11729 = shufflevector <32 x i16> %11724, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11730 = getelementptr inbounds i16, i16* %11727, i64 16
  %11731 = bitcast i16* %11730 to <16 x i16>*
  store <16 x i16> %11729, <16 x i16>* %11731, align 2, !tbaa !401
  %indvars.iv.next3244 = add nuw nsw i64 %indvars.iv3243, 1
  %11732 = icmp eq i64 %indvars.iv.next3244, %zext3245
  br i1 %11732, label %"end for blur_y.s0.x.x.rebased917", label %"for blur_y.s0.x.x.rebased916"

"for blur_y.s0.x.x.rebased932":                   ; preds = %"for blur_y.s0.x.x.rebased932.preheader", %"consume blur_x943"
  %blur_y.s0.x.x.rebased934 = phi i32 [ %11807, %"consume blur_x943" ], [ 0, %"for blur_y.s0.x.x.rebased932.preheader" ]
  %11733 = add nsw i32 %blur_y.s0.x.x.rebased934, %t1582776
  %a935 = shl nsw i32 %11733, 5
  %11734 = icmp sgt i32 %t1603, %a935
  %blur_y.s0.x.v0.base.s935 = select i1 %11734, i32 %a935, i32 %t1603
  %11735 = icmp slt i32 %11733, 1
  %11736 = icmp sgt i32 %194, %a935
  %11737 = or i1 %11735, %11736
  br i1 %11737, label %"produce blur_x940", label %"consume blur_x943"

"end for blur_y.s0.x.x.rebased933":               ; preds = %"consume blur_x943", %"end for blur_y.s0.x.x.rebased917"
  br i1 %225, label %"produce blur_x947", label %"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge"

"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased933"
  %.pre3431 = add nsw i32 %a365, 3
  %.pre3433 = and i32 %.pre3431, 3
  br label %after_bb944

"produce blur_x940":                              ; preds = %"for blur_y.s0.x.x.rebased932"
  %11738 = icmp slt i32 %blur_y.s0.x.v0.base.s935, %194
  %blur_x.s0.x.v1.base.s941 = select i1 %11738, i32 %blur_y.s0.x.v0.base.s935, i32 %194
  %t677942 = add nsw i32 %blur_x.s0.x.v1.base.s941, %313
  %11739 = sext i32 %t677942 to i64
  %11740 = getelementptr inbounds i16, i16* %read_input784, i64 %11739
  %11741 = getelementptr inbounds i16, i16* %11740, i64 1
  %11742 = bitcast i16* %11741 to <16 x i16>*
  %11743 = load <16 x i16>, <16 x i16>* %11742, align 2, !tbaa !396
  %11744 = getelementptr inbounds i16, i16* %11740, i64 17
  %11745 = bitcast i16* %11744 to <16 x i16>*
  %11746 = load <16 x i16>, <16 x i16>* %11745, align 2, !tbaa !396
  %11747 = shufflevector <16 x i16> %11743, <16 x i16> %11746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11748 = getelementptr inbounds i16, i16* %11740, i64 2
  %11749 = bitcast i16* %11748 to <16 x i16>*
  %11750 = load <16 x i16>, <16 x i16>* %11749, align 2, !tbaa !396
  %11751 = getelementptr inbounds i16, i16* %11740, i64 18
  %11752 = bitcast i16* %11751 to <16 x i16>*
  %11753 = load <16 x i16>, <16 x i16>* %11752, align 2, !tbaa !396
  %11754 = shufflevector <16 x i16> %11750, <16 x i16> %11753, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11755 = bitcast i16* %11740 to <16 x i16>*
  %11756 = load <16 x i16>, <16 x i16>* %11755, align 2, !tbaa !396
  %11757 = getelementptr inbounds i16, i16* %11740, i64 16
  %11758 = bitcast i16* %11757 to <16 x i16>*
  %11759 = load <16 x i16>, <16 x i16>* %11758, align 2, !tbaa !396
  %11760 = shufflevector <16 x i16> %11756, <16 x i16> %11759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11761 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11760, <32 x i16> %11754, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11762 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11747, <32 x i16> %11761, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11763 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11762, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11764 = shufflevector <32 x i16> %11763, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11765 = sext i32 %blur_x.s0.x.v1.base.s941 to i64
  %11766 = add nsw i64 %11765, %11652
  %11767 = getelementptr inbounds i16, i16* %blur_x841, i64 %11766
  %11768 = bitcast i16* %11767 to <16 x i16>*
  store <16 x i16> %11764, <16 x i16>* %11768, align 2, !tbaa !399
  %11769 = shufflevector <32 x i16> %11763, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11770 = getelementptr inbounds i16, i16* %11767, i64 16
  %11771 = bitcast i16* %11770 to <16 x i16>*
  store <16 x i16> %11769, <16 x i16>* %11771, align 2, !tbaa !399
  br label %"consume blur_x943"

"consume blur_x943":                              ; preds = %"for blur_y.s0.x.x.rebased932", %"produce blur_x940"
  %11772 = sext i32 %blur_y.s0.x.v0.base.s935 to i64
  %11773 = add nsw i64 %11655, %11772
  %11774 = getelementptr inbounds i16, i16* %blur_x841, i64 %11773
  %11775 = bitcast i16* %11774 to <16 x i16>*
  %11776 = load <16 x i16>, <16 x i16>* %11775, align 2, !tbaa !399
  %11777 = getelementptr inbounds i16, i16* %11774, i64 16
  %11778 = bitcast i16* %11777 to <16 x i16>*
  %11779 = load <16 x i16>, <16 x i16>* %11778, align 2, !tbaa !399
  %11780 = shufflevector <16 x i16> %11776, <16 x i16> %11779, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11781 = add nsw i64 %11658, %11772
  %11782 = getelementptr inbounds i16, i16* %blur_x841, i64 %11781
  %11783 = bitcast i16* %11782 to <16 x i16>*
  %11784 = load <16 x i16>, <16 x i16>* %11783, align 2, !tbaa !399
  %11785 = getelementptr inbounds i16, i16* %11782, i64 16
  %11786 = bitcast i16* %11785 to <16 x i16>*
  %11787 = load <16 x i16>, <16 x i16>* %11786, align 2, !tbaa !399
  %11788 = shufflevector <16 x i16> %11784, <16 x i16> %11787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11789 = add nsw i64 %11661, %11772
  %11790 = getelementptr inbounds i16, i16* %blur_x841, i64 %11789
  %11791 = bitcast i16* %11790 to <16 x i16>*
  %11792 = load <16 x i16>, <16 x i16>* %11791, align 2, !tbaa !399
  %11793 = getelementptr inbounds i16, i16* %11790, i64 16
  %11794 = bitcast i16* %11793 to <16 x i16>*
  %11795 = load <16 x i16>, <16 x i16>* %11794, align 2, !tbaa !399
  %11796 = shufflevector <16 x i16> %11792, <16 x i16> %11795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11797 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11796, <32 x i16> %11788, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11798 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11780, <32 x i16> %11797, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11799 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11798, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11800 = shufflevector <32 x i16> %11799, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11801 = add nsw i64 %11664, %11772
  %11802 = getelementptr inbounds i16, i16* %258, i64 %11801
  %11803 = bitcast i16* %11802 to <16 x i16>*
  store <16 x i16> %11800, <16 x i16>* %11803, align 2, !tbaa !401
  %11804 = shufflevector <32 x i16> %11799, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11805 = getelementptr inbounds i16, i16* %11802, i64 16
  %11806 = bitcast i16* %11805 to <16 x i16>*
  store <16 x i16> %11804, <16 x i16>* %11806, align 2, !tbaa !401
  %11807 = add nuw nsw i32 %blur_y.s0.x.x.rebased934, 1
  %.not2558 = icmp eq i32 %11807, %t1639860
  br i1 %.not2558, label %"end for blur_y.s0.x.x.rebased933", label %"for blur_y.s0.x.x.rebased932"

after_bb944:                                      ; preds = %"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge", %"produce blur_x947"
  %.pre-phi3434 = phi i32 [ %.pre3433, %"end for blur_y.s0.x.x.rebased933.after_bb944_crit_edge" ], [ %11850, %"produce blur_x947" ]
  %11808 = mul nsw i32 %.pre-phi3434, %a537
  %t1666955 = sub nsw i32 %11808, %t1601773
  br i1 %297, label %"for blur_y.s0.x.x.rebased959.preheader", label %"end for blur_y.s0.x.x.rebased960", !prof !386

"for blur_y.s0.x.x.rebased959.preheader":         ; preds = %after_bb944
  %11809 = sext i32 %t1666955 to i64
  %11810 = zext i32 %.pre-phi3428 to i64
  %11811 = mul nsw i64 %11810, %322
  %11812 = sub nsw i64 %11811, %293
  %11813 = zext i32 %.pre-phi3434 to i64
  %11814 = mul nsw i64 %11813, %322
  %11815 = sub nsw i64 %11814, %293
  %11816 = zext i32 %.pre-phi3424 to i64
  %11817 = mul nsw i64 %11816, %322
  %11818 = sub nsw i64 %11817, %293
  %11819 = sext i32 %a365 to i64
  %11820 = add nsw i64 %11819, 1
  %11821 = mul nsw i64 %11820, %319
  %11822 = add nsw i64 %11821, %323
  br label %"for blur_y.s0.x.x.rebased959"

"produce blur_x947":                              ; preds = %"end for blur_y.s0.x.x.rebased933"
  %11823 = getelementptr inbounds i16, i16* %read_input784, i64 %327
  %11824 = getelementptr inbounds i16, i16* %11823, i64 -31
  %11825 = bitcast i16* %11824 to <16 x i16>*
  %11826 = load <16 x i16>, <16 x i16>* %11825, align 2, !tbaa !396
  %11827 = getelementptr inbounds i16, i16* %11823, i64 -15
  %11828 = bitcast i16* %11827 to <16 x i16>*
  %11829 = load <16 x i16>, <16 x i16>* %11828, align 2, !tbaa !396
  %11830 = shufflevector <16 x i16> %11826, <16 x i16> %11829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11831 = getelementptr inbounds i16, i16* %11823, i64 -30
  %11832 = bitcast i16* %11831 to <16 x i16>*
  %11833 = load <16 x i16>, <16 x i16>* %11832, align 2, !tbaa !396
  %11834 = getelementptr inbounds i16, i16* %11823, i64 -14
  %11835 = bitcast i16* %11834 to <16 x i16>*
  %11836 = load <16 x i16>, <16 x i16>* %11835, align 2, !tbaa !396
  %11837 = shufflevector <16 x i16> %11833, <16 x i16> %11836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11838 = getelementptr inbounds i16, i16* %11823, i64 -32
  %11839 = bitcast i16* %11838 to <16 x i16>*
  %11840 = load <16 x i16>, <16 x i16>* %11839, align 2, !tbaa !396
  %11841 = getelementptr inbounds i16, i16* %11823, i64 -16
  %11842 = bitcast i16* %11841 to <16 x i16>*
  %11843 = load <16 x i16>, <16 x i16>* %11842, align 2, !tbaa !396
  %11844 = shufflevector <16 x i16> %11840, <16 x i16> %11843, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11845 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11844, <32 x i16> %11837, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11846 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11830, <32 x i16> %11845, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11847 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11846, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11848 = shufflevector <32 x i16> %11847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11849 = add nsw i32 %a365, 3
  %11850 = and i32 %11849, 3
  %11851 = zext i32 %11850 to i64
  %11852 = mul nsw i64 %294, %11851
  %11853 = add nsw i64 %296, %11852
  %11854 = getelementptr inbounds i16, i16* %blur_x841, i64 %11853
  %11855 = getelementptr inbounds i16, i16* %11854, i64 -32
  %11856 = bitcast i16* %11855 to <16 x i16>*
  store <16 x i16> %11848, <16 x i16>* %11856, align 2, !tbaa !399
  %11857 = shufflevector <32 x i16> %11847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11858 = getelementptr inbounds i16, i16* %11854, i64 -16
  %11859 = bitcast i16* %11858 to <16 x i16>*
  store <16 x i16> %11857, <16 x i16>* %11859, align 2, !tbaa !399
  %11860 = zext i32 %.pre-phi3428 to i64
  %11861 = mul nsw i64 %11860, %318
  %11862 = add nsw i64 %11861, %291
  %11863 = getelementptr inbounds i16, i16* %blur_x841, i64 %11862
  %11864 = getelementptr inbounds i16, i16* %11863, i64 -32
  %11865 = bitcast i16* %11864 to <16 x i16>*
  %11866 = load <16 x i16>, <16 x i16>* %11865, align 2, !tbaa !399
  %11867 = getelementptr inbounds i16, i16* %11863, i64 -16
  %11868 = bitcast i16* %11867 to <16 x i16>*
  %11869 = load <16 x i16>, <16 x i16>* %11868, align 2, !tbaa !399
  %11870 = shufflevector <16 x i16> %11866, <16 x i16> %11869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11871 = mul nsw i64 %11851, %318
  %11872 = add nsw i64 %11871, %291
  %11873 = getelementptr inbounds i16, i16* %blur_x841, i64 %11872
  %11874 = getelementptr inbounds i16, i16* %11873, i64 -32
  %11875 = bitcast i16* %11874 to <16 x i16>*
  %11876 = load <16 x i16>, <16 x i16>* %11875, align 2, !tbaa !399
  %11877 = getelementptr inbounds i16, i16* %11873, i64 -16
  %11878 = bitcast i16* %11877 to <16 x i16>*
  %11879 = load <16 x i16>, <16 x i16>* %11878, align 2, !tbaa !399
  %11880 = shufflevector <16 x i16> %11876, <16 x i16> %11879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11881 = zext i32 %.pre-phi3424 to i64
  %11882 = mul nsw i64 %11881, %318
  %11883 = add nsw i64 %11882, %291
  %11884 = getelementptr inbounds i16, i16* %blur_x841, i64 %11883
  %11885 = getelementptr inbounds i16, i16* %11884, i64 -32
  %11886 = bitcast i16* %11885 to <16 x i16>*
  %11887 = load <16 x i16>, <16 x i16>* %11886, align 2, !tbaa !399
  %11888 = getelementptr inbounds i16, i16* %11884, i64 -16
  %11889 = bitcast i16* %11888 to <16 x i16>*
  %11890 = load <16 x i16>, <16 x i16>* %11889, align 2, !tbaa !399
  %11891 = shufflevector <16 x i16> %11887, <16 x i16> %11890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11892 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11891, <32 x i16> %11880, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11893 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11870, <32 x i16> %11892, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11894 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11893, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11895 = shufflevector <32 x i16> %11894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11896 = sext i32 %a365 to i64
  %11897 = add nsw i64 %11896, 1
  %11898 = mul nsw i64 %11897, %319
  %11899 = add nsw i64 %321, %11898
  %11900 = getelementptr inbounds i16, i16* %258, i64 %11899
  %11901 = getelementptr inbounds i16, i16* %11900, i64 -32
  %11902 = bitcast i16* %11901 to <16 x i16>*
  store <16 x i16> %11895, <16 x i16>* %11902, align 2, !tbaa !401
  %11903 = shufflevector <32 x i16> %11894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11904 = getelementptr inbounds i16, i16* %11900, i64 -16
  %11905 = bitcast i16* %11904 to <16 x i16>*
  store <16 x i16> %11903, <16 x i16>* %11905, align 2, !tbaa !401
  br label %after_bb944

"for blur_y.s0.x.x.rebased959":                   ; preds = %"for blur_y.s0.x.x.rebased959.preheader", %"consume blur_x967"
  %indvars.iv3246 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased959.preheader" ], [ %indvars.iv.next3247, %"consume blur_x967" ]
  %11906 = add nsw i64 %indvars.iv3246, %298
  %11907 = icmp slt i64 %11906, 1
  %11908 = trunc i64 %11906 to i32
  %11909 = shl nsw i32 %11908, 5
  %11910 = icmp sgt i32 %194, %11909
  %11911 = or i1 %11907, %11910
  br i1 %11911, label %"produce blur_x965", label %"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge"

"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased959"
  %.pre3435 = shl nsw i64 %11906, 5
  br label %"consume blur_x967"

"end for blur_y.s0.x.x.rebased960":               ; preds = %"consume blur_x967", %after_bb944
  br i1 %299, label %"for blur_y.s0.x.x.rebased975.preheader", label %"end for blur_y.s0.x.x.rebased976", !prof !386

"for blur_y.s0.x.x.rebased975.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased960"
  %11912 = sext i32 %t1666955 to i64
  %11913 = zext i32 %.pre-phi3428 to i64
  %11914 = mul nsw i64 %11913, %322
  %11915 = sub nsw i64 %11914, %293
  %11916 = zext i32 %.pre-phi3434 to i64
  %11917 = mul nsw i64 %11916, %322
  %11918 = sub nsw i64 %11917, %293
  %11919 = zext i32 %.pre-phi3424 to i64
  %11920 = mul nsw i64 %11919, %322
  %11921 = sub nsw i64 %11920, %293
  %11922 = sext i32 %a365 to i64
  %11923 = add nsw i64 %11922, 1
  %11924 = mul nsw i64 %11923, %319
  %11925 = add nsw i64 %11924, %323
  br label %"for blur_y.s0.x.x.rebased975"

"produce blur_x965":                              ; preds = %"for blur_y.s0.x.x.rebased959"
  %t688966 = add nsw i32 %328, %11909
  %11926 = sext i32 %t688966 to i64
  %11927 = getelementptr inbounds i16, i16* %read_input784, i64 %11926
  %11928 = getelementptr inbounds i16, i16* %11927, i64 1
  %11929 = bitcast i16* %11928 to <16 x i16>*
  %11930 = load <16 x i16>, <16 x i16>* %11929, align 2, !tbaa !396
  %11931 = getelementptr inbounds i16, i16* %11927, i64 17
  %11932 = bitcast i16* %11931 to <16 x i16>*
  %11933 = load <16 x i16>, <16 x i16>* %11932, align 2, !tbaa !396
  %11934 = shufflevector <16 x i16> %11930, <16 x i16> %11933, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11935 = getelementptr inbounds i16, i16* %11927, i64 2
  %11936 = bitcast i16* %11935 to <16 x i16>*
  %11937 = load <16 x i16>, <16 x i16>* %11936, align 2, !tbaa !396
  %11938 = getelementptr inbounds i16, i16* %11927, i64 18
  %11939 = bitcast i16* %11938 to <16 x i16>*
  %11940 = load <16 x i16>, <16 x i16>* %11939, align 2, !tbaa !396
  %11941 = shufflevector <16 x i16> %11937, <16 x i16> %11940, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11942 = bitcast i16* %11927 to <16 x i16>*
  %11943 = load <16 x i16>, <16 x i16>* %11942, align 2, !tbaa !396
  %11944 = getelementptr inbounds i16, i16* %11927, i64 16
  %11945 = bitcast i16* %11944 to <16 x i16>*
  %11946 = load <16 x i16>, <16 x i16>* %11945, align 2, !tbaa !396
  %11947 = shufflevector <16 x i16> %11943, <16 x i16> %11946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11948 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11947, <32 x i16> %11941, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11949 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11934, <32 x i16> %11948, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11950 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11949, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11951 = shufflevector <32 x i16> %11950, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11952 = shl nsw i64 %11906, 5
  %11953 = add nsw i64 %11952, %11809
  %11954 = getelementptr inbounds i16, i16* %blur_x841, i64 %11953
  %11955 = bitcast i16* %11954 to <16 x i16>*
  store <16 x i16> %11951, <16 x i16>* %11955, align 2, !tbaa !399
  %11956 = shufflevector <32 x i16> %11950, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11957 = getelementptr inbounds i16, i16* %11954, i64 16
  %11958 = bitcast i16* %11957 to <16 x i16>*
  store <16 x i16> %11956, <16 x i16>* %11958, align 2, !tbaa !399
  br label %"consume blur_x967"

"consume blur_x967":                              ; preds = %"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge", %"produce blur_x965"
  %.pre-phi3436 = phi i64 [ %.pre3435, %"for blur_y.s0.x.x.rebased959.consume blur_x967_crit_edge" ], [ %11952, %"produce blur_x965" ]
  %11959 = add nsw i64 %11812, %.pre-phi3436
  %11960 = getelementptr inbounds i16, i16* %blur_x841, i64 %11959
  %11961 = bitcast i16* %11960 to <16 x i16>*
  %11962 = load <16 x i16>, <16 x i16>* %11961, align 2, !tbaa !399
  %11963 = getelementptr inbounds i16, i16* %11960, i64 16
  %11964 = bitcast i16* %11963 to <16 x i16>*
  %11965 = load <16 x i16>, <16 x i16>* %11964, align 2, !tbaa !399
  %11966 = shufflevector <16 x i16> %11962, <16 x i16> %11965, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11967 = add nsw i64 %11815, %.pre-phi3436
  %11968 = getelementptr inbounds i16, i16* %blur_x841, i64 %11967
  %11969 = bitcast i16* %11968 to <16 x i16>*
  %11970 = load <16 x i16>, <16 x i16>* %11969, align 2, !tbaa !399
  %11971 = getelementptr inbounds i16, i16* %11968, i64 16
  %11972 = bitcast i16* %11971 to <16 x i16>*
  %11973 = load <16 x i16>, <16 x i16>* %11972, align 2, !tbaa !399
  %11974 = shufflevector <16 x i16> %11970, <16 x i16> %11973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11975 = add nsw i64 %11818, %.pre-phi3436
  %11976 = getelementptr inbounds i16, i16* %blur_x841, i64 %11975
  %11977 = bitcast i16* %11976 to <16 x i16>*
  %11978 = load <16 x i16>, <16 x i16>* %11977, align 2, !tbaa !399
  %11979 = getelementptr inbounds i16, i16* %11976, i64 16
  %11980 = bitcast i16* %11979 to <16 x i16>*
  %11981 = load <16 x i16>, <16 x i16>* %11980, align 2, !tbaa !399
  %11982 = shufflevector <16 x i16> %11978, <16 x i16> %11981, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11983 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11982, <32 x i16> %11974, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11984 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %11966, <32 x i16> %11983, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %11985 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %11984, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %11986 = shufflevector <32 x i16> %11985, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11987 = add nsw i64 %11822, %.pre-phi3436
  %11988 = getelementptr inbounds i16, i16* %258, i64 %11987
  %11989 = bitcast i16* %11988 to <16 x i16>*
  store <16 x i16> %11986, <16 x i16>* %11989, align 2, !tbaa !401
  %11990 = shufflevector <32 x i16> %11985, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11991 = getelementptr inbounds i16, i16* %11988, i64 16
  %11992 = bitcast i16* %11991 to <16 x i16>*
  store <16 x i16> %11990, <16 x i16>* %11992, align 2, !tbaa !401
  %indvars.iv.next3247 = add nuw nsw i64 %indvars.iv3246, 1
  %11993 = icmp eq i64 %indvars.iv.next3247, %zext3248
  br i1 %11993, label %"end for blur_y.s0.x.x.rebased960", label %"for blur_y.s0.x.x.rebased959"

"for blur_y.s0.x.x.rebased975":                   ; preds = %"for blur_y.s0.x.x.rebased975.preheader", %"consume blur_x986"
  %blur_y.s0.x.x.rebased977 = phi i32 [ %12068, %"consume blur_x986" ], [ 0, %"for blur_y.s0.x.x.rebased975.preheader" ]
  %11994 = add nsw i32 %blur_y.s0.x.x.rebased977, %t1582776
  %a1156 = shl nsw i32 %11994, 5
  %11995 = icmp sgt i32 %t1603, %a1156
  %blur_y.s0.x.v0.base.s978 = select i1 %11995, i32 %a1156, i32 %t1603
  %11996 = icmp slt i32 %11994, 1
  %11997 = icmp sgt i32 %194, %a1156
  %11998 = or i1 %11996, %11997
  br i1 %11998, label %"produce blur_x983", label %"consume blur_x986"

"end for blur_y.s0.x.x.rebased976":               ; preds = %"consume blur_x986", %"end for blur_y.s0.x.x.rebased960"
  br i1 %225, label %"produce blur_x990", label %after_bb987

"produce blur_x983":                              ; preds = %"for blur_y.s0.x.x.rebased975"
  %11999 = icmp slt i32 %blur_y.s0.x.v0.base.s978, %194
  %blur_x.s0.x.v1.base.s984 = select i1 %11999, i32 %blur_y.s0.x.v0.base.s978, i32 %194
  %t693985 = add nsw i32 %328, %blur_x.s0.x.v1.base.s984
  %12000 = sext i32 %t693985 to i64
  %12001 = getelementptr inbounds i16, i16* %read_input784, i64 %12000
  %12002 = getelementptr inbounds i16, i16* %12001, i64 1
  %12003 = bitcast i16* %12002 to <16 x i16>*
  %12004 = load <16 x i16>, <16 x i16>* %12003, align 2, !tbaa !396
  %12005 = getelementptr inbounds i16, i16* %12001, i64 17
  %12006 = bitcast i16* %12005 to <16 x i16>*
  %12007 = load <16 x i16>, <16 x i16>* %12006, align 2, !tbaa !396
  %12008 = shufflevector <16 x i16> %12004, <16 x i16> %12007, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12009 = getelementptr inbounds i16, i16* %12001, i64 2
  %12010 = bitcast i16* %12009 to <16 x i16>*
  %12011 = load <16 x i16>, <16 x i16>* %12010, align 2, !tbaa !396
  %12012 = getelementptr inbounds i16, i16* %12001, i64 18
  %12013 = bitcast i16* %12012 to <16 x i16>*
  %12014 = load <16 x i16>, <16 x i16>* %12013, align 2, !tbaa !396
  %12015 = shufflevector <16 x i16> %12011, <16 x i16> %12014, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12016 = bitcast i16* %12001 to <16 x i16>*
  %12017 = load <16 x i16>, <16 x i16>* %12016, align 2, !tbaa !396
  %12018 = getelementptr inbounds i16, i16* %12001, i64 16
  %12019 = bitcast i16* %12018 to <16 x i16>*
  %12020 = load <16 x i16>, <16 x i16>* %12019, align 2, !tbaa !396
  %12021 = shufflevector <16 x i16> %12017, <16 x i16> %12020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12022 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12021, <32 x i16> %12015, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12023 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12008, <32 x i16> %12022, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12024 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12023, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12025 = shufflevector <32 x i16> %12024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12026 = sext i32 %blur_x.s0.x.v1.base.s984 to i64
  %12027 = add nsw i64 %12026, %11912
  %12028 = getelementptr inbounds i16, i16* %blur_x841, i64 %12027
  %12029 = bitcast i16* %12028 to <16 x i16>*
  store <16 x i16> %12025, <16 x i16>* %12029, align 2, !tbaa !399
  %12030 = shufflevector <32 x i16> %12024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12031 = getelementptr inbounds i16, i16* %12028, i64 16
  %12032 = bitcast i16* %12031 to <16 x i16>*
  store <16 x i16> %12030, <16 x i16>* %12032, align 2, !tbaa !399
  br label %"consume blur_x986"

"consume blur_x986":                              ; preds = %"for blur_y.s0.x.x.rebased975", %"produce blur_x983"
  %12033 = sext i32 %blur_y.s0.x.v0.base.s978 to i64
  %12034 = add nsw i64 %11915, %12033
  %12035 = getelementptr inbounds i16, i16* %blur_x841, i64 %12034
  %12036 = bitcast i16* %12035 to <16 x i16>*
  %12037 = load <16 x i16>, <16 x i16>* %12036, align 2, !tbaa !399
  %12038 = getelementptr inbounds i16, i16* %12035, i64 16
  %12039 = bitcast i16* %12038 to <16 x i16>*
  %12040 = load <16 x i16>, <16 x i16>* %12039, align 2, !tbaa !399
  %12041 = shufflevector <16 x i16> %12037, <16 x i16> %12040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12042 = add nsw i64 %11918, %12033
  %12043 = getelementptr inbounds i16, i16* %blur_x841, i64 %12042
  %12044 = bitcast i16* %12043 to <16 x i16>*
  %12045 = load <16 x i16>, <16 x i16>* %12044, align 2, !tbaa !399
  %12046 = getelementptr inbounds i16, i16* %12043, i64 16
  %12047 = bitcast i16* %12046 to <16 x i16>*
  %12048 = load <16 x i16>, <16 x i16>* %12047, align 2, !tbaa !399
  %12049 = shufflevector <16 x i16> %12045, <16 x i16> %12048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12050 = add nsw i64 %11921, %12033
  %12051 = getelementptr inbounds i16, i16* %blur_x841, i64 %12050
  %12052 = bitcast i16* %12051 to <16 x i16>*
  %12053 = load <16 x i16>, <16 x i16>* %12052, align 2, !tbaa !399
  %12054 = getelementptr inbounds i16, i16* %12051, i64 16
  %12055 = bitcast i16* %12054 to <16 x i16>*
  %12056 = load <16 x i16>, <16 x i16>* %12055, align 2, !tbaa !399
  %12057 = shufflevector <16 x i16> %12053, <16 x i16> %12056, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12058 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12057, <32 x i16> %12049, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12059 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12041, <32 x i16> %12058, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12060 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12059, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12061 = shufflevector <32 x i16> %12060, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12062 = add nsw i64 %11925, %12033
  %12063 = getelementptr inbounds i16, i16* %258, i64 %12062
  %12064 = bitcast i16* %12063 to <16 x i16>*
  store <16 x i16> %12061, <16 x i16>* %12064, align 2, !tbaa !401
  %12065 = shufflevector <32 x i16> %12060, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12066 = getelementptr inbounds i16, i16* %12063, i64 16
  %12067 = bitcast i16* %12066 to <16 x i16>*
  store <16 x i16> %12065, <16 x i16>* %12067, align 2, !tbaa !401
  %12068 = add nuw nsw i32 %blur_y.s0.x.x.rebased977, 1
  %.not2554 = icmp eq i32 %12068, %t1639860
  br i1 %.not2554, label %"end for blur_y.s0.x.x.rebased976", label %"for blur_y.s0.x.x.rebased975"

after_bb987:                                      ; preds = %"end for blur_y.s0.x.x.rebased976", %"produce blur_x990"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1002.preheader", label %"end for blur_y.s0.x.x.rebased1003", !prof !386

"for blur_y.s0.x.x.rebased1002.preheader":        ; preds = %after_bb987
  %12069 = sext i32 %t1638848 to i64
  %12070 = zext i32 %.pre-phi3434 to i64
  %12071 = mul nsw i64 %12070, %322
  %12072 = sub nsw i64 %12071, %293
  %12073 = zext i32 %.pre-phi3420 to i64
  %12074 = mul nsw i64 %12073, %322
  %12075 = sub nsw i64 %12074, %293
  %12076 = zext i32 %.pre-phi3428 to i64
  %12077 = mul nsw i64 %12076, %322
  %12078 = sub nsw i64 %12077, %293
  %12079 = sext i32 %a365 to i64
  %12080 = add nsw i64 %12079, 2
  %12081 = mul nsw i64 %12080, %319
  %12082 = add nsw i64 %12081, %323
  br label %"for blur_y.s0.x.x.rebased1002"

"produce blur_x990":                              ; preds = %"end for blur_y.s0.x.x.rebased976"
  %12083 = getelementptr inbounds i16, i16* %read_input784, i64 %332
  %12084 = getelementptr inbounds i16, i16* %12083, i64 -31
  %12085 = bitcast i16* %12084 to <16 x i16>*
  %12086 = load <16 x i16>, <16 x i16>* %12085, align 2, !tbaa !396
  %12087 = getelementptr inbounds i16, i16* %12083, i64 -15
  %12088 = bitcast i16* %12087 to <16 x i16>*
  %12089 = load <16 x i16>, <16 x i16>* %12088, align 2, !tbaa !396
  %12090 = shufflevector <16 x i16> %12086, <16 x i16> %12089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12091 = getelementptr inbounds i16, i16* %12083, i64 -30
  %12092 = bitcast i16* %12091 to <16 x i16>*
  %12093 = load <16 x i16>, <16 x i16>* %12092, align 2, !tbaa !396
  %12094 = getelementptr inbounds i16, i16* %12083, i64 -14
  %12095 = bitcast i16* %12094 to <16 x i16>*
  %12096 = load <16 x i16>, <16 x i16>* %12095, align 2, !tbaa !396
  %12097 = shufflevector <16 x i16> %12093, <16 x i16> %12096, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12098 = getelementptr inbounds i16, i16* %12083, i64 -32
  %12099 = bitcast i16* %12098 to <16 x i16>*
  %12100 = load <16 x i16>, <16 x i16>* %12099, align 2, !tbaa !396
  %12101 = getelementptr inbounds i16, i16* %12083, i64 -16
  %12102 = bitcast i16* %12101 to <16 x i16>*
  %12103 = load <16 x i16>, <16 x i16>* %12102, align 2, !tbaa !396
  %12104 = shufflevector <16 x i16> %12100, <16 x i16> %12103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12105 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12104, <32 x i16> %12097, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12106 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12090, <32 x i16> %12105, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12107 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12106, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12108 = shufflevector <32 x i16> %12107, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12109 = zext i32 %.pre-phi3420 to i64
  %12110 = mul nsw i64 %294, %12109
  %12111 = add nsw i64 %296, %12110
  %12112 = getelementptr inbounds i16, i16* %blur_x841, i64 %12111
  %12113 = getelementptr inbounds i16, i16* %12112, i64 -32
  %12114 = bitcast i16* %12113 to <16 x i16>*
  store <16 x i16> %12108, <16 x i16>* %12114, align 2, !tbaa !399
  %12115 = shufflevector <32 x i16> %12107, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12116 = getelementptr inbounds i16, i16* %12112, i64 -16
  %12117 = bitcast i16* %12116 to <16 x i16>*
  store <16 x i16> %12115, <16 x i16>* %12117, align 2, !tbaa !399
  %12118 = zext i32 %.pre-phi3434 to i64
  %12119 = mul nsw i64 %12118, %318
  %12120 = add nsw i64 %12119, %291
  %12121 = getelementptr inbounds i16, i16* %blur_x841, i64 %12120
  %12122 = getelementptr inbounds i16, i16* %12121, i64 -32
  %12123 = bitcast i16* %12122 to <16 x i16>*
  %12124 = load <16 x i16>, <16 x i16>* %12123, align 2, !tbaa !399
  %12125 = getelementptr inbounds i16, i16* %12121, i64 -16
  %12126 = bitcast i16* %12125 to <16 x i16>*
  %12127 = load <16 x i16>, <16 x i16>* %12126, align 2, !tbaa !399
  %12128 = shufflevector <16 x i16> %12124, <16 x i16> %12127, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12129 = mul nsw i64 %12109, %318
  %12130 = add nsw i64 %12129, %291
  %12131 = getelementptr inbounds i16, i16* %blur_x841, i64 %12130
  %12132 = getelementptr inbounds i16, i16* %12131, i64 -32
  %12133 = bitcast i16* %12132 to <16 x i16>*
  %12134 = load <16 x i16>, <16 x i16>* %12133, align 2, !tbaa !399
  %12135 = getelementptr inbounds i16, i16* %12131, i64 -16
  %12136 = bitcast i16* %12135 to <16 x i16>*
  %12137 = load <16 x i16>, <16 x i16>* %12136, align 2, !tbaa !399
  %12138 = shufflevector <16 x i16> %12134, <16 x i16> %12137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12139 = zext i32 %.pre-phi3428 to i64
  %12140 = mul nsw i64 %12139, %318
  %12141 = add nsw i64 %12140, %291
  %12142 = getelementptr inbounds i16, i16* %blur_x841, i64 %12141
  %12143 = getelementptr inbounds i16, i16* %12142, i64 -32
  %12144 = bitcast i16* %12143 to <16 x i16>*
  %12145 = load <16 x i16>, <16 x i16>* %12144, align 2, !tbaa !399
  %12146 = getelementptr inbounds i16, i16* %12142, i64 -16
  %12147 = bitcast i16* %12146 to <16 x i16>*
  %12148 = load <16 x i16>, <16 x i16>* %12147, align 2, !tbaa !399
  %12149 = shufflevector <16 x i16> %12145, <16 x i16> %12148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12150 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12149, <32 x i16> %12138, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12151 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12128, <32 x i16> %12150, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12152 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12151, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12153 = shufflevector <32 x i16> %12152, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12154 = sext i32 %a365 to i64
  %12155 = add nsw i64 %12154, 2
  %12156 = mul nsw i64 %12155, %319
  %12157 = add nsw i64 %321, %12156
  %12158 = getelementptr inbounds i16, i16* %258, i64 %12157
  %12159 = getelementptr inbounds i16, i16* %12158, i64 -32
  %12160 = bitcast i16* %12159 to <16 x i16>*
  store <16 x i16> %12153, <16 x i16>* %12160, align 2, !tbaa !401
  %12161 = shufflevector <32 x i16> %12152, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12162 = getelementptr inbounds i16, i16* %12158, i64 -16
  %12163 = bitcast i16* %12162 to <16 x i16>*
  store <16 x i16> %12161, <16 x i16>* %12163, align 2, !tbaa !401
  br label %after_bb987

"for blur_y.s0.x.x.rebased1002":                  ; preds = %"for blur_y.s0.x.x.rebased1002.preheader", %"consume blur_x1010"
  %indvars.iv3249 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1002.preheader" ], [ %indvars.iv.next3250, %"consume blur_x1010" ]
  %12164 = add nsw i64 %indvars.iv3249, %298
  %12165 = icmp slt i64 %12164, 1
  %12166 = trunc i64 %12164 to i32
  %12167 = shl nsw i32 %12166, 5
  %12168 = icmp sgt i32 %194, %12167
  %12169 = or i1 %12165, %12168
  br i1 %12169, label %"produce blur_x1008", label %"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge"

"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1002"
  %.pre3437 = shl nsw i64 %12164, 5
  br label %"consume blur_x1010"

"end for blur_y.s0.x.x.rebased1003":              ; preds = %"consume blur_x1010", %after_bb987
  br i1 %299, label %"for blur_y.s0.x.x.rebased1018.preheader", label %"end for blur_y.s0.x.x.rebased1019", !prof !386

"for blur_y.s0.x.x.rebased1018.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1003"
  %12170 = sext i32 %t1638848 to i64
  %12171 = zext i32 %.pre-phi3434 to i64
  %12172 = mul nsw i64 %12171, %322
  %12173 = sub nsw i64 %12172, %293
  %12174 = zext i32 %.pre-phi3420 to i64
  %12175 = mul nsw i64 %12174, %322
  %12176 = sub nsw i64 %12175, %293
  %12177 = zext i32 %.pre-phi3428 to i64
  %12178 = mul nsw i64 %12177, %322
  %12179 = sub nsw i64 %12178, %293
  %12180 = sext i32 %a365 to i64
  %12181 = add nsw i64 %12180, 2
  %12182 = mul nsw i64 %12181, %319
  %12183 = add nsw i64 %12182, %323
  br label %"for blur_y.s0.x.x.rebased1018"

"produce blur_x1008":                             ; preds = %"for blur_y.s0.x.x.rebased1002"
  %t7041009 = add nsw i32 %334, %12167
  %12184 = sext i32 %t7041009 to i64
  %12185 = getelementptr inbounds i16, i16* %read_input784, i64 %12184
  %12186 = getelementptr inbounds i16, i16* %12185, i64 1
  %12187 = bitcast i16* %12186 to <16 x i16>*
  %12188 = load <16 x i16>, <16 x i16>* %12187, align 2, !tbaa !396
  %12189 = getelementptr inbounds i16, i16* %12185, i64 17
  %12190 = bitcast i16* %12189 to <16 x i16>*
  %12191 = load <16 x i16>, <16 x i16>* %12190, align 2, !tbaa !396
  %12192 = shufflevector <16 x i16> %12188, <16 x i16> %12191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12193 = getelementptr inbounds i16, i16* %12185, i64 2
  %12194 = bitcast i16* %12193 to <16 x i16>*
  %12195 = load <16 x i16>, <16 x i16>* %12194, align 2, !tbaa !396
  %12196 = getelementptr inbounds i16, i16* %12185, i64 18
  %12197 = bitcast i16* %12196 to <16 x i16>*
  %12198 = load <16 x i16>, <16 x i16>* %12197, align 2, !tbaa !396
  %12199 = shufflevector <16 x i16> %12195, <16 x i16> %12198, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12200 = bitcast i16* %12185 to <16 x i16>*
  %12201 = load <16 x i16>, <16 x i16>* %12200, align 2, !tbaa !396
  %12202 = getelementptr inbounds i16, i16* %12185, i64 16
  %12203 = bitcast i16* %12202 to <16 x i16>*
  %12204 = load <16 x i16>, <16 x i16>* %12203, align 2, !tbaa !396
  %12205 = shufflevector <16 x i16> %12201, <16 x i16> %12204, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12206 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12205, <32 x i16> %12199, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12207 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12192, <32 x i16> %12206, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12208 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12207, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12209 = shufflevector <32 x i16> %12208, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12210 = shl nsw i64 %12164, 5
  %12211 = add nsw i64 %12210, %12069
  %12212 = getelementptr inbounds i16, i16* %blur_x841, i64 %12211
  %12213 = bitcast i16* %12212 to <16 x i16>*
  store <16 x i16> %12209, <16 x i16>* %12213, align 2, !tbaa !399
  %12214 = shufflevector <32 x i16> %12208, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12215 = getelementptr inbounds i16, i16* %12212, i64 16
  %12216 = bitcast i16* %12215 to <16 x i16>*
  store <16 x i16> %12214, <16 x i16>* %12216, align 2, !tbaa !399
  br label %"consume blur_x1010"

"consume blur_x1010":                             ; preds = %"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge", %"produce blur_x1008"
  %.pre-phi3438 = phi i64 [ %.pre3437, %"for blur_y.s0.x.x.rebased1002.consume blur_x1010_crit_edge" ], [ %12210, %"produce blur_x1008" ]
  %12217 = add nsw i64 %12072, %.pre-phi3438
  %12218 = getelementptr inbounds i16, i16* %blur_x841, i64 %12217
  %12219 = bitcast i16* %12218 to <16 x i16>*
  %12220 = load <16 x i16>, <16 x i16>* %12219, align 2, !tbaa !399
  %12221 = getelementptr inbounds i16, i16* %12218, i64 16
  %12222 = bitcast i16* %12221 to <16 x i16>*
  %12223 = load <16 x i16>, <16 x i16>* %12222, align 2, !tbaa !399
  %12224 = shufflevector <16 x i16> %12220, <16 x i16> %12223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12225 = add nsw i64 %12075, %.pre-phi3438
  %12226 = getelementptr inbounds i16, i16* %blur_x841, i64 %12225
  %12227 = bitcast i16* %12226 to <16 x i16>*
  %12228 = load <16 x i16>, <16 x i16>* %12227, align 2, !tbaa !399
  %12229 = getelementptr inbounds i16, i16* %12226, i64 16
  %12230 = bitcast i16* %12229 to <16 x i16>*
  %12231 = load <16 x i16>, <16 x i16>* %12230, align 2, !tbaa !399
  %12232 = shufflevector <16 x i16> %12228, <16 x i16> %12231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12233 = add nsw i64 %12078, %.pre-phi3438
  %12234 = getelementptr inbounds i16, i16* %blur_x841, i64 %12233
  %12235 = bitcast i16* %12234 to <16 x i16>*
  %12236 = load <16 x i16>, <16 x i16>* %12235, align 2, !tbaa !399
  %12237 = getelementptr inbounds i16, i16* %12234, i64 16
  %12238 = bitcast i16* %12237 to <16 x i16>*
  %12239 = load <16 x i16>, <16 x i16>* %12238, align 2, !tbaa !399
  %12240 = shufflevector <16 x i16> %12236, <16 x i16> %12239, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12241 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12240, <32 x i16> %12232, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12242 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12224, <32 x i16> %12241, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12243 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12242, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12244 = shufflevector <32 x i16> %12243, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12245 = add nsw i64 %12082, %.pre-phi3438
  %12246 = getelementptr inbounds i16, i16* %258, i64 %12245
  %12247 = bitcast i16* %12246 to <16 x i16>*
  store <16 x i16> %12244, <16 x i16>* %12247, align 2, !tbaa !401
  %12248 = shufflevector <32 x i16> %12243, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12249 = getelementptr inbounds i16, i16* %12246, i64 16
  %12250 = bitcast i16* %12249 to <16 x i16>*
  store <16 x i16> %12248, <16 x i16>* %12250, align 2, !tbaa !401
  %indvars.iv.next3250 = add nuw nsw i64 %indvars.iv3249, 1
  %12251 = icmp eq i64 %indvars.iv.next3250, %zext3251
  br i1 %12251, label %"end for blur_y.s0.x.x.rebased1003", label %"for blur_y.s0.x.x.rebased1002"

"for blur_y.s0.x.x.rebased1018":                  ; preds = %"for blur_y.s0.x.x.rebased1018.preheader", %"consume blur_x1029"
  %blur_y.s0.x.x.rebased1020 = phi i32 [ %12326, %"consume blur_x1029" ], [ 0, %"for blur_y.s0.x.x.rebased1018.preheader" ]
  %12252 = add nsw i32 %blur_y.s0.x.x.rebased1020, %t1582776
  %a1329 = shl nsw i32 %12252, 5
  %12253 = icmp sgt i32 %t1603, %a1329
  %blur_y.s0.x.v0.base.s1021 = select i1 %12253, i32 %a1329, i32 %t1603
  %12254 = icmp slt i32 %12252, 1
  %12255 = icmp sgt i32 %194, %a1329
  %12256 = or i1 %12254, %12255
  br i1 %12256, label %"produce blur_x1026", label %"consume blur_x1029"

"end for blur_y.s0.x.x.rebased1019":              ; preds = %"consume blur_x1029", %"end for blur_y.s0.x.x.rebased1003"
  br i1 %225, label %"produce blur_x1033", label %after_bb1030

"produce blur_x1026":                             ; preds = %"for blur_y.s0.x.x.rebased1018"
  %12257 = icmp slt i32 %blur_y.s0.x.v0.base.s1021, %194
  %blur_x.s0.x.v1.base.s1027 = select i1 %12257, i32 %blur_y.s0.x.v0.base.s1021, i32 %194
  %t7091028 = add nsw i32 %334, %blur_x.s0.x.v1.base.s1027
  %12258 = sext i32 %t7091028 to i64
  %12259 = getelementptr inbounds i16, i16* %read_input784, i64 %12258
  %12260 = getelementptr inbounds i16, i16* %12259, i64 1
  %12261 = bitcast i16* %12260 to <16 x i16>*
  %12262 = load <16 x i16>, <16 x i16>* %12261, align 2, !tbaa !396
  %12263 = getelementptr inbounds i16, i16* %12259, i64 17
  %12264 = bitcast i16* %12263 to <16 x i16>*
  %12265 = load <16 x i16>, <16 x i16>* %12264, align 2, !tbaa !396
  %12266 = shufflevector <16 x i16> %12262, <16 x i16> %12265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12267 = getelementptr inbounds i16, i16* %12259, i64 2
  %12268 = bitcast i16* %12267 to <16 x i16>*
  %12269 = load <16 x i16>, <16 x i16>* %12268, align 2, !tbaa !396
  %12270 = getelementptr inbounds i16, i16* %12259, i64 18
  %12271 = bitcast i16* %12270 to <16 x i16>*
  %12272 = load <16 x i16>, <16 x i16>* %12271, align 2, !tbaa !396
  %12273 = shufflevector <16 x i16> %12269, <16 x i16> %12272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12274 = bitcast i16* %12259 to <16 x i16>*
  %12275 = load <16 x i16>, <16 x i16>* %12274, align 2, !tbaa !396
  %12276 = getelementptr inbounds i16, i16* %12259, i64 16
  %12277 = bitcast i16* %12276 to <16 x i16>*
  %12278 = load <16 x i16>, <16 x i16>* %12277, align 2, !tbaa !396
  %12279 = shufflevector <16 x i16> %12275, <16 x i16> %12278, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12280 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12279, <32 x i16> %12273, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12281 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12266, <32 x i16> %12280, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12282 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12281, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12283 = shufflevector <32 x i16> %12282, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12284 = sext i32 %blur_x.s0.x.v1.base.s1027 to i64
  %12285 = add nsw i64 %12284, %12170
  %12286 = getelementptr inbounds i16, i16* %blur_x841, i64 %12285
  %12287 = bitcast i16* %12286 to <16 x i16>*
  store <16 x i16> %12283, <16 x i16>* %12287, align 2, !tbaa !399
  %12288 = shufflevector <32 x i16> %12282, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12289 = getelementptr inbounds i16, i16* %12286, i64 16
  %12290 = bitcast i16* %12289 to <16 x i16>*
  store <16 x i16> %12288, <16 x i16>* %12290, align 2, !tbaa !399
  br label %"consume blur_x1029"

"consume blur_x1029":                             ; preds = %"for blur_y.s0.x.x.rebased1018", %"produce blur_x1026"
  %12291 = sext i32 %blur_y.s0.x.v0.base.s1021 to i64
  %12292 = add nsw i64 %12173, %12291
  %12293 = getelementptr inbounds i16, i16* %blur_x841, i64 %12292
  %12294 = bitcast i16* %12293 to <16 x i16>*
  %12295 = load <16 x i16>, <16 x i16>* %12294, align 2, !tbaa !399
  %12296 = getelementptr inbounds i16, i16* %12293, i64 16
  %12297 = bitcast i16* %12296 to <16 x i16>*
  %12298 = load <16 x i16>, <16 x i16>* %12297, align 2, !tbaa !399
  %12299 = shufflevector <16 x i16> %12295, <16 x i16> %12298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12300 = add nsw i64 %12176, %12291
  %12301 = getelementptr inbounds i16, i16* %blur_x841, i64 %12300
  %12302 = bitcast i16* %12301 to <16 x i16>*
  %12303 = load <16 x i16>, <16 x i16>* %12302, align 2, !tbaa !399
  %12304 = getelementptr inbounds i16, i16* %12301, i64 16
  %12305 = bitcast i16* %12304 to <16 x i16>*
  %12306 = load <16 x i16>, <16 x i16>* %12305, align 2, !tbaa !399
  %12307 = shufflevector <16 x i16> %12303, <16 x i16> %12306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12308 = add nsw i64 %12179, %12291
  %12309 = getelementptr inbounds i16, i16* %blur_x841, i64 %12308
  %12310 = bitcast i16* %12309 to <16 x i16>*
  %12311 = load <16 x i16>, <16 x i16>* %12310, align 2, !tbaa !399
  %12312 = getelementptr inbounds i16, i16* %12309, i64 16
  %12313 = bitcast i16* %12312 to <16 x i16>*
  %12314 = load <16 x i16>, <16 x i16>* %12313, align 2, !tbaa !399
  %12315 = shufflevector <16 x i16> %12311, <16 x i16> %12314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12316 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12315, <32 x i16> %12307, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12317 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12299, <32 x i16> %12316, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12318 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12317, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12319 = shufflevector <32 x i16> %12318, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12320 = add nsw i64 %12183, %12291
  %12321 = getelementptr inbounds i16, i16* %258, i64 %12320
  %12322 = bitcast i16* %12321 to <16 x i16>*
  store <16 x i16> %12319, <16 x i16>* %12322, align 2, !tbaa !401
  %12323 = shufflevector <32 x i16> %12318, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12324 = getelementptr inbounds i16, i16* %12321, i64 16
  %12325 = bitcast i16* %12324 to <16 x i16>*
  store <16 x i16> %12323, <16 x i16>* %12325, align 2, !tbaa !401
  %12326 = add nuw nsw i32 %blur_y.s0.x.x.rebased1020, 1
  %.not2550 = icmp eq i32 %12326, %t1639860
  br i1 %.not2550, label %"end for blur_y.s0.x.x.rebased1019", label %"for blur_y.s0.x.x.rebased1018"

after_bb1030:                                     ; preds = %"end for blur_y.s0.x.x.rebased1019", %"produce blur_x1033"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1045.preheader", label %"end for blur_y.s0.x.x.rebased1046", !prof !386

"for blur_y.s0.x.x.rebased1045.preheader":        ; preds = %after_bb1030
  %12327 = sext i32 %t1644876 to i64
  %12328 = zext i32 %.pre-phi3420 to i64
  %12329 = mul nsw i64 %12328, %322
  %12330 = sub nsw i64 %12329, %293
  %12331 = zext i32 %.pre-phi3424 to i64
  %12332 = mul nsw i64 %12331, %322
  %12333 = sub nsw i64 %12332, %293
  %12334 = zext i32 %.pre-phi3434 to i64
  %12335 = mul nsw i64 %12334, %322
  %12336 = sub nsw i64 %12335, %293
  %12337 = sext i32 %a365 to i64
  %12338 = add nsw i64 %12337, 3
  %12339 = mul nsw i64 %12338, %319
  %12340 = add nsw i64 %12339, %323
  br label %"for blur_y.s0.x.x.rebased1045"

"produce blur_x1033":                             ; preds = %"end for blur_y.s0.x.x.rebased1019"
  %12341 = getelementptr inbounds i16, i16* %read_input784, i64 %338
  %12342 = getelementptr inbounds i16, i16* %12341, i64 -31
  %12343 = bitcast i16* %12342 to <16 x i16>*
  %12344 = load <16 x i16>, <16 x i16>* %12343, align 2, !tbaa !396
  %12345 = getelementptr inbounds i16, i16* %12341, i64 -15
  %12346 = bitcast i16* %12345 to <16 x i16>*
  %12347 = load <16 x i16>, <16 x i16>* %12346, align 2, !tbaa !396
  %12348 = shufflevector <16 x i16> %12344, <16 x i16> %12347, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12349 = getelementptr inbounds i16, i16* %12341, i64 -30
  %12350 = bitcast i16* %12349 to <16 x i16>*
  %12351 = load <16 x i16>, <16 x i16>* %12350, align 2, !tbaa !396
  %12352 = getelementptr inbounds i16, i16* %12341, i64 -14
  %12353 = bitcast i16* %12352 to <16 x i16>*
  %12354 = load <16 x i16>, <16 x i16>* %12353, align 2, !tbaa !396
  %12355 = shufflevector <16 x i16> %12351, <16 x i16> %12354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12356 = getelementptr inbounds i16, i16* %12341, i64 -32
  %12357 = bitcast i16* %12356 to <16 x i16>*
  %12358 = load <16 x i16>, <16 x i16>* %12357, align 2, !tbaa !396
  %12359 = getelementptr inbounds i16, i16* %12341, i64 -16
  %12360 = bitcast i16* %12359 to <16 x i16>*
  %12361 = load <16 x i16>, <16 x i16>* %12360, align 2, !tbaa !396
  %12362 = shufflevector <16 x i16> %12358, <16 x i16> %12361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12363 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12362, <32 x i16> %12355, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12364 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12348, <32 x i16> %12363, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12365 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12364, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12366 = shufflevector <32 x i16> %12365, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12367 = zext i32 %.pre-phi3424 to i64
  %12368 = mul nsw i64 %294, %12367
  %12369 = add nsw i64 %296, %12368
  %12370 = getelementptr inbounds i16, i16* %blur_x841, i64 %12369
  %12371 = getelementptr inbounds i16, i16* %12370, i64 -32
  %12372 = bitcast i16* %12371 to <16 x i16>*
  store <16 x i16> %12366, <16 x i16>* %12372, align 2, !tbaa !399
  %12373 = shufflevector <32 x i16> %12365, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12374 = getelementptr inbounds i16, i16* %12370, i64 -16
  %12375 = bitcast i16* %12374 to <16 x i16>*
  store <16 x i16> %12373, <16 x i16>* %12375, align 2, !tbaa !399
  %12376 = zext i32 %.pre-phi3420 to i64
  %12377 = mul nsw i64 %12376, %318
  %12378 = add nsw i64 %12377, %291
  %12379 = getelementptr inbounds i16, i16* %blur_x841, i64 %12378
  %12380 = getelementptr inbounds i16, i16* %12379, i64 -32
  %12381 = bitcast i16* %12380 to <16 x i16>*
  %12382 = load <16 x i16>, <16 x i16>* %12381, align 2, !tbaa !399
  %12383 = getelementptr inbounds i16, i16* %12379, i64 -16
  %12384 = bitcast i16* %12383 to <16 x i16>*
  %12385 = load <16 x i16>, <16 x i16>* %12384, align 2, !tbaa !399
  %12386 = shufflevector <16 x i16> %12382, <16 x i16> %12385, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12387 = mul nsw i64 %12367, %318
  %12388 = add nsw i64 %12387, %291
  %12389 = getelementptr inbounds i16, i16* %blur_x841, i64 %12388
  %12390 = getelementptr inbounds i16, i16* %12389, i64 -32
  %12391 = bitcast i16* %12390 to <16 x i16>*
  %12392 = load <16 x i16>, <16 x i16>* %12391, align 2, !tbaa !399
  %12393 = getelementptr inbounds i16, i16* %12389, i64 -16
  %12394 = bitcast i16* %12393 to <16 x i16>*
  %12395 = load <16 x i16>, <16 x i16>* %12394, align 2, !tbaa !399
  %12396 = shufflevector <16 x i16> %12392, <16 x i16> %12395, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12397 = zext i32 %.pre-phi3434 to i64
  %12398 = mul nsw i64 %12397, %318
  %12399 = add nsw i64 %12398, %291
  %12400 = getelementptr inbounds i16, i16* %blur_x841, i64 %12399
  %12401 = getelementptr inbounds i16, i16* %12400, i64 -32
  %12402 = bitcast i16* %12401 to <16 x i16>*
  %12403 = load <16 x i16>, <16 x i16>* %12402, align 2, !tbaa !399
  %12404 = getelementptr inbounds i16, i16* %12400, i64 -16
  %12405 = bitcast i16* %12404 to <16 x i16>*
  %12406 = load <16 x i16>, <16 x i16>* %12405, align 2, !tbaa !399
  %12407 = shufflevector <16 x i16> %12403, <16 x i16> %12406, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12408 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12407, <32 x i16> %12396, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12409 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12386, <32 x i16> %12408, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12410 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12409, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12411 = shufflevector <32 x i16> %12410, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12412 = sext i32 %a365 to i64
  %12413 = add nsw i64 %12412, 3
  %12414 = mul nsw i64 %12413, %319
  %12415 = add nsw i64 %321, %12414
  %12416 = getelementptr inbounds i16, i16* %258, i64 %12415
  %12417 = getelementptr inbounds i16, i16* %12416, i64 -32
  %12418 = bitcast i16* %12417 to <16 x i16>*
  store <16 x i16> %12411, <16 x i16>* %12418, align 2, !tbaa !401
  %12419 = shufflevector <32 x i16> %12410, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12420 = getelementptr inbounds i16, i16* %12416, i64 -16
  %12421 = bitcast i16* %12420 to <16 x i16>*
  store <16 x i16> %12419, <16 x i16>* %12421, align 2, !tbaa !401
  br label %after_bb1030

"for blur_y.s0.x.x.rebased1045":                  ; preds = %"for blur_y.s0.x.x.rebased1045.preheader", %"consume blur_x1053"
  %indvars.iv3252 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1045.preheader" ], [ %indvars.iv.next3253, %"consume blur_x1053" ]
  %12422 = add nsw i64 %indvars.iv3252, %298
  %12423 = icmp slt i64 %12422, 1
  %12424 = trunc i64 %12422 to i32
  %12425 = shl nsw i32 %12424, 5
  %12426 = icmp sgt i32 %194, %12425
  %12427 = or i1 %12423, %12426
  br i1 %12427, label %"produce blur_x1051", label %"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge"

"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1045"
  %.pre3439 = shl nsw i64 %12422, 5
  br label %"consume blur_x1053"

"end for blur_y.s0.x.x.rebased1046":              ; preds = %"consume blur_x1053", %after_bb1030
  br i1 %299, label %"for blur_y.s0.x.x.rebased1061.preheader", label %"end for blur_y.s0.x.x.rebased1062", !prof !386

"for blur_y.s0.x.x.rebased1061.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1046"
  %12428 = sext i32 %t1644876 to i64
  %12429 = zext i32 %.pre-phi3420 to i64
  %12430 = mul nsw i64 %12429, %322
  %12431 = sub nsw i64 %12430, %293
  %12432 = zext i32 %.pre-phi3424 to i64
  %12433 = mul nsw i64 %12432, %322
  %12434 = sub nsw i64 %12433, %293
  %12435 = zext i32 %.pre-phi3434 to i64
  %12436 = mul nsw i64 %12435, %322
  %12437 = sub nsw i64 %12436, %293
  %12438 = sext i32 %a365 to i64
  %12439 = add nsw i64 %12438, 3
  %12440 = mul nsw i64 %12439, %319
  %12441 = add nsw i64 %12440, %323
  br label %"for blur_y.s0.x.x.rebased1061"

"produce blur_x1051":                             ; preds = %"for blur_y.s0.x.x.rebased1045"
  %t7201052 = add nsw i32 %340, %12425
  %12442 = sext i32 %t7201052 to i64
  %12443 = getelementptr inbounds i16, i16* %read_input784, i64 %12442
  %12444 = getelementptr inbounds i16, i16* %12443, i64 1
  %12445 = bitcast i16* %12444 to <16 x i16>*
  %12446 = load <16 x i16>, <16 x i16>* %12445, align 2, !tbaa !396
  %12447 = getelementptr inbounds i16, i16* %12443, i64 17
  %12448 = bitcast i16* %12447 to <16 x i16>*
  %12449 = load <16 x i16>, <16 x i16>* %12448, align 2, !tbaa !396
  %12450 = shufflevector <16 x i16> %12446, <16 x i16> %12449, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12451 = getelementptr inbounds i16, i16* %12443, i64 2
  %12452 = bitcast i16* %12451 to <16 x i16>*
  %12453 = load <16 x i16>, <16 x i16>* %12452, align 2, !tbaa !396
  %12454 = getelementptr inbounds i16, i16* %12443, i64 18
  %12455 = bitcast i16* %12454 to <16 x i16>*
  %12456 = load <16 x i16>, <16 x i16>* %12455, align 2, !tbaa !396
  %12457 = shufflevector <16 x i16> %12453, <16 x i16> %12456, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12458 = bitcast i16* %12443 to <16 x i16>*
  %12459 = load <16 x i16>, <16 x i16>* %12458, align 2, !tbaa !396
  %12460 = getelementptr inbounds i16, i16* %12443, i64 16
  %12461 = bitcast i16* %12460 to <16 x i16>*
  %12462 = load <16 x i16>, <16 x i16>* %12461, align 2, !tbaa !396
  %12463 = shufflevector <16 x i16> %12459, <16 x i16> %12462, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12464 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12463, <32 x i16> %12457, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12465 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12450, <32 x i16> %12464, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12466 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12465, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12467 = shufflevector <32 x i16> %12466, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12468 = shl nsw i64 %12422, 5
  %12469 = add nsw i64 %12468, %12327
  %12470 = getelementptr inbounds i16, i16* %blur_x841, i64 %12469
  %12471 = bitcast i16* %12470 to <16 x i16>*
  store <16 x i16> %12467, <16 x i16>* %12471, align 2, !tbaa !399
  %12472 = shufflevector <32 x i16> %12466, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12473 = getelementptr inbounds i16, i16* %12470, i64 16
  %12474 = bitcast i16* %12473 to <16 x i16>*
  store <16 x i16> %12472, <16 x i16>* %12474, align 2, !tbaa !399
  br label %"consume blur_x1053"

"consume blur_x1053":                             ; preds = %"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge", %"produce blur_x1051"
  %.pre-phi3440 = phi i64 [ %.pre3439, %"for blur_y.s0.x.x.rebased1045.consume blur_x1053_crit_edge" ], [ %12468, %"produce blur_x1051" ]
  %12475 = add nsw i64 %12330, %.pre-phi3440
  %12476 = getelementptr inbounds i16, i16* %blur_x841, i64 %12475
  %12477 = bitcast i16* %12476 to <16 x i16>*
  %12478 = load <16 x i16>, <16 x i16>* %12477, align 2, !tbaa !399
  %12479 = getelementptr inbounds i16, i16* %12476, i64 16
  %12480 = bitcast i16* %12479 to <16 x i16>*
  %12481 = load <16 x i16>, <16 x i16>* %12480, align 2, !tbaa !399
  %12482 = shufflevector <16 x i16> %12478, <16 x i16> %12481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12483 = add nsw i64 %12333, %.pre-phi3440
  %12484 = getelementptr inbounds i16, i16* %blur_x841, i64 %12483
  %12485 = bitcast i16* %12484 to <16 x i16>*
  %12486 = load <16 x i16>, <16 x i16>* %12485, align 2, !tbaa !399
  %12487 = getelementptr inbounds i16, i16* %12484, i64 16
  %12488 = bitcast i16* %12487 to <16 x i16>*
  %12489 = load <16 x i16>, <16 x i16>* %12488, align 2, !tbaa !399
  %12490 = shufflevector <16 x i16> %12486, <16 x i16> %12489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12491 = add nsw i64 %12336, %.pre-phi3440
  %12492 = getelementptr inbounds i16, i16* %blur_x841, i64 %12491
  %12493 = bitcast i16* %12492 to <16 x i16>*
  %12494 = load <16 x i16>, <16 x i16>* %12493, align 2, !tbaa !399
  %12495 = getelementptr inbounds i16, i16* %12492, i64 16
  %12496 = bitcast i16* %12495 to <16 x i16>*
  %12497 = load <16 x i16>, <16 x i16>* %12496, align 2, !tbaa !399
  %12498 = shufflevector <16 x i16> %12494, <16 x i16> %12497, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12499 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12498, <32 x i16> %12490, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12500 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12482, <32 x i16> %12499, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12501 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12500, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12502 = shufflevector <32 x i16> %12501, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12503 = add nsw i64 %12340, %.pre-phi3440
  %12504 = getelementptr inbounds i16, i16* %258, i64 %12503
  %12505 = bitcast i16* %12504 to <16 x i16>*
  store <16 x i16> %12502, <16 x i16>* %12505, align 2, !tbaa !401
  %12506 = shufflevector <32 x i16> %12501, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12507 = getelementptr inbounds i16, i16* %12504, i64 16
  %12508 = bitcast i16* %12507 to <16 x i16>*
  store <16 x i16> %12506, <16 x i16>* %12508, align 2, !tbaa !401
  %indvars.iv.next3253 = add nuw nsw i64 %indvars.iv3252, 1
  %12509 = icmp eq i64 %indvars.iv.next3253, %zext3254
  br i1 %12509, label %"end for blur_y.s0.x.x.rebased1046", label %"for blur_y.s0.x.x.rebased1045"

"for blur_y.s0.x.x.rebased1061":                  ; preds = %"for blur_y.s0.x.x.rebased1061.preheader", %"consume blur_x1072"
  %blur_y.s0.x.x.rebased1063 = phi i32 [ %12584, %"consume blur_x1072" ], [ 0, %"for blur_y.s0.x.x.rebased1061.preheader" ]
  %12510 = add nsw i32 %blur_y.s0.x.x.rebased1063, %t1582776
  %a1486 = shl nsw i32 %12510, 5
  %12511 = icmp sgt i32 %t1603, %a1486
  %blur_y.s0.x.v0.base.s1064 = select i1 %12511, i32 %a1486, i32 %t1603
  %12512 = icmp slt i32 %12510, 1
  %12513 = icmp sgt i32 %194, %a1486
  %12514 = or i1 %12512, %12513
  br i1 %12514, label %"produce blur_x1069", label %"consume blur_x1072"

"end for blur_y.s0.x.x.rebased1062":              ; preds = %"consume blur_x1072", %"end for blur_y.s0.x.x.rebased1046"
  br i1 %225, label %"produce blur_x1076", label %after_bb1073

"produce blur_x1069":                             ; preds = %"for blur_y.s0.x.x.rebased1061"
  %12515 = icmp slt i32 %blur_y.s0.x.v0.base.s1064, %194
  %blur_x.s0.x.v1.base.s1070 = select i1 %12515, i32 %blur_y.s0.x.v0.base.s1064, i32 %194
  %t7251071 = add nsw i32 %340, %blur_x.s0.x.v1.base.s1070
  %12516 = sext i32 %t7251071 to i64
  %12517 = getelementptr inbounds i16, i16* %read_input784, i64 %12516
  %12518 = getelementptr inbounds i16, i16* %12517, i64 1
  %12519 = bitcast i16* %12518 to <16 x i16>*
  %12520 = load <16 x i16>, <16 x i16>* %12519, align 2, !tbaa !396
  %12521 = getelementptr inbounds i16, i16* %12517, i64 17
  %12522 = bitcast i16* %12521 to <16 x i16>*
  %12523 = load <16 x i16>, <16 x i16>* %12522, align 2, !tbaa !396
  %12524 = shufflevector <16 x i16> %12520, <16 x i16> %12523, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12525 = getelementptr inbounds i16, i16* %12517, i64 2
  %12526 = bitcast i16* %12525 to <16 x i16>*
  %12527 = load <16 x i16>, <16 x i16>* %12526, align 2, !tbaa !396
  %12528 = getelementptr inbounds i16, i16* %12517, i64 18
  %12529 = bitcast i16* %12528 to <16 x i16>*
  %12530 = load <16 x i16>, <16 x i16>* %12529, align 2, !tbaa !396
  %12531 = shufflevector <16 x i16> %12527, <16 x i16> %12530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12532 = bitcast i16* %12517 to <16 x i16>*
  %12533 = load <16 x i16>, <16 x i16>* %12532, align 2, !tbaa !396
  %12534 = getelementptr inbounds i16, i16* %12517, i64 16
  %12535 = bitcast i16* %12534 to <16 x i16>*
  %12536 = load <16 x i16>, <16 x i16>* %12535, align 2, !tbaa !396
  %12537 = shufflevector <16 x i16> %12533, <16 x i16> %12536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12538 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12537, <32 x i16> %12531, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12539 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12524, <32 x i16> %12538, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12540 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12539, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12541 = shufflevector <32 x i16> %12540, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12542 = sext i32 %blur_x.s0.x.v1.base.s1070 to i64
  %12543 = add nsw i64 %12542, %12428
  %12544 = getelementptr inbounds i16, i16* %blur_x841, i64 %12543
  %12545 = bitcast i16* %12544 to <16 x i16>*
  store <16 x i16> %12541, <16 x i16>* %12545, align 2, !tbaa !399
  %12546 = shufflevector <32 x i16> %12540, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12547 = getelementptr inbounds i16, i16* %12544, i64 16
  %12548 = bitcast i16* %12547 to <16 x i16>*
  store <16 x i16> %12546, <16 x i16>* %12548, align 2, !tbaa !399
  br label %"consume blur_x1072"

"consume blur_x1072":                             ; preds = %"for blur_y.s0.x.x.rebased1061", %"produce blur_x1069"
  %12549 = sext i32 %blur_y.s0.x.v0.base.s1064 to i64
  %12550 = add nsw i64 %12431, %12549
  %12551 = getelementptr inbounds i16, i16* %blur_x841, i64 %12550
  %12552 = bitcast i16* %12551 to <16 x i16>*
  %12553 = load <16 x i16>, <16 x i16>* %12552, align 2, !tbaa !399
  %12554 = getelementptr inbounds i16, i16* %12551, i64 16
  %12555 = bitcast i16* %12554 to <16 x i16>*
  %12556 = load <16 x i16>, <16 x i16>* %12555, align 2, !tbaa !399
  %12557 = shufflevector <16 x i16> %12553, <16 x i16> %12556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12558 = add nsw i64 %12434, %12549
  %12559 = getelementptr inbounds i16, i16* %blur_x841, i64 %12558
  %12560 = bitcast i16* %12559 to <16 x i16>*
  %12561 = load <16 x i16>, <16 x i16>* %12560, align 2, !tbaa !399
  %12562 = getelementptr inbounds i16, i16* %12559, i64 16
  %12563 = bitcast i16* %12562 to <16 x i16>*
  %12564 = load <16 x i16>, <16 x i16>* %12563, align 2, !tbaa !399
  %12565 = shufflevector <16 x i16> %12561, <16 x i16> %12564, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12566 = add nsw i64 %12437, %12549
  %12567 = getelementptr inbounds i16, i16* %blur_x841, i64 %12566
  %12568 = bitcast i16* %12567 to <16 x i16>*
  %12569 = load <16 x i16>, <16 x i16>* %12568, align 2, !tbaa !399
  %12570 = getelementptr inbounds i16, i16* %12567, i64 16
  %12571 = bitcast i16* %12570 to <16 x i16>*
  %12572 = load <16 x i16>, <16 x i16>* %12571, align 2, !tbaa !399
  %12573 = shufflevector <16 x i16> %12569, <16 x i16> %12572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12574 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12573, <32 x i16> %12565, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12575 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12557, <32 x i16> %12574, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12576 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12575, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12577 = shufflevector <32 x i16> %12576, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12578 = add nsw i64 %12441, %12549
  %12579 = getelementptr inbounds i16, i16* %258, i64 %12578
  %12580 = bitcast i16* %12579 to <16 x i16>*
  store <16 x i16> %12577, <16 x i16>* %12580, align 2, !tbaa !401
  %12581 = shufflevector <32 x i16> %12576, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12582 = getelementptr inbounds i16, i16* %12579, i64 16
  %12583 = bitcast i16* %12582 to <16 x i16>*
  store <16 x i16> %12581, <16 x i16>* %12583, align 2, !tbaa !401
  %12584 = add nuw nsw i32 %blur_y.s0.x.x.rebased1063, 1
  %.not2546 = icmp eq i32 %12584, %t1639860
  br i1 %.not2546, label %"end for blur_y.s0.x.x.rebased1062", label %"for blur_y.s0.x.x.rebased1061"

after_bb1073:                                     ; preds = %"end for blur_y.s0.x.x.rebased1062", %"produce blur_x1076"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1088.preheader", label %"end for blur_y.s0.x.x.rebased1089", !prof !386

"for blur_y.s0.x.x.rebased1088.preheader":        ; preds = %after_bb1073
  %12585 = sext i32 %t1650912 to i64
  %12586 = zext i32 %.pre-phi3424 to i64
  %12587 = mul nsw i64 %12586, %322
  %12588 = sub nsw i64 %12587, %293
  %12589 = zext i32 %.pre-phi3428 to i64
  %12590 = mul nsw i64 %12589, %322
  %12591 = sub nsw i64 %12590, %293
  %12592 = zext i32 %.pre-phi3420 to i64
  %12593 = mul nsw i64 %12592, %322
  %12594 = sub nsw i64 %12593, %293
  %12595 = sext i32 %a365 to i64
  %12596 = add nsw i64 %12595, 4
  %12597 = mul nsw i64 %12596, %319
  %12598 = add nsw i64 %12597, %323
  br label %"for blur_y.s0.x.x.rebased1088"

"produce blur_x1076":                             ; preds = %"end for blur_y.s0.x.x.rebased1062"
  %12599 = getelementptr inbounds i16, i16* %read_input784, i64 %344
  %12600 = getelementptr inbounds i16, i16* %12599, i64 -31
  %12601 = bitcast i16* %12600 to <16 x i16>*
  %12602 = load <16 x i16>, <16 x i16>* %12601, align 2, !tbaa !396
  %12603 = getelementptr inbounds i16, i16* %12599, i64 -15
  %12604 = bitcast i16* %12603 to <16 x i16>*
  %12605 = load <16 x i16>, <16 x i16>* %12604, align 2, !tbaa !396
  %12606 = shufflevector <16 x i16> %12602, <16 x i16> %12605, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12607 = getelementptr inbounds i16, i16* %12599, i64 -30
  %12608 = bitcast i16* %12607 to <16 x i16>*
  %12609 = load <16 x i16>, <16 x i16>* %12608, align 2, !tbaa !396
  %12610 = getelementptr inbounds i16, i16* %12599, i64 -14
  %12611 = bitcast i16* %12610 to <16 x i16>*
  %12612 = load <16 x i16>, <16 x i16>* %12611, align 2, !tbaa !396
  %12613 = shufflevector <16 x i16> %12609, <16 x i16> %12612, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12614 = getelementptr inbounds i16, i16* %12599, i64 -32
  %12615 = bitcast i16* %12614 to <16 x i16>*
  %12616 = load <16 x i16>, <16 x i16>* %12615, align 2, !tbaa !396
  %12617 = getelementptr inbounds i16, i16* %12599, i64 -16
  %12618 = bitcast i16* %12617 to <16 x i16>*
  %12619 = load <16 x i16>, <16 x i16>* %12618, align 2, !tbaa !396
  %12620 = shufflevector <16 x i16> %12616, <16 x i16> %12619, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12621 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12620, <32 x i16> %12613, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12622 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12606, <32 x i16> %12621, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12623 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12622, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12624 = shufflevector <32 x i16> %12623, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12625 = zext i32 %.pre-phi3428 to i64
  %12626 = mul nsw i64 %294, %12625
  %12627 = add nsw i64 %296, %12626
  %12628 = getelementptr inbounds i16, i16* %blur_x841, i64 %12627
  %12629 = getelementptr inbounds i16, i16* %12628, i64 -32
  %12630 = bitcast i16* %12629 to <16 x i16>*
  store <16 x i16> %12624, <16 x i16>* %12630, align 2, !tbaa !399
  %12631 = shufflevector <32 x i16> %12623, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12632 = getelementptr inbounds i16, i16* %12628, i64 -16
  %12633 = bitcast i16* %12632 to <16 x i16>*
  store <16 x i16> %12631, <16 x i16>* %12633, align 2, !tbaa !399
  %12634 = zext i32 %.pre-phi3424 to i64
  %12635 = mul nsw i64 %12634, %318
  %12636 = add nsw i64 %12635, %291
  %12637 = getelementptr inbounds i16, i16* %blur_x841, i64 %12636
  %12638 = getelementptr inbounds i16, i16* %12637, i64 -32
  %12639 = bitcast i16* %12638 to <16 x i16>*
  %12640 = load <16 x i16>, <16 x i16>* %12639, align 2, !tbaa !399
  %12641 = getelementptr inbounds i16, i16* %12637, i64 -16
  %12642 = bitcast i16* %12641 to <16 x i16>*
  %12643 = load <16 x i16>, <16 x i16>* %12642, align 2, !tbaa !399
  %12644 = shufflevector <16 x i16> %12640, <16 x i16> %12643, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12645 = mul nsw i64 %12625, %318
  %12646 = add nsw i64 %12645, %291
  %12647 = getelementptr inbounds i16, i16* %blur_x841, i64 %12646
  %12648 = getelementptr inbounds i16, i16* %12647, i64 -32
  %12649 = bitcast i16* %12648 to <16 x i16>*
  %12650 = load <16 x i16>, <16 x i16>* %12649, align 2, !tbaa !399
  %12651 = getelementptr inbounds i16, i16* %12647, i64 -16
  %12652 = bitcast i16* %12651 to <16 x i16>*
  %12653 = load <16 x i16>, <16 x i16>* %12652, align 2, !tbaa !399
  %12654 = shufflevector <16 x i16> %12650, <16 x i16> %12653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12655 = zext i32 %.pre-phi3420 to i64
  %12656 = mul nsw i64 %12655, %318
  %12657 = add nsw i64 %12656, %291
  %12658 = getelementptr inbounds i16, i16* %blur_x841, i64 %12657
  %12659 = getelementptr inbounds i16, i16* %12658, i64 -32
  %12660 = bitcast i16* %12659 to <16 x i16>*
  %12661 = load <16 x i16>, <16 x i16>* %12660, align 2, !tbaa !399
  %12662 = getelementptr inbounds i16, i16* %12658, i64 -16
  %12663 = bitcast i16* %12662 to <16 x i16>*
  %12664 = load <16 x i16>, <16 x i16>* %12663, align 2, !tbaa !399
  %12665 = shufflevector <16 x i16> %12661, <16 x i16> %12664, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12666 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12665, <32 x i16> %12654, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12667 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12644, <32 x i16> %12666, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12668 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12667, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12669 = shufflevector <32 x i16> %12668, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12670 = sext i32 %a365 to i64
  %12671 = add nsw i64 %12670, 4
  %12672 = mul nsw i64 %12671, %319
  %12673 = add nsw i64 %321, %12672
  %12674 = getelementptr inbounds i16, i16* %258, i64 %12673
  %12675 = getelementptr inbounds i16, i16* %12674, i64 -32
  %12676 = bitcast i16* %12675 to <16 x i16>*
  store <16 x i16> %12669, <16 x i16>* %12676, align 2, !tbaa !401
  %12677 = shufflevector <32 x i16> %12668, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12678 = getelementptr inbounds i16, i16* %12674, i64 -16
  %12679 = bitcast i16* %12678 to <16 x i16>*
  store <16 x i16> %12677, <16 x i16>* %12679, align 2, !tbaa !401
  br label %after_bb1073

"for blur_y.s0.x.x.rebased1088":                  ; preds = %"for blur_y.s0.x.x.rebased1088.preheader", %"consume blur_x1096"
  %indvars.iv3255 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1088.preheader" ], [ %indvars.iv.next3256, %"consume blur_x1096" ]
  %12680 = add nsw i64 %indvars.iv3255, %298
  %12681 = icmp slt i64 %12680, 1
  %12682 = trunc i64 %12680 to i32
  %12683 = shl nsw i32 %12682, 5
  %12684 = icmp sgt i32 %194, %12683
  %12685 = or i1 %12681, %12684
  br i1 %12685, label %"produce blur_x1094", label %"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge"

"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1088"
  %.pre3441 = shl nsw i64 %12680, 5
  br label %"consume blur_x1096"

"end for blur_y.s0.x.x.rebased1089":              ; preds = %"consume blur_x1096", %after_bb1073
  br i1 %299, label %"for blur_y.s0.x.x.rebased1104.preheader", label %"end for blur_y.s0.x.x.rebased1105", !prof !386

"for blur_y.s0.x.x.rebased1104.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1089"
  %12686 = sext i32 %t1650912 to i64
  %12687 = zext i32 %.pre-phi3424 to i64
  %12688 = mul nsw i64 %12687, %322
  %12689 = sub nsw i64 %12688, %293
  %12690 = zext i32 %.pre-phi3428 to i64
  %12691 = mul nsw i64 %12690, %322
  %12692 = sub nsw i64 %12691, %293
  %12693 = zext i32 %.pre-phi3420 to i64
  %12694 = mul nsw i64 %12693, %322
  %12695 = sub nsw i64 %12694, %293
  %12696 = sext i32 %a365 to i64
  %12697 = add nsw i64 %12696, 4
  %12698 = mul nsw i64 %12697, %319
  %12699 = add nsw i64 %12698, %323
  br label %"for blur_y.s0.x.x.rebased1104"

"produce blur_x1094":                             ; preds = %"for blur_y.s0.x.x.rebased1088"
  %t7361095 = add nsw i32 %346, %12683
  %12700 = sext i32 %t7361095 to i64
  %12701 = getelementptr inbounds i16, i16* %read_input784, i64 %12700
  %12702 = getelementptr inbounds i16, i16* %12701, i64 1
  %12703 = bitcast i16* %12702 to <16 x i16>*
  %12704 = load <16 x i16>, <16 x i16>* %12703, align 2, !tbaa !396
  %12705 = getelementptr inbounds i16, i16* %12701, i64 17
  %12706 = bitcast i16* %12705 to <16 x i16>*
  %12707 = load <16 x i16>, <16 x i16>* %12706, align 2, !tbaa !396
  %12708 = shufflevector <16 x i16> %12704, <16 x i16> %12707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12709 = getelementptr inbounds i16, i16* %12701, i64 2
  %12710 = bitcast i16* %12709 to <16 x i16>*
  %12711 = load <16 x i16>, <16 x i16>* %12710, align 2, !tbaa !396
  %12712 = getelementptr inbounds i16, i16* %12701, i64 18
  %12713 = bitcast i16* %12712 to <16 x i16>*
  %12714 = load <16 x i16>, <16 x i16>* %12713, align 2, !tbaa !396
  %12715 = shufflevector <16 x i16> %12711, <16 x i16> %12714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12716 = bitcast i16* %12701 to <16 x i16>*
  %12717 = load <16 x i16>, <16 x i16>* %12716, align 2, !tbaa !396
  %12718 = getelementptr inbounds i16, i16* %12701, i64 16
  %12719 = bitcast i16* %12718 to <16 x i16>*
  %12720 = load <16 x i16>, <16 x i16>* %12719, align 2, !tbaa !396
  %12721 = shufflevector <16 x i16> %12717, <16 x i16> %12720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12722 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12721, <32 x i16> %12715, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12723 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12708, <32 x i16> %12722, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12724 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12723, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12725 = shufflevector <32 x i16> %12724, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12726 = shl nsw i64 %12680, 5
  %12727 = add nsw i64 %12726, %12585
  %12728 = getelementptr inbounds i16, i16* %blur_x841, i64 %12727
  %12729 = bitcast i16* %12728 to <16 x i16>*
  store <16 x i16> %12725, <16 x i16>* %12729, align 2, !tbaa !399
  %12730 = shufflevector <32 x i16> %12724, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12731 = getelementptr inbounds i16, i16* %12728, i64 16
  %12732 = bitcast i16* %12731 to <16 x i16>*
  store <16 x i16> %12730, <16 x i16>* %12732, align 2, !tbaa !399
  br label %"consume blur_x1096"

"consume blur_x1096":                             ; preds = %"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge", %"produce blur_x1094"
  %.pre-phi3442 = phi i64 [ %.pre3441, %"for blur_y.s0.x.x.rebased1088.consume blur_x1096_crit_edge" ], [ %12726, %"produce blur_x1094" ]
  %12733 = add nsw i64 %12588, %.pre-phi3442
  %12734 = getelementptr inbounds i16, i16* %blur_x841, i64 %12733
  %12735 = bitcast i16* %12734 to <16 x i16>*
  %12736 = load <16 x i16>, <16 x i16>* %12735, align 2, !tbaa !399
  %12737 = getelementptr inbounds i16, i16* %12734, i64 16
  %12738 = bitcast i16* %12737 to <16 x i16>*
  %12739 = load <16 x i16>, <16 x i16>* %12738, align 2, !tbaa !399
  %12740 = shufflevector <16 x i16> %12736, <16 x i16> %12739, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12741 = add nsw i64 %12591, %.pre-phi3442
  %12742 = getelementptr inbounds i16, i16* %blur_x841, i64 %12741
  %12743 = bitcast i16* %12742 to <16 x i16>*
  %12744 = load <16 x i16>, <16 x i16>* %12743, align 2, !tbaa !399
  %12745 = getelementptr inbounds i16, i16* %12742, i64 16
  %12746 = bitcast i16* %12745 to <16 x i16>*
  %12747 = load <16 x i16>, <16 x i16>* %12746, align 2, !tbaa !399
  %12748 = shufflevector <16 x i16> %12744, <16 x i16> %12747, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12749 = add nsw i64 %12594, %.pre-phi3442
  %12750 = getelementptr inbounds i16, i16* %blur_x841, i64 %12749
  %12751 = bitcast i16* %12750 to <16 x i16>*
  %12752 = load <16 x i16>, <16 x i16>* %12751, align 2, !tbaa !399
  %12753 = getelementptr inbounds i16, i16* %12750, i64 16
  %12754 = bitcast i16* %12753 to <16 x i16>*
  %12755 = load <16 x i16>, <16 x i16>* %12754, align 2, !tbaa !399
  %12756 = shufflevector <16 x i16> %12752, <16 x i16> %12755, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12757 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12756, <32 x i16> %12748, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12758 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12740, <32 x i16> %12757, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12759 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12758, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12760 = shufflevector <32 x i16> %12759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12761 = add nsw i64 %12598, %.pre-phi3442
  %12762 = getelementptr inbounds i16, i16* %258, i64 %12761
  %12763 = bitcast i16* %12762 to <16 x i16>*
  store <16 x i16> %12760, <16 x i16>* %12763, align 2, !tbaa !401
  %12764 = shufflevector <32 x i16> %12759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12765 = getelementptr inbounds i16, i16* %12762, i64 16
  %12766 = bitcast i16* %12765 to <16 x i16>*
  store <16 x i16> %12764, <16 x i16>* %12766, align 2, !tbaa !401
  %indvars.iv.next3256 = add nuw nsw i64 %indvars.iv3255, 1
  %12767 = icmp eq i64 %indvars.iv.next3256, %zext3257
  br i1 %12767, label %"end for blur_y.s0.x.x.rebased1089", label %"for blur_y.s0.x.x.rebased1088"

"for blur_y.s0.x.x.rebased1104":                  ; preds = %"for blur_y.s0.x.x.rebased1104.preheader", %"consume blur_x1115"
  %blur_y.s0.x.x.rebased1106 = phi i32 [ %12842, %"consume blur_x1115" ], [ 0, %"for blur_y.s0.x.x.rebased1104.preheader" ]
  %12768 = add nsw i32 %blur_y.s0.x.x.rebased1106, %t1582776
  %a1643 = shl nsw i32 %12768, 5
  %12769 = icmp sgt i32 %t1603, %a1643
  %blur_y.s0.x.v0.base.s1107 = select i1 %12769, i32 %a1643, i32 %t1603
  %12770 = icmp slt i32 %12768, 1
  %12771 = icmp sgt i32 %194, %a1643
  %12772 = or i1 %12770, %12771
  br i1 %12772, label %"produce blur_x1112", label %"consume blur_x1115"

"end for blur_y.s0.x.x.rebased1105":              ; preds = %"consume blur_x1115", %"end for blur_y.s0.x.x.rebased1089"
  br i1 %225, label %"produce blur_x1119", label %after_bb1116

"produce blur_x1112":                             ; preds = %"for blur_y.s0.x.x.rebased1104"
  %12773 = icmp slt i32 %blur_y.s0.x.v0.base.s1107, %194
  %blur_x.s0.x.v1.base.s1113 = select i1 %12773, i32 %blur_y.s0.x.v0.base.s1107, i32 %194
  %t7411114 = add nsw i32 %346, %blur_x.s0.x.v1.base.s1113
  %12774 = sext i32 %t7411114 to i64
  %12775 = getelementptr inbounds i16, i16* %read_input784, i64 %12774
  %12776 = getelementptr inbounds i16, i16* %12775, i64 1
  %12777 = bitcast i16* %12776 to <16 x i16>*
  %12778 = load <16 x i16>, <16 x i16>* %12777, align 2, !tbaa !396
  %12779 = getelementptr inbounds i16, i16* %12775, i64 17
  %12780 = bitcast i16* %12779 to <16 x i16>*
  %12781 = load <16 x i16>, <16 x i16>* %12780, align 2, !tbaa !396
  %12782 = shufflevector <16 x i16> %12778, <16 x i16> %12781, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12783 = getelementptr inbounds i16, i16* %12775, i64 2
  %12784 = bitcast i16* %12783 to <16 x i16>*
  %12785 = load <16 x i16>, <16 x i16>* %12784, align 2, !tbaa !396
  %12786 = getelementptr inbounds i16, i16* %12775, i64 18
  %12787 = bitcast i16* %12786 to <16 x i16>*
  %12788 = load <16 x i16>, <16 x i16>* %12787, align 2, !tbaa !396
  %12789 = shufflevector <16 x i16> %12785, <16 x i16> %12788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12790 = bitcast i16* %12775 to <16 x i16>*
  %12791 = load <16 x i16>, <16 x i16>* %12790, align 2, !tbaa !396
  %12792 = getelementptr inbounds i16, i16* %12775, i64 16
  %12793 = bitcast i16* %12792 to <16 x i16>*
  %12794 = load <16 x i16>, <16 x i16>* %12793, align 2, !tbaa !396
  %12795 = shufflevector <16 x i16> %12791, <16 x i16> %12794, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12796 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12795, <32 x i16> %12789, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12797 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12782, <32 x i16> %12796, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12798 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12797, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12799 = shufflevector <32 x i16> %12798, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12800 = sext i32 %blur_x.s0.x.v1.base.s1113 to i64
  %12801 = add nsw i64 %12800, %12686
  %12802 = getelementptr inbounds i16, i16* %blur_x841, i64 %12801
  %12803 = bitcast i16* %12802 to <16 x i16>*
  store <16 x i16> %12799, <16 x i16>* %12803, align 2, !tbaa !399
  %12804 = shufflevector <32 x i16> %12798, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12805 = getelementptr inbounds i16, i16* %12802, i64 16
  %12806 = bitcast i16* %12805 to <16 x i16>*
  store <16 x i16> %12804, <16 x i16>* %12806, align 2, !tbaa !399
  br label %"consume blur_x1115"

"consume blur_x1115":                             ; preds = %"for blur_y.s0.x.x.rebased1104", %"produce blur_x1112"
  %12807 = sext i32 %blur_y.s0.x.v0.base.s1107 to i64
  %12808 = add nsw i64 %12689, %12807
  %12809 = getelementptr inbounds i16, i16* %blur_x841, i64 %12808
  %12810 = bitcast i16* %12809 to <16 x i16>*
  %12811 = load <16 x i16>, <16 x i16>* %12810, align 2, !tbaa !399
  %12812 = getelementptr inbounds i16, i16* %12809, i64 16
  %12813 = bitcast i16* %12812 to <16 x i16>*
  %12814 = load <16 x i16>, <16 x i16>* %12813, align 2, !tbaa !399
  %12815 = shufflevector <16 x i16> %12811, <16 x i16> %12814, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12816 = add nsw i64 %12692, %12807
  %12817 = getelementptr inbounds i16, i16* %blur_x841, i64 %12816
  %12818 = bitcast i16* %12817 to <16 x i16>*
  %12819 = load <16 x i16>, <16 x i16>* %12818, align 2, !tbaa !399
  %12820 = getelementptr inbounds i16, i16* %12817, i64 16
  %12821 = bitcast i16* %12820 to <16 x i16>*
  %12822 = load <16 x i16>, <16 x i16>* %12821, align 2, !tbaa !399
  %12823 = shufflevector <16 x i16> %12819, <16 x i16> %12822, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12824 = add nsw i64 %12695, %12807
  %12825 = getelementptr inbounds i16, i16* %blur_x841, i64 %12824
  %12826 = bitcast i16* %12825 to <16 x i16>*
  %12827 = load <16 x i16>, <16 x i16>* %12826, align 2, !tbaa !399
  %12828 = getelementptr inbounds i16, i16* %12825, i64 16
  %12829 = bitcast i16* %12828 to <16 x i16>*
  %12830 = load <16 x i16>, <16 x i16>* %12829, align 2, !tbaa !399
  %12831 = shufflevector <16 x i16> %12827, <16 x i16> %12830, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12832 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12831, <32 x i16> %12823, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12833 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12815, <32 x i16> %12832, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12834 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12833, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12835 = shufflevector <32 x i16> %12834, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12836 = add nsw i64 %12699, %12807
  %12837 = getelementptr inbounds i16, i16* %258, i64 %12836
  %12838 = bitcast i16* %12837 to <16 x i16>*
  store <16 x i16> %12835, <16 x i16>* %12838, align 2, !tbaa !401
  %12839 = shufflevector <32 x i16> %12834, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12840 = getelementptr inbounds i16, i16* %12837, i64 16
  %12841 = bitcast i16* %12840 to <16 x i16>*
  store <16 x i16> %12839, <16 x i16>* %12841, align 2, !tbaa !401
  %12842 = add nuw nsw i32 %blur_y.s0.x.x.rebased1106, 1
  %.not2542 = icmp eq i32 %12842, %t1639860
  br i1 %.not2542, label %"end for blur_y.s0.x.x.rebased1105", label %"for blur_y.s0.x.x.rebased1104"

after_bb1116:                                     ; preds = %"end for blur_y.s0.x.x.rebased1105", %"produce blur_x1119"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1131.preheader", label %"end for blur_y.s0.x.x.rebased1132", !prof !386

"for blur_y.s0.x.x.rebased1131.preheader":        ; preds = %after_bb1116
  %12843 = sext i32 %t1666955 to i64
  %12844 = zext i32 %.pre-phi3428 to i64
  %12845 = mul nsw i64 %12844, %322
  %12846 = sub nsw i64 %12845, %293
  %12847 = zext i32 %.pre-phi3434 to i64
  %12848 = mul nsw i64 %12847, %322
  %12849 = sub nsw i64 %12848, %293
  %12850 = zext i32 %.pre-phi3424 to i64
  %12851 = mul nsw i64 %12850, %322
  %12852 = sub nsw i64 %12851, %293
  %12853 = sext i32 %a365 to i64
  %12854 = add nsw i64 %12853, 5
  %12855 = mul nsw i64 %12854, %319
  %12856 = add nsw i64 %12855, %323
  br label %"for blur_y.s0.x.x.rebased1131"

"produce blur_x1119":                             ; preds = %"end for blur_y.s0.x.x.rebased1105"
  %12857 = getelementptr inbounds i16, i16* %read_input784, i64 %350
  %12858 = getelementptr inbounds i16, i16* %12857, i64 -31
  %12859 = bitcast i16* %12858 to <16 x i16>*
  %12860 = load <16 x i16>, <16 x i16>* %12859, align 2, !tbaa !396
  %12861 = getelementptr inbounds i16, i16* %12857, i64 -15
  %12862 = bitcast i16* %12861 to <16 x i16>*
  %12863 = load <16 x i16>, <16 x i16>* %12862, align 2, !tbaa !396
  %12864 = shufflevector <16 x i16> %12860, <16 x i16> %12863, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12865 = getelementptr inbounds i16, i16* %12857, i64 -30
  %12866 = bitcast i16* %12865 to <16 x i16>*
  %12867 = load <16 x i16>, <16 x i16>* %12866, align 2, !tbaa !396
  %12868 = getelementptr inbounds i16, i16* %12857, i64 -14
  %12869 = bitcast i16* %12868 to <16 x i16>*
  %12870 = load <16 x i16>, <16 x i16>* %12869, align 2, !tbaa !396
  %12871 = shufflevector <16 x i16> %12867, <16 x i16> %12870, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12872 = getelementptr inbounds i16, i16* %12857, i64 -32
  %12873 = bitcast i16* %12872 to <16 x i16>*
  %12874 = load <16 x i16>, <16 x i16>* %12873, align 2, !tbaa !396
  %12875 = getelementptr inbounds i16, i16* %12857, i64 -16
  %12876 = bitcast i16* %12875 to <16 x i16>*
  %12877 = load <16 x i16>, <16 x i16>* %12876, align 2, !tbaa !396
  %12878 = shufflevector <16 x i16> %12874, <16 x i16> %12877, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12879 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12878, <32 x i16> %12871, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12880 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12864, <32 x i16> %12879, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12881 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12880, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12882 = shufflevector <32 x i16> %12881, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12883 = zext i32 %.pre-phi3434 to i64
  %12884 = mul nsw i64 %294, %12883
  %12885 = add nsw i64 %296, %12884
  %12886 = getelementptr inbounds i16, i16* %blur_x841, i64 %12885
  %12887 = getelementptr inbounds i16, i16* %12886, i64 -32
  %12888 = bitcast i16* %12887 to <16 x i16>*
  store <16 x i16> %12882, <16 x i16>* %12888, align 2, !tbaa !399
  %12889 = shufflevector <32 x i16> %12881, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12890 = getelementptr inbounds i16, i16* %12886, i64 -16
  %12891 = bitcast i16* %12890 to <16 x i16>*
  store <16 x i16> %12889, <16 x i16>* %12891, align 2, !tbaa !399
  %12892 = zext i32 %.pre-phi3428 to i64
  %12893 = mul nsw i64 %12892, %318
  %12894 = add nsw i64 %12893, %291
  %12895 = getelementptr inbounds i16, i16* %blur_x841, i64 %12894
  %12896 = getelementptr inbounds i16, i16* %12895, i64 -32
  %12897 = bitcast i16* %12896 to <16 x i16>*
  %12898 = load <16 x i16>, <16 x i16>* %12897, align 2, !tbaa !399
  %12899 = getelementptr inbounds i16, i16* %12895, i64 -16
  %12900 = bitcast i16* %12899 to <16 x i16>*
  %12901 = load <16 x i16>, <16 x i16>* %12900, align 2, !tbaa !399
  %12902 = shufflevector <16 x i16> %12898, <16 x i16> %12901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12903 = mul nsw i64 %12883, %318
  %12904 = add nsw i64 %12903, %291
  %12905 = getelementptr inbounds i16, i16* %blur_x841, i64 %12904
  %12906 = getelementptr inbounds i16, i16* %12905, i64 -32
  %12907 = bitcast i16* %12906 to <16 x i16>*
  %12908 = load <16 x i16>, <16 x i16>* %12907, align 2, !tbaa !399
  %12909 = getelementptr inbounds i16, i16* %12905, i64 -16
  %12910 = bitcast i16* %12909 to <16 x i16>*
  %12911 = load <16 x i16>, <16 x i16>* %12910, align 2, !tbaa !399
  %12912 = shufflevector <16 x i16> %12908, <16 x i16> %12911, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12913 = zext i32 %.pre-phi3424 to i64
  %12914 = mul nsw i64 %12913, %318
  %12915 = add nsw i64 %12914, %291
  %12916 = getelementptr inbounds i16, i16* %blur_x841, i64 %12915
  %12917 = getelementptr inbounds i16, i16* %12916, i64 -32
  %12918 = bitcast i16* %12917 to <16 x i16>*
  %12919 = load <16 x i16>, <16 x i16>* %12918, align 2, !tbaa !399
  %12920 = getelementptr inbounds i16, i16* %12916, i64 -16
  %12921 = bitcast i16* %12920 to <16 x i16>*
  %12922 = load <16 x i16>, <16 x i16>* %12921, align 2, !tbaa !399
  %12923 = shufflevector <16 x i16> %12919, <16 x i16> %12922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12924 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12923, <32 x i16> %12912, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12925 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12902, <32 x i16> %12924, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12926 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12925, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12927 = shufflevector <32 x i16> %12926, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12928 = sext i32 %a365 to i64
  %12929 = add nsw i64 %12928, 5
  %12930 = mul nsw i64 %12929, %319
  %12931 = add nsw i64 %321, %12930
  %12932 = getelementptr inbounds i16, i16* %258, i64 %12931
  %12933 = getelementptr inbounds i16, i16* %12932, i64 -32
  %12934 = bitcast i16* %12933 to <16 x i16>*
  store <16 x i16> %12927, <16 x i16>* %12934, align 2, !tbaa !401
  %12935 = shufflevector <32 x i16> %12926, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12936 = getelementptr inbounds i16, i16* %12932, i64 -16
  %12937 = bitcast i16* %12936 to <16 x i16>*
  store <16 x i16> %12935, <16 x i16>* %12937, align 2, !tbaa !401
  br label %after_bb1116

"for blur_y.s0.x.x.rebased1131":                  ; preds = %"for blur_y.s0.x.x.rebased1131.preheader", %"consume blur_x1139"
  %indvars.iv3258 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1131.preheader" ], [ %indvars.iv.next3259, %"consume blur_x1139" ]
  %12938 = add nsw i64 %indvars.iv3258, %298
  %12939 = icmp slt i64 %12938, 1
  %12940 = trunc i64 %12938 to i32
  %12941 = shl nsw i32 %12940, 5
  %12942 = icmp sgt i32 %194, %12941
  %12943 = or i1 %12939, %12942
  br i1 %12943, label %"produce blur_x1137", label %"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge"

"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1131"
  %.pre3443 = shl nsw i64 %12938, 5
  br label %"consume blur_x1139"

"end for blur_y.s0.x.x.rebased1132":              ; preds = %"consume blur_x1139", %after_bb1116
  br i1 %299, label %"for blur_y.s0.x.x.rebased1147.preheader", label %"end for blur_y.s0.x.x.rebased1148", !prof !386

"for blur_y.s0.x.x.rebased1147.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1132"
  %12944 = sext i32 %t1666955 to i64
  %12945 = zext i32 %.pre-phi3428 to i64
  %12946 = mul nsw i64 %12945, %322
  %12947 = sub nsw i64 %12946, %293
  %12948 = zext i32 %.pre-phi3434 to i64
  %12949 = mul nsw i64 %12948, %322
  %12950 = sub nsw i64 %12949, %293
  %12951 = zext i32 %.pre-phi3424 to i64
  %12952 = mul nsw i64 %12951, %322
  %12953 = sub nsw i64 %12952, %293
  %12954 = sext i32 %a365 to i64
  %12955 = add nsw i64 %12954, 5
  %12956 = mul nsw i64 %12955, %319
  %12957 = add nsw i64 %12956, %323
  br label %"for blur_y.s0.x.x.rebased1147"

"produce blur_x1137":                             ; preds = %"for blur_y.s0.x.x.rebased1131"
  %t7521138 = add nsw i32 %352, %12941
  %12958 = sext i32 %t7521138 to i64
  %12959 = getelementptr inbounds i16, i16* %read_input784, i64 %12958
  %12960 = getelementptr inbounds i16, i16* %12959, i64 1
  %12961 = bitcast i16* %12960 to <16 x i16>*
  %12962 = load <16 x i16>, <16 x i16>* %12961, align 2, !tbaa !396
  %12963 = getelementptr inbounds i16, i16* %12959, i64 17
  %12964 = bitcast i16* %12963 to <16 x i16>*
  %12965 = load <16 x i16>, <16 x i16>* %12964, align 2, !tbaa !396
  %12966 = shufflevector <16 x i16> %12962, <16 x i16> %12965, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12967 = getelementptr inbounds i16, i16* %12959, i64 2
  %12968 = bitcast i16* %12967 to <16 x i16>*
  %12969 = load <16 x i16>, <16 x i16>* %12968, align 2, !tbaa !396
  %12970 = getelementptr inbounds i16, i16* %12959, i64 18
  %12971 = bitcast i16* %12970 to <16 x i16>*
  %12972 = load <16 x i16>, <16 x i16>* %12971, align 2, !tbaa !396
  %12973 = shufflevector <16 x i16> %12969, <16 x i16> %12972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12974 = bitcast i16* %12959 to <16 x i16>*
  %12975 = load <16 x i16>, <16 x i16>* %12974, align 2, !tbaa !396
  %12976 = getelementptr inbounds i16, i16* %12959, i64 16
  %12977 = bitcast i16* %12976 to <16 x i16>*
  %12978 = load <16 x i16>, <16 x i16>* %12977, align 2, !tbaa !396
  %12979 = shufflevector <16 x i16> %12975, <16 x i16> %12978, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12980 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12979, <32 x i16> %12973, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12981 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12966, <32 x i16> %12980, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %12982 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %12981, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %12983 = shufflevector <32 x i16> %12982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12984 = shl nsw i64 %12938, 5
  %12985 = add nsw i64 %12984, %12843
  %12986 = getelementptr inbounds i16, i16* %blur_x841, i64 %12985
  %12987 = bitcast i16* %12986 to <16 x i16>*
  store <16 x i16> %12983, <16 x i16>* %12987, align 2, !tbaa !399
  %12988 = shufflevector <32 x i16> %12982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12989 = getelementptr inbounds i16, i16* %12986, i64 16
  %12990 = bitcast i16* %12989 to <16 x i16>*
  store <16 x i16> %12988, <16 x i16>* %12990, align 2, !tbaa !399
  br label %"consume blur_x1139"

"consume blur_x1139":                             ; preds = %"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge", %"produce blur_x1137"
  %.pre-phi3444 = phi i64 [ %.pre3443, %"for blur_y.s0.x.x.rebased1131.consume blur_x1139_crit_edge" ], [ %12984, %"produce blur_x1137" ]
  %12991 = add nsw i64 %12846, %.pre-phi3444
  %12992 = getelementptr inbounds i16, i16* %blur_x841, i64 %12991
  %12993 = bitcast i16* %12992 to <16 x i16>*
  %12994 = load <16 x i16>, <16 x i16>* %12993, align 2, !tbaa !399
  %12995 = getelementptr inbounds i16, i16* %12992, i64 16
  %12996 = bitcast i16* %12995 to <16 x i16>*
  %12997 = load <16 x i16>, <16 x i16>* %12996, align 2, !tbaa !399
  %12998 = shufflevector <16 x i16> %12994, <16 x i16> %12997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12999 = add nsw i64 %12849, %.pre-phi3444
  %13000 = getelementptr inbounds i16, i16* %blur_x841, i64 %12999
  %13001 = bitcast i16* %13000 to <16 x i16>*
  %13002 = load <16 x i16>, <16 x i16>* %13001, align 2, !tbaa !399
  %13003 = getelementptr inbounds i16, i16* %13000, i64 16
  %13004 = bitcast i16* %13003 to <16 x i16>*
  %13005 = load <16 x i16>, <16 x i16>* %13004, align 2, !tbaa !399
  %13006 = shufflevector <16 x i16> %13002, <16 x i16> %13005, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13007 = add nsw i64 %12852, %.pre-phi3444
  %13008 = getelementptr inbounds i16, i16* %blur_x841, i64 %13007
  %13009 = bitcast i16* %13008 to <16 x i16>*
  %13010 = load <16 x i16>, <16 x i16>* %13009, align 2, !tbaa !399
  %13011 = getelementptr inbounds i16, i16* %13008, i64 16
  %13012 = bitcast i16* %13011 to <16 x i16>*
  %13013 = load <16 x i16>, <16 x i16>* %13012, align 2, !tbaa !399
  %13014 = shufflevector <16 x i16> %13010, <16 x i16> %13013, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13015 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13014, <32 x i16> %13006, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13016 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %12998, <32 x i16> %13015, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13017 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13016, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13018 = shufflevector <32 x i16> %13017, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13019 = add nsw i64 %12856, %.pre-phi3444
  %13020 = getelementptr inbounds i16, i16* %258, i64 %13019
  %13021 = bitcast i16* %13020 to <16 x i16>*
  store <16 x i16> %13018, <16 x i16>* %13021, align 2, !tbaa !401
  %13022 = shufflevector <32 x i16> %13017, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13023 = getelementptr inbounds i16, i16* %13020, i64 16
  %13024 = bitcast i16* %13023 to <16 x i16>*
  store <16 x i16> %13022, <16 x i16>* %13024, align 2, !tbaa !401
  %indvars.iv.next3259 = add nuw nsw i64 %indvars.iv3258, 1
  %13025 = icmp eq i64 %indvars.iv.next3259, %zext3260
  br i1 %13025, label %"end for blur_y.s0.x.x.rebased1132", label %"for blur_y.s0.x.x.rebased1131"

"for blur_y.s0.x.x.rebased1147":                  ; preds = %"for blur_y.s0.x.x.rebased1147.preheader", %"consume blur_x1158"
  %blur_y.s0.x.x.rebased1149 = phi i32 [ %13100, %"consume blur_x1158" ], [ 0, %"for blur_y.s0.x.x.rebased1147.preheader" ]
  %13026 = add nsw i32 %blur_y.s0.x.x.rebased1149, %t1582776
  %a1800 = shl nsw i32 %13026, 5
  %13027 = icmp sgt i32 %t1603, %a1800
  %blur_y.s0.x.v0.base.s1150 = select i1 %13027, i32 %a1800, i32 %t1603
  %13028 = icmp slt i32 %13026, 1
  %13029 = icmp sgt i32 %194, %a1800
  %13030 = or i1 %13028, %13029
  br i1 %13030, label %"produce blur_x1155", label %"consume blur_x1158"

"end for blur_y.s0.x.x.rebased1148":              ; preds = %"consume blur_x1158", %"end for blur_y.s0.x.x.rebased1132"
  br i1 %225, label %"produce blur_x1162", label %after_bb1159

"produce blur_x1155":                             ; preds = %"for blur_y.s0.x.x.rebased1147"
  %13031 = icmp slt i32 %blur_y.s0.x.v0.base.s1150, %194
  %blur_x.s0.x.v1.base.s1156 = select i1 %13031, i32 %blur_y.s0.x.v0.base.s1150, i32 %194
  %t7571157 = add nsw i32 %352, %blur_x.s0.x.v1.base.s1156
  %13032 = sext i32 %t7571157 to i64
  %13033 = getelementptr inbounds i16, i16* %read_input784, i64 %13032
  %13034 = getelementptr inbounds i16, i16* %13033, i64 1
  %13035 = bitcast i16* %13034 to <16 x i16>*
  %13036 = load <16 x i16>, <16 x i16>* %13035, align 2, !tbaa !396
  %13037 = getelementptr inbounds i16, i16* %13033, i64 17
  %13038 = bitcast i16* %13037 to <16 x i16>*
  %13039 = load <16 x i16>, <16 x i16>* %13038, align 2, !tbaa !396
  %13040 = shufflevector <16 x i16> %13036, <16 x i16> %13039, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13041 = getelementptr inbounds i16, i16* %13033, i64 2
  %13042 = bitcast i16* %13041 to <16 x i16>*
  %13043 = load <16 x i16>, <16 x i16>* %13042, align 2, !tbaa !396
  %13044 = getelementptr inbounds i16, i16* %13033, i64 18
  %13045 = bitcast i16* %13044 to <16 x i16>*
  %13046 = load <16 x i16>, <16 x i16>* %13045, align 2, !tbaa !396
  %13047 = shufflevector <16 x i16> %13043, <16 x i16> %13046, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13048 = bitcast i16* %13033 to <16 x i16>*
  %13049 = load <16 x i16>, <16 x i16>* %13048, align 2, !tbaa !396
  %13050 = getelementptr inbounds i16, i16* %13033, i64 16
  %13051 = bitcast i16* %13050 to <16 x i16>*
  %13052 = load <16 x i16>, <16 x i16>* %13051, align 2, !tbaa !396
  %13053 = shufflevector <16 x i16> %13049, <16 x i16> %13052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13054 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13053, <32 x i16> %13047, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13055 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13040, <32 x i16> %13054, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13056 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13055, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13057 = shufflevector <32 x i16> %13056, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13058 = sext i32 %blur_x.s0.x.v1.base.s1156 to i64
  %13059 = add nsw i64 %13058, %12944
  %13060 = getelementptr inbounds i16, i16* %blur_x841, i64 %13059
  %13061 = bitcast i16* %13060 to <16 x i16>*
  store <16 x i16> %13057, <16 x i16>* %13061, align 2, !tbaa !399
  %13062 = shufflevector <32 x i16> %13056, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13063 = getelementptr inbounds i16, i16* %13060, i64 16
  %13064 = bitcast i16* %13063 to <16 x i16>*
  store <16 x i16> %13062, <16 x i16>* %13064, align 2, !tbaa !399
  br label %"consume blur_x1158"

"consume blur_x1158":                             ; preds = %"for blur_y.s0.x.x.rebased1147", %"produce blur_x1155"
  %13065 = sext i32 %blur_y.s0.x.v0.base.s1150 to i64
  %13066 = add nsw i64 %12947, %13065
  %13067 = getelementptr inbounds i16, i16* %blur_x841, i64 %13066
  %13068 = bitcast i16* %13067 to <16 x i16>*
  %13069 = load <16 x i16>, <16 x i16>* %13068, align 2, !tbaa !399
  %13070 = getelementptr inbounds i16, i16* %13067, i64 16
  %13071 = bitcast i16* %13070 to <16 x i16>*
  %13072 = load <16 x i16>, <16 x i16>* %13071, align 2, !tbaa !399
  %13073 = shufflevector <16 x i16> %13069, <16 x i16> %13072, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13074 = add nsw i64 %12950, %13065
  %13075 = getelementptr inbounds i16, i16* %blur_x841, i64 %13074
  %13076 = bitcast i16* %13075 to <16 x i16>*
  %13077 = load <16 x i16>, <16 x i16>* %13076, align 2, !tbaa !399
  %13078 = getelementptr inbounds i16, i16* %13075, i64 16
  %13079 = bitcast i16* %13078 to <16 x i16>*
  %13080 = load <16 x i16>, <16 x i16>* %13079, align 2, !tbaa !399
  %13081 = shufflevector <16 x i16> %13077, <16 x i16> %13080, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13082 = add nsw i64 %12953, %13065
  %13083 = getelementptr inbounds i16, i16* %blur_x841, i64 %13082
  %13084 = bitcast i16* %13083 to <16 x i16>*
  %13085 = load <16 x i16>, <16 x i16>* %13084, align 2, !tbaa !399
  %13086 = getelementptr inbounds i16, i16* %13083, i64 16
  %13087 = bitcast i16* %13086 to <16 x i16>*
  %13088 = load <16 x i16>, <16 x i16>* %13087, align 2, !tbaa !399
  %13089 = shufflevector <16 x i16> %13085, <16 x i16> %13088, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13090 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13089, <32 x i16> %13081, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13091 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13073, <32 x i16> %13090, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13092 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13091, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13093 = shufflevector <32 x i16> %13092, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13094 = add nsw i64 %12957, %13065
  %13095 = getelementptr inbounds i16, i16* %258, i64 %13094
  %13096 = bitcast i16* %13095 to <16 x i16>*
  store <16 x i16> %13093, <16 x i16>* %13096, align 2, !tbaa !401
  %13097 = shufflevector <32 x i16> %13092, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13098 = getelementptr inbounds i16, i16* %13095, i64 16
  %13099 = bitcast i16* %13098 to <16 x i16>*
  store <16 x i16> %13097, <16 x i16>* %13099, align 2, !tbaa !401
  %13100 = add nuw nsw i32 %blur_y.s0.x.x.rebased1149, 1
  %.not2538 = icmp eq i32 %13100, %t1639860
  br i1 %.not2538, label %"end for blur_y.s0.x.x.rebased1148", label %"for blur_y.s0.x.x.rebased1147"

after_bb1159:                                     ; preds = %"end for blur_y.s0.x.x.rebased1148", %"produce blur_x1162"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1174.preheader", label %"end for blur_y.s0.x.x.rebased1175", !prof !386

"for blur_y.s0.x.x.rebased1174.preheader":        ; preds = %after_bb1159
  %13101 = sext i32 %t1638848 to i64
  %13102 = zext i32 %.pre-phi3434 to i64
  %13103 = mul nsw i64 %13102, %322
  %13104 = sub nsw i64 %13103, %293
  %13105 = zext i32 %.pre-phi3420 to i64
  %13106 = mul nsw i64 %13105, %322
  %13107 = sub nsw i64 %13106, %293
  %13108 = zext i32 %.pre-phi3428 to i64
  %13109 = mul nsw i64 %13108, %322
  %13110 = sub nsw i64 %13109, %293
  %13111 = sext i32 %a365 to i64
  %13112 = add nsw i64 %13111, 6
  %13113 = mul nsw i64 %13112, %319
  %13114 = add nsw i64 %13113, %323
  br label %"for blur_y.s0.x.x.rebased1174"

"produce blur_x1162":                             ; preds = %"end for blur_y.s0.x.x.rebased1148"
  %13115 = getelementptr inbounds i16, i16* %read_input784, i64 %356
  %13116 = getelementptr inbounds i16, i16* %13115, i64 -31
  %13117 = bitcast i16* %13116 to <16 x i16>*
  %13118 = load <16 x i16>, <16 x i16>* %13117, align 2, !tbaa !396
  %13119 = getelementptr inbounds i16, i16* %13115, i64 -15
  %13120 = bitcast i16* %13119 to <16 x i16>*
  %13121 = load <16 x i16>, <16 x i16>* %13120, align 2, !tbaa !396
  %13122 = shufflevector <16 x i16> %13118, <16 x i16> %13121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13123 = getelementptr inbounds i16, i16* %13115, i64 -30
  %13124 = bitcast i16* %13123 to <16 x i16>*
  %13125 = load <16 x i16>, <16 x i16>* %13124, align 2, !tbaa !396
  %13126 = getelementptr inbounds i16, i16* %13115, i64 -14
  %13127 = bitcast i16* %13126 to <16 x i16>*
  %13128 = load <16 x i16>, <16 x i16>* %13127, align 2, !tbaa !396
  %13129 = shufflevector <16 x i16> %13125, <16 x i16> %13128, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13130 = getelementptr inbounds i16, i16* %13115, i64 -32
  %13131 = bitcast i16* %13130 to <16 x i16>*
  %13132 = load <16 x i16>, <16 x i16>* %13131, align 2, !tbaa !396
  %13133 = getelementptr inbounds i16, i16* %13115, i64 -16
  %13134 = bitcast i16* %13133 to <16 x i16>*
  %13135 = load <16 x i16>, <16 x i16>* %13134, align 2, !tbaa !396
  %13136 = shufflevector <16 x i16> %13132, <16 x i16> %13135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13137 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13136, <32 x i16> %13129, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13138 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13122, <32 x i16> %13137, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13139 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13138, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13140 = shufflevector <32 x i16> %13139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13141 = zext i32 %.pre-phi3420 to i64
  %13142 = mul nsw i64 %294, %13141
  %13143 = add nsw i64 %296, %13142
  %13144 = getelementptr inbounds i16, i16* %blur_x841, i64 %13143
  %13145 = getelementptr inbounds i16, i16* %13144, i64 -32
  %13146 = bitcast i16* %13145 to <16 x i16>*
  store <16 x i16> %13140, <16 x i16>* %13146, align 2, !tbaa !399
  %13147 = shufflevector <32 x i16> %13139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13148 = getelementptr inbounds i16, i16* %13144, i64 -16
  %13149 = bitcast i16* %13148 to <16 x i16>*
  store <16 x i16> %13147, <16 x i16>* %13149, align 2, !tbaa !399
  %13150 = zext i32 %.pre-phi3434 to i64
  %13151 = mul nsw i64 %13150, %318
  %13152 = add nsw i64 %13151, %291
  %13153 = getelementptr inbounds i16, i16* %blur_x841, i64 %13152
  %13154 = getelementptr inbounds i16, i16* %13153, i64 -32
  %13155 = bitcast i16* %13154 to <16 x i16>*
  %13156 = load <16 x i16>, <16 x i16>* %13155, align 2, !tbaa !399
  %13157 = getelementptr inbounds i16, i16* %13153, i64 -16
  %13158 = bitcast i16* %13157 to <16 x i16>*
  %13159 = load <16 x i16>, <16 x i16>* %13158, align 2, !tbaa !399
  %13160 = shufflevector <16 x i16> %13156, <16 x i16> %13159, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13161 = mul nsw i64 %13141, %318
  %13162 = add nsw i64 %13161, %291
  %13163 = getelementptr inbounds i16, i16* %blur_x841, i64 %13162
  %13164 = getelementptr inbounds i16, i16* %13163, i64 -32
  %13165 = bitcast i16* %13164 to <16 x i16>*
  %13166 = load <16 x i16>, <16 x i16>* %13165, align 2, !tbaa !399
  %13167 = getelementptr inbounds i16, i16* %13163, i64 -16
  %13168 = bitcast i16* %13167 to <16 x i16>*
  %13169 = load <16 x i16>, <16 x i16>* %13168, align 2, !tbaa !399
  %13170 = shufflevector <16 x i16> %13166, <16 x i16> %13169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13171 = zext i32 %.pre-phi3428 to i64
  %13172 = mul nsw i64 %13171, %318
  %13173 = add nsw i64 %13172, %291
  %13174 = getelementptr inbounds i16, i16* %blur_x841, i64 %13173
  %13175 = getelementptr inbounds i16, i16* %13174, i64 -32
  %13176 = bitcast i16* %13175 to <16 x i16>*
  %13177 = load <16 x i16>, <16 x i16>* %13176, align 2, !tbaa !399
  %13178 = getelementptr inbounds i16, i16* %13174, i64 -16
  %13179 = bitcast i16* %13178 to <16 x i16>*
  %13180 = load <16 x i16>, <16 x i16>* %13179, align 2, !tbaa !399
  %13181 = shufflevector <16 x i16> %13177, <16 x i16> %13180, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13182 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13181, <32 x i16> %13170, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13183 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13160, <32 x i16> %13182, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13184 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13183, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13185 = shufflevector <32 x i16> %13184, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13186 = sext i32 %a365 to i64
  %13187 = add nsw i64 %13186, 6
  %13188 = mul nsw i64 %13187, %319
  %13189 = add nsw i64 %321, %13188
  %13190 = getelementptr inbounds i16, i16* %258, i64 %13189
  %13191 = getelementptr inbounds i16, i16* %13190, i64 -32
  %13192 = bitcast i16* %13191 to <16 x i16>*
  store <16 x i16> %13185, <16 x i16>* %13192, align 2, !tbaa !401
  %13193 = shufflevector <32 x i16> %13184, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13194 = getelementptr inbounds i16, i16* %13190, i64 -16
  %13195 = bitcast i16* %13194 to <16 x i16>*
  store <16 x i16> %13193, <16 x i16>* %13195, align 2, !tbaa !401
  br label %after_bb1159

"for blur_y.s0.x.x.rebased1174":                  ; preds = %"for blur_y.s0.x.x.rebased1174.preheader", %"consume blur_x1182"
  %indvars.iv3261 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1174.preheader" ], [ %indvars.iv.next3262, %"consume blur_x1182" ]
  %13196 = add nsw i64 %indvars.iv3261, %298
  %13197 = icmp slt i64 %13196, 1
  %13198 = trunc i64 %13196 to i32
  %13199 = shl nsw i32 %13198, 5
  %13200 = icmp sgt i32 %194, %13199
  %13201 = or i1 %13197, %13200
  br i1 %13201, label %"produce blur_x1180", label %"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge"

"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1174"
  %.pre3445 = shl nsw i64 %13196, 5
  br label %"consume blur_x1182"

"end for blur_y.s0.x.x.rebased1175":              ; preds = %"consume blur_x1182", %after_bb1159
  br i1 %299, label %"for blur_y.s0.x.x.rebased1190.preheader", label %"end for blur_y.s0.x.x.rebased1191", !prof !386

"for blur_y.s0.x.x.rebased1190.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1175"
  %13202 = sext i32 %t1638848 to i64
  %13203 = zext i32 %.pre-phi3434 to i64
  %13204 = mul nsw i64 %13203, %322
  %13205 = sub nsw i64 %13204, %293
  %13206 = zext i32 %.pre-phi3420 to i64
  %13207 = mul nsw i64 %13206, %322
  %13208 = sub nsw i64 %13207, %293
  %13209 = zext i32 %.pre-phi3428 to i64
  %13210 = mul nsw i64 %13209, %322
  %13211 = sub nsw i64 %13210, %293
  %13212 = sext i32 %a365 to i64
  %13213 = add nsw i64 %13212, 6
  %13214 = mul nsw i64 %13213, %319
  %13215 = add nsw i64 %13214, %323
  br label %"for blur_y.s0.x.x.rebased1190"

"produce blur_x1180":                             ; preds = %"for blur_y.s0.x.x.rebased1174"
  %t7681181 = add nsw i32 %358, %13199
  %13216 = sext i32 %t7681181 to i64
  %13217 = getelementptr inbounds i16, i16* %read_input784, i64 %13216
  %13218 = getelementptr inbounds i16, i16* %13217, i64 1
  %13219 = bitcast i16* %13218 to <16 x i16>*
  %13220 = load <16 x i16>, <16 x i16>* %13219, align 2, !tbaa !396
  %13221 = getelementptr inbounds i16, i16* %13217, i64 17
  %13222 = bitcast i16* %13221 to <16 x i16>*
  %13223 = load <16 x i16>, <16 x i16>* %13222, align 2, !tbaa !396
  %13224 = shufflevector <16 x i16> %13220, <16 x i16> %13223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13225 = getelementptr inbounds i16, i16* %13217, i64 2
  %13226 = bitcast i16* %13225 to <16 x i16>*
  %13227 = load <16 x i16>, <16 x i16>* %13226, align 2, !tbaa !396
  %13228 = getelementptr inbounds i16, i16* %13217, i64 18
  %13229 = bitcast i16* %13228 to <16 x i16>*
  %13230 = load <16 x i16>, <16 x i16>* %13229, align 2, !tbaa !396
  %13231 = shufflevector <16 x i16> %13227, <16 x i16> %13230, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13232 = bitcast i16* %13217 to <16 x i16>*
  %13233 = load <16 x i16>, <16 x i16>* %13232, align 2, !tbaa !396
  %13234 = getelementptr inbounds i16, i16* %13217, i64 16
  %13235 = bitcast i16* %13234 to <16 x i16>*
  %13236 = load <16 x i16>, <16 x i16>* %13235, align 2, !tbaa !396
  %13237 = shufflevector <16 x i16> %13233, <16 x i16> %13236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13238 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13237, <32 x i16> %13231, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13239 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13224, <32 x i16> %13238, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13240 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13239, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13241 = shufflevector <32 x i16> %13240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13242 = shl nsw i64 %13196, 5
  %13243 = add nsw i64 %13242, %13101
  %13244 = getelementptr inbounds i16, i16* %blur_x841, i64 %13243
  %13245 = bitcast i16* %13244 to <16 x i16>*
  store <16 x i16> %13241, <16 x i16>* %13245, align 2, !tbaa !399
  %13246 = shufflevector <32 x i16> %13240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13247 = getelementptr inbounds i16, i16* %13244, i64 16
  %13248 = bitcast i16* %13247 to <16 x i16>*
  store <16 x i16> %13246, <16 x i16>* %13248, align 2, !tbaa !399
  br label %"consume blur_x1182"

"consume blur_x1182":                             ; preds = %"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge", %"produce blur_x1180"
  %.pre-phi3446 = phi i64 [ %.pre3445, %"for blur_y.s0.x.x.rebased1174.consume blur_x1182_crit_edge" ], [ %13242, %"produce blur_x1180" ]
  %13249 = add nsw i64 %13104, %.pre-phi3446
  %13250 = getelementptr inbounds i16, i16* %blur_x841, i64 %13249
  %13251 = bitcast i16* %13250 to <16 x i16>*
  %13252 = load <16 x i16>, <16 x i16>* %13251, align 2, !tbaa !399
  %13253 = getelementptr inbounds i16, i16* %13250, i64 16
  %13254 = bitcast i16* %13253 to <16 x i16>*
  %13255 = load <16 x i16>, <16 x i16>* %13254, align 2, !tbaa !399
  %13256 = shufflevector <16 x i16> %13252, <16 x i16> %13255, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13257 = add nsw i64 %13107, %.pre-phi3446
  %13258 = getelementptr inbounds i16, i16* %blur_x841, i64 %13257
  %13259 = bitcast i16* %13258 to <16 x i16>*
  %13260 = load <16 x i16>, <16 x i16>* %13259, align 2, !tbaa !399
  %13261 = getelementptr inbounds i16, i16* %13258, i64 16
  %13262 = bitcast i16* %13261 to <16 x i16>*
  %13263 = load <16 x i16>, <16 x i16>* %13262, align 2, !tbaa !399
  %13264 = shufflevector <16 x i16> %13260, <16 x i16> %13263, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13265 = add nsw i64 %13110, %.pre-phi3446
  %13266 = getelementptr inbounds i16, i16* %blur_x841, i64 %13265
  %13267 = bitcast i16* %13266 to <16 x i16>*
  %13268 = load <16 x i16>, <16 x i16>* %13267, align 2, !tbaa !399
  %13269 = getelementptr inbounds i16, i16* %13266, i64 16
  %13270 = bitcast i16* %13269 to <16 x i16>*
  %13271 = load <16 x i16>, <16 x i16>* %13270, align 2, !tbaa !399
  %13272 = shufflevector <16 x i16> %13268, <16 x i16> %13271, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13273 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13272, <32 x i16> %13264, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13274 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13256, <32 x i16> %13273, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13275 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13274, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13276 = shufflevector <32 x i16> %13275, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13277 = add nsw i64 %13114, %.pre-phi3446
  %13278 = getelementptr inbounds i16, i16* %258, i64 %13277
  %13279 = bitcast i16* %13278 to <16 x i16>*
  store <16 x i16> %13276, <16 x i16>* %13279, align 2, !tbaa !401
  %13280 = shufflevector <32 x i16> %13275, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13281 = getelementptr inbounds i16, i16* %13278, i64 16
  %13282 = bitcast i16* %13281 to <16 x i16>*
  store <16 x i16> %13280, <16 x i16>* %13282, align 2, !tbaa !401
  %indvars.iv.next3262 = add nuw nsw i64 %indvars.iv3261, 1
  %13283 = icmp eq i64 %indvars.iv.next3262, %zext3263
  br i1 %13283, label %"end for blur_y.s0.x.x.rebased1175", label %"for blur_y.s0.x.x.rebased1174"

"for blur_y.s0.x.x.rebased1190":                  ; preds = %"for blur_y.s0.x.x.rebased1190.preheader", %"consume blur_x1201"
  %blur_y.s0.x.x.rebased1192 = phi i32 [ %13358, %"consume blur_x1201" ], [ 0, %"for blur_y.s0.x.x.rebased1190.preheader" ]
  %13284 = add nsw i32 %blur_y.s0.x.x.rebased1192, %t1582776
  %a1957 = shl nsw i32 %13284, 5
  %13285 = icmp sgt i32 %t1603, %a1957
  %blur_y.s0.x.v0.base.s1193 = select i1 %13285, i32 %a1957, i32 %t1603
  %13286 = icmp slt i32 %13284, 1
  %13287 = icmp sgt i32 %194, %a1957
  %13288 = or i1 %13286, %13287
  br i1 %13288, label %"produce blur_x1198", label %"consume blur_x1201"

"end for blur_y.s0.x.x.rebased1191":              ; preds = %"consume blur_x1201", %"end for blur_y.s0.x.x.rebased1175"
  br i1 %225, label %"produce blur_x1205", label %after_bb1202

"produce blur_x1198":                             ; preds = %"for blur_y.s0.x.x.rebased1190"
  %13289 = icmp slt i32 %blur_y.s0.x.v0.base.s1193, %194
  %blur_x.s0.x.v1.base.s1199 = select i1 %13289, i32 %blur_y.s0.x.v0.base.s1193, i32 %194
  %t7731200 = add nsw i32 %358, %blur_x.s0.x.v1.base.s1199
  %13290 = sext i32 %t7731200 to i64
  %13291 = getelementptr inbounds i16, i16* %read_input784, i64 %13290
  %13292 = getelementptr inbounds i16, i16* %13291, i64 1
  %13293 = bitcast i16* %13292 to <16 x i16>*
  %13294 = load <16 x i16>, <16 x i16>* %13293, align 2, !tbaa !396
  %13295 = getelementptr inbounds i16, i16* %13291, i64 17
  %13296 = bitcast i16* %13295 to <16 x i16>*
  %13297 = load <16 x i16>, <16 x i16>* %13296, align 2, !tbaa !396
  %13298 = shufflevector <16 x i16> %13294, <16 x i16> %13297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13299 = getelementptr inbounds i16, i16* %13291, i64 2
  %13300 = bitcast i16* %13299 to <16 x i16>*
  %13301 = load <16 x i16>, <16 x i16>* %13300, align 2, !tbaa !396
  %13302 = getelementptr inbounds i16, i16* %13291, i64 18
  %13303 = bitcast i16* %13302 to <16 x i16>*
  %13304 = load <16 x i16>, <16 x i16>* %13303, align 2, !tbaa !396
  %13305 = shufflevector <16 x i16> %13301, <16 x i16> %13304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13306 = bitcast i16* %13291 to <16 x i16>*
  %13307 = load <16 x i16>, <16 x i16>* %13306, align 2, !tbaa !396
  %13308 = getelementptr inbounds i16, i16* %13291, i64 16
  %13309 = bitcast i16* %13308 to <16 x i16>*
  %13310 = load <16 x i16>, <16 x i16>* %13309, align 2, !tbaa !396
  %13311 = shufflevector <16 x i16> %13307, <16 x i16> %13310, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13312 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13311, <32 x i16> %13305, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13313 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13298, <32 x i16> %13312, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13314 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13313, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13315 = shufflevector <32 x i16> %13314, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13316 = sext i32 %blur_x.s0.x.v1.base.s1199 to i64
  %13317 = add nsw i64 %13316, %13202
  %13318 = getelementptr inbounds i16, i16* %blur_x841, i64 %13317
  %13319 = bitcast i16* %13318 to <16 x i16>*
  store <16 x i16> %13315, <16 x i16>* %13319, align 2, !tbaa !399
  %13320 = shufflevector <32 x i16> %13314, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13321 = getelementptr inbounds i16, i16* %13318, i64 16
  %13322 = bitcast i16* %13321 to <16 x i16>*
  store <16 x i16> %13320, <16 x i16>* %13322, align 2, !tbaa !399
  br label %"consume blur_x1201"

"consume blur_x1201":                             ; preds = %"for blur_y.s0.x.x.rebased1190", %"produce blur_x1198"
  %13323 = sext i32 %blur_y.s0.x.v0.base.s1193 to i64
  %13324 = add nsw i64 %13205, %13323
  %13325 = getelementptr inbounds i16, i16* %blur_x841, i64 %13324
  %13326 = bitcast i16* %13325 to <16 x i16>*
  %13327 = load <16 x i16>, <16 x i16>* %13326, align 2, !tbaa !399
  %13328 = getelementptr inbounds i16, i16* %13325, i64 16
  %13329 = bitcast i16* %13328 to <16 x i16>*
  %13330 = load <16 x i16>, <16 x i16>* %13329, align 2, !tbaa !399
  %13331 = shufflevector <16 x i16> %13327, <16 x i16> %13330, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13332 = add nsw i64 %13208, %13323
  %13333 = getelementptr inbounds i16, i16* %blur_x841, i64 %13332
  %13334 = bitcast i16* %13333 to <16 x i16>*
  %13335 = load <16 x i16>, <16 x i16>* %13334, align 2, !tbaa !399
  %13336 = getelementptr inbounds i16, i16* %13333, i64 16
  %13337 = bitcast i16* %13336 to <16 x i16>*
  %13338 = load <16 x i16>, <16 x i16>* %13337, align 2, !tbaa !399
  %13339 = shufflevector <16 x i16> %13335, <16 x i16> %13338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13340 = add nsw i64 %13211, %13323
  %13341 = getelementptr inbounds i16, i16* %blur_x841, i64 %13340
  %13342 = bitcast i16* %13341 to <16 x i16>*
  %13343 = load <16 x i16>, <16 x i16>* %13342, align 2, !tbaa !399
  %13344 = getelementptr inbounds i16, i16* %13341, i64 16
  %13345 = bitcast i16* %13344 to <16 x i16>*
  %13346 = load <16 x i16>, <16 x i16>* %13345, align 2, !tbaa !399
  %13347 = shufflevector <16 x i16> %13343, <16 x i16> %13346, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13348 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13347, <32 x i16> %13339, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13349 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13331, <32 x i16> %13348, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13350 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13349, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13351 = shufflevector <32 x i16> %13350, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13352 = add nsw i64 %13215, %13323
  %13353 = getelementptr inbounds i16, i16* %258, i64 %13352
  %13354 = bitcast i16* %13353 to <16 x i16>*
  store <16 x i16> %13351, <16 x i16>* %13354, align 2, !tbaa !401
  %13355 = shufflevector <32 x i16> %13350, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13356 = getelementptr inbounds i16, i16* %13353, i64 16
  %13357 = bitcast i16* %13356 to <16 x i16>*
  store <16 x i16> %13355, <16 x i16>* %13357, align 2, !tbaa !401
  %13358 = add nuw nsw i32 %blur_y.s0.x.x.rebased1192, 1
  %.not2534 = icmp eq i32 %13358, %t1639860
  br i1 %.not2534, label %"end for blur_y.s0.x.x.rebased1191", label %"for blur_y.s0.x.x.rebased1190"

after_bb1202:                                     ; preds = %"end for blur_y.s0.x.x.rebased1191", %"produce blur_x1205"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1217.preheader", label %"end for blur_y.s0.x.x.rebased1218", !prof !386

"for blur_y.s0.x.x.rebased1217.preheader":        ; preds = %after_bb1202
  %13359 = sext i32 %t1644876 to i64
  %13360 = zext i32 %.pre-phi3420 to i64
  %13361 = mul nsw i64 %13360, %322
  %13362 = sub nsw i64 %13361, %293
  %13363 = zext i32 %.pre-phi3424 to i64
  %13364 = mul nsw i64 %13363, %322
  %13365 = sub nsw i64 %13364, %293
  %13366 = zext i32 %.pre-phi3434 to i64
  %13367 = mul nsw i64 %13366, %322
  %13368 = sub nsw i64 %13367, %293
  %13369 = sext i32 %a365 to i64
  %13370 = add nsw i64 %13369, 7
  %13371 = mul nsw i64 %13370, %319
  %13372 = add nsw i64 %13371, %323
  br label %"for blur_y.s0.x.x.rebased1217"

"produce blur_x1205":                             ; preds = %"end for blur_y.s0.x.x.rebased1191"
  %13373 = getelementptr inbounds i16, i16* %read_input784, i64 %362
  %13374 = getelementptr inbounds i16, i16* %13373, i64 -31
  %13375 = bitcast i16* %13374 to <16 x i16>*
  %13376 = load <16 x i16>, <16 x i16>* %13375, align 2, !tbaa !396
  %13377 = getelementptr inbounds i16, i16* %13373, i64 -15
  %13378 = bitcast i16* %13377 to <16 x i16>*
  %13379 = load <16 x i16>, <16 x i16>* %13378, align 2, !tbaa !396
  %13380 = shufflevector <16 x i16> %13376, <16 x i16> %13379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13381 = getelementptr inbounds i16, i16* %13373, i64 -30
  %13382 = bitcast i16* %13381 to <16 x i16>*
  %13383 = load <16 x i16>, <16 x i16>* %13382, align 2, !tbaa !396
  %13384 = getelementptr inbounds i16, i16* %13373, i64 -14
  %13385 = bitcast i16* %13384 to <16 x i16>*
  %13386 = load <16 x i16>, <16 x i16>* %13385, align 2, !tbaa !396
  %13387 = shufflevector <16 x i16> %13383, <16 x i16> %13386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13388 = getelementptr inbounds i16, i16* %13373, i64 -32
  %13389 = bitcast i16* %13388 to <16 x i16>*
  %13390 = load <16 x i16>, <16 x i16>* %13389, align 2, !tbaa !396
  %13391 = getelementptr inbounds i16, i16* %13373, i64 -16
  %13392 = bitcast i16* %13391 to <16 x i16>*
  %13393 = load <16 x i16>, <16 x i16>* %13392, align 2, !tbaa !396
  %13394 = shufflevector <16 x i16> %13390, <16 x i16> %13393, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13395 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13394, <32 x i16> %13387, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13396 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13380, <32 x i16> %13395, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13397 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13396, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13398 = shufflevector <32 x i16> %13397, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13399 = zext i32 %.pre-phi3424 to i64
  %13400 = mul nsw i64 %294, %13399
  %13401 = add nsw i64 %296, %13400
  %13402 = getelementptr inbounds i16, i16* %blur_x841, i64 %13401
  %13403 = getelementptr inbounds i16, i16* %13402, i64 -32
  %13404 = bitcast i16* %13403 to <16 x i16>*
  store <16 x i16> %13398, <16 x i16>* %13404, align 2, !tbaa !399
  %13405 = shufflevector <32 x i16> %13397, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13406 = getelementptr inbounds i16, i16* %13402, i64 -16
  %13407 = bitcast i16* %13406 to <16 x i16>*
  store <16 x i16> %13405, <16 x i16>* %13407, align 2, !tbaa !399
  %13408 = zext i32 %.pre-phi3420 to i64
  %13409 = mul nsw i64 %13408, %318
  %13410 = add nsw i64 %13409, %291
  %13411 = getelementptr inbounds i16, i16* %blur_x841, i64 %13410
  %13412 = getelementptr inbounds i16, i16* %13411, i64 -32
  %13413 = bitcast i16* %13412 to <16 x i16>*
  %13414 = load <16 x i16>, <16 x i16>* %13413, align 2, !tbaa !399
  %13415 = getelementptr inbounds i16, i16* %13411, i64 -16
  %13416 = bitcast i16* %13415 to <16 x i16>*
  %13417 = load <16 x i16>, <16 x i16>* %13416, align 2, !tbaa !399
  %13418 = shufflevector <16 x i16> %13414, <16 x i16> %13417, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13419 = mul nsw i64 %13399, %318
  %13420 = add nsw i64 %13419, %291
  %13421 = getelementptr inbounds i16, i16* %blur_x841, i64 %13420
  %13422 = getelementptr inbounds i16, i16* %13421, i64 -32
  %13423 = bitcast i16* %13422 to <16 x i16>*
  %13424 = load <16 x i16>, <16 x i16>* %13423, align 2, !tbaa !399
  %13425 = getelementptr inbounds i16, i16* %13421, i64 -16
  %13426 = bitcast i16* %13425 to <16 x i16>*
  %13427 = load <16 x i16>, <16 x i16>* %13426, align 2, !tbaa !399
  %13428 = shufflevector <16 x i16> %13424, <16 x i16> %13427, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13429 = zext i32 %.pre-phi3434 to i64
  %13430 = mul nsw i64 %13429, %318
  %13431 = add nsw i64 %13430, %291
  %13432 = getelementptr inbounds i16, i16* %blur_x841, i64 %13431
  %13433 = getelementptr inbounds i16, i16* %13432, i64 -32
  %13434 = bitcast i16* %13433 to <16 x i16>*
  %13435 = load <16 x i16>, <16 x i16>* %13434, align 2, !tbaa !399
  %13436 = getelementptr inbounds i16, i16* %13432, i64 -16
  %13437 = bitcast i16* %13436 to <16 x i16>*
  %13438 = load <16 x i16>, <16 x i16>* %13437, align 2, !tbaa !399
  %13439 = shufflevector <16 x i16> %13435, <16 x i16> %13438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13440 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13439, <32 x i16> %13428, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13441 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13418, <32 x i16> %13440, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13442 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13441, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13443 = shufflevector <32 x i16> %13442, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13444 = sext i32 %a365 to i64
  %13445 = add nsw i64 %13444, 7
  %13446 = mul nsw i64 %13445, %319
  %13447 = add nsw i64 %321, %13446
  %13448 = getelementptr inbounds i16, i16* %258, i64 %13447
  %13449 = getelementptr inbounds i16, i16* %13448, i64 -32
  %13450 = bitcast i16* %13449 to <16 x i16>*
  store <16 x i16> %13443, <16 x i16>* %13450, align 2, !tbaa !401
  %13451 = shufflevector <32 x i16> %13442, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13452 = getelementptr inbounds i16, i16* %13448, i64 -16
  %13453 = bitcast i16* %13452 to <16 x i16>*
  store <16 x i16> %13451, <16 x i16>* %13453, align 2, !tbaa !401
  br label %after_bb1202

"for blur_y.s0.x.x.rebased1217":                  ; preds = %"for blur_y.s0.x.x.rebased1217.preheader", %"consume blur_x1225"
  %indvars.iv3264 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1217.preheader" ], [ %indvars.iv.next3265, %"consume blur_x1225" ]
  %13454 = add nsw i64 %indvars.iv3264, %298
  %13455 = icmp slt i64 %13454, 1
  %13456 = trunc i64 %13454 to i32
  %13457 = shl nsw i32 %13456, 5
  %13458 = icmp sgt i32 %194, %13457
  %13459 = or i1 %13455, %13458
  br i1 %13459, label %"produce blur_x1223", label %"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge"

"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1217"
  %.pre3447 = shl nsw i64 %13454, 5
  br label %"consume blur_x1225"

"end for blur_y.s0.x.x.rebased1218":              ; preds = %"consume blur_x1225", %after_bb1202
  br i1 %299, label %"for blur_y.s0.x.x.rebased1233.preheader", label %"end for blur_y.s0.x.x.rebased1234", !prof !386

"for blur_y.s0.x.x.rebased1233.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1218"
  %13460 = sext i32 %t1644876 to i64
  %13461 = zext i32 %.pre-phi3420 to i64
  %13462 = mul nsw i64 %13461, %322
  %13463 = sub nsw i64 %13462, %293
  %13464 = zext i32 %.pre-phi3424 to i64
  %13465 = mul nsw i64 %13464, %322
  %13466 = sub nsw i64 %13465, %293
  %13467 = zext i32 %.pre-phi3434 to i64
  %13468 = mul nsw i64 %13467, %322
  %13469 = sub nsw i64 %13468, %293
  %13470 = sext i32 %a365 to i64
  %13471 = add nsw i64 %13470, 7
  %13472 = mul nsw i64 %13471, %319
  %13473 = add nsw i64 %13472, %323
  br label %"for blur_y.s0.x.x.rebased1233"

"produce blur_x1223":                             ; preds = %"for blur_y.s0.x.x.rebased1217"
  %t7841224 = add nsw i32 %364, %13457
  %13474 = sext i32 %t7841224 to i64
  %13475 = getelementptr inbounds i16, i16* %read_input784, i64 %13474
  %13476 = getelementptr inbounds i16, i16* %13475, i64 1
  %13477 = bitcast i16* %13476 to <16 x i16>*
  %13478 = load <16 x i16>, <16 x i16>* %13477, align 2, !tbaa !396
  %13479 = getelementptr inbounds i16, i16* %13475, i64 17
  %13480 = bitcast i16* %13479 to <16 x i16>*
  %13481 = load <16 x i16>, <16 x i16>* %13480, align 2, !tbaa !396
  %13482 = shufflevector <16 x i16> %13478, <16 x i16> %13481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13483 = getelementptr inbounds i16, i16* %13475, i64 2
  %13484 = bitcast i16* %13483 to <16 x i16>*
  %13485 = load <16 x i16>, <16 x i16>* %13484, align 2, !tbaa !396
  %13486 = getelementptr inbounds i16, i16* %13475, i64 18
  %13487 = bitcast i16* %13486 to <16 x i16>*
  %13488 = load <16 x i16>, <16 x i16>* %13487, align 2, !tbaa !396
  %13489 = shufflevector <16 x i16> %13485, <16 x i16> %13488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13490 = bitcast i16* %13475 to <16 x i16>*
  %13491 = load <16 x i16>, <16 x i16>* %13490, align 2, !tbaa !396
  %13492 = getelementptr inbounds i16, i16* %13475, i64 16
  %13493 = bitcast i16* %13492 to <16 x i16>*
  %13494 = load <16 x i16>, <16 x i16>* %13493, align 2, !tbaa !396
  %13495 = shufflevector <16 x i16> %13491, <16 x i16> %13494, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13496 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13495, <32 x i16> %13489, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13497 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13482, <32 x i16> %13496, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13498 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13497, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13499 = shufflevector <32 x i16> %13498, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13500 = shl nsw i64 %13454, 5
  %13501 = add nsw i64 %13500, %13359
  %13502 = getelementptr inbounds i16, i16* %blur_x841, i64 %13501
  %13503 = bitcast i16* %13502 to <16 x i16>*
  store <16 x i16> %13499, <16 x i16>* %13503, align 2, !tbaa !399
  %13504 = shufflevector <32 x i16> %13498, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13505 = getelementptr inbounds i16, i16* %13502, i64 16
  %13506 = bitcast i16* %13505 to <16 x i16>*
  store <16 x i16> %13504, <16 x i16>* %13506, align 2, !tbaa !399
  br label %"consume blur_x1225"

"consume blur_x1225":                             ; preds = %"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge", %"produce blur_x1223"
  %.pre-phi3448 = phi i64 [ %.pre3447, %"for blur_y.s0.x.x.rebased1217.consume blur_x1225_crit_edge" ], [ %13500, %"produce blur_x1223" ]
  %13507 = add nsw i64 %13362, %.pre-phi3448
  %13508 = getelementptr inbounds i16, i16* %blur_x841, i64 %13507
  %13509 = bitcast i16* %13508 to <16 x i16>*
  %13510 = load <16 x i16>, <16 x i16>* %13509, align 2, !tbaa !399
  %13511 = getelementptr inbounds i16, i16* %13508, i64 16
  %13512 = bitcast i16* %13511 to <16 x i16>*
  %13513 = load <16 x i16>, <16 x i16>* %13512, align 2, !tbaa !399
  %13514 = shufflevector <16 x i16> %13510, <16 x i16> %13513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13515 = add nsw i64 %13365, %.pre-phi3448
  %13516 = getelementptr inbounds i16, i16* %blur_x841, i64 %13515
  %13517 = bitcast i16* %13516 to <16 x i16>*
  %13518 = load <16 x i16>, <16 x i16>* %13517, align 2, !tbaa !399
  %13519 = getelementptr inbounds i16, i16* %13516, i64 16
  %13520 = bitcast i16* %13519 to <16 x i16>*
  %13521 = load <16 x i16>, <16 x i16>* %13520, align 2, !tbaa !399
  %13522 = shufflevector <16 x i16> %13518, <16 x i16> %13521, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13523 = add nsw i64 %13368, %.pre-phi3448
  %13524 = getelementptr inbounds i16, i16* %blur_x841, i64 %13523
  %13525 = bitcast i16* %13524 to <16 x i16>*
  %13526 = load <16 x i16>, <16 x i16>* %13525, align 2, !tbaa !399
  %13527 = getelementptr inbounds i16, i16* %13524, i64 16
  %13528 = bitcast i16* %13527 to <16 x i16>*
  %13529 = load <16 x i16>, <16 x i16>* %13528, align 2, !tbaa !399
  %13530 = shufflevector <16 x i16> %13526, <16 x i16> %13529, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13531 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13530, <32 x i16> %13522, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13532 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13514, <32 x i16> %13531, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13533 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13532, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13534 = shufflevector <32 x i16> %13533, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13535 = add nsw i64 %13372, %.pre-phi3448
  %13536 = getelementptr inbounds i16, i16* %258, i64 %13535
  %13537 = bitcast i16* %13536 to <16 x i16>*
  store <16 x i16> %13534, <16 x i16>* %13537, align 2, !tbaa !401
  %13538 = shufflevector <32 x i16> %13533, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13539 = getelementptr inbounds i16, i16* %13536, i64 16
  %13540 = bitcast i16* %13539 to <16 x i16>*
  store <16 x i16> %13538, <16 x i16>* %13540, align 2, !tbaa !401
  %indvars.iv.next3265 = add nuw nsw i64 %indvars.iv3264, 1
  %13541 = icmp eq i64 %indvars.iv.next3265, %zext3266
  br i1 %13541, label %"end for blur_y.s0.x.x.rebased1218", label %"for blur_y.s0.x.x.rebased1217"

"for blur_y.s0.x.x.rebased1233":                  ; preds = %"for blur_y.s0.x.x.rebased1233.preheader", %"consume blur_x1244"
  %blur_y.s0.x.x.rebased1235 = phi i32 [ %13616, %"consume blur_x1244" ], [ 0, %"for blur_y.s0.x.x.rebased1233.preheader" ]
  %13542 = add nsw i32 %blur_y.s0.x.x.rebased1235, %t1582776
  %a2114 = shl nsw i32 %13542, 5
  %13543 = icmp sgt i32 %t1603, %a2114
  %blur_y.s0.x.v0.base.s1236 = select i1 %13543, i32 %a2114, i32 %t1603
  %13544 = icmp slt i32 %13542, 1
  %13545 = icmp sgt i32 %194, %a2114
  %13546 = or i1 %13544, %13545
  br i1 %13546, label %"produce blur_x1241", label %"consume blur_x1244"

"end for blur_y.s0.x.x.rebased1234":              ; preds = %"consume blur_x1244", %"end for blur_y.s0.x.x.rebased1218"
  br i1 %225, label %"produce blur_x1248", label %after_bb1245

"produce blur_x1241":                             ; preds = %"for blur_y.s0.x.x.rebased1233"
  %13547 = icmp slt i32 %blur_y.s0.x.v0.base.s1236, %194
  %blur_x.s0.x.v1.base.s1242 = select i1 %13547, i32 %blur_y.s0.x.v0.base.s1236, i32 %194
  %t7891243 = add nsw i32 %364, %blur_x.s0.x.v1.base.s1242
  %13548 = sext i32 %t7891243 to i64
  %13549 = getelementptr inbounds i16, i16* %read_input784, i64 %13548
  %13550 = getelementptr inbounds i16, i16* %13549, i64 1
  %13551 = bitcast i16* %13550 to <16 x i16>*
  %13552 = load <16 x i16>, <16 x i16>* %13551, align 2, !tbaa !396
  %13553 = getelementptr inbounds i16, i16* %13549, i64 17
  %13554 = bitcast i16* %13553 to <16 x i16>*
  %13555 = load <16 x i16>, <16 x i16>* %13554, align 2, !tbaa !396
  %13556 = shufflevector <16 x i16> %13552, <16 x i16> %13555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13557 = getelementptr inbounds i16, i16* %13549, i64 2
  %13558 = bitcast i16* %13557 to <16 x i16>*
  %13559 = load <16 x i16>, <16 x i16>* %13558, align 2, !tbaa !396
  %13560 = getelementptr inbounds i16, i16* %13549, i64 18
  %13561 = bitcast i16* %13560 to <16 x i16>*
  %13562 = load <16 x i16>, <16 x i16>* %13561, align 2, !tbaa !396
  %13563 = shufflevector <16 x i16> %13559, <16 x i16> %13562, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13564 = bitcast i16* %13549 to <16 x i16>*
  %13565 = load <16 x i16>, <16 x i16>* %13564, align 2, !tbaa !396
  %13566 = getelementptr inbounds i16, i16* %13549, i64 16
  %13567 = bitcast i16* %13566 to <16 x i16>*
  %13568 = load <16 x i16>, <16 x i16>* %13567, align 2, !tbaa !396
  %13569 = shufflevector <16 x i16> %13565, <16 x i16> %13568, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13570 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13569, <32 x i16> %13563, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13571 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13556, <32 x i16> %13570, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13572 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13571, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13573 = shufflevector <32 x i16> %13572, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13574 = sext i32 %blur_x.s0.x.v1.base.s1242 to i64
  %13575 = add nsw i64 %13574, %13460
  %13576 = getelementptr inbounds i16, i16* %blur_x841, i64 %13575
  %13577 = bitcast i16* %13576 to <16 x i16>*
  store <16 x i16> %13573, <16 x i16>* %13577, align 2, !tbaa !399
  %13578 = shufflevector <32 x i16> %13572, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13579 = getelementptr inbounds i16, i16* %13576, i64 16
  %13580 = bitcast i16* %13579 to <16 x i16>*
  store <16 x i16> %13578, <16 x i16>* %13580, align 2, !tbaa !399
  br label %"consume blur_x1244"

"consume blur_x1244":                             ; preds = %"for blur_y.s0.x.x.rebased1233", %"produce blur_x1241"
  %13581 = sext i32 %blur_y.s0.x.v0.base.s1236 to i64
  %13582 = add nsw i64 %13463, %13581
  %13583 = getelementptr inbounds i16, i16* %blur_x841, i64 %13582
  %13584 = bitcast i16* %13583 to <16 x i16>*
  %13585 = load <16 x i16>, <16 x i16>* %13584, align 2, !tbaa !399
  %13586 = getelementptr inbounds i16, i16* %13583, i64 16
  %13587 = bitcast i16* %13586 to <16 x i16>*
  %13588 = load <16 x i16>, <16 x i16>* %13587, align 2, !tbaa !399
  %13589 = shufflevector <16 x i16> %13585, <16 x i16> %13588, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13590 = add nsw i64 %13466, %13581
  %13591 = getelementptr inbounds i16, i16* %blur_x841, i64 %13590
  %13592 = bitcast i16* %13591 to <16 x i16>*
  %13593 = load <16 x i16>, <16 x i16>* %13592, align 2, !tbaa !399
  %13594 = getelementptr inbounds i16, i16* %13591, i64 16
  %13595 = bitcast i16* %13594 to <16 x i16>*
  %13596 = load <16 x i16>, <16 x i16>* %13595, align 2, !tbaa !399
  %13597 = shufflevector <16 x i16> %13593, <16 x i16> %13596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13598 = add nsw i64 %13469, %13581
  %13599 = getelementptr inbounds i16, i16* %blur_x841, i64 %13598
  %13600 = bitcast i16* %13599 to <16 x i16>*
  %13601 = load <16 x i16>, <16 x i16>* %13600, align 2, !tbaa !399
  %13602 = getelementptr inbounds i16, i16* %13599, i64 16
  %13603 = bitcast i16* %13602 to <16 x i16>*
  %13604 = load <16 x i16>, <16 x i16>* %13603, align 2, !tbaa !399
  %13605 = shufflevector <16 x i16> %13601, <16 x i16> %13604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13606 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13605, <32 x i16> %13597, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13607 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13589, <32 x i16> %13606, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13608 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13607, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13609 = shufflevector <32 x i16> %13608, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13610 = add nsw i64 %13473, %13581
  %13611 = getelementptr inbounds i16, i16* %258, i64 %13610
  %13612 = bitcast i16* %13611 to <16 x i16>*
  store <16 x i16> %13609, <16 x i16>* %13612, align 2, !tbaa !401
  %13613 = shufflevector <32 x i16> %13608, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13614 = getelementptr inbounds i16, i16* %13611, i64 16
  %13615 = bitcast i16* %13614 to <16 x i16>*
  store <16 x i16> %13613, <16 x i16>* %13615, align 2, !tbaa !401
  %13616 = add nuw nsw i32 %blur_y.s0.x.x.rebased1235, 1
  %.not2530 = icmp eq i32 %13616, %t1639860
  br i1 %.not2530, label %"end for blur_y.s0.x.x.rebased1234", label %"for blur_y.s0.x.x.rebased1233"

after_bb1245:                                     ; preds = %"end for blur_y.s0.x.x.rebased1234", %"produce blur_x1248"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1260.preheader", label %"end for blur_y.s0.x.x.rebased1261", !prof !386

"for blur_y.s0.x.x.rebased1260.preheader":        ; preds = %after_bb1245
  %13617 = sext i32 %t1650912 to i64
  %13618 = zext i32 %.pre-phi3424 to i64
  %13619 = mul nsw i64 %13618, %322
  %13620 = sub nsw i64 %13619, %293
  %13621 = zext i32 %.pre-phi3428 to i64
  %13622 = mul nsw i64 %13621, %322
  %13623 = sub nsw i64 %13622, %293
  %13624 = zext i32 %.pre-phi3420 to i64
  %13625 = mul nsw i64 %13624, %322
  %13626 = sub nsw i64 %13625, %293
  %13627 = sext i32 %a365 to i64
  %13628 = add nsw i64 %13627, 8
  %13629 = mul nsw i64 %13628, %319
  %13630 = add nsw i64 %13629, %323
  br label %"for blur_y.s0.x.x.rebased1260"

"produce blur_x1248":                             ; preds = %"end for blur_y.s0.x.x.rebased1234"
  %13631 = getelementptr inbounds i16, i16* %read_input784, i64 %368
  %13632 = getelementptr inbounds i16, i16* %13631, i64 -31
  %13633 = bitcast i16* %13632 to <16 x i16>*
  %13634 = load <16 x i16>, <16 x i16>* %13633, align 2, !tbaa !396
  %13635 = getelementptr inbounds i16, i16* %13631, i64 -15
  %13636 = bitcast i16* %13635 to <16 x i16>*
  %13637 = load <16 x i16>, <16 x i16>* %13636, align 2, !tbaa !396
  %13638 = shufflevector <16 x i16> %13634, <16 x i16> %13637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13639 = getelementptr inbounds i16, i16* %13631, i64 -30
  %13640 = bitcast i16* %13639 to <16 x i16>*
  %13641 = load <16 x i16>, <16 x i16>* %13640, align 2, !tbaa !396
  %13642 = getelementptr inbounds i16, i16* %13631, i64 -14
  %13643 = bitcast i16* %13642 to <16 x i16>*
  %13644 = load <16 x i16>, <16 x i16>* %13643, align 2, !tbaa !396
  %13645 = shufflevector <16 x i16> %13641, <16 x i16> %13644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13646 = getelementptr inbounds i16, i16* %13631, i64 -32
  %13647 = bitcast i16* %13646 to <16 x i16>*
  %13648 = load <16 x i16>, <16 x i16>* %13647, align 2, !tbaa !396
  %13649 = getelementptr inbounds i16, i16* %13631, i64 -16
  %13650 = bitcast i16* %13649 to <16 x i16>*
  %13651 = load <16 x i16>, <16 x i16>* %13650, align 2, !tbaa !396
  %13652 = shufflevector <16 x i16> %13648, <16 x i16> %13651, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13653 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13652, <32 x i16> %13645, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13654 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13638, <32 x i16> %13653, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13655 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13654, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13656 = shufflevector <32 x i16> %13655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13657 = zext i32 %.pre-phi3428 to i64
  %13658 = mul nsw i64 %294, %13657
  %13659 = add nsw i64 %296, %13658
  %13660 = getelementptr inbounds i16, i16* %blur_x841, i64 %13659
  %13661 = getelementptr inbounds i16, i16* %13660, i64 -32
  %13662 = bitcast i16* %13661 to <16 x i16>*
  store <16 x i16> %13656, <16 x i16>* %13662, align 2, !tbaa !399
  %13663 = shufflevector <32 x i16> %13655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13664 = getelementptr inbounds i16, i16* %13660, i64 -16
  %13665 = bitcast i16* %13664 to <16 x i16>*
  store <16 x i16> %13663, <16 x i16>* %13665, align 2, !tbaa !399
  %13666 = zext i32 %.pre-phi3424 to i64
  %13667 = mul nsw i64 %13666, %318
  %13668 = add nsw i64 %13667, %291
  %13669 = getelementptr inbounds i16, i16* %blur_x841, i64 %13668
  %13670 = getelementptr inbounds i16, i16* %13669, i64 -32
  %13671 = bitcast i16* %13670 to <16 x i16>*
  %13672 = load <16 x i16>, <16 x i16>* %13671, align 2, !tbaa !399
  %13673 = getelementptr inbounds i16, i16* %13669, i64 -16
  %13674 = bitcast i16* %13673 to <16 x i16>*
  %13675 = load <16 x i16>, <16 x i16>* %13674, align 2, !tbaa !399
  %13676 = shufflevector <16 x i16> %13672, <16 x i16> %13675, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13677 = mul nsw i64 %13657, %318
  %13678 = add nsw i64 %13677, %291
  %13679 = getelementptr inbounds i16, i16* %blur_x841, i64 %13678
  %13680 = getelementptr inbounds i16, i16* %13679, i64 -32
  %13681 = bitcast i16* %13680 to <16 x i16>*
  %13682 = load <16 x i16>, <16 x i16>* %13681, align 2, !tbaa !399
  %13683 = getelementptr inbounds i16, i16* %13679, i64 -16
  %13684 = bitcast i16* %13683 to <16 x i16>*
  %13685 = load <16 x i16>, <16 x i16>* %13684, align 2, !tbaa !399
  %13686 = shufflevector <16 x i16> %13682, <16 x i16> %13685, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13687 = zext i32 %.pre-phi3420 to i64
  %13688 = mul nsw i64 %13687, %318
  %13689 = add nsw i64 %13688, %291
  %13690 = getelementptr inbounds i16, i16* %blur_x841, i64 %13689
  %13691 = getelementptr inbounds i16, i16* %13690, i64 -32
  %13692 = bitcast i16* %13691 to <16 x i16>*
  %13693 = load <16 x i16>, <16 x i16>* %13692, align 2, !tbaa !399
  %13694 = getelementptr inbounds i16, i16* %13690, i64 -16
  %13695 = bitcast i16* %13694 to <16 x i16>*
  %13696 = load <16 x i16>, <16 x i16>* %13695, align 2, !tbaa !399
  %13697 = shufflevector <16 x i16> %13693, <16 x i16> %13696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13698 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13697, <32 x i16> %13686, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13699 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13676, <32 x i16> %13698, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13700 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13699, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13701 = shufflevector <32 x i16> %13700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13702 = sext i32 %a365 to i64
  %13703 = add nsw i64 %13702, 8
  %13704 = mul nsw i64 %13703, %319
  %13705 = add nsw i64 %321, %13704
  %13706 = getelementptr inbounds i16, i16* %258, i64 %13705
  %13707 = getelementptr inbounds i16, i16* %13706, i64 -32
  %13708 = bitcast i16* %13707 to <16 x i16>*
  store <16 x i16> %13701, <16 x i16>* %13708, align 2, !tbaa !401
  %13709 = shufflevector <32 x i16> %13700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13710 = getelementptr inbounds i16, i16* %13706, i64 -16
  %13711 = bitcast i16* %13710 to <16 x i16>*
  store <16 x i16> %13709, <16 x i16>* %13711, align 2, !tbaa !401
  br label %after_bb1245

"for blur_y.s0.x.x.rebased1260":                  ; preds = %"for blur_y.s0.x.x.rebased1260.preheader", %"consume blur_x1268"
  %indvars.iv3267 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1260.preheader" ], [ %indvars.iv.next3268, %"consume blur_x1268" ]
  %13712 = add nsw i64 %indvars.iv3267, %298
  %13713 = icmp slt i64 %13712, 1
  %13714 = trunc i64 %13712 to i32
  %13715 = shl nsw i32 %13714, 5
  %13716 = icmp sgt i32 %194, %13715
  %13717 = or i1 %13713, %13716
  br i1 %13717, label %"produce blur_x1266", label %"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge"

"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1260"
  %.pre3449 = shl nsw i64 %13712, 5
  br label %"consume blur_x1268"

"end for blur_y.s0.x.x.rebased1261":              ; preds = %"consume blur_x1268", %after_bb1245
  br i1 %299, label %"for blur_y.s0.x.x.rebased1276.preheader", label %"end for blur_y.s0.x.x.rebased1277", !prof !386

"for blur_y.s0.x.x.rebased1276.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1261"
  %13718 = sext i32 %t1650912 to i64
  %13719 = zext i32 %.pre-phi3424 to i64
  %13720 = mul nsw i64 %13719, %322
  %13721 = sub nsw i64 %13720, %293
  %13722 = zext i32 %.pre-phi3428 to i64
  %13723 = mul nsw i64 %13722, %322
  %13724 = sub nsw i64 %13723, %293
  %13725 = zext i32 %.pre-phi3420 to i64
  %13726 = mul nsw i64 %13725, %322
  %13727 = sub nsw i64 %13726, %293
  %13728 = sext i32 %a365 to i64
  %13729 = add nsw i64 %13728, 8
  %13730 = mul nsw i64 %13729, %319
  %13731 = add nsw i64 %13730, %323
  br label %"for blur_y.s0.x.x.rebased1276"

"produce blur_x1266":                             ; preds = %"for blur_y.s0.x.x.rebased1260"
  %t8001267 = add nsw i32 %370, %13715
  %13732 = sext i32 %t8001267 to i64
  %13733 = getelementptr inbounds i16, i16* %read_input784, i64 %13732
  %13734 = getelementptr inbounds i16, i16* %13733, i64 1
  %13735 = bitcast i16* %13734 to <16 x i16>*
  %13736 = load <16 x i16>, <16 x i16>* %13735, align 2, !tbaa !396
  %13737 = getelementptr inbounds i16, i16* %13733, i64 17
  %13738 = bitcast i16* %13737 to <16 x i16>*
  %13739 = load <16 x i16>, <16 x i16>* %13738, align 2, !tbaa !396
  %13740 = shufflevector <16 x i16> %13736, <16 x i16> %13739, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13741 = getelementptr inbounds i16, i16* %13733, i64 2
  %13742 = bitcast i16* %13741 to <16 x i16>*
  %13743 = load <16 x i16>, <16 x i16>* %13742, align 2, !tbaa !396
  %13744 = getelementptr inbounds i16, i16* %13733, i64 18
  %13745 = bitcast i16* %13744 to <16 x i16>*
  %13746 = load <16 x i16>, <16 x i16>* %13745, align 2, !tbaa !396
  %13747 = shufflevector <16 x i16> %13743, <16 x i16> %13746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13748 = bitcast i16* %13733 to <16 x i16>*
  %13749 = load <16 x i16>, <16 x i16>* %13748, align 2, !tbaa !396
  %13750 = getelementptr inbounds i16, i16* %13733, i64 16
  %13751 = bitcast i16* %13750 to <16 x i16>*
  %13752 = load <16 x i16>, <16 x i16>* %13751, align 2, !tbaa !396
  %13753 = shufflevector <16 x i16> %13749, <16 x i16> %13752, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13754 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13753, <32 x i16> %13747, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13755 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13740, <32 x i16> %13754, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13756 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13755, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13757 = shufflevector <32 x i16> %13756, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13758 = shl nsw i64 %13712, 5
  %13759 = add nsw i64 %13758, %13617
  %13760 = getelementptr inbounds i16, i16* %blur_x841, i64 %13759
  %13761 = bitcast i16* %13760 to <16 x i16>*
  store <16 x i16> %13757, <16 x i16>* %13761, align 2, !tbaa !399
  %13762 = shufflevector <32 x i16> %13756, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13763 = getelementptr inbounds i16, i16* %13760, i64 16
  %13764 = bitcast i16* %13763 to <16 x i16>*
  store <16 x i16> %13762, <16 x i16>* %13764, align 2, !tbaa !399
  br label %"consume blur_x1268"

"consume blur_x1268":                             ; preds = %"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge", %"produce blur_x1266"
  %.pre-phi3450 = phi i64 [ %.pre3449, %"for blur_y.s0.x.x.rebased1260.consume blur_x1268_crit_edge" ], [ %13758, %"produce blur_x1266" ]
  %13765 = add nsw i64 %13620, %.pre-phi3450
  %13766 = getelementptr inbounds i16, i16* %blur_x841, i64 %13765
  %13767 = bitcast i16* %13766 to <16 x i16>*
  %13768 = load <16 x i16>, <16 x i16>* %13767, align 2, !tbaa !399
  %13769 = getelementptr inbounds i16, i16* %13766, i64 16
  %13770 = bitcast i16* %13769 to <16 x i16>*
  %13771 = load <16 x i16>, <16 x i16>* %13770, align 2, !tbaa !399
  %13772 = shufflevector <16 x i16> %13768, <16 x i16> %13771, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13773 = add nsw i64 %13623, %.pre-phi3450
  %13774 = getelementptr inbounds i16, i16* %blur_x841, i64 %13773
  %13775 = bitcast i16* %13774 to <16 x i16>*
  %13776 = load <16 x i16>, <16 x i16>* %13775, align 2, !tbaa !399
  %13777 = getelementptr inbounds i16, i16* %13774, i64 16
  %13778 = bitcast i16* %13777 to <16 x i16>*
  %13779 = load <16 x i16>, <16 x i16>* %13778, align 2, !tbaa !399
  %13780 = shufflevector <16 x i16> %13776, <16 x i16> %13779, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13781 = add nsw i64 %13626, %.pre-phi3450
  %13782 = getelementptr inbounds i16, i16* %blur_x841, i64 %13781
  %13783 = bitcast i16* %13782 to <16 x i16>*
  %13784 = load <16 x i16>, <16 x i16>* %13783, align 2, !tbaa !399
  %13785 = getelementptr inbounds i16, i16* %13782, i64 16
  %13786 = bitcast i16* %13785 to <16 x i16>*
  %13787 = load <16 x i16>, <16 x i16>* %13786, align 2, !tbaa !399
  %13788 = shufflevector <16 x i16> %13784, <16 x i16> %13787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13789 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13788, <32 x i16> %13780, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13790 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13772, <32 x i16> %13789, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13791 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13790, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13792 = shufflevector <32 x i16> %13791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13793 = add nsw i64 %13630, %.pre-phi3450
  %13794 = getelementptr inbounds i16, i16* %258, i64 %13793
  %13795 = bitcast i16* %13794 to <16 x i16>*
  store <16 x i16> %13792, <16 x i16>* %13795, align 2, !tbaa !401
  %13796 = shufflevector <32 x i16> %13791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13797 = getelementptr inbounds i16, i16* %13794, i64 16
  %13798 = bitcast i16* %13797 to <16 x i16>*
  store <16 x i16> %13796, <16 x i16>* %13798, align 2, !tbaa !401
  %indvars.iv.next3268 = add nuw nsw i64 %indvars.iv3267, 1
  %13799 = icmp eq i64 %indvars.iv.next3268, %zext3269
  br i1 %13799, label %"end for blur_y.s0.x.x.rebased1261", label %"for blur_y.s0.x.x.rebased1260"

"for blur_y.s0.x.x.rebased1276":                  ; preds = %"for blur_y.s0.x.x.rebased1276.preheader", %"consume blur_x1287"
  %blur_y.s0.x.x.rebased1278 = phi i32 [ %13874, %"consume blur_x1287" ], [ 0, %"for blur_y.s0.x.x.rebased1276.preheader" ]
  %13800 = add nsw i32 %blur_y.s0.x.x.rebased1278, %t1582776
  %a2271 = shl nsw i32 %13800, 5
  %13801 = icmp sgt i32 %t1603, %a2271
  %blur_y.s0.x.v0.base.s1279 = select i1 %13801, i32 %a2271, i32 %t1603
  %13802 = icmp slt i32 %13800, 1
  %13803 = icmp sgt i32 %194, %a2271
  %13804 = or i1 %13802, %13803
  br i1 %13804, label %"produce blur_x1284", label %"consume blur_x1287"

"end for blur_y.s0.x.x.rebased1277":              ; preds = %"consume blur_x1287", %"end for blur_y.s0.x.x.rebased1261"
  br i1 %225, label %"produce blur_x1291", label %after_bb1288

"produce blur_x1284":                             ; preds = %"for blur_y.s0.x.x.rebased1276"
  %13805 = icmp slt i32 %blur_y.s0.x.v0.base.s1279, %194
  %blur_x.s0.x.v1.base.s1285 = select i1 %13805, i32 %blur_y.s0.x.v0.base.s1279, i32 %194
  %t8051286 = add nsw i32 %370, %blur_x.s0.x.v1.base.s1285
  %13806 = sext i32 %t8051286 to i64
  %13807 = getelementptr inbounds i16, i16* %read_input784, i64 %13806
  %13808 = getelementptr inbounds i16, i16* %13807, i64 1
  %13809 = bitcast i16* %13808 to <16 x i16>*
  %13810 = load <16 x i16>, <16 x i16>* %13809, align 2, !tbaa !396
  %13811 = getelementptr inbounds i16, i16* %13807, i64 17
  %13812 = bitcast i16* %13811 to <16 x i16>*
  %13813 = load <16 x i16>, <16 x i16>* %13812, align 2, !tbaa !396
  %13814 = shufflevector <16 x i16> %13810, <16 x i16> %13813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13815 = getelementptr inbounds i16, i16* %13807, i64 2
  %13816 = bitcast i16* %13815 to <16 x i16>*
  %13817 = load <16 x i16>, <16 x i16>* %13816, align 2, !tbaa !396
  %13818 = getelementptr inbounds i16, i16* %13807, i64 18
  %13819 = bitcast i16* %13818 to <16 x i16>*
  %13820 = load <16 x i16>, <16 x i16>* %13819, align 2, !tbaa !396
  %13821 = shufflevector <16 x i16> %13817, <16 x i16> %13820, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13822 = bitcast i16* %13807 to <16 x i16>*
  %13823 = load <16 x i16>, <16 x i16>* %13822, align 2, !tbaa !396
  %13824 = getelementptr inbounds i16, i16* %13807, i64 16
  %13825 = bitcast i16* %13824 to <16 x i16>*
  %13826 = load <16 x i16>, <16 x i16>* %13825, align 2, !tbaa !396
  %13827 = shufflevector <16 x i16> %13823, <16 x i16> %13826, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13828 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13827, <32 x i16> %13821, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13829 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13814, <32 x i16> %13828, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13830 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13829, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13831 = shufflevector <32 x i16> %13830, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13832 = sext i32 %blur_x.s0.x.v1.base.s1285 to i64
  %13833 = add nsw i64 %13832, %13718
  %13834 = getelementptr inbounds i16, i16* %blur_x841, i64 %13833
  %13835 = bitcast i16* %13834 to <16 x i16>*
  store <16 x i16> %13831, <16 x i16>* %13835, align 2, !tbaa !399
  %13836 = shufflevector <32 x i16> %13830, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13837 = getelementptr inbounds i16, i16* %13834, i64 16
  %13838 = bitcast i16* %13837 to <16 x i16>*
  store <16 x i16> %13836, <16 x i16>* %13838, align 2, !tbaa !399
  br label %"consume blur_x1287"

"consume blur_x1287":                             ; preds = %"for blur_y.s0.x.x.rebased1276", %"produce blur_x1284"
  %13839 = sext i32 %blur_y.s0.x.v0.base.s1279 to i64
  %13840 = add nsw i64 %13721, %13839
  %13841 = getelementptr inbounds i16, i16* %blur_x841, i64 %13840
  %13842 = bitcast i16* %13841 to <16 x i16>*
  %13843 = load <16 x i16>, <16 x i16>* %13842, align 2, !tbaa !399
  %13844 = getelementptr inbounds i16, i16* %13841, i64 16
  %13845 = bitcast i16* %13844 to <16 x i16>*
  %13846 = load <16 x i16>, <16 x i16>* %13845, align 2, !tbaa !399
  %13847 = shufflevector <16 x i16> %13843, <16 x i16> %13846, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13848 = add nsw i64 %13724, %13839
  %13849 = getelementptr inbounds i16, i16* %blur_x841, i64 %13848
  %13850 = bitcast i16* %13849 to <16 x i16>*
  %13851 = load <16 x i16>, <16 x i16>* %13850, align 2, !tbaa !399
  %13852 = getelementptr inbounds i16, i16* %13849, i64 16
  %13853 = bitcast i16* %13852 to <16 x i16>*
  %13854 = load <16 x i16>, <16 x i16>* %13853, align 2, !tbaa !399
  %13855 = shufflevector <16 x i16> %13851, <16 x i16> %13854, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13856 = add nsw i64 %13727, %13839
  %13857 = getelementptr inbounds i16, i16* %blur_x841, i64 %13856
  %13858 = bitcast i16* %13857 to <16 x i16>*
  %13859 = load <16 x i16>, <16 x i16>* %13858, align 2, !tbaa !399
  %13860 = getelementptr inbounds i16, i16* %13857, i64 16
  %13861 = bitcast i16* %13860 to <16 x i16>*
  %13862 = load <16 x i16>, <16 x i16>* %13861, align 2, !tbaa !399
  %13863 = shufflevector <16 x i16> %13859, <16 x i16> %13862, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13864 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13863, <32 x i16> %13855, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13865 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13847, <32 x i16> %13864, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13866 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13865, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13867 = shufflevector <32 x i16> %13866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13868 = add nsw i64 %13731, %13839
  %13869 = getelementptr inbounds i16, i16* %258, i64 %13868
  %13870 = bitcast i16* %13869 to <16 x i16>*
  store <16 x i16> %13867, <16 x i16>* %13870, align 2, !tbaa !401
  %13871 = shufflevector <32 x i16> %13866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13872 = getelementptr inbounds i16, i16* %13869, i64 16
  %13873 = bitcast i16* %13872 to <16 x i16>*
  store <16 x i16> %13871, <16 x i16>* %13873, align 2, !tbaa !401
  %13874 = add nuw nsw i32 %blur_y.s0.x.x.rebased1278, 1
  %.not2526 = icmp eq i32 %13874, %t1639860
  br i1 %.not2526, label %"end for blur_y.s0.x.x.rebased1277", label %"for blur_y.s0.x.x.rebased1276"

after_bb1288:                                     ; preds = %"end for blur_y.s0.x.x.rebased1277", %"produce blur_x1291"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1303.preheader", label %"end for blur_y.s0.x.x.rebased1304", !prof !386

"for blur_y.s0.x.x.rebased1303.preheader":        ; preds = %after_bb1288
  %13875 = sext i32 %t1666955 to i64
  %13876 = zext i32 %.pre-phi3428 to i64
  %13877 = mul nsw i64 %13876, %322
  %13878 = sub nsw i64 %13877, %293
  %13879 = zext i32 %.pre-phi3434 to i64
  %13880 = mul nsw i64 %13879, %322
  %13881 = sub nsw i64 %13880, %293
  %13882 = zext i32 %.pre-phi3424 to i64
  %13883 = mul nsw i64 %13882, %322
  %13884 = sub nsw i64 %13883, %293
  %13885 = sext i32 %a365 to i64
  %13886 = add nsw i64 %13885, 9
  %13887 = mul nsw i64 %13886, %319
  %13888 = add nsw i64 %13887, %323
  br label %"for blur_y.s0.x.x.rebased1303"

"produce blur_x1291":                             ; preds = %"end for blur_y.s0.x.x.rebased1277"
  %13889 = getelementptr inbounds i16, i16* %read_input784, i64 %374
  %13890 = getelementptr inbounds i16, i16* %13889, i64 -31
  %13891 = bitcast i16* %13890 to <16 x i16>*
  %13892 = load <16 x i16>, <16 x i16>* %13891, align 2, !tbaa !396
  %13893 = getelementptr inbounds i16, i16* %13889, i64 -15
  %13894 = bitcast i16* %13893 to <16 x i16>*
  %13895 = load <16 x i16>, <16 x i16>* %13894, align 2, !tbaa !396
  %13896 = shufflevector <16 x i16> %13892, <16 x i16> %13895, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13897 = getelementptr inbounds i16, i16* %13889, i64 -30
  %13898 = bitcast i16* %13897 to <16 x i16>*
  %13899 = load <16 x i16>, <16 x i16>* %13898, align 2, !tbaa !396
  %13900 = getelementptr inbounds i16, i16* %13889, i64 -14
  %13901 = bitcast i16* %13900 to <16 x i16>*
  %13902 = load <16 x i16>, <16 x i16>* %13901, align 2, !tbaa !396
  %13903 = shufflevector <16 x i16> %13899, <16 x i16> %13902, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13904 = getelementptr inbounds i16, i16* %13889, i64 -32
  %13905 = bitcast i16* %13904 to <16 x i16>*
  %13906 = load <16 x i16>, <16 x i16>* %13905, align 2, !tbaa !396
  %13907 = getelementptr inbounds i16, i16* %13889, i64 -16
  %13908 = bitcast i16* %13907 to <16 x i16>*
  %13909 = load <16 x i16>, <16 x i16>* %13908, align 2, !tbaa !396
  %13910 = shufflevector <16 x i16> %13906, <16 x i16> %13909, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13911 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13910, <32 x i16> %13903, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13912 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13896, <32 x i16> %13911, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13913 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13912, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13914 = shufflevector <32 x i16> %13913, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13915 = zext i32 %.pre-phi3434 to i64
  %13916 = mul nsw i64 %294, %13915
  %13917 = add nsw i64 %296, %13916
  %13918 = getelementptr inbounds i16, i16* %blur_x841, i64 %13917
  %13919 = getelementptr inbounds i16, i16* %13918, i64 -32
  %13920 = bitcast i16* %13919 to <16 x i16>*
  store <16 x i16> %13914, <16 x i16>* %13920, align 2, !tbaa !399
  %13921 = shufflevector <32 x i16> %13913, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13922 = getelementptr inbounds i16, i16* %13918, i64 -16
  %13923 = bitcast i16* %13922 to <16 x i16>*
  store <16 x i16> %13921, <16 x i16>* %13923, align 2, !tbaa !399
  %13924 = zext i32 %.pre-phi3428 to i64
  %13925 = mul nsw i64 %13924, %318
  %13926 = add nsw i64 %13925, %291
  %13927 = getelementptr inbounds i16, i16* %blur_x841, i64 %13926
  %13928 = getelementptr inbounds i16, i16* %13927, i64 -32
  %13929 = bitcast i16* %13928 to <16 x i16>*
  %13930 = load <16 x i16>, <16 x i16>* %13929, align 2, !tbaa !399
  %13931 = getelementptr inbounds i16, i16* %13927, i64 -16
  %13932 = bitcast i16* %13931 to <16 x i16>*
  %13933 = load <16 x i16>, <16 x i16>* %13932, align 2, !tbaa !399
  %13934 = shufflevector <16 x i16> %13930, <16 x i16> %13933, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13935 = mul nsw i64 %13915, %318
  %13936 = add nsw i64 %13935, %291
  %13937 = getelementptr inbounds i16, i16* %blur_x841, i64 %13936
  %13938 = getelementptr inbounds i16, i16* %13937, i64 -32
  %13939 = bitcast i16* %13938 to <16 x i16>*
  %13940 = load <16 x i16>, <16 x i16>* %13939, align 2, !tbaa !399
  %13941 = getelementptr inbounds i16, i16* %13937, i64 -16
  %13942 = bitcast i16* %13941 to <16 x i16>*
  %13943 = load <16 x i16>, <16 x i16>* %13942, align 2, !tbaa !399
  %13944 = shufflevector <16 x i16> %13940, <16 x i16> %13943, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13945 = zext i32 %.pre-phi3424 to i64
  %13946 = mul nsw i64 %13945, %318
  %13947 = add nsw i64 %13946, %291
  %13948 = getelementptr inbounds i16, i16* %blur_x841, i64 %13947
  %13949 = getelementptr inbounds i16, i16* %13948, i64 -32
  %13950 = bitcast i16* %13949 to <16 x i16>*
  %13951 = load <16 x i16>, <16 x i16>* %13950, align 2, !tbaa !399
  %13952 = getelementptr inbounds i16, i16* %13948, i64 -16
  %13953 = bitcast i16* %13952 to <16 x i16>*
  %13954 = load <16 x i16>, <16 x i16>* %13953, align 2, !tbaa !399
  %13955 = shufflevector <16 x i16> %13951, <16 x i16> %13954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13956 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13955, <32 x i16> %13944, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13957 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13934, <32 x i16> %13956, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %13958 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %13957, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %13959 = shufflevector <32 x i16> %13958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13960 = sext i32 %a365 to i64
  %13961 = add nsw i64 %13960, 9
  %13962 = mul nsw i64 %13961, %319
  %13963 = add nsw i64 %321, %13962
  %13964 = getelementptr inbounds i16, i16* %258, i64 %13963
  %13965 = getelementptr inbounds i16, i16* %13964, i64 -32
  %13966 = bitcast i16* %13965 to <16 x i16>*
  store <16 x i16> %13959, <16 x i16>* %13966, align 2, !tbaa !401
  %13967 = shufflevector <32 x i16> %13958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13968 = getelementptr inbounds i16, i16* %13964, i64 -16
  %13969 = bitcast i16* %13968 to <16 x i16>*
  store <16 x i16> %13967, <16 x i16>* %13969, align 2, !tbaa !401
  br label %after_bb1288

"for blur_y.s0.x.x.rebased1303":                  ; preds = %"for blur_y.s0.x.x.rebased1303.preheader", %"consume blur_x1311"
  %indvars.iv3270 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1303.preheader" ], [ %indvars.iv.next3271, %"consume blur_x1311" ]
  %13970 = add nsw i64 %indvars.iv3270, %298
  %13971 = icmp slt i64 %13970, 1
  %13972 = trunc i64 %13970 to i32
  %13973 = shl nsw i32 %13972, 5
  %13974 = icmp sgt i32 %194, %13973
  %13975 = or i1 %13971, %13974
  br i1 %13975, label %"produce blur_x1309", label %"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge"

"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1303"
  %.pre3451 = shl nsw i64 %13970, 5
  br label %"consume blur_x1311"

"end for blur_y.s0.x.x.rebased1304":              ; preds = %"consume blur_x1311", %after_bb1288
  br i1 %299, label %"for blur_y.s0.x.x.rebased1319.preheader", label %"end for blur_y.s0.x.x.rebased1320", !prof !386

"for blur_y.s0.x.x.rebased1319.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1304"
  %13976 = sext i32 %t1666955 to i64
  %13977 = zext i32 %.pre-phi3428 to i64
  %13978 = mul nsw i64 %13977, %322
  %13979 = sub nsw i64 %13978, %293
  %13980 = zext i32 %.pre-phi3434 to i64
  %13981 = mul nsw i64 %13980, %322
  %13982 = sub nsw i64 %13981, %293
  %13983 = zext i32 %.pre-phi3424 to i64
  %13984 = mul nsw i64 %13983, %322
  %13985 = sub nsw i64 %13984, %293
  %13986 = sext i32 %a365 to i64
  %13987 = add nsw i64 %13986, 9
  %13988 = mul nsw i64 %13987, %319
  %13989 = add nsw i64 %13988, %323
  br label %"for blur_y.s0.x.x.rebased1319"

"produce blur_x1309":                             ; preds = %"for blur_y.s0.x.x.rebased1303"
  %t8161310 = add nsw i32 %376, %13973
  %13990 = sext i32 %t8161310 to i64
  %13991 = getelementptr inbounds i16, i16* %read_input784, i64 %13990
  %13992 = getelementptr inbounds i16, i16* %13991, i64 1
  %13993 = bitcast i16* %13992 to <16 x i16>*
  %13994 = load <16 x i16>, <16 x i16>* %13993, align 2, !tbaa !396
  %13995 = getelementptr inbounds i16, i16* %13991, i64 17
  %13996 = bitcast i16* %13995 to <16 x i16>*
  %13997 = load <16 x i16>, <16 x i16>* %13996, align 2, !tbaa !396
  %13998 = shufflevector <16 x i16> %13994, <16 x i16> %13997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13999 = getelementptr inbounds i16, i16* %13991, i64 2
  %14000 = bitcast i16* %13999 to <16 x i16>*
  %14001 = load <16 x i16>, <16 x i16>* %14000, align 2, !tbaa !396
  %14002 = getelementptr inbounds i16, i16* %13991, i64 18
  %14003 = bitcast i16* %14002 to <16 x i16>*
  %14004 = load <16 x i16>, <16 x i16>* %14003, align 2, !tbaa !396
  %14005 = shufflevector <16 x i16> %14001, <16 x i16> %14004, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14006 = bitcast i16* %13991 to <16 x i16>*
  %14007 = load <16 x i16>, <16 x i16>* %14006, align 2, !tbaa !396
  %14008 = getelementptr inbounds i16, i16* %13991, i64 16
  %14009 = bitcast i16* %14008 to <16 x i16>*
  %14010 = load <16 x i16>, <16 x i16>* %14009, align 2, !tbaa !396
  %14011 = shufflevector <16 x i16> %14007, <16 x i16> %14010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14012 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14011, <32 x i16> %14005, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14013 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %13998, <32 x i16> %14012, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14014 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14013, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14015 = shufflevector <32 x i16> %14014, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14016 = shl nsw i64 %13970, 5
  %14017 = add nsw i64 %14016, %13875
  %14018 = getelementptr inbounds i16, i16* %blur_x841, i64 %14017
  %14019 = bitcast i16* %14018 to <16 x i16>*
  store <16 x i16> %14015, <16 x i16>* %14019, align 2, !tbaa !399
  %14020 = shufflevector <32 x i16> %14014, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14021 = getelementptr inbounds i16, i16* %14018, i64 16
  %14022 = bitcast i16* %14021 to <16 x i16>*
  store <16 x i16> %14020, <16 x i16>* %14022, align 2, !tbaa !399
  br label %"consume blur_x1311"

"consume blur_x1311":                             ; preds = %"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge", %"produce blur_x1309"
  %.pre-phi3452 = phi i64 [ %.pre3451, %"for blur_y.s0.x.x.rebased1303.consume blur_x1311_crit_edge" ], [ %14016, %"produce blur_x1309" ]
  %14023 = add nsw i64 %13878, %.pre-phi3452
  %14024 = getelementptr inbounds i16, i16* %blur_x841, i64 %14023
  %14025 = bitcast i16* %14024 to <16 x i16>*
  %14026 = load <16 x i16>, <16 x i16>* %14025, align 2, !tbaa !399
  %14027 = getelementptr inbounds i16, i16* %14024, i64 16
  %14028 = bitcast i16* %14027 to <16 x i16>*
  %14029 = load <16 x i16>, <16 x i16>* %14028, align 2, !tbaa !399
  %14030 = shufflevector <16 x i16> %14026, <16 x i16> %14029, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14031 = add nsw i64 %13881, %.pre-phi3452
  %14032 = getelementptr inbounds i16, i16* %blur_x841, i64 %14031
  %14033 = bitcast i16* %14032 to <16 x i16>*
  %14034 = load <16 x i16>, <16 x i16>* %14033, align 2, !tbaa !399
  %14035 = getelementptr inbounds i16, i16* %14032, i64 16
  %14036 = bitcast i16* %14035 to <16 x i16>*
  %14037 = load <16 x i16>, <16 x i16>* %14036, align 2, !tbaa !399
  %14038 = shufflevector <16 x i16> %14034, <16 x i16> %14037, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14039 = add nsw i64 %13884, %.pre-phi3452
  %14040 = getelementptr inbounds i16, i16* %blur_x841, i64 %14039
  %14041 = bitcast i16* %14040 to <16 x i16>*
  %14042 = load <16 x i16>, <16 x i16>* %14041, align 2, !tbaa !399
  %14043 = getelementptr inbounds i16, i16* %14040, i64 16
  %14044 = bitcast i16* %14043 to <16 x i16>*
  %14045 = load <16 x i16>, <16 x i16>* %14044, align 2, !tbaa !399
  %14046 = shufflevector <16 x i16> %14042, <16 x i16> %14045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14047 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14046, <32 x i16> %14038, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14048 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14030, <32 x i16> %14047, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14049 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14048, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14050 = shufflevector <32 x i16> %14049, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14051 = add nsw i64 %13888, %.pre-phi3452
  %14052 = getelementptr inbounds i16, i16* %258, i64 %14051
  %14053 = bitcast i16* %14052 to <16 x i16>*
  store <16 x i16> %14050, <16 x i16>* %14053, align 2, !tbaa !401
  %14054 = shufflevector <32 x i16> %14049, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14055 = getelementptr inbounds i16, i16* %14052, i64 16
  %14056 = bitcast i16* %14055 to <16 x i16>*
  store <16 x i16> %14054, <16 x i16>* %14056, align 2, !tbaa !401
  %indvars.iv.next3271 = add nuw nsw i64 %indvars.iv3270, 1
  %14057 = icmp eq i64 %indvars.iv.next3271, %zext3272
  br i1 %14057, label %"end for blur_y.s0.x.x.rebased1304", label %"for blur_y.s0.x.x.rebased1303"

"for blur_y.s0.x.x.rebased1319":                  ; preds = %"for blur_y.s0.x.x.rebased1319.preheader", %"consume blur_x1330"
  %blur_y.s0.x.x.rebased1321 = phi i32 [ %14132, %"consume blur_x1330" ], [ 0, %"for blur_y.s0.x.x.rebased1319.preheader" ]
  %14058 = add nsw i32 %blur_y.s0.x.x.rebased1321, %t1582776
  %a2428 = shl nsw i32 %14058, 5
  %14059 = icmp sgt i32 %t1603, %a2428
  %blur_y.s0.x.v0.base.s1322 = select i1 %14059, i32 %a2428, i32 %t1603
  %14060 = icmp slt i32 %14058, 1
  %14061 = icmp sgt i32 %194, %a2428
  %14062 = or i1 %14060, %14061
  br i1 %14062, label %"produce blur_x1327", label %"consume blur_x1330"

"end for blur_y.s0.x.x.rebased1320":              ; preds = %"consume blur_x1330", %"end for blur_y.s0.x.x.rebased1304"
  br i1 %225, label %"produce blur_x1334", label %after_bb1331

"produce blur_x1327":                             ; preds = %"for blur_y.s0.x.x.rebased1319"
  %14063 = icmp slt i32 %blur_y.s0.x.v0.base.s1322, %194
  %blur_x.s0.x.v1.base.s1328 = select i1 %14063, i32 %blur_y.s0.x.v0.base.s1322, i32 %194
  %t8211329 = add nsw i32 %376, %blur_x.s0.x.v1.base.s1328
  %14064 = sext i32 %t8211329 to i64
  %14065 = getelementptr inbounds i16, i16* %read_input784, i64 %14064
  %14066 = getelementptr inbounds i16, i16* %14065, i64 1
  %14067 = bitcast i16* %14066 to <16 x i16>*
  %14068 = load <16 x i16>, <16 x i16>* %14067, align 2, !tbaa !396
  %14069 = getelementptr inbounds i16, i16* %14065, i64 17
  %14070 = bitcast i16* %14069 to <16 x i16>*
  %14071 = load <16 x i16>, <16 x i16>* %14070, align 2, !tbaa !396
  %14072 = shufflevector <16 x i16> %14068, <16 x i16> %14071, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14073 = getelementptr inbounds i16, i16* %14065, i64 2
  %14074 = bitcast i16* %14073 to <16 x i16>*
  %14075 = load <16 x i16>, <16 x i16>* %14074, align 2, !tbaa !396
  %14076 = getelementptr inbounds i16, i16* %14065, i64 18
  %14077 = bitcast i16* %14076 to <16 x i16>*
  %14078 = load <16 x i16>, <16 x i16>* %14077, align 2, !tbaa !396
  %14079 = shufflevector <16 x i16> %14075, <16 x i16> %14078, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14080 = bitcast i16* %14065 to <16 x i16>*
  %14081 = load <16 x i16>, <16 x i16>* %14080, align 2, !tbaa !396
  %14082 = getelementptr inbounds i16, i16* %14065, i64 16
  %14083 = bitcast i16* %14082 to <16 x i16>*
  %14084 = load <16 x i16>, <16 x i16>* %14083, align 2, !tbaa !396
  %14085 = shufflevector <16 x i16> %14081, <16 x i16> %14084, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14086 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14085, <32 x i16> %14079, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14087 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14072, <32 x i16> %14086, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14088 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14087, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14089 = shufflevector <32 x i16> %14088, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14090 = sext i32 %blur_x.s0.x.v1.base.s1328 to i64
  %14091 = add nsw i64 %14090, %13976
  %14092 = getelementptr inbounds i16, i16* %blur_x841, i64 %14091
  %14093 = bitcast i16* %14092 to <16 x i16>*
  store <16 x i16> %14089, <16 x i16>* %14093, align 2, !tbaa !399
  %14094 = shufflevector <32 x i16> %14088, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14095 = getelementptr inbounds i16, i16* %14092, i64 16
  %14096 = bitcast i16* %14095 to <16 x i16>*
  store <16 x i16> %14094, <16 x i16>* %14096, align 2, !tbaa !399
  br label %"consume blur_x1330"

"consume blur_x1330":                             ; preds = %"for blur_y.s0.x.x.rebased1319", %"produce blur_x1327"
  %14097 = sext i32 %blur_y.s0.x.v0.base.s1322 to i64
  %14098 = add nsw i64 %13979, %14097
  %14099 = getelementptr inbounds i16, i16* %blur_x841, i64 %14098
  %14100 = bitcast i16* %14099 to <16 x i16>*
  %14101 = load <16 x i16>, <16 x i16>* %14100, align 2, !tbaa !399
  %14102 = getelementptr inbounds i16, i16* %14099, i64 16
  %14103 = bitcast i16* %14102 to <16 x i16>*
  %14104 = load <16 x i16>, <16 x i16>* %14103, align 2, !tbaa !399
  %14105 = shufflevector <16 x i16> %14101, <16 x i16> %14104, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14106 = add nsw i64 %13982, %14097
  %14107 = getelementptr inbounds i16, i16* %blur_x841, i64 %14106
  %14108 = bitcast i16* %14107 to <16 x i16>*
  %14109 = load <16 x i16>, <16 x i16>* %14108, align 2, !tbaa !399
  %14110 = getelementptr inbounds i16, i16* %14107, i64 16
  %14111 = bitcast i16* %14110 to <16 x i16>*
  %14112 = load <16 x i16>, <16 x i16>* %14111, align 2, !tbaa !399
  %14113 = shufflevector <16 x i16> %14109, <16 x i16> %14112, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14114 = add nsw i64 %13985, %14097
  %14115 = getelementptr inbounds i16, i16* %blur_x841, i64 %14114
  %14116 = bitcast i16* %14115 to <16 x i16>*
  %14117 = load <16 x i16>, <16 x i16>* %14116, align 2, !tbaa !399
  %14118 = getelementptr inbounds i16, i16* %14115, i64 16
  %14119 = bitcast i16* %14118 to <16 x i16>*
  %14120 = load <16 x i16>, <16 x i16>* %14119, align 2, !tbaa !399
  %14121 = shufflevector <16 x i16> %14117, <16 x i16> %14120, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14122 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14121, <32 x i16> %14113, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14123 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14105, <32 x i16> %14122, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14124 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14123, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14125 = shufflevector <32 x i16> %14124, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14126 = add nsw i64 %13989, %14097
  %14127 = getelementptr inbounds i16, i16* %258, i64 %14126
  %14128 = bitcast i16* %14127 to <16 x i16>*
  store <16 x i16> %14125, <16 x i16>* %14128, align 2, !tbaa !401
  %14129 = shufflevector <32 x i16> %14124, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14130 = getelementptr inbounds i16, i16* %14127, i64 16
  %14131 = bitcast i16* %14130 to <16 x i16>*
  store <16 x i16> %14129, <16 x i16>* %14131, align 2, !tbaa !401
  %14132 = add nuw nsw i32 %blur_y.s0.x.x.rebased1321, 1
  %.not2522 = icmp eq i32 %14132, %t1639860
  br i1 %.not2522, label %"end for blur_y.s0.x.x.rebased1320", label %"for blur_y.s0.x.x.rebased1319"

after_bb1331:                                     ; preds = %"end for blur_y.s0.x.x.rebased1320", %"produce blur_x1334"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1346.preheader", label %"end for blur_y.s0.x.x.rebased1347", !prof !386

"for blur_y.s0.x.x.rebased1346.preheader":        ; preds = %after_bb1331
  %14133 = sext i32 %t1638848 to i64
  %14134 = zext i32 %.pre-phi3434 to i64
  %14135 = mul nsw i64 %14134, %322
  %14136 = sub nsw i64 %14135, %293
  %14137 = zext i32 %.pre-phi3420 to i64
  %14138 = mul nsw i64 %14137, %322
  %14139 = sub nsw i64 %14138, %293
  %14140 = zext i32 %.pre-phi3428 to i64
  %14141 = mul nsw i64 %14140, %322
  %14142 = sub nsw i64 %14141, %293
  %14143 = sext i32 %a365 to i64
  %14144 = add nsw i64 %14143, 10
  %14145 = mul nsw i64 %14144, %319
  %14146 = add nsw i64 %14145, %323
  br label %"for blur_y.s0.x.x.rebased1346"

"produce blur_x1334":                             ; preds = %"end for blur_y.s0.x.x.rebased1320"
  %14147 = getelementptr inbounds i16, i16* %read_input784, i64 %380
  %14148 = getelementptr inbounds i16, i16* %14147, i64 -31
  %14149 = bitcast i16* %14148 to <16 x i16>*
  %14150 = load <16 x i16>, <16 x i16>* %14149, align 2, !tbaa !396
  %14151 = getelementptr inbounds i16, i16* %14147, i64 -15
  %14152 = bitcast i16* %14151 to <16 x i16>*
  %14153 = load <16 x i16>, <16 x i16>* %14152, align 2, !tbaa !396
  %14154 = shufflevector <16 x i16> %14150, <16 x i16> %14153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14155 = getelementptr inbounds i16, i16* %14147, i64 -30
  %14156 = bitcast i16* %14155 to <16 x i16>*
  %14157 = load <16 x i16>, <16 x i16>* %14156, align 2, !tbaa !396
  %14158 = getelementptr inbounds i16, i16* %14147, i64 -14
  %14159 = bitcast i16* %14158 to <16 x i16>*
  %14160 = load <16 x i16>, <16 x i16>* %14159, align 2, !tbaa !396
  %14161 = shufflevector <16 x i16> %14157, <16 x i16> %14160, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14162 = getelementptr inbounds i16, i16* %14147, i64 -32
  %14163 = bitcast i16* %14162 to <16 x i16>*
  %14164 = load <16 x i16>, <16 x i16>* %14163, align 2, !tbaa !396
  %14165 = getelementptr inbounds i16, i16* %14147, i64 -16
  %14166 = bitcast i16* %14165 to <16 x i16>*
  %14167 = load <16 x i16>, <16 x i16>* %14166, align 2, !tbaa !396
  %14168 = shufflevector <16 x i16> %14164, <16 x i16> %14167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14169 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14168, <32 x i16> %14161, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14170 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14154, <32 x i16> %14169, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14171 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14170, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14172 = shufflevector <32 x i16> %14171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14173 = zext i32 %.pre-phi3420 to i64
  %14174 = mul nsw i64 %294, %14173
  %14175 = add nsw i64 %296, %14174
  %14176 = getelementptr inbounds i16, i16* %blur_x841, i64 %14175
  %14177 = getelementptr inbounds i16, i16* %14176, i64 -32
  %14178 = bitcast i16* %14177 to <16 x i16>*
  store <16 x i16> %14172, <16 x i16>* %14178, align 2, !tbaa !399
  %14179 = shufflevector <32 x i16> %14171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14180 = getelementptr inbounds i16, i16* %14176, i64 -16
  %14181 = bitcast i16* %14180 to <16 x i16>*
  store <16 x i16> %14179, <16 x i16>* %14181, align 2, !tbaa !399
  %14182 = zext i32 %.pre-phi3434 to i64
  %14183 = mul nsw i64 %14182, %318
  %14184 = add nsw i64 %14183, %291
  %14185 = getelementptr inbounds i16, i16* %blur_x841, i64 %14184
  %14186 = getelementptr inbounds i16, i16* %14185, i64 -32
  %14187 = bitcast i16* %14186 to <16 x i16>*
  %14188 = load <16 x i16>, <16 x i16>* %14187, align 2, !tbaa !399
  %14189 = getelementptr inbounds i16, i16* %14185, i64 -16
  %14190 = bitcast i16* %14189 to <16 x i16>*
  %14191 = load <16 x i16>, <16 x i16>* %14190, align 2, !tbaa !399
  %14192 = shufflevector <16 x i16> %14188, <16 x i16> %14191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14193 = mul nsw i64 %14173, %318
  %14194 = add nsw i64 %14193, %291
  %14195 = getelementptr inbounds i16, i16* %blur_x841, i64 %14194
  %14196 = getelementptr inbounds i16, i16* %14195, i64 -32
  %14197 = bitcast i16* %14196 to <16 x i16>*
  %14198 = load <16 x i16>, <16 x i16>* %14197, align 2, !tbaa !399
  %14199 = getelementptr inbounds i16, i16* %14195, i64 -16
  %14200 = bitcast i16* %14199 to <16 x i16>*
  %14201 = load <16 x i16>, <16 x i16>* %14200, align 2, !tbaa !399
  %14202 = shufflevector <16 x i16> %14198, <16 x i16> %14201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14203 = zext i32 %.pre-phi3428 to i64
  %14204 = mul nsw i64 %14203, %318
  %14205 = add nsw i64 %14204, %291
  %14206 = getelementptr inbounds i16, i16* %blur_x841, i64 %14205
  %14207 = getelementptr inbounds i16, i16* %14206, i64 -32
  %14208 = bitcast i16* %14207 to <16 x i16>*
  %14209 = load <16 x i16>, <16 x i16>* %14208, align 2, !tbaa !399
  %14210 = getelementptr inbounds i16, i16* %14206, i64 -16
  %14211 = bitcast i16* %14210 to <16 x i16>*
  %14212 = load <16 x i16>, <16 x i16>* %14211, align 2, !tbaa !399
  %14213 = shufflevector <16 x i16> %14209, <16 x i16> %14212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14214 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14213, <32 x i16> %14202, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14215 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14192, <32 x i16> %14214, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14216 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14215, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14217 = shufflevector <32 x i16> %14216, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14218 = sext i32 %a365 to i64
  %14219 = add nsw i64 %14218, 10
  %14220 = mul nsw i64 %14219, %319
  %14221 = add nsw i64 %321, %14220
  %14222 = getelementptr inbounds i16, i16* %258, i64 %14221
  %14223 = getelementptr inbounds i16, i16* %14222, i64 -32
  %14224 = bitcast i16* %14223 to <16 x i16>*
  store <16 x i16> %14217, <16 x i16>* %14224, align 2, !tbaa !401
  %14225 = shufflevector <32 x i16> %14216, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14226 = getelementptr inbounds i16, i16* %14222, i64 -16
  %14227 = bitcast i16* %14226 to <16 x i16>*
  store <16 x i16> %14225, <16 x i16>* %14227, align 2, !tbaa !401
  br label %after_bb1331

"for blur_y.s0.x.x.rebased1346":                  ; preds = %"for blur_y.s0.x.x.rebased1346.preheader", %"consume blur_x1354"
  %indvars.iv3273 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1346.preheader" ], [ %indvars.iv.next3274, %"consume blur_x1354" ]
  %14228 = add nsw i64 %indvars.iv3273, %298
  %14229 = icmp slt i64 %14228, 1
  %14230 = trunc i64 %14228 to i32
  %14231 = shl nsw i32 %14230, 5
  %14232 = icmp sgt i32 %194, %14231
  %14233 = or i1 %14229, %14232
  br i1 %14233, label %"produce blur_x1352", label %"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge"

"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1346"
  %.pre3453 = shl nsw i64 %14228, 5
  br label %"consume blur_x1354"

"end for blur_y.s0.x.x.rebased1347":              ; preds = %"consume blur_x1354", %after_bb1331
  br i1 %299, label %"for blur_y.s0.x.x.rebased1362.preheader", label %"end for blur_y.s0.x.x.rebased1363", !prof !386

"for blur_y.s0.x.x.rebased1362.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1347"
  %14234 = sext i32 %t1638848 to i64
  %14235 = zext i32 %.pre-phi3434 to i64
  %14236 = mul nsw i64 %14235, %322
  %14237 = sub nsw i64 %14236, %293
  %14238 = zext i32 %.pre-phi3420 to i64
  %14239 = mul nsw i64 %14238, %322
  %14240 = sub nsw i64 %14239, %293
  %14241 = zext i32 %.pre-phi3428 to i64
  %14242 = mul nsw i64 %14241, %322
  %14243 = sub nsw i64 %14242, %293
  %14244 = sext i32 %a365 to i64
  %14245 = add nsw i64 %14244, 10
  %14246 = mul nsw i64 %14245, %319
  %14247 = add nsw i64 %14246, %323
  br label %"for blur_y.s0.x.x.rebased1362"

"produce blur_x1352":                             ; preds = %"for blur_y.s0.x.x.rebased1346"
  %t8321353 = add nsw i32 %382, %14231
  %14248 = sext i32 %t8321353 to i64
  %14249 = getelementptr inbounds i16, i16* %read_input784, i64 %14248
  %14250 = getelementptr inbounds i16, i16* %14249, i64 1
  %14251 = bitcast i16* %14250 to <16 x i16>*
  %14252 = load <16 x i16>, <16 x i16>* %14251, align 2, !tbaa !396
  %14253 = getelementptr inbounds i16, i16* %14249, i64 17
  %14254 = bitcast i16* %14253 to <16 x i16>*
  %14255 = load <16 x i16>, <16 x i16>* %14254, align 2, !tbaa !396
  %14256 = shufflevector <16 x i16> %14252, <16 x i16> %14255, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14257 = getelementptr inbounds i16, i16* %14249, i64 2
  %14258 = bitcast i16* %14257 to <16 x i16>*
  %14259 = load <16 x i16>, <16 x i16>* %14258, align 2, !tbaa !396
  %14260 = getelementptr inbounds i16, i16* %14249, i64 18
  %14261 = bitcast i16* %14260 to <16 x i16>*
  %14262 = load <16 x i16>, <16 x i16>* %14261, align 2, !tbaa !396
  %14263 = shufflevector <16 x i16> %14259, <16 x i16> %14262, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14264 = bitcast i16* %14249 to <16 x i16>*
  %14265 = load <16 x i16>, <16 x i16>* %14264, align 2, !tbaa !396
  %14266 = getelementptr inbounds i16, i16* %14249, i64 16
  %14267 = bitcast i16* %14266 to <16 x i16>*
  %14268 = load <16 x i16>, <16 x i16>* %14267, align 2, !tbaa !396
  %14269 = shufflevector <16 x i16> %14265, <16 x i16> %14268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14270 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14269, <32 x i16> %14263, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14271 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14256, <32 x i16> %14270, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14272 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14271, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14273 = shufflevector <32 x i16> %14272, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14274 = shl nsw i64 %14228, 5
  %14275 = add nsw i64 %14274, %14133
  %14276 = getelementptr inbounds i16, i16* %blur_x841, i64 %14275
  %14277 = bitcast i16* %14276 to <16 x i16>*
  store <16 x i16> %14273, <16 x i16>* %14277, align 2, !tbaa !399
  %14278 = shufflevector <32 x i16> %14272, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14279 = getelementptr inbounds i16, i16* %14276, i64 16
  %14280 = bitcast i16* %14279 to <16 x i16>*
  store <16 x i16> %14278, <16 x i16>* %14280, align 2, !tbaa !399
  br label %"consume blur_x1354"

"consume blur_x1354":                             ; preds = %"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge", %"produce blur_x1352"
  %.pre-phi3454 = phi i64 [ %.pre3453, %"for blur_y.s0.x.x.rebased1346.consume blur_x1354_crit_edge" ], [ %14274, %"produce blur_x1352" ]
  %14281 = add nsw i64 %14136, %.pre-phi3454
  %14282 = getelementptr inbounds i16, i16* %blur_x841, i64 %14281
  %14283 = bitcast i16* %14282 to <16 x i16>*
  %14284 = load <16 x i16>, <16 x i16>* %14283, align 2, !tbaa !399
  %14285 = getelementptr inbounds i16, i16* %14282, i64 16
  %14286 = bitcast i16* %14285 to <16 x i16>*
  %14287 = load <16 x i16>, <16 x i16>* %14286, align 2, !tbaa !399
  %14288 = shufflevector <16 x i16> %14284, <16 x i16> %14287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14289 = add nsw i64 %14139, %.pre-phi3454
  %14290 = getelementptr inbounds i16, i16* %blur_x841, i64 %14289
  %14291 = bitcast i16* %14290 to <16 x i16>*
  %14292 = load <16 x i16>, <16 x i16>* %14291, align 2, !tbaa !399
  %14293 = getelementptr inbounds i16, i16* %14290, i64 16
  %14294 = bitcast i16* %14293 to <16 x i16>*
  %14295 = load <16 x i16>, <16 x i16>* %14294, align 2, !tbaa !399
  %14296 = shufflevector <16 x i16> %14292, <16 x i16> %14295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14297 = add nsw i64 %14142, %.pre-phi3454
  %14298 = getelementptr inbounds i16, i16* %blur_x841, i64 %14297
  %14299 = bitcast i16* %14298 to <16 x i16>*
  %14300 = load <16 x i16>, <16 x i16>* %14299, align 2, !tbaa !399
  %14301 = getelementptr inbounds i16, i16* %14298, i64 16
  %14302 = bitcast i16* %14301 to <16 x i16>*
  %14303 = load <16 x i16>, <16 x i16>* %14302, align 2, !tbaa !399
  %14304 = shufflevector <16 x i16> %14300, <16 x i16> %14303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14305 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14304, <32 x i16> %14296, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14306 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14288, <32 x i16> %14305, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14307 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14306, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14308 = shufflevector <32 x i16> %14307, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14309 = add nsw i64 %14146, %.pre-phi3454
  %14310 = getelementptr inbounds i16, i16* %258, i64 %14309
  %14311 = bitcast i16* %14310 to <16 x i16>*
  store <16 x i16> %14308, <16 x i16>* %14311, align 2, !tbaa !401
  %14312 = shufflevector <32 x i16> %14307, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14313 = getelementptr inbounds i16, i16* %14310, i64 16
  %14314 = bitcast i16* %14313 to <16 x i16>*
  store <16 x i16> %14312, <16 x i16>* %14314, align 2, !tbaa !401
  %indvars.iv.next3274 = add nuw nsw i64 %indvars.iv3273, 1
  %14315 = icmp eq i64 %indvars.iv.next3274, %zext3275
  br i1 %14315, label %"end for blur_y.s0.x.x.rebased1347", label %"for blur_y.s0.x.x.rebased1346"

"for blur_y.s0.x.x.rebased1362":                  ; preds = %"for blur_y.s0.x.x.rebased1362.preheader", %"consume blur_x1373"
  %blur_y.s0.x.x.rebased1364 = phi i32 [ %14390, %"consume blur_x1373" ], [ 0, %"for blur_y.s0.x.x.rebased1362.preheader" ]
  %14316 = add nsw i32 %blur_y.s0.x.x.rebased1364, %t1582776
  %a2585 = shl nsw i32 %14316, 5
  %14317 = icmp sgt i32 %t1603, %a2585
  %blur_y.s0.x.v0.base.s1365 = select i1 %14317, i32 %a2585, i32 %t1603
  %14318 = icmp slt i32 %14316, 1
  %14319 = icmp sgt i32 %194, %a2585
  %14320 = or i1 %14318, %14319
  br i1 %14320, label %"produce blur_x1370", label %"consume blur_x1373"

"end for blur_y.s0.x.x.rebased1363":              ; preds = %"consume blur_x1373", %"end for blur_y.s0.x.x.rebased1347"
  br i1 %225, label %"produce blur_x1377", label %after_bb1374

"produce blur_x1370":                             ; preds = %"for blur_y.s0.x.x.rebased1362"
  %14321 = icmp slt i32 %blur_y.s0.x.v0.base.s1365, %194
  %blur_x.s0.x.v1.base.s1371 = select i1 %14321, i32 %blur_y.s0.x.v0.base.s1365, i32 %194
  %t8371372 = add nsw i32 %382, %blur_x.s0.x.v1.base.s1371
  %14322 = sext i32 %t8371372 to i64
  %14323 = getelementptr inbounds i16, i16* %read_input784, i64 %14322
  %14324 = getelementptr inbounds i16, i16* %14323, i64 1
  %14325 = bitcast i16* %14324 to <16 x i16>*
  %14326 = load <16 x i16>, <16 x i16>* %14325, align 2, !tbaa !396
  %14327 = getelementptr inbounds i16, i16* %14323, i64 17
  %14328 = bitcast i16* %14327 to <16 x i16>*
  %14329 = load <16 x i16>, <16 x i16>* %14328, align 2, !tbaa !396
  %14330 = shufflevector <16 x i16> %14326, <16 x i16> %14329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14331 = getelementptr inbounds i16, i16* %14323, i64 2
  %14332 = bitcast i16* %14331 to <16 x i16>*
  %14333 = load <16 x i16>, <16 x i16>* %14332, align 2, !tbaa !396
  %14334 = getelementptr inbounds i16, i16* %14323, i64 18
  %14335 = bitcast i16* %14334 to <16 x i16>*
  %14336 = load <16 x i16>, <16 x i16>* %14335, align 2, !tbaa !396
  %14337 = shufflevector <16 x i16> %14333, <16 x i16> %14336, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14338 = bitcast i16* %14323 to <16 x i16>*
  %14339 = load <16 x i16>, <16 x i16>* %14338, align 2, !tbaa !396
  %14340 = getelementptr inbounds i16, i16* %14323, i64 16
  %14341 = bitcast i16* %14340 to <16 x i16>*
  %14342 = load <16 x i16>, <16 x i16>* %14341, align 2, !tbaa !396
  %14343 = shufflevector <16 x i16> %14339, <16 x i16> %14342, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14344 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14343, <32 x i16> %14337, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14345 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14330, <32 x i16> %14344, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14346 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14345, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14347 = shufflevector <32 x i16> %14346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14348 = sext i32 %blur_x.s0.x.v1.base.s1371 to i64
  %14349 = add nsw i64 %14348, %14234
  %14350 = getelementptr inbounds i16, i16* %blur_x841, i64 %14349
  %14351 = bitcast i16* %14350 to <16 x i16>*
  store <16 x i16> %14347, <16 x i16>* %14351, align 2, !tbaa !399
  %14352 = shufflevector <32 x i16> %14346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14353 = getelementptr inbounds i16, i16* %14350, i64 16
  %14354 = bitcast i16* %14353 to <16 x i16>*
  store <16 x i16> %14352, <16 x i16>* %14354, align 2, !tbaa !399
  br label %"consume blur_x1373"

"consume blur_x1373":                             ; preds = %"for blur_y.s0.x.x.rebased1362", %"produce blur_x1370"
  %14355 = sext i32 %blur_y.s0.x.v0.base.s1365 to i64
  %14356 = add nsw i64 %14237, %14355
  %14357 = getelementptr inbounds i16, i16* %blur_x841, i64 %14356
  %14358 = bitcast i16* %14357 to <16 x i16>*
  %14359 = load <16 x i16>, <16 x i16>* %14358, align 2, !tbaa !399
  %14360 = getelementptr inbounds i16, i16* %14357, i64 16
  %14361 = bitcast i16* %14360 to <16 x i16>*
  %14362 = load <16 x i16>, <16 x i16>* %14361, align 2, !tbaa !399
  %14363 = shufflevector <16 x i16> %14359, <16 x i16> %14362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14364 = add nsw i64 %14240, %14355
  %14365 = getelementptr inbounds i16, i16* %blur_x841, i64 %14364
  %14366 = bitcast i16* %14365 to <16 x i16>*
  %14367 = load <16 x i16>, <16 x i16>* %14366, align 2, !tbaa !399
  %14368 = getelementptr inbounds i16, i16* %14365, i64 16
  %14369 = bitcast i16* %14368 to <16 x i16>*
  %14370 = load <16 x i16>, <16 x i16>* %14369, align 2, !tbaa !399
  %14371 = shufflevector <16 x i16> %14367, <16 x i16> %14370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14372 = add nsw i64 %14243, %14355
  %14373 = getelementptr inbounds i16, i16* %blur_x841, i64 %14372
  %14374 = bitcast i16* %14373 to <16 x i16>*
  %14375 = load <16 x i16>, <16 x i16>* %14374, align 2, !tbaa !399
  %14376 = getelementptr inbounds i16, i16* %14373, i64 16
  %14377 = bitcast i16* %14376 to <16 x i16>*
  %14378 = load <16 x i16>, <16 x i16>* %14377, align 2, !tbaa !399
  %14379 = shufflevector <16 x i16> %14375, <16 x i16> %14378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14380 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14379, <32 x i16> %14371, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14381 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14363, <32 x i16> %14380, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14382 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14381, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14383 = shufflevector <32 x i16> %14382, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14384 = add nsw i64 %14247, %14355
  %14385 = getelementptr inbounds i16, i16* %258, i64 %14384
  %14386 = bitcast i16* %14385 to <16 x i16>*
  store <16 x i16> %14383, <16 x i16>* %14386, align 2, !tbaa !401
  %14387 = shufflevector <32 x i16> %14382, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14388 = getelementptr inbounds i16, i16* %14385, i64 16
  %14389 = bitcast i16* %14388 to <16 x i16>*
  store <16 x i16> %14387, <16 x i16>* %14389, align 2, !tbaa !401
  %14390 = add nuw nsw i32 %blur_y.s0.x.x.rebased1364, 1
  %.not2518 = icmp eq i32 %14390, %t1639860
  br i1 %.not2518, label %"end for blur_y.s0.x.x.rebased1363", label %"for blur_y.s0.x.x.rebased1362"

after_bb1374:                                     ; preds = %"end for blur_y.s0.x.x.rebased1363", %"produce blur_x1377"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1389.preheader", label %"end for blur_y.s0.x.x.rebased1390", !prof !386

"for blur_y.s0.x.x.rebased1389.preheader":        ; preds = %after_bb1374
  %14391 = sext i32 %t1644876 to i64
  %14392 = zext i32 %.pre-phi3420 to i64
  %14393 = mul nsw i64 %14392, %322
  %14394 = sub nsw i64 %14393, %293
  %14395 = zext i32 %.pre-phi3424 to i64
  %14396 = mul nsw i64 %14395, %322
  %14397 = sub nsw i64 %14396, %293
  %14398 = zext i32 %.pre-phi3434 to i64
  %14399 = mul nsw i64 %14398, %322
  %14400 = sub nsw i64 %14399, %293
  %14401 = sext i32 %a365 to i64
  %14402 = add nsw i64 %14401, 11
  %14403 = mul nsw i64 %14402, %319
  %14404 = add nsw i64 %14403, %323
  br label %"for blur_y.s0.x.x.rebased1389"

"produce blur_x1377":                             ; preds = %"end for blur_y.s0.x.x.rebased1363"
  %14405 = getelementptr inbounds i16, i16* %read_input784, i64 %386
  %14406 = getelementptr inbounds i16, i16* %14405, i64 -31
  %14407 = bitcast i16* %14406 to <16 x i16>*
  %14408 = load <16 x i16>, <16 x i16>* %14407, align 2, !tbaa !396
  %14409 = getelementptr inbounds i16, i16* %14405, i64 -15
  %14410 = bitcast i16* %14409 to <16 x i16>*
  %14411 = load <16 x i16>, <16 x i16>* %14410, align 2, !tbaa !396
  %14412 = shufflevector <16 x i16> %14408, <16 x i16> %14411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14413 = getelementptr inbounds i16, i16* %14405, i64 -30
  %14414 = bitcast i16* %14413 to <16 x i16>*
  %14415 = load <16 x i16>, <16 x i16>* %14414, align 2, !tbaa !396
  %14416 = getelementptr inbounds i16, i16* %14405, i64 -14
  %14417 = bitcast i16* %14416 to <16 x i16>*
  %14418 = load <16 x i16>, <16 x i16>* %14417, align 2, !tbaa !396
  %14419 = shufflevector <16 x i16> %14415, <16 x i16> %14418, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14420 = getelementptr inbounds i16, i16* %14405, i64 -32
  %14421 = bitcast i16* %14420 to <16 x i16>*
  %14422 = load <16 x i16>, <16 x i16>* %14421, align 2, !tbaa !396
  %14423 = getelementptr inbounds i16, i16* %14405, i64 -16
  %14424 = bitcast i16* %14423 to <16 x i16>*
  %14425 = load <16 x i16>, <16 x i16>* %14424, align 2, !tbaa !396
  %14426 = shufflevector <16 x i16> %14422, <16 x i16> %14425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14427 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14426, <32 x i16> %14419, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14428 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14412, <32 x i16> %14427, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14429 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14428, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14430 = shufflevector <32 x i16> %14429, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14431 = zext i32 %.pre-phi3424 to i64
  %14432 = mul nsw i64 %294, %14431
  %14433 = add nsw i64 %296, %14432
  %14434 = getelementptr inbounds i16, i16* %blur_x841, i64 %14433
  %14435 = getelementptr inbounds i16, i16* %14434, i64 -32
  %14436 = bitcast i16* %14435 to <16 x i16>*
  store <16 x i16> %14430, <16 x i16>* %14436, align 2, !tbaa !399
  %14437 = shufflevector <32 x i16> %14429, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14438 = getelementptr inbounds i16, i16* %14434, i64 -16
  %14439 = bitcast i16* %14438 to <16 x i16>*
  store <16 x i16> %14437, <16 x i16>* %14439, align 2, !tbaa !399
  %14440 = zext i32 %.pre-phi3420 to i64
  %14441 = mul nsw i64 %14440, %318
  %14442 = add nsw i64 %14441, %291
  %14443 = getelementptr inbounds i16, i16* %blur_x841, i64 %14442
  %14444 = getelementptr inbounds i16, i16* %14443, i64 -32
  %14445 = bitcast i16* %14444 to <16 x i16>*
  %14446 = load <16 x i16>, <16 x i16>* %14445, align 2, !tbaa !399
  %14447 = getelementptr inbounds i16, i16* %14443, i64 -16
  %14448 = bitcast i16* %14447 to <16 x i16>*
  %14449 = load <16 x i16>, <16 x i16>* %14448, align 2, !tbaa !399
  %14450 = shufflevector <16 x i16> %14446, <16 x i16> %14449, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14451 = mul nsw i64 %14431, %318
  %14452 = add nsw i64 %14451, %291
  %14453 = getelementptr inbounds i16, i16* %blur_x841, i64 %14452
  %14454 = getelementptr inbounds i16, i16* %14453, i64 -32
  %14455 = bitcast i16* %14454 to <16 x i16>*
  %14456 = load <16 x i16>, <16 x i16>* %14455, align 2, !tbaa !399
  %14457 = getelementptr inbounds i16, i16* %14453, i64 -16
  %14458 = bitcast i16* %14457 to <16 x i16>*
  %14459 = load <16 x i16>, <16 x i16>* %14458, align 2, !tbaa !399
  %14460 = shufflevector <16 x i16> %14456, <16 x i16> %14459, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14461 = zext i32 %.pre-phi3434 to i64
  %14462 = mul nsw i64 %14461, %318
  %14463 = add nsw i64 %14462, %291
  %14464 = getelementptr inbounds i16, i16* %blur_x841, i64 %14463
  %14465 = getelementptr inbounds i16, i16* %14464, i64 -32
  %14466 = bitcast i16* %14465 to <16 x i16>*
  %14467 = load <16 x i16>, <16 x i16>* %14466, align 2, !tbaa !399
  %14468 = getelementptr inbounds i16, i16* %14464, i64 -16
  %14469 = bitcast i16* %14468 to <16 x i16>*
  %14470 = load <16 x i16>, <16 x i16>* %14469, align 2, !tbaa !399
  %14471 = shufflevector <16 x i16> %14467, <16 x i16> %14470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14472 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14471, <32 x i16> %14460, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14473 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14450, <32 x i16> %14472, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14474 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14473, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14475 = shufflevector <32 x i16> %14474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14476 = sext i32 %a365 to i64
  %14477 = add nsw i64 %14476, 11
  %14478 = mul nsw i64 %14477, %319
  %14479 = add nsw i64 %321, %14478
  %14480 = getelementptr inbounds i16, i16* %258, i64 %14479
  %14481 = getelementptr inbounds i16, i16* %14480, i64 -32
  %14482 = bitcast i16* %14481 to <16 x i16>*
  store <16 x i16> %14475, <16 x i16>* %14482, align 2, !tbaa !401
  %14483 = shufflevector <32 x i16> %14474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14484 = getelementptr inbounds i16, i16* %14480, i64 -16
  %14485 = bitcast i16* %14484 to <16 x i16>*
  store <16 x i16> %14483, <16 x i16>* %14485, align 2, !tbaa !401
  br label %after_bb1374

"for blur_y.s0.x.x.rebased1389":                  ; preds = %"for blur_y.s0.x.x.rebased1389.preheader", %"consume blur_x1397"
  %indvars.iv3276 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1389.preheader" ], [ %indvars.iv.next3277, %"consume blur_x1397" ]
  %14486 = add nsw i64 %indvars.iv3276, %298
  %14487 = icmp slt i64 %14486, 1
  %14488 = trunc i64 %14486 to i32
  %14489 = shl nsw i32 %14488, 5
  %14490 = icmp sgt i32 %194, %14489
  %14491 = or i1 %14487, %14490
  br i1 %14491, label %"produce blur_x1395", label %"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge"

"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1389"
  %.pre3455 = shl nsw i64 %14486, 5
  br label %"consume blur_x1397"

"end for blur_y.s0.x.x.rebased1390":              ; preds = %"consume blur_x1397", %after_bb1374
  br i1 %299, label %"for blur_y.s0.x.x.rebased1405.preheader", label %"end for blur_y.s0.x.x.rebased1406", !prof !386

"for blur_y.s0.x.x.rebased1405.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1390"
  %14492 = sext i32 %t1644876 to i64
  %14493 = zext i32 %.pre-phi3420 to i64
  %14494 = mul nsw i64 %14493, %322
  %14495 = sub nsw i64 %14494, %293
  %14496 = zext i32 %.pre-phi3424 to i64
  %14497 = mul nsw i64 %14496, %322
  %14498 = sub nsw i64 %14497, %293
  %14499 = zext i32 %.pre-phi3434 to i64
  %14500 = mul nsw i64 %14499, %322
  %14501 = sub nsw i64 %14500, %293
  %14502 = sext i32 %a365 to i64
  %14503 = add nsw i64 %14502, 11
  %14504 = mul nsw i64 %14503, %319
  %14505 = add nsw i64 %14504, %323
  br label %"for blur_y.s0.x.x.rebased1405"

"produce blur_x1395":                             ; preds = %"for blur_y.s0.x.x.rebased1389"
  %t8481396 = add nsw i32 %388, %14489
  %14506 = sext i32 %t8481396 to i64
  %14507 = getelementptr inbounds i16, i16* %read_input784, i64 %14506
  %14508 = getelementptr inbounds i16, i16* %14507, i64 1
  %14509 = bitcast i16* %14508 to <16 x i16>*
  %14510 = load <16 x i16>, <16 x i16>* %14509, align 2, !tbaa !396
  %14511 = getelementptr inbounds i16, i16* %14507, i64 17
  %14512 = bitcast i16* %14511 to <16 x i16>*
  %14513 = load <16 x i16>, <16 x i16>* %14512, align 2, !tbaa !396
  %14514 = shufflevector <16 x i16> %14510, <16 x i16> %14513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14515 = getelementptr inbounds i16, i16* %14507, i64 2
  %14516 = bitcast i16* %14515 to <16 x i16>*
  %14517 = load <16 x i16>, <16 x i16>* %14516, align 2, !tbaa !396
  %14518 = getelementptr inbounds i16, i16* %14507, i64 18
  %14519 = bitcast i16* %14518 to <16 x i16>*
  %14520 = load <16 x i16>, <16 x i16>* %14519, align 2, !tbaa !396
  %14521 = shufflevector <16 x i16> %14517, <16 x i16> %14520, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14522 = bitcast i16* %14507 to <16 x i16>*
  %14523 = load <16 x i16>, <16 x i16>* %14522, align 2, !tbaa !396
  %14524 = getelementptr inbounds i16, i16* %14507, i64 16
  %14525 = bitcast i16* %14524 to <16 x i16>*
  %14526 = load <16 x i16>, <16 x i16>* %14525, align 2, !tbaa !396
  %14527 = shufflevector <16 x i16> %14523, <16 x i16> %14526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14528 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14527, <32 x i16> %14521, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14529 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14514, <32 x i16> %14528, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14530 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14529, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14531 = shufflevector <32 x i16> %14530, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14532 = shl nsw i64 %14486, 5
  %14533 = add nsw i64 %14532, %14391
  %14534 = getelementptr inbounds i16, i16* %blur_x841, i64 %14533
  %14535 = bitcast i16* %14534 to <16 x i16>*
  store <16 x i16> %14531, <16 x i16>* %14535, align 2, !tbaa !399
  %14536 = shufflevector <32 x i16> %14530, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14537 = getelementptr inbounds i16, i16* %14534, i64 16
  %14538 = bitcast i16* %14537 to <16 x i16>*
  store <16 x i16> %14536, <16 x i16>* %14538, align 2, !tbaa !399
  br label %"consume blur_x1397"

"consume blur_x1397":                             ; preds = %"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge", %"produce blur_x1395"
  %.pre-phi3456 = phi i64 [ %.pre3455, %"for blur_y.s0.x.x.rebased1389.consume blur_x1397_crit_edge" ], [ %14532, %"produce blur_x1395" ]
  %14539 = add nsw i64 %14394, %.pre-phi3456
  %14540 = getelementptr inbounds i16, i16* %blur_x841, i64 %14539
  %14541 = bitcast i16* %14540 to <16 x i16>*
  %14542 = load <16 x i16>, <16 x i16>* %14541, align 2, !tbaa !399
  %14543 = getelementptr inbounds i16, i16* %14540, i64 16
  %14544 = bitcast i16* %14543 to <16 x i16>*
  %14545 = load <16 x i16>, <16 x i16>* %14544, align 2, !tbaa !399
  %14546 = shufflevector <16 x i16> %14542, <16 x i16> %14545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14547 = add nsw i64 %14397, %.pre-phi3456
  %14548 = getelementptr inbounds i16, i16* %blur_x841, i64 %14547
  %14549 = bitcast i16* %14548 to <16 x i16>*
  %14550 = load <16 x i16>, <16 x i16>* %14549, align 2, !tbaa !399
  %14551 = getelementptr inbounds i16, i16* %14548, i64 16
  %14552 = bitcast i16* %14551 to <16 x i16>*
  %14553 = load <16 x i16>, <16 x i16>* %14552, align 2, !tbaa !399
  %14554 = shufflevector <16 x i16> %14550, <16 x i16> %14553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14555 = add nsw i64 %14400, %.pre-phi3456
  %14556 = getelementptr inbounds i16, i16* %blur_x841, i64 %14555
  %14557 = bitcast i16* %14556 to <16 x i16>*
  %14558 = load <16 x i16>, <16 x i16>* %14557, align 2, !tbaa !399
  %14559 = getelementptr inbounds i16, i16* %14556, i64 16
  %14560 = bitcast i16* %14559 to <16 x i16>*
  %14561 = load <16 x i16>, <16 x i16>* %14560, align 2, !tbaa !399
  %14562 = shufflevector <16 x i16> %14558, <16 x i16> %14561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14563 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14562, <32 x i16> %14554, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14564 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14546, <32 x i16> %14563, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14565 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14564, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14566 = shufflevector <32 x i16> %14565, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14567 = add nsw i64 %14404, %.pre-phi3456
  %14568 = getelementptr inbounds i16, i16* %258, i64 %14567
  %14569 = bitcast i16* %14568 to <16 x i16>*
  store <16 x i16> %14566, <16 x i16>* %14569, align 2, !tbaa !401
  %14570 = shufflevector <32 x i16> %14565, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14571 = getelementptr inbounds i16, i16* %14568, i64 16
  %14572 = bitcast i16* %14571 to <16 x i16>*
  store <16 x i16> %14570, <16 x i16>* %14572, align 2, !tbaa !401
  %indvars.iv.next3277 = add nuw nsw i64 %indvars.iv3276, 1
  %14573 = icmp eq i64 %indvars.iv.next3277, %zext3278
  br i1 %14573, label %"end for blur_y.s0.x.x.rebased1390", label %"for blur_y.s0.x.x.rebased1389"

"for blur_y.s0.x.x.rebased1405":                  ; preds = %"for blur_y.s0.x.x.rebased1405.preheader", %"consume blur_x1416"
  %blur_y.s0.x.x.rebased1407 = phi i32 [ %14648, %"consume blur_x1416" ], [ 0, %"for blur_y.s0.x.x.rebased1405.preheader" ]
  %14574 = add nsw i32 %blur_y.s0.x.x.rebased1407, %t1582776
  %a2742 = shl nsw i32 %14574, 5
  %14575 = icmp sgt i32 %t1603, %a2742
  %blur_y.s0.x.v0.base.s1408 = select i1 %14575, i32 %a2742, i32 %t1603
  %14576 = icmp slt i32 %14574, 1
  %14577 = icmp sgt i32 %194, %a2742
  %14578 = or i1 %14576, %14577
  br i1 %14578, label %"produce blur_x1413", label %"consume blur_x1416"

"end for blur_y.s0.x.x.rebased1406":              ; preds = %"consume blur_x1416", %"end for blur_y.s0.x.x.rebased1390"
  br i1 %225, label %"produce blur_x1420", label %after_bb1417

"produce blur_x1413":                             ; preds = %"for blur_y.s0.x.x.rebased1405"
  %14579 = icmp slt i32 %blur_y.s0.x.v0.base.s1408, %194
  %blur_x.s0.x.v1.base.s1414 = select i1 %14579, i32 %blur_y.s0.x.v0.base.s1408, i32 %194
  %t8531415 = add nsw i32 %388, %blur_x.s0.x.v1.base.s1414
  %14580 = sext i32 %t8531415 to i64
  %14581 = getelementptr inbounds i16, i16* %read_input784, i64 %14580
  %14582 = getelementptr inbounds i16, i16* %14581, i64 1
  %14583 = bitcast i16* %14582 to <16 x i16>*
  %14584 = load <16 x i16>, <16 x i16>* %14583, align 2, !tbaa !396
  %14585 = getelementptr inbounds i16, i16* %14581, i64 17
  %14586 = bitcast i16* %14585 to <16 x i16>*
  %14587 = load <16 x i16>, <16 x i16>* %14586, align 2, !tbaa !396
  %14588 = shufflevector <16 x i16> %14584, <16 x i16> %14587, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14589 = getelementptr inbounds i16, i16* %14581, i64 2
  %14590 = bitcast i16* %14589 to <16 x i16>*
  %14591 = load <16 x i16>, <16 x i16>* %14590, align 2, !tbaa !396
  %14592 = getelementptr inbounds i16, i16* %14581, i64 18
  %14593 = bitcast i16* %14592 to <16 x i16>*
  %14594 = load <16 x i16>, <16 x i16>* %14593, align 2, !tbaa !396
  %14595 = shufflevector <16 x i16> %14591, <16 x i16> %14594, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14596 = bitcast i16* %14581 to <16 x i16>*
  %14597 = load <16 x i16>, <16 x i16>* %14596, align 2, !tbaa !396
  %14598 = getelementptr inbounds i16, i16* %14581, i64 16
  %14599 = bitcast i16* %14598 to <16 x i16>*
  %14600 = load <16 x i16>, <16 x i16>* %14599, align 2, !tbaa !396
  %14601 = shufflevector <16 x i16> %14597, <16 x i16> %14600, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14602 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14601, <32 x i16> %14595, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14603 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14588, <32 x i16> %14602, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14604 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14603, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14605 = shufflevector <32 x i16> %14604, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14606 = sext i32 %blur_x.s0.x.v1.base.s1414 to i64
  %14607 = add nsw i64 %14606, %14492
  %14608 = getelementptr inbounds i16, i16* %blur_x841, i64 %14607
  %14609 = bitcast i16* %14608 to <16 x i16>*
  store <16 x i16> %14605, <16 x i16>* %14609, align 2, !tbaa !399
  %14610 = shufflevector <32 x i16> %14604, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14611 = getelementptr inbounds i16, i16* %14608, i64 16
  %14612 = bitcast i16* %14611 to <16 x i16>*
  store <16 x i16> %14610, <16 x i16>* %14612, align 2, !tbaa !399
  br label %"consume blur_x1416"

"consume blur_x1416":                             ; preds = %"for blur_y.s0.x.x.rebased1405", %"produce blur_x1413"
  %14613 = sext i32 %blur_y.s0.x.v0.base.s1408 to i64
  %14614 = add nsw i64 %14495, %14613
  %14615 = getelementptr inbounds i16, i16* %blur_x841, i64 %14614
  %14616 = bitcast i16* %14615 to <16 x i16>*
  %14617 = load <16 x i16>, <16 x i16>* %14616, align 2, !tbaa !399
  %14618 = getelementptr inbounds i16, i16* %14615, i64 16
  %14619 = bitcast i16* %14618 to <16 x i16>*
  %14620 = load <16 x i16>, <16 x i16>* %14619, align 2, !tbaa !399
  %14621 = shufflevector <16 x i16> %14617, <16 x i16> %14620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14622 = add nsw i64 %14498, %14613
  %14623 = getelementptr inbounds i16, i16* %blur_x841, i64 %14622
  %14624 = bitcast i16* %14623 to <16 x i16>*
  %14625 = load <16 x i16>, <16 x i16>* %14624, align 2, !tbaa !399
  %14626 = getelementptr inbounds i16, i16* %14623, i64 16
  %14627 = bitcast i16* %14626 to <16 x i16>*
  %14628 = load <16 x i16>, <16 x i16>* %14627, align 2, !tbaa !399
  %14629 = shufflevector <16 x i16> %14625, <16 x i16> %14628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14630 = add nsw i64 %14501, %14613
  %14631 = getelementptr inbounds i16, i16* %blur_x841, i64 %14630
  %14632 = bitcast i16* %14631 to <16 x i16>*
  %14633 = load <16 x i16>, <16 x i16>* %14632, align 2, !tbaa !399
  %14634 = getelementptr inbounds i16, i16* %14631, i64 16
  %14635 = bitcast i16* %14634 to <16 x i16>*
  %14636 = load <16 x i16>, <16 x i16>* %14635, align 2, !tbaa !399
  %14637 = shufflevector <16 x i16> %14633, <16 x i16> %14636, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14638 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14637, <32 x i16> %14629, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14639 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14621, <32 x i16> %14638, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14640 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14639, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14641 = shufflevector <32 x i16> %14640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14642 = add nsw i64 %14505, %14613
  %14643 = getelementptr inbounds i16, i16* %258, i64 %14642
  %14644 = bitcast i16* %14643 to <16 x i16>*
  store <16 x i16> %14641, <16 x i16>* %14644, align 2, !tbaa !401
  %14645 = shufflevector <32 x i16> %14640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14646 = getelementptr inbounds i16, i16* %14643, i64 16
  %14647 = bitcast i16* %14646 to <16 x i16>*
  store <16 x i16> %14645, <16 x i16>* %14647, align 2, !tbaa !401
  %14648 = add nuw nsw i32 %blur_y.s0.x.x.rebased1407, 1
  %.not2514 = icmp eq i32 %14648, %t1639860
  br i1 %.not2514, label %"end for blur_y.s0.x.x.rebased1406", label %"for blur_y.s0.x.x.rebased1405"

after_bb1417:                                     ; preds = %"end for blur_y.s0.x.x.rebased1406", %"produce blur_x1420"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1432.preheader", label %"end for blur_y.s0.x.x.rebased1433", !prof !386

"for blur_y.s0.x.x.rebased1432.preheader":        ; preds = %after_bb1417
  %14649 = sext i32 %t1650912 to i64
  %14650 = zext i32 %.pre-phi3424 to i64
  %14651 = mul nsw i64 %14650, %322
  %14652 = sub nsw i64 %14651, %293
  %14653 = zext i32 %.pre-phi3428 to i64
  %14654 = mul nsw i64 %14653, %322
  %14655 = sub nsw i64 %14654, %293
  %14656 = zext i32 %.pre-phi3420 to i64
  %14657 = mul nsw i64 %14656, %322
  %14658 = sub nsw i64 %14657, %293
  %14659 = sext i32 %a365 to i64
  %14660 = add nsw i64 %14659, 12
  %14661 = mul nsw i64 %14660, %319
  %14662 = add nsw i64 %14661, %323
  br label %"for blur_y.s0.x.x.rebased1432"

"produce blur_x1420":                             ; preds = %"end for blur_y.s0.x.x.rebased1406"
  %14663 = getelementptr inbounds i16, i16* %read_input784, i64 %392
  %14664 = getelementptr inbounds i16, i16* %14663, i64 -31
  %14665 = bitcast i16* %14664 to <16 x i16>*
  %14666 = load <16 x i16>, <16 x i16>* %14665, align 2, !tbaa !396
  %14667 = getelementptr inbounds i16, i16* %14663, i64 -15
  %14668 = bitcast i16* %14667 to <16 x i16>*
  %14669 = load <16 x i16>, <16 x i16>* %14668, align 2, !tbaa !396
  %14670 = shufflevector <16 x i16> %14666, <16 x i16> %14669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14671 = getelementptr inbounds i16, i16* %14663, i64 -30
  %14672 = bitcast i16* %14671 to <16 x i16>*
  %14673 = load <16 x i16>, <16 x i16>* %14672, align 2, !tbaa !396
  %14674 = getelementptr inbounds i16, i16* %14663, i64 -14
  %14675 = bitcast i16* %14674 to <16 x i16>*
  %14676 = load <16 x i16>, <16 x i16>* %14675, align 2, !tbaa !396
  %14677 = shufflevector <16 x i16> %14673, <16 x i16> %14676, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14678 = getelementptr inbounds i16, i16* %14663, i64 -32
  %14679 = bitcast i16* %14678 to <16 x i16>*
  %14680 = load <16 x i16>, <16 x i16>* %14679, align 2, !tbaa !396
  %14681 = getelementptr inbounds i16, i16* %14663, i64 -16
  %14682 = bitcast i16* %14681 to <16 x i16>*
  %14683 = load <16 x i16>, <16 x i16>* %14682, align 2, !tbaa !396
  %14684 = shufflevector <16 x i16> %14680, <16 x i16> %14683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14685 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14684, <32 x i16> %14677, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14686 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14670, <32 x i16> %14685, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14687 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14686, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14688 = shufflevector <32 x i16> %14687, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14689 = zext i32 %.pre-phi3428 to i64
  %14690 = mul nsw i64 %294, %14689
  %14691 = add nsw i64 %296, %14690
  %14692 = getelementptr inbounds i16, i16* %blur_x841, i64 %14691
  %14693 = getelementptr inbounds i16, i16* %14692, i64 -32
  %14694 = bitcast i16* %14693 to <16 x i16>*
  store <16 x i16> %14688, <16 x i16>* %14694, align 2, !tbaa !399
  %14695 = shufflevector <32 x i16> %14687, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14696 = getelementptr inbounds i16, i16* %14692, i64 -16
  %14697 = bitcast i16* %14696 to <16 x i16>*
  store <16 x i16> %14695, <16 x i16>* %14697, align 2, !tbaa !399
  %14698 = zext i32 %.pre-phi3424 to i64
  %14699 = mul nsw i64 %14698, %318
  %14700 = add nsw i64 %14699, %291
  %14701 = getelementptr inbounds i16, i16* %blur_x841, i64 %14700
  %14702 = getelementptr inbounds i16, i16* %14701, i64 -32
  %14703 = bitcast i16* %14702 to <16 x i16>*
  %14704 = load <16 x i16>, <16 x i16>* %14703, align 2, !tbaa !399
  %14705 = getelementptr inbounds i16, i16* %14701, i64 -16
  %14706 = bitcast i16* %14705 to <16 x i16>*
  %14707 = load <16 x i16>, <16 x i16>* %14706, align 2, !tbaa !399
  %14708 = shufflevector <16 x i16> %14704, <16 x i16> %14707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14709 = mul nsw i64 %14689, %318
  %14710 = add nsw i64 %14709, %291
  %14711 = getelementptr inbounds i16, i16* %blur_x841, i64 %14710
  %14712 = getelementptr inbounds i16, i16* %14711, i64 -32
  %14713 = bitcast i16* %14712 to <16 x i16>*
  %14714 = load <16 x i16>, <16 x i16>* %14713, align 2, !tbaa !399
  %14715 = getelementptr inbounds i16, i16* %14711, i64 -16
  %14716 = bitcast i16* %14715 to <16 x i16>*
  %14717 = load <16 x i16>, <16 x i16>* %14716, align 2, !tbaa !399
  %14718 = shufflevector <16 x i16> %14714, <16 x i16> %14717, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14719 = zext i32 %.pre-phi3420 to i64
  %14720 = mul nsw i64 %14719, %318
  %14721 = add nsw i64 %14720, %291
  %14722 = getelementptr inbounds i16, i16* %blur_x841, i64 %14721
  %14723 = getelementptr inbounds i16, i16* %14722, i64 -32
  %14724 = bitcast i16* %14723 to <16 x i16>*
  %14725 = load <16 x i16>, <16 x i16>* %14724, align 2, !tbaa !399
  %14726 = getelementptr inbounds i16, i16* %14722, i64 -16
  %14727 = bitcast i16* %14726 to <16 x i16>*
  %14728 = load <16 x i16>, <16 x i16>* %14727, align 2, !tbaa !399
  %14729 = shufflevector <16 x i16> %14725, <16 x i16> %14728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14730 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14729, <32 x i16> %14718, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14731 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14708, <32 x i16> %14730, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14732 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14731, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14733 = shufflevector <32 x i16> %14732, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14734 = sext i32 %a365 to i64
  %14735 = add nsw i64 %14734, 12
  %14736 = mul nsw i64 %14735, %319
  %14737 = add nsw i64 %321, %14736
  %14738 = getelementptr inbounds i16, i16* %258, i64 %14737
  %14739 = getelementptr inbounds i16, i16* %14738, i64 -32
  %14740 = bitcast i16* %14739 to <16 x i16>*
  store <16 x i16> %14733, <16 x i16>* %14740, align 2, !tbaa !401
  %14741 = shufflevector <32 x i16> %14732, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14742 = getelementptr inbounds i16, i16* %14738, i64 -16
  %14743 = bitcast i16* %14742 to <16 x i16>*
  store <16 x i16> %14741, <16 x i16>* %14743, align 2, !tbaa !401
  br label %after_bb1417

"for blur_y.s0.x.x.rebased1432":                  ; preds = %"for blur_y.s0.x.x.rebased1432.preheader", %"consume blur_x1440"
  %indvars.iv3279 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1432.preheader" ], [ %indvars.iv.next3280, %"consume blur_x1440" ]
  %14744 = add nsw i64 %indvars.iv3279, %298
  %14745 = icmp slt i64 %14744, 1
  %14746 = trunc i64 %14744 to i32
  %14747 = shl nsw i32 %14746, 5
  %14748 = icmp sgt i32 %194, %14747
  %14749 = or i1 %14745, %14748
  br i1 %14749, label %"produce blur_x1438", label %"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge"

"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1432"
  %.pre3457 = shl nsw i64 %14744, 5
  br label %"consume blur_x1440"

"end for blur_y.s0.x.x.rebased1433":              ; preds = %"consume blur_x1440", %after_bb1417
  br i1 %299, label %"for blur_y.s0.x.x.rebased1448.preheader", label %"end for blur_y.s0.x.x.rebased1449", !prof !386

"for blur_y.s0.x.x.rebased1448.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1433"
  %14750 = sext i32 %t1650912 to i64
  %14751 = zext i32 %.pre-phi3424 to i64
  %14752 = mul nsw i64 %14751, %322
  %14753 = sub nsw i64 %14752, %293
  %14754 = zext i32 %.pre-phi3428 to i64
  %14755 = mul nsw i64 %14754, %322
  %14756 = sub nsw i64 %14755, %293
  %14757 = zext i32 %.pre-phi3420 to i64
  %14758 = mul nsw i64 %14757, %322
  %14759 = sub nsw i64 %14758, %293
  %14760 = sext i32 %a365 to i64
  %14761 = add nsw i64 %14760, 12
  %14762 = mul nsw i64 %14761, %319
  %14763 = add nsw i64 %14762, %323
  br label %"for blur_y.s0.x.x.rebased1448"

"produce blur_x1438":                             ; preds = %"for blur_y.s0.x.x.rebased1432"
  %t8641439 = add nsw i32 %394, %14747
  %14764 = sext i32 %t8641439 to i64
  %14765 = getelementptr inbounds i16, i16* %read_input784, i64 %14764
  %14766 = getelementptr inbounds i16, i16* %14765, i64 1
  %14767 = bitcast i16* %14766 to <16 x i16>*
  %14768 = load <16 x i16>, <16 x i16>* %14767, align 2, !tbaa !396
  %14769 = getelementptr inbounds i16, i16* %14765, i64 17
  %14770 = bitcast i16* %14769 to <16 x i16>*
  %14771 = load <16 x i16>, <16 x i16>* %14770, align 2, !tbaa !396
  %14772 = shufflevector <16 x i16> %14768, <16 x i16> %14771, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14773 = getelementptr inbounds i16, i16* %14765, i64 2
  %14774 = bitcast i16* %14773 to <16 x i16>*
  %14775 = load <16 x i16>, <16 x i16>* %14774, align 2, !tbaa !396
  %14776 = getelementptr inbounds i16, i16* %14765, i64 18
  %14777 = bitcast i16* %14776 to <16 x i16>*
  %14778 = load <16 x i16>, <16 x i16>* %14777, align 2, !tbaa !396
  %14779 = shufflevector <16 x i16> %14775, <16 x i16> %14778, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14780 = bitcast i16* %14765 to <16 x i16>*
  %14781 = load <16 x i16>, <16 x i16>* %14780, align 2, !tbaa !396
  %14782 = getelementptr inbounds i16, i16* %14765, i64 16
  %14783 = bitcast i16* %14782 to <16 x i16>*
  %14784 = load <16 x i16>, <16 x i16>* %14783, align 2, !tbaa !396
  %14785 = shufflevector <16 x i16> %14781, <16 x i16> %14784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14786 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14785, <32 x i16> %14779, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14787 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14772, <32 x i16> %14786, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14788 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14787, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14789 = shufflevector <32 x i16> %14788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14790 = shl nsw i64 %14744, 5
  %14791 = add nsw i64 %14790, %14649
  %14792 = getelementptr inbounds i16, i16* %blur_x841, i64 %14791
  %14793 = bitcast i16* %14792 to <16 x i16>*
  store <16 x i16> %14789, <16 x i16>* %14793, align 2, !tbaa !399
  %14794 = shufflevector <32 x i16> %14788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14795 = getelementptr inbounds i16, i16* %14792, i64 16
  %14796 = bitcast i16* %14795 to <16 x i16>*
  store <16 x i16> %14794, <16 x i16>* %14796, align 2, !tbaa !399
  br label %"consume blur_x1440"

"consume blur_x1440":                             ; preds = %"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge", %"produce blur_x1438"
  %.pre-phi3458 = phi i64 [ %.pre3457, %"for blur_y.s0.x.x.rebased1432.consume blur_x1440_crit_edge" ], [ %14790, %"produce blur_x1438" ]
  %14797 = add nsw i64 %14652, %.pre-phi3458
  %14798 = getelementptr inbounds i16, i16* %blur_x841, i64 %14797
  %14799 = bitcast i16* %14798 to <16 x i16>*
  %14800 = load <16 x i16>, <16 x i16>* %14799, align 2, !tbaa !399
  %14801 = getelementptr inbounds i16, i16* %14798, i64 16
  %14802 = bitcast i16* %14801 to <16 x i16>*
  %14803 = load <16 x i16>, <16 x i16>* %14802, align 2, !tbaa !399
  %14804 = shufflevector <16 x i16> %14800, <16 x i16> %14803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14805 = add nsw i64 %14655, %.pre-phi3458
  %14806 = getelementptr inbounds i16, i16* %blur_x841, i64 %14805
  %14807 = bitcast i16* %14806 to <16 x i16>*
  %14808 = load <16 x i16>, <16 x i16>* %14807, align 2, !tbaa !399
  %14809 = getelementptr inbounds i16, i16* %14806, i64 16
  %14810 = bitcast i16* %14809 to <16 x i16>*
  %14811 = load <16 x i16>, <16 x i16>* %14810, align 2, !tbaa !399
  %14812 = shufflevector <16 x i16> %14808, <16 x i16> %14811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14813 = add nsw i64 %14658, %.pre-phi3458
  %14814 = getelementptr inbounds i16, i16* %blur_x841, i64 %14813
  %14815 = bitcast i16* %14814 to <16 x i16>*
  %14816 = load <16 x i16>, <16 x i16>* %14815, align 2, !tbaa !399
  %14817 = getelementptr inbounds i16, i16* %14814, i64 16
  %14818 = bitcast i16* %14817 to <16 x i16>*
  %14819 = load <16 x i16>, <16 x i16>* %14818, align 2, !tbaa !399
  %14820 = shufflevector <16 x i16> %14816, <16 x i16> %14819, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14821 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14820, <32 x i16> %14812, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14822 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14804, <32 x i16> %14821, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14823 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14822, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14824 = shufflevector <32 x i16> %14823, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14825 = add nsw i64 %14662, %.pre-phi3458
  %14826 = getelementptr inbounds i16, i16* %258, i64 %14825
  %14827 = bitcast i16* %14826 to <16 x i16>*
  store <16 x i16> %14824, <16 x i16>* %14827, align 2, !tbaa !401
  %14828 = shufflevector <32 x i16> %14823, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14829 = getelementptr inbounds i16, i16* %14826, i64 16
  %14830 = bitcast i16* %14829 to <16 x i16>*
  store <16 x i16> %14828, <16 x i16>* %14830, align 2, !tbaa !401
  %indvars.iv.next3280 = add nuw nsw i64 %indvars.iv3279, 1
  %14831 = icmp eq i64 %indvars.iv.next3280, %zext3281
  br i1 %14831, label %"end for blur_y.s0.x.x.rebased1433", label %"for blur_y.s0.x.x.rebased1432"

"for blur_y.s0.x.x.rebased1448":                  ; preds = %"for blur_y.s0.x.x.rebased1448.preheader", %"consume blur_x1459"
  %blur_y.s0.x.x.rebased1450 = phi i32 [ %14906, %"consume blur_x1459" ], [ 0, %"for blur_y.s0.x.x.rebased1448.preheader" ]
  %14832 = add nsw i32 %blur_y.s0.x.x.rebased1450, %t1582776
  %a2899 = shl nsw i32 %14832, 5
  %14833 = icmp sgt i32 %t1603, %a2899
  %blur_y.s0.x.v0.base.s1451 = select i1 %14833, i32 %a2899, i32 %t1603
  %14834 = icmp slt i32 %14832, 1
  %14835 = icmp sgt i32 %194, %a2899
  %14836 = or i1 %14834, %14835
  br i1 %14836, label %"produce blur_x1456", label %"consume blur_x1459"

"end for blur_y.s0.x.x.rebased1449":              ; preds = %"consume blur_x1459", %"end for blur_y.s0.x.x.rebased1433"
  br i1 %225, label %"produce blur_x1463", label %after_bb1460

"produce blur_x1456":                             ; preds = %"for blur_y.s0.x.x.rebased1448"
  %14837 = icmp slt i32 %blur_y.s0.x.v0.base.s1451, %194
  %blur_x.s0.x.v1.base.s1457 = select i1 %14837, i32 %blur_y.s0.x.v0.base.s1451, i32 %194
  %t8691458 = add nsw i32 %394, %blur_x.s0.x.v1.base.s1457
  %14838 = sext i32 %t8691458 to i64
  %14839 = getelementptr inbounds i16, i16* %read_input784, i64 %14838
  %14840 = getelementptr inbounds i16, i16* %14839, i64 1
  %14841 = bitcast i16* %14840 to <16 x i16>*
  %14842 = load <16 x i16>, <16 x i16>* %14841, align 2, !tbaa !396
  %14843 = getelementptr inbounds i16, i16* %14839, i64 17
  %14844 = bitcast i16* %14843 to <16 x i16>*
  %14845 = load <16 x i16>, <16 x i16>* %14844, align 2, !tbaa !396
  %14846 = shufflevector <16 x i16> %14842, <16 x i16> %14845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14847 = getelementptr inbounds i16, i16* %14839, i64 2
  %14848 = bitcast i16* %14847 to <16 x i16>*
  %14849 = load <16 x i16>, <16 x i16>* %14848, align 2, !tbaa !396
  %14850 = getelementptr inbounds i16, i16* %14839, i64 18
  %14851 = bitcast i16* %14850 to <16 x i16>*
  %14852 = load <16 x i16>, <16 x i16>* %14851, align 2, !tbaa !396
  %14853 = shufflevector <16 x i16> %14849, <16 x i16> %14852, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14854 = bitcast i16* %14839 to <16 x i16>*
  %14855 = load <16 x i16>, <16 x i16>* %14854, align 2, !tbaa !396
  %14856 = getelementptr inbounds i16, i16* %14839, i64 16
  %14857 = bitcast i16* %14856 to <16 x i16>*
  %14858 = load <16 x i16>, <16 x i16>* %14857, align 2, !tbaa !396
  %14859 = shufflevector <16 x i16> %14855, <16 x i16> %14858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14860 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14859, <32 x i16> %14853, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14861 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14846, <32 x i16> %14860, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14862 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14861, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14863 = shufflevector <32 x i16> %14862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14864 = sext i32 %blur_x.s0.x.v1.base.s1457 to i64
  %14865 = add nsw i64 %14864, %14750
  %14866 = getelementptr inbounds i16, i16* %blur_x841, i64 %14865
  %14867 = bitcast i16* %14866 to <16 x i16>*
  store <16 x i16> %14863, <16 x i16>* %14867, align 2, !tbaa !399
  %14868 = shufflevector <32 x i16> %14862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14869 = getelementptr inbounds i16, i16* %14866, i64 16
  %14870 = bitcast i16* %14869 to <16 x i16>*
  store <16 x i16> %14868, <16 x i16>* %14870, align 2, !tbaa !399
  br label %"consume blur_x1459"

"consume blur_x1459":                             ; preds = %"for blur_y.s0.x.x.rebased1448", %"produce blur_x1456"
  %14871 = sext i32 %blur_y.s0.x.v0.base.s1451 to i64
  %14872 = add nsw i64 %14753, %14871
  %14873 = getelementptr inbounds i16, i16* %blur_x841, i64 %14872
  %14874 = bitcast i16* %14873 to <16 x i16>*
  %14875 = load <16 x i16>, <16 x i16>* %14874, align 2, !tbaa !399
  %14876 = getelementptr inbounds i16, i16* %14873, i64 16
  %14877 = bitcast i16* %14876 to <16 x i16>*
  %14878 = load <16 x i16>, <16 x i16>* %14877, align 2, !tbaa !399
  %14879 = shufflevector <16 x i16> %14875, <16 x i16> %14878, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14880 = add nsw i64 %14756, %14871
  %14881 = getelementptr inbounds i16, i16* %blur_x841, i64 %14880
  %14882 = bitcast i16* %14881 to <16 x i16>*
  %14883 = load <16 x i16>, <16 x i16>* %14882, align 2, !tbaa !399
  %14884 = getelementptr inbounds i16, i16* %14881, i64 16
  %14885 = bitcast i16* %14884 to <16 x i16>*
  %14886 = load <16 x i16>, <16 x i16>* %14885, align 2, !tbaa !399
  %14887 = shufflevector <16 x i16> %14883, <16 x i16> %14886, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14888 = add nsw i64 %14759, %14871
  %14889 = getelementptr inbounds i16, i16* %blur_x841, i64 %14888
  %14890 = bitcast i16* %14889 to <16 x i16>*
  %14891 = load <16 x i16>, <16 x i16>* %14890, align 2, !tbaa !399
  %14892 = getelementptr inbounds i16, i16* %14889, i64 16
  %14893 = bitcast i16* %14892 to <16 x i16>*
  %14894 = load <16 x i16>, <16 x i16>* %14893, align 2, !tbaa !399
  %14895 = shufflevector <16 x i16> %14891, <16 x i16> %14894, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14896 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14895, <32 x i16> %14887, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14897 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14879, <32 x i16> %14896, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14898 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14897, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14899 = shufflevector <32 x i16> %14898, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14900 = add nsw i64 %14763, %14871
  %14901 = getelementptr inbounds i16, i16* %258, i64 %14900
  %14902 = bitcast i16* %14901 to <16 x i16>*
  store <16 x i16> %14899, <16 x i16>* %14902, align 2, !tbaa !401
  %14903 = shufflevector <32 x i16> %14898, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14904 = getelementptr inbounds i16, i16* %14901, i64 16
  %14905 = bitcast i16* %14904 to <16 x i16>*
  store <16 x i16> %14903, <16 x i16>* %14905, align 2, !tbaa !401
  %14906 = add nuw nsw i32 %blur_y.s0.x.x.rebased1450, 1
  %.not2510 = icmp eq i32 %14906, %t1639860
  br i1 %.not2510, label %"end for blur_y.s0.x.x.rebased1449", label %"for blur_y.s0.x.x.rebased1448"

after_bb1460:                                     ; preds = %"end for blur_y.s0.x.x.rebased1449", %"produce blur_x1463"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1475.preheader", label %"end for blur_y.s0.x.x.rebased1476", !prof !386

"for blur_y.s0.x.x.rebased1475.preheader":        ; preds = %after_bb1460
  %14907 = sext i32 %t1666955 to i64
  %14908 = zext i32 %.pre-phi3428 to i64
  %14909 = mul nsw i64 %14908, %322
  %14910 = sub nsw i64 %14909, %293
  %14911 = zext i32 %.pre-phi3434 to i64
  %14912 = mul nsw i64 %14911, %322
  %14913 = sub nsw i64 %14912, %293
  %14914 = zext i32 %.pre-phi3424 to i64
  %14915 = mul nsw i64 %14914, %322
  %14916 = sub nsw i64 %14915, %293
  %14917 = sext i32 %a365 to i64
  %14918 = add nsw i64 %14917, 13
  %14919 = mul nsw i64 %14918, %319
  %14920 = add nsw i64 %14919, %323
  br label %"for blur_y.s0.x.x.rebased1475"

"produce blur_x1463":                             ; preds = %"end for blur_y.s0.x.x.rebased1449"
  %14921 = getelementptr inbounds i16, i16* %read_input784, i64 %398
  %14922 = getelementptr inbounds i16, i16* %14921, i64 -31
  %14923 = bitcast i16* %14922 to <16 x i16>*
  %14924 = load <16 x i16>, <16 x i16>* %14923, align 2, !tbaa !396
  %14925 = getelementptr inbounds i16, i16* %14921, i64 -15
  %14926 = bitcast i16* %14925 to <16 x i16>*
  %14927 = load <16 x i16>, <16 x i16>* %14926, align 2, !tbaa !396
  %14928 = shufflevector <16 x i16> %14924, <16 x i16> %14927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14929 = getelementptr inbounds i16, i16* %14921, i64 -30
  %14930 = bitcast i16* %14929 to <16 x i16>*
  %14931 = load <16 x i16>, <16 x i16>* %14930, align 2, !tbaa !396
  %14932 = getelementptr inbounds i16, i16* %14921, i64 -14
  %14933 = bitcast i16* %14932 to <16 x i16>*
  %14934 = load <16 x i16>, <16 x i16>* %14933, align 2, !tbaa !396
  %14935 = shufflevector <16 x i16> %14931, <16 x i16> %14934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14936 = getelementptr inbounds i16, i16* %14921, i64 -32
  %14937 = bitcast i16* %14936 to <16 x i16>*
  %14938 = load <16 x i16>, <16 x i16>* %14937, align 2, !tbaa !396
  %14939 = getelementptr inbounds i16, i16* %14921, i64 -16
  %14940 = bitcast i16* %14939 to <16 x i16>*
  %14941 = load <16 x i16>, <16 x i16>* %14940, align 2, !tbaa !396
  %14942 = shufflevector <16 x i16> %14938, <16 x i16> %14941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14943 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14942, <32 x i16> %14935, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14944 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14928, <32 x i16> %14943, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14945 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14944, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14946 = shufflevector <32 x i16> %14945, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14947 = zext i32 %.pre-phi3434 to i64
  %14948 = mul nsw i64 %294, %14947
  %14949 = add nsw i64 %296, %14948
  %14950 = getelementptr inbounds i16, i16* %blur_x841, i64 %14949
  %14951 = getelementptr inbounds i16, i16* %14950, i64 -32
  %14952 = bitcast i16* %14951 to <16 x i16>*
  store <16 x i16> %14946, <16 x i16>* %14952, align 2, !tbaa !399
  %14953 = shufflevector <32 x i16> %14945, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14954 = getelementptr inbounds i16, i16* %14950, i64 -16
  %14955 = bitcast i16* %14954 to <16 x i16>*
  store <16 x i16> %14953, <16 x i16>* %14955, align 2, !tbaa !399
  %14956 = zext i32 %.pre-phi3428 to i64
  %14957 = mul nsw i64 %14956, %318
  %14958 = add nsw i64 %14957, %291
  %14959 = getelementptr inbounds i16, i16* %blur_x841, i64 %14958
  %14960 = getelementptr inbounds i16, i16* %14959, i64 -32
  %14961 = bitcast i16* %14960 to <16 x i16>*
  %14962 = load <16 x i16>, <16 x i16>* %14961, align 2, !tbaa !399
  %14963 = getelementptr inbounds i16, i16* %14959, i64 -16
  %14964 = bitcast i16* %14963 to <16 x i16>*
  %14965 = load <16 x i16>, <16 x i16>* %14964, align 2, !tbaa !399
  %14966 = shufflevector <16 x i16> %14962, <16 x i16> %14965, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14967 = mul nsw i64 %14947, %318
  %14968 = add nsw i64 %14967, %291
  %14969 = getelementptr inbounds i16, i16* %blur_x841, i64 %14968
  %14970 = getelementptr inbounds i16, i16* %14969, i64 -32
  %14971 = bitcast i16* %14970 to <16 x i16>*
  %14972 = load <16 x i16>, <16 x i16>* %14971, align 2, !tbaa !399
  %14973 = getelementptr inbounds i16, i16* %14969, i64 -16
  %14974 = bitcast i16* %14973 to <16 x i16>*
  %14975 = load <16 x i16>, <16 x i16>* %14974, align 2, !tbaa !399
  %14976 = shufflevector <16 x i16> %14972, <16 x i16> %14975, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14977 = zext i32 %.pre-phi3424 to i64
  %14978 = mul nsw i64 %14977, %318
  %14979 = add nsw i64 %14978, %291
  %14980 = getelementptr inbounds i16, i16* %blur_x841, i64 %14979
  %14981 = getelementptr inbounds i16, i16* %14980, i64 -32
  %14982 = bitcast i16* %14981 to <16 x i16>*
  %14983 = load <16 x i16>, <16 x i16>* %14982, align 2, !tbaa !399
  %14984 = getelementptr inbounds i16, i16* %14980, i64 -16
  %14985 = bitcast i16* %14984 to <16 x i16>*
  %14986 = load <16 x i16>, <16 x i16>* %14985, align 2, !tbaa !399
  %14987 = shufflevector <16 x i16> %14983, <16 x i16> %14986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14988 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14987, <32 x i16> %14976, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14989 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %14966, <32 x i16> %14988, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %14990 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %14989, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %14991 = shufflevector <32 x i16> %14990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14992 = sext i32 %a365 to i64
  %14993 = add nsw i64 %14992, 13
  %14994 = mul nsw i64 %14993, %319
  %14995 = add nsw i64 %321, %14994
  %14996 = getelementptr inbounds i16, i16* %258, i64 %14995
  %14997 = getelementptr inbounds i16, i16* %14996, i64 -32
  %14998 = bitcast i16* %14997 to <16 x i16>*
  store <16 x i16> %14991, <16 x i16>* %14998, align 2, !tbaa !401
  %14999 = shufflevector <32 x i16> %14990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15000 = getelementptr inbounds i16, i16* %14996, i64 -16
  %15001 = bitcast i16* %15000 to <16 x i16>*
  store <16 x i16> %14999, <16 x i16>* %15001, align 2, !tbaa !401
  br label %after_bb1460

"for blur_y.s0.x.x.rebased1475":                  ; preds = %"for blur_y.s0.x.x.rebased1475.preheader", %"consume blur_x1483"
  %indvars.iv3282 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1475.preheader" ], [ %indvars.iv.next3283, %"consume blur_x1483" ]
  %15002 = add nsw i64 %indvars.iv3282, %298
  %15003 = icmp slt i64 %15002, 1
  %15004 = trunc i64 %15002 to i32
  %15005 = shl nsw i32 %15004, 5
  %15006 = icmp sgt i32 %194, %15005
  %15007 = or i1 %15003, %15006
  br i1 %15007, label %"produce blur_x1481", label %"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge"

"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1475"
  %.pre3459 = shl nsw i64 %15002, 5
  br label %"consume blur_x1483"

"end for blur_y.s0.x.x.rebased1476":              ; preds = %"consume blur_x1483", %after_bb1460
  br i1 %299, label %"for blur_y.s0.x.x.rebased1491.preheader", label %"end for blur_y.s0.x.x.rebased1492", !prof !386

"for blur_y.s0.x.x.rebased1491.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1476"
  %15008 = sext i32 %t1666955 to i64
  %15009 = zext i32 %.pre-phi3428 to i64
  %15010 = mul nsw i64 %15009, %322
  %15011 = sub nsw i64 %15010, %293
  %15012 = zext i32 %.pre-phi3434 to i64
  %15013 = mul nsw i64 %15012, %322
  %15014 = sub nsw i64 %15013, %293
  %15015 = zext i32 %.pre-phi3424 to i64
  %15016 = mul nsw i64 %15015, %322
  %15017 = sub nsw i64 %15016, %293
  %15018 = sext i32 %a365 to i64
  %15019 = add nsw i64 %15018, 13
  %15020 = mul nsw i64 %15019, %319
  %15021 = add nsw i64 %15020, %323
  br label %"for blur_y.s0.x.x.rebased1491"

"produce blur_x1481":                             ; preds = %"for blur_y.s0.x.x.rebased1475"
  %t8801482 = add nsw i32 %400, %15005
  %15022 = sext i32 %t8801482 to i64
  %15023 = getelementptr inbounds i16, i16* %read_input784, i64 %15022
  %15024 = getelementptr inbounds i16, i16* %15023, i64 1
  %15025 = bitcast i16* %15024 to <16 x i16>*
  %15026 = load <16 x i16>, <16 x i16>* %15025, align 2, !tbaa !396
  %15027 = getelementptr inbounds i16, i16* %15023, i64 17
  %15028 = bitcast i16* %15027 to <16 x i16>*
  %15029 = load <16 x i16>, <16 x i16>* %15028, align 2, !tbaa !396
  %15030 = shufflevector <16 x i16> %15026, <16 x i16> %15029, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15031 = getelementptr inbounds i16, i16* %15023, i64 2
  %15032 = bitcast i16* %15031 to <16 x i16>*
  %15033 = load <16 x i16>, <16 x i16>* %15032, align 2, !tbaa !396
  %15034 = getelementptr inbounds i16, i16* %15023, i64 18
  %15035 = bitcast i16* %15034 to <16 x i16>*
  %15036 = load <16 x i16>, <16 x i16>* %15035, align 2, !tbaa !396
  %15037 = shufflevector <16 x i16> %15033, <16 x i16> %15036, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15038 = bitcast i16* %15023 to <16 x i16>*
  %15039 = load <16 x i16>, <16 x i16>* %15038, align 2, !tbaa !396
  %15040 = getelementptr inbounds i16, i16* %15023, i64 16
  %15041 = bitcast i16* %15040 to <16 x i16>*
  %15042 = load <16 x i16>, <16 x i16>* %15041, align 2, !tbaa !396
  %15043 = shufflevector <16 x i16> %15039, <16 x i16> %15042, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15044 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15043, <32 x i16> %15037, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15045 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15030, <32 x i16> %15044, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15046 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15045, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15047 = shufflevector <32 x i16> %15046, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15048 = shl nsw i64 %15002, 5
  %15049 = add nsw i64 %15048, %14907
  %15050 = getelementptr inbounds i16, i16* %blur_x841, i64 %15049
  %15051 = bitcast i16* %15050 to <16 x i16>*
  store <16 x i16> %15047, <16 x i16>* %15051, align 2, !tbaa !399
  %15052 = shufflevector <32 x i16> %15046, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15053 = getelementptr inbounds i16, i16* %15050, i64 16
  %15054 = bitcast i16* %15053 to <16 x i16>*
  store <16 x i16> %15052, <16 x i16>* %15054, align 2, !tbaa !399
  br label %"consume blur_x1483"

"consume blur_x1483":                             ; preds = %"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge", %"produce blur_x1481"
  %.pre-phi3460 = phi i64 [ %.pre3459, %"for blur_y.s0.x.x.rebased1475.consume blur_x1483_crit_edge" ], [ %15048, %"produce blur_x1481" ]
  %15055 = add nsw i64 %14910, %.pre-phi3460
  %15056 = getelementptr inbounds i16, i16* %blur_x841, i64 %15055
  %15057 = bitcast i16* %15056 to <16 x i16>*
  %15058 = load <16 x i16>, <16 x i16>* %15057, align 2, !tbaa !399
  %15059 = getelementptr inbounds i16, i16* %15056, i64 16
  %15060 = bitcast i16* %15059 to <16 x i16>*
  %15061 = load <16 x i16>, <16 x i16>* %15060, align 2, !tbaa !399
  %15062 = shufflevector <16 x i16> %15058, <16 x i16> %15061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15063 = add nsw i64 %14913, %.pre-phi3460
  %15064 = getelementptr inbounds i16, i16* %blur_x841, i64 %15063
  %15065 = bitcast i16* %15064 to <16 x i16>*
  %15066 = load <16 x i16>, <16 x i16>* %15065, align 2, !tbaa !399
  %15067 = getelementptr inbounds i16, i16* %15064, i64 16
  %15068 = bitcast i16* %15067 to <16 x i16>*
  %15069 = load <16 x i16>, <16 x i16>* %15068, align 2, !tbaa !399
  %15070 = shufflevector <16 x i16> %15066, <16 x i16> %15069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15071 = add nsw i64 %14916, %.pre-phi3460
  %15072 = getelementptr inbounds i16, i16* %blur_x841, i64 %15071
  %15073 = bitcast i16* %15072 to <16 x i16>*
  %15074 = load <16 x i16>, <16 x i16>* %15073, align 2, !tbaa !399
  %15075 = getelementptr inbounds i16, i16* %15072, i64 16
  %15076 = bitcast i16* %15075 to <16 x i16>*
  %15077 = load <16 x i16>, <16 x i16>* %15076, align 2, !tbaa !399
  %15078 = shufflevector <16 x i16> %15074, <16 x i16> %15077, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15079 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15078, <32 x i16> %15070, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15080 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15062, <32 x i16> %15079, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15081 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15080, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15082 = shufflevector <32 x i16> %15081, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15083 = add nsw i64 %14920, %.pre-phi3460
  %15084 = getelementptr inbounds i16, i16* %258, i64 %15083
  %15085 = bitcast i16* %15084 to <16 x i16>*
  store <16 x i16> %15082, <16 x i16>* %15085, align 2, !tbaa !401
  %15086 = shufflevector <32 x i16> %15081, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15087 = getelementptr inbounds i16, i16* %15084, i64 16
  %15088 = bitcast i16* %15087 to <16 x i16>*
  store <16 x i16> %15086, <16 x i16>* %15088, align 2, !tbaa !401
  %indvars.iv.next3283 = add nuw nsw i64 %indvars.iv3282, 1
  %15089 = icmp eq i64 %indvars.iv.next3283, %zext3284
  br i1 %15089, label %"end for blur_y.s0.x.x.rebased1476", label %"for blur_y.s0.x.x.rebased1475"

"for blur_y.s0.x.x.rebased1491":                  ; preds = %"for blur_y.s0.x.x.rebased1491.preheader", %"consume blur_x1502"
  %blur_y.s0.x.x.rebased1493 = phi i32 [ %15164, %"consume blur_x1502" ], [ 0, %"for blur_y.s0.x.x.rebased1491.preheader" ]
  %15090 = add nsw i32 %blur_y.s0.x.x.rebased1493, %t1582776
  %a3056 = shl nsw i32 %15090, 5
  %15091 = icmp sgt i32 %t1603, %a3056
  %blur_y.s0.x.v0.base.s1494 = select i1 %15091, i32 %a3056, i32 %t1603
  %15092 = icmp slt i32 %15090, 1
  %15093 = icmp sgt i32 %194, %a3056
  %15094 = or i1 %15092, %15093
  br i1 %15094, label %"produce blur_x1499", label %"consume blur_x1502"

"end for blur_y.s0.x.x.rebased1492":              ; preds = %"consume blur_x1502", %"end for blur_y.s0.x.x.rebased1476"
  br i1 %225, label %"produce blur_x1506", label %after_bb1503

"produce blur_x1499":                             ; preds = %"for blur_y.s0.x.x.rebased1491"
  %15095 = icmp slt i32 %blur_y.s0.x.v0.base.s1494, %194
  %blur_x.s0.x.v1.base.s1500 = select i1 %15095, i32 %blur_y.s0.x.v0.base.s1494, i32 %194
  %t8851501 = add nsw i32 %400, %blur_x.s0.x.v1.base.s1500
  %15096 = sext i32 %t8851501 to i64
  %15097 = getelementptr inbounds i16, i16* %read_input784, i64 %15096
  %15098 = getelementptr inbounds i16, i16* %15097, i64 1
  %15099 = bitcast i16* %15098 to <16 x i16>*
  %15100 = load <16 x i16>, <16 x i16>* %15099, align 2, !tbaa !396
  %15101 = getelementptr inbounds i16, i16* %15097, i64 17
  %15102 = bitcast i16* %15101 to <16 x i16>*
  %15103 = load <16 x i16>, <16 x i16>* %15102, align 2, !tbaa !396
  %15104 = shufflevector <16 x i16> %15100, <16 x i16> %15103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15105 = getelementptr inbounds i16, i16* %15097, i64 2
  %15106 = bitcast i16* %15105 to <16 x i16>*
  %15107 = load <16 x i16>, <16 x i16>* %15106, align 2, !tbaa !396
  %15108 = getelementptr inbounds i16, i16* %15097, i64 18
  %15109 = bitcast i16* %15108 to <16 x i16>*
  %15110 = load <16 x i16>, <16 x i16>* %15109, align 2, !tbaa !396
  %15111 = shufflevector <16 x i16> %15107, <16 x i16> %15110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15112 = bitcast i16* %15097 to <16 x i16>*
  %15113 = load <16 x i16>, <16 x i16>* %15112, align 2, !tbaa !396
  %15114 = getelementptr inbounds i16, i16* %15097, i64 16
  %15115 = bitcast i16* %15114 to <16 x i16>*
  %15116 = load <16 x i16>, <16 x i16>* %15115, align 2, !tbaa !396
  %15117 = shufflevector <16 x i16> %15113, <16 x i16> %15116, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15118 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15117, <32 x i16> %15111, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15119 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15104, <32 x i16> %15118, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15120 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15119, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15121 = shufflevector <32 x i16> %15120, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15122 = sext i32 %blur_x.s0.x.v1.base.s1500 to i64
  %15123 = add nsw i64 %15122, %15008
  %15124 = getelementptr inbounds i16, i16* %blur_x841, i64 %15123
  %15125 = bitcast i16* %15124 to <16 x i16>*
  store <16 x i16> %15121, <16 x i16>* %15125, align 2, !tbaa !399
  %15126 = shufflevector <32 x i16> %15120, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15127 = getelementptr inbounds i16, i16* %15124, i64 16
  %15128 = bitcast i16* %15127 to <16 x i16>*
  store <16 x i16> %15126, <16 x i16>* %15128, align 2, !tbaa !399
  br label %"consume blur_x1502"

"consume blur_x1502":                             ; preds = %"for blur_y.s0.x.x.rebased1491", %"produce blur_x1499"
  %15129 = sext i32 %blur_y.s0.x.v0.base.s1494 to i64
  %15130 = add nsw i64 %15011, %15129
  %15131 = getelementptr inbounds i16, i16* %blur_x841, i64 %15130
  %15132 = bitcast i16* %15131 to <16 x i16>*
  %15133 = load <16 x i16>, <16 x i16>* %15132, align 2, !tbaa !399
  %15134 = getelementptr inbounds i16, i16* %15131, i64 16
  %15135 = bitcast i16* %15134 to <16 x i16>*
  %15136 = load <16 x i16>, <16 x i16>* %15135, align 2, !tbaa !399
  %15137 = shufflevector <16 x i16> %15133, <16 x i16> %15136, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15138 = add nsw i64 %15014, %15129
  %15139 = getelementptr inbounds i16, i16* %blur_x841, i64 %15138
  %15140 = bitcast i16* %15139 to <16 x i16>*
  %15141 = load <16 x i16>, <16 x i16>* %15140, align 2, !tbaa !399
  %15142 = getelementptr inbounds i16, i16* %15139, i64 16
  %15143 = bitcast i16* %15142 to <16 x i16>*
  %15144 = load <16 x i16>, <16 x i16>* %15143, align 2, !tbaa !399
  %15145 = shufflevector <16 x i16> %15141, <16 x i16> %15144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15146 = add nsw i64 %15017, %15129
  %15147 = getelementptr inbounds i16, i16* %blur_x841, i64 %15146
  %15148 = bitcast i16* %15147 to <16 x i16>*
  %15149 = load <16 x i16>, <16 x i16>* %15148, align 2, !tbaa !399
  %15150 = getelementptr inbounds i16, i16* %15147, i64 16
  %15151 = bitcast i16* %15150 to <16 x i16>*
  %15152 = load <16 x i16>, <16 x i16>* %15151, align 2, !tbaa !399
  %15153 = shufflevector <16 x i16> %15149, <16 x i16> %15152, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15154 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15153, <32 x i16> %15145, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15155 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15137, <32 x i16> %15154, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15156 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15155, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15157 = shufflevector <32 x i16> %15156, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15158 = add nsw i64 %15021, %15129
  %15159 = getelementptr inbounds i16, i16* %258, i64 %15158
  %15160 = bitcast i16* %15159 to <16 x i16>*
  store <16 x i16> %15157, <16 x i16>* %15160, align 2, !tbaa !401
  %15161 = shufflevector <32 x i16> %15156, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15162 = getelementptr inbounds i16, i16* %15159, i64 16
  %15163 = bitcast i16* %15162 to <16 x i16>*
  store <16 x i16> %15161, <16 x i16>* %15163, align 2, !tbaa !401
  %15164 = add nuw nsw i32 %blur_y.s0.x.x.rebased1493, 1
  %.not2506 = icmp eq i32 %15164, %t1639860
  br i1 %.not2506, label %"end for blur_y.s0.x.x.rebased1492", label %"for blur_y.s0.x.x.rebased1491"

after_bb1503:                                     ; preds = %"end for blur_y.s0.x.x.rebased1492", %"produce blur_x1506"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1518.preheader", label %"end for blur_y.s0.x.x.rebased1519", !prof !386

"for blur_y.s0.x.x.rebased1518.preheader":        ; preds = %after_bb1503
  %15165 = sext i32 %t1638848 to i64
  %15166 = zext i32 %.pre-phi3434 to i64
  %15167 = mul nsw i64 %15166, %322
  %15168 = sub nsw i64 %15167, %293
  %15169 = zext i32 %.pre-phi3420 to i64
  %15170 = mul nsw i64 %15169, %322
  %15171 = sub nsw i64 %15170, %293
  %15172 = zext i32 %.pre-phi3428 to i64
  %15173 = mul nsw i64 %15172, %322
  %15174 = sub nsw i64 %15173, %293
  %15175 = sext i32 %a365 to i64
  %15176 = add nsw i64 %15175, 14
  %15177 = mul nsw i64 %15176, %319
  %15178 = add nsw i64 %15177, %323
  br label %"for blur_y.s0.x.x.rebased1518"

"produce blur_x1506":                             ; preds = %"end for blur_y.s0.x.x.rebased1492"
  %15179 = getelementptr inbounds i16, i16* %read_input784, i64 %404
  %15180 = getelementptr inbounds i16, i16* %15179, i64 -31
  %15181 = bitcast i16* %15180 to <16 x i16>*
  %15182 = load <16 x i16>, <16 x i16>* %15181, align 2, !tbaa !396
  %15183 = getelementptr inbounds i16, i16* %15179, i64 -15
  %15184 = bitcast i16* %15183 to <16 x i16>*
  %15185 = load <16 x i16>, <16 x i16>* %15184, align 2, !tbaa !396
  %15186 = shufflevector <16 x i16> %15182, <16 x i16> %15185, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15187 = getelementptr inbounds i16, i16* %15179, i64 -30
  %15188 = bitcast i16* %15187 to <16 x i16>*
  %15189 = load <16 x i16>, <16 x i16>* %15188, align 2, !tbaa !396
  %15190 = getelementptr inbounds i16, i16* %15179, i64 -14
  %15191 = bitcast i16* %15190 to <16 x i16>*
  %15192 = load <16 x i16>, <16 x i16>* %15191, align 2, !tbaa !396
  %15193 = shufflevector <16 x i16> %15189, <16 x i16> %15192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15194 = getelementptr inbounds i16, i16* %15179, i64 -32
  %15195 = bitcast i16* %15194 to <16 x i16>*
  %15196 = load <16 x i16>, <16 x i16>* %15195, align 2, !tbaa !396
  %15197 = getelementptr inbounds i16, i16* %15179, i64 -16
  %15198 = bitcast i16* %15197 to <16 x i16>*
  %15199 = load <16 x i16>, <16 x i16>* %15198, align 2, !tbaa !396
  %15200 = shufflevector <16 x i16> %15196, <16 x i16> %15199, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15201 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15200, <32 x i16> %15193, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15202 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15186, <32 x i16> %15201, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15203 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15202, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15204 = shufflevector <32 x i16> %15203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15205 = zext i32 %.pre-phi3420 to i64
  %15206 = mul nsw i64 %294, %15205
  %15207 = add nsw i64 %296, %15206
  %15208 = getelementptr inbounds i16, i16* %blur_x841, i64 %15207
  %15209 = getelementptr inbounds i16, i16* %15208, i64 -32
  %15210 = bitcast i16* %15209 to <16 x i16>*
  store <16 x i16> %15204, <16 x i16>* %15210, align 2, !tbaa !399
  %15211 = shufflevector <32 x i16> %15203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15212 = getelementptr inbounds i16, i16* %15208, i64 -16
  %15213 = bitcast i16* %15212 to <16 x i16>*
  store <16 x i16> %15211, <16 x i16>* %15213, align 2, !tbaa !399
  %15214 = zext i32 %.pre-phi3434 to i64
  %15215 = mul nsw i64 %15214, %318
  %15216 = add nsw i64 %15215, %291
  %15217 = getelementptr inbounds i16, i16* %blur_x841, i64 %15216
  %15218 = getelementptr inbounds i16, i16* %15217, i64 -32
  %15219 = bitcast i16* %15218 to <16 x i16>*
  %15220 = load <16 x i16>, <16 x i16>* %15219, align 2, !tbaa !399
  %15221 = getelementptr inbounds i16, i16* %15217, i64 -16
  %15222 = bitcast i16* %15221 to <16 x i16>*
  %15223 = load <16 x i16>, <16 x i16>* %15222, align 2, !tbaa !399
  %15224 = shufflevector <16 x i16> %15220, <16 x i16> %15223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15225 = mul nsw i64 %15205, %318
  %15226 = add nsw i64 %15225, %291
  %15227 = getelementptr inbounds i16, i16* %blur_x841, i64 %15226
  %15228 = getelementptr inbounds i16, i16* %15227, i64 -32
  %15229 = bitcast i16* %15228 to <16 x i16>*
  %15230 = load <16 x i16>, <16 x i16>* %15229, align 2, !tbaa !399
  %15231 = getelementptr inbounds i16, i16* %15227, i64 -16
  %15232 = bitcast i16* %15231 to <16 x i16>*
  %15233 = load <16 x i16>, <16 x i16>* %15232, align 2, !tbaa !399
  %15234 = shufflevector <16 x i16> %15230, <16 x i16> %15233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15235 = zext i32 %.pre-phi3428 to i64
  %15236 = mul nsw i64 %15235, %318
  %15237 = add nsw i64 %15236, %291
  %15238 = getelementptr inbounds i16, i16* %blur_x841, i64 %15237
  %15239 = getelementptr inbounds i16, i16* %15238, i64 -32
  %15240 = bitcast i16* %15239 to <16 x i16>*
  %15241 = load <16 x i16>, <16 x i16>* %15240, align 2, !tbaa !399
  %15242 = getelementptr inbounds i16, i16* %15238, i64 -16
  %15243 = bitcast i16* %15242 to <16 x i16>*
  %15244 = load <16 x i16>, <16 x i16>* %15243, align 2, !tbaa !399
  %15245 = shufflevector <16 x i16> %15241, <16 x i16> %15244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15246 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15245, <32 x i16> %15234, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15247 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15224, <32 x i16> %15246, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15248 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15247, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15249 = shufflevector <32 x i16> %15248, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15250 = sext i32 %a365 to i64
  %15251 = add nsw i64 %15250, 14
  %15252 = mul nsw i64 %15251, %319
  %15253 = add nsw i64 %321, %15252
  %15254 = getelementptr inbounds i16, i16* %258, i64 %15253
  %15255 = getelementptr inbounds i16, i16* %15254, i64 -32
  %15256 = bitcast i16* %15255 to <16 x i16>*
  store <16 x i16> %15249, <16 x i16>* %15256, align 2, !tbaa !401
  %15257 = shufflevector <32 x i16> %15248, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15258 = getelementptr inbounds i16, i16* %15254, i64 -16
  %15259 = bitcast i16* %15258 to <16 x i16>*
  store <16 x i16> %15257, <16 x i16>* %15259, align 2, !tbaa !401
  br label %after_bb1503

"for blur_y.s0.x.x.rebased1518":                  ; preds = %"for blur_y.s0.x.x.rebased1518.preheader", %"consume blur_x1526"
  %indvars.iv3285 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1518.preheader" ], [ %indvars.iv.next3286, %"consume blur_x1526" ]
  %15260 = add nsw i64 %indvars.iv3285, %298
  %15261 = icmp slt i64 %15260, 1
  %15262 = trunc i64 %15260 to i32
  %15263 = shl nsw i32 %15262, 5
  %15264 = icmp sgt i32 %194, %15263
  %15265 = or i1 %15261, %15264
  br i1 %15265, label %"produce blur_x1524", label %"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge"

"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1518"
  %.pre3461 = shl nsw i64 %15260, 5
  br label %"consume blur_x1526"

"end for blur_y.s0.x.x.rebased1519":              ; preds = %"consume blur_x1526", %after_bb1503
  br i1 %299, label %"for blur_y.s0.x.x.rebased1534.preheader", label %"end for blur_y.s0.x.x.rebased1535", !prof !386

"for blur_y.s0.x.x.rebased1534.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1519"
  %15266 = sext i32 %t1638848 to i64
  %15267 = zext i32 %.pre-phi3434 to i64
  %15268 = mul nsw i64 %15267, %322
  %15269 = sub nsw i64 %15268, %293
  %15270 = zext i32 %.pre-phi3420 to i64
  %15271 = mul nsw i64 %15270, %322
  %15272 = sub nsw i64 %15271, %293
  %15273 = zext i32 %.pre-phi3428 to i64
  %15274 = mul nsw i64 %15273, %322
  %15275 = sub nsw i64 %15274, %293
  %15276 = sext i32 %a365 to i64
  %15277 = add nsw i64 %15276, 14
  %15278 = mul nsw i64 %15277, %319
  %15279 = add nsw i64 %15278, %323
  br label %"for blur_y.s0.x.x.rebased1534"

"produce blur_x1524":                             ; preds = %"for blur_y.s0.x.x.rebased1518"
  %t8961525 = add nsw i32 %406, %15263
  %15280 = sext i32 %t8961525 to i64
  %15281 = getelementptr inbounds i16, i16* %read_input784, i64 %15280
  %15282 = getelementptr inbounds i16, i16* %15281, i64 1
  %15283 = bitcast i16* %15282 to <16 x i16>*
  %15284 = load <16 x i16>, <16 x i16>* %15283, align 2, !tbaa !396
  %15285 = getelementptr inbounds i16, i16* %15281, i64 17
  %15286 = bitcast i16* %15285 to <16 x i16>*
  %15287 = load <16 x i16>, <16 x i16>* %15286, align 2, !tbaa !396
  %15288 = shufflevector <16 x i16> %15284, <16 x i16> %15287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15289 = getelementptr inbounds i16, i16* %15281, i64 2
  %15290 = bitcast i16* %15289 to <16 x i16>*
  %15291 = load <16 x i16>, <16 x i16>* %15290, align 2, !tbaa !396
  %15292 = getelementptr inbounds i16, i16* %15281, i64 18
  %15293 = bitcast i16* %15292 to <16 x i16>*
  %15294 = load <16 x i16>, <16 x i16>* %15293, align 2, !tbaa !396
  %15295 = shufflevector <16 x i16> %15291, <16 x i16> %15294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15296 = bitcast i16* %15281 to <16 x i16>*
  %15297 = load <16 x i16>, <16 x i16>* %15296, align 2, !tbaa !396
  %15298 = getelementptr inbounds i16, i16* %15281, i64 16
  %15299 = bitcast i16* %15298 to <16 x i16>*
  %15300 = load <16 x i16>, <16 x i16>* %15299, align 2, !tbaa !396
  %15301 = shufflevector <16 x i16> %15297, <16 x i16> %15300, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15302 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15301, <32 x i16> %15295, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15303 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15288, <32 x i16> %15302, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15304 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15303, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15305 = shufflevector <32 x i16> %15304, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15306 = shl nsw i64 %15260, 5
  %15307 = add nsw i64 %15306, %15165
  %15308 = getelementptr inbounds i16, i16* %blur_x841, i64 %15307
  %15309 = bitcast i16* %15308 to <16 x i16>*
  store <16 x i16> %15305, <16 x i16>* %15309, align 2, !tbaa !399
  %15310 = shufflevector <32 x i16> %15304, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15311 = getelementptr inbounds i16, i16* %15308, i64 16
  %15312 = bitcast i16* %15311 to <16 x i16>*
  store <16 x i16> %15310, <16 x i16>* %15312, align 2, !tbaa !399
  br label %"consume blur_x1526"

"consume blur_x1526":                             ; preds = %"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge", %"produce blur_x1524"
  %.pre-phi3462 = phi i64 [ %.pre3461, %"for blur_y.s0.x.x.rebased1518.consume blur_x1526_crit_edge" ], [ %15306, %"produce blur_x1524" ]
  %15313 = add nsw i64 %15168, %.pre-phi3462
  %15314 = getelementptr inbounds i16, i16* %blur_x841, i64 %15313
  %15315 = bitcast i16* %15314 to <16 x i16>*
  %15316 = load <16 x i16>, <16 x i16>* %15315, align 2, !tbaa !399
  %15317 = getelementptr inbounds i16, i16* %15314, i64 16
  %15318 = bitcast i16* %15317 to <16 x i16>*
  %15319 = load <16 x i16>, <16 x i16>* %15318, align 2, !tbaa !399
  %15320 = shufflevector <16 x i16> %15316, <16 x i16> %15319, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15321 = add nsw i64 %15171, %.pre-phi3462
  %15322 = getelementptr inbounds i16, i16* %blur_x841, i64 %15321
  %15323 = bitcast i16* %15322 to <16 x i16>*
  %15324 = load <16 x i16>, <16 x i16>* %15323, align 2, !tbaa !399
  %15325 = getelementptr inbounds i16, i16* %15322, i64 16
  %15326 = bitcast i16* %15325 to <16 x i16>*
  %15327 = load <16 x i16>, <16 x i16>* %15326, align 2, !tbaa !399
  %15328 = shufflevector <16 x i16> %15324, <16 x i16> %15327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15329 = add nsw i64 %15174, %.pre-phi3462
  %15330 = getelementptr inbounds i16, i16* %blur_x841, i64 %15329
  %15331 = bitcast i16* %15330 to <16 x i16>*
  %15332 = load <16 x i16>, <16 x i16>* %15331, align 2, !tbaa !399
  %15333 = getelementptr inbounds i16, i16* %15330, i64 16
  %15334 = bitcast i16* %15333 to <16 x i16>*
  %15335 = load <16 x i16>, <16 x i16>* %15334, align 2, !tbaa !399
  %15336 = shufflevector <16 x i16> %15332, <16 x i16> %15335, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15337 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15336, <32 x i16> %15328, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15338 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15320, <32 x i16> %15337, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15339 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15338, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15340 = shufflevector <32 x i16> %15339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15341 = add nsw i64 %15178, %.pre-phi3462
  %15342 = getelementptr inbounds i16, i16* %258, i64 %15341
  %15343 = bitcast i16* %15342 to <16 x i16>*
  store <16 x i16> %15340, <16 x i16>* %15343, align 2, !tbaa !401
  %15344 = shufflevector <32 x i16> %15339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15345 = getelementptr inbounds i16, i16* %15342, i64 16
  %15346 = bitcast i16* %15345 to <16 x i16>*
  store <16 x i16> %15344, <16 x i16>* %15346, align 2, !tbaa !401
  %indvars.iv.next3286 = add nuw nsw i64 %indvars.iv3285, 1
  %15347 = icmp eq i64 %indvars.iv.next3286, %zext3287
  br i1 %15347, label %"end for blur_y.s0.x.x.rebased1519", label %"for blur_y.s0.x.x.rebased1518"

"for blur_y.s0.x.x.rebased1534":                  ; preds = %"for blur_y.s0.x.x.rebased1534.preheader", %"consume blur_x1545"
  %blur_y.s0.x.x.rebased1536 = phi i32 [ %15422, %"consume blur_x1545" ], [ 0, %"for blur_y.s0.x.x.rebased1534.preheader" ]
  %15348 = add nsw i32 %blur_y.s0.x.x.rebased1536, %t1582776
  %a3213 = shl nsw i32 %15348, 5
  %15349 = icmp sgt i32 %t1603, %a3213
  %blur_y.s0.x.v0.base.s1537 = select i1 %15349, i32 %a3213, i32 %t1603
  %15350 = icmp slt i32 %15348, 1
  %15351 = icmp sgt i32 %194, %a3213
  %15352 = or i1 %15350, %15351
  br i1 %15352, label %"produce blur_x1542", label %"consume blur_x1545"

"end for blur_y.s0.x.x.rebased1535":              ; preds = %"consume blur_x1545", %"end for blur_y.s0.x.x.rebased1519"
  br i1 %225, label %"produce blur_x1549", label %after_bb1546

"produce blur_x1542":                             ; preds = %"for blur_y.s0.x.x.rebased1534"
  %15353 = icmp slt i32 %blur_y.s0.x.v0.base.s1537, %194
  %blur_x.s0.x.v1.base.s1543 = select i1 %15353, i32 %blur_y.s0.x.v0.base.s1537, i32 %194
  %t9011544 = add nsw i32 %406, %blur_x.s0.x.v1.base.s1543
  %15354 = sext i32 %t9011544 to i64
  %15355 = getelementptr inbounds i16, i16* %read_input784, i64 %15354
  %15356 = getelementptr inbounds i16, i16* %15355, i64 1
  %15357 = bitcast i16* %15356 to <16 x i16>*
  %15358 = load <16 x i16>, <16 x i16>* %15357, align 2, !tbaa !396
  %15359 = getelementptr inbounds i16, i16* %15355, i64 17
  %15360 = bitcast i16* %15359 to <16 x i16>*
  %15361 = load <16 x i16>, <16 x i16>* %15360, align 2, !tbaa !396
  %15362 = shufflevector <16 x i16> %15358, <16 x i16> %15361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15363 = getelementptr inbounds i16, i16* %15355, i64 2
  %15364 = bitcast i16* %15363 to <16 x i16>*
  %15365 = load <16 x i16>, <16 x i16>* %15364, align 2, !tbaa !396
  %15366 = getelementptr inbounds i16, i16* %15355, i64 18
  %15367 = bitcast i16* %15366 to <16 x i16>*
  %15368 = load <16 x i16>, <16 x i16>* %15367, align 2, !tbaa !396
  %15369 = shufflevector <16 x i16> %15365, <16 x i16> %15368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15370 = bitcast i16* %15355 to <16 x i16>*
  %15371 = load <16 x i16>, <16 x i16>* %15370, align 2, !tbaa !396
  %15372 = getelementptr inbounds i16, i16* %15355, i64 16
  %15373 = bitcast i16* %15372 to <16 x i16>*
  %15374 = load <16 x i16>, <16 x i16>* %15373, align 2, !tbaa !396
  %15375 = shufflevector <16 x i16> %15371, <16 x i16> %15374, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15376 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15375, <32 x i16> %15369, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15377 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15362, <32 x i16> %15376, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15378 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15377, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15379 = shufflevector <32 x i16> %15378, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15380 = sext i32 %blur_x.s0.x.v1.base.s1543 to i64
  %15381 = add nsw i64 %15380, %15266
  %15382 = getelementptr inbounds i16, i16* %blur_x841, i64 %15381
  %15383 = bitcast i16* %15382 to <16 x i16>*
  store <16 x i16> %15379, <16 x i16>* %15383, align 2, !tbaa !399
  %15384 = shufflevector <32 x i16> %15378, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15385 = getelementptr inbounds i16, i16* %15382, i64 16
  %15386 = bitcast i16* %15385 to <16 x i16>*
  store <16 x i16> %15384, <16 x i16>* %15386, align 2, !tbaa !399
  br label %"consume blur_x1545"

"consume blur_x1545":                             ; preds = %"for blur_y.s0.x.x.rebased1534", %"produce blur_x1542"
  %15387 = sext i32 %blur_y.s0.x.v0.base.s1537 to i64
  %15388 = add nsw i64 %15269, %15387
  %15389 = getelementptr inbounds i16, i16* %blur_x841, i64 %15388
  %15390 = bitcast i16* %15389 to <16 x i16>*
  %15391 = load <16 x i16>, <16 x i16>* %15390, align 2, !tbaa !399
  %15392 = getelementptr inbounds i16, i16* %15389, i64 16
  %15393 = bitcast i16* %15392 to <16 x i16>*
  %15394 = load <16 x i16>, <16 x i16>* %15393, align 2, !tbaa !399
  %15395 = shufflevector <16 x i16> %15391, <16 x i16> %15394, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15396 = add nsw i64 %15272, %15387
  %15397 = getelementptr inbounds i16, i16* %blur_x841, i64 %15396
  %15398 = bitcast i16* %15397 to <16 x i16>*
  %15399 = load <16 x i16>, <16 x i16>* %15398, align 2, !tbaa !399
  %15400 = getelementptr inbounds i16, i16* %15397, i64 16
  %15401 = bitcast i16* %15400 to <16 x i16>*
  %15402 = load <16 x i16>, <16 x i16>* %15401, align 2, !tbaa !399
  %15403 = shufflevector <16 x i16> %15399, <16 x i16> %15402, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15404 = add nsw i64 %15275, %15387
  %15405 = getelementptr inbounds i16, i16* %blur_x841, i64 %15404
  %15406 = bitcast i16* %15405 to <16 x i16>*
  %15407 = load <16 x i16>, <16 x i16>* %15406, align 2, !tbaa !399
  %15408 = getelementptr inbounds i16, i16* %15405, i64 16
  %15409 = bitcast i16* %15408 to <16 x i16>*
  %15410 = load <16 x i16>, <16 x i16>* %15409, align 2, !tbaa !399
  %15411 = shufflevector <16 x i16> %15407, <16 x i16> %15410, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15412 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15411, <32 x i16> %15403, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15413 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15395, <32 x i16> %15412, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15414 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15413, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15415 = shufflevector <32 x i16> %15414, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15416 = add nsw i64 %15279, %15387
  %15417 = getelementptr inbounds i16, i16* %258, i64 %15416
  %15418 = bitcast i16* %15417 to <16 x i16>*
  store <16 x i16> %15415, <16 x i16>* %15418, align 2, !tbaa !401
  %15419 = shufflevector <32 x i16> %15414, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15420 = getelementptr inbounds i16, i16* %15417, i64 16
  %15421 = bitcast i16* %15420 to <16 x i16>*
  store <16 x i16> %15419, <16 x i16>* %15421, align 2, !tbaa !401
  %15422 = add nuw nsw i32 %blur_y.s0.x.x.rebased1536, 1
  %.not2502 = icmp eq i32 %15422, %t1639860
  br i1 %.not2502, label %"end for blur_y.s0.x.x.rebased1535", label %"for blur_y.s0.x.x.rebased1534"

after_bb1546:                                     ; preds = %"end for blur_y.s0.x.x.rebased1535", %"produce blur_x1549"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1561.preheader", label %"end for blur_y.s0.x.x.rebased1562", !prof !386

"for blur_y.s0.x.x.rebased1561.preheader":        ; preds = %after_bb1546
  %15423 = sext i32 %t1644876 to i64
  %15424 = zext i32 %.pre-phi3420 to i64
  %15425 = mul nsw i64 %15424, %322
  %15426 = sub nsw i64 %15425, %293
  %15427 = zext i32 %.pre-phi3424 to i64
  %15428 = mul nsw i64 %15427, %322
  %15429 = sub nsw i64 %15428, %293
  %15430 = zext i32 %.pre-phi3434 to i64
  %15431 = mul nsw i64 %15430, %322
  %15432 = sub nsw i64 %15431, %293
  %15433 = sext i32 %a365 to i64
  %15434 = add nsw i64 %15433, 15
  %15435 = mul nsw i64 %15434, %319
  %15436 = add nsw i64 %15435, %323
  br label %"for blur_y.s0.x.x.rebased1561"

"produce blur_x1549":                             ; preds = %"end for blur_y.s0.x.x.rebased1535"
  %15437 = getelementptr inbounds i16, i16* %read_input784, i64 %410
  %15438 = getelementptr inbounds i16, i16* %15437, i64 -31
  %15439 = bitcast i16* %15438 to <16 x i16>*
  %15440 = load <16 x i16>, <16 x i16>* %15439, align 2, !tbaa !396
  %15441 = getelementptr inbounds i16, i16* %15437, i64 -15
  %15442 = bitcast i16* %15441 to <16 x i16>*
  %15443 = load <16 x i16>, <16 x i16>* %15442, align 2, !tbaa !396
  %15444 = shufflevector <16 x i16> %15440, <16 x i16> %15443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15445 = getelementptr inbounds i16, i16* %15437, i64 -30
  %15446 = bitcast i16* %15445 to <16 x i16>*
  %15447 = load <16 x i16>, <16 x i16>* %15446, align 2, !tbaa !396
  %15448 = getelementptr inbounds i16, i16* %15437, i64 -14
  %15449 = bitcast i16* %15448 to <16 x i16>*
  %15450 = load <16 x i16>, <16 x i16>* %15449, align 2, !tbaa !396
  %15451 = shufflevector <16 x i16> %15447, <16 x i16> %15450, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15452 = getelementptr inbounds i16, i16* %15437, i64 -32
  %15453 = bitcast i16* %15452 to <16 x i16>*
  %15454 = load <16 x i16>, <16 x i16>* %15453, align 2, !tbaa !396
  %15455 = getelementptr inbounds i16, i16* %15437, i64 -16
  %15456 = bitcast i16* %15455 to <16 x i16>*
  %15457 = load <16 x i16>, <16 x i16>* %15456, align 2, !tbaa !396
  %15458 = shufflevector <16 x i16> %15454, <16 x i16> %15457, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15459 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15458, <32 x i16> %15451, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15460 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15444, <32 x i16> %15459, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15461 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15460, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15462 = shufflevector <32 x i16> %15461, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15463 = zext i32 %.pre-phi3424 to i64
  %15464 = mul nsw i64 %294, %15463
  %15465 = add nsw i64 %296, %15464
  %15466 = getelementptr inbounds i16, i16* %blur_x841, i64 %15465
  %15467 = getelementptr inbounds i16, i16* %15466, i64 -32
  %15468 = bitcast i16* %15467 to <16 x i16>*
  store <16 x i16> %15462, <16 x i16>* %15468, align 2, !tbaa !399
  %15469 = shufflevector <32 x i16> %15461, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15470 = getelementptr inbounds i16, i16* %15466, i64 -16
  %15471 = bitcast i16* %15470 to <16 x i16>*
  store <16 x i16> %15469, <16 x i16>* %15471, align 2, !tbaa !399
  %15472 = zext i32 %.pre-phi3420 to i64
  %15473 = mul nsw i64 %15472, %318
  %15474 = add nsw i64 %15473, %291
  %15475 = getelementptr inbounds i16, i16* %blur_x841, i64 %15474
  %15476 = getelementptr inbounds i16, i16* %15475, i64 -32
  %15477 = bitcast i16* %15476 to <16 x i16>*
  %15478 = load <16 x i16>, <16 x i16>* %15477, align 2, !tbaa !399
  %15479 = getelementptr inbounds i16, i16* %15475, i64 -16
  %15480 = bitcast i16* %15479 to <16 x i16>*
  %15481 = load <16 x i16>, <16 x i16>* %15480, align 2, !tbaa !399
  %15482 = shufflevector <16 x i16> %15478, <16 x i16> %15481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15483 = mul nsw i64 %15463, %318
  %15484 = add nsw i64 %15483, %291
  %15485 = getelementptr inbounds i16, i16* %blur_x841, i64 %15484
  %15486 = getelementptr inbounds i16, i16* %15485, i64 -32
  %15487 = bitcast i16* %15486 to <16 x i16>*
  %15488 = load <16 x i16>, <16 x i16>* %15487, align 2, !tbaa !399
  %15489 = getelementptr inbounds i16, i16* %15485, i64 -16
  %15490 = bitcast i16* %15489 to <16 x i16>*
  %15491 = load <16 x i16>, <16 x i16>* %15490, align 2, !tbaa !399
  %15492 = shufflevector <16 x i16> %15488, <16 x i16> %15491, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15493 = zext i32 %.pre-phi3434 to i64
  %15494 = mul nsw i64 %15493, %318
  %15495 = add nsw i64 %15494, %291
  %15496 = getelementptr inbounds i16, i16* %blur_x841, i64 %15495
  %15497 = getelementptr inbounds i16, i16* %15496, i64 -32
  %15498 = bitcast i16* %15497 to <16 x i16>*
  %15499 = load <16 x i16>, <16 x i16>* %15498, align 2, !tbaa !399
  %15500 = getelementptr inbounds i16, i16* %15496, i64 -16
  %15501 = bitcast i16* %15500 to <16 x i16>*
  %15502 = load <16 x i16>, <16 x i16>* %15501, align 2, !tbaa !399
  %15503 = shufflevector <16 x i16> %15499, <16 x i16> %15502, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15504 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15503, <32 x i16> %15492, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15505 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15482, <32 x i16> %15504, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15506 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15505, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15507 = shufflevector <32 x i16> %15506, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15508 = sext i32 %a365 to i64
  %15509 = add nsw i64 %15508, 15
  %15510 = mul nsw i64 %15509, %319
  %15511 = add nsw i64 %321, %15510
  %15512 = getelementptr inbounds i16, i16* %258, i64 %15511
  %15513 = getelementptr inbounds i16, i16* %15512, i64 -32
  %15514 = bitcast i16* %15513 to <16 x i16>*
  store <16 x i16> %15507, <16 x i16>* %15514, align 2, !tbaa !401
  %15515 = shufflevector <32 x i16> %15506, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15516 = getelementptr inbounds i16, i16* %15512, i64 -16
  %15517 = bitcast i16* %15516 to <16 x i16>*
  store <16 x i16> %15515, <16 x i16>* %15517, align 2, !tbaa !401
  br label %after_bb1546

"for blur_y.s0.x.x.rebased1561":                  ; preds = %"for blur_y.s0.x.x.rebased1561.preheader", %"consume blur_x1569"
  %indvars.iv3288 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1561.preheader" ], [ %indvars.iv.next3289, %"consume blur_x1569" ]
  %15518 = add nsw i64 %indvars.iv3288, %298
  %15519 = icmp slt i64 %15518, 1
  %15520 = trunc i64 %15518 to i32
  %15521 = shl nsw i32 %15520, 5
  %15522 = icmp sgt i32 %194, %15521
  %15523 = or i1 %15519, %15522
  br i1 %15523, label %"produce blur_x1567", label %"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge"

"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1561"
  %.pre3463 = shl nsw i64 %15518, 5
  br label %"consume blur_x1569"

"end for blur_y.s0.x.x.rebased1562":              ; preds = %"consume blur_x1569", %after_bb1546
  br i1 %299, label %"for blur_y.s0.x.x.rebased1577.preheader", label %"end for blur_y.s0.x.x.rebased1578", !prof !386

"for blur_y.s0.x.x.rebased1577.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1562"
  %15524 = sext i32 %t1644876 to i64
  %15525 = zext i32 %.pre-phi3420 to i64
  %15526 = mul nsw i64 %15525, %322
  %15527 = sub nsw i64 %15526, %293
  %15528 = zext i32 %.pre-phi3424 to i64
  %15529 = mul nsw i64 %15528, %322
  %15530 = sub nsw i64 %15529, %293
  %15531 = zext i32 %.pre-phi3434 to i64
  %15532 = mul nsw i64 %15531, %322
  %15533 = sub nsw i64 %15532, %293
  %15534 = sext i32 %a365 to i64
  %15535 = add nsw i64 %15534, 15
  %15536 = mul nsw i64 %15535, %319
  %15537 = add nsw i64 %15536, %323
  br label %"for blur_y.s0.x.x.rebased1577"

"produce blur_x1567":                             ; preds = %"for blur_y.s0.x.x.rebased1561"
  %t9121568 = add nsw i32 %412, %15521
  %15538 = sext i32 %t9121568 to i64
  %15539 = getelementptr inbounds i16, i16* %read_input784, i64 %15538
  %15540 = getelementptr inbounds i16, i16* %15539, i64 1
  %15541 = bitcast i16* %15540 to <16 x i16>*
  %15542 = load <16 x i16>, <16 x i16>* %15541, align 2, !tbaa !396
  %15543 = getelementptr inbounds i16, i16* %15539, i64 17
  %15544 = bitcast i16* %15543 to <16 x i16>*
  %15545 = load <16 x i16>, <16 x i16>* %15544, align 2, !tbaa !396
  %15546 = shufflevector <16 x i16> %15542, <16 x i16> %15545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15547 = getelementptr inbounds i16, i16* %15539, i64 2
  %15548 = bitcast i16* %15547 to <16 x i16>*
  %15549 = load <16 x i16>, <16 x i16>* %15548, align 2, !tbaa !396
  %15550 = getelementptr inbounds i16, i16* %15539, i64 18
  %15551 = bitcast i16* %15550 to <16 x i16>*
  %15552 = load <16 x i16>, <16 x i16>* %15551, align 2, !tbaa !396
  %15553 = shufflevector <16 x i16> %15549, <16 x i16> %15552, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15554 = bitcast i16* %15539 to <16 x i16>*
  %15555 = load <16 x i16>, <16 x i16>* %15554, align 2, !tbaa !396
  %15556 = getelementptr inbounds i16, i16* %15539, i64 16
  %15557 = bitcast i16* %15556 to <16 x i16>*
  %15558 = load <16 x i16>, <16 x i16>* %15557, align 2, !tbaa !396
  %15559 = shufflevector <16 x i16> %15555, <16 x i16> %15558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15560 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15559, <32 x i16> %15553, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15561 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15546, <32 x i16> %15560, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15562 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15561, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15563 = shufflevector <32 x i16> %15562, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15564 = shl nsw i64 %15518, 5
  %15565 = add nsw i64 %15564, %15423
  %15566 = getelementptr inbounds i16, i16* %blur_x841, i64 %15565
  %15567 = bitcast i16* %15566 to <16 x i16>*
  store <16 x i16> %15563, <16 x i16>* %15567, align 2, !tbaa !399
  %15568 = shufflevector <32 x i16> %15562, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15569 = getelementptr inbounds i16, i16* %15566, i64 16
  %15570 = bitcast i16* %15569 to <16 x i16>*
  store <16 x i16> %15568, <16 x i16>* %15570, align 2, !tbaa !399
  br label %"consume blur_x1569"

"consume blur_x1569":                             ; preds = %"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge", %"produce blur_x1567"
  %.pre-phi3464 = phi i64 [ %.pre3463, %"for blur_y.s0.x.x.rebased1561.consume blur_x1569_crit_edge" ], [ %15564, %"produce blur_x1567" ]
  %15571 = add nsw i64 %15426, %.pre-phi3464
  %15572 = getelementptr inbounds i16, i16* %blur_x841, i64 %15571
  %15573 = bitcast i16* %15572 to <16 x i16>*
  %15574 = load <16 x i16>, <16 x i16>* %15573, align 2, !tbaa !399
  %15575 = getelementptr inbounds i16, i16* %15572, i64 16
  %15576 = bitcast i16* %15575 to <16 x i16>*
  %15577 = load <16 x i16>, <16 x i16>* %15576, align 2, !tbaa !399
  %15578 = shufflevector <16 x i16> %15574, <16 x i16> %15577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15579 = add nsw i64 %15429, %.pre-phi3464
  %15580 = getelementptr inbounds i16, i16* %blur_x841, i64 %15579
  %15581 = bitcast i16* %15580 to <16 x i16>*
  %15582 = load <16 x i16>, <16 x i16>* %15581, align 2, !tbaa !399
  %15583 = getelementptr inbounds i16, i16* %15580, i64 16
  %15584 = bitcast i16* %15583 to <16 x i16>*
  %15585 = load <16 x i16>, <16 x i16>* %15584, align 2, !tbaa !399
  %15586 = shufflevector <16 x i16> %15582, <16 x i16> %15585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15587 = add nsw i64 %15432, %.pre-phi3464
  %15588 = getelementptr inbounds i16, i16* %blur_x841, i64 %15587
  %15589 = bitcast i16* %15588 to <16 x i16>*
  %15590 = load <16 x i16>, <16 x i16>* %15589, align 2, !tbaa !399
  %15591 = getelementptr inbounds i16, i16* %15588, i64 16
  %15592 = bitcast i16* %15591 to <16 x i16>*
  %15593 = load <16 x i16>, <16 x i16>* %15592, align 2, !tbaa !399
  %15594 = shufflevector <16 x i16> %15590, <16 x i16> %15593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15595 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15594, <32 x i16> %15586, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15596 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15578, <32 x i16> %15595, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15597 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15596, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15598 = shufflevector <32 x i16> %15597, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15599 = add nsw i64 %15436, %.pre-phi3464
  %15600 = getelementptr inbounds i16, i16* %258, i64 %15599
  %15601 = bitcast i16* %15600 to <16 x i16>*
  store <16 x i16> %15598, <16 x i16>* %15601, align 2, !tbaa !401
  %15602 = shufflevector <32 x i16> %15597, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15603 = getelementptr inbounds i16, i16* %15600, i64 16
  %15604 = bitcast i16* %15603 to <16 x i16>*
  store <16 x i16> %15602, <16 x i16>* %15604, align 2, !tbaa !401
  %indvars.iv.next3289 = add nuw nsw i64 %indvars.iv3288, 1
  %15605 = icmp eq i64 %indvars.iv.next3289, %zext3290
  br i1 %15605, label %"end for blur_y.s0.x.x.rebased1562", label %"for blur_y.s0.x.x.rebased1561"

"for blur_y.s0.x.x.rebased1577":                  ; preds = %"for blur_y.s0.x.x.rebased1577.preheader", %"consume blur_x1588"
  %blur_y.s0.x.x.rebased1579 = phi i32 [ %15680, %"consume blur_x1588" ], [ 0, %"for blur_y.s0.x.x.rebased1577.preheader" ]
  %15606 = add nsw i32 %blur_y.s0.x.x.rebased1579, %t1582776
  %a3370 = shl nsw i32 %15606, 5
  %15607 = icmp sgt i32 %t1603, %a3370
  %blur_y.s0.x.v0.base.s1580 = select i1 %15607, i32 %a3370, i32 %t1603
  %15608 = icmp slt i32 %15606, 1
  %15609 = icmp sgt i32 %194, %a3370
  %15610 = or i1 %15608, %15609
  br i1 %15610, label %"produce blur_x1585", label %"consume blur_x1588"

"end for blur_y.s0.x.x.rebased1578":              ; preds = %"consume blur_x1588", %"end for blur_y.s0.x.x.rebased1562"
  br i1 %225, label %"produce blur_x1592", label %after_bb1589

"produce blur_x1585":                             ; preds = %"for blur_y.s0.x.x.rebased1577"
  %15611 = icmp slt i32 %blur_y.s0.x.v0.base.s1580, %194
  %blur_x.s0.x.v1.base.s1586 = select i1 %15611, i32 %blur_y.s0.x.v0.base.s1580, i32 %194
  %t9171587 = add nsw i32 %412, %blur_x.s0.x.v1.base.s1586
  %15612 = sext i32 %t9171587 to i64
  %15613 = getelementptr inbounds i16, i16* %read_input784, i64 %15612
  %15614 = getelementptr inbounds i16, i16* %15613, i64 1
  %15615 = bitcast i16* %15614 to <16 x i16>*
  %15616 = load <16 x i16>, <16 x i16>* %15615, align 2, !tbaa !396
  %15617 = getelementptr inbounds i16, i16* %15613, i64 17
  %15618 = bitcast i16* %15617 to <16 x i16>*
  %15619 = load <16 x i16>, <16 x i16>* %15618, align 2, !tbaa !396
  %15620 = shufflevector <16 x i16> %15616, <16 x i16> %15619, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15621 = getelementptr inbounds i16, i16* %15613, i64 2
  %15622 = bitcast i16* %15621 to <16 x i16>*
  %15623 = load <16 x i16>, <16 x i16>* %15622, align 2, !tbaa !396
  %15624 = getelementptr inbounds i16, i16* %15613, i64 18
  %15625 = bitcast i16* %15624 to <16 x i16>*
  %15626 = load <16 x i16>, <16 x i16>* %15625, align 2, !tbaa !396
  %15627 = shufflevector <16 x i16> %15623, <16 x i16> %15626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15628 = bitcast i16* %15613 to <16 x i16>*
  %15629 = load <16 x i16>, <16 x i16>* %15628, align 2, !tbaa !396
  %15630 = getelementptr inbounds i16, i16* %15613, i64 16
  %15631 = bitcast i16* %15630 to <16 x i16>*
  %15632 = load <16 x i16>, <16 x i16>* %15631, align 2, !tbaa !396
  %15633 = shufflevector <16 x i16> %15629, <16 x i16> %15632, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15634 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15633, <32 x i16> %15627, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15635 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15620, <32 x i16> %15634, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15636 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15635, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15637 = shufflevector <32 x i16> %15636, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15638 = sext i32 %blur_x.s0.x.v1.base.s1586 to i64
  %15639 = add nsw i64 %15638, %15524
  %15640 = getelementptr inbounds i16, i16* %blur_x841, i64 %15639
  %15641 = bitcast i16* %15640 to <16 x i16>*
  store <16 x i16> %15637, <16 x i16>* %15641, align 2, !tbaa !399
  %15642 = shufflevector <32 x i16> %15636, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15643 = getelementptr inbounds i16, i16* %15640, i64 16
  %15644 = bitcast i16* %15643 to <16 x i16>*
  store <16 x i16> %15642, <16 x i16>* %15644, align 2, !tbaa !399
  br label %"consume blur_x1588"

"consume blur_x1588":                             ; preds = %"for blur_y.s0.x.x.rebased1577", %"produce blur_x1585"
  %15645 = sext i32 %blur_y.s0.x.v0.base.s1580 to i64
  %15646 = add nsw i64 %15527, %15645
  %15647 = getelementptr inbounds i16, i16* %blur_x841, i64 %15646
  %15648 = bitcast i16* %15647 to <16 x i16>*
  %15649 = load <16 x i16>, <16 x i16>* %15648, align 2, !tbaa !399
  %15650 = getelementptr inbounds i16, i16* %15647, i64 16
  %15651 = bitcast i16* %15650 to <16 x i16>*
  %15652 = load <16 x i16>, <16 x i16>* %15651, align 2, !tbaa !399
  %15653 = shufflevector <16 x i16> %15649, <16 x i16> %15652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15654 = add nsw i64 %15530, %15645
  %15655 = getelementptr inbounds i16, i16* %blur_x841, i64 %15654
  %15656 = bitcast i16* %15655 to <16 x i16>*
  %15657 = load <16 x i16>, <16 x i16>* %15656, align 2, !tbaa !399
  %15658 = getelementptr inbounds i16, i16* %15655, i64 16
  %15659 = bitcast i16* %15658 to <16 x i16>*
  %15660 = load <16 x i16>, <16 x i16>* %15659, align 2, !tbaa !399
  %15661 = shufflevector <16 x i16> %15657, <16 x i16> %15660, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15662 = add nsw i64 %15533, %15645
  %15663 = getelementptr inbounds i16, i16* %blur_x841, i64 %15662
  %15664 = bitcast i16* %15663 to <16 x i16>*
  %15665 = load <16 x i16>, <16 x i16>* %15664, align 2, !tbaa !399
  %15666 = getelementptr inbounds i16, i16* %15663, i64 16
  %15667 = bitcast i16* %15666 to <16 x i16>*
  %15668 = load <16 x i16>, <16 x i16>* %15667, align 2, !tbaa !399
  %15669 = shufflevector <16 x i16> %15665, <16 x i16> %15668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15670 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15669, <32 x i16> %15661, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15671 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15653, <32 x i16> %15670, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15672 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15671, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15673 = shufflevector <32 x i16> %15672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15674 = add nsw i64 %15537, %15645
  %15675 = getelementptr inbounds i16, i16* %258, i64 %15674
  %15676 = bitcast i16* %15675 to <16 x i16>*
  store <16 x i16> %15673, <16 x i16>* %15676, align 2, !tbaa !401
  %15677 = shufflevector <32 x i16> %15672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15678 = getelementptr inbounds i16, i16* %15675, i64 16
  %15679 = bitcast i16* %15678 to <16 x i16>*
  store <16 x i16> %15677, <16 x i16>* %15679, align 2, !tbaa !401
  %15680 = add nuw nsw i32 %blur_y.s0.x.x.rebased1579, 1
  %.not2498 = icmp eq i32 %15680, %t1639860
  br i1 %.not2498, label %"end for blur_y.s0.x.x.rebased1578", label %"for blur_y.s0.x.x.rebased1577"

after_bb1589:                                     ; preds = %"end for blur_y.s0.x.x.rebased1578", %"produce blur_x1592"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1604.preheader", label %"end for blur_y.s0.x.x.rebased1605", !prof !386

"for blur_y.s0.x.x.rebased1604.preheader":        ; preds = %after_bb1589
  %15681 = sext i32 %t1650912 to i64
  %15682 = zext i32 %.pre-phi3424 to i64
  %15683 = mul nsw i64 %15682, %322
  %15684 = sub nsw i64 %15683, %293
  %15685 = zext i32 %.pre-phi3428 to i64
  %15686 = mul nsw i64 %15685, %322
  %15687 = sub nsw i64 %15686, %293
  %15688 = zext i32 %.pre-phi3420 to i64
  %15689 = mul nsw i64 %15688, %322
  %15690 = sub nsw i64 %15689, %293
  %15691 = sext i32 %a365 to i64
  %15692 = add nsw i64 %15691, 16
  %15693 = mul nsw i64 %15692, %319
  %15694 = add nsw i64 %15693, %323
  br label %"for blur_y.s0.x.x.rebased1604"

"produce blur_x1592":                             ; preds = %"end for blur_y.s0.x.x.rebased1578"
  %15695 = getelementptr inbounds i16, i16* %read_input784, i64 %416
  %15696 = getelementptr inbounds i16, i16* %15695, i64 -31
  %15697 = bitcast i16* %15696 to <16 x i16>*
  %15698 = load <16 x i16>, <16 x i16>* %15697, align 2, !tbaa !396
  %15699 = getelementptr inbounds i16, i16* %15695, i64 -15
  %15700 = bitcast i16* %15699 to <16 x i16>*
  %15701 = load <16 x i16>, <16 x i16>* %15700, align 2, !tbaa !396
  %15702 = shufflevector <16 x i16> %15698, <16 x i16> %15701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15703 = getelementptr inbounds i16, i16* %15695, i64 -30
  %15704 = bitcast i16* %15703 to <16 x i16>*
  %15705 = load <16 x i16>, <16 x i16>* %15704, align 2, !tbaa !396
  %15706 = getelementptr inbounds i16, i16* %15695, i64 -14
  %15707 = bitcast i16* %15706 to <16 x i16>*
  %15708 = load <16 x i16>, <16 x i16>* %15707, align 2, !tbaa !396
  %15709 = shufflevector <16 x i16> %15705, <16 x i16> %15708, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15710 = getelementptr inbounds i16, i16* %15695, i64 -32
  %15711 = bitcast i16* %15710 to <16 x i16>*
  %15712 = load <16 x i16>, <16 x i16>* %15711, align 2, !tbaa !396
  %15713 = getelementptr inbounds i16, i16* %15695, i64 -16
  %15714 = bitcast i16* %15713 to <16 x i16>*
  %15715 = load <16 x i16>, <16 x i16>* %15714, align 2, !tbaa !396
  %15716 = shufflevector <16 x i16> %15712, <16 x i16> %15715, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15717 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15716, <32 x i16> %15709, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15718 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15702, <32 x i16> %15717, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15719 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15718, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15720 = shufflevector <32 x i16> %15719, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15721 = zext i32 %.pre-phi3428 to i64
  %15722 = mul nsw i64 %294, %15721
  %15723 = add nsw i64 %296, %15722
  %15724 = getelementptr inbounds i16, i16* %blur_x841, i64 %15723
  %15725 = getelementptr inbounds i16, i16* %15724, i64 -32
  %15726 = bitcast i16* %15725 to <16 x i16>*
  store <16 x i16> %15720, <16 x i16>* %15726, align 2, !tbaa !399
  %15727 = shufflevector <32 x i16> %15719, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15728 = getelementptr inbounds i16, i16* %15724, i64 -16
  %15729 = bitcast i16* %15728 to <16 x i16>*
  store <16 x i16> %15727, <16 x i16>* %15729, align 2, !tbaa !399
  %15730 = zext i32 %.pre-phi3424 to i64
  %15731 = mul nsw i64 %15730, %318
  %15732 = add nsw i64 %15731, %291
  %15733 = getelementptr inbounds i16, i16* %blur_x841, i64 %15732
  %15734 = getelementptr inbounds i16, i16* %15733, i64 -32
  %15735 = bitcast i16* %15734 to <16 x i16>*
  %15736 = load <16 x i16>, <16 x i16>* %15735, align 2, !tbaa !399
  %15737 = getelementptr inbounds i16, i16* %15733, i64 -16
  %15738 = bitcast i16* %15737 to <16 x i16>*
  %15739 = load <16 x i16>, <16 x i16>* %15738, align 2, !tbaa !399
  %15740 = shufflevector <16 x i16> %15736, <16 x i16> %15739, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15741 = mul nsw i64 %15721, %318
  %15742 = add nsw i64 %15741, %291
  %15743 = getelementptr inbounds i16, i16* %blur_x841, i64 %15742
  %15744 = getelementptr inbounds i16, i16* %15743, i64 -32
  %15745 = bitcast i16* %15744 to <16 x i16>*
  %15746 = load <16 x i16>, <16 x i16>* %15745, align 2, !tbaa !399
  %15747 = getelementptr inbounds i16, i16* %15743, i64 -16
  %15748 = bitcast i16* %15747 to <16 x i16>*
  %15749 = load <16 x i16>, <16 x i16>* %15748, align 2, !tbaa !399
  %15750 = shufflevector <16 x i16> %15746, <16 x i16> %15749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15751 = zext i32 %.pre-phi3420 to i64
  %15752 = mul nsw i64 %15751, %318
  %15753 = add nsw i64 %15752, %291
  %15754 = getelementptr inbounds i16, i16* %blur_x841, i64 %15753
  %15755 = getelementptr inbounds i16, i16* %15754, i64 -32
  %15756 = bitcast i16* %15755 to <16 x i16>*
  %15757 = load <16 x i16>, <16 x i16>* %15756, align 2, !tbaa !399
  %15758 = getelementptr inbounds i16, i16* %15754, i64 -16
  %15759 = bitcast i16* %15758 to <16 x i16>*
  %15760 = load <16 x i16>, <16 x i16>* %15759, align 2, !tbaa !399
  %15761 = shufflevector <16 x i16> %15757, <16 x i16> %15760, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15762 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15761, <32 x i16> %15750, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15763 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15740, <32 x i16> %15762, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15764 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15763, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15765 = shufflevector <32 x i16> %15764, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15766 = sext i32 %a365 to i64
  %15767 = add nsw i64 %15766, 16
  %15768 = mul nsw i64 %15767, %319
  %15769 = add nsw i64 %321, %15768
  %15770 = getelementptr inbounds i16, i16* %258, i64 %15769
  %15771 = getelementptr inbounds i16, i16* %15770, i64 -32
  %15772 = bitcast i16* %15771 to <16 x i16>*
  store <16 x i16> %15765, <16 x i16>* %15772, align 2, !tbaa !401
  %15773 = shufflevector <32 x i16> %15764, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15774 = getelementptr inbounds i16, i16* %15770, i64 -16
  %15775 = bitcast i16* %15774 to <16 x i16>*
  store <16 x i16> %15773, <16 x i16>* %15775, align 2, !tbaa !401
  br label %after_bb1589

"for blur_y.s0.x.x.rebased1604":                  ; preds = %"for blur_y.s0.x.x.rebased1604.preheader", %"consume blur_x1612"
  %indvars.iv3291 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1604.preheader" ], [ %indvars.iv.next3292, %"consume blur_x1612" ]
  %15776 = add nsw i64 %indvars.iv3291, %298
  %15777 = icmp slt i64 %15776, 1
  %15778 = trunc i64 %15776 to i32
  %15779 = shl nsw i32 %15778, 5
  %15780 = icmp sgt i32 %194, %15779
  %15781 = or i1 %15777, %15780
  br i1 %15781, label %"produce blur_x1610", label %"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge"

"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1604"
  %.pre3465 = shl nsw i64 %15776, 5
  br label %"consume blur_x1612"

"end for blur_y.s0.x.x.rebased1605":              ; preds = %"consume blur_x1612", %after_bb1589
  br i1 %299, label %"for blur_y.s0.x.x.rebased1620.preheader", label %"end for blur_y.s0.x.x.rebased1621", !prof !386

"for blur_y.s0.x.x.rebased1620.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1605"
  %15782 = sext i32 %t1650912 to i64
  %15783 = zext i32 %.pre-phi3424 to i64
  %15784 = mul nsw i64 %15783, %322
  %15785 = sub nsw i64 %15784, %293
  %15786 = zext i32 %.pre-phi3428 to i64
  %15787 = mul nsw i64 %15786, %322
  %15788 = sub nsw i64 %15787, %293
  %15789 = zext i32 %.pre-phi3420 to i64
  %15790 = mul nsw i64 %15789, %322
  %15791 = sub nsw i64 %15790, %293
  %15792 = sext i32 %a365 to i64
  %15793 = add nsw i64 %15792, 16
  %15794 = mul nsw i64 %15793, %319
  %15795 = add nsw i64 %15794, %323
  br label %"for blur_y.s0.x.x.rebased1620"

"produce blur_x1610":                             ; preds = %"for blur_y.s0.x.x.rebased1604"
  %t9281611 = add nsw i32 %418, %15779
  %15796 = sext i32 %t9281611 to i64
  %15797 = getelementptr inbounds i16, i16* %read_input784, i64 %15796
  %15798 = getelementptr inbounds i16, i16* %15797, i64 1
  %15799 = bitcast i16* %15798 to <16 x i16>*
  %15800 = load <16 x i16>, <16 x i16>* %15799, align 2, !tbaa !396
  %15801 = getelementptr inbounds i16, i16* %15797, i64 17
  %15802 = bitcast i16* %15801 to <16 x i16>*
  %15803 = load <16 x i16>, <16 x i16>* %15802, align 2, !tbaa !396
  %15804 = shufflevector <16 x i16> %15800, <16 x i16> %15803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15805 = getelementptr inbounds i16, i16* %15797, i64 2
  %15806 = bitcast i16* %15805 to <16 x i16>*
  %15807 = load <16 x i16>, <16 x i16>* %15806, align 2, !tbaa !396
  %15808 = getelementptr inbounds i16, i16* %15797, i64 18
  %15809 = bitcast i16* %15808 to <16 x i16>*
  %15810 = load <16 x i16>, <16 x i16>* %15809, align 2, !tbaa !396
  %15811 = shufflevector <16 x i16> %15807, <16 x i16> %15810, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15812 = bitcast i16* %15797 to <16 x i16>*
  %15813 = load <16 x i16>, <16 x i16>* %15812, align 2, !tbaa !396
  %15814 = getelementptr inbounds i16, i16* %15797, i64 16
  %15815 = bitcast i16* %15814 to <16 x i16>*
  %15816 = load <16 x i16>, <16 x i16>* %15815, align 2, !tbaa !396
  %15817 = shufflevector <16 x i16> %15813, <16 x i16> %15816, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15818 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15817, <32 x i16> %15811, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15819 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15804, <32 x i16> %15818, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15820 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15819, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15821 = shufflevector <32 x i16> %15820, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15822 = shl nsw i64 %15776, 5
  %15823 = add nsw i64 %15822, %15681
  %15824 = getelementptr inbounds i16, i16* %blur_x841, i64 %15823
  %15825 = bitcast i16* %15824 to <16 x i16>*
  store <16 x i16> %15821, <16 x i16>* %15825, align 2, !tbaa !399
  %15826 = shufflevector <32 x i16> %15820, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15827 = getelementptr inbounds i16, i16* %15824, i64 16
  %15828 = bitcast i16* %15827 to <16 x i16>*
  store <16 x i16> %15826, <16 x i16>* %15828, align 2, !tbaa !399
  br label %"consume blur_x1612"

"consume blur_x1612":                             ; preds = %"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge", %"produce blur_x1610"
  %.pre-phi3466 = phi i64 [ %.pre3465, %"for blur_y.s0.x.x.rebased1604.consume blur_x1612_crit_edge" ], [ %15822, %"produce blur_x1610" ]
  %15829 = add nsw i64 %15684, %.pre-phi3466
  %15830 = getelementptr inbounds i16, i16* %blur_x841, i64 %15829
  %15831 = bitcast i16* %15830 to <16 x i16>*
  %15832 = load <16 x i16>, <16 x i16>* %15831, align 2, !tbaa !399
  %15833 = getelementptr inbounds i16, i16* %15830, i64 16
  %15834 = bitcast i16* %15833 to <16 x i16>*
  %15835 = load <16 x i16>, <16 x i16>* %15834, align 2, !tbaa !399
  %15836 = shufflevector <16 x i16> %15832, <16 x i16> %15835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15837 = add nsw i64 %15687, %.pre-phi3466
  %15838 = getelementptr inbounds i16, i16* %blur_x841, i64 %15837
  %15839 = bitcast i16* %15838 to <16 x i16>*
  %15840 = load <16 x i16>, <16 x i16>* %15839, align 2, !tbaa !399
  %15841 = getelementptr inbounds i16, i16* %15838, i64 16
  %15842 = bitcast i16* %15841 to <16 x i16>*
  %15843 = load <16 x i16>, <16 x i16>* %15842, align 2, !tbaa !399
  %15844 = shufflevector <16 x i16> %15840, <16 x i16> %15843, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15845 = add nsw i64 %15690, %.pre-phi3466
  %15846 = getelementptr inbounds i16, i16* %blur_x841, i64 %15845
  %15847 = bitcast i16* %15846 to <16 x i16>*
  %15848 = load <16 x i16>, <16 x i16>* %15847, align 2, !tbaa !399
  %15849 = getelementptr inbounds i16, i16* %15846, i64 16
  %15850 = bitcast i16* %15849 to <16 x i16>*
  %15851 = load <16 x i16>, <16 x i16>* %15850, align 2, !tbaa !399
  %15852 = shufflevector <16 x i16> %15848, <16 x i16> %15851, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15853 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15852, <32 x i16> %15844, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15854 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15836, <32 x i16> %15853, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15855 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15854, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15856 = shufflevector <32 x i16> %15855, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15857 = add nsw i64 %15694, %.pre-phi3466
  %15858 = getelementptr inbounds i16, i16* %258, i64 %15857
  %15859 = bitcast i16* %15858 to <16 x i16>*
  store <16 x i16> %15856, <16 x i16>* %15859, align 2, !tbaa !401
  %15860 = shufflevector <32 x i16> %15855, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15861 = getelementptr inbounds i16, i16* %15858, i64 16
  %15862 = bitcast i16* %15861 to <16 x i16>*
  store <16 x i16> %15860, <16 x i16>* %15862, align 2, !tbaa !401
  %indvars.iv.next3292 = add nuw nsw i64 %indvars.iv3291, 1
  %15863 = icmp eq i64 %indvars.iv.next3292, %zext3293
  br i1 %15863, label %"end for blur_y.s0.x.x.rebased1605", label %"for blur_y.s0.x.x.rebased1604"

"for blur_y.s0.x.x.rebased1620":                  ; preds = %"for blur_y.s0.x.x.rebased1620.preheader", %"consume blur_x1631"
  %blur_y.s0.x.x.rebased1622 = phi i32 [ %15938, %"consume blur_x1631" ], [ 0, %"for blur_y.s0.x.x.rebased1620.preheader" ]
  %15864 = add nsw i32 %blur_y.s0.x.x.rebased1622, %t1582776
  %a3527 = shl nsw i32 %15864, 5
  %15865 = icmp sgt i32 %t1603, %a3527
  %blur_y.s0.x.v0.base.s1623 = select i1 %15865, i32 %a3527, i32 %t1603
  %15866 = icmp slt i32 %15864, 1
  %15867 = icmp sgt i32 %194, %a3527
  %15868 = or i1 %15866, %15867
  br i1 %15868, label %"produce blur_x1628", label %"consume blur_x1631"

"end for blur_y.s0.x.x.rebased1621":              ; preds = %"consume blur_x1631", %"end for blur_y.s0.x.x.rebased1605"
  br i1 %225, label %"produce blur_x1635", label %after_bb1632

"produce blur_x1628":                             ; preds = %"for blur_y.s0.x.x.rebased1620"
  %15869 = icmp slt i32 %blur_y.s0.x.v0.base.s1623, %194
  %blur_x.s0.x.v1.base.s1629 = select i1 %15869, i32 %blur_y.s0.x.v0.base.s1623, i32 %194
  %t9331630 = add nsw i32 %418, %blur_x.s0.x.v1.base.s1629
  %15870 = sext i32 %t9331630 to i64
  %15871 = getelementptr inbounds i16, i16* %read_input784, i64 %15870
  %15872 = getelementptr inbounds i16, i16* %15871, i64 1
  %15873 = bitcast i16* %15872 to <16 x i16>*
  %15874 = load <16 x i16>, <16 x i16>* %15873, align 2, !tbaa !396
  %15875 = getelementptr inbounds i16, i16* %15871, i64 17
  %15876 = bitcast i16* %15875 to <16 x i16>*
  %15877 = load <16 x i16>, <16 x i16>* %15876, align 2, !tbaa !396
  %15878 = shufflevector <16 x i16> %15874, <16 x i16> %15877, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15879 = getelementptr inbounds i16, i16* %15871, i64 2
  %15880 = bitcast i16* %15879 to <16 x i16>*
  %15881 = load <16 x i16>, <16 x i16>* %15880, align 2, !tbaa !396
  %15882 = getelementptr inbounds i16, i16* %15871, i64 18
  %15883 = bitcast i16* %15882 to <16 x i16>*
  %15884 = load <16 x i16>, <16 x i16>* %15883, align 2, !tbaa !396
  %15885 = shufflevector <16 x i16> %15881, <16 x i16> %15884, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15886 = bitcast i16* %15871 to <16 x i16>*
  %15887 = load <16 x i16>, <16 x i16>* %15886, align 2, !tbaa !396
  %15888 = getelementptr inbounds i16, i16* %15871, i64 16
  %15889 = bitcast i16* %15888 to <16 x i16>*
  %15890 = load <16 x i16>, <16 x i16>* %15889, align 2, !tbaa !396
  %15891 = shufflevector <16 x i16> %15887, <16 x i16> %15890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15892 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15891, <32 x i16> %15885, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15893 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15878, <32 x i16> %15892, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15894 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15893, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15895 = shufflevector <32 x i16> %15894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15896 = sext i32 %blur_x.s0.x.v1.base.s1629 to i64
  %15897 = add nsw i64 %15896, %15782
  %15898 = getelementptr inbounds i16, i16* %blur_x841, i64 %15897
  %15899 = bitcast i16* %15898 to <16 x i16>*
  store <16 x i16> %15895, <16 x i16>* %15899, align 2, !tbaa !399
  %15900 = shufflevector <32 x i16> %15894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15901 = getelementptr inbounds i16, i16* %15898, i64 16
  %15902 = bitcast i16* %15901 to <16 x i16>*
  store <16 x i16> %15900, <16 x i16>* %15902, align 2, !tbaa !399
  br label %"consume blur_x1631"

"consume blur_x1631":                             ; preds = %"for blur_y.s0.x.x.rebased1620", %"produce blur_x1628"
  %15903 = sext i32 %blur_y.s0.x.v0.base.s1623 to i64
  %15904 = add nsw i64 %15785, %15903
  %15905 = getelementptr inbounds i16, i16* %blur_x841, i64 %15904
  %15906 = bitcast i16* %15905 to <16 x i16>*
  %15907 = load <16 x i16>, <16 x i16>* %15906, align 2, !tbaa !399
  %15908 = getelementptr inbounds i16, i16* %15905, i64 16
  %15909 = bitcast i16* %15908 to <16 x i16>*
  %15910 = load <16 x i16>, <16 x i16>* %15909, align 2, !tbaa !399
  %15911 = shufflevector <16 x i16> %15907, <16 x i16> %15910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15912 = add nsw i64 %15788, %15903
  %15913 = getelementptr inbounds i16, i16* %blur_x841, i64 %15912
  %15914 = bitcast i16* %15913 to <16 x i16>*
  %15915 = load <16 x i16>, <16 x i16>* %15914, align 2, !tbaa !399
  %15916 = getelementptr inbounds i16, i16* %15913, i64 16
  %15917 = bitcast i16* %15916 to <16 x i16>*
  %15918 = load <16 x i16>, <16 x i16>* %15917, align 2, !tbaa !399
  %15919 = shufflevector <16 x i16> %15915, <16 x i16> %15918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15920 = add nsw i64 %15791, %15903
  %15921 = getelementptr inbounds i16, i16* %blur_x841, i64 %15920
  %15922 = bitcast i16* %15921 to <16 x i16>*
  %15923 = load <16 x i16>, <16 x i16>* %15922, align 2, !tbaa !399
  %15924 = getelementptr inbounds i16, i16* %15921, i64 16
  %15925 = bitcast i16* %15924 to <16 x i16>*
  %15926 = load <16 x i16>, <16 x i16>* %15925, align 2, !tbaa !399
  %15927 = shufflevector <16 x i16> %15923, <16 x i16> %15926, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15928 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15927, <32 x i16> %15919, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15929 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15911, <32 x i16> %15928, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15930 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15929, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15931 = shufflevector <32 x i16> %15930, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15932 = add nsw i64 %15795, %15903
  %15933 = getelementptr inbounds i16, i16* %258, i64 %15932
  %15934 = bitcast i16* %15933 to <16 x i16>*
  store <16 x i16> %15931, <16 x i16>* %15934, align 2, !tbaa !401
  %15935 = shufflevector <32 x i16> %15930, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15936 = getelementptr inbounds i16, i16* %15933, i64 16
  %15937 = bitcast i16* %15936 to <16 x i16>*
  store <16 x i16> %15935, <16 x i16>* %15937, align 2, !tbaa !401
  %15938 = add nuw nsw i32 %blur_y.s0.x.x.rebased1622, 1
  %.not2494 = icmp eq i32 %15938, %t1639860
  br i1 %.not2494, label %"end for blur_y.s0.x.x.rebased1621", label %"for blur_y.s0.x.x.rebased1620"

after_bb1632:                                     ; preds = %"end for blur_y.s0.x.x.rebased1621", %"produce blur_x1635"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1647.preheader", label %"end for blur_y.s0.x.x.rebased1648", !prof !386

"for blur_y.s0.x.x.rebased1647.preheader":        ; preds = %after_bb1632
  %15939 = sext i32 %t1666955 to i64
  %15940 = zext i32 %.pre-phi3428 to i64
  %15941 = mul nsw i64 %15940, %322
  %15942 = sub nsw i64 %15941, %293
  %15943 = zext i32 %.pre-phi3434 to i64
  %15944 = mul nsw i64 %15943, %322
  %15945 = sub nsw i64 %15944, %293
  %15946 = zext i32 %.pre-phi3424 to i64
  %15947 = mul nsw i64 %15946, %322
  %15948 = sub nsw i64 %15947, %293
  %15949 = sext i32 %a365 to i64
  %15950 = add nsw i64 %15949, 17
  %15951 = mul nsw i64 %15950, %319
  %15952 = add nsw i64 %15951, %323
  br label %"for blur_y.s0.x.x.rebased1647"

"produce blur_x1635":                             ; preds = %"end for blur_y.s0.x.x.rebased1621"
  %15953 = getelementptr inbounds i16, i16* %read_input784, i64 %422
  %15954 = getelementptr inbounds i16, i16* %15953, i64 -31
  %15955 = bitcast i16* %15954 to <16 x i16>*
  %15956 = load <16 x i16>, <16 x i16>* %15955, align 2, !tbaa !396
  %15957 = getelementptr inbounds i16, i16* %15953, i64 -15
  %15958 = bitcast i16* %15957 to <16 x i16>*
  %15959 = load <16 x i16>, <16 x i16>* %15958, align 2, !tbaa !396
  %15960 = shufflevector <16 x i16> %15956, <16 x i16> %15959, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15961 = getelementptr inbounds i16, i16* %15953, i64 -30
  %15962 = bitcast i16* %15961 to <16 x i16>*
  %15963 = load <16 x i16>, <16 x i16>* %15962, align 2, !tbaa !396
  %15964 = getelementptr inbounds i16, i16* %15953, i64 -14
  %15965 = bitcast i16* %15964 to <16 x i16>*
  %15966 = load <16 x i16>, <16 x i16>* %15965, align 2, !tbaa !396
  %15967 = shufflevector <16 x i16> %15963, <16 x i16> %15966, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15968 = getelementptr inbounds i16, i16* %15953, i64 -32
  %15969 = bitcast i16* %15968 to <16 x i16>*
  %15970 = load <16 x i16>, <16 x i16>* %15969, align 2, !tbaa !396
  %15971 = getelementptr inbounds i16, i16* %15953, i64 -16
  %15972 = bitcast i16* %15971 to <16 x i16>*
  %15973 = load <16 x i16>, <16 x i16>* %15972, align 2, !tbaa !396
  %15974 = shufflevector <16 x i16> %15970, <16 x i16> %15973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15975 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15974, <32 x i16> %15967, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15976 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15960, <32 x i16> %15975, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %15977 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %15976, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %15978 = shufflevector <32 x i16> %15977, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15979 = zext i32 %.pre-phi3434 to i64
  %15980 = mul nsw i64 %294, %15979
  %15981 = add nsw i64 %296, %15980
  %15982 = getelementptr inbounds i16, i16* %blur_x841, i64 %15981
  %15983 = getelementptr inbounds i16, i16* %15982, i64 -32
  %15984 = bitcast i16* %15983 to <16 x i16>*
  store <16 x i16> %15978, <16 x i16>* %15984, align 2, !tbaa !399
  %15985 = shufflevector <32 x i16> %15977, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15986 = getelementptr inbounds i16, i16* %15982, i64 -16
  %15987 = bitcast i16* %15986 to <16 x i16>*
  store <16 x i16> %15985, <16 x i16>* %15987, align 2, !tbaa !399
  %15988 = zext i32 %.pre-phi3428 to i64
  %15989 = mul nsw i64 %15988, %318
  %15990 = add nsw i64 %15989, %291
  %15991 = getelementptr inbounds i16, i16* %blur_x841, i64 %15990
  %15992 = getelementptr inbounds i16, i16* %15991, i64 -32
  %15993 = bitcast i16* %15992 to <16 x i16>*
  %15994 = load <16 x i16>, <16 x i16>* %15993, align 2, !tbaa !399
  %15995 = getelementptr inbounds i16, i16* %15991, i64 -16
  %15996 = bitcast i16* %15995 to <16 x i16>*
  %15997 = load <16 x i16>, <16 x i16>* %15996, align 2, !tbaa !399
  %15998 = shufflevector <16 x i16> %15994, <16 x i16> %15997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15999 = mul nsw i64 %15979, %318
  %16000 = add nsw i64 %15999, %291
  %16001 = getelementptr inbounds i16, i16* %blur_x841, i64 %16000
  %16002 = getelementptr inbounds i16, i16* %16001, i64 -32
  %16003 = bitcast i16* %16002 to <16 x i16>*
  %16004 = load <16 x i16>, <16 x i16>* %16003, align 2, !tbaa !399
  %16005 = getelementptr inbounds i16, i16* %16001, i64 -16
  %16006 = bitcast i16* %16005 to <16 x i16>*
  %16007 = load <16 x i16>, <16 x i16>* %16006, align 2, !tbaa !399
  %16008 = shufflevector <16 x i16> %16004, <16 x i16> %16007, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16009 = zext i32 %.pre-phi3424 to i64
  %16010 = mul nsw i64 %16009, %318
  %16011 = add nsw i64 %16010, %291
  %16012 = getelementptr inbounds i16, i16* %blur_x841, i64 %16011
  %16013 = getelementptr inbounds i16, i16* %16012, i64 -32
  %16014 = bitcast i16* %16013 to <16 x i16>*
  %16015 = load <16 x i16>, <16 x i16>* %16014, align 2, !tbaa !399
  %16016 = getelementptr inbounds i16, i16* %16012, i64 -16
  %16017 = bitcast i16* %16016 to <16 x i16>*
  %16018 = load <16 x i16>, <16 x i16>* %16017, align 2, !tbaa !399
  %16019 = shufflevector <16 x i16> %16015, <16 x i16> %16018, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16020 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16019, <32 x i16> %16008, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16021 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %15998, <32 x i16> %16020, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16022 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16021, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16023 = shufflevector <32 x i16> %16022, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16024 = sext i32 %a365 to i64
  %16025 = add nsw i64 %16024, 17
  %16026 = mul nsw i64 %16025, %319
  %16027 = add nsw i64 %321, %16026
  %16028 = getelementptr inbounds i16, i16* %258, i64 %16027
  %16029 = getelementptr inbounds i16, i16* %16028, i64 -32
  %16030 = bitcast i16* %16029 to <16 x i16>*
  store <16 x i16> %16023, <16 x i16>* %16030, align 2, !tbaa !401
  %16031 = shufflevector <32 x i16> %16022, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16032 = getelementptr inbounds i16, i16* %16028, i64 -16
  %16033 = bitcast i16* %16032 to <16 x i16>*
  store <16 x i16> %16031, <16 x i16>* %16033, align 2, !tbaa !401
  br label %after_bb1632

"for blur_y.s0.x.x.rebased1647":                  ; preds = %"for blur_y.s0.x.x.rebased1647.preheader", %"consume blur_x1655"
  %indvars.iv3294 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1647.preheader" ], [ %indvars.iv.next3295, %"consume blur_x1655" ]
  %16034 = add nsw i64 %indvars.iv3294, %298
  %16035 = icmp slt i64 %16034, 1
  %16036 = trunc i64 %16034 to i32
  %16037 = shl nsw i32 %16036, 5
  %16038 = icmp sgt i32 %194, %16037
  %16039 = or i1 %16035, %16038
  br i1 %16039, label %"produce blur_x1653", label %"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge"

"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1647"
  %.pre3467 = shl nsw i64 %16034, 5
  br label %"consume blur_x1655"

"end for blur_y.s0.x.x.rebased1648":              ; preds = %"consume blur_x1655", %after_bb1632
  br i1 %299, label %"for blur_y.s0.x.x.rebased1663.preheader", label %"end for blur_y.s0.x.x.rebased1664", !prof !386

"for blur_y.s0.x.x.rebased1663.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1648"
  %16040 = sext i32 %t1666955 to i64
  %16041 = zext i32 %.pre-phi3428 to i64
  %16042 = mul nsw i64 %16041, %322
  %16043 = sub nsw i64 %16042, %293
  %16044 = zext i32 %.pre-phi3434 to i64
  %16045 = mul nsw i64 %16044, %322
  %16046 = sub nsw i64 %16045, %293
  %16047 = zext i32 %.pre-phi3424 to i64
  %16048 = mul nsw i64 %16047, %322
  %16049 = sub nsw i64 %16048, %293
  %16050 = sext i32 %a365 to i64
  %16051 = add nsw i64 %16050, 17
  %16052 = mul nsw i64 %16051, %319
  %16053 = add nsw i64 %16052, %323
  br label %"for blur_y.s0.x.x.rebased1663"

"produce blur_x1653":                             ; preds = %"for blur_y.s0.x.x.rebased1647"
  %t9441654 = add nsw i32 %424, %16037
  %16054 = sext i32 %t9441654 to i64
  %16055 = getelementptr inbounds i16, i16* %read_input784, i64 %16054
  %16056 = getelementptr inbounds i16, i16* %16055, i64 1
  %16057 = bitcast i16* %16056 to <16 x i16>*
  %16058 = load <16 x i16>, <16 x i16>* %16057, align 2, !tbaa !396
  %16059 = getelementptr inbounds i16, i16* %16055, i64 17
  %16060 = bitcast i16* %16059 to <16 x i16>*
  %16061 = load <16 x i16>, <16 x i16>* %16060, align 2, !tbaa !396
  %16062 = shufflevector <16 x i16> %16058, <16 x i16> %16061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16063 = getelementptr inbounds i16, i16* %16055, i64 2
  %16064 = bitcast i16* %16063 to <16 x i16>*
  %16065 = load <16 x i16>, <16 x i16>* %16064, align 2, !tbaa !396
  %16066 = getelementptr inbounds i16, i16* %16055, i64 18
  %16067 = bitcast i16* %16066 to <16 x i16>*
  %16068 = load <16 x i16>, <16 x i16>* %16067, align 2, !tbaa !396
  %16069 = shufflevector <16 x i16> %16065, <16 x i16> %16068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16070 = bitcast i16* %16055 to <16 x i16>*
  %16071 = load <16 x i16>, <16 x i16>* %16070, align 2, !tbaa !396
  %16072 = getelementptr inbounds i16, i16* %16055, i64 16
  %16073 = bitcast i16* %16072 to <16 x i16>*
  %16074 = load <16 x i16>, <16 x i16>* %16073, align 2, !tbaa !396
  %16075 = shufflevector <16 x i16> %16071, <16 x i16> %16074, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16076 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16075, <32 x i16> %16069, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16077 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16062, <32 x i16> %16076, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16078 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16077, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16079 = shufflevector <32 x i16> %16078, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16080 = shl nsw i64 %16034, 5
  %16081 = add nsw i64 %16080, %15939
  %16082 = getelementptr inbounds i16, i16* %blur_x841, i64 %16081
  %16083 = bitcast i16* %16082 to <16 x i16>*
  store <16 x i16> %16079, <16 x i16>* %16083, align 2, !tbaa !399
  %16084 = shufflevector <32 x i16> %16078, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16085 = getelementptr inbounds i16, i16* %16082, i64 16
  %16086 = bitcast i16* %16085 to <16 x i16>*
  store <16 x i16> %16084, <16 x i16>* %16086, align 2, !tbaa !399
  br label %"consume blur_x1655"

"consume blur_x1655":                             ; preds = %"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge", %"produce blur_x1653"
  %.pre-phi3468 = phi i64 [ %.pre3467, %"for blur_y.s0.x.x.rebased1647.consume blur_x1655_crit_edge" ], [ %16080, %"produce blur_x1653" ]
  %16087 = add nsw i64 %15942, %.pre-phi3468
  %16088 = getelementptr inbounds i16, i16* %blur_x841, i64 %16087
  %16089 = bitcast i16* %16088 to <16 x i16>*
  %16090 = load <16 x i16>, <16 x i16>* %16089, align 2, !tbaa !399
  %16091 = getelementptr inbounds i16, i16* %16088, i64 16
  %16092 = bitcast i16* %16091 to <16 x i16>*
  %16093 = load <16 x i16>, <16 x i16>* %16092, align 2, !tbaa !399
  %16094 = shufflevector <16 x i16> %16090, <16 x i16> %16093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16095 = add nsw i64 %15945, %.pre-phi3468
  %16096 = getelementptr inbounds i16, i16* %blur_x841, i64 %16095
  %16097 = bitcast i16* %16096 to <16 x i16>*
  %16098 = load <16 x i16>, <16 x i16>* %16097, align 2, !tbaa !399
  %16099 = getelementptr inbounds i16, i16* %16096, i64 16
  %16100 = bitcast i16* %16099 to <16 x i16>*
  %16101 = load <16 x i16>, <16 x i16>* %16100, align 2, !tbaa !399
  %16102 = shufflevector <16 x i16> %16098, <16 x i16> %16101, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16103 = add nsw i64 %15948, %.pre-phi3468
  %16104 = getelementptr inbounds i16, i16* %blur_x841, i64 %16103
  %16105 = bitcast i16* %16104 to <16 x i16>*
  %16106 = load <16 x i16>, <16 x i16>* %16105, align 2, !tbaa !399
  %16107 = getelementptr inbounds i16, i16* %16104, i64 16
  %16108 = bitcast i16* %16107 to <16 x i16>*
  %16109 = load <16 x i16>, <16 x i16>* %16108, align 2, !tbaa !399
  %16110 = shufflevector <16 x i16> %16106, <16 x i16> %16109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16111 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16110, <32 x i16> %16102, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16112 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16094, <32 x i16> %16111, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16113 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16112, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16114 = shufflevector <32 x i16> %16113, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16115 = add nsw i64 %15952, %.pre-phi3468
  %16116 = getelementptr inbounds i16, i16* %258, i64 %16115
  %16117 = bitcast i16* %16116 to <16 x i16>*
  store <16 x i16> %16114, <16 x i16>* %16117, align 2, !tbaa !401
  %16118 = shufflevector <32 x i16> %16113, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16119 = getelementptr inbounds i16, i16* %16116, i64 16
  %16120 = bitcast i16* %16119 to <16 x i16>*
  store <16 x i16> %16118, <16 x i16>* %16120, align 2, !tbaa !401
  %indvars.iv.next3295 = add nuw nsw i64 %indvars.iv3294, 1
  %16121 = icmp eq i64 %indvars.iv.next3295, %zext3296
  br i1 %16121, label %"end for blur_y.s0.x.x.rebased1648", label %"for blur_y.s0.x.x.rebased1647"

"for blur_y.s0.x.x.rebased1663":                  ; preds = %"for blur_y.s0.x.x.rebased1663.preheader", %"consume blur_x1674"
  %blur_y.s0.x.x.rebased1665 = phi i32 [ %16196, %"consume blur_x1674" ], [ 0, %"for blur_y.s0.x.x.rebased1663.preheader" ]
  %16122 = add nsw i32 %blur_y.s0.x.x.rebased1665, %t1582776
  %a3684 = shl nsw i32 %16122, 5
  %16123 = icmp sgt i32 %t1603, %a3684
  %blur_y.s0.x.v0.base.s1666 = select i1 %16123, i32 %a3684, i32 %t1603
  %16124 = icmp slt i32 %16122, 1
  %16125 = icmp sgt i32 %194, %a3684
  %16126 = or i1 %16124, %16125
  br i1 %16126, label %"produce blur_x1671", label %"consume blur_x1674"

"end for blur_y.s0.x.x.rebased1664":              ; preds = %"consume blur_x1674", %"end for blur_y.s0.x.x.rebased1648"
  br i1 %225, label %"produce blur_x1678", label %after_bb1675

"produce blur_x1671":                             ; preds = %"for blur_y.s0.x.x.rebased1663"
  %16127 = icmp slt i32 %blur_y.s0.x.v0.base.s1666, %194
  %blur_x.s0.x.v1.base.s1672 = select i1 %16127, i32 %blur_y.s0.x.v0.base.s1666, i32 %194
  %t9491673 = add nsw i32 %424, %blur_x.s0.x.v1.base.s1672
  %16128 = sext i32 %t9491673 to i64
  %16129 = getelementptr inbounds i16, i16* %read_input784, i64 %16128
  %16130 = getelementptr inbounds i16, i16* %16129, i64 1
  %16131 = bitcast i16* %16130 to <16 x i16>*
  %16132 = load <16 x i16>, <16 x i16>* %16131, align 2, !tbaa !396
  %16133 = getelementptr inbounds i16, i16* %16129, i64 17
  %16134 = bitcast i16* %16133 to <16 x i16>*
  %16135 = load <16 x i16>, <16 x i16>* %16134, align 2, !tbaa !396
  %16136 = shufflevector <16 x i16> %16132, <16 x i16> %16135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16137 = getelementptr inbounds i16, i16* %16129, i64 2
  %16138 = bitcast i16* %16137 to <16 x i16>*
  %16139 = load <16 x i16>, <16 x i16>* %16138, align 2, !tbaa !396
  %16140 = getelementptr inbounds i16, i16* %16129, i64 18
  %16141 = bitcast i16* %16140 to <16 x i16>*
  %16142 = load <16 x i16>, <16 x i16>* %16141, align 2, !tbaa !396
  %16143 = shufflevector <16 x i16> %16139, <16 x i16> %16142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16144 = bitcast i16* %16129 to <16 x i16>*
  %16145 = load <16 x i16>, <16 x i16>* %16144, align 2, !tbaa !396
  %16146 = getelementptr inbounds i16, i16* %16129, i64 16
  %16147 = bitcast i16* %16146 to <16 x i16>*
  %16148 = load <16 x i16>, <16 x i16>* %16147, align 2, !tbaa !396
  %16149 = shufflevector <16 x i16> %16145, <16 x i16> %16148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16150 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16149, <32 x i16> %16143, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16151 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16136, <32 x i16> %16150, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16152 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16151, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16153 = shufflevector <32 x i16> %16152, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16154 = sext i32 %blur_x.s0.x.v1.base.s1672 to i64
  %16155 = add nsw i64 %16154, %16040
  %16156 = getelementptr inbounds i16, i16* %blur_x841, i64 %16155
  %16157 = bitcast i16* %16156 to <16 x i16>*
  store <16 x i16> %16153, <16 x i16>* %16157, align 2, !tbaa !399
  %16158 = shufflevector <32 x i16> %16152, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16159 = getelementptr inbounds i16, i16* %16156, i64 16
  %16160 = bitcast i16* %16159 to <16 x i16>*
  store <16 x i16> %16158, <16 x i16>* %16160, align 2, !tbaa !399
  br label %"consume blur_x1674"

"consume blur_x1674":                             ; preds = %"for blur_y.s0.x.x.rebased1663", %"produce blur_x1671"
  %16161 = sext i32 %blur_y.s0.x.v0.base.s1666 to i64
  %16162 = add nsw i64 %16043, %16161
  %16163 = getelementptr inbounds i16, i16* %blur_x841, i64 %16162
  %16164 = bitcast i16* %16163 to <16 x i16>*
  %16165 = load <16 x i16>, <16 x i16>* %16164, align 2, !tbaa !399
  %16166 = getelementptr inbounds i16, i16* %16163, i64 16
  %16167 = bitcast i16* %16166 to <16 x i16>*
  %16168 = load <16 x i16>, <16 x i16>* %16167, align 2, !tbaa !399
  %16169 = shufflevector <16 x i16> %16165, <16 x i16> %16168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16170 = add nsw i64 %16046, %16161
  %16171 = getelementptr inbounds i16, i16* %blur_x841, i64 %16170
  %16172 = bitcast i16* %16171 to <16 x i16>*
  %16173 = load <16 x i16>, <16 x i16>* %16172, align 2, !tbaa !399
  %16174 = getelementptr inbounds i16, i16* %16171, i64 16
  %16175 = bitcast i16* %16174 to <16 x i16>*
  %16176 = load <16 x i16>, <16 x i16>* %16175, align 2, !tbaa !399
  %16177 = shufflevector <16 x i16> %16173, <16 x i16> %16176, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16178 = add nsw i64 %16049, %16161
  %16179 = getelementptr inbounds i16, i16* %blur_x841, i64 %16178
  %16180 = bitcast i16* %16179 to <16 x i16>*
  %16181 = load <16 x i16>, <16 x i16>* %16180, align 2, !tbaa !399
  %16182 = getelementptr inbounds i16, i16* %16179, i64 16
  %16183 = bitcast i16* %16182 to <16 x i16>*
  %16184 = load <16 x i16>, <16 x i16>* %16183, align 2, !tbaa !399
  %16185 = shufflevector <16 x i16> %16181, <16 x i16> %16184, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16186 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16185, <32 x i16> %16177, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16187 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16169, <32 x i16> %16186, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16188 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16187, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16189 = shufflevector <32 x i16> %16188, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16190 = add nsw i64 %16053, %16161
  %16191 = getelementptr inbounds i16, i16* %258, i64 %16190
  %16192 = bitcast i16* %16191 to <16 x i16>*
  store <16 x i16> %16189, <16 x i16>* %16192, align 2, !tbaa !401
  %16193 = shufflevector <32 x i16> %16188, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16194 = getelementptr inbounds i16, i16* %16191, i64 16
  %16195 = bitcast i16* %16194 to <16 x i16>*
  store <16 x i16> %16193, <16 x i16>* %16195, align 2, !tbaa !401
  %16196 = add nuw nsw i32 %blur_y.s0.x.x.rebased1665, 1
  %.not2490 = icmp eq i32 %16196, %t1639860
  br i1 %.not2490, label %"end for blur_y.s0.x.x.rebased1664", label %"for blur_y.s0.x.x.rebased1663"

after_bb1675:                                     ; preds = %"end for blur_y.s0.x.x.rebased1664", %"produce blur_x1678"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1690.preheader", label %"end for blur_y.s0.x.x.rebased1691", !prof !386

"for blur_y.s0.x.x.rebased1690.preheader":        ; preds = %after_bb1675
  %16197 = sext i32 %t1638848 to i64
  %16198 = zext i32 %.pre-phi3434 to i64
  %16199 = mul nsw i64 %16198, %322
  %16200 = sub nsw i64 %16199, %293
  %16201 = zext i32 %.pre-phi3420 to i64
  %16202 = mul nsw i64 %16201, %322
  %16203 = sub nsw i64 %16202, %293
  %16204 = zext i32 %.pre-phi3428 to i64
  %16205 = mul nsw i64 %16204, %322
  %16206 = sub nsw i64 %16205, %293
  %16207 = sext i32 %a365 to i64
  %16208 = add nsw i64 %16207, 18
  %16209 = mul nsw i64 %16208, %319
  %16210 = add nsw i64 %16209, %323
  br label %"for blur_y.s0.x.x.rebased1690"

"produce blur_x1678":                             ; preds = %"end for blur_y.s0.x.x.rebased1664"
  %16211 = getelementptr inbounds i16, i16* %read_input784, i64 %428
  %16212 = getelementptr inbounds i16, i16* %16211, i64 -31
  %16213 = bitcast i16* %16212 to <16 x i16>*
  %16214 = load <16 x i16>, <16 x i16>* %16213, align 2, !tbaa !396
  %16215 = getelementptr inbounds i16, i16* %16211, i64 -15
  %16216 = bitcast i16* %16215 to <16 x i16>*
  %16217 = load <16 x i16>, <16 x i16>* %16216, align 2, !tbaa !396
  %16218 = shufflevector <16 x i16> %16214, <16 x i16> %16217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16219 = getelementptr inbounds i16, i16* %16211, i64 -30
  %16220 = bitcast i16* %16219 to <16 x i16>*
  %16221 = load <16 x i16>, <16 x i16>* %16220, align 2, !tbaa !396
  %16222 = getelementptr inbounds i16, i16* %16211, i64 -14
  %16223 = bitcast i16* %16222 to <16 x i16>*
  %16224 = load <16 x i16>, <16 x i16>* %16223, align 2, !tbaa !396
  %16225 = shufflevector <16 x i16> %16221, <16 x i16> %16224, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16226 = getelementptr inbounds i16, i16* %16211, i64 -32
  %16227 = bitcast i16* %16226 to <16 x i16>*
  %16228 = load <16 x i16>, <16 x i16>* %16227, align 2, !tbaa !396
  %16229 = getelementptr inbounds i16, i16* %16211, i64 -16
  %16230 = bitcast i16* %16229 to <16 x i16>*
  %16231 = load <16 x i16>, <16 x i16>* %16230, align 2, !tbaa !396
  %16232 = shufflevector <16 x i16> %16228, <16 x i16> %16231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16233 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16232, <32 x i16> %16225, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16234 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16218, <32 x i16> %16233, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16235 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16234, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16236 = shufflevector <32 x i16> %16235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16237 = zext i32 %.pre-phi3420 to i64
  %16238 = mul nsw i64 %294, %16237
  %16239 = add nsw i64 %296, %16238
  %16240 = getelementptr inbounds i16, i16* %blur_x841, i64 %16239
  %16241 = getelementptr inbounds i16, i16* %16240, i64 -32
  %16242 = bitcast i16* %16241 to <16 x i16>*
  store <16 x i16> %16236, <16 x i16>* %16242, align 2, !tbaa !399
  %16243 = shufflevector <32 x i16> %16235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16244 = getelementptr inbounds i16, i16* %16240, i64 -16
  %16245 = bitcast i16* %16244 to <16 x i16>*
  store <16 x i16> %16243, <16 x i16>* %16245, align 2, !tbaa !399
  %16246 = zext i32 %.pre-phi3434 to i64
  %16247 = mul nsw i64 %16246, %318
  %16248 = add nsw i64 %16247, %291
  %16249 = getelementptr inbounds i16, i16* %blur_x841, i64 %16248
  %16250 = getelementptr inbounds i16, i16* %16249, i64 -32
  %16251 = bitcast i16* %16250 to <16 x i16>*
  %16252 = load <16 x i16>, <16 x i16>* %16251, align 2, !tbaa !399
  %16253 = getelementptr inbounds i16, i16* %16249, i64 -16
  %16254 = bitcast i16* %16253 to <16 x i16>*
  %16255 = load <16 x i16>, <16 x i16>* %16254, align 2, !tbaa !399
  %16256 = shufflevector <16 x i16> %16252, <16 x i16> %16255, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16257 = mul nsw i64 %16237, %318
  %16258 = add nsw i64 %16257, %291
  %16259 = getelementptr inbounds i16, i16* %blur_x841, i64 %16258
  %16260 = getelementptr inbounds i16, i16* %16259, i64 -32
  %16261 = bitcast i16* %16260 to <16 x i16>*
  %16262 = load <16 x i16>, <16 x i16>* %16261, align 2, !tbaa !399
  %16263 = getelementptr inbounds i16, i16* %16259, i64 -16
  %16264 = bitcast i16* %16263 to <16 x i16>*
  %16265 = load <16 x i16>, <16 x i16>* %16264, align 2, !tbaa !399
  %16266 = shufflevector <16 x i16> %16262, <16 x i16> %16265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16267 = zext i32 %.pre-phi3428 to i64
  %16268 = mul nsw i64 %16267, %318
  %16269 = add nsw i64 %16268, %291
  %16270 = getelementptr inbounds i16, i16* %blur_x841, i64 %16269
  %16271 = getelementptr inbounds i16, i16* %16270, i64 -32
  %16272 = bitcast i16* %16271 to <16 x i16>*
  %16273 = load <16 x i16>, <16 x i16>* %16272, align 2, !tbaa !399
  %16274 = getelementptr inbounds i16, i16* %16270, i64 -16
  %16275 = bitcast i16* %16274 to <16 x i16>*
  %16276 = load <16 x i16>, <16 x i16>* %16275, align 2, !tbaa !399
  %16277 = shufflevector <16 x i16> %16273, <16 x i16> %16276, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16278 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16277, <32 x i16> %16266, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16279 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16256, <32 x i16> %16278, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16280 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16279, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16281 = shufflevector <32 x i16> %16280, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16282 = sext i32 %a365 to i64
  %16283 = add nsw i64 %16282, 18
  %16284 = mul nsw i64 %16283, %319
  %16285 = add nsw i64 %321, %16284
  %16286 = getelementptr inbounds i16, i16* %258, i64 %16285
  %16287 = getelementptr inbounds i16, i16* %16286, i64 -32
  %16288 = bitcast i16* %16287 to <16 x i16>*
  store <16 x i16> %16281, <16 x i16>* %16288, align 2, !tbaa !401
  %16289 = shufflevector <32 x i16> %16280, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16290 = getelementptr inbounds i16, i16* %16286, i64 -16
  %16291 = bitcast i16* %16290 to <16 x i16>*
  store <16 x i16> %16289, <16 x i16>* %16291, align 2, !tbaa !401
  br label %after_bb1675

"for blur_y.s0.x.x.rebased1690":                  ; preds = %"for blur_y.s0.x.x.rebased1690.preheader", %"consume blur_x1698"
  %indvars.iv3297 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1690.preheader" ], [ %indvars.iv.next3298, %"consume blur_x1698" ]
  %16292 = add nsw i64 %indvars.iv3297, %298
  %16293 = icmp slt i64 %16292, 1
  %16294 = trunc i64 %16292 to i32
  %16295 = shl nsw i32 %16294, 5
  %16296 = icmp sgt i32 %194, %16295
  %16297 = or i1 %16293, %16296
  br i1 %16297, label %"produce blur_x1696", label %"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge"

"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1690"
  %.pre3469 = shl nsw i64 %16292, 5
  br label %"consume blur_x1698"

"end for blur_y.s0.x.x.rebased1691":              ; preds = %"consume blur_x1698", %after_bb1675
  br i1 %299, label %"for blur_y.s0.x.x.rebased1706.preheader", label %"end for blur_y.s0.x.x.rebased1707", !prof !386

"for blur_y.s0.x.x.rebased1706.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1691"
  %16298 = sext i32 %t1638848 to i64
  %16299 = zext i32 %.pre-phi3434 to i64
  %16300 = mul nsw i64 %16299, %322
  %16301 = sub nsw i64 %16300, %293
  %16302 = zext i32 %.pre-phi3420 to i64
  %16303 = mul nsw i64 %16302, %322
  %16304 = sub nsw i64 %16303, %293
  %16305 = zext i32 %.pre-phi3428 to i64
  %16306 = mul nsw i64 %16305, %322
  %16307 = sub nsw i64 %16306, %293
  %16308 = sext i32 %a365 to i64
  %16309 = add nsw i64 %16308, 18
  %16310 = mul nsw i64 %16309, %319
  %16311 = add nsw i64 %16310, %323
  br label %"for blur_y.s0.x.x.rebased1706"

"produce blur_x1696":                             ; preds = %"for blur_y.s0.x.x.rebased1690"
  %t9601697 = add nsw i32 %430, %16295
  %16312 = sext i32 %t9601697 to i64
  %16313 = getelementptr inbounds i16, i16* %read_input784, i64 %16312
  %16314 = getelementptr inbounds i16, i16* %16313, i64 1
  %16315 = bitcast i16* %16314 to <16 x i16>*
  %16316 = load <16 x i16>, <16 x i16>* %16315, align 2, !tbaa !396
  %16317 = getelementptr inbounds i16, i16* %16313, i64 17
  %16318 = bitcast i16* %16317 to <16 x i16>*
  %16319 = load <16 x i16>, <16 x i16>* %16318, align 2, !tbaa !396
  %16320 = shufflevector <16 x i16> %16316, <16 x i16> %16319, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16321 = getelementptr inbounds i16, i16* %16313, i64 2
  %16322 = bitcast i16* %16321 to <16 x i16>*
  %16323 = load <16 x i16>, <16 x i16>* %16322, align 2, !tbaa !396
  %16324 = getelementptr inbounds i16, i16* %16313, i64 18
  %16325 = bitcast i16* %16324 to <16 x i16>*
  %16326 = load <16 x i16>, <16 x i16>* %16325, align 2, !tbaa !396
  %16327 = shufflevector <16 x i16> %16323, <16 x i16> %16326, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16328 = bitcast i16* %16313 to <16 x i16>*
  %16329 = load <16 x i16>, <16 x i16>* %16328, align 2, !tbaa !396
  %16330 = getelementptr inbounds i16, i16* %16313, i64 16
  %16331 = bitcast i16* %16330 to <16 x i16>*
  %16332 = load <16 x i16>, <16 x i16>* %16331, align 2, !tbaa !396
  %16333 = shufflevector <16 x i16> %16329, <16 x i16> %16332, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16334 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16333, <32 x i16> %16327, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16335 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16320, <32 x i16> %16334, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16336 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16335, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16337 = shufflevector <32 x i16> %16336, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16338 = shl nsw i64 %16292, 5
  %16339 = add nsw i64 %16338, %16197
  %16340 = getelementptr inbounds i16, i16* %blur_x841, i64 %16339
  %16341 = bitcast i16* %16340 to <16 x i16>*
  store <16 x i16> %16337, <16 x i16>* %16341, align 2, !tbaa !399
  %16342 = shufflevector <32 x i16> %16336, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16343 = getelementptr inbounds i16, i16* %16340, i64 16
  %16344 = bitcast i16* %16343 to <16 x i16>*
  store <16 x i16> %16342, <16 x i16>* %16344, align 2, !tbaa !399
  br label %"consume blur_x1698"

"consume blur_x1698":                             ; preds = %"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge", %"produce blur_x1696"
  %.pre-phi3470 = phi i64 [ %.pre3469, %"for blur_y.s0.x.x.rebased1690.consume blur_x1698_crit_edge" ], [ %16338, %"produce blur_x1696" ]
  %16345 = add nsw i64 %16200, %.pre-phi3470
  %16346 = getelementptr inbounds i16, i16* %blur_x841, i64 %16345
  %16347 = bitcast i16* %16346 to <16 x i16>*
  %16348 = load <16 x i16>, <16 x i16>* %16347, align 2, !tbaa !399
  %16349 = getelementptr inbounds i16, i16* %16346, i64 16
  %16350 = bitcast i16* %16349 to <16 x i16>*
  %16351 = load <16 x i16>, <16 x i16>* %16350, align 2, !tbaa !399
  %16352 = shufflevector <16 x i16> %16348, <16 x i16> %16351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16353 = add nsw i64 %16203, %.pre-phi3470
  %16354 = getelementptr inbounds i16, i16* %blur_x841, i64 %16353
  %16355 = bitcast i16* %16354 to <16 x i16>*
  %16356 = load <16 x i16>, <16 x i16>* %16355, align 2, !tbaa !399
  %16357 = getelementptr inbounds i16, i16* %16354, i64 16
  %16358 = bitcast i16* %16357 to <16 x i16>*
  %16359 = load <16 x i16>, <16 x i16>* %16358, align 2, !tbaa !399
  %16360 = shufflevector <16 x i16> %16356, <16 x i16> %16359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16361 = add nsw i64 %16206, %.pre-phi3470
  %16362 = getelementptr inbounds i16, i16* %blur_x841, i64 %16361
  %16363 = bitcast i16* %16362 to <16 x i16>*
  %16364 = load <16 x i16>, <16 x i16>* %16363, align 2, !tbaa !399
  %16365 = getelementptr inbounds i16, i16* %16362, i64 16
  %16366 = bitcast i16* %16365 to <16 x i16>*
  %16367 = load <16 x i16>, <16 x i16>* %16366, align 2, !tbaa !399
  %16368 = shufflevector <16 x i16> %16364, <16 x i16> %16367, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16369 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16368, <32 x i16> %16360, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16370 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16352, <32 x i16> %16369, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16371 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16370, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16372 = shufflevector <32 x i16> %16371, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16373 = add nsw i64 %16210, %.pre-phi3470
  %16374 = getelementptr inbounds i16, i16* %258, i64 %16373
  %16375 = bitcast i16* %16374 to <16 x i16>*
  store <16 x i16> %16372, <16 x i16>* %16375, align 2, !tbaa !401
  %16376 = shufflevector <32 x i16> %16371, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16377 = getelementptr inbounds i16, i16* %16374, i64 16
  %16378 = bitcast i16* %16377 to <16 x i16>*
  store <16 x i16> %16376, <16 x i16>* %16378, align 2, !tbaa !401
  %indvars.iv.next3298 = add nuw nsw i64 %indvars.iv3297, 1
  %16379 = icmp eq i64 %indvars.iv.next3298, %zext3299
  br i1 %16379, label %"end for blur_y.s0.x.x.rebased1691", label %"for blur_y.s0.x.x.rebased1690"

"for blur_y.s0.x.x.rebased1706":                  ; preds = %"for blur_y.s0.x.x.rebased1706.preheader", %"consume blur_x1717"
  %blur_y.s0.x.x.rebased1708 = phi i32 [ %16454, %"consume blur_x1717" ], [ 0, %"for blur_y.s0.x.x.rebased1706.preheader" ]
  %16380 = add nsw i32 %blur_y.s0.x.x.rebased1708, %t1582776
  %a3841 = shl nsw i32 %16380, 5
  %16381 = icmp sgt i32 %t1603, %a3841
  %blur_y.s0.x.v0.base.s1709 = select i1 %16381, i32 %a3841, i32 %t1603
  %16382 = icmp slt i32 %16380, 1
  %16383 = icmp sgt i32 %194, %a3841
  %16384 = or i1 %16382, %16383
  br i1 %16384, label %"produce blur_x1714", label %"consume blur_x1717"

"end for blur_y.s0.x.x.rebased1707":              ; preds = %"consume blur_x1717", %"end for blur_y.s0.x.x.rebased1691"
  br i1 %225, label %"produce blur_x1721", label %after_bb1718

"produce blur_x1714":                             ; preds = %"for blur_y.s0.x.x.rebased1706"
  %16385 = icmp slt i32 %blur_y.s0.x.v0.base.s1709, %194
  %blur_x.s0.x.v1.base.s1715 = select i1 %16385, i32 %blur_y.s0.x.v0.base.s1709, i32 %194
  %t9651716 = add nsw i32 %430, %blur_x.s0.x.v1.base.s1715
  %16386 = sext i32 %t9651716 to i64
  %16387 = getelementptr inbounds i16, i16* %read_input784, i64 %16386
  %16388 = getelementptr inbounds i16, i16* %16387, i64 1
  %16389 = bitcast i16* %16388 to <16 x i16>*
  %16390 = load <16 x i16>, <16 x i16>* %16389, align 2, !tbaa !396
  %16391 = getelementptr inbounds i16, i16* %16387, i64 17
  %16392 = bitcast i16* %16391 to <16 x i16>*
  %16393 = load <16 x i16>, <16 x i16>* %16392, align 2, !tbaa !396
  %16394 = shufflevector <16 x i16> %16390, <16 x i16> %16393, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16395 = getelementptr inbounds i16, i16* %16387, i64 2
  %16396 = bitcast i16* %16395 to <16 x i16>*
  %16397 = load <16 x i16>, <16 x i16>* %16396, align 2, !tbaa !396
  %16398 = getelementptr inbounds i16, i16* %16387, i64 18
  %16399 = bitcast i16* %16398 to <16 x i16>*
  %16400 = load <16 x i16>, <16 x i16>* %16399, align 2, !tbaa !396
  %16401 = shufflevector <16 x i16> %16397, <16 x i16> %16400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16402 = bitcast i16* %16387 to <16 x i16>*
  %16403 = load <16 x i16>, <16 x i16>* %16402, align 2, !tbaa !396
  %16404 = getelementptr inbounds i16, i16* %16387, i64 16
  %16405 = bitcast i16* %16404 to <16 x i16>*
  %16406 = load <16 x i16>, <16 x i16>* %16405, align 2, !tbaa !396
  %16407 = shufflevector <16 x i16> %16403, <16 x i16> %16406, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16408 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16407, <32 x i16> %16401, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16409 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16394, <32 x i16> %16408, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16410 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16409, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16411 = shufflevector <32 x i16> %16410, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16412 = sext i32 %blur_x.s0.x.v1.base.s1715 to i64
  %16413 = add nsw i64 %16412, %16298
  %16414 = getelementptr inbounds i16, i16* %blur_x841, i64 %16413
  %16415 = bitcast i16* %16414 to <16 x i16>*
  store <16 x i16> %16411, <16 x i16>* %16415, align 2, !tbaa !399
  %16416 = shufflevector <32 x i16> %16410, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16417 = getelementptr inbounds i16, i16* %16414, i64 16
  %16418 = bitcast i16* %16417 to <16 x i16>*
  store <16 x i16> %16416, <16 x i16>* %16418, align 2, !tbaa !399
  br label %"consume blur_x1717"

"consume blur_x1717":                             ; preds = %"for blur_y.s0.x.x.rebased1706", %"produce blur_x1714"
  %16419 = sext i32 %blur_y.s0.x.v0.base.s1709 to i64
  %16420 = add nsw i64 %16301, %16419
  %16421 = getelementptr inbounds i16, i16* %blur_x841, i64 %16420
  %16422 = bitcast i16* %16421 to <16 x i16>*
  %16423 = load <16 x i16>, <16 x i16>* %16422, align 2, !tbaa !399
  %16424 = getelementptr inbounds i16, i16* %16421, i64 16
  %16425 = bitcast i16* %16424 to <16 x i16>*
  %16426 = load <16 x i16>, <16 x i16>* %16425, align 2, !tbaa !399
  %16427 = shufflevector <16 x i16> %16423, <16 x i16> %16426, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16428 = add nsw i64 %16304, %16419
  %16429 = getelementptr inbounds i16, i16* %blur_x841, i64 %16428
  %16430 = bitcast i16* %16429 to <16 x i16>*
  %16431 = load <16 x i16>, <16 x i16>* %16430, align 2, !tbaa !399
  %16432 = getelementptr inbounds i16, i16* %16429, i64 16
  %16433 = bitcast i16* %16432 to <16 x i16>*
  %16434 = load <16 x i16>, <16 x i16>* %16433, align 2, !tbaa !399
  %16435 = shufflevector <16 x i16> %16431, <16 x i16> %16434, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16436 = add nsw i64 %16307, %16419
  %16437 = getelementptr inbounds i16, i16* %blur_x841, i64 %16436
  %16438 = bitcast i16* %16437 to <16 x i16>*
  %16439 = load <16 x i16>, <16 x i16>* %16438, align 2, !tbaa !399
  %16440 = getelementptr inbounds i16, i16* %16437, i64 16
  %16441 = bitcast i16* %16440 to <16 x i16>*
  %16442 = load <16 x i16>, <16 x i16>* %16441, align 2, !tbaa !399
  %16443 = shufflevector <16 x i16> %16439, <16 x i16> %16442, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16444 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16443, <32 x i16> %16435, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16445 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16427, <32 x i16> %16444, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16446 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16445, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16447 = shufflevector <32 x i16> %16446, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16448 = add nsw i64 %16311, %16419
  %16449 = getelementptr inbounds i16, i16* %258, i64 %16448
  %16450 = bitcast i16* %16449 to <16 x i16>*
  store <16 x i16> %16447, <16 x i16>* %16450, align 2, !tbaa !401
  %16451 = shufflevector <32 x i16> %16446, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16452 = getelementptr inbounds i16, i16* %16449, i64 16
  %16453 = bitcast i16* %16452 to <16 x i16>*
  store <16 x i16> %16451, <16 x i16>* %16453, align 2, !tbaa !401
  %16454 = add nuw nsw i32 %blur_y.s0.x.x.rebased1708, 1
  %.not2486 = icmp eq i32 %16454, %t1639860
  br i1 %.not2486, label %"end for blur_y.s0.x.x.rebased1707", label %"for blur_y.s0.x.x.rebased1706"

after_bb1718:                                     ; preds = %"end for blur_y.s0.x.x.rebased1707", %"produce blur_x1721"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1733.preheader", label %"end for blur_y.s0.x.x.rebased1734", !prof !386

"for blur_y.s0.x.x.rebased1733.preheader":        ; preds = %after_bb1718
  %16455 = sext i32 %t1644876 to i64
  %16456 = zext i32 %.pre-phi3420 to i64
  %16457 = mul nsw i64 %16456, %322
  %16458 = sub nsw i64 %16457, %293
  %16459 = zext i32 %.pre-phi3424 to i64
  %16460 = mul nsw i64 %16459, %322
  %16461 = sub nsw i64 %16460, %293
  %16462 = zext i32 %.pre-phi3434 to i64
  %16463 = mul nsw i64 %16462, %322
  %16464 = sub nsw i64 %16463, %293
  %16465 = sext i32 %a365 to i64
  %16466 = add nsw i64 %16465, 19
  %16467 = mul nsw i64 %16466, %319
  %16468 = add nsw i64 %16467, %323
  br label %"for blur_y.s0.x.x.rebased1733"

"produce blur_x1721":                             ; preds = %"end for blur_y.s0.x.x.rebased1707"
  %16469 = getelementptr inbounds i16, i16* %read_input784, i64 %434
  %16470 = getelementptr inbounds i16, i16* %16469, i64 -31
  %16471 = bitcast i16* %16470 to <16 x i16>*
  %16472 = load <16 x i16>, <16 x i16>* %16471, align 2, !tbaa !396
  %16473 = getelementptr inbounds i16, i16* %16469, i64 -15
  %16474 = bitcast i16* %16473 to <16 x i16>*
  %16475 = load <16 x i16>, <16 x i16>* %16474, align 2, !tbaa !396
  %16476 = shufflevector <16 x i16> %16472, <16 x i16> %16475, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16477 = getelementptr inbounds i16, i16* %16469, i64 -30
  %16478 = bitcast i16* %16477 to <16 x i16>*
  %16479 = load <16 x i16>, <16 x i16>* %16478, align 2, !tbaa !396
  %16480 = getelementptr inbounds i16, i16* %16469, i64 -14
  %16481 = bitcast i16* %16480 to <16 x i16>*
  %16482 = load <16 x i16>, <16 x i16>* %16481, align 2, !tbaa !396
  %16483 = shufflevector <16 x i16> %16479, <16 x i16> %16482, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16484 = getelementptr inbounds i16, i16* %16469, i64 -32
  %16485 = bitcast i16* %16484 to <16 x i16>*
  %16486 = load <16 x i16>, <16 x i16>* %16485, align 2, !tbaa !396
  %16487 = getelementptr inbounds i16, i16* %16469, i64 -16
  %16488 = bitcast i16* %16487 to <16 x i16>*
  %16489 = load <16 x i16>, <16 x i16>* %16488, align 2, !tbaa !396
  %16490 = shufflevector <16 x i16> %16486, <16 x i16> %16489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16491 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16490, <32 x i16> %16483, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16492 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16476, <32 x i16> %16491, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16493 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16492, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16494 = shufflevector <32 x i16> %16493, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16495 = zext i32 %.pre-phi3424 to i64
  %16496 = mul nsw i64 %294, %16495
  %16497 = add nsw i64 %296, %16496
  %16498 = getelementptr inbounds i16, i16* %blur_x841, i64 %16497
  %16499 = getelementptr inbounds i16, i16* %16498, i64 -32
  %16500 = bitcast i16* %16499 to <16 x i16>*
  store <16 x i16> %16494, <16 x i16>* %16500, align 2, !tbaa !399
  %16501 = shufflevector <32 x i16> %16493, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16502 = getelementptr inbounds i16, i16* %16498, i64 -16
  %16503 = bitcast i16* %16502 to <16 x i16>*
  store <16 x i16> %16501, <16 x i16>* %16503, align 2, !tbaa !399
  %16504 = zext i32 %.pre-phi3420 to i64
  %16505 = mul nsw i64 %16504, %318
  %16506 = add nsw i64 %16505, %291
  %16507 = getelementptr inbounds i16, i16* %blur_x841, i64 %16506
  %16508 = getelementptr inbounds i16, i16* %16507, i64 -32
  %16509 = bitcast i16* %16508 to <16 x i16>*
  %16510 = load <16 x i16>, <16 x i16>* %16509, align 2, !tbaa !399
  %16511 = getelementptr inbounds i16, i16* %16507, i64 -16
  %16512 = bitcast i16* %16511 to <16 x i16>*
  %16513 = load <16 x i16>, <16 x i16>* %16512, align 2, !tbaa !399
  %16514 = shufflevector <16 x i16> %16510, <16 x i16> %16513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16515 = mul nsw i64 %16495, %318
  %16516 = add nsw i64 %16515, %291
  %16517 = getelementptr inbounds i16, i16* %blur_x841, i64 %16516
  %16518 = getelementptr inbounds i16, i16* %16517, i64 -32
  %16519 = bitcast i16* %16518 to <16 x i16>*
  %16520 = load <16 x i16>, <16 x i16>* %16519, align 2, !tbaa !399
  %16521 = getelementptr inbounds i16, i16* %16517, i64 -16
  %16522 = bitcast i16* %16521 to <16 x i16>*
  %16523 = load <16 x i16>, <16 x i16>* %16522, align 2, !tbaa !399
  %16524 = shufflevector <16 x i16> %16520, <16 x i16> %16523, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16525 = zext i32 %.pre-phi3434 to i64
  %16526 = mul nsw i64 %16525, %318
  %16527 = add nsw i64 %16526, %291
  %16528 = getelementptr inbounds i16, i16* %blur_x841, i64 %16527
  %16529 = getelementptr inbounds i16, i16* %16528, i64 -32
  %16530 = bitcast i16* %16529 to <16 x i16>*
  %16531 = load <16 x i16>, <16 x i16>* %16530, align 2, !tbaa !399
  %16532 = getelementptr inbounds i16, i16* %16528, i64 -16
  %16533 = bitcast i16* %16532 to <16 x i16>*
  %16534 = load <16 x i16>, <16 x i16>* %16533, align 2, !tbaa !399
  %16535 = shufflevector <16 x i16> %16531, <16 x i16> %16534, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16536 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16535, <32 x i16> %16524, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16537 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16514, <32 x i16> %16536, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16538 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16537, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16539 = shufflevector <32 x i16> %16538, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16540 = sext i32 %a365 to i64
  %16541 = add nsw i64 %16540, 19
  %16542 = mul nsw i64 %16541, %319
  %16543 = add nsw i64 %321, %16542
  %16544 = getelementptr inbounds i16, i16* %258, i64 %16543
  %16545 = getelementptr inbounds i16, i16* %16544, i64 -32
  %16546 = bitcast i16* %16545 to <16 x i16>*
  store <16 x i16> %16539, <16 x i16>* %16546, align 2, !tbaa !401
  %16547 = shufflevector <32 x i16> %16538, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16548 = getelementptr inbounds i16, i16* %16544, i64 -16
  %16549 = bitcast i16* %16548 to <16 x i16>*
  store <16 x i16> %16547, <16 x i16>* %16549, align 2, !tbaa !401
  br label %after_bb1718

"for blur_y.s0.x.x.rebased1733":                  ; preds = %"for blur_y.s0.x.x.rebased1733.preheader", %"consume blur_x1741"
  %indvars.iv3300 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1733.preheader" ], [ %indvars.iv.next3301, %"consume blur_x1741" ]
  %16550 = add nsw i64 %indvars.iv3300, %298
  %16551 = icmp slt i64 %16550, 1
  %16552 = trunc i64 %16550 to i32
  %16553 = shl nsw i32 %16552, 5
  %16554 = icmp sgt i32 %194, %16553
  %16555 = or i1 %16551, %16554
  br i1 %16555, label %"produce blur_x1739", label %"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge"

"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1733"
  %.pre3471 = shl nsw i64 %16550, 5
  br label %"consume blur_x1741"

"end for blur_y.s0.x.x.rebased1734":              ; preds = %"consume blur_x1741", %after_bb1718
  br i1 %299, label %"for blur_y.s0.x.x.rebased1749.preheader", label %"end for blur_y.s0.x.x.rebased1750", !prof !386

"for blur_y.s0.x.x.rebased1749.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1734"
  %16556 = sext i32 %t1644876 to i64
  %16557 = zext i32 %.pre-phi3420 to i64
  %16558 = mul nsw i64 %16557, %322
  %16559 = sub nsw i64 %16558, %293
  %16560 = zext i32 %.pre-phi3424 to i64
  %16561 = mul nsw i64 %16560, %322
  %16562 = sub nsw i64 %16561, %293
  %16563 = zext i32 %.pre-phi3434 to i64
  %16564 = mul nsw i64 %16563, %322
  %16565 = sub nsw i64 %16564, %293
  %16566 = sext i32 %a365 to i64
  %16567 = add nsw i64 %16566, 19
  %16568 = mul nsw i64 %16567, %319
  %16569 = add nsw i64 %16568, %323
  br label %"for blur_y.s0.x.x.rebased1749"

"produce blur_x1739":                             ; preds = %"for blur_y.s0.x.x.rebased1733"
  %t9761740 = add nsw i32 %436, %16553
  %16570 = sext i32 %t9761740 to i64
  %16571 = getelementptr inbounds i16, i16* %read_input784, i64 %16570
  %16572 = getelementptr inbounds i16, i16* %16571, i64 1
  %16573 = bitcast i16* %16572 to <16 x i16>*
  %16574 = load <16 x i16>, <16 x i16>* %16573, align 2, !tbaa !396
  %16575 = getelementptr inbounds i16, i16* %16571, i64 17
  %16576 = bitcast i16* %16575 to <16 x i16>*
  %16577 = load <16 x i16>, <16 x i16>* %16576, align 2, !tbaa !396
  %16578 = shufflevector <16 x i16> %16574, <16 x i16> %16577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16579 = getelementptr inbounds i16, i16* %16571, i64 2
  %16580 = bitcast i16* %16579 to <16 x i16>*
  %16581 = load <16 x i16>, <16 x i16>* %16580, align 2, !tbaa !396
  %16582 = getelementptr inbounds i16, i16* %16571, i64 18
  %16583 = bitcast i16* %16582 to <16 x i16>*
  %16584 = load <16 x i16>, <16 x i16>* %16583, align 2, !tbaa !396
  %16585 = shufflevector <16 x i16> %16581, <16 x i16> %16584, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16586 = bitcast i16* %16571 to <16 x i16>*
  %16587 = load <16 x i16>, <16 x i16>* %16586, align 2, !tbaa !396
  %16588 = getelementptr inbounds i16, i16* %16571, i64 16
  %16589 = bitcast i16* %16588 to <16 x i16>*
  %16590 = load <16 x i16>, <16 x i16>* %16589, align 2, !tbaa !396
  %16591 = shufflevector <16 x i16> %16587, <16 x i16> %16590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16592 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16591, <32 x i16> %16585, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16593 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16578, <32 x i16> %16592, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16594 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16593, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16595 = shufflevector <32 x i16> %16594, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16596 = shl nsw i64 %16550, 5
  %16597 = add nsw i64 %16596, %16455
  %16598 = getelementptr inbounds i16, i16* %blur_x841, i64 %16597
  %16599 = bitcast i16* %16598 to <16 x i16>*
  store <16 x i16> %16595, <16 x i16>* %16599, align 2, !tbaa !399
  %16600 = shufflevector <32 x i16> %16594, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16601 = getelementptr inbounds i16, i16* %16598, i64 16
  %16602 = bitcast i16* %16601 to <16 x i16>*
  store <16 x i16> %16600, <16 x i16>* %16602, align 2, !tbaa !399
  br label %"consume blur_x1741"

"consume blur_x1741":                             ; preds = %"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge", %"produce blur_x1739"
  %.pre-phi3472 = phi i64 [ %.pre3471, %"for blur_y.s0.x.x.rebased1733.consume blur_x1741_crit_edge" ], [ %16596, %"produce blur_x1739" ]
  %16603 = add nsw i64 %16458, %.pre-phi3472
  %16604 = getelementptr inbounds i16, i16* %blur_x841, i64 %16603
  %16605 = bitcast i16* %16604 to <16 x i16>*
  %16606 = load <16 x i16>, <16 x i16>* %16605, align 2, !tbaa !399
  %16607 = getelementptr inbounds i16, i16* %16604, i64 16
  %16608 = bitcast i16* %16607 to <16 x i16>*
  %16609 = load <16 x i16>, <16 x i16>* %16608, align 2, !tbaa !399
  %16610 = shufflevector <16 x i16> %16606, <16 x i16> %16609, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16611 = add nsw i64 %16461, %.pre-phi3472
  %16612 = getelementptr inbounds i16, i16* %blur_x841, i64 %16611
  %16613 = bitcast i16* %16612 to <16 x i16>*
  %16614 = load <16 x i16>, <16 x i16>* %16613, align 2, !tbaa !399
  %16615 = getelementptr inbounds i16, i16* %16612, i64 16
  %16616 = bitcast i16* %16615 to <16 x i16>*
  %16617 = load <16 x i16>, <16 x i16>* %16616, align 2, !tbaa !399
  %16618 = shufflevector <16 x i16> %16614, <16 x i16> %16617, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16619 = add nsw i64 %16464, %.pre-phi3472
  %16620 = getelementptr inbounds i16, i16* %blur_x841, i64 %16619
  %16621 = bitcast i16* %16620 to <16 x i16>*
  %16622 = load <16 x i16>, <16 x i16>* %16621, align 2, !tbaa !399
  %16623 = getelementptr inbounds i16, i16* %16620, i64 16
  %16624 = bitcast i16* %16623 to <16 x i16>*
  %16625 = load <16 x i16>, <16 x i16>* %16624, align 2, !tbaa !399
  %16626 = shufflevector <16 x i16> %16622, <16 x i16> %16625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16627 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16626, <32 x i16> %16618, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16628 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16610, <32 x i16> %16627, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16629 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16628, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16630 = shufflevector <32 x i16> %16629, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16631 = add nsw i64 %16468, %.pre-phi3472
  %16632 = getelementptr inbounds i16, i16* %258, i64 %16631
  %16633 = bitcast i16* %16632 to <16 x i16>*
  store <16 x i16> %16630, <16 x i16>* %16633, align 2, !tbaa !401
  %16634 = shufflevector <32 x i16> %16629, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16635 = getelementptr inbounds i16, i16* %16632, i64 16
  %16636 = bitcast i16* %16635 to <16 x i16>*
  store <16 x i16> %16634, <16 x i16>* %16636, align 2, !tbaa !401
  %indvars.iv.next3301 = add nuw nsw i64 %indvars.iv3300, 1
  %16637 = icmp eq i64 %indvars.iv.next3301, %zext3302
  br i1 %16637, label %"end for blur_y.s0.x.x.rebased1734", label %"for blur_y.s0.x.x.rebased1733"

"for blur_y.s0.x.x.rebased1749":                  ; preds = %"for blur_y.s0.x.x.rebased1749.preheader", %"consume blur_x1760"
  %blur_y.s0.x.x.rebased1751 = phi i32 [ %16712, %"consume blur_x1760" ], [ 0, %"for blur_y.s0.x.x.rebased1749.preheader" ]
  %16638 = add nsw i32 %blur_y.s0.x.x.rebased1751, %t1582776
  %a3998 = shl nsw i32 %16638, 5
  %16639 = icmp sgt i32 %t1603, %a3998
  %blur_y.s0.x.v0.base.s1752 = select i1 %16639, i32 %a3998, i32 %t1603
  %16640 = icmp slt i32 %16638, 1
  %16641 = icmp sgt i32 %194, %a3998
  %16642 = or i1 %16640, %16641
  br i1 %16642, label %"produce blur_x1757", label %"consume blur_x1760"

"end for blur_y.s0.x.x.rebased1750":              ; preds = %"consume blur_x1760", %"end for blur_y.s0.x.x.rebased1734"
  br i1 %225, label %"produce blur_x1764", label %after_bb1761

"produce blur_x1757":                             ; preds = %"for blur_y.s0.x.x.rebased1749"
  %16643 = icmp slt i32 %blur_y.s0.x.v0.base.s1752, %194
  %blur_x.s0.x.v1.base.s1758 = select i1 %16643, i32 %blur_y.s0.x.v0.base.s1752, i32 %194
  %t9811759 = add nsw i32 %436, %blur_x.s0.x.v1.base.s1758
  %16644 = sext i32 %t9811759 to i64
  %16645 = getelementptr inbounds i16, i16* %read_input784, i64 %16644
  %16646 = getelementptr inbounds i16, i16* %16645, i64 1
  %16647 = bitcast i16* %16646 to <16 x i16>*
  %16648 = load <16 x i16>, <16 x i16>* %16647, align 2, !tbaa !396
  %16649 = getelementptr inbounds i16, i16* %16645, i64 17
  %16650 = bitcast i16* %16649 to <16 x i16>*
  %16651 = load <16 x i16>, <16 x i16>* %16650, align 2, !tbaa !396
  %16652 = shufflevector <16 x i16> %16648, <16 x i16> %16651, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16653 = getelementptr inbounds i16, i16* %16645, i64 2
  %16654 = bitcast i16* %16653 to <16 x i16>*
  %16655 = load <16 x i16>, <16 x i16>* %16654, align 2, !tbaa !396
  %16656 = getelementptr inbounds i16, i16* %16645, i64 18
  %16657 = bitcast i16* %16656 to <16 x i16>*
  %16658 = load <16 x i16>, <16 x i16>* %16657, align 2, !tbaa !396
  %16659 = shufflevector <16 x i16> %16655, <16 x i16> %16658, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16660 = bitcast i16* %16645 to <16 x i16>*
  %16661 = load <16 x i16>, <16 x i16>* %16660, align 2, !tbaa !396
  %16662 = getelementptr inbounds i16, i16* %16645, i64 16
  %16663 = bitcast i16* %16662 to <16 x i16>*
  %16664 = load <16 x i16>, <16 x i16>* %16663, align 2, !tbaa !396
  %16665 = shufflevector <16 x i16> %16661, <16 x i16> %16664, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16666 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16665, <32 x i16> %16659, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16667 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16652, <32 x i16> %16666, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16668 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16667, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16669 = shufflevector <32 x i16> %16668, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16670 = sext i32 %blur_x.s0.x.v1.base.s1758 to i64
  %16671 = add nsw i64 %16670, %16556
  %16672 = getelementptr inbounds i16, i16* %blur_x841, i64 %16671
  %16673 = bitcast i16* %16672 to <16 x i16>*
  store <16 x i16> %16669, <16 x i16>* %16673, align 2, !tbaa !399
  %16674 = shufflevector <32 x i16> %16668, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16675 = getelementptr inbounds i16, i16* %16672, i64 16
  %16676 = bitcast i16* %16675 to <16 x i16>*
  store <16 x i16> %16674, <16 x i16>* %16676, align 2, !tbaa !399
  br label %"consume blur_x1760"

"consume blur_x1760":                             ; preds = %"for blur_y.s0.x.x.rebased1749", %"produce blur_x1757"
  %16677 = sext i32 %blur_y.s0.x.v0.base.s1752 to i64
  %16678 = add nsw i64 %16559, %16677
  %16679 = getelementptr inbounds i16, i16* %blur_x841, i64 %16678
  %16680 = bitcast i16* %16679 to <16 x i16>*
  %16681 = load <16 x i16>, <16 x i16>* %16680, align 2, !tbaa !399
  %16682 = getelementptr inbounds i16, i16* %16679, i64 16
  %16683 = bitcast i16* %16682 to <16 x i16>*
  %16684 = load <16 x i16>, <16 x i16>* %16683, align 2, !tbaa !399
  %16685 = shufflevector <16 x i16> %16681, <16 x i16> %16684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16686 = add nsw i64 %16562, %16677
  %16687 = getelementptr inbounds i16, i16* %blur_x841, i64 %16686
  %16688 = bitcast i16* %16687 to <16 x i16>*
  %16689 = load <16 x i16>, <16 x i16>* %16688, align 2, !tbaa !399
  %16690 = getelementptr inbounds i16, i16* %16687, i64 16
  %16691 = bitcast i16* %16690 to <16 x i16>*
  %16692 = load <16 x i16>, <16 x i16>* %16691, align 2, !tbaa !399
  %16693 = shufflevector <16 x i16> %16689, <16 x i16> %16692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16694 = add nsw i64 %16565, %16677
  %16695 = getelementptr inbounds i16, i16* %blur_x841, i64 %16694
  %16696 = bitcast i16* %16695 to <16 x i16>*
  %16697 = load <16 x i16>, <16 x i16>* %16696, align 2, !tbaa !399
  %16698 = getelementptr inbounds i16, i16* %16695, i64 16
  %16699 = bitcast i16* %16698 to <16 x i16>*
  %16700 = load <16 x i16>, <16 x i16>* %16699, align 2, !tbaa !399
  %16701 = shufflevector <16 x i16> %16697, <16 x i16> %16700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16702 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16701, <32 x i16> %16693, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16703 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16685, <32 x i16> %16702, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16704 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16703, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16705 = shufflevector <32 x i16> %16704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16706 = add nsw i64 %16569, %16677
  %16707 = getelementptr inbounds i16, i16* %258, i64 %16706
  %16708 = bitcast i16* %16707 to <16 x i16>*
  store <16 x i16> %16705, <16 x i16>* %16708, align 2, !tbaa !401
  %16709 = shufflevector <32 x i16> %16704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16710 = getelementptr inbounds i16, i16* %16707, i64 16
  %16711 = bitcast i16* %16710 to <16 x i16>*
  store <16 x i16> %16709, <16 x i16>* %16711, align 2, !tbaa !401
  %16712 = add nuw nsw i32 %blur_y.s0.x.x.rebased1751, 1
  %.not2482 = icmp eq i32 %16712, %t1639860
  br i1 %.not2482, label %"end for blur_y.s0.x.x.rebased1750", label %"for blur_y.s0.x.x.rebased1749"

after_bb1761:                                     ; preds = %"end for blur_y.s0.x.x.rebased1750", %"produce blur_x1764"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1776.preheader", label %"end for blur_y.s0.x.x.rebased1777", !prof !386

"for blur_y.s0.x.x.rebased1776.preheader":        ; preds = %after_bb1761
  %16713 = sext i32 %t1650912 to i64
  %16714 = zext i32 %.pre-phi3424 to i64
  %16715 = mul nsw i64 %16714, %322
  %16716 = sub nsw i64 %16715, %293
  %16717 = zext i32 %.pre-phi3428 to i64
  %16718 = mul nsw i64 %16717, %322
  %16719 = sub nsw i64 %16718, %293
  %16720 = zext i32 %.pre-phi3420 to i64
  %16721 = mul nsw i64 %16720, %322
  %16722 = sub nsw i64 %16721, %293
  %16723 = sext i32 %a365 to i64
  %16724 = add nsw i64 %16723, 20
  %16725 = mul nsw i64 %16724, %319
  %16726 = add nsw i64 %16725, %323
  br label %"for blur_y.s0.x.x.rebased1776"

"produce blur_x1764":                             ; preds = %"end for blur_y.s0.x.x.rebased1750"
  %16727 = getelementptr inbounds i16, i16* %read_input784, i64 %440
  %16728 = getelementptr inbounds i16, i16* %16727, i64 -31
  %16729 = bitcast i16* %16728 to <16 x i16>*
  %16730 = load <16 x i16>, <16 x i16>* %16729, align 2, !tbaa !396
  %16731 = getelementptr inbounds i16, i16* %16727, i64 -15
  %16732 = bitcast i16* %16731 to <16 x i16>*
  %16733 = load <16 x i16>, <16 x i16>* %16732, align 2, !tbaa !396
  %16734 = shufflevector <16 x i16> %16730, <16 x i16> %16733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16735 = getelementptr inbounds i16, i16* %16727, i64 -30
  %16736 = bitcast i16* %16735 to <16 x i16>*
  %16737 = load <16 x i16>, <16 x i16>* %16736, align 2, !tbaa !396
  %16738 = getelementptr inbounds i16, i16* %16727, i64 -14
  %16739 = bitcast i16* %16738 to <16 x i16>*
  %16740 = load <16 x i16>, <16 x i16>* %16739, align 2, !tbaa !396
  %16741 = shufflevector <16 x i16> %16737, <16 x i16> %16740, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16742 = getelementptr inbounds i16, i16* %16727, i64 -32
  %16743 = bitcast i16* %16742 to <16 x i16>*
  %16744 = load <16 x i16>, <16 x i16>* %16743, align 2, !tbaa !396
  %16745 = getelementptr inbounds i16, i16* %16727, i64 -16
  %16746 = bitcast i16* %16745 to <16 x i16>*
  %16747 = load <16 x i16>, <16 x i16>* %16746, align 2, !tbaa !396
  %16748 = shufflevector <16 x i16> %16744, <16 x i16> %16747, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16749 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16748, <32 x i16> %16741, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16750 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16734, <32 x i16> %16749, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16751 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16750, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16752 = shufflevector <32 x i16> %16751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16753 = zext i32 %.pre-phi3428 to i64
  %16754 = mul nsw i64 %294, %16753
  %16755 = add nsw i64 %296, %16754
  %16756 = getelementptr inbounds i16, i16* %blur_x841, i64 %16755
  %16757 = getelementptr inbounds i16, i16* %16756, i64 -32
  %16758 = bitcast i16* %16757 to <16 x i16>*
  store <16 x i16> %16752, <16 x i16>* %16758, align 2, !tbaa !399
  %16759 = shufflevector <32 x i16> %16751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16760 = getelementptr inbounds i16, i16* %16756, i64 -16
  %16761 = bitcast i16* %16760 to <16 x i16>*
  store <16 x i16> %16759, <16 x i16>* %16761, align 2, !tbaa !399
  %16762 = zext i32 %.pre-phi3424 to i64
  %16763 = mul nsw i64 %16762, %318
  %16764 = add nsw i64 %16763, %291
  %16765 = getelementptr inbounds i16, i16* %blur_x841, i64 %16764
  %16766 = getelementptr inbounds i16, i16* %16765, i64 -32
  %16767 = bitcast i16* %16766 to <16 x i16>*
  %16768 = load <16 x i16>, <16 x i16>* %16767, align 2, !tbaa !399
  %16769 = getelementptr inbounds i16, i16* %16765, i64 -16
  %16770 = bitcast i16* %16769 to <16 x i16>*
  %16771 = load <16 x i16>, <16 x i16>* %16770, align 2, !tbaa !399
  %16772 = shufflevector <16 x i16> %16768, <16 x i16> %16771, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16773 = mul nsw i64 %16753, %318
  %16774 = add nsw i64 %16773, %291
  %16775 = getelementptr inbounds i16, i16* %blur_x841, i64 %16774
  %16776 = getelementptr inbounds i16, i16* %16775, i64 -32
  %16777 = bitcast i16* %16776 to <16 x i16>*
  %16778 = load <16 x i16>, <16 x i16>* %16777, align 2, !tbaa !399
  %16779 = getelementptr inbounds i16, i16* %16775, i64 -16
  %16780 = bitcast i16* %16779 to <16 x i16>*
  %16781 = load <16 x i16>, <16 x i16>* %16780, align 2, !tbaa !399
  %16782 = shufflevector <16 x i16> %16778, <16 x i16> %16781, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16783 = zext i32 %.pre-phi3420 to i64
  %16784 = mul nsw i64 %16783, %318
  %16785 = add nsw i64 %16784, %291
  %16786 = getelementptr inbounds i16, i16* %blur_x841, i64 %16785
  %16787 = getelementptr inbounds i16, i16* %16786, i64 -32
  %16788 = bitcast i16* %16787 to <16 x i16>*
  %16789 = load <16 x i16>, <16 x i16>* %16788, align 2, !tbaa !399
  %16790 = getelementptr inbounds i16, i16* %16786, i64 -16
  %16791 = bitcast i16* %16790 to <16 x i16>*
  %16792 = load <16 x i16>, <16 x i16>* %16791, align 2, !tbaa !399
  %16793 = shufflevector <16 x i16> %16789, <16 x i16> %16792, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16794 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16793, <32 x i16> %16782, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16795 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16772, <32 x i16> %16794, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16796 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16795, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16797 = shufflevector <32 x i16> %16796, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16798 = sext i32 %a365 to i64
  %16799 = add nsw i64 %16798, 20
  %16800 = mul nsw i64 %16799, %319
  %16801 = add nsw i64 %321, %16800
  %16802 = getelementptr inbounds i16, i16* %258, i64 %16801
  %16803 = getelementptr inbounds i16, i16* %16802, i64 -32
  %16804 = bitcast i16* %16803 to <16 x i16>*
  store <16 x i16> %16797, <16 x i16>* %16804, align 2, !tbaa !401
  %16805 = shufflevector <32 x i16> %16796, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16806 = getelementptr inbounds i16, i16* %16802, i64 -16
  %16807 = bitcast i16* %16806 to <16 x i16>*
  store <16 x i16> %16805, <16 x i16>* %16807, align 2, !tbaa !401
  br label %after_bb1761

"for blur_y.s0.x.x.rebased1776":                  ; preds = %"for blur_y.s0.x.x.rebased1776.preheader", %"consume blur_x1784"
  %indvars.iv3303 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1776.preheader" ], [ %indvars.iv.next3304, %"consume blur_x1784" ]
  %16808 = add nsw i64 %indvars.iv3303, %298
  %16809 = icmp slt i64 %16808, 1
  %16810 = trunc i64 %16808 to i32
  %16811 = shl nsw i32 %16810, 5
  %16812 = icmp sgt i32 %194, %16811
  %16813 = or i1 %16809, %16812
  br i1 %16813, label %"produce blur_x1782", label %"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge"

"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1776"
  %.pre3473 = shl nsw i64 %16808, 5
  br label %"consume blur_x1784"

"end for blur_y.s0.x.x.rebased1777":              ; preds = %"consume blur_x1784", %after_bb1761
  br i1 %299, label %"for blur_y.s0.x.x.rebased1792.preheader", label %"end for blur_y.s0.x.x.rebased1793", !prof !386

"for blur_y.s0.x.x.rebased1792.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1777"
  %16814 = sext i32 %t1650912 to i64
  %16815 = zext i32 %.pre-phi3424 to i64
  %16816 = mul nsw i64 %16815, %322
  %16817 = sub nsw i64 %16816, %293
  %16818 = zext i32 %.pre-phi3428 to i64
  %16819 = mul nsw i64 %16818, %322
  %16820 = sub nsw i64 %16819, %293
  %16821 = zext i32 %.pre-phi3420 to i64
  %16822 = mul nsw i64 %16821, %322
  %16823 = sub nsw i64 %16822, %293
  %16824 = sext i32 %a365 to i64
  %16825 = add nsw i64 %16824, 20
  %16826 = mul nsw i64 %16825, %319
  %16827 = add nsw i64 %16826, %323
  br label %"for blur_y.s0.x.x.rebased1792"

"produce blur_x1782":                             ; preds = %"for blur_y.s0.x.x.rebased1776"
  %t9921783 = add nsw i32 %442, %16811
  %16828 = sext i32 %t9921783 to i64
  %16829 = getelementptr inbounds i16, i16* %read_input784, i64 %16828
  %16830 = getelementptr inbounds i16, i16* %16829, i64 1
  %16831 = bitcast i16* %16830 to <16 x i16>*
  %16832 = load <16 x i16>, <16 x i16>* %16831, align 2, !tbaa !396
  %16833 = getelementptr inbounds i16, i16* %16829, i64 17
  %16834 = bitcast i16* %16833 to <16 x i16>*
  %16835 = load <16 x i16>, <16 x i16>* %16834, align 2, !tbaa !396
  %16836 = shufflevector <16 x i16> %16832, <16 x i16> %16835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16837 = getelementptr inbounds i16, i16* %16829, i64 2
  %16838 = bitcast i16* %16837 to <16 x i16>*
  %16839 = load <16 x i16>, <16 x i16>* %16838, align 2, !tbaa !396
  %16840 = getelementptr inbounds i16, i16* %16829, i64 18
  %16841 = bitcast i16* %16840 to <16 x i16>*
  %16842 = load <16 x i16>, <16 x i16>* %16841, align 2, !tbaa !396
  %16843 = shufflevector <16 x i16> %16839, <16 x i16> %16842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16844 = bitcast i16* %16829 to <16 x i16>*
  %16845 = load <16 x i16>, <16 x i16>* %16844, align 2, !tbaa !396
  %16846 = getelementptr inbounds i16, i16* %16829, i64 16
  %16847 = bitcast i16* %16846 to <16 x i16>*
  %16848 = load <16 x i16>, <16 x i16>* %16847, align 2, !tbaa !396
  %16849 = shufflevector <16 x i16> %16845, <16 x i16> %16848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16850 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16849, <32 x i16> %16843, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16851 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16836, <32 x i16> %16850, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16852 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16851, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16853 = shufflevector <32 x i16> %16852, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16854 = shl nsw i64 %16808, 5
  %16855 = add nsw i64 %16854, %16713
  %16856 = getelementptr inbounds i16, i16* %blur_x841, i64 %16855
  %16857 = bitcast i16* %16856 to <16 x i16>*
  store <16 x i16> %16853, <16 x i16>* %16857, align 2, !tbaa !399
  %16858 = shufflevector <32 x i16> %16852, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16859 = getelementptr inbounds i16, i16* %16856, i64 16
  %16860 = bitcast i16* %16859 to <16 x i16>*
  store <16 x i16> %16858, <16 x i16>* %16860, align 2, !tbaa !399
  br label %"consume blur_x1784"

"consume blur_x1784":                             ; preds = %"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge", %"produce blur_x1782"
  %.pre-phi3474 = phi i64 [ %.pre3473, %"for blur_y.s0.x.x.rebased1776.consume blur_x1784_crit_edge" ], [ %16854, %"produce blur_x1782" ]
  %16861 = add nsw i64 %16716, %.pre-phi3474
  %16862 = getelementptr inbounds i16, i16* %blur_x841, i64 %16861
  %16863 = bitcast i16* %16862 to <16 x i16>*
  %16864 = load <16 x i16>, <16 x i16>* %16863, align 2, !tbaa !399
  %16865 = getelementptr inbounds i16, i16* %16862, i64 16
  %16866 = bitcast i16* %16865 to <16 x i16>*
  %16867 = load <16 x i16>, <16 x i16>* %16866, align 2, !tbaa !399
  %16868 = shufflevector <16 x i16> %16864, <16 x i16> %16867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16869 = add nsw i64 %16719, %.pre-phi3474
  %16870 = getelementptr inbounds i16, i16* %blur_x841, i64 %16869
  %16871 = bitcast i16* %16870 to <16 x i16>*
  %16872 = load <16 x i16>, <16 x i16>* %16871, align 2, !tbaa !399
  %16873 = getelementptr inbounds i16, i16* %16870, i64 16
  %16874 = bitcast i16* %16873 to <16 x i16>*
  %16875 = load <16 x i16>, <16 x i16>* %16874, align 2, !tbaa !399
  %16876 = shufflevector <16 x i16> %16872, <16 x i16> %16875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16877 = add nsw i64 %16722, %.pre-phi3474
  %16878 = getelementptr inbounds i16, i16* %blur_x841, i64 %16877
  %16879 = bitcast i16* %16878 to <16 x i16>*
  %16880 = load <16 x i16>, <16 x i16>* %16879, align 2, !tbaa !399
  %16881 = getelementptr inbounds i16, i16* %16878, i64 16
  %16882 = bitcast i16* %16881 to <16 x i16>*
  %16883 = load <16 x i16>, <16 x i16>* %16882, align 2, !tbaa !399
  %16884 = shufflevector <16 x i16> %16880, <16 x i16> %16883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16885 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16884, <32 x i16> %16876, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16886 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16868, <32 x i16> %16885, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16887 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16886, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16888 = shufflevector <32 x i16> %16887, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16889 = add nsw i64 %16726, %.pre-phi3474
  %16890 = getelementptr inbounds i16, i16* %258, i64 %16889
  %16891 = bitcast i16* %16890 to <16 x i16>*
  store <16 x i16> %16888, <16 x i16>* %16891, align 2, !tbaa !401
  %16892 = shufflevector <32 x i16> %16887, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16893 = getelementptr inbounds i16, i16* %16890, i64 16
  %16894 = bitcast i16* %16893 to <16 x i16>*
  store <16 x i16> %16892, <16 x i16>* %16894, align 2, !tbaa !401
  %indvars.iv.next3304 = add nuw nsw i64 %indvars.iv3303, 1
  %16895 = icmp eq i64 %indvars.iv.next3304, %zext3305
  br i1 %16895, label %"end for blur_y.s0.x.x.rebased1777", label %"for blur_y.s0.x.x.rebased1776"

"for blur_y.s0.x.x.rebased1792":                  ; preds = %"for blur_y.s0.x.x.rebased1792.preheader", %"consume blur_x1803"
  %blur_y.s0.x.x.rebased1794 = phi i32 [ %16970, %"consume blur_x1803" ], [ 0, %"for blur_y.s0.x.x.rebased1792.preheader" ]
  %16896 = add nsw i32 %blur_y.s0.x.x.rebased1794, %t1582776
  %a4155 = shl nsw i32 %16896, 5
  %16897 = icmp sgt i32 %t1603, %a4155
  %blur_y.s0.x.v0.base.s1795 = select i1 %16897, i32 %a4155, i32 %t1603
  %16898 = icmp slt i32 %16896, 1
  %16899 = icmp sgt i32 %194, %a4155
  %16900 = or i1 %16898, %16899
  br i1 %16900, label %"produce blur_x1800", label %"consume blur_x1803"

"end for blur_y.s0.x.x.rebased1793":              ; preds = %"consume blur_x1803", %"end for blur_y.s0.x.x.rebased1777"
  br i1 %225, label %"produce blur_x1807", label %after_bb1804

"produce blur_x1800":                             ; preds = %"for blur_y.s0.x.x.rebased1792"
  %16901 = icmp slt i32 %blur_y.s0.x.v0.base.s1795, %194
  %blur_x.s0.x.v1.base.s1801 = select i1 %16901, i32 %blur_y.s0.x.v0.base.s1795, i32 %194
  %t9971802 = add nsw i32 %442, %blur_x.s0.x.v1.base.s1801
  %16902 = sext i32 %t9971802 to i64
  %16903 = getelementptr inbounds i16, i16* %read_input784, i64 %16902
  %16904 = getelementptr inbounds i16, i16* %16903, i64 1
  %16905 = bitcast i16* %16904 to <16 x i16>*
  %16906 = load <16 x i16>, <16 x i16>* %16905, align 2, !tbaa !396
  %16907 = getelementptr inbounds i16, i16* %16903, i64 17
  %16908 = bitcast i16* %16907 to <16 x i16>*
  %16909 = load <16 x i16>, <16 x i16>* %16908, align 2, !tbaa !396
  %16910 = shufflevector <16 x i16> %16906, <16 x i16> %16909, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16911 = getelementptr inbounds i16, i16* %16903, i64 2
  %16912 = bitcast i16* %16911 to <16 x i16>*
  %16913 = load <16 x i16>, <16 x i16>* %16912, align 2, !tbaa !396
  %16914 = getelementptr inbounds i16, i16* %16903, i64 18
  %16915 = bitcast i16* %16914 to <16 x i16>*
  %16916 = load <16 x i16>, <16 x i16>* %16915, align 2, !tbaa !396
  %16917 = shufflevector <16 x i16> %16913, <16 x i16> %16916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16918 = bitcast i16* %16903 to <16 x i16>*
  %16919 = load <16 x i16>, <16 x i16>* %16918, align 2, !tbaa !396
  %16920 = getelementptr inbounds i16, i16* %16903, i64 16
  %16921 = bitcast i16* %16920 to <16 x i16>*
  %16922 = load <16 x i16>, <16 x i16>* %16921, align 2, !tbaa !396
  %16923 = shufflevector <16 x i16> %16919, <16 x i16> %16922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16924 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16923, <32 x i16> %16917, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16925 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16910, <32 x i16> %16924, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16926 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16925, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16927 = shufflevector <32 x i16> %16926, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16928 = sext i32 %blur_x.s0.x.v1.base.s1801 to i64
  %16929 = add nsw i64 %16928, %16814
  %16930 = getelementptr inbounds i16, i16* %blur_x841, i64 %16929
  %16931 = bitcast i16* %16930 to <16 x i16>*
  store <16 x i16> %16927, <16 x i16>* %16931, align 2, !tbaa !399
  %16932 = shufflevector <32 x i16> %16926, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16933 = getelementptr inbounds i16, i16* %16930, i64 16
  %16934 = bitcast i16* %16933 to <16 x i16>*
  store <16 x i16> %16932, <16 x i16>* %16934, align 2, !tbaa !399
  br label %"consume blur_x1803"

"consume blur_x1803":                             ; preds = %"for blur_y.s0.x.x.rebased1792", %"produce blur_x1800"
  %16935 = sext i32 %blur_y.s0.x.v0.base.s1795 to i64
  %16936 = add nsw i64 %16817, %16935
  %16937 = getelementptr inbounds i16, i16* %blur_x841, i64 %16936
  %16938 = bitcast i16* %16937 to <16 x i16>*
  %16939 = load <16 x i16>, <16 x i16>* %16938, align 2, !tbaa !399
  %16940 = getelementptr inbounds i16, i16* %16937, i64 16
  %16941 = bitcast i16* %16940 to <16 x i16>*
  %16942 = load <16 x i16>, <16 x i16>* %16941, align 2, !tbaa !399
  %16943 = shufflevector <16 x i16> %16939, <16 x i16> %16942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16944 = add nsw i64 %16820, %16935
  %16945 = getelementptr inbounds i16, i16* %blur_x841, i64 %16944
  %16946 = bitcast i16* %16945 to <16 x i16>*
  %16947 = load <16 x i16>, <16 x i16>* %16946, align 2, !tbaa !399
  %16948 = getelementptr inbounds i16, i16* %16945, i64 16
  %16949 = bitcast i16* %16948 to <16 x i16>*
  %16950 = load <16 x i16>, <16 x i16>* %16949, align 2, !tbaa !399
  %16951 = shufflevector <16 x i16> %16947, <16 x i16> %16950, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16952 = add nsw i64 %16823, %16935
  %16953 = getelementptr inbounds i16, i16* %blur_x841, i64 %16952
  %16954 = bitcast i16* %16953 to <16 x i16>*
  %16955 = load <16 x i16>, <16 x i16>* %16954, align 2, !tbaa !399
  %16956 = getelementptr inbounds i16, i16* %16953, i64 16
  %16957 = bitcast i16* %16956 to <16 x i16>*
  %16958 = load <16 x i16>, <16 x i16>* %16957, align 2, !tbaa !399
  %16959 = shufflevector <16 x i16> %16955, <16 x i16> %16958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16960 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16959, <32 x i16> %16951, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16961 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16943, <32 x i16> %16960, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %16962 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %16961, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %16963 = shufflevector <32 x i16> %16962, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16964 = add nsw i64 %16827, %16935
  %16965 = getelementptr inbounds i16, i16* %258, i64 %16964
  %16966 = bitcast i16* %16965 to <16 x i16>*
  store <16 x i16> %16963, <16 x i16>* %16966, align 2, !tbaa !401
  %16967 = shufflevector <32 x i16> %16962, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16968 = getelementptr inbounds i16, i16* %16965, i64 16
  %16969 = bitcast i16* %16968 to <16 x i16>*
  store <16 x i16> %16967, <16 x i16>* %16969, align 2, !tbaa !401
  %16970 = add nuw nsw i32 %blur_y.s0.x.x.rebased1794, 1
  %.not2478 = icmp eq i32 %16970, %t1639860
  br i1 %.not2478, label %"end for blur_y.s0.x.x.rebased1793", label %"for blur_y.s0.x.x.rebased1792"

after_bb1804:                                     ; preds = %"end for blur_y.s0.x.x.rebased1793", %"produce blur_x1807"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1819.preheader", label %"end for blur_y.s0.x.x.rebased1820", !prof !386

"for blur_y.s0.x.x.rebased1819.preheader":        ; preds = %after_bb1804
  %16971 = sext i32 %t1666955 to i64
  %16972 = zext i32 %.pre-phi3428 to i64
  %16973 = mul nsw i64 %16972, %322
  %16974 = sub nsw i64 %16973, %293
  %16975 = zext i32 %.pre-phi3434 to i64
  %16976 = mul nsw i64 %16975, %322
  %16977 = sub nsw i64 %16976, %293
  %16978 = zext i32 %.pre-phi3424 to i64
  %16979 = mul nsw i64 %16978, %322
  %16980 = sub nsw i64 %16979, %293
  %16981 = sext i32 %a365 to i64
  %16982 = add nsw i64 %16981, 21
  %16983 = mul nsw i64 %16982, %319
  %16984 = add nsw i64 %16983, %323
  br label %"for blur_y.s0.x.x.rebased1819"

"produce blur_x1807":                             ; preds = %"end for blur_y.s0.x.x.rebased1793"
  %16985 = getelementptr inbounds i16, i16* %read_input784, i64 %446
  %16986 = getelementptr inbounds i16, i16* %16985, i64 -31
  %16987 = bitcast i16* %16986 to <16 x i16>*
  %16988 = load <16 x i16>, <16 x i16>* %16987, align 2, !tbaa !396
  %16989 = getelementptr inbounds i16, i16* %16985, i64 -15
  %16990 = bitcast i16* %16989 to <16 x i16>*
  %16991 = load <16 x i16>, <16 x i16>* %16990, align 2, !tbaa !396
  %16992 = shufflevector <16 x i16> %16988, <16 x i16> %16991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16993 = getelementptr inbounds i16, i16* %16985, i64 -30
  %16994 = bitcast i16* %16993 to <16 x i16>*
  %16995 = load <16 x i16>, <16 x i16>* %16994, align 2, !tbaa !396
  %16996 = getelementptr inbounds i16, i16* %16985, i64 -14
  %16997 = bitcast i16* %16996 to <16 x i16>*
  %16998 = load <16 x i16>, <16 x i16>* %16997, align 2, !tbaa !396
  %16999 = shufflevector <16 x i16> %16995, <16 x i16> %16998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17000 = getelementptr inbounds i16, i16* %16985, i64 -32
  %17001 = bitcast i16* %17000 to <16 x i16>*
  %17002 = load <16 x i16>, <16 x i16>* %17001, align 2, !tbaa !396
  %17003 = getelementptr inbounds i16, i16* %16985, i64 -16
  %17004 = bitcast i16* %17003 to <16 x i16>*
  %17005 = load <16 x i16>, <16 x i16>* %17004, align 2, !tbaa !396
  %17006 = shufflevector <16 x i16> %17002, <16 x i16> %17005, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17007 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17006, <32 x i16> %16999, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17008 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %16992, <32 x i16> %17007, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17009 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17008, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17010 = shufflevector <32 x i16> %17009, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17011 = zext i32 %.pre-phi3434 to i64
  %17012 = mul nsw i64 %294, %17011
  %17013 = add nsw i64 %296, %17012
  %17014 = getelementptr inbounds i16, i16* %blur_x841, i64 %17013
  %17015 = getelementptr inbounds i16, i16* %17014, i64 -32
  %17016 = bitcast i16* %17015 to <16 x i16>*
  store <16 x i16> %17010, <16 x i16>* %17016, align 2, !tbaa !399
  %17017 = shufflevector <32 x i16> %17009, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17018 = getelementptr inbounds i16, i16* %17014, i64 -16
  %17019 = bitcast i16* %17018 to <16 x i16>*
  store <16 x i16> %17017, <16 x i16>* %17019, align 2, !tbaa !399
  %17020 = zext i32 %.pre-phi3428 to i64
  %17021 = mul nsw i64 %17020, %318
  %17022 = add nsw i64 %17021, %291
  %17023 = getelementptr inbounds i16, i16* %blur_x841, i64 %17022
  %17024 = getelementptr inbounds i16, i16* %17023, i64 -32
  %17025 = bitcast i16* %17024 to <16 x i16>*
  %17026 = load <16 x i16>, <16 x i16>* %17025, align 2, !tbaa !399
  %17027 = getelementptr inbounds i16, i16* %17023, i64 -16
  %17028 = bitcast i16* %17027 to <16 x i16>*
  %17029 = load <16 x i16>, <16 x i16>* %17028, align 2, !tbaa !399
  %17030 = shufflevector <16 x i16> %17026, <16 x i16> %17029, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17031 = mul nsw i64 %17011, %318
  %17032 = add nsw i64 %17031, %291
  %17033 = getelementptr inbounds i16, i16* %blur_x841, i64 %17032
  %17034 = getelementptr inbounds i16, i16* %17033, i64 -32
  %17035 = bitcast i16* %17034 to <16 x i16>*
  %17036 = load <16 x i16>, <16 x i16>* %17035, align 2, !tbaa !399
  %17037 = getelementptr inbounds i16, i16* %17033, i64 -16
  %17038 = bitcast i16* %17037 to <16 x i16>*
  %17039 = load <16 x i16>, <16 x i16>* %17038, align 2, !tbaa !399
  %17040 = shufflevector <16 x i16> %17036, <16 x i16> %17039, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17041 = zext i32 %.pre-phi3424 to i64
  %17042 = mul nsw i64 %17041, %318
  %17043 = add nsw i64 %17042, %291
  %17044 = getelementptr inbounds i16, i16* %blur_x841, i64 %17043
  %17045 = getelementptr inbounds i16, i16* %17044, i64 -32
  %17046 = bitcast i16* %17045 to <16 x i16>*
  %17047 = load <16 x i16>, <16 x i16>* %17046, align 2, !tbaa !399
  %17048 = getelementptr inbounds i16, i16* %17044, i64 -16
  %17049 = bitcast i16* %17048 to <16 x i16>*
  %17050 = load <16 x i16>, <16 x i16>* %17049, align 2, !tbaa !399
  %17051 = shufflevector <16 x i16> %17047, <16 x i16> %17050, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17052 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17051, <32 x i16> %17040, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17053 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17030, <32 x i16> %17052, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17054 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17053, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17055 = shufflevector <32 x i16> %17054, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17056 = sext i32 %a365 to i64
  %17057 = add nsw i64 %17056, 21
  %17058 = mul nsw i64 %17057, %319
  %17059 = add nsw i64 %321, %17058
  %17060 = getelementptr inbounds i16, i16* %258, i64 %17059
  %17061 = getelementptr inbounds i16, i16* %17060, i64 -32
  %17062 = bitcast i16* %17061 to <16 x i16>*
  store <16 x i16> %17055, <16 x i16>* %17062, align 2, !tbaa !401
  %17063 = shufflevector <32 x i16> %17054, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17064 = getelementptr inbounds i16, i16* %17060, i64 -16
  %17065 = bitcast i16* %17064 to <16 x i16>*
  store <16 x i16> %17063, <16 x i16>* %17065, align 2, !tbaa !401
  br label %after_bb1804

"for blur_y.s0.x.x.rebased1819":                  ; preds = %"for blur_y.s0.x.x.rebased1819.preheader", %"consume blur_x1827"
  %indvars.iv3306 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1819.preheader" ], [ %indvars.iv.next3307, %"consume blur_x1827" ]
  %17066 = add nsw i64 %indvars.iv3306, %298
  %17067 = icmp slt i64 %17066, 1
  %17068 = trunc i64 %17066 to i32
  %17069 = shl nsw i32 %17068, 5
  %17070 = icmp sgt i32 %194, %17069
  %17071 = or i1 %17067, %17070
  br i1 %17071, label %"produce blur_x1825", label %"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge"

"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1819"
  %.pre3475 = shl nsw i64 %17066, 5
  br label %"consume blur_x1827"

"end for blur_y.s0.x.x.rebased1820":              ; preds = %"consume blur_x1827", %after_bb1804
  br i1 %299, label %"for blur_y.s0.x.x.rebased1835.preheader", label %"end for blur_y.s0.x.x.rebased1836", !prof !386

"for blur_y.s0.x.x.rebased1835.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1820"
  %17072 = sext i32 %t1666955 to i64
  %17073 = zext i32 %.pre-phi3428 to i64
  %17074 = mul nsw i64 %17073, %322
  %17075 = sub nsw i64 %17074, %293
  %17076 = zext i32 %.pre-phi3434 to i64
  %17077 = mul nsw i64 %17076, %322
  %17078 = sub nsw i64 %17077, %293
  %17079 = zext i32 %.pre-phi3424 to i64
  %17080 = mul nsw i64 %17079, %322
  %17081 = sub nsw i64 %17080, %293
  %17082 = sext i32 %a365 to i64
  %17083 = add nsw i64 %17082, 21
  %17084 = mul nsw i64 %17083, %319
  %17085 = add nsw i64 %17084, %323
  br label %"for blur_y.s0.x.x.rebased1835"

"produce blur_x1825":                             ; preds = %"for blur_y.s0.x.x.rebased1819"
  %t10081826 = add nsw i32 %448, %17069
  %17086 = sext i32 %t10081826 to i64
  %17087 = getelementptr inbounds i16, i16* %read_input784, i64 %17086
  %17088 = getelementptr inbounds i16, i16* %17087, i64 1
  %17089 = bitcast i16* %17088 to <16 x i16>*
  %17090 = load <16 x i16>, <16 x i16>* %17089, align 2, !tbaa !396
  %17091 = getelementptr inbounds i16, i16* %17087, i64 17
  %17092 = bitcast i16* %17091 to <16 x i16>*
  %17093 = load <16 x i16>, <16 x i16>* %17092, align 2, !tbaa !396
  %17094 = shufflevector <16 x i16> %17090, <16 x i16> %17093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17095 = getelementptr inbounds i16, i16* %17087, i64 2
  %17096 = bitcast i16* %17095 to <16 x i16>*
  %17097 = load <16 x i16>, <16 x i16>* %17096, align 2, !tbaa !396
  %17098 = getelementptr inbounds i16, i16* %17087, i64 18
  %17099 = bitcast i16* %17098 to <16 x i16>*
  %17100 = load <16 x i16>, <16 x i16>* %17099, align 2, !tbaa !396
  %17101 = shufflevector <16 x i16> %17097, <16 x i16> %17100, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17102 = bitcast i16* %17087 to <16 x i16>*
  %17103 = load <16 x i16>, <16 x i16>* %17102, align 2, !tbaa !396
  %17104 = getelementptr inbounds i16, i16* %17087, i64 16
  %17105 = bitcast i16* %17104 to <16 x i16>*
  %17106 = load <16 x i16>, <16 x i16>* %17105, align 2, !tbaa !396
  %17107 = shufflevector <16 x i16> %17103, <16 x i16> %17106, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17108 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17107, <32 x i16> %17101, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17109 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17094, <32 x i16> %17108, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17110 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17109, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17111 = shufflevector <32 x i16> %17110, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17112 = shl nsw i64 %17066, 5
  %17113 = add nsw i64 %17112, %16971
  %17114 = getelementptr inbounds i16, i16* %blur_x841, i64 %17113
  %17115 = bitcast i16* %17114 to <16 x i16>*
  store <16 x i16> %17111, <16 x i16>* %17115, align 2, !tbaa !399
  %17116 = shufflevector <32 x i16> %17110, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17117 = getelementptr inbounds i16, i16* %17114, i64 16
  %17118 = bitcast i16* %17117 to <16 x i16>*
  store <16 x i16> %17116, <16 x i16>* %17118, align 2, !tbaa !399
  br label %"consume blur_x1827"

"consume blur_x1827":                             ; preds = %"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge", %"produce blur_x1825"
  %.pre-phi3476 = phi i64 [ %.pre3475, %"for blur_y.s0.x.x.rebased1819.consume blur_x1827_crit_edge" ], [ %17112, %"produce blur_x1825" ]
  %17119 = add nsw i64 %16974, %.pre-phi3476
  %17120 = getelementptr inbounds i16, i16* %blur_x841, i64 %17119
  %17121 = bitcast i16* %17120 to <16 x i16>*
  %17122 = load <16 x i16>, <16 x i16>* %17121, align 2, !tbaa !399
  %17123 = getelementptr inbounds i16, i16* %17120, i64 16
  %17124 = bitcast i16* %17123 to <16 x i16>*
  %17125 = load <16 x i16>, <16 x i16>* %17124, align 2, !tbaa !399
  %17126 = shufflevector <16 x i16> %17122, <16 x i16> %17125, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17127 = add nsw i64 %16977, %.pre-phi3476
  %17128 = getelementptr inbounds i16, i16* %blur_x841, i64 %17127
  %17129 = bitcast i16* %17128 to <16 x i16>*
  %17130 = load <16 x i16>, <16 x i16>* %17129, align 2, !tbaa !399
  %17131 = getelementptr inbounds i16, i16* %17128, i64 16
  %17132 = bitcast i16* %17131 to <16 x i16>*
  %17133 = load <16 x i16>, <16 x i16>* %17132, align 2, !tbaa !399
  %17134 = shufflevector <16 x i16> %17130, <16 x i16> %17133, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17135 = add nsw i64 %16980, %.pre-phi3476
  %17136 = getelementptr inbounds i16, i16* %blur_x841, i64 %17135
  %17137 = bitcast i16* %17136 to <16 x i16>*
  %17138 = load <16 x i16>, <16 x i16>* %17137, align 2, !tbaa !399
  %17139 = getelementptr inbounds i16, i16* %17136, i64 16
  %17140 = bitcast i16* %17139 to <16 x i16>*
  %17141 = load <16 x i16>, <16 x i16>* %17140, align 2, !tbaa !399
  %17142 = shufflevector <16 x i16> %17138, <16 x i16> %17141, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17143 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17142, <32 x i16> %17134, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17144 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17126, <32 x i16> %17143, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17145 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17144, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17146 = shufflevector <32 x i16> %17145, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17147 = add nsw i64 %16984, %.pre-phi3476
  %17148 = getelementptr inbounds i16, i16* %258, i64 %17147
  %17149 = bitcast i16* %17148 to <16 x i16>*
  store <16 x i16> %17146, <16 x i16>* %17149, align 2, !tbaa !401
  %17150 = shufflevector <32 x i16> %17145, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17151 = getelementptr inbounds i16, i16* %17148, i64 16
  %17152 = bitcast i16* %17151 to <16 x i16>*
  store <16 x i16> %17150, <16 x i16>* %17152, align 2, !tbaa !401
  %indvars.iv.next3307 = add nuw nsw i64 %indvars.iv3306, 1
  %17153 = icmp eq i64 %indvars.iv.next3307, %zext3308
  br i1 %17153, label %"end for blur_y.s0.x.x.rebased1820", label %"for blur_y.s0.x.x.rebased1819"

"for blur_y.s0.x.x.rebased1835":                  ; preds = %"for blur_y.s0.x.x.rebased1835.preheader", %"consume blur_x1846"
  %blur_y.s0.x.x.rebased1837 = phi i32 [ %17228, %"consume blur_x1846" ], [ 0, %"for blur_y.s0.x.x.rebased1835.preheader" ]
  %17154 = add nsw i32 %blur_y.s0.x.x.rebased1837, %t1582776
  %a4312 = shl nsw i32 %17154, 5
  %17155 = icmp sgt i32 %t1603, %a4312
  %blur_y.s0.x.v0.base.s1838 = select i1 %17155, i32 %a4312, i32 %t1603
  %17156 = icmp slt i32 %17154, 1
  %17157 = icmp sgt i32 %194, %a4312
  %17158 = or i1 %17156, %17157
  br i1 %17158, label %"produce blur_x1843", label %"consume blur_x1846"

"end for blur_y.s0.x.x.rebased1836":              ; preds = %"consume blur_x1846", %"end for blur_y.s0.x.x.rebased1820"
  br i1 %225, label %"produce blur_x1850", label %after_bb1847

"produce blur_x1843":                             ; preds = %"for blur_y.s0.x.x.rebased1835"
  %17159 = icmp slt i32 %blur_y.s0.x.v0.base.s1838, %194
  %blur_x.s0.x.v1.base.s1844 = select i1 %17159, i32 %blur_y.s0.x.v0.base.s1838, i32 %194
  %t10131845 = add nsw i32 %448, %blur_x.s0.x.v1.base.s1844
  %17160 = sext i32 %t10131845 to i64
  %17161 = getelementptr inbounds i16, i16* %read_input784, i64 %17160
  %17162 = getelementptr inbounds i16, i16* %17161, i64 1
  %17163 = bitcast i16* %17162 to <16 x i16>*
  %17164 = load <16 x i16>, <16 x i16>* %17163, align 2, !tbaa !396
  %17165 = getelementptr inbounds i16, i16* %17161, i64 17
  %17166 = bitcast i16* %17165 to <16 x i16>*
  %17167 = load <16 x i16>, <16 x i16>* %17166, align 2, !tbaa !396
  %17168 = shufflevector <16 x i16> %17164, <16 x i16> %17167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17169 = getelementptr inbounds i16, i16* %17161, i64 2
  %17170 = bitcast i16* %17169 to <16 x i16>*
  %17171 = load <16 x i16>, <16 x i16>* %17170, align 2, !tbaa !396
  %17172 = getelementptr inbounds i16, i16* %17161, i64 18
  %17173 = bitcast i16* %17172 to <16 x i16>*
  %17174 = load <16 x i16>, <16 x i16>* %17173, align 2, !tbaa !396
  %17175 = shufflevector <16 x i16> %17171, <16 x i16> %17174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17176 = bitcast i16* %17161 to <16 x i16>*
  %17177 = load <16 x i16>, <16 x i16>* %17176, align 2, !tbaa !396
  %17178 = getelementptr inbounds i16, i16* %17161, i64 16
  %17179 = bitcast i16* %17178 to <16 x i16>*
  %17180 = load <16 x i16>, <16 x i16>* %17179, align 2, !tbaa !396
  %17181 = shufflevector <16 x i16> %17177, <16 x i16> %17180, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17182 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17181, <32 x i16> %17175, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17183 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17168, <32 x i16> %17182, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17184 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17183, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17185 = shufflevector <32 x i16> %17184, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17186 = sext i32 %blur_x.s0.x.v1.base.s1844 to i64
  %17187 = add nsw i64 %17186, %17072
  %17188 = getelementptr inbounds i16, i16* %blur_x841, i64 %17187
  %17189 = bitcast i16* %17188 to <16 x i16>*
  store <16 x i16> %17185, <16 x i16>* %17189, align 2, !tbaa !399
  %17190 = shufflevector <32 x i16> %17184, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17191 = getelementptr inbounds i16, i16* %17188, i64 16
  %17192 = bitcast i16* %17191 to <16 x i16>*
  store <16 x i16> %17190, <16 x i16>* %17192, align 2, !tbaa !399
  br label %"consume blur_x1846"

"consume blur_x1846":                             ; preds = %"for blur_y.s0.x.x.rebased1835", %"produce blur_x1843"
  %17193 = sext i32 %blur_y.s0.x.v0.base.s1838 to i64
  %17194 = add nsw i64 %17075, %17193
  %17195 = getelementptr inbounds i16, i16* %blur_x841, i64 %17194
  %17196 = bitcast i16* %17195 to <16 x i16>*
  %17197 = load <16 x i16>, <16 x i16>* %17196, align 2, !tbaa !399
  %17198 = getelementptr inbounds i16, i16* %17195, i64 16
  %17199 = bitcast i16* %17198 to <16 x i16>*
  %17200 = load <16 x i16>, <16 x i16>* %17199, align 2, !tbaa !399
  %17201 = shufflevector <16 x i16> %17197, <16 x i16> %17200, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17202 = add nsw i64 %17078, %17193
  %17203 = getelementptr inbounds i16, i16* %blur_x841, i64 %17202
  %17204 = bitcast i16* %17203 to <16 x i16>*
  %17205 = load <16 x i16>, <16 x i16>* %17204, align 2, !tbaa !399
  %17206 = getelementptr inbounds i16, i16* %17203, i64 16
  %17207 = bitcast i16* %17206 to <16 x i16>*
  %17208 = load <16 x i16>, <16 x i16>* %17207, align 2, !tbaa !399
  %17209 = shufflevector <16 x i16> %17205, <16 x i16> %17208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17210 = add nsw i64 %17081, %17193
  %17211 = getelementptr inbounds i16, i16* %blur_x841, i64 %17210
  %17212 = bitcast i16* %17211 to <16 x i16>*
  %17213 = load <16 x i16>, <16 x i16>* %17212, align 2, !tbaa !399
  %17214 = getelementptr inbounds i16, i16* %17211, i64 16
  %17215 = bitcast i16* %17214 to <16 x i16>*
  %17216 = load <16 x i16>, <16 x i16>* %17215, align 2, !tbaa !399
  %17217 = shufflevector <16 x i16> %17213, <16 x i16> %17216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17218 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17217, <32 x i16> %17209, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17219 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17201, <32 x i16> %17218, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17220 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17219, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17221 = shufflevector <32 x i16> %17220, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17222 = add nsw i64 %17085, %17193
  %17223 = getelementptr inbounds i16, i16* %258, i64 %17222
  %17224 = bitcast i16* %17223 to <16 x i16>*
  store <16 x i16> %17221, <16 x i16>* %17224, align 2, !tbaa !401
  %17225 = shufflevector <32 x i16> %17220, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17226 = getelementptr inbounds i16, i16* %17223, i64 16
  %17227 = bitcast i16* %17226 to <16 x i16>*
  store <16 x i16> %17225, <16 x i16>* %17227, align 2, !tbaa !401
  %17228 = add nuw nsw i32 %blur_y.s0.x.x.rebased1837, 1
  %.not2474 = icmp eq i32 %17228, %t1639860
  br i1 %.not2474, label %"end for blur_y.s0.x.x.rebased1836", label %"for blur_y.s0.x.x.rebased1835"

after_bb1847:                                     ; preds = %"end for blur_y.s0.x.x.rebased1836", %"produce blur_x1850"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1862.preheader", label %"end for blur_y.s0.x.x.rebased1863", !prof !386

"for blur_y.s0.x.x.rebased1862.preheader":        ; preds = %after_bb1847
  %17229 = sext i32 %t1638848 to i64
  %17230 = zext i32 %.pre-phi3434 to i64
  %17231 = mul nsw i64 %17230, %322
  %17232 = sub nsw i64 %17231, %293
  %17233 = zext i32 %.pre-phi3420 to i64
  %17234 = mul nsw i64 %17233, %322
  %17235 = sub nsw i64 %17234, %293
  %17236 = zext i32 %.pre-phi3428 to i64
  %17237 = mul nsw i64 %17236, %322
  %17238 = sub nsw i64 %17237, %293
  %17239 = sext i32 %a365 to i64
  %17240 = add nsw i64 %17239, 22
  %17241 = mul nsw i64 %17240, %319
  %17242 = add nsw i64 %17241, %323
  br label %"for blur_y.s0.x.x.rebased1862"

"produce blur_x1850":                             ; preds = %"end for blur_y.s0.x.x.rebased1836"
  %17243 = getelementptr inbounds i16, i16* %read_input784, i64 %452
  %17244 = getelementptr inbounds i16, i16* %17243, i64 -31
  %17245 = bitcast i16* %17244 to <16 x i16>*
  %17246 = load <16 x i16>, <16 x i16>* %17245, align 2, !tbaa !396
  %17247 = getelementptr inbounds i16, i16* %17243, i64 -15
  %17248 = bitcast i16* %17247 to <16 x i16>*
  %17249 = load <16 x i16>, <16 x i16>* %17248, align 2, !tbaa !396
  %17250 = shufflevector <16 x i16> %17246, <16 x i16> %17249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17251 = getelementptr inbounds i16, i16* %17243, i64 -30
  %17252 = bitcast i16* %17251 to <16 x i16>*
  %17253 = load <16 x i16>, <16 x i16>* %17252, align 2, !tbaa !396
  %17254 = getelementptr inbounds i16, i16* %17243, i64 -14
  %17255 = bitcast i16* %17254 to <16 x i16>*
  %17256 = load <16 x i16>, <16 x i16>* %17255, align 2, !tbaa !396
  %17257 = shufflevector <16 x i16> %17253, <16 x i16> %17256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17258 = getelementptr inbounds i16, i16* %17243, i64 -32
  %17259 = bitcast i16* %17258 to <16 x i16>*
  %17260 = load <16 x i16>, <16 x i16>* %17259, align 2, !tbaa !396
  %17261 = getelementptr inbounds i16, i16* %17243, i64 -16
  %17262 = bitcast i16* %17261 to <16 x i16>*
  %17263 = load <16 x i16>, <16 x i16>* %17262, align 2, !tbaa !396
  %17264 = shufflevector <16 x i16> %17260, <16 x i16> %17263, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17265 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17264, <32 x i16> %17257, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17266 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17250, <32 x i16> %17265, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17267 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17266, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17268 = shufflevector <32 x i16> %17267, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17269 = zext i32 %.pre-phi3420 to i64
  %17270 = mul nsw i64 %294, %17269
  %17271 = add nsw i64 %296, %17270
  %17272 = getelementptr inbounds i16, i16* %blur_x841, i64 %17271
  %17273 = getelementptr inbounds i16, i16* %17272, i64 -32
  %17274 = bitcast i16* %17273 to <16 x i16>*
  store <16 x i16> %17268, <16 x i16>* %17274, align 2, !tbaa !399
  %17275 = shufflevector <32 x i16> %17267, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17276 = getelementptr inbounds i16, i16* %17272, i64 -16
  %17277 = bitcast i16* %17276 to <16 x i16>*
  store <16 x i16> %17275, <16 x i16>* %17277, align 2, !tbaa !399
  %17278 = zext i32 %.pre-phi3434 to i64
  %17279 = mul nsw i64 %17278, %318
  %17280 = add nsw i64 %17279, %291
  %17281 = getelementptr inbounds i16, i16* %blur_x841, i64 %17280
  %17282 = getelementptr inbounds i16, i16* %17281, i64 -32
  %17283 = bitcast i16* %17282 to <16 x i16>*
  %17284 = load <16 x i16>, <16 x i16>* %17283, align 2, !tbaa !399
  %17285 = getelementptr inbounds i16, i16* %17281, i64 -16
  %17286 = bitcast i16* %17285 to <16 x i16>*
  %17287 = load <16 x i16>, <16 x i16>* %17286, align 2, !tbaa !399
  %17288 = shufflevector <16 x i16> %17284, <16 x i16> %17287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17289 = mul nsw i64 %17269, %318
  %17290 = add nsw i64 %17289, %291
  %17291 = getelementptr inbounds i16, i16* %blur_x841, i64 %17290
  %17292 = getelementptr inbounds i16, i16* %17291, i64 -32
  %17293 = bitcast i16* %17292 to <16 x i16>*
  %17294 = load <16 x i16>, <16 x i16>* %17293, align 2, !tbaa !399
  %17295 = getelementptr inbounds i16, i16* %17291, i64 -16
  %17296 = bitcast i16* %17295 to <16 x i16>*
  %17297 = load <16 x i16>, <16 x i16>* %17296, align 2, !tbaa !399
  %17298 = shufflevector <16 x i16> %17294, <16 x i16> %17297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17299 = zext i32 %.pre-phi3428 to i64
  %17300 = mul nsw i64 %17299, %318
  %17301 = add nsw i64 %17300, %291
  %17302 = getelementptr inbounds i16, i16* %blur_x841, i64 %17301
  %17303 = getelementptr inbounds i16, i16* %17302, i64 -32
  %17304 = bitcast i16* %17303 to <16 x i16>*
  %17305 = load <16 x i16>, <16 x i16>* %17304, align 2, !tbaa !399
  %17306 = getelementptr inbounds i16, i16* %17302, i64 -16
  %17307 = bitcast i16* %17306 to <16 x i16>*
  %17308 = load <16 x i16>, <16 x i16>* %17307, align 2, !tbaa !399
  %17309 = shufflevector <16 x i16> %17305, <16 x i16> %17308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17310 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17309, <32 x i16> %17298, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17311 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17288, <32 x i16> %17310, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17312 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17311, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17313 = shufflevector <32 x i16> %17312, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17314 = sext i32 %a365 to i64
  %17315 = add nsw i64 %17314, 22
  %17316 = mul nsw i64 %17315, %319
  %17317 = add nsw i64 %321, %17316
  %17318 = getelementptr inbounds i16, i16* %258, i64 %17317
  %17319 = getelementptr inbounds i16, i16* %17318, i64 -32
  %17320 = bitcast i16* %17319 to <16 x i16>*
  store <16 x i16> %17313, <16 x i16>* %17320, align 2, !tbaa !401
  %17321 = shufflevector <32 x i16> %17312, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17322 = getelementptr inbounds i16, i16* %17318, i64 -16
  %17323 = bitcast i16* %17322 to <16 x i16>*
  store <16 x i16> %17321, <16 x i16>* %17323, align 2, !tbaa !401
  br label %after_bb1847

"for blur_y.s0.x.x.rebased1862":                  ; preds = %"for blur_y.s0.x.x.rebased1862.preheader", %"consume blur_x1870"
  %indvars.iv3309 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1862.preheader" ], [ %indvars.iv.next3310, %"consume blur_x1870" ]
  %17324 = add nsw i64 %indvars.iv3309, %298
  %17325 = icmp slt i64 %17324, 1
  %17326 = trunc i64 %17324 to i32
  %17327 = shl nsw i32 %17326, 5
  %17328 = icmp sgt i32 %194, %17327
  %17329 = or i1 %17325, %17328
  br i1 %17329, label %"produce blur_x1868", label %"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge"

"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1862"
  %.pre3477 = shl nsw i64 %17324, 5
  br label %"consume blur_x1870"

"end for blur_y.s0.x.x.rebased1863":              ; preds = %"consume blur_x1870", %after_bb1847
  br i1 %299, label %"for blur_y.s0.x.x.rebased1878.preheader", label %"end for blur_y.s0.x.x.rebased1879", !prof !386

"for blur_y.s0.x.x.rebased1878.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1863"
  %17330 = sext i32 %t1638848 to i64
  %17331 = zext i32 %.pre-phi3434 to i64
  %17332 = mul nsw i64 %17331, %322
  %17333 = sub nsw i64 %17332, %293
  %17334 = zext i32 %.pre-phi3420 to i64
  %17335 = mul nsw i64 %17334, %322
  %17336 = sub nsw i64 %17335, %293
  %17337 = zext i32 %.pre-phi3428 to i64
  %17338 = mul nsw i64 %17337, %322
  %17339 = sub nsw i64 %17338, %293
  %17340 = sext i32 %a365 to i64
  %17341 = add nsw i64 %17340, 22
  %17342 = mul nsw i64 %17341, %319
  %17343 = add nsw i64 %17342, %323
  br label %"for blur_y.s0.x.x.rebased1878"

"produce blur_x1868":                             ; preds = %"for blur_y.s0.x.x.rebased1862"
  %t10241869 = add nsw i32 %454, %17327
  %17344 = sext i32 %t10241869 to i64
  %17345 = getelementptr inbounds i16, i16* %read_input784, i64 %17344
  %17346 = getelementptr inbounds i16, i16* %17345, i64 1
  %17347 = bitcast i16* %17346 to <16 x i16>*
  %17348 = load <16 x i16>, <16 x i16>* %17347, align 2, !tbaa !396
  %17349 = getelementptr inbounds i16, i16* %17345, i64 17
  %17350 = bitcast i16* %17349 to <16 x i16>*
  %17351 = load <16 x i16>, <16 x i16>* %17350, align 2, !tbaa !396
  %17352 = shufflevector <16 x i16> %17348, <16 x i16> %17351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17353 = getelementptr inbounds i16, i16* %17345, i64 2
  %17354 = bitcast i16* %17353 to <16 x i16>*
  %17355 = load <16 x i16>, <16 x i16>* %17354, align 2, !tbaa !396
  %17356 = getelementptr inbounds i16, i16* %17345, i64 18
  %17357 = bitcast i16* %17356 to <16 x i16>*
  %17358 = load <16 x i16>, <16 x i16>* %17357, align 2, !tbaa !396
  %17359 = shufflevector <16 x i16> %17355, <16 x i16> %17358, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17360 = bitcast i16* %17345 to <16 x i16>*
  %17361 = load <16 x i16>, <16 x i16>* %17360, align 2, !tbaa !396
  %17362 = getelementptr inbounds i16, i16* %17345, i64 16
  %17363 = bitcast i16* %17362 to <16 x i16>*
  %17364 = load <16 x i16>, <16 x i16>* %17363, align 2, !tbaa !396
  %17365 = shufflevector <16 x i16> %17361, <16 x i16> %17364, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17366 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17365, <32 x i16> %17359, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17367 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17352, <32 x i16> %17366, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17368 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17367, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17369 = shufflevector <32 x i16> %17368, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17370 = shl nsw i64 %17324, 5
  %17371 = add nsw i64 %17370, %17229
  %17372 = getelementptr inbounds i16, i16* %blur_x841, i64 %17371
  %17373 = bitcast i16* %17372 to <16 x i16>*
  store <16 x i16> %17369, <16 x i16>* %17373, align 2, !tbaa !399
  %17374 = shufflevector <32 x i16> %17368, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17375 = getelementptr inbounds i16, i16* %17372, i64 16
  %17376 = bitcast i16* %17375 to <16 x i16>*
  store <16 x i16> %17374, <16 x i16>* %17376, align 2, !tbaa !399
  br label %"consume blur_x1870"

"consume blur_x1870":                             ; preds = %"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge", %"produce blur_x1868"
  %.pre-phi3478 = phi i64 [ %.pre3477, %"for blur_y.s0.x.x.rebased1862.consume blur_x1870_crit_edge" ], [ %17370, %"produce blur_x1868" ]
  %17377 = add nsw i64 %17232, %.pre-phi3478
  %17378 = getelementptr inbounds i16, i16* %blur_x841, i64 %17377
  %17379 = bitcast i16* %17378 to <16 x i16>*
  %17380 = load <16 x i16>, <16 x i16>* %17379, align 2, !tbaa !399
  %17381 = getelementptr inbounds i16, i16* %17378, i64 16
  %17382 = bitcast i16* %17381 to <16 x i16>*
  %17383 = load <16 x i16>, <16 x i16>* %17382, align 2, !tbaa !399
  %17384 = shufflevector <16 x i16> %17380, <16 x i16> %17383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17385 = add nsw i64 %17235, %.pre-phi3478
  %17386 = getelementptr inbounds i16, i16* %blur_x841, i64 %17385
  %17387 = bitcast i16* %17386 to <16 x i16>*
  %17388 = load <16 x i16>, <16 x i16>* %17387, align 2, !tbaa !399
  %17389 = getelementptr inbounds i16, i16* %17386, i64 16
  %17390 = bitcast i16* %17389 to <16 x i16>*
  %17391 = load <16 x i16>, <16 x i16>* %17390, align 2, !tbaa !399
  %17392 = shufflevector <16 x i16> %17388, <16 x i16> %17391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17393 = add nsw i64 %17238, %.pre-phi3478
  %17394 = getelementptr inbounds i16, i16* %blur_x841, i64 %17393
  %17395 = bitcast i16* %17394 to <16 x i16>*
  %17396 = load <16 x i16>, <16 x i16>* %17395, align 2, !tbaa !399
  %17397 = getelementptr inbounds i16, i16* %17394, i64 16
  %17398 = bitcast i16* %17397 to <16 x i16>*
  %17399 = load <16 x i16>, <16 x i16>* %17398, align 2, !tbaa !399
  %17400 = shufflevector <16 x i16> %17396, <16 x i16> %17399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17401 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17400, <32 x i16> %17392, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17402 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17384, <32 x i16> %17401, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17403 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17402, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17404 = shufflevector <32 x i16> %17403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17405 = add nsw i64 %17242, %.pre-phi3478
  %17406 = getelementptr inbounds i16, i16* %258, i64 %17405
  %17407 = bitcast i16* %17406 to <16 x i16>*
  store <16 x i16> %17404, <16 x i16>* %17407, align 2, !tbaa !401
  %17408 = shufflevector <32 x i16> %17403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17409 = getelementptr inbounds i16, i16* %17406, i64 16
  %17410 = bitcast i16* %17409 to <16 x i16>*
  store <16 x i16> %17408, <16 x i16>* %17410, align 2, !tbaa !401
  %indvars.iv.next3310 = add nuw nsw i64 %indvars.iv3309, 1
  %17411 = icmp eq i64 %indvars.iv.next3310, %zext3311
  br i1 %17411, label %"end for blur_y.s0.x.x.rebased1863", label %"for blur_y.s0.x.x.rebased1862"

"for blur_y.s0.x.x.rebased1878":                  ; preds = %"for blur_y.s0.x.x.rebased1878.preheader", %"consume blur_x1889"
  %blur_y.s0.x.x.rebased1880 = phi i32 [ %17486, %"consume blur_x1889" ], [ 0, %"for blur_y.s0.x.x.rebased1878.preheader" ]
  %17412 = add nsw i32 %blur_y.s0.x.x.rebased1880, %t1582776
  %a4469 = shl nsw i32 %17412, 5
  %17413 = icmp sgt i32 %t1603, %a4469
  %blur_y.s0.x.v0.base.s1881 = select i1 %17413, i32 %a4469, i32 %t1603
  %17414 = icmp slt i32 %17412, 1
  %17415 = icmp sgt i32 %194, %a4469
  %17416 = or i1 %17414, %17415
  br i1 %17416, label %"produce blur_x1886", label %"consume blur_x1889"

"end for blur_y.s0.x.x.rebased1879":              ; preds = %"consume blur_x1889", %"end for blur_y.s0.x.x.rebased1863"
  br i1 %225, label %"produce blur_x1893", label %after_bb1890

"produce blur_x1886":                             ; preds = %"for blur_y.s0.x.x.rebased1878"
  %17417 = icmp slt i32 %blur_y.s0.x.v0.base.s1881, %194
  %blur_x.s0.x.v1.base.s1887 = select i1 %17417, i32 %blur_y.s0.x.v0.base.s1881, i32 %194
  %t10291888 = add nsw i32 %454, %blur_x.s0.x.v1.base.s1887
  %17418 = sext i32 %t10291888 to i64
  %17419 = getelementptr inbounds i16, i16* %read_input784, i64 %17418
  %17420 = getelementptr inbounds i16, i16* %17419, i64 1
  %17421 = bitcast i16* %17420 to <16 x i16>*
  %17422 = load <16 x i16>, <16 x i16>* %17421, align 2, !tbaa !396
  %17423 = getelementptr inbounds i16, i16* %17419, i64 17
  %17424 = bitcast i16* %17423 to <16 x i16>*
  %17425 = load <16 x i16>, <16 x i16>* %17424, align 2, !tbaa !396
  %17426 = shufflevector <16 x i16> %17422, <16 x i16> %17425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17427 = getelementptr inbounds i16, i16* %17419, i64 2
  %17428 = bitcast i16* %17427 to <16 x i16>*
  %17429 = load <16 x i16>, <16 x i16>* %17428, align 2, !tbaa !396
  %17430 = getelementptr inbounds i16, i16* %17419, i64 18
  %17431 = bitcast i16* %17430 to <16 x i16>*
  %17432 = load <16 x i16>, <16 x i16>* %17431, align 2, !tbaa !396
  %17433 = shufflevector <16 x i16> %17429, <16 x i16> %17432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17434 = bitcast i16* %17419 to <16 x i16>*
  %17435 = load <16 x i16>, <16 x i16>* %17434, align 2, !tbaa !396
  %17436 = getelementptr inbounds i16, i16* %17419, i64 16
  %17437 = bitcast i16* %17436 to <16 x i16>*
  %17438 = load <16 x i16>, <16 x i16>* %17437, align 2, !tbaa !396
  %17439 = shufflevector <16 x i16> %17435, <16 x i16> %17438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17440 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17439, <32 x i16> %17433, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17441 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17426, <32 x i16> %17440, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17442 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17441, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17443 = shufflevector <32 x i16> %17442, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17444 = sext i32 %blur_x.s0.x.v1.base.s1887 to i64
  %17445 = add nsw i64 %17444, %17330
  %17446 = getelementptr inbounds i16, i16* %blur_x841, i64 %17445
  %17447 = bitcast i16* %17446 to <16 x i16>*
  store <16 x i16> %17443, <16 x i16>* %17447, align 2, !tbaa !399
  %17448 = shufflevector <32 x i16> %17442, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17449 = getelementptr inbounds i16, i16* %17446, i64 16
  %17450 = bitcast i16* %17449 to <16 x i16>*
  store <16 x i16> %17448, <16 x i16>* %17450, align 2, !tbaa !399
  br label %"consume blur_x1889"

"consume blur_x1889":                             ; preds = %"for blur_y.s0.x.x.rebased1878", %"produce blur_x1886"
  %17451 = sext i32 %blur_y.s0.x.v0.base.s1881 to i64
  %17452 = add nsw i64 %17333, %17451
  %17453 = getelementptr inbounds i16, i16* %blur_x841, i64 %17452
  %17454 = bitcast i16* %17453 to <16 x i16>*
  %17455 = load <16 x i16>, <16 x i16>* %17454, align 2, !tbaa !399
  %17456 = getelementptr inbounds i16, i16* %17453, i64 16
  %17457 = bitcast i16* %17456 to <16 x i16>*
  %17458 = load <16 x i16>, <16 x i16>* %17457, align 2, !tbaa !399
  %17459 = shufflevector <16 x i16> %17455, <16 x i16> %17458, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17460 = add nsw i64 %17336, %17451
  %17461 = getelementptr inbounds i16, i16* %blur_x841, i64 %17460
  %17462 = bitcast i16* %17461 to <16 x i16>*
  %17463 = load <16 x i16>, <16 x i16>* %17462, align 2, !tbaa !399
  %17464 = getelementptr inbounds i16, i16* %17461, i64 16
  %17465 = bitcast i16* %17464 to <16 x i16>*
  %17466 = load <16 x i16>, <16 x i16>* %17465, align 2, !tbaa !399
  %17467 = shufflevector <16 x i16> %17463, <16 x i16> %17466, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17468 = add nsw i64 %17339, %17451
  %17469 = getelementptr inbounds i16, i16* %blur_x841, i64 %17468
  %17470 = bitcast i16* %17469 to <16 x i16>*
  %17471 = load <16 x i16>, <16 x i16>* %17470, align 2, !tbaa !399
  %17472 = getelementptr inbounds i16, i16* %17469, i64 16
  %17473 = bitcast i16* %17472 to <16 x i16>*
  %17474 = load <16 x i16>, <16 x i16>* %17473, align 2, !tbaa !399
  %17475 = shufflevector <16 x i16> %17471, <16 x i16> %17474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17476 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17475, <32 x i16> %17467, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17477 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17459, <32 x i16> %17476, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17478 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17477, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17479 = shufflevector <32 x i16> %17478, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17480 = add nsw i64 %17343, %17451
  %17481 = getelementptr inbounds i16, i16* %258, i64 %17480
  %17482 = bitcast i16* %17481 to <16 x i16>*
  store <16 x i16> %17479, <16 x i16>* %17482, align 2, !tbaa !401
  %17483 = shufflevector <32 x i16> %17478, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17484 = getelementptr inbounds i16, i16* %17481, i64 16
  %17485 = bitcast i16* %17484 to <16 x i16>*
  store <16 x i16> %17483, <16 x i16>* %17485, align 2, !tbaa !401
  %17486 = add nuw nsw i32 %blur_y.s0.x.x.rebased1880, 1
  %.not2470 = icmp eq i32 %17486, %t1639860
  br i1 %.not2470, label %"end for blur_y.s0.x.x.rebased1879", label %"for blur_y.s0.x.x.rebased1878"

after_bb1890:                                     ; preds = %"end for blur_y.s0.x.x.rebased1879", %"produce blur_x1893"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1905.preheader", label %"end for blur_y.s0.x.x.rebased1906", !prof !386

"for blur_y.s0.x.x.rebased1905.preheader":        ; preds = %after_bb1890
  %17487 = sext i32 %t1644876 to i64
  %17488 = zext i32 %.pre-phi3420 to i64
  %17489 = mul nsw i64 %17488, %322
  %17490 = sub nsw i64 %17489, %293
  %17491 = zext i32 %.pre-phi3424 to i64
  %17492 = mul nsw i64 %17491, %322
  %17493 = sub nsw i64 %17492, %293
  %17494 = zext i32 %.pre-phi3434 to i64
  %17495 = mul nsw i64 %17494, %322
  %17496 = sub nsw i64 %17495, %293
  %17497 = sext i32 %a365 to i64
  %17498 = add nsw i64 %17497, 23
  %17499 = mul nsw i64 %17498, %319
  %17500 = add nsw i64 %17499, %323
  br label %"for blur_y.s0.x.x.rebased1905"

"produce blur_x1893":                             ; preds = %"end for blur_y.s0.x.x.rebased1879"
  %17501 = getelementptr inbounds i16, i16* %read_input784, i64 %458
  %17502 = getelementptr inbounds i16, i16* %17501, i64 -31
  %17503 = bitcast i16* %17502 to <16 x i16>*
  %17504 = load <16 x i16>, <16 x i16>* %17503, align 2, !tbaa !396
  %17505 = getelementptr inbounds i16, i16* %17501, i64 -15
  %17506 = bitcast i16* %17505 to <16 x i16>*
  %17507 = load <16 x i16>, <16 x i16>* %17506, align 2, !tbaa !396
  %17508 = shufflevector <16 x i16> %17504, <16 x i16> %17507, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17509 = getelementptr inbounds i16, i16* %17501, i64 -30
  %17510 = bitcast i16* %17509 to <16 x i16>*
  %17511 = load <16 x i16>, <16 x i16>* %17510, align 2, !tbaa !396
  %17512 = getelementptr inbounds i16, i16* %17501, i64 -14
  %17513 = bitcast i16* %17512 to <16 x i16>*
  %17514 = load <16 x i16>, <16 x i16>* %17513, align 2, !tbaa !396
  %17515 = shufflevector <16 x i16> %17511, <16 x i16> %17514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17516 = getelementptr inbounds i16, i16* %17501, i64 -32
  %17517 = bitcast i16* %17516 to <16 x i16>*
  %17518 = load <16 x i16>, <16 x i16>* %17517, align 2, !tbaa !396
  %17519 = getelementptr inbounds i16, i16* %17501, i64 -16
  %17520 = bitcast i16* %17519 to <16 x i16>*
  %17521 = load <16 x i16>, <16 x i16>* %17520, align 2, !tbaa !396
  %17522 = shufflevector <16 x i16> %17518, <16 x i16> %17521, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17523 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17522, <32 x i16> %17515, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17524 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17508, <32 x i16> %17523, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17525 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17524, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17526 = shufflevector <32 x i16> %17525, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17527 = zext i32 %.pre-phi3424 to i64
  %17528 = mul nsw i64 %294, %17527
  %17529 = add nsw i64 %296, %17528
  %17530 = getelementptr inbounds i16, i16* %blur_x841, i64 %17529
  %17531 = getelementptr inbounds i16, i16* %17530, i64 -32
  %17532 = bitcast i16* %17531 to <16 x i16>*
  store <16 x i16> %17526, <16 x i16>* %17532, align 2, !tbaa !399
  %17533 = shufflevector <32 x i16> %17525, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17534 = getelementptr inbounds i16, i16* %17530, i64 -16
  %17535 = bitcast i16* %17534 to <16 x i16>*
  store <16 x i16> %17533, <16 x i16>* %17535, align 2, !tbaa !399
  %17536 = zext i32 %.pre-phi3420 to i64
  %17537 = mul nsw i64 %17536, %318
  %17538 = add nsw i64 %17537, %291
  %17539 = getelementptr inbounds i16, i16* %blur_x841, i64 %17538
  %17540 = getelementptr inbounds i16, i16* %17539, i64 -32
  %17541 = bitcast i16* %17540 to <16 x i16>*
  %17542 = load <16 x i16>, <16 x i16>* %17541, align 2, !tbaa !399
  %17543 = getelementptr inbounds i16, i16* %17539, i64 -16
  %17544 = bitcast i16* %17543 to <16 x i16>*
  %17545 = load <16 x i16>, <16 x i16>* %17544, align 2, !tbaa !399
  %17546 = shufflevector <16 x i16> %17542, <16 x i16> %17545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17547 = mul nsw i64 %17527, %318
  %17548 = add nsw i64 %17547, %291
  %17549 = getelementptr inbounds i16, i16* %blur_x841, i64 %17548
  %17550 = getelementptr inbounds i16, i16* %17549, i64 -32
  %17551 = bitcast i16* %17550 to <16 x i16>*
  %17552 = load <16 x i16>, <16 x i16>* %17551, align 2, !tbaa !399
  %17553 = getelementptr inbounds i16, i16* %17549, i64 -16
  %17554 = bitcast i16* %17553 to <16 x i16>*
  %17555 = load <16 x i16>, <16 x i16>* %17554, align 2, !tbaa !399
  %17556 = shufflevector <16 x i16> %17552, <16 x i16> %17555, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17557 = zext i32 %.pre-phi3434 to i64
  %17558 = mul nsw i64 %17557, %318
  %17559 = add nsw i64 %17558, %291
  %17560 = getelementptr inbounds i16, i16* %blur_x841, i64 %17559
  %17561 = getelementptr inbounds i16, i16* %17560, i64 -32
  %17562 = bitcast i16* %17561 to <16 x i16>*
  %17563 = load <16 x i16>, <16 x i16>* %17562, align 2, !tbaa !399
  %17564 = getelementptr inbounds i16, i16* %17560, i64 -16
  %17565 = bitcast i16* %17564 to <16 x i16>*
  %17566 = load <16 x i16>, <16 x i16>* %17565, align 2, !tbaa !399
  %17567 = shufflevector <16 x i16> %17563, <16 x i16> %17566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17568 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17567, <32 x i16> %17556, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17569 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17546, <32 x i16> %17568, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17570 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17569, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17571 = shufflevector <32 x i16> %17570, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17572 = sext i32 %a365 to i64
  %17573 = add nsw i64 %17572, 23
  %17574 = mul nsw i64 %17573, %319
  %17575 = add nsw i64 %321, %17574
  %17576 = getelementptr inbounds i16, i16* %258, i64 %17575
  %17577 = getelementptr inbounds i16, i16* %17576, i64 -32
  %17578 = bitcast i16* %17577 to <16 x i16>*
  store <16 x i16> %17571, <16 x i16>* %17578, align 2, !tbaa !401
  %17579 = shufflevector <32 x i16> %17570, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17580 = getelementptr inbounds i16, i16* %17576, i64 -16
  %17581 = bitcast i16* %17580 to <16 x i16>*
  store <16 x i16> %17579, <16 x i16>* %17581, align 2, !tbaa !401
  br label %after_bb1890

"for blur_y.s0.x.x.rebased1905":                  ; preds = %"for blur_y.s0.x.x.rebased1905.preheader", %"consume blur_x1913"
  %indvars.iv3312 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1905.preheader" ], [ %indvars.iv.next3313, %"consume blur_x1913" ]
  %17582 = add nsw i64 %indvars.iv3312, %298
  %17583 = icmp slt i64 %17582, 1
  %17584 = trunc i64 %17582 to i32
  %17585 = shl nsw i32 %17584, 5
  %17586 = icmp sgt i32 %194, %17585
  %17587 = or i1 %17583, %17586
  br i1 %17587, label %"produce blur_x1911", label %"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge"

"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1905"
  %.pre3479 = shl nsw i64 %17582, 5
  br label %"consume blur_x1913"

"end for blur_y.s0.x.x.rebased1906":              ; preds = %"consume blur_x1913", %after_bb1890
  br i1 %299, label %"for blur_y.s0.x.x.rebased1921.preheader", label %"end for blur_y.s0.x.x.rebased1922", !prof !386

"for blur_y.s0.x.x.rebased1921.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1906"
  %17588 = sext i32 %t1644876 to i64
  %17589 = zext i32 %.pre-phi3420 to i64
  %17590 = mul nsw i64 %17589, %322
  %17591 = sub nsw i64 %17590, %293
  %17592 = zext i32 %.pre-phi3424 to i64
  %17593 = mul nsw i64 %17592, %322
  %17594 = sub nsw i64 %17593, %293
  %17595 = zext i32 %.pre-phi3434 to i64
  %17596 = mul nsw i64 %17595, %322
  %17597 = sub nsw i64 %17596, %293
  %17598 = sext i32 %a365 to i64
  %17599 = add nsw i64 %17598, 23
  %17600 = mul nsw i64 %17599, %319
  %17601 = add nsw i64 %17600, %323
  br label %"for blur_y.s0.x.x.rebased1921"

"produce blur_x1911":                             ; preds = %"for blur_y.s0.x.x.rebased1905"
  %t10401912 = add nsw i32 %460, %17585
  %17602 = sext i32 %t10401912 to i64
  %17603 = getelementptr inbounds i16, i16* %read_input784, i64 %17602
  %17604 = getelementptr inbounds i16, i16* %17603, i64 1
  %17605 = bitcast i16* %17604 to <16 x i16>*
  %17606 = load <16 x i16>, <16 x i16>* %17605, align 2, !tbaa !396
  %17607 = getelementptr inbounds i16, i16* %17603, i64 17
  %17608 = bitcast i16* %17607 to <16 x i16>*
  %17609 = load <16 x i16>, <16 x i16>* %17608, align 2, !tbaa !396
  %17610 = shufflevector <16 x i16> %17606, <16 x i16> %17609, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17611 = getelementptr inbounds i16, i16* %17603, i64 2
  %17612 = bitcast i16* %17611 to <16 x i16>*
  %17613 = load <16 x i16>, <16 x i16>* %17612, align 2, !tbaa !396
  %17614 = getelementptr inbounds i16, i16* %17603, i64 18
  %17615 = bitcast i16* %17614 to <16 x i16>*
  %17616 = load <16 x i16>, <16 x i16>* %17615, align 2, !tbaa !396
  %17617 = shufflevector <16 x i16> %17613, <16 x i16> %17616, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17618 = bitcast i16* %17603 to <16 x i16>*
  %17619 = load <16 x i16>, <16 x i16>* %17618, align 2, !tbaa !396
  %17620 = getelementptr inbounds i16, i16* %17603, i64 16
  %17621 = bitcast i16* %17620 to <16 x i16>*
  %17622 = load <16 x i16>, <16 x i16>* %17621, align 2, !tbaa !396
  %17623 = shufflevector <16 x i16> %17619, <16 x i16> %17622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17624 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17623, <32 x i16> %17617, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17625 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17610, <32 x i16> %17624, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17626 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17625, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17627 = shufflevector <32 x i16> %17626, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17628 = shl nsw i64 %17582, 5
  %17629 = add nsw i64 %17628, %17487
  %17630 = getelementptr inbounds i16, i16* %blur_x841, i64 %17629
  %17631 = bitcast i16* %17630 to <16 x i16>*
  store <16 x i16> %17627, <16 x i16>* %17631, align 2, !tbaa !399
  %17632 = shufflevector <32 x i16> %17626, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17633 = getelementptr inbounds i16, i16* %17630, i64 16
  %17634 = bitcast i16* %17633 to <16 x i16>*
  store <16 x i16> %17632, <16 x i16>* %17634, align 2, !tbaa !399
  br label %"consume blur_x1913"

"consume blur_x1913":                             ; preds = %"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge", %"produce blur_x1911"
  %.pre-phi3480 = phi i64 [ %.pre3479, %"for blur_y.s0.x.x.rebased1905.consume blur_x1913_crit_edge" ], [ %17628, %"produce blur_x1911" ]
  %17635 = add nsw i64 %17490, %.pre-phi3480
  %17636 = getelementptr inbounds i16, i16* %blur_x841, i64 %17635
  %17637 = bitcast i16* %17636 to <16 x i16>*
  %17638 = load <16 x i16>, <16 x i16>* %17637, align 2, !tbaa !399
  %17639 = getelementptr inbounds i16, i16* %17636, i64 16
  %17640 = bitcast i16* %17639 to <16 x i16>*
  %17641 = load <16 x i16>, <16 x i16>* %17640, align 2, !tbaa !399
  %17642 = shufflevector <16 x i16> %17638, <16 x i16> %17641, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17643 = add nsw i64 %17493, %.pre-phi3480
  %17644 = getelementptr inbounds i16, i16* %blur_x841, i64 %17643
  %17645 = bitcast i16* %17644 to <16 x i16>*
  %17646 = load <16 x i16>, <16 x i16>* %17645, align 2, !tbaa !399
  %17647 = getelementptr inbounds i16, i16* %17644, i64 16
  %17648 = bitcast i16* %17647 to <16 x i16>*
  %17649 = load <16 x i16>, <16 x i16>* %17648, align 2, !tbaa !399
  %17650 = shufflevector <16 x i16> %17646, <16 x i16> %17649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17651 = add nsw i64 %17496, %.pre-phi3480
  %17652 = getelementptr inbounds i16, i16* %blur_x841, i64 %17651
  %17653 = bitcast i16* %17652 to <16 x i16>*
  %17654 = load <16 x i16>, <16 x i16>* %17653, align 2, !tbaa !399
  %17655 = getelementptr inbounds i16, i16* %17652, i64 16
  %17656 = bitcast i16* %17655 to <16 x i16>*
  %17657 = load <16 x i16>, <16 x i16>* %17656, align 2, !tbaa !399
  %17658 = shufflevector <16 x i16> %17654, <16 x i16> %17657, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17659 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17658, <32 x i16> %17650, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17660 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17642, <32 x i16> %17659, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17661 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17660, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17662 = shufflevector <32 x i16> %17661, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17663 = add nsw i64 %17500, %.pre-phi3480
  %17664 = getelementptr inbounds i16, i16* %258, i64 %17663
  %17665 = bitcast i16* %17664 to <16 x i16>*
  store <16 x i16> %17662, <16 x i16>* %17665, align 2, !tbaa !401
  %17666 = shufflevector <32 x i16> %17661, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17667 = getelementptr inbounds i16, i16* %17664, i64 16
  %17668 = bitcast i16* %17667 to <16 x i16>*
  store <16 x i16> %17666, <16 x i16>* %17668, align 2, !tbaa !401
  %indvars.iv.next3313 = add nuw nsw i64 %indvars.iv3312, 1
  %17669 = icmp eq i64 %indvars.iv.next3313, %zext3314
  br i1 %17669, label %"end for blur_y.s0.x.x.rebased1906", label %"for blur_y.s0.x.x.rebased1905"

"for blur_y.s0.x.x.rebased1921":                  ; preds = %"for blur_y.s0.x.x.rebased1921.preheader", %"consume blur_x1932"
  %blur_y.s0.x.x.rebased1923 = phi i32 [ %17744, %"consume blur_x1932" ], [ 0, %"for blur_y.s0.x.x.rebased1921.preheader" ]
  %17670 = add nsw i32 %blur_y.s0.x.x.rebased1923, %t1582776
  %a4626 = shl nsw i32 %17670, 5
  %17671 = icmp sgt i32 %t1603, %a4626
  %blur_y.s0.x.v0.base.s1924 = select i1 %17671, i32 %a4626, i32 %t1603
  %17672 = icmp slt i32 %17670, 1
  %17673 = icmp sgt i32 %194, %a4626
  %17674 = or i1 %17672, %17673
  br i1 %17674, label %"produce blur_x1929", label %"consume blur_x1932"

"end for blur_y.s0.x.x.rebased1922":              ; preds = %"consume blur_x1932", %"end for blur_y.s0.x.x.rebased1906"
  br i1 %225, label %"produce blur_x1936", label %after_bb1933

"produce blur_x1929":                             ; preds = %"for blur_y.s0.x.x.rebased1921"
  %17675 = icmp slt i32 %blur_y.s0.x.v0.base.s1924, %194
  %blur_x.s0.x.v1.base.s1930 = select i1 %17675, i32 %blur_y.s0.x.v0.base.s1924, i32 %194
  %t10451931 = add nsw i32 %460, %blur_x.s0.x.v1.base.s1930
  %17676 = sext i32 %t10451931 to i64
  %17677 = getelementptr inbounds i16, i16* %read_input784, i64 %17676
  %17678 = getelementptr inbounds i16, i16* %17677, i64 1
  %17679 = bitcast i16* %17678 to <16 x i16>*
  %17680 = load <16 x i16>, <16 x i16>* %17679, align 2, !tbaa !396
  %17681 = getelementptr inbounds i16, i16* %17677, i64 17
  %17682 = bitcast i16* %17681 to <16 x i16>*
  %17683 = load <16 x i16>, <16 x i16>* %17682, align 2, !tbaa !396
  %17684 = shufflevector <16 x i16> %17680, <16 x i16> %17683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17685 = getelementptr inbounds i16, i16* %17677, i64 2
  %17686 = bitcast i16* %17685 to <16 x i16>*
  %17687 = load <16 x i16>, <16 x i16>* %17686, align 2, !tbaa !396
  %17688 = getelementptr inbounds i16, i16* %17677, i64 18
  %17689 = bitcast i16* %17688 to <16 x i16>*
  %17690 = load <16 x i16>, <16 x i16>* %17689, align 2, !tbaa !396
  %17691 = shufflevector <16 x i16> %17687, <16 x i16> %17690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17692 = bitcast i16* %17677 to <16 x i16>*
  %17693 = load <16 x i16>, <16 x i16>* %17692, align 2, !tbaa !396
  %17694 = getelementptr inbounds i16, i16* %17677, i64 16
  %17695 = bitcast i16* %17694 to <16 x i16>*
  %17696 = load <16 x i16>, <16 x i16>* %17695, align 2, !tbaa !396
  %17697 = shufflevector <16 x i16> %17693, <16 x i16> %17696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17698 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17697, <32 x i16> %17691, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17699 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17684, <32 x i16> %17698, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17700 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17699, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17701 = shufflevector <32 x i16> %17700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17702 = sext i32 %blur_x.s0.x.v1.base.s1930 to i64
  %17703 = add nsw i64 %17702, %17588
  %17704 = getelementptr inbounds i16, i16* %blur_x841, i64 %17703
  %17705 = bitcast i16* %17704 to <16 x i16>*
  store <16 x i16> %17701, <16 x i16>* %17705, align 2, !tbaa !399
  %17706 = shufflevector <32 x i16> %17700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17707 = getelementptr inbounds i16, i16* %17704, i64 16
  %17708 = bitcast i16* %17707 to <16 x i16>*
  store <16 x i16> %17706, <16 x i16>* %17708, align 2, !tbaa !399
  br label %"consume blur_x1932"

"consume blur_x1932":                             ; preds = %"for blur_y.s0.x.x.rebased1921", %"produce blur_x1929"
  %17709 = sext i32 %blur_y.s0.x.v0.base.s1924 to i64
  %17710 = add nsw i64 %17591, %17709
  %17711 = getelementptr inbounds i16, i16* %blur_x841, i64 %17710
  %17712 = bitcast i16* %17711 to <16 x i16>*
  %17713 = load <16 x i16>, <16 x i16>* %17712, align 2, !tbaa !399
  %17714 = getelementptr inbounds i16, i16* %17711, i64 16
  %17715 = bitcast i16* %17714 to <16 x i16>*
  %17716 = load <16 x i16>, <16 x i16>* %17715, align 2, !tbaa !399
  %17717 = shufflevector <16 x i16> %17713, <16 x i16> %17716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17718 = add nsw i64 %17594, %17709
  %17719 = getelementptr inbounds i16, i16* %blur_x841, i64 %17718
  %17720 = bitcast i16* %17719 to <16 x i16>*
  %17721 = load <16 x i16>, <16 x i16>* %17720, align 2, !tbaa !399
  %17722 = getelementptr inbounds i16, i16* %17719, i64 16
  %17723 = bitcast i16* %17722 to <16 x i16>*
  %17724 = load <16 x i16>, <16 x i16>* %17723, align 2, !tbaa !399
  %17725 = shufflevector <16 x i16> %17721, <16 x i16> %17724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17726 = add nsw i64 %17597, %17709
  %17727 = getelementptr inbounds i16, i16* %blur_x841, i64 %17726
  %17728 = bitcast i16* %17727 to <16 x i16>*
  %17729 = load <16 x i16>, <16 x i16>* %17728, align 2, !tbaa !399
  %17730 = getelementptr inbounds i16, i16* %17727, i64 16
  %17731 = bitcast i16* %17730 to <16 x i16>*
  %17732 = load <16 x i16>, <16 x i16>* %17731, align 2, !tbaa !399
  %17733 = shufflevector <16 x i16> %17729, <16 x i16> %17732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17734 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17733, <32 x i16> %17725, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17735 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17717, <32 x i16> %17734, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17736 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17735, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17737 = shufflevector <32 x i16> %17736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17738 = add nsw i64 %17601, %17709
  %17739 = getelementptr inbounds i16, i16* %258, i64 %17738
  %17740 = bitcast i16* %17739 to <16 x i16>*
  store <16 x i16> %17737, <16 x i16>* %17740, align 2, !tbaa !401
  %17741 = shufflevector <32 x i16> %17736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17742 = getelementptr inbounds i16, i16* %17739, i64 16
  %17743 = bitcast i16* %17742 to <16 x i16>*
  store <16 x i16> %17741, <16 x i16>* %17743, align 2, !tbaa !401
  %17744 = add nuw nsw i32 %blur_y.s0.x.x.rebased1923, 1
  %.not2466 = icmp eq i32 %17744, %t1639860
  br i1 %.not2466, label %"end for blur_y.s0.x.x.rebased1922", label %"for blur_y.s0.x.x.rebased1921"

after_bb1933:                                     ; preds = %"end for blur_y.s0.x.x.rebased1922", %"produce blur_x1936"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1948.preheader", label %"end for blur_y.s0.x.x.rebased1949", !prof !386

"for blur_y.s0.x.x.rebased1948.preheader":        ; preds = %after_bb1933
  %17745 = sext i32 %t1650912 to i64
  %17746 = zext i32 %.pre-phi3424 to i64
  %17747 = mul nsw i64 %17746, %322
  %17748 = sub nsw i64 %17747, %293
  %17749 = zext i32 %.pre-phi3428 to i64
  %17750 = mul nsw i64 %17749, %322
  %17751 = sub nsw i64 %17750, %293
  %17752 = zext i32 %.pre-phi3420 to i64
  %17753 = mul nsw i64 %17752, %322
  %17754 = sub nsw i64 %17753, %293
  %17755 = sext i32 %a365 to i64
  %17756 = add nsw i64 %17755, 24
  %17757 = mul nsw i64 %17756, %319
  %17758 = add nsw i64 %17757, %323
  br label %"for blur_y.s0.x.x.rebased1948"

"produce blur_x1936":                             ; preds = %"end for blur_y.s0.x.x.rebased1922"
  %17759 = getelementptr inbounds i16, i16* %read_input784, i64 %464
  %17760 = getelementptr inbounds i16, i16* %17759, i64 -31
  %17761 = bitcast i16* %17760 to <16 x i16>*
  %17762 = load <16 x i16>, <16 x i16>* %17761, align 2, !tbaa !396
  %17763 = getelementptr inbounds i16, i16* %17759, i64 -15
  %17764 = bitcast i16* %17763 to <16 x i16>*
  %17765 = load <16 x i16>, <16 x i16>* %17764, align 2, !tbaa !396
  %17766 = shufflevector <16 x i16> %17762, <16 x i16> %17765, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17767 = getelementptr inbounds i16, i16* %17759, i64 -30
  %17768 = bitcast i16* %17767 to <16 x i16>*
  %17769 = load <16 x i16>, <16 x i16>* %17768, align 2, !tbaa !396
  %17770 = getelementptr inbounds i16, i16* %17759, i64 -14
  %17771 = bitcast i16* %17770 to <16 x i16>*
  %17772 = load <16 x i16>, <16 x i16>* %17771, align 2, !tbaa !396
  %17773 = shufflevector <16 x i16> %17769, <16 x i16> %17772, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17774 = getelementptr inbounds i16, i16* %17759, i64 -32
  %17775 = bitcast i16* %17774 to <16 x i16>*
  %17776 = load <16 x i16>, <16 x i16>* %17775, align 2, !tbaa !396
  %17777 = getelementptr inbounds i16, i16* %17759, i64 -16
  %17778 = bitcast i16* %17777 to <16 x i16>*
  %17779 = load <16 x i16>, <16 x i16>* %17778, align 2, !tbaa !396
  %17780 = shufflevector <16 x i16> %17776, <16 x i16> %17779, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17781 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17780, <32 x i16> %17773, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17782 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17766, <32 x i16> %17781, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17783 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17782, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17784 = shufflevector <32 x i16> %17783, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17785 = zext i32 %.pre-phi3428 to i64
  %17786 = mul nsw i64 %294, %17785
  %17787 = add nsw i64 %296, %17786
  %17788 = getelementptr inbounds i16, i16* %blur_x841, i64 %17787
  %17789 = getelementptr inbounds i16, i16* %17788, i64 -32
  %17790 = bitcast i16* %17789 to <16 x i16>*
  store <16 x i16> %17784, <16 x i16>* %17790, align 2, !tbaa !399
  %17791 = shufflevector <32 x i16> %17783, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17792 = getelementptr inbounds i16, i16* %17788, i64 -16
  %17793 = bitcast i16* %17792 to <16 x i16>*
  store <16 x i16> %17791, <16 x i16>* %17793, align 2, !tbaa !399
  %17794 = zext i32 %.pre-phi3424 to i64
  %17795 = mul nsw i64 %17794, %318
  %17796 = add nsw i64 %17795, %291
  %17797 = getelementptr inbounds i16, i16* %blur_x841, i64 %17796
  %17798 = getelementptr inbounds i16, i16* %17797, i64 -32
  %17799 = bitcast i16* %17798 to <16 x i16>*
  %17800 = load <16 x i16>, <16 x i16>* %17799, align 2, !tbaa !399
  %17801 = getelementptr inbounds i16, i16* %17797, i64 -16
  %17802 = bitcast i16* %17801 to <16 x i16>*
  %17803 = load <16 x i16>, <16 x i16>* %17802, align 2, !tbaa !399
  %17804 = shufflevector <16 x i16> %17800, <16 x i16> %17803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17805 = mul nsw i64 %17785, %318
  %17806 = add nsw i64 %17805, %291
  %17807 = getelementptr inbounds i16, i16* %blur_x841, i64 %17806
  %17808 = getelementptr inbounds i16, i16* %17807, i64 -32
  %17809 = bitcast i16* %17808 to <16 x i16>*
  %17810 = load <16 x i16>, <16 x i16>* %17809, align 2, !tbaa !399
  %17811 = getelementptr inbounds i16, i16* %17807, i64 -16
  %17812 = bitcast i16* %17811 to <16 x i16>*
  %17813 = load <16 x i16>, <16 x i16>* %17812, align 2, !tbaa !399
  %17814 = shufflevector <16 x i16> %17810, <16 x i16> %17813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17815 = zext i32 %.pre-phi3420 to i64
  %17816 = mul nsw i64 %17815, %318
  %17817 = add nsw i64 %17816, %291
  %17818 = getelementptr inbounds i16, i16* %blur_x841, i64 %17817
  %17819 = getelementptr inbounds i16, i16* %17818, i64 -32
  %17820 = bitcast i16* %17819 to <16 x i16>*
  %17821 = load <16 x i16>, <16 x i16>* %17820, align 2, !tbaa !399
  %17822 = getelementptr inbounds i16, i16* %17818, i64 -16
  %17823 = bitcast i16* %17822 to <16 x i16>*
  %17824 = load <16 x i16>, <16 x i16>* %17823, align 2, !tbaa !399
  %17825 = shufflevector <16 x i16> %17821, <16 x i16> %17824, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17826 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17825, <32 x i16> %17814, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17827 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17804, <32 x i16> %17826, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17828 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17827, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17829 = shufflevector <32 x i16> %17828, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17830 = sext i32 %a365 to i64
  %17831 = add nsw i64 %17830, 24
  %17832 = mul nsw i64 %17831, %319
  %17833 = add nsw i64 %321, %17832
  %17834 = getelementptr inbounds i16, i16* %258, i64 %17833
  %17835 = getelementptr inbounds i16, i16* %17834, i64 -32
  %17836 = bitcast i16* %17835 to <16 x i16>*
  store <16 x i16> %17829, <16 x i16>* %17836, align 2, !tbaa !401
  %17837 = shufflevector <32 x i16> %17828, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17838 = getelementptr inbounds i16, i16* %17834, i64 -16
  %17839 = bitcast i16* %17838 to <16 x i16>*
  store <16 x i16> %17837, <16 x i16>* %17839, align 2, !tbaa !401
  br label %after_bb1933

"for blur_y.s0.x.x.rebased1948":                  ; preds = %"for blur_y.s0.x.x.rebased1948.preheader", %"consume blur_x1956"
  %indvars.iv3315 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1948.preheader" ], [ %indvars.iv.next3316, %"consume blur_x1956" ]
  %17840 = add nsw i64 %indvars.iv3315, %298
  %17841 = icmp slt i64 %17840, 1
  %17842 = trunc i64 %17840 to i32
  %17843 = shl nsw i32 %17842, 5
  %17844 = icmp sgt i32 %194, %17843
  %17845 = or i1 %17841, %17844
  br i1 %17845, label %"produce blur_x1954", label %"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge"

"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1948"
  %.pre3481 = shl nsw i64 %17840, 5
  br label %"consume blur_x1956"

"end for blur_y.s0.x.x.rebased1949":              ; preds = %"consume blur_x1956", %after_bb1933
  br i1 %299, label %"for blur_y.s0.x.x.rebased1964.preheader", label %"end for blur_y.s0.x.x.rebased1965", !prof !386

"for blur_y.s0.x.x.rebased1964.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1949"
  %17846 = sext i32 %t1650912 to i64
  %17847 = zext i32 %.pre-phi3424 to i64
  %17848 = mul nsw i64 %17847, %322
  %17849 = sub nsw i64 %17848, %293
  %17850 = zext i32 %.pre-phi3428 to i64
  %17851 = mul nsw i64 %17850, %322
  %17852 = sub nsw i64 %17851, %293
  %17853 = zext i32 %.pre-phi3420 to i64
  %17854 = mul nsw i64 %17853, %322
  %17855 = sub nsw i64 %17854, %293
  %17856 = sext i32 %a365 to i64
  %17857 = add nsw i64 %17856, 24
  %17858 = mul nsw i64 %17857, %319
  %17859 = add nsw i64 %17858, %323
  br label %"for blur_y.s0.x.x.rebased1964"

"produce blur_x1954":                             ; preds = %"for blur_y.s0.x.x.rebased1948"
  %t10561955 = add nsw i32 %466, %17843
  %17860 = sext i32 %t10561955 to i64
  %17861 = getelementptr inbounds i16, i16* %read_input784, i64 %17860
  %17862 = getelementptr inbounds i16, i16* %17861, i64 1
  %17863 = bitcast i16* %17862 to <16 x i16>*
  %17864 = load <16 x i16>, <16 x i16>* %17863, align 2, !tbaa !396
  %17865 = getelementptr inbounds i16, i16* %17861, i64 17
  %17866 = bitcast i16* %17865 to <16 x i16>*
  %17867 = load <16 x i16>, <16 x i16>* %17866, align 2, !tbaa !396
  %17868 = shufflevector <16 x i16> %17864, <16 x i16> %17867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17869 = getelementptr inbounds i16, i16* %17861, i64 2
  %17870 = bitcast i16* %17869 to <16 x i16>*
  %17871 = load <16 x i16>, <16 x i16>* %17870, align 2, !tbaa !396
  %17872 = getelementptr inbounds i16, i16* %17861, i64 18
  %17873 = bitcast i16* %17872 to <16 x i16>*
  %17874 = load <16 x i16>, <16 x i16>* %17873, align 2, !tbaa !396
  %17875 = shufflevector <16 x i16> %17871, <16 x i16> %17874, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17876 = bitcast i16* %17861 to <16 x i16>*
  %17877 = load <16 x i16>, <16 x i16>* %17876, align 2, !tbaa !396
  %17878 = getelementptr inbounds i16, i16* %17861, i64 16
  %17879 = bitcast i16* %17878 to <16 x i16>*
  %17880 = load <16 x i16>, <16 x i16>* %17879, align 2, !tbaa !396
  %17881 = shufflevector <16 x i16> %17877, <16 x i16> %17880, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17882 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17881, <32 x i16> %17875, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17883 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17868, <32 x i16> %17882, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17884 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17883, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17885 = shufflevector <32 x i16> %17884, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17886 = shl nsw i64 %17840, 5
  %17887 = add nsw i64 %17886, %17745
  %17888 = getelementptr inbounds i16, i16* %blur_x841, i64 %17887
  %17889 = bitcast i16* %17888 to <16 x i16>*
  store <16 x i16> %17885, <16 x i16>* %17889, align 2, !tbaa !399
  %17890 = shufflevector <32 x i16> %17884, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17891 = getelementptr inbounds i16, i16* %17888, i64 16
  %17892 = bitcast i16* %17891 to <16 x i16>*
  store <16 x i16> %17890, <16 x i16>* %17892, align 2, !tbaa !399
  br label %"consume blur_x1956"

"consume blur_x1956":                             ; preds = %"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge", %"produce blur_x1954"
  %.pre-phi3482 = phi i64 [ %.pre3481, %"for blur_y.s0.x.x.rebased1948.consume blur_x1956_crit_edge" ], [ %17886, %"produce blur_x1954" ]
  %17893 = add nsw i64 %17748, %.pre-phi3482
  %17894 = getelementptr inbounds i16, i16* %blur_x841, i64 %17893
  %17895 = bitcast i16* %17894 to <16 x i16>*
  %17896 = load <16 x i16>, <16 x i16>* %17895, align 2, !tbaa !399
  %17897 = getelementptr inbounds i16, i16* %17894, i64 16
  %17898 = bitcast i16* %17897 to <16 x i16>*
  %17899 = load <16 x i16>, <16 x i16>* %17898, align 2, !tbaa !399
  %17900 = shufflevector <16 x i16> %17896, <16 x i16> %17899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17901 = add nsw i64 %17751, %.pre-phi3482
  %17902 = getelementptr inbounds i16, i16* %blur_x841, i64 %17901
  %17903 = bitcast i16* %17902 to <16 x i16>*
  %17904 = load <16 x i16>, <16 x i16>* %17903, align 2, !tbaa !399
  %17905 = getelementptr inbounds i16, i16* %17902, i64 16
  %17906 = bitcast i16* %17905 to <16 x i16>*
  %17907 = load <16 x i16>, <16 x i16>* %17906, align 2, !tbaa !399
  %17908 = shufflevector <16 x i16> %17904, <16 x i16> %17907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17909 = add nsw i64 %17754, %.pre-phi3482
  %17910 = getelementptr inbounds i16, i16* %blur_x841, i64 %17909
  %17911 = bitcast i16* %17910 to <16 x i16>*
  %17912 = load <16 x i16>, <16 x i16>* %17911, align 2, !tbaa !399
  %17913 = getelementptr inbounds i16, i16* %17910, i64 16
  %17914 = bitcast i16* %17913 to <16 x i16>*
  %17915 = load <16 x i16>, <16 x i16>* %17914, align 2, !tbaa !399
  %17916 = shufflevector <16 x i16> %17912, <16 x i16> %17915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17917 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17916, <32 x i16> %17908, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17918 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17900, <32 x i16> %17917, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17919 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17918, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17920 = shufflevector <32 x i16> %17919, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17921 = add nsw i64 %17758, %.pre-phi3482
  %17922 = getelementptr inbounds i16, i16* %258, i64 %17921
  %17923 = bitcast i16* %17922 to <16 x i16>*
  store <16 x i16> %17920, <16 x i16>* %17923, align 2, !tbaa !401
  %17924 = shufflevector <32 x i16> %17919, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17925 = getelementptr inbounds i16, i16* %17922, i64 16
  %17926 = bitcast i16* %17925 to <16 x i16>*
  store <16 x i16> %17924, <16 x i16>* %17926, align 2, !tbaa !401
  %indvars.iv.next3316 = add nuw nsw i64 %indvars.iv3315, 1
  %17927 = icmp eq i64 %indvars.iv.next3316, %zext3317
  br i1 %17927, label %"end for blur_y.s0.x.x.rebased1949", label %"for blur_y.s0.x.x.rebased1948"

"for blur_y.s0.x.x.rebased1964":                  ; preds = %"for blur_y.s0.x.x.rebased1964.preheader", %"consume blur_x1975"
  %blur_y.s0.x.x.rebased1966 = phi i32 [ %18002, %"consume blur_x1975" ], [ 0, %"for blur_y.s0.x.x.rebased1964.preheader" ]
  %17928 = add nsw i32 %blur_y.s0.x.x.rebased1966, %t1582776
  %a4783 = shl nsw i32 %17928, 5
  %17929 = icmp sgt i32 %t1603, %a4783
  %blur_y.s0.x.v0.base.s1967 = select i1 %17929, i32 %a4783, i32 %t1603
  %17930 = icmp slt i32 %17928, 1
  %17931 = icmp sgt i32 %194, %a4783
  %17932 = or i1 %17930, %17931
  br i1 %17932, label %"produce blur_x1972", label %"consume blur_x1975"

"end for blur_y.s0.x.x.rebased1965":              ; preds = %"consume blur_x1975", %"end for blur_y.s0.x.x.rebased1949"
  br i1 %225, label %"produce blur_x1979", label %after_bb1976

"produce blur_x1972":                             ; preds = %"for blur_y.s0.x.x.rebased1964"
  %17933 = icmp slt i32 %blur_y.s0.x.v0.base.s1967, %194
  %blur_x.s0.x.v1.base.s1973 = select i1 %17933, i32 %blur_y.s0.x.v0.base.s1967, i32 %194
  %t10611974 = add nsw i32 %466, %blur_x.s0.x.v1.base.s1973
  %17934 = sext i32 %t10611974 to i64
  %17935 = getelementptr inbounds i16, i16* %read_input784, i64 %17934
  %17936 = getelementptr inbounds i16, i16* %17935, i64 1
  %17937 = bitcast i16* %17936 to <16 x i16>*
  %17938 = load <16 x i16>, <16 x i16>* %17937, align 2, !tbaa !396
  %17939 = getelementptr inbounds i16, i16* %17935, i64 17
  %17940 = bitcast i16* %17939 to <16 x i16>*
  %17941 = load <16 x i16>, <16 x i16>* %17940, align 2, !tbaa !396
  %17942 = shufflevector <16 x i16> %17938, <16 x i16> %17941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17943 = getelementptr inbounds i16, i16* %17935, i64 2
  %17944 = bitcast i16* %17943 to <16 x i16>*
  %17945 = load <16 x i16>, <16 x i16>* %17944, align 2, !tbaa !396
  %17946 = getelementptr inbounds i16, i16* %17935, i64 18
  %17947 = bitcast i16* %17946 to <16 x i16>*
  %17948 = load <16 x i16>, <16 x i16>* %17947, align 2, !tbaa !396
  %17949 = shufflevector <16 x i16> %17945, <16 x i16> %17948, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17950 = bitcast i16* %17935 to <16 x i16>*
  %17951 = load <16 x i16>, <16 x i16>* %17950, align 2, !tbaa !396
  %17952 = getelementptr inbounds i16, i16* %17935, i64 16
  %17953 = bitcast i16* %17952 to <16 x i16>*
  %17954 = load <16 x i16>, <16 x i16>* %17953, align 2, !tbaa !396
  %17955 = shufflevector <16 x i16> %17951, <16 x i16> %17954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17956 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17955, <32 x i16> %17949, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17957 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17942, <32 x i16> %17956, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17958 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17957, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17959 = shufflevector <32 x i16> %17958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17960 = sext i32 %blur_x.s0.x.v1.base.s1973 to i64
  %17961 = add nsw i64 %17960, %17846
  %17962 = getelementptr inbounds i16, i16* %blur_x841, i64 %17961
  %17963 = bitcast i16* %17962 to <16 x i16>*
  store <16 x i16> %17959, <16 x i16>* %17963, align 2, !tbaa !399
  %17964 = shufflevector <32 x i16> %17958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17965 = getelementptr inbounds i16, i16* %17962, i64 16
  %17966 = bitcast i16* %17965 to <16 x i16>*
  store <16 x i16> %17964, <16 x i16>* %17966, align 2, !tbaa !399
  br label %"consume blur_x1975"

"consume blur_x1975":                             ; preds = %"for blur_y.s0.x.x.rebased1964", %"produce blur_x1972"
  %17967 = sext i32 %blur_y.s0.x.v0.base.s1967 to i64
  %17968 = add nsw i64 %17849, %17967
  %17969 = getelementptr inbounds i16, i16* %blur_x841, i64 %17968
  %17970 = bitcast i16* %17969 to <16 x i16>*
  %17971 = load <16 x i16>, <16 x i16>* %17970, align 2, !tbaa !399
  %17972 = getelementptr inbounds i16, i16* %17969, i64 16
  %17973 = bitcast i16* %17972 to <16 x i16>*
  %17974 = load <16 x i16>, <16 x i16>* %17973, align 2, !tbaa !399
  %17975 = shufflevector <16 x i16> %17971, <16 x i16> %17974, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17976 = add nsw i64 %17852, %17967
  %17977 = getelementptr inbounds i16, i16* %blur_x841, i64 %17976
  %17978 = bitcast i16* %17977 to <16 x i16>*
  %17979 = load <16 x i16>, <16 x i16>* %17978, align 2, !tbaa !399
  %17980 = getelementptr inbounds i16, i16* %17977, i64 16
  %17981 = bitcast i16* %17980 to <16 x i16>*
  %17982 = load <16 x i16>, <16 x i16>* %17981, align 2, !tbaa !399
  %17983 = shufflevector <16 x i16> %17979, <16 x i16> %17982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17984 = add nsw i64 %17855, %17967
  %17985 = getelementptr inbounds i16, i16* %blur_x841, i64 %17984
  %17986 = bitcast i16* %17985 to <16 x i16>*
  %17987 = load <16 x i16>, <16 x i16>* %17986, align 2, !tbaa !399
  %17988 = getelementptr inbounds i16, i16* %17985, i64 16
  %17989 = bitcast i16* %17988 to <16 x i16>*
  %17990 = load <16 x i16>, <16 x i16>* %17989, align 2, !tbaa !399
  %17991 = shufflevector <16 x i16> %17987, <16 x i16> %17990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17992 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17991, <32 x i16> %17983, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17993 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %17975, <32 x i16> %17992, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %17994 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %17993, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %17995 = shufflevector <32 x i16> %17994, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17996 = add nsw i64 %17859, %17967
  %17997 = getelementptr inbounds i16, i16* %258, i64 %17996
  %17998 = bitcast i16* %17997 to <16 x i16>*
  store <16 x i16> %17995, <16 x i16>* %17998, align 2, !tbaa !401
  %17999 = shufflevector <32 x i16> %17994, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18000 = getelementptr inbounds i16, i16* %17997, i64 16
  %18001 = bitcast i16* %18000 to <16 x i16>*
  store <16 x i16> %17999, <16 x i16>* %18001, align 2, !tbaa !401
  %18002 = add nuw nsw i32 %blur_y.s0.x.x.rebased1966, 1
  %.not2462 = icmp eq i32 %18002, %t1639860
  br i1 %.not2462, label %"end for blur_y.s0.x.x.rebased1965", label %"for blur_y.s0.x.x.rebased1964"

after_bb1976:                                     ; preds = %"end for blur_y.s0.x.x.rebased1965", %"produce blur_x1979"
  br i1 %297, label %"for blur_y.s0.x.x.rebased1991.preheader", label %"end for blur_y.s0.x.x.rebased1992", !prof !386

"for blur_y.s0.x.x.rebased1991.preheader":        ; preds = %after_bb1976
  %18003 = sext i32 %t1666955 to i64
  %18004 = zext i32 %.pre-phi3428 to i64
  %18005 = mul nsw i64 %18004, %322
  %18006 = sub nsw i64 %18005, %293
  %18007 = zext i32 %.pre-phi3434 to i64
  %18008 = mul nsw i64 %18007, %322
  %18009 = sub nsw i64 %18008, %293
  %18010 = zext i32 %.pre-phi3424 to i64
  %18011 = mul nsw i64 %18010, %322
  %18012 = sub nsw i64 %18011, %293
  %18013 = sext i32 %a365 to i64
  %18014 = add nsw i64 %18013, 25
  %18015 = mul nsw i64 %18014, %319
  %18016 = add nsw i64 %18015, %323
  br label %"for blur_y.s0.x.x.rebased1991"

"produce blur_x1979":                             ; preds = %"end for blur_y.s0.x.x.rebased1965"
  %18017 = getelementptr inbounds i16, i16* %read_input784, i64 %470
  %18018 = getelementptr inbounds i16, i16* %18017, i64 -31
  %18019 = bitcast i16* %18018 to <16 x i16>*
  %18020 = load <16 x i16>, <16 x i16>* %18019, align 2, !tbaa !396
  %18021 = getelementptr inbounds i16, i16* %18017, i64 -15
  %18022 = bitcast i16* %18021 to <16 x i16>*
  %18023 = load <16 x i16>, <16 x i16>* %18022, align 2, !tbaa !396
  %18024 = shufflevector <16 x i16> %18020, <16 x i16> %18023, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18025 = getelementptr inbounds i16, i16* %18017, i64 -30
  %18026 = bitcast i16* %18025 to <16 x i16>*
  %18027 = load <16 x i16>, <16 x i16>* %18026, align 2, !tbaa !396
  %18028 = getelementptr inbounds i16, i16* %18017, i64 -14
  %18029 = bitcast i16* %18028 to <16 x i16>*
  %18030 = load <16 x i16>, <16 x i16>* %18029, align 2, !tbaa !396
  %18031 = shufflevector <16 x i16> %18027, <16 x i16> %18030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18032 = getelementptr inbounds i16, i16* %18017, i64 -32
  %18033 = bitcast i16* %18032 to <16 x i16>*
  %18034 = load <16 x i16>, <16 x i16>* %18033, align 2, !tbaa !396
  %18035 = getelementptr inbounds i16, i16* %18017, i64 -16
  %18036 = bitcast i16* %18035 to <16 x i16>*
  %18037 = load <16 x i16>, <16 x i16>* %18036, align 2, !tbaa !396
  %18038 = shufflevector <16 x i16> %18034, <16 x i16> %18037, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18039 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18038, <32 x i16> %18031, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18040 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18024, <32 x i16> %18039, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18041 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18040, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18042 = shufflevector <32 x i16> %18041, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18043 = zext i32 %.pre-phi3434 to i64
  %18044 = mul nsw i64 %294, %18043
  %18045 = add nsw i64 %296, %18044
  %18046 = getelementptr inbounds i16, i16* %blur_x841, i64 %18045
  %18047 = getelementptr inbounds i16, i16* %18046, i64 -32
  %18048 = bitcast i16* %18047 to <16 x i16>*
  store <16 x i16> %18042, <16 x i16>* %18048, align 2, !tbaa !399
  %18049 = shufflevector <32 x i16> %18041, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18050 = getelementptr inbounds i16, i16* %18046, i64 -16
  %18051 = bitcast i16* %18050 to <16 x i16>*
  store <16 x i16> %18049, <16 x i16>* %18051, align 2, !tbaa !399
  %18052 = zext i32 %.pre-phi3428 to i64
  %18053 = mul nsw i64 %18052, %318
  %18054 = add nsw i64 %18053, %291
  %18055 = getelementptr inbounds i16, i16* %blur_x841, i64 %18054
  %18056 = getelementptr inbounds i16, i16* %18055, i64 -32
  %18057 = bitcast i16* %18056 to <16 x i16>*
  %18058 = load <16 x i16>, <16 x i16>* %18057, align 2, !tbaa !399
  %18059 = getelementptr inbounds i16, i16* %18055, i64 -16
  %18060 = bitcast i16* %18059 to <16 x i16>*
  %18061 = load <16 x i16>, <16 x i16>* %18060, align 2, !tbaa !399
  %18062 = shufflevector <16 x i16> %18058, <16 x i16> %18061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18063 = mul nsw i64 %18043, %318
  %18064 = add nsw i64 %18063, %291
  %18065 = getelementptr inbounds i16, i16* %blur_x841, i64 %18064
  %18066 = getelementptr inbounds i16, i16* %18065, i64 -32
  %18067 = bitcast i16* %18066 to <16 x i16>*
  %18068 = load <16 x i16>, <16 x i16>* %18067, align 2, !tbaa !399
  %18069 = getelementptr inbounds i16, i16* %18065, i64 -16
  %18070 = bitcast i16* %18069 to <16 x i16>*
  %18071 = load <16 x i16>, <16 x i16>* %18070, align 2, !tbaa !399
  %18072 = shufflevector <16 x i16> %18068, <16 x i16> %18071, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18073 = zext i32 %.pre-phi3424 to i64
  %18074 = mul nsw i64 %18073, %318
  %18075 = add nsw i64 %18074, %291
  %18076 = getelementptr inbounds i16, i16* %blur_x841, i64 %18075
  %18077 = getelementptr inbounds i16, i16* %18076, i64 -32
  %18078 = bitcast i16* %18077 to <16 x i16>*
  %18079 = load <16 x i16>, <16 x i16>* %18078, align 2, !tbaa !399
  %18080 = getelementptr inbounds i16, i16* %18076, i64 -16
  %18081 = bitcast i16* %18080 to <16 x i16>*
  %18082 = load <16 x i16>, <16 x i16>* %18081, align 2, !tbaa !399
  %18083 = shufflevector <16 x i16> %18079, <16 x i16> %18082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18084 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18083, <32 x i16> %18072, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18085 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18062, <32 x i16> %18084, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18086 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18085, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18087 = shufflevector <32 x i16> %18086, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18088 = sext i32 %a365 to i64
  %18089 = add nsw i64 %18088, 25
  %18090 = mul nsw i64 %18089, %319
  %18091 = add nsw i64 %321, %18090
  %18092 = getelementptr inbounds i16, i16* %258, i64 %18091
  %18093 = getelementptr inbounds i16, i16* %18092, i64 -32
  %18094 = bitcast i16* %18093 to <16 x i16>*
  store <16 x i16> %18087, <16 x i16>* %18094, align 2, !tbaa !401
  %18095 = shufflevector <32 x i16> %18086, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18096 = getelementptr inbounds i16, i16* %18092, i64 -16
  %18097 = bitcast i16* %18096 to <16 x i16>*
  store <16 x i16> %18095, <16 x i16>* %18097, align 2, !tbaa !401
  br label %after_bb1976

"for blur_y.s0.x.x.rebased1991":                  ; preds = %"for blur_y.s0.x.x.rebased1991.preheader", %"consume blur_x1999"
  %indvars.iv3318 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1991.preheader" ], [ %indvars.iv.next3319, %"consume blur_x1999" ]
  %18098 = add nsw i64 %indvars.iv3318, %298
  %18099 = icmp slt i64 %18098, 1
  %18100 = trunc i64 %18098 to i32
  %18101 = shl nsw i32 %18100, 5
  %18102 = icmp sgt i32 %194, %18101
  %18103 = or i1 %18099, %18102
  br i1 %18103, label %"produce blur_x1997", label %"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge"

"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1991"
  %.pre3483 = shl nsw i64 %18098, 5
  br label %"consume blur_x1999"

"end for blur_y.s0.x.x.rebased1992":              ; preds = %"consume blur_x1999", %after_bb1976
  br i1 %299, label %"for blur_y.s0.x.x.rebased2007.preheader", label %"end for blur_y.s0.x.x.rebased2008", !prof !386

"for blur_y.s0.x.x.rebased2007.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1992"
  %18104 = sext i32 %t1666955 to i64
  %18105 = zext i32 %.pre-phi3428 to i64
  %18106 = mul nsw i64 %18105, %322
  %18107 = sub nsw i64 %18106, %293
  %18108 = zext i32 %.pre-phi3434 to i64
  %18109 = mul nsw i64 %18108, %322
  %18110 = sub nsw i64 %18109, %293
  %18111 = zext i32 %.pre-phi3424 to i64
  %18112 = mul nsw i64 %18111, %322
  %18113 = sub nsw i64 %18112, %293
  %18114 = sext i32 %a365 to i64
  %18115 = add nsw i64 %18114, 25
  %18116 = mul nsw i64 %18115, %319
  %18117 = add nsw i64 %18116, %323
  br label %"for blur_y.s0.x.x.rebased2007"

"produce blur_x1997":                             ; preds = %"for blur_y.s0.x.x.rebased1991"
  %t10721998 = add nsw i32 %472, %18101
  %18118 = sext i32 %t10721998 to i64
  %18119 = getelementptr inbounds i16, i16* %read_input784, i64 %18118
  %18120 = getelementptr inbounds i16, i16* %18119, i64 1
  %18121 = bitcast i16* %18120 to <16 x i16>*
  %18122 = load <16 x i16>, <16 x i16>* %18121, align 2, !tbaa !396
  %18123 = getelementptr inbounds i16, i16* %18119, i64 17
  %18124 = bitcast i16* %18123 to <16 x i16>*
  %18125 = load <16 x i16>, <16 x i16>* %18124, align 2, !tbaa !396
  %18126 = shufflevector <16 x i16> %18122, <16 x i16> %18125, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18127 = getelementptr inbounds i16, i16* %18119, i64 2
  %18128 = bitcast i16* %18127 to <16 x i16>*
  %18129 = load <16 x i16>, <16 x i16>* %18128, align 2, !tbaa !396
  %18130 = getelementptr inbounds i16, i16* %18119, i64 18
  %18131 = bitcast i16* %18130 to <16 x i16>*
  %18132 = load <16 x i16>, <16 x i16>* %18131, align 2, !tbaa !396
  %18133 = shufflevector <16 x i16> %18129, <16 x i16> %18132, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18134 = bitcast i16* %18119 to <16 x i16>*
  %18135 = load <16 x i16>, <16 x i16>* %18134, align 2, !tbaa !396
  %18136 = getelementptr inbounds i16, i16* %18119, i64 16
  %18137 = bitcast i16* %18136 to <16 x i16>*
  %18138 = load <16 x i16>, <16 x i16>* %18137, align 2, !tbaa !396
  %18139 = shufflevector <16 x i16> %18135, <16 x i16> %18138, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18140 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18139, <32 x i16> %18133, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18141 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18126, <32 x i16> %18140, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18142 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18141, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18143 = shufflevector <32 x i16> %18142, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18144 = shl nsw i64 %18098, 5
  %18145 = add nsw i64 %18144, %18003
  %18146 = getelementptr inbounds i16, i16* %blur_x841, i64 %18145
  %18147 = bitcast i16* %18146 to <16 x i16>*
  store <16 x i16> %18143, <16 x i16>* %18147, align 2, !tbaa !399
  %18148 = shufflevector <32 x i16> %18142, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18149 = getelementptr inbounds i16, i16* %18146, i64 16
  %18150 = bitcast i16* %18149 to <16 x i16>*
  store <16 x i16> %18148, <16 x i16>* %18150, align 2, !tbaa !399
  br label %"consume blur_x1999"

"consume blur_x1999":                             ; preds = %"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge", %"produce blur_x1997"
  %.pre-phi3484 = phi i64 [ %.pre3483, %"for blur_y.s0.x.x.rebased1991.consume blur_x1999_crit_edge" ], [ %18144, %"produce blur_x1997" ]
  %18151 = add nsw i64 %18006, %.pre-phi3484
  %18152 = getelementptr inbounds i16, i16* %blur_x841, i64 %18151
  %18153 = bitcast i16* %18152 to <16 x i16>*
  %18154 = load <16 x i16>, <16 x i16>* %18153, align 2, !tbaa !399
  %18155 = getelementptr inbounds i16, i16* %18152, i64 16
  %18156 = bitcast i16* %18155 to <16 x i16>*
  %18157 = load <16 x i16>, <16 x i16>* %18156, align 2, !tbaa !399
  %18158 = shufflevector <16 x i16> %18154, <16 x i16> %18157, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18159 = add nsw i64 %18009, %.pre-phi3484
  %18160 = getelementptr inbounds i16, i16* %blur_x841, i64 %18159
  %18161 = bitcast i16* %18160 to <16 x i16>*
  %18162 = load <16 x i16>, <16 x i16>* %18161, align 2, !tbaa !399
  %18163 = getelementptr inbounds i16, i16* %18160, i64 16
  %18164 = bitcast i16* %18163 to <16 x i16>*
  %18165 = load <16 x i16>, <16 x i16>* %18164, align 2, !tbaa !399
  %18166 = shufflevector <16 x i16> %18162, <16 x i16> %18165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18167 = add nsw i64 %18012, %.pre-phi3484
  %18168 = getelementptr inbounds i16, i16* %blur_x841, i64 %18167
  %18169 = bitcast i16* %18168 to <16 x i16>*
  %18170 = load <16 x i16>, <16 x i16>* %18169, align 2, !tbaa !399
  %18171 = getelementptr inbounds i16, i16* %18168, i64 16
  %18172 = bitcast i16* %18171 to <16 x i16>*
  %18173 = load <16 x i16>, <16 x i16>* %18172, align 2, !tbaa !399
  %18174 = shufflevector <16 x i16> %18170, <16 x i16> %18173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18175 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18174, <32 x i16> %18166, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18176 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18158, <32 x i16> %18175, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18177 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18176, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18178 = shufflevector <32 x i16> %18177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18179 = add nsw i64 %18016, %.pre-phi3484
  %18180 = getelementptr inbounds i16, i16* %258, i64 %18179
  %18181 = bitcast i16* %18180 to <16 x i16>*
  store <16 x i16> %18178, <16 x i16>* %18181, align 2, !tbaa !401
  %18182 = shufflevector <32 x i16> %18177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18183 = getelementptr inbounds i16, i16* %18180, i64 16
  %18184 = bitcast i16* %18183 to <16 x i16>*
  store <16 x i16> %18182, <16 x i16>* %18184, align 2, !tbaa !401
  %indvars.iv.next3319 = add nuw nsw i64 %indvars.iv3318, 1
  %18185 = icmp eq i64 %indvars.iv.next3319, %zext3320
  br i1 %18185, label %"end for blur_y.s0.x.x.rebased1992", label %"for blur_y.s0.x.x.rebased1991"

"for blur_y.s0.x.x.rebased2007":                  ; preds = %"for blur_y.s0.x.x.rebased2007.preheader", %"consume blur_x2018"
  %blur_y.s0.x.x.rebased2009 = phi i32 [ %18260, %"consume blur_x2018" ], [ 0, %"for blur_y.s0.x.x.rebased2007.preheader" ]
  %18186 = add nsw i32 %blur_y.s0.x.x.rebased2009, %t1582776
  %a4940 = shl nsw i32 %18186, 5
  %18187 = icmp sgt i32 %t1603, %a4940
  %blur_y.s0.x.v0.base.s2010 = select i1 %18187, i32 %a4940, i32 %t1603
  %18188 = icmp slt i32 %18186, 1
  %18189 = icmp sgt i32 %194, %a4940
  %18190 = or i1 %18188, %18189
  br i1 %18190, label %"produce blur_x2015", label %"consume blur_x2018"

"end for blur_y.s0.x.x.rebased2008":              ; preds = %"consume blur_x2018", %"end for blur_y.s0.x.x.rebased1992"
  br i1 %225, label %"produce blur_x2022", label %after_bb2019

"produce blur_x2015":                             ; preds = %"for blur_y.s0.x.x.rebased2007"
  %18191 = icmp slt i32 %blur_y.s0.x.v0.base.s2010, %194
  %blur_x.s0.x.v1.base.s2016 = select i1 %18191, i32 %blur_y.s0.x.v0.base.s2010, i32 %194
  %t10772017 = add nsw i32 %472, %blur_x.s0.x.v1.base.s2016
  %18192 = sext i32 %t10772017 to i64
  %18193 = getelementptr inbounds i16, i16* %read_input784, i64 %18192
  %18194 = getelementptr inbounds i16, i16* %18193, i64 1
  %18195 = bitcast i16* %18194 to <16 x i16>*
  %18196 = load <16 x i16>, <16 x i16>* %18195, align 2, !tbaa !396
  %18197 = getelementptr inbounds i16, i16* %18193, i64 17
  %18198 = bitcast i16* %18197 to <16 x i16>*
  %18199 = load <16 x i16>, <16 x i16>* %18198, align 2, !tbaa !396
  %18200 = shufflevector <16 x i16> %18196, <16 x i16> %18199, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18201 = getelementptr inbounds i16, i16* %18193, i64 2
  %18202 = bitcast i16* %18201 to <16 x i16>*
  %18203 = load <16 x i16>, <16 x i16>* %18202, align 2, !tbaa !396
  %18204 = getelementptr inbounds i16, i16* %18193, i64 18
  %18205 = bitcast i16* %18204 to <16 x i16>*
  %18206 = load <16 x i16>, <16 x i16>* %18205, align 2, !tbaa !396
  %18207 = shufflevector <16 x i16> %18203, <16 x i16> %18206, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18208 = bitcast i16* %18193 to <16 x i16>*
  %18209 = load <16 x i16>, <16 x i16>* %18208, align 2, !tbaa !396
  %18210 = getelementptr inbounds i16, i16* %18193, i64 16
  %18211 = bitcast i16* %18210 to <16 x i16>*
  %18212 = load <16 x i16>, <16 x i16>* %18211, align 2, !tbaa !396
  %18213 = shufflevector <16 x i16> %18209, <16 x i16> %18212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18214 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18213, <32 x i16> %18207, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18215 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18200, <32 x i16> %18214, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18216 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18215, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18217 = shufflevector <32 x i16> %18216, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18218 = sext i32 %blur_x.s0.x.v1.base.s2016 to i64
  %18219 = add nsw i64 %18218, %18104
  %18220 = getelementptr inbounds i16, i16* %blur_x841, i64 %18219
  %18221 = bitcast i16* %18220 to <16 x i16>*
  store <16 x i16> %18217, <16 x i16>* %18221, align 2, !tbaa !399
  %18222 = shufflevector <32 x i16> %18216, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18223 = getelementptr inbounds i16, i16* %18220, i64 16
  %18224 = bitcast i16* %18223 to <16 x i16>*
  store <16 x i16> %18222, <16 x i16>* %18224, align 2, !tbaa !399
  br label %"consume blur_x2018"

"consume blur_x2018":                             ; preds = %"for blur_y.s0.x.x.rebased2007", %"produce blur_x2015"
  %18225 = sext i32 %blur_y.s0.x.v0.base.s2010 to i64
  %18226 = add nsw i64 %18107, %18225
  %18227 = getelementptr inbounds i16, i16* %blur_x841, i64 %18226
  %18228 = bitcast i16* %18227 to <16 x i16>*
  %18229 = load <16 x i16>, <16 x i16>* %18228, align 2, !tbaa !399
  %18230 = getelementptr inbounds i16, i16* %18227, i64 16
  %18231 = bitcast i16* %18230 to <16 x i16>*
  %18232 = load <16 x i16>, <16 x i16>* %18231, align 2, !tbaa !399
  %18233 = shufflevector <16 x i16> %18229, <16 x i16> %18232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18234 = add nsw i64 %18110, %18225
  %18235 = getelementptr inbounds i16, i16* %blur_x841, i64 %18234
  %18236 = bitcast i16* %18235 to <16 x i16>*
  %18237 = load <16 x i16>, <16 x i16>* %18236, align 2, !tbaa !399
  %18238 = getelementptr inbounds i16, i16* %18235, i64 16
  %18239 = bitcast i16* %18238 to <16 x i16>*
  %18240 = load <16 x i16>, <16 x i16>* %18239, align 2, !tbaa !399
  %18241 = shufflevector <16 x i16> %18237, <16 x i16> %18240, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18242 = add nsw i64 %18113, %18225
  %18243 = getelementptr inbounds i16, i16* %blur_x841, i64 %18242
  %18244 = bitcast i16* %18243 to <16 x i16>*
  %18245 = load <16 x i16>, <16 x i16>* %18244, align 2, !tbaa !399
  %18246 = getelementptr inbounds i16, i16* %18243, i64 16
  %18247 = bitcast i16* %18246 to <16 x i16>*
  %18248 = load <16 x i16>, <16 x i16>* %18247, align 2, !tbaa !399
  %18249 = shufflevector <16 x i16> %18245, <16 x i16> %18248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18250 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18249, <32 x i16> %18241, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18251 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18233, <32 x i16> %18250, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18252 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18251, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18253 = shufflevector <32 x i16> %18252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18254 = add nsw i64 %18117, %18225
  %18255 = getelementptr inbounds i16, i16* %258, i64 %18254
  %18256 = bitcast i16* %18255 to <16 x i16>*
  store <16 x i16> %18253, <16 x i16>* %18256, align 2, !tbaa !401
  %18257 = shufflevector <32 x i16> %18252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18258 = getelementptr inbounds i16, i16* %18255, i64 16
  %18259 = bitcast i16* %18258 to <16 x i16>*
  store <16 x i16> %18257, <16 x i16>* %18259, align 2, !tbaa !401
  %18260 = add nuw nsw i32 %blur_y.s0.x.x.rebased2009, 1
  %.not2458 = icmp eq i32 %18260, %t1639860
  br i1 %.not2458, label %"end for blur_y.s0.x.x.rebased2008", label %"for blur_y.s0.x.x.rebased2007"

after_bb2019:                                     ; preds = %"end for blur_y.s0.x.x.rebased2008", %"produce blur_x2022"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2034.preheader", label %"end for blur_y.s0.x.x.rebased2035", !prof !386

"for blur_y.s0.x.x.rebased2034.preheader":        ; preds = %after_bb2019
  %18261 = sext i32 %t1638848 to i64
  %18262 = zext i32 %.pre-phi3434 to i64
  %18263 = mul nsw i64 %18262, %322
  %18264 = sub nsw i64 %18263, %293
  %18265 = zext i32 %.pre-phi3420 to i64
  %18266 = mul nsw i64 %18265, %322
  %18267 = sub nsw i64 %18266, %293
  %18268 = zext i32 %.pre-phi3428 to i64
  %18269 = mul nsw i64 %18268, %322
  %18270 = sub nsw i64 %18269, %293
  %18271 = sext i32 %a365 to i64
  %18272 = add nsw i64 %18271, 26
  %18273 = mul nsw i64 %18272, %319
  %18274 = add nsw i64 %18273, %323
  br label %"for blur_y.s0.x.x.rebased2034"

"produce blur_x2022":                             ; preds = %"end for blur_y.s0.x.x.rebased2008"
  %18275 = getelementptr inbounds i16, i16* %read_input784, i64 %476
  %18276 = getelementptr inbounds i16, i16* %18275, i64 -31
  %18277 = bitcast i16* %18276 to <16 x i16>*
  %18278 = load <16 x i16>, <16 x i16>* %18277, align 2, !tbaa !396
  %18279 = getelementptr inbounds i16, i16* %18275, i64 -15
  %18280 = bitcast i16* %18279 to <16 x i16>*
  %18281 = load <16 x i16>, <16 x i16>* %18280, align 2, !tbaa !396
  %18282 = shufflevector <16 x i16> %18278, <16 x i16> %18281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18283 = getelementptr inbounds i16, i16* %18275, i64 -30
  %18284 = bitcast i16* %18283 to <16 x i16>*
  %18285 = load <16 x i16>, <16 x i16>* %18284, align 2, !tbaa !396
  %18286 = getelementptr inbounds i16, i16* %18275, i64 -14
  %18287 = bitcast i16* %18286 to <16 x i16>*
  %18288 = load <16 x i16>, <16 x i16>* %18287, align 2, !tbaa !396
  %18289 = shufflevector <16 x i16> %18285, <16 x i16> %18288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18290 = getelementptr inbounds i16, i16* %18275, i64 -32
  %18291 = bitcast i16* %18290 to <16 x i16>*
  %18292 = load <16 x i16>, <16 x i16>* %18291, align 2, !tbaa !396
  %18293 = getelementptr inbounds i16, i16* %18275, i64 -16
  %18294 = bitcast i16* %18293 to <16 x i16>*
  %18295 = load <16 x i16>, <16 x i16>* %18294, align 2, !tbaa !396
  %18296 = shufflevector <16 x i16> %18292, <16 x i16> %18295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18297 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18296, <32 x i16> %18289, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18298 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18282, <32 x i16> %18297, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18299 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18298, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18300 = shufflevector <32 x i16> %18299, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18301 = zext i32 %.pre-phi3420 to i64
  %18302 = mul nsw i64 %294, %18301
  %18303 = add nsw i64 %296, %18302
  %18304 = getelementptr inbounds i16, i16* %blur_x841, i64 %18303
  %18305 = getelementptr inbounds i16, i16* %18304, i64 -32
  %18306 = bitcast i16* %18305 to <16 x i16>*
  store <16 x i16> %18300, <16 x i16>* %18306, align 2, !tbaa !399
  %18307 = shufflevector <32 x i16> %18299, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18308 = getelementptr inbounds i16, i16* %18304, i64 -16
  %18309 = bitcast i16* %18308 to <16 x i16>*
  store <16 x i16> %18307, <16 x i16>* %18309, align 2, !tbaa !399
  %18310 = zext i32 %.pre-phi3434 to i64
  %18311 = mul nsw i64 %18310, %318
  %18312 = add nsw i64 %18311, %291
  %18313 = getelementptr inbounds i16, i16* %blur_x841, i64 %18312
  %18314 = getelementptr inbounds i16, i16* %18313, i64 -32
  %18315 = bitcast i16* %18314 to <16 x i16>*
  %18316 = load <16 x i16>, <16 x i16>* %18315, align 2, !tbaa !399
  %18317 = getelementptr inbounds i16, i16* %18313, i64 -16
  %18318 = bitcast i16* %18317 to <16 x i16>*
  %18319 = load <16 x i16>, <16 x i16>* %18318, align 2, !tbaa !399
  %18320 = shufflevector <16 x i16> %18316, <16 x i16> %18319, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18321 = mul nsw i64 %18301, %318
  %18322 = add nsw i64 %18321, %291
  %18323 = getelementptr inbounds i16, i16* %blur_x841, i64 %18322
  %18324 = getelementptr inbounds i16, i16* %18323, i64 -32
  %18325 = bitcast i16* %18324 to <16 x i16>*
  %18326 = load <16 x i16>, <16 x i16>* %18325, align 2, !tbaa !399
  %18327 = getelementptr inbounds i16, i16* %18323, i64 -16
  %18328 = bitcast i16* %18327 to <16 x i16>*
  %18329 = load <16 x i16>, <16 x i16>* %18328, align 2, !tbaa !399
  %18330 = shufflevector <16 x i16> %18326, <16 x i16> %18329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18331 = zext i32 %.pre-phi3428 to i64
  %18332 = mul nsw i64 %18331, %318
  %18333 = add nsw i64 %18332, %291
  %18334 = getelementptr inbounds i16, i16* %blur_x841, i64 %18333
  %18335 = getelementptr inbounds i16, i16* %18334, i64 -32
  %18336 = bitcast i16* %18335 to <16 x i16>*
  %18337 = load <16 x i16>, <16 x i16>* %18336, align 2, !tbaa !399
  %18338 = getelementptr inbounds i16, i16* %18334, i64 -16
  %18339 = bitcast i16* %18338 to <16 x i16>*
  %18340 = load <16 x i16>, <16 x i16>* %18339, align 2, !tbaa !399
  %18341 = shufflevector <16 x i16> %18337, <16 x i16> %18340, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18342 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18341, <32 x i16> %18330, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18343 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18320, <32 x i16> %18342, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18344 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18343, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18345 = shufflevector <32 x i16> %18344, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18346 = sext i32 %a365 to i64
  %18347 = add nsw i64 %18346, 26
  %18348 = mul nsw i64 %18347, %319
  %18349 = add nsw i64 %321, %18348
  %18350 = getelementptr inbounds i16, i16* %258, i64 %18349
  %18351 = getelementptr inbounds i16, i16* %18350, i64 -32
  %18352 = bitcast i16* %18351 to <16 x i16>*
  store <16 x i16> %18345, <16 x i16>* %18352, align 2, !tbaa !401
  %18353 = shufflevector <32 x i16> %18344, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18354 = getelementptr inbounds i16, i16* %18350, i64 -16
  %18355 = bitcast i16* %18354 to <16 x i16>*
  store <16 x i16> %18353, <16 x i16>* %18355, align 2, !tbaa !401
  br label %after_bb2019

"for blur_y.s0.x.x.rebased2034":                  ; preds = %"for blur_y.s0.x.x.rebased2034.preheader", %"consume blur_x2042"
  %indvars.iv3321 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2034.preheader" ], [ %indvars.iv.next3322, %"consume blur_x2042" ]
  %18356 = add nsw i64 %indvars.iv3321, %298
  %18357 = icmp slt i64 %18356, 1
  %18358 = trunc i64 %18356 to i32
  %18359 = shl nsw i32 %18358, 5
  %18360 = icmp sgt i32 %194, %18359
  %18361 = or i1 %18357, %18360
  br i1 %18361, label %"produce blur_x2040", label %"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge"

"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2034"
  %.pre3485 = shl nsw i64 %18356, 5
  br label %"consume blur_x2042"

"end for blur_y.s0.x.x.rebased2035":              ; preds = %"consume blur_x2042", %after_bb2019
  br i1 %299, label %"for blur_y.s0.x.x.rebased2050.preheader", label %"end for blur_y.s0.x.x.rebased2051", !prof !386

"for blur_y.s0.x.x.rebased2050.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2035"
  %18362 = sext i32 %t1638848 to i64
  %18363 = zext i32 %.pre-phi3434 to i64
  %18364 = mul nsw i64 %18363, %322
  %18365 = sub nsw i64 %18364, %293
  %18366 = zext i32 %.pre-phi3420 to i64
  %18367 = mul nsw i64 %18366, %322
  %18368 = sub nsw i64 %18367, %293
  %18369 = zext i32 %.pre-phi3428 to i64
  %18370 = mul nsw i64 %18369, %322
  %18371 = sub nsw i64 %18370, %293
  %18372 = sext i32 %a365 to i64
  %18373 = add nsw i64 %18372, 26
  %18374 = mul nsw i64 %18373, %319
  %18375 = add nsw i64 %18374, %323
  br label %"for blur_y.s0.x.x.rebased2050"

"produce blur_x2040":                             ; preds = %"for blur_y.s0.x.x.rebased2034"
  %t10882041 = add nsw i32 %478, %18359
  %18376 = sext i32 %t10882041 to i64
  %18377 = getelementptr inbounds i16, i16* %read_input784, i64 %18376
  %18378 = getelementptr inbounds i16, i16* %18377, i64 1
  %18379 = bitcast i16* %18378 to <16 x i16>*
  %18380 = load <16 x i16>, <16 x i16>* %18379, align 2, !tbaa !396
  %18381 = getelementptr inbounds i16, i16* %18377, i64 17
  %18382 = bitcast i16* %18381 to <16 x i16>*
  %18383 = load <16 x i16>, <16 x i16>* %18382, align 2, !tbaa !396
  %18384 = shufflevector <16 x i16> %18380, <16 x i16> %18383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18385 = getelementptr inbounds i16, i16* %18377, i64 2
  %18386 = bitcast i16* %18385 to <16 x i16>*
  %18387 = load <16 x i16>, <16 x i16>* %18386, align 2, !tbaa !396
  %18388 = getelementptr inbounds i16, i16* %18377, i64 18
  %18389 = bitcast i16* %18388 to <16 x i16>*
  %18390 = load <16 x i16>, <16 x i16>* %18389, align 2, !tbaa !396
  %18391 = shufflevector <16 x i16> %18387, <16 x i16> %18390, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18392 = bitcast i16* %18377 to <16 x i16>*
  %18393 = load <16 x i16>, <16 x i16>* %18392, align 2, !tbaa !396
  %18394 = getelementptr inbounds i16, i16* %18377, i64 16
  %18395 = bitcast i16* %18394 to <16 x i16>*
  %18396 = load <16 x i16>, <16 x i16>* %18395, align 2, !tbaa !396
  %18397 = shufflevector <16 x i16> %18393, <16 x i16> %18396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18398 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18397, <32 x i16> %18391, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18399 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18384, <32 x i16> %18398, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18400 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18399, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18401 = shufflevector <32 x i16> %18400, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18402 = shl nsw i64 %18356, 5
  %18403 = add nsw i64 %18402, %18261
  %18404 = getelementptr inbounds i16, i16* %blur_x841, i64 %18403
  %18405 = bitcast i16* %18404 to <16 x i16>*
  store <16 x i16> %18401, <16 x i16>* %18405, align 2, !tbaa !399
  %18406 = shufflevector <32 x i16> %18400, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18407 = getelementptr inbounds i16, i16* %18404, i64 16
  %18408 = bitcast i16* %18407 to <16 x i16>*
  store <16 x i16> %18406, <16 x i16>* %18408, align 2, !tbaa !399
  br label %"consume blur_x2042"

"consume blur_x2042":                             ; preds = %"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge", %"produce blur_x2040"
  %.pre-phi3486 = phi i64 [ %.pre3485, %"for blur_y.s0.x.x.rebased2034.consume blur_x2042_crit_edge" ], [ %18402, %"produce blur_x2040" ]
  %18409 = add nsw i64 %18264, %.pre-phi3486
  %18410 = getelementptr inbounds i16, i16* %blur_x841, i64 %18409
  %18411 = bitcast i16* %18410 to <16 x i16>*
  %18412 = load <16 x i16>, <16 x i16>* %18411, align 2, !tbaa !399
  %18413 = getelementptr inbounds i16, i16* %18410, i64 16
  %18414 = bitcast i16* %18413 to <16 x i16>*
  %18415 = load <16 x i16>, <16 x i16>* %18414, align 2, !tbaa !399
  %18416 = shufflevector <16 x i16> %18412, <16 x i16> %18415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18417 = add nsw i64 %18267, %.pre-phi3486
  %18418 = getelementptr inbounds i16, i16* %blur_x841, i64 %18417
  %18419 = bitcast i16* %18418 to <16 x i16>*
  %18420 = load <16 x i16>, <16 x i16>* %18419, align 2, !tbaa !399
  %18421 = getelementptr inbounds i16, i16* %18418, i64 16
  %18422 = bitcast i16* %18421 to <16 x i16>*
  %18423 = load <16 x i16>, <16 x i16>* %18422, align 2, !tbaa !399
  %18424 = shufflevector <16 x i16> %18420, <16 x i16> %18423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18425 = add nsw i64 %18270, %.pre-phi3486
  %18426 = getelementptr inbounds i16, i16* %blur_x841, i64 %18425
  %18427 = bitcast i16* %18426 to <16 x i16>*
  %18428 = load <16 x i16>, <16 x i16>* %18427, align 2, !tbaa !399
  %18429 = getelementptr inbounds i16, i16* %18426, i64 16
  %18430 = bitcast i16* %18429 to <16 x i16>*
  %18431 = load <16 x i16>, <16 x i16>* %18430, align 2, !tbaa !399
  %18432 = shufflevector <16 x i16> %18428, <16 x i16> %18431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18433 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18432, <32 x i16> %18424, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18434 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18416, <32 x i16> %18433, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18435 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18434, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18436 = shufflevector <32 x i16> %18435, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18437 = add nsw i64 %18274, %.pre-phi3486
  %18438 = getelementptr inbounds i16, i16* %258, i64 %18437
  %18439 = bitcast i16* %18438 to <16 x i16>*
  store <16 x i16> %18436, <16 x i16>* %18439, align 2, !tbaa !401
  %18440 = shufflevector <32 x i16> %18435, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18441 = getelementptr inbounds i16, i16* %18438, i64 16
  %18442 = bitcast i16* %18441 to <16 x i16>*
  store <16 x i16> %18440, <16 x i16>* %18442, align 2, !tbaa !401
  %indvars.iv.next3322 = add nuw nsw i64 %indvars.iv3321, 1
  %18443 = icmp eq i64 %indvars.iv.next3322, %zext3323
  br i1 %18443, label %"end for blur_y.s0.x.x.rebased2035", label %"for blur_y.s0.x.x.rebased2034"

"for blur_y.s0.x.x.rebased2050":                  ; preds = %"for blur_y.s0.x.x.rebased2050.preheader", %"consume blur_x2061"
  %blur_y.s0.x.x.rebased2052 = phi i32 [ %18518, %"consume blur_x2061" ], [ 0, %"for blur_y.s0.x.x.rebased2050.preheader" ]
  %18444 = add nsw i32 %blur_y.s0.x.x.rebased2052, %t1582776
  %a5097 = shl nsw i32 %18444, 5
  %18445 = icmp sgt i32 %t1603, %a5097
  %blur_y.s0.x.v0.base.s2053 = select i1 %18445, i32 %a5097, i32 %t1603
  %18446 = icmp slt i32 %18444, 1
  %18447 = icmp sgt i32 %194, %a5097
  %18448 = or i1 %18446, %18447
  br i1 %18448, label %"produce blur_x2058", label %"consume blur_x2061"

"end for blur_y.s0.x.x.rebased2051":              ; preds = %"consume blur_x2061", %"end for blur_y.s0.x.x.rebased2035"
  br i1 %225, label %"produce blur_x2065", label %after_bb2062

"produce blur_x2058":                             ; preds = %"for blur_y.s0.x.x.rebased2050"
  %18449 = icmp slt i32 %blur_y.s0.x.v0.base.s2053, %194
  %blur_x.s0.x.v1.base.s2059 = select i1 %18449, i32 %blur_y.s0.x.v0.base.s2053, i32 %194
  %t10932060 = add nsw i32 %478, %blur_x.s0.x.v1.base.s2059
  %18450 = sext i32 %t10932060 to i64
  %18451 = getelementptr inbounds i16, i16* %read_input784, i64 %18450
  %18452 = getelementptr inbounds i16, i16* %18451, i64 1
  %18453 = bitcast i16* %18452 to <16 x i16>*
  %18454 = load <16 x i16>, <16 x i16>* %18453, align 2, !tbaa !396
  %18455 = getelementptr inbounds i16, i16* %18451, i64 17
  %18456 = bitcast i16* %18455 to <16 x i16>*
  %18457 = load <16 x i16>, <16 x i16>* %18456, align 2, !tbaa !396
  %18458 = shufflevector <16 x i16> %18454, <16 x i16> %18457, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18459 = getelementptr inbounds i16, i16* %18451, i64 2
  %18460 = bitcast i16* %18459 to <16 x i16>*
  %18461 = load <16 x i16>, <16 x i16>* %18460, align 2, !tbaa !396
  %18462 = getelementptr inbounds i16, i16* %18451, i64 18
  %18463 = bitcast i16* %18462 to <16 x i16>*
  %18464 = load <16 x i16>, <16 x i16>* %18463, align 2, !tbaa !396
  %18465 = shufflevector <16 x i16> %18461, <16 x i16> %18464, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18466 = bitcast i16* %18451 to <16 x i16>*
  %18467 = load <16 x i16>, <16 x i16>* %18466, align 2, !tbaa !396
  %18468 = getelementptr inbounds i16, i16* %18451, i64 16
  %18469 = bitcast i16* %18468 to <16 x i16>*
  %18470 = load <16 x i16>, <16 x i16>* %18469, align 2, !tbaa !396
  %18471 = shufflevector <16 x i16> %18467, <16 x i16> %18470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18472 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18471, <32 x i16> %18465, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18473 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18458, <32 x i16> %18472, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18474 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18473, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18475 = shufflevector <32 x i16> %18474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18476 = sext i32 %blur_x.s0.x.v1.base.s2059 to i64
  %18477 = add nsw i64 %18476, %18362
  %18478 = getelementptr inbounds i16, i16* %blur_x841, i64 %18477
  %18479 = bitcast i16* %18478 to <16 x i16>*
  store <16 x i16> %18475, <16 x i16>* %18479, align 2, !tbaa !399
  %18480 = shufflevector <32 x i16> %18474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18481 = getelementptr inbounds i16, i16* %18478, i64 16
  %18482 = bitcast i16* %18481 to <16 x i16>*
  store <16 x i16> %18480, <16 x i16>* %18482, align 2, !tbaa !399
  br label %"consume blur_x2061"

"consume blur_x2061":                             ; preds = %"for blur_y.s0.x.x.rebased2050", %"produce blur_x2058"
  %18483 = sext i32 %blur_y.s0.x.v0.base.s2053 to i64
  %18484 = add nsw i64 %18365, %18483
  %18485 = getelementptr inbounds i16, i16* %blur_x841, i64 %18484
  %18486 = bitcast i16* %18485 to <16 x i16>*
  %18487 = load <16 x i16>, <16 x i16>* %18486, align 2, !tbaa !399
  %18488 = getelementptr inbounds i16, i16* %18485, i64 16
  %18489 = bitcast i16* %18488 to <16 x i16>*
  %18490 = load <16 x i16>, <16 x i16>* %18489, align 2, !tbaa !399
  %18491 = shufflevector <16 x i16> %18487, <16 x i16> %18490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18492 = add nsw i64 %18368, %18483
  %18493 = getelementptr inbounds i16, i16* %blur_x841, i64 %18492
  %18494 = bitcast i16* %18493 to <16 x i16>*
  %18495 = load <16 x i16>, <16 x i16>* %18494, align 2, !tbaa !399
  %18496 = getelementptr inbounds i16, i16* %18493, i64 16
  %18497 = bitcast i16* %18496 to <16 x i16>*
  %18498 = load <16 x i16>, <16 x i16>* %18497, align 2, !tbaa !399
  %18499 = shufflevector <16 x i16> %18495, <16 x i16> %18498, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18500 = add nsw i64 %18371, %18483
  %18501 = getelementptr inbounds i16, i16* %blur_x841, i64 %18500
  %18502 = bitcast i16* %18501 to <16 x i16>*
  %18503 = load <16 x i16>, <16 x i16>* %18502, align 2, !tbaa !399
  %18504 = getelementptr inbounds i16, i16* %18501, i64 16
  %18505 = bitcast i16* %18504 to <16 x i16>*
  %18506 = load <16 x i16>, <16 x i16>* %18505, align 2, !tbaa !399
  %18507 = shufflevector <16 x i16> %18503, <16 x i16> %18506, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18508 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18507, <32 x i16> %18499, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18509 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18491, <32 x i16> %18508, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18510 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18509, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18511 = shufflevector <32 x i16> %18510, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18512 = add nsw i64 %18375, %18483
  %18513 = getelementptr inbounds i16, i16* %258, i64 %18512
  %18514 = bitcast i16* %18513 to <16 x i16>*
  store <16 x i16> %18511, <16 x i16>* %18514, align 2, !tbaa !401
  %18515 = shufflevector <32 x i16> %18510, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18516 = getelementptr inbounds i16, i16* %18513, i64 16
  %18517 = bitcast i16* %18516 to <16 x i16>*
  store <16 x i16> %18515, <16 x i16>* %18517, align 2, !tbaa !401
  %18518 = add nuw nsw i32 %blur_y.s0.x.x.rebased2052, 1
  %.not2454 = icmp eq i32 %18518, %t1639860
  br i1 %.not2454, label %"end for blur_y.s0.x.x.rebased2051", label %"for blur_y.s0.x.x.rebased2050"

after_bb2062:                                     ; preds = %"end for blur_y.s0.x.x.rebased2051", %"produce blur_x2065"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2077.preheader", label %"end for blur_y.s0.x.x.rebased2078", !prof !386

"for blur_y.s0.x.x.rebased2077.preheader":        ; preds = %after_bb2062
  %18519 = sext i32 %t1644876 to i64
  %18520 = zext i32 %.pre-phi3420 to i64
  %18521 = mul nsw i64 %18520, %322
  %18522 = sub nsw i64 %18521, %293
  %18523 = zext i32 %.pre-phi3424 to i64
  %18524 = mul nsw i64 %18523, %322
  %18525 = sub nsw i64 %18524, %293
  %18526 = zext i32 %.pre-phi3434 to i64
  %18527 = mul nsw i64 %18526, %322
  %18528 = sub nsw i64 %18527, %293
  %18529 = sext i32 %a365 to i64
  %18530 = add nsw i64 %18529, 27
  %18531 = mul nsw i64 %18530, %319
  %18532 = add nsw i64 %18531, %323
  br label %"for blur_y.s0.x.x.rebased2077"

"produce blur_x2065":                             ; preds = %"end for blur_y.s0.x.x.rebased2051"
  %18533 = getelementptr inbounds i16, i16* %read_input784, i64 %482
  %18534 = getelementptr inbounds i16, i16* %18533, i64 -31
  %18535 = bitcast i16* %18534 to <16 x i16>*
  %18536 = load <16 x i16>, <16 x i16>* %18535, align 2, !tbaa !396
  %18537 = getelementptr inbounds i16, i16* %18533, i64 -15
  %18538 = bitcast i16* %18537 to <16 x i16>*
  %18539 = load <16 x i16>, <16 x i16>* %18538, align 2, !tbaa !396
  %18540 = shufflevector <16 x i16> %18536, <16 x i16> %18539, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18541 = getelementptr inbounds i16, i16* %18533, i64 -30
  %18542 = bitcast i16* %18541 to <16 x i16>*
  %18543 = load <16 x i16>, <16 x i16>* %18542, align 2, !tbaa !396
  %18544 = getelementptr inbounds i16, i16* %18533, i64 -14
  %18545 = bitcast i16* %18544 to <16 x i16>*
  %18546 = load <16 x i16>, <16 x i16>* %18545, align 2, !tbaa !396
  %18547 = shufflevector <16 x i16> %18543, <16 x i16> %18546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18548 = getelementptr inbounds i16, i16* %18533, i64 -32
  %18549 = bitcast i16* %18548 to <16 x i16>*
  %18550 = load <16 x i16>, <16 x i16>* %18549, align 2, !tbaa !396
  %18551 = getelementptr inbounds i16, i16* %18533, i64 -16
  %18552 = bitcast i16* %18551 to <16 x i16>*
  %18553 = load <16 x i16>, <16 x i16>* %18552, align 2, !tbaa !396
  %18554 = shufflevector <16 x i16> %18550, <16 x i16> %18553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18555 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18554, <32 x i16> %18547, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18556 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18540, <32 x i16> %18555, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18557 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18556, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18558 = shufflevector <32 x i16> %18557, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18559 = zext i32 %.pre-phi3424 to i64
  %18560 = mul nsw i64 %294, %18559
  %18561 = add nsw i64 %296, %18560
  %18562 = getelementptr inbounds i16, i16* %blur_x841, i64 %18561
  %18563 = getelementptr inbounds i16, i16* %18562, i64 -32
  %18564 = bitcast i16* %18563 to <16 x i16>*
  store <16 x i16> %18558, <16 x i16>* %18564, align 2, !tbaa !399
  %18565 = shufflevector <32 x i16> %18557, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18566 = getelementptr inbounds i16, i16* %18562, i64 -16
  %18567 = bitcast i16* %18566 to <16 x i16>*
  store <16 x i16> %18565, <16 x i16>* %18567, align 2, !tbaa !399
  %18568 = zext i32 %.pre-phi3420 to i64
  %18569 = mul nsw i64 %18568, %318
  %18570 = add nsw i64 %18569, %291
  %18571 = getelementptr inbounds i16, i16* %blur_x841, i64 %18570
  %18572 = getelementptr inbounds i16, i16* %18571, i64 -32
  %18573 = bitcast i16* %18572 to <16 x i16>*
  %18574 = load <16 x i16>, <16 x i16>* %18573, align 2, !tbaa !399
  %18575 = getelementptr inbounds i16, i16* %18571, i64 -16
  %18576 = bitcast i16* %18575 to <16 x i16>*
  %18577 = load <16 x i16>, <16 x i16>* %18576, align 2, !tbaa !399
  %18578 = shufflevector <16 x i16> %18574, <16 x i16> %18577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18579 = mul nsw i64 %18559, %318
  %18580 = add nsw i64 %18579, %291
  %18581 = getelementptr inbounds i16, i16* %blur_x841, i64 %18580
  %18582 = getelementptr inbounds i16, i16* %18581, i64 -32
  %18583 = bitcast i16* %18582 to <16 x i16>*
  %18584 = load <16 x i16>, <16 x i16>* %18583, align 2, !tbaa !399
  %18585 = getelementptr inbounds i16, i16* %18581, i64 -16
  %18586 = bitcast i16* %18585 to <16 x i16>*
  %18587 = load <16 x i16>, <16 x i16>* %18586, align 2, !tbaa !399
  %18588 = shufflevector <16 x i16> %18584, <16 x i16> %18587, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18589 = zext i32 %.pre-phi3434 to i64
  %18590 = mul nsw i64 %18589, %318
  %18591 = add nsw i64 %18590, %291
  %18592 = getelementptr inbounds i16, i16* %blur_x841, i64 %18591
  %18593 = getelementptr inbounds i16, i16* %18592, i64 -32
  %18594 = bitcast i16* %18593 to <16 x i16>*
  %18595 = load <16 x i16>, <16 x i16>* %18594, align 2, !tbaa !399
  %18596 = getelementptr inbounds i16, i16* %18592, i64 -16
  %18597 = bitcast i16* %18596 to <16 x i16>*
  %18598 = load <16 x i16>, <16 x i16>* %18597, align 2, !tbaa !399
  %18599 = shufflevector <16 x i16> %18595, <16 x i16> %18598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18600 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18599, <32 x i16> %18588, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18601 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18578, <32 x i16> %18600, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18602 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18601, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18603 = shufflevector <32 x i16> %18602, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18604 = sext i32 %a365 to i64
  %18605 = add nsw i64 %18604, 27
  %18606 = mul nsw i64 %18605, %319
  %18607 = add nsw i64 %321, %18606
  %18608 = getelementptr inbounds i16, i16* %258, i64 %18607
  %18609 = getelementptr inbounds i16, i16* %18608, i64 -32
  %18610 = bitcast i16* %18609 to <16 x i16>*
  store <16 x i16> %18603, <16 x i16>* %18610, align 2, !tbaa !401
  %18611 = shufflevector <32 x i16> %18602, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18612 = getelementptr inbounds i16, i16* %18608, i64 -16
  %18613 = bitcast i16* %18612 to <16 x i16>*
  store <16 x i16> %18611, <16 x i16>* %18613, align 2, !tbaa !401
  br label %after_bb2062

"for blur_y.s0.x.x.rebased2077":                  ; preds = %"for blur_y.s0.x.x.rebased2077.preheader", %"consume blur_x2085"
  %indvars.iv3324 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2077.preheader" ], [ %indvars.iv.next3325, %"consume blur_x2085" ]
  %18614 = add nsw i64 %indvars.iv3324, %298
  %18615 = icmp slt i64 %18614, 1
  %18616 = trunc i64 %18614 to i32
  %18617 = shl nsw i32 %18616, 5
  %18618 = icmp sgt i32 %194, %18617
  %18619 = or i1 %18615, %18618
  br i1 %18619, label %"produce blur_x2083", label %"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge"

"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2077"
  %.pre3487 = shl nsw i64 %18614, 5
  br label %"consume blur_x2085"

"end for blur_y.s0.x.x.rebased2078":              ; preds = %"consume blur_x2085", %after_bb2062
  br i1 %299, label %"for blur_y.s0.x.x.rebased2093.preheader", label %"end for blur_y.s0.x.x.rebased2094", !prof !386

"for blur_y.s0.x.x.rebased2093.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2078"
  %18620 = sext i32 %t1644876 to i64
  %18621 = zext i32 %.pre-phi3420 to i64
  %18622 = mul nsw i64 %18621, %322
  %18623 = sub nsw i64 %18622, %293
  %18624 = zext i32 %.pre-phi3424 to i64
  %18625 = mul nsw i64 %18624, %322
  %18626 = sub nsw i64 %18625, %293
  %18627 = zext i32 %.pre-phi3434 to i64
  %18628 = mul nsw i64 %18627, %322
  %18629 = sub nsw i64 %18628, %293
  %18630 = sext i32 %a365 to i64
  %18631 = add nsw i64 %18630, 27
  %18632 = mul nsw i64 %18631, %319
  %18633 = add nsw i64 %18632, %323
  br label %"for blur_y.s0.x.x.rebased2093"

"produce blur_x2083":                             ; preds = %"for blur_y.s0.x.x.rebased2077"
  %t11042084 = add nsw i32 %484, %18617
  %18634 = sext i32 %t11042084 to i64
  %18635 = getelementptr inbounds i16, i16* %read_input784, i64 %18634
  %18636 = getelementptr inbounds i16, i16* %18635, i64 1
  %18637 = bitcast i16* %18636 to <16 x i16>*
  %18638 = load <16 x i16>, <16 x i16>* %18637, align 2, !tbaa !396
  %18639 = getelementptr inbounds i16, i16* %18635, i64 17
  %18640 = bitcast i16* %18639 to <16 x i16>*
  %18641 = load <16 x i16>, <16 x i16>* %18640, align 2, !tbaa !396
  %18642 = shufflevector <16 x i16> %18638, <16 x i16> %18641, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18643 = getelementptr inbounds i16, i16* %18635, i64 2
  %18644 = bitcast i16* %18643 to <16 x i16>*
  %18645 = load <16 x i16>, <16 x i16>* %18644, align 2, !tbaa !396
  %18646 = getelementptr inbounds i16, i16* %18635, i64 18
  %18647 = bitcast i16* %18646 to <16 x i16>*
  %18648 = load <16 x i16>, <16 x i16>* %18647, align 2, !tbaa !396
  %18649 = shufflevector <16 x i16> %18645, <16 x i16> %18648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18650 = bitcast i16* %18635 to <16 x i16>*
  %18651 = load <16 x i16>, <16 x i16>* %18650, align 2, !tbaa !396
  %18652 = getelementptr inbounds i16, i16* %18635, i64 16
  %18653 = bitcast i16* %18652 to <16 x i16>*
  %18654 = load <16 x i16>, <16 x i16>* %18653, align 2, !tbaa !396
  %18655 = shufflevector <16 x i16> %18651, <16 x i16> %18654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18656 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18655, <32 x i16> %18649, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18657 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18642, <32 x i16> %18656, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18658 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18657, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18659 = shufflevector <32 x i16> %18658, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18660 = shl nsw i64 %18614, 5
  %18661 = add nsw i64 %18660, %18519
  %18662 = getelementptr inbounds i16, i16* %blur_x841, i64 %18661
  %18663 = bitcast i16* %18662 to <16 x i16>*
  store <16 x i16> %18659, <16 x i16>* %18663, align 2, !tbaa !399
  %18664 = shufflevector <32 x i16> %18658, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18665 = getelementptr inbounds i16, i16* %18662, i64 16
  %18666 = bitcast i16* %18665 to <16 x i16>*
  store <16 x i16> %18664, <16 x i16>* %18666, align 2, !tbaa !399
  br label %"consume blur_x2085"

"consume blur_x2085":                             ; preds = %"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge", %"produce blur_x2083"
  %.pre-phi3488 = phi i64 [ %.pre3487, %"for blur_y.s0.x.x.rebased2077.consume blur_x2085_crit_edge" ], [ %18660, %"produce blur_x2083" ]
  %18667 = add nsw i64 %18522, %.pre-phi3488
  %18668 = getelementptr inbounds i16, i16* %blur_x841, i64 %18667
  %18669 = bitcast i16* %18668 to <16 x i16>*
  %18670 = load <16 x i16>, <16 x i16>* %18669, align 2, !tbaa !399
  %18671 = getelementptr inbounds i16, i16* %18668, i64 16
  %18672 = bitcast i16* %18671 to <16 x i16>*
  %18673 = load <16 x i16>, <16 x i16>* %18672, align 2, !tbaa !399
  %18674 = shufflevector <16 x i16> %18670, <16 x i16> %18673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18675 = add nsw i64 %18525, %.pre-phi3488
  %18676 = getelementptr inbounds i16, i16* %blur_x841, i64 %18675
  %18677 = bitcast i16* %18676 to <16 x i16>*
  %18678 = load <16 x i16>, <16 x i16>* %18677, align 2, !tbaa !399
  %18679 = getelementptr inbounds i16, i16* %18676, i64 16
  %18680 = bitcast i16* %18679 to <16 x i16>*
  %18681 = load <16 x i16>, <16 x i16>* %18680, align 2, !tbaa !399
  %18682 = shufflevector <16 x i16> %18678, <16 x i16> %18681, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18683 = add nsw i64 %18528, %.pre-phi3488
  %18684 = getelementptr inbounds i16, i16* %blur_x841, i64 %18683
  %18685 = bitcast i16* %18684 to <16 x i16>*
  %18686 = load <16 x i16>, <16 x i16>* %18685, align 2, !tbaa !399
  %18687 = getelementptr inbounds i16, i16* %18684, i64 16
  %18688 = bitcast i16* %18687 to <16 x i16>*
  %18689 = load <16 x i16>, <16 x i16>* %18688, align 2, !tbaa !399
  %18690 = shufflevector <16 x i16> %18686, <16 x i16> %18689, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18691 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18690, <32 x i16> %18682, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18692 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18674, <32 x i16> %18691, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18693 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18692, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18694 = shufflevector <32 x i16> %18693, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18695 = add nsw i64 %18532, %.pre-phi3488
  %18696 = getelementptr inbounds i16, i16* %258, i64 %18695
  %18697 = bitcast i16* %18696 to <16 x i16>*
  store <16 x i16> %18694, <16 x i16>* %18697, align 2, !tbaa !401
  %18698 = shufflevector <32 x i16> %18693, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18699 = getelementptr inbounds i16, i16* %18696, i64 16
  %18700 = bitcast i16* %18699 to <16 x i16>*
  store <16 x i16> %18698, <16 x i16>* %18700, align 2, !tbaa !401
  %indvars.iv.next3325 = add nuw nsw i64 %indvars.iv3324, 1
  %18701 = icmp eq i64 %indvars.iv.next3325, %zext3326
  br i1 %18701, label %"end for blur_y.s0.x.x.rebased2078", label %"for blur_y.s0.x.x.rebased2077"

"for blur_y.s0.x.x.rebased2093":                  ; preds = %"for blur_y.s0.x.x.rebased2093.preheader", %"consume blur_x2104"
  %blur_y.s0.x.x.rebased2095 = phi i32 [ %18776, %"consume blur_x2104" ], [ 0, %"for blur_y.s0.x.x.rebased2093.preheader" ]
  %18702 = add nsw i32 %blur_y.s0.x.x.rebased2095, %t1582776
  %a5254 = shl nsw i32 %18702, 5
  %18703 = icmp sgt i32 %t1603, %a5254
  %blur_y.s0.x.v0.base.s2096 = select i1 %18703, i32 %a5254, i32 %t1603
  %18704 = icmp slt i32 %18702, 1
  %18705 = icmp sgt i32 %194, %a5254
  %18706 = or i1 %18704, %18705
  br i1 %18706, label %"produce blur_x2101", label %"consume blur_x2104"

"end for blur_y.s0.x.x.rebased2094":              ; preds = %"consume blur_x2104", %"end for blur_y.s0.x.x.rebased2078"
  br i1 %225, label %"produce blur_x2108", label %after_bb2105

"produce blur_x2101":                             ; preds = %"for blur_y.s0.x.x.rebased2093"
  %18707 = icmp slt i32 %blur_y.s0.x.v0.base.s2096, %194
  %blur_x.s0.x.v1.base.s2102 = select i1 %18707, i32 %blur_y.s0.x.v0.base.s2096, i32 %194
  %t11092103 = add nsw i32 %484, %blur_x.s0.x.v1.base.s2102
  %18708 = sext i32 %t11092103 to i64
  %18709 = getelementptr inbounds i16, i16* %read_input784, i64 %18708
  %18710 = getelementptr inbounds i16, i16* %18709, i64 1
  %18711 = bitcast i16* %18710 to <16 x i16>*
  %18712 = load <16 x i16>, <16 x i16>* %18711, align 2, !tbaa !396
  %18713 = getelementptr inbounds i16, i16* %18709, i64 17
  %18714 = bitcast i16* %18713 to <16 x i16>*
  %18715 = load <16 x i16>, <16 x i16>* %18714, align 2, !tbaa !396
  %18716 = shufflevector <16 x i16> %18712, <16 x i16> %18715, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18717 = getelementptr inbounds i16, i16* %18709, i64 2
  %18718 = bitcast i16* %18717 to <16 x i16>*
  %18719 = load <16 x i16>, <16 x i16>* %18718, align 2, !tbaa !396
  %18720 = getelementptr inbounds i16, i16* %18709, i64 18
  %18721 = bitcast i16* %18720 to <16 x i16>*
  %18722 = load <16 x i16>, <16 x i16>* %18721, align 2, !tbaa !396
  %18723 = shufflevector <16 x i16> %18719, <16 x i16> %18722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18724 = bitcast i16* %18709 to <16 x i16>*
  %18725 = load <16 x i16>, <16 x i16>* %18724, align 2, !tbaa !396
  %18726 = getelementptr inbounds i16, i16* %18709, i64 16
  %18727 = bitcast i16* %18726 to <16 x i16>*
  %18728 = load <16 x i16>, <16 x i16>* %18727, align 2, !tbaa !396
  %18729 = shufflevector <16 x i16> %18725, <16 x i16> %18728, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18730 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18729, <32 x i16> %18723, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18731 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18716, <32 x i16> %18730, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18732 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18731, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18733 = shufflevector <32 x i16> %18732, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18734 = sext i32 %blur_x.s0.x.v1.base.s2102 to i64
  %18735 = add nsw i64 %18734, %18620
  %18736 = getelementptr inbounds i16, i16* %blur_x841, i64 %18735
  %18737 = bitcast i16* %18736 to <16 x i16>*
  store <16 x i16> %18733, <16 x i16>* %18737, align 2, !tbaa !399
  %18738 = shufflevector <32 x i16> %18732, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18739 = getelementptr inbounds i16, i16* %18736, i64 16
  %18740 = bitcast i16* %18739 to <16 x i16>*
  store <16 x i16> %18738, <16 x i16>* %18740, align 2, !tbaa !399
  br label %"consume blur_x2104"

"consume blur_x2104":                             ; preds = %"for blur_y.s0.x.x.rebased2093", %"produce blur_x2101"
  %18741 = sext i32 %blur_y.s0.x.v0.base.s2096 to i64
  %18742 = add nsw i64 %18623, %18741
  %18743 = getelementptr inbounds i16, i16* %blur_x841, i64 %18742
  %18744 = bitcast i16* %18743 to <16 x i16>*
  %18745 = load <16 x i16>, <16 x i16>* %18744, align 2, !tbaa !399
  %18746 = getelementptr inbounds i16, i16* %18743, i64 16
  %18747 = bitcast i16* %18746 to <16 x i16>*
  %18748 = load <16 x i16>, <16 x i16>* %18747, align 2, !tbaa !399
  %18749 = shufflevector <16 x i16> %18745, <16 x i16> %18748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18750 = add nsw i64 %18626, %18741
  %18751 = getelementptr inbounds i16, i16* %blur_x841, i64 %18750
  %18752 = bitcast i16* %18751 to <16 x i16>*
  %18753 = load <16 x i16>, <16 x i16>* %18752, align 2, !tbaa !399
  %18754 = getelementptr inbounds i16, i16* %18751, i64 16
  %18755 = bitcast i16* %18754 to <16 x i16>*
  %18756 = load <16 x i16>, <16 x i16>* %18755, align 2, !tbaa !399
  %18757 = shufflevector <16 x i16> %18753, <16 x i16> %18756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18758 = add nsw i64 %18629, %18741
  %18759 = getelementptr inbounds i16, i16* %blur_x841, i64 %18758
  %18760 = bitcast i16* %18759 to <16 x i16>*
  %18761 = load <16 x i16>, <16 x i16>* %18760, align 2, !tbaa !399
  %18762 = getelementptr inbounds i16, i16* %18759, i64 16
  %18763 = bitcast i16* %18762 to <16 x i16>*
  %18764 = load <16 x i16>, <16 x i16>* %18763, align 2, !tbaa !399
  %18765 = shufflevector <16 x i16> %18761, <16 x i16> %18764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18766 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18765, <32 x i16> %18757, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18767 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18749, <32 x i16> %18766, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18768 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18767, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18769 = shufflevector <32 x i16> %18768, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18770 = add nsw i64 %18633, %18741
  %18771 = getelementptr inbounds i16, i16* %258, i64 %18770
  %18772 = bitcast i16* %18771 to <16 x i16>*
  store <16 x i16> %18769, <16 x i16>* %18772, align 2, !tbaa !401
  %18773 = shufflevector <32 x i16> %18768, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18774 = getelementptr inbounds i16, i16* %18771, i64 16
  %18775 = bitcast i16* %18774 to <16 x i16>*
  store <16 x i16> %18773, <16 x i16>* %18775, align 2, !tbaa !401
  %18776 = add nuw nsw i32 %blur_y.s0.x.x.rebased2095, 1
  %.not2450 = icmp eq i32 %18776, %t1639860
  br i1 %.not2450, label %"end for blur_y.s0.x.x.rebased2094", label %"for blur_y.s0.x.x.rebased2093"

after_bb2105:                                     ; preds = %"end for blur_y.s0.x.x.rebased2094", %"produce blur_x2108"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2120.preheader", label %"end for blur_y.s0.x.x.rebased2121", !prof !386

"for blur_y.s0.x.x.rebased2120.preheader":        ; preds = %after_bb2105
  %18777 = sext i32 %t1650912 to i64
  %18778 = zext i32 %.pre-phi3424 to i64
  %18779 = mul nsw i64 %18778, %322
  %18780 = sub nsw i64 %18779, %293
  %18781 = zext i32 %.pre-phi3428 to i64
  %18782 = mul nsw i64 %18781, %322
  %18783 = sub nsw i64 %18782, %293
  %18784 = zext i32 %.pre-phi3420 to i64
  %18785 = mul nsw i64 %18784, %322
  %18786 = sub nsw i64 %18785, %293
  %18787 = sext i32 %a365 to i64
  %18788 = add nsw i64 %18787, 28
  %18789 = mul nsw i64 %18788, %319
  %18790 = add nsw i64 %18789, %323
  br label %"for blur_y.s0.x.x.rebased2120"

"produce blur_x2108":                             ; preds = %"end for blur_y.s0.x.x.rebased2094"
  %18791 = getelementptr inbounds i16, i16* %read_input784, i64 %488
  %18792 = getelementptr inbounds i16, i16* %18791, i64 -31
  %18793 = bitcast i16* %18792 to <16 x i16>*
  %18794 = load <16 x i16>, <16 x i16>* %18793, align 2, !tbaa !396
  %18795 = getelementptr inbounds i16, i16* %18791, i64 -15
  %18796 = bitcast i16* %18795 to <16 x i16>*
  %18797 = load <16 x i16>, <16 x i16>* %18796, align 2, !tbaa !396
  %18798 = shufflevector <16 x i16> %18794, <16 x i16> %18797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18799 = getelementptr inbounds i16, i16* %18791, i64 -30
  %18800 = bitcast i16* %18799 to <16 x i16>*
  %18801 = load <16 x i16>, <16 x i16>* %18800, align 2, !tbaa !396
  %18802 = getelementptr inbounds i16, i16* %18791, i64 -14
  %18803 = bitcast i16* %18802 to <16 x i16>*
  %18804 = load <16 x i16>, <16 x i16>* %18803, align 2, !tbaa !396
  %18805 = shufflevector <16 x i16> %18801, <16 x i16> %18804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18806 = getelementptr inbounds i16, i16* %18791, i64 -32
  %18807 = bitcast i16* %18806 to <16 x i16>*
  %18808 = load <16 x i16>, <16 x i16>* %18807, align 2, !tbaa !396
  %18809 = getelementptr inbounds i16, i16* %18791, i64 -16
  %18810 = bitcast i16* %18809 to <16 x i16>*
  %18811 = load <16 x i16>, <16 x i16>* %18810, align 2, !tbaa !396
  %18812 = shufflevector <16 x i16> %18808, <16 x i16> %18811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18813 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18812, <32 x i16> %18805, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18814 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18798, <32 x i16> %18813, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18815 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18814, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18816 = shufflevector <32 x i16> %18815, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18817 = zext i32 %.pre-phi3428 to i64
  %18818 = mul nsw i64 %294, %18817
  %18819 = add nsw i64 %296, %18818
  %18820 = getelementptr inbounds i16, i16* %blur_x841, i64 %18819
  %18821 = getelementptr inbounds i16, i16* %18820, i64 -32
  %18822 = bitcast i16* %18821 to <16 x i16>*
  store <16 x i16> %18816, <16 x i16>* %18822, align 2, !tbaa !399
  %18823 = shufflevector <32 x i16> %18815, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18824 = getelementptr inbounds i16, i16* %18820, i64 -16
  %18825 = bitcast i16* %18824 to <16 x i16>*
  store <16 x i16> %18823, <16 x i16>* %18825, align 2, !tbaa !399
  %18826 = zext i32 %.pre-phi3424 to i64
  %18827 = mul nsw i64 %18826, %318
  %18828 = add nsw i64 %18827, %291
  %18829 = getelementptr inbounds i16, i16* %blur_x841, i64 %18828
  %18830 = getelementptr inbounds i16, i16* %18829, i64 -32
  %18831 = bitcast i16* %18830 to <16 x i16>*
  %18832 = load <16 x i16>, <16 x i16>* %18831, align 2, !tbaa !399
  %18833 = getelementptr inbounds i16, i16* %18829, i64 -16
  %18834 = bitcast i16* %18833 to <16 x i16>*
  %18835 = load <16 x i16>, <16 x i16>* %18834, align 2, !tbaa !399
  %18836 = shufflevector <16 x i16> %18832, <16 x i16> %18835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18837 = mul nsw i64 %18817, %318
  %18838 = add nsw i64 %18837, %291
  %18839 = getelementptr inbounds i16, i16* %blur_x841, i64 %18838
  %18840 = getelementptr inbounds i16, i16* %18839, i64 -32
  %18841 = bitcast i16* %18840 to <16 x i16>*
  %18842 = load <16 x i16>, <16 x i16>* %18841, align 2, !tbaa !399
  %18843 = getelementptr inbounds i16, i16* %18839, i64 -16
  %18844 = bitcast i16* %18843 to <16 x i16>*
  %18845 = load <16 x i16>, <16 x i16>* %18844, align 2, !tbaa !399
  %18846 = shufflevector <16 x i16> %18842, <16 x i16> %18845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18847 = zext i32 %.pre-phi3420 to i64
  %18848 = mul nsw i64 %18847, %318
  %18849 = add nsw i64 %18848, %291
  %18850 = getelementptr inbounds i16, i16* %blur_x841, i64 %18849
  %18851 = getelementptr inbounds i16, i16* %18850, i64 -32
  %18852 = bitcast i16* %18851 to <16 x i16>*
  %18853 = load <16 x i16>, <16 x i16>* %18852, align 2, !tbaa !399
  %18854 = getelementptr inbounds i16, i16* %18850, i64 -16
  %18855 = bitcast i16* %18854 to <16 x i16>*
  %18856 = load <16 x i16>, <16 x i16>* %18855, align 2, !tbaa !399
  %18857 = shufflevector <16 x i16> %18853, <16 x i16> %18856, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18858 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18857, <32 x i16> %18846, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18859 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18836, <32 x i16> %18858, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18860 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18859, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18861 = shufflevector <32 x i16> %18860, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18862 = sext i32 %a365 to i64
  %18863 = add nsw i64 %18862, 28
  %18864 = mul nsw i64 %18863, %319
  %18865 = add nsw i64 %321, %18864
  %18866 = getelementptr inbounds i16, i16* %258, i64 %18865
  %18867 = getelementptr inbounds i16, i16* %18866, i64 -32
  %18868 = bitcast i16* %18867 to <16 x i16>*
  store <16 x i16> %18861, <16 x i16>* %18868, align 2, !tbaa !401
  %18869 = shufflevector <32 x i16> %18860, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18870 = getelementptr inbounds i16, i16* %18866, i64 -16
  %18871 = bitcast i16* %18870 to <16 x i16>*
  store <16 x i16> %18869, <16 x i16>* %18871, align 2, !tbaa !401
  br label %after_bb2105

"for blur_y.s0.x.x.rebased2120":                  ; preds = %"for blur_y.s0.x.x.rebased2120.preheader", %"consume blur_x2128"
  %indvars.iv3327 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2120.preheader" ], [ %indvars.iv.next3328, %"consume blur_x2128" ]
  %18872 = add nsw i64 %indvars.iv3327, %298
  %18873 = icmp slt i64 %18872, 1
  %18874 = trunc i64 %18872 to i32
  %18875 = shl nsw i32 %18874, 5
  %18876 = icmp sgt i32 %194, %18875
  %18877 = or i1 %18873, %18876
  br i1 %18877, label %"produce blur_x2126", label %"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge"

"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2120"
  %.pre3489 = shl nsw i64 %18872, 5
  br label %"consume blur_x2128"

"end for blur_y.s0.x.x.rebased2121":              ; preds = %"consume blur_x2128", %after_bb2105
  br i1 %299, label %"for blur_y.s0.x.x.rebased2136.preheader", label %"end for blur_y.s0.x.x.rebased2137", !prof !386

"for blur_y.s0.x.x.rebased2136.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2121"
  %18878 = sext i32 %t1650912 to i64
  %18879 = zext i32 %.pre-phi3424 to i64
  %18880 = mul nsw i64 %18879, %322
  %18881 = sub nsw i64 %18880, %293
  %18882 = zext i32 %.pre-phi3428 to i64
  %18883 = mul nsw i64 %18882, %322
  %18884 = sub nsw i64 %18883, %293
  %18885 = zext i32 %.pre-phi3420 to i64
  %18886 = mul nsw i64 %18885, %322
  %18887 = sub nsw i64 %18886, %293
  %18888 = sext i32 %a365 to i64
  %18889 = add nsw i64 %18888, 28
  %18890 = mul nsw i64 %18889, %319
  %18891 = add nsw i64 %18890, %323
  br label %"for blur_y.s0.x.x.rebased2136"

"produce blur_x2126":                             ; preds = %"for blur_y.s0.x.x.rebased2120"
  %t11202127 = add nsw i32 %490, %18875
  %18892 = sext i32 %t11202127 to i64
  %18893 = getelementptr inbounds i16, i16* %read_input784, i64 %18892
  %18894 = getelementptr inbounds i16, i16* %18893, i64 1
  %18895 = bitcast i16* %18894 to <16 x i16>*
  %18896 = load <16 x i16>, <16 x i16>* %18895, align 2, !tbaa !396
  %18897 = getelementptr inbounds i16, i16* %18893, i64 17
  %18898 = bitcast i16* %18897 to <16 x i16>*
  %18899 = load <16 x i16>, <16 x i16>* %18898, align 2, !tbaa !396
  %18900 = shufflevector <16 x i16> %18896, <16 x i16> %18899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18901 = getelementptr inbounds i16, i16* %18893, i64 2
  %18902 = bitcast i16* %18901 to <16 x i16>*
  %18903 = load <16 x i16>, <16 x i16>* %18902, align 2, !tbaa !396
  %18904 = getelementptr inbounds i16, i16* %18893, i64 18
  %18905 = bitcast i16* %18904 to <16 x i16>*
  %18906 = load <16 x i16>, <16 x i16>* %18905, align 2, !tbaa !396
  %18907 = shufflevector <16 x i16> %18903, <16 x i16> %18906, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18908 = bitcast i16* %18893 to <16 x i16>*
  %18909 = load <16 x i16>, <16 x i16>* %18908, align 2, !tbaa !396
  %18910 = getelementptr inbounds i16, i16* %18893, i64 16
  %18911 = bitcast i16* %18910 to <16 x i16>*
  %18912 = load <16 x i16>, <16 x i16>* %18911, align 2, !tbaa !396
  %18913 = shufflevector <16 x i16> %18909, <16 x i16> %18912, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18914 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18913, <32 x i16> %18907, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18915 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18900, <32 x i16> %18914, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18916 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18915, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18917 = shufflevector <32 x i16> %18916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18918 = shl nsw i64 %18872, 5
  %18919 = add nsw i64 %18918, %18777
  %18920 = getelementptr inbounds i16, i16* %blur_x841, i64 %18919
  %18921 = bitcast i16* %18920 to <16 x i16>*
  store <16 x i16> %18917, <16 x i16>* %18921, align 2, !tbaa !399
  %18922 = shufflevector <32 x i16> %18916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18923 = getelementptr inbounds i16, i16* %18920, i64 16
  %18924 = bitcast i16* %18923 to <16 x i16>*
  store <16 x i16> %18922, <16 x i16>* %18924, align 2, !tbaa !399
  br label %"consume blur_x2128"

"consume blur_x2128":                             ; preds = %"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge", %"produce blur_x2126"
  %.pre-phi3490 = phi i64 [ %.pre3489, %"for blur_y.s0.x.x.rebased2120.consume blur_x2128_crit_edge" ], [ %18918, %"produce blur_x2126" ]
  %18925 = add nsw i64 %18780, %.pre-phi3490
  %18926 = getelementptr inbounds i16, i16* %blur_x841, i64 %18925
  %18927 = bitcast i16* %18926 to <16 x i16>*
  %18928 = load <16 x i16>, <16 x i16>* %18927, align 2, !tbaa !399
  %18929 = getelementptr inbounds i16, i16* %18926, i64 16
  %18930 = bitcast i16* %18929 to <16 x i16>*
  %18931 = load <16 x i16>, <16 x i16>* %18930, align 2, !tbaa !399
  %18932 = shufflevector <16 x i16> %18928, <16 x i16> %18931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18933 = add nsw i64 %18783, %.pre-phi3490
  %18934 = getelementptr inbounds i16, i16* %blur_x841, i64 %18933
  %18935 = bitcast i16* %18934 to <16 x i16>*
  %18936 = load <16 x i16>, <16 x i16>* %18935, align 2, !tbaa !399
  %18937 = getelementptr inbounds i16, i16* %18934, i64 16
  %18938 = bitcast i16* %18937 to <16 x i16>*
  %18939 = load <16 x i16>, <16 x i16>* %18938, align 2, !tbaa !399
  %18940 = shufflevector <16 x i16> %18936, <16 x i16> %18939, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18941 = add nsw i64 %18786, %.pre-phi3490
  %18942 = getelementptr inbounds i16, i16* %blur_x841, i64 %18941
  %18943 = bitcast i16* %18942 to <16 x i16>*
  %18944 = load <16 x i16>, <16 x i16>* %18943, align 2, !tbaa !399
  %18945 = getelementptr inbounds i16, i16* %18942, i64 16
  %18946 = bitcast i16* %18945 to <16 x i16>*
  %18947 = load <16 x i16>, <16 x i16>* %18946, align 2, !tbaa !399
  %18948 = shufflevector <16 x i16> %18944, <16 x i16> %18947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18949 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18948, <32 x i16> %18940, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18950 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18932, <32 x i16> %18949, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18951 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18950, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18952 = shufflevector <32 x i16> %18951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18953 = add nsw i64 %18790, %.pre-phi3490
  %18954 = getelementptr inbounds i16, i16* %258, i64 %18953
  %18955 = bitcast i16* %18954 to <16 x i16>*
  store <16 x i16> %18952, <16 x i16>* %18955, align 2, !tbaa !401
  %18956 = shufflevector <32 x i16> %18951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18957 = getelementptr inbounds i16, i16* %18954, i64 16
  %18958 = bitcast i16* %18957 to <16 x i16>*
  store <16 x i16> %18956, <16 x i16>* %18958, align 2, !tbaa !401
  %indvars.iv.next3328 = add nuw nsw i64 %indvars.iv3327, 1
  %18959 = icmp eq i64 %indvars.iv.next3328, %zext3329
  br i1 %18959, label %"end for blur_y.s0.x.x.rebased2121", label %"for blur_y.s0.x.x.rebased2120"

"for blur_y.s0.x.x.rebased2136":                  ; preds = %"for blur_y.s0.x.x.rebased2136.preheader", %"consume blur_x2147"
  %blur_y.s0.x.x.rebased2138 = phi i32 [ %19034, %"consume blur_x2147" ], [ 0, %"for blur_y.s0.x.x.rebased2136.preheader" ]
  %18960 = add nsw i32 %blur_y.s0.x.x.rebased2138, %t1582776
  %a5411 = shl nsw i32 %18960, 5
  %18961 = icmp sgt i32 %t1603, %a5411
  %blur_y.s0.x.v0.base.s2139 = select i1 %18961, i32 %a5411, i32 %t1603
  %18962 = icmp slt i32 %18960, 1
  %18963 = icmp sgt i32 %194, %a5411
  %18964 = or i1 %18962, %18963
  br i1 %18964, label %"produce blur_x2144", label %"consume blur_x2147"

"end for blur_y.s0.x.x.rebased2137":              ; preds = %"consume blur_x2147", %"end for blur_y.s0.x.x.rebased2121"
  br i1 %225, label %"produce blur_x2151", label %after_bb2148

"produce blur_x2144":                             ; preds = %"for blur_y.s0.x.x.rebased2136"
  %18965 = icmp slt i32 %blur_y.s0.x.v0.base.s2139, %194
  %blur_x.s0.x.v1.base.s2145 = select i1 %18965, i32 %blur_y.s0.x.v0.base.s2139, i32 %194
  %t11252146 = add nsw i32 %490, %blur_x.s0.x.v1.base.s2145
  %18966 = sext i32 %t11252146 to i64
  %18967 = getelementptr inbounds i16, i16* %read_input784, i64 %18966
  %18968 = getelementptr inbounds i16, i16* %18967, i64 1
  %18969 = bitcast i16* %18968 to <16 x i16>*
  %18970 = load <16 x i16>, <16 x i16>* %18969, align 2, !tbaa !396
  %18971 = getelementptr inbounds i16, i16* %18967, i64 17
  %18972 = bitcast i16* %18971 to <16 x i16>*
  %18973 = load <16 x i16>, <16 x i16>* %18972, align 2, !tbaa !396
  %18974 = shufflevector <16 x i16> %18970, <16 x i16> %18973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18975 = getelementptr inbounds i16, i16* %18967, i64 2
  %18976 = bitcast i16* %18975 to <16 x i16>*
  %18977 = load <16 x i16>, <16 x i16>* %18976, align 2, !tbaa !396
  %18978 = getelementptr inbounds i16, i16* %18967, i64 18
  %18979 = bitcast i16* %18978 to <16 x i16>*
  %18980 = load <16 x i16>, <16 x i16>* %18979, align 2, !tbaa !396
  %18981 = shufflevector <16 x i16> %18977, <16 x i16> %18980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18982 = bitcast i16* %18967 to <16 x i16>*
  %18983 = load <16 x i16>, <16 x i16>* %18982, align 2, !tbaa !396
  %18984 = getelementptr inbounds i16, i16* %18967, i64 16
  %18985 = bitcast i16* %18984 to <16 x i16>*
  %18986 = load <16 x i16>, <16 x i16>* %18985, align 2, !tbaa !396
  %18987 = shufflevector <16 x i16> %18983, <16 x i16> %18986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18988 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18987, <32 x i16> %18981, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18989 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %18974, <32 x i16> %18988, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %18990 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %18989, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %18991 = shufflevector <32 x i16> %18990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18992 = sext i32 %blur_x.s0.x.v1.base.s2145 to i64
  %18993 = add nsw i64 %18992, %18878
  %18994 = getelementptr inbounds i16, i16* %blur_x841, i64 %18993
  %18995 = bitcast i16* %18994 to <16 x i16>*
  store <16 x i16> %18991, <16 x i16>* %18995, align 2, !tbaa !399
  %18996 = shufflevector <32 x i16> %18990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18997 = getelementptr inbounds i16, i16* %18994, i64 16
  %18998 = bitcast i16* %18997 to <16 x i16>*
  store <16 x i16> %18996, <16 x i16>* %18998, align 2, !tbaa !399
  br label %"consume blur_x2147"

"consume blur_x2147":                             ; preds = %"for blur_y.s0.x.x.rebased2136", %"produce blur_x2144"
  %18999 = sext i32 %blur_y.s0.x.v0.base.s2139 to i64
  %19000 = add nsw i64 %18881, %18999
  %19001 = getelementptr inbounds i16, i16* %blur_x841, i64 %19000
  %19002 = bitcast i16* %19001 to <16 x i16>*
  %19003 = load <16 x i16>, <16 x i16>* %19002, align 2, !tbaa !399
  %19004 = getelementptr inbounds i16, i16* %19001, i64 16
  %19005 = bitcast i16* %19004 to <16 x i16>*
  %19006 = load <16 x i16>, <16 x i16>* %19005, align 2, !tbaa !399
  %19007 = shufflevector <16 x i16> %19003, <16 x i16> %19006, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19008 = add nsw i64 %18884, %18999
  %19009 = getelementptr inbounds i16, i16* %blur_x841, i64 %19008
  %19010 = bitcast i16* %19009 to <16 x i16>*
  %19011 = load <16 x i16>, <16 x i16>* %19010, align 2, !tbaa !399
  %19012 = getelementptr inbounds i16, i16* %19009, i64 16
  %19013 = bitcast i16* %19012 to <16 x i16>*
  %19014 = load <16 x i16>, <16 x i16>* %19013, align 2, !tbaa !399
  %19015 = shufflevector <16 x i16> %19011, <16 x i16> %19014, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19016 = add nsw i64 %18887, %18999
  %19017 = getelementptr inbounds i16, i16* %blur_x841, i64 %19016
  %19018 = bitcast i16* %19017 to <16 x i16>*
  %19019 = load <16 x i16>, <16 x i16>* %19018, align 2, !tbaa !399
  %19020 = getelementptr inbounds i16, i16* %19017, i64 16
  %19021 = bitcast i16* %19020 to <16 x i16>*
  %19022 = load <16 x i16>, <16 x i16>* %19021, align 2, !tbaa !399
  %19023 = shufflevector <16 x i16> %19019, <16 x i16> %19022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19024 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19023, <32 x i16> %19015, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19025 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19007, <32 x i16> %19024, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19026 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19025, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19027 = shufflevector <32 x i16> %19026, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19028 = add nsw i64 %18891, %18999
  %19029 = getelementptr inbounds i16, i16* %258, i64 %19028
  %19030 = bitcast i16* %19029 to <16 x i16>*
  store <16 x i16> %19027, <16 x i16>* %19030, align 2, !tbaa !401
  %19031 = shufflevector <32 x i16> %19026, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19032 = getelementptr inbounds i16, i16* %19029, i64 16
  %19033 = bitcast i16* %19032 to <16 x i16>*
  store <16 x i16> %19031, <16 x i16>* %19033, align 2, !tbaa !401
  %19034 = add nuw nsw i32 %blur_y.s0.x.x.rebased2138, 1
  %.not2446 = icmp eq i32 %19034, %t1639860
  br i1 %.not2446, label %"end for blur_y.s0.x.x.rebased2137", label %"for blur_y.s0.x.x.rebased2136"

after_bb2148:                                     ; preds = %"end for blur_y.s0.x.x.rebased2137", %"produce blur_x2151"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2163.preheader", label %"end for blur_y.s0.x.x.rebased2164", !prof !386

"for blur_y.s0.x.x.rebased2163.preheader":        ; preds = %after_bb2148
  %19035 = sext i32 %t1666955 to i64
  %19036 = zext i32 %.pre-phi3428 to i64
  %19037 = mul nsw i64 %19036, %322
  %19038 = sub nsw i64 %19037, %293
  %19039 = zext i32 %.pre-phi3434 to i64
  %19040 = mul nsw i64 %19039, %322
  %19041 = sub nsw i64 %19040, %293
  %19042 = zext i32 %.pre-phi3424 to i64
  %19043 = mul nsw i64 %19042, %322
  %19044 = sub nsw i64 %19043, %293
  %19045 = sext i32 %a365 to i64
  %19046 = add nsw i64 %19045, 29
  %19047 = mul nsw i64 %19046, %319
  %19048 = add nsw i64 %19047, %323
  br label %"for blur_y.s0.x.x.rebased2163"

"produce blur_x2151":                             ; preds = %"end for blur_y.s0.x.x.rebased2137"
  %19049 = getelementptr inbounds i16, i16* %read_input784, i64 %494
  %19050 = getelementptr inbounds i16, i16* %19049, i64 -31
  %19051 = bitcast i16* %19050 to <16 x i16>*
  %19052 = load <16 x i16>, <16 x i16>* %19051, align 2, !tbaa !396
  %19053 = getelementptr inbounds i16, i16* %19049, i64 -15
  %19054 = bitcast i16* %19053 to <16 x i16>*
  %19055 = load <16 x i16>, <16 x i16>* %19054, align 2, !tbaa !396
  %19056 = shufflevector <16 x i16> %19052, <16 x i16> %19055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19057 = getelementptr inbounds i16, i16* %19049, i64 -30
  %19058 = bitcast i16* %19057 to <16 x i16>*
  %19059 = load <16 x i16>, <16 x i16>* %19058, align 2, !tbaa !396
  %19060 = getelementptr inbounds i16, i16* %19049, i64 -14
  %19061 = bitcast i16* %19060 to <16 x i16>*
  %19062 = load <16 x i16>, <16 x i16>* %19061, align 2, !tbaa !396
  %19063 = shufflevector <16 x i16> %19059, <16 x i16> %19062, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19064 = getelementptr inbounds i16, i16* %19049, i64 -32
  %19065 = bitcast i16* %19064 to <16 x i16>*
  %19066 = load <16 x i16>, <16 x i16>* %19065, align 2, !tbaa !396
  %19067 = getelementptr inbounds i16, i16* %19049, i64 -16
  %19068 = bitcast i16* %19067 to <16 x i16>*
  %19069 = load <16 x i16>, <16 x i16>* %19068, align 2, !tbaa !396
  %19070 = shufflevector <16 x i16> %19066, <16 x i16> %19069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19071 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19070, <32 x i16> %19063, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19072 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19056, <32 x i16> %19071, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19073 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19072, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19074 = shufflevector <32 x i16> %19073, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19075 = zext i32 %.pre-phi3434 to i64
  %19076 = mul nsw i64 %294, %19075
  %19077 = add nsw i64 %296, %19076
  %19078 = getelementptr inbounds i16, i16* %blur_x841, i64 %19077
  %19079 = getelementptr inbounds i16, i16* %19078, i64 -32
  %19080 = bitcast i16* %19079 to <16 x i16>*
  store <16 x i16> %19074, <16 x i16>* %19080, align 2, !tbaa !399
  %19081 = shufflevector <32 x i16> %19073, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19082 = getelementptr inbounds i16, i16* %19078, i64 -16
  %19083 = bitcast i16* %19082 to <16 x i16>*
  store <16 x i16> %19081, <16 x i16>* %19083, align 2, !tbaa !399
  %19084 = zext i32 %.pre-phi3428 to i64
  %19085 = mul nsw i64 %19084, %318
  %19086 = add nsw i64 %19085, %291
  %19087 = getelementptr inbounds i16, i16* %blur_x841, i64 %19086
  %19088 = getelementptr inbounds i16, i16* %19087, i64 -32
  %19089 = bitcast i16* %19088 to <16 x i16>*
  %19090 = load <16 x i16>, <16 x i16>* %19089, align 2, !tbaa !399
  %19091 = getelementptr inbounds i16, i16* %19087, i64 -16
  %19092 = bitcast i16* %19091 to <16 x i16>*
  %19093 = load <16 x i16>, <16 x i16>* %19092, align 2, !tbaa !399
  %19094 = shufflevector <16 x i16> %19090, <16 x i16> %19093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19095 = mul nsw i64 %19075, %318
  %19096 = add nsw i64 %19095, %291
  %19097 = getelementptr inbounds i16, i16* %blur_x841, i64 %19096
  %19098 = getelementptr inbounds i16, i16* %19097, i64 -32
  %19099 = bitcast i16* %19098 to <16 x i16>*
  %19100 = load <16 x i16>, <16 x i16>* %19099, align 2, !tbaa !399
  %19101 = getelementptr inbounds i16, i16* %19097, i64 -16
  %19102 = bitcast i16* %19101 to <16 x i16>*
  %19103 = load <16 x i16>, <16 x i16>* %19102, align 2, !tbaa !399
  %19104 = shufflevector <16 x i16> %19100, <16 x i16> %19103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19105 = zext i32 %.pre-phi3424 to i64
  %19106 = mul nsw i64 %19105, %318
  %19107 = add nsw i64 %19106, %291
  %19108 = getelementptr inbounds i16, i16* %blur_x841, i64 %19107
  %19109 = getelementptr inbounds i16, i16* %19108, i64 -32
  %19110 = bitcast i16* %19109 to <16 x i16>*
  %19111 = load <16 x i16>, <16 x i16>* %19110, align 2, !tbaa !399
  %19112 = getelementptr inbounds i16, i16* %19108, i64 -16
  %19113 = bitcast i16* %19112 to <16 x i16>*
  %19114 = load <16 x i16>, <16 x i16>* %19113, align 2, !tbaa !399
  %19115 = shufflevector <16 x i16> %19111, <16 x i16> %19114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19116 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19115, <32 x i16> %19104, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19117 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19094, <32 x i16> %19116, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19118 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19117, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19119 = shufflevector <32 x i16> %19118, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19120 = sext i32 %a365 to i64
  %19121 = add nsw i64 %19120, 29
  %19122 = mul nsw i64 %19121, %319
  %19123 = add nsw i64 %321, %19122
  %19124 = getelementptr inbounds i16, i16* %258, i64 %19123
  %19125 = getelementptr inbounds i16, i16* %19124, i64 -32
  %19126 = bitcast i16* %19125 to <16 x i16>*
  store <16 x i16> %19119, <16 x i16>* %19126, align 2, !tbaa !401
  %19127 = shufflevector <32 x i16> %19118, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19128 = getelementptr inbounds i16, i16* %19124, i64 -16
  %19129 = bitcast i16* %19128 to <16 x i16>*
  store <16 x i16> %19127, <16 x i16>* %19129, align 2, !tbaa !401
  br label %after_bb2148

"for blur_y.s0.x.x.rebased2163":                  ; preds = %"for blur_y.s0.x.x.rebased2163.preheader", %"consume blur_x2171"
  %indvars.iv3330 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2163.preheader" ], [ %indvars.iv.next3331, %"consume blur_x2171" ]
  %19130 = add nsw i64 %indvars.iv3330, %298
  %19131 = icmp slt i64 %19130, 1
  %19132 = trunc i64 %19130 to i32
  %19133 = shl nsw i32 %19132, 5
  %19134 = icmp sgt i32 %194, %19133
  %19135 = or i1 %19131, %19134
  br i1 %19135, label %"produce blur_x2169", label %"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge"

"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2163"
  %.pre3491 = shl nsw i64 %19130, 5
  br label %"consume blur_x2171"

"end for blur_y.s0.x.x.rebased2164":              ; preds = %"consume blur_x2171", %after_bb2148
  br i1 %299, label %"for blur_y.s0.x.x.rebased2179.preheader", label %"end for blur_y.s0.x.x.rebased2180", !prof !386

"for blur_y.s0.x.x.rebased2179.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2164"
  %19136 = sext i32 %t1666955 to i64
  %19137 = zext i32 %.pre-phi3428 to i64
  %19138 = mul nsw i64 %19137, %322
  %19139 = sub nsw i64 %19138, %293
  %19140 = zext i32 %.pre-phi3434 to i64
  %19141 = mul nsw i64 %19140, %322
  %19142 = sub nsw i64 %19141, %293
  %19143 = zext i32 %.pre-phi3424 to i64
  %19144 = mul nsw i64 %19143, %322
  %19145 = sub nsw i64 %19144, %293
  %19146 = sext i32 %a365 to i64
  %19147 = add nsw i64 %19146, 29
  %19148 = mul nsw i64 %19147, %319
  %19149 = add nsw i64 %19148, %323
  br label %"for blur_y.s0.x.x.rebased2179"

"produce blur_x2169":                             ; preds = %"for blur_y.s0.x.x.rebased2163"
  %t11362170 = add nsw i32 %496, %19133
  %19150 = sext i32 %t11362170 to i64
  %19151 = getelementptr inbounds i16, i16* %read_input784, i64 %19150
  %19152 = getelementptr inbounds i16, i16* %19151, i64 1
  %19153 = bitcast i16* %19152 to <16 x i16>*
  %19154 = load <16 x i16>, <16 x i16>* %19153, align 2, !tbaa !396
  %19155 = getelementptr inbounds i16, i16* %19151, i64 17
  %19156 = bitcast i16* %19155 to <16 x i16>*
  %19157 = load <16 x i16>, <16 x i16>* %19156, align 2, !tbaa !396
  %19158 = shufflevector <16 x i16> %19154, <16 x i16> %19157, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19159 = getelementptr inbounds i16, i16* %19151, i64 2
  %19160 = bitcast i16* %19159 to <16 x i16>*
  %19161 = load <16 x i16>, <16 x i16>* %19160, align 2, !tbaa !396
  %19162 = getelementptr inbounds i16, i16* %19151, i64 18
  %19163 = bitcast i16* %19162 to <16 x i16>*
  %19164 = load <16 x i16>, <16 x i16>* %19163, align 2, !tbaa !396
  %19165 = shufflevector <16 x i16> %19161, <16 x i16> %19164, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19166 = bitcast i16* %19151 to <16 x i16>*
  %19167 = load <16 x i16>, <16 x i16>* %19166, align 2, !tbaa !396
  %19168 = getelementptr inbounds i16, i16* %19151, i64 16
  %19169 = bitcast i16* %19168 to <16 x i16>*
  %19170 = load <16 x i16>, <16 x i16>* %19169, align 2, !tbaa !396
  %19171 = shufflevector <16 x i16> %19167, <16 x i16> %19170, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19172 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19171, <32 x i16> %19165, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19173 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19158, <32 x i16> %19172, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19174 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19173, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19175 = shufflevector <32 x i16> %19174, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19176 = shl nsw i64 %19130, 5
  %19177 = add nsw i64 %19176, %19035
  %19178 = getelementptr inbounds i16, i16* %blur_x841, i64 %19177
  %19179 = bitcast i16* %19178 to <16 x i16>*
  store <16 x i16> %19175, <16 x i16>* %19179, align 2, !tbaa !399
  %19180 = shufflevector <32 x i16> %19174, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19181 = getelementptr inbounds i16, i16* %19178, i64 16
  %19182 = bitcast i16* %19181 to <16 x i16>*
  store <16 x i16> %19180, <16 x i16>* %19182, align 2, !tbaa !399
  br label %"consume blur_x2171"

"consume blur_x2171":                             ; preds = %"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge", %"produce blur_x2169"
  %.pre-phi3492 = phi i64 [ %.pre3491, %"for blur_y.s0.x.x.rebased2163.consume blur_x2171_crit_edge" ], [ %19176, %"produce blur_x2169" ]
  %19183 = add nsw i64 %19038, %.pre-phi3492
  %19184 = getelementptr inbounds i16, i16* %blur_x841, i64 %19183
  %19185 = bitcast i16* %19184 to <16 x i16>*
  %19186 = load <16 x i16>, <16 x i16>* %19185, align 2, !tbaa !399
  %19187 = getelementptr inbounds i16, i16* %19184, i64 16
  %19188 = bitcast i16* %19187 to <16 x i16>*
  %19189 = load <16 x i16>, <16 x i16>* %19188, align 2, !tbaa !399
  %19190 = shufflevector <16 x i16> %19186, <16 x i16> %19189, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19191 = add nsw i64 %19041, %.pre-phi3492
  %19192 = getelementptr inbounds i16, i16* %blur_x841, i64 %19191
  %19193 = bitcast i16* %19192 to <16 x i16>*
  %19194 = load <16 x i16>, <16 x i16>* %19193, align 2, !tbaa !399
  %19195 = getelementptr inbounds i16, i16* %19192, i64 16
  %19196 = bitcast i16* %19195 to <16 x i16>*
  %19197 = load <16 x i16>, <16 x i16>* %19196, align 2, !tbaa !399
  %19198 = shufflevector <16 x i16> %19194, <16 x i16> %19197, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19199 = add nsw i64 %19044, %.pre-phi3492
  %19200 = getelementptr inbounds i16, i16* %blur_x841, i64 %19199
  %19201 = bitcast i16* %19200 to <16 x i16>*
  %19202 = load <16 x i16>, <16 x i16>* %19201, align 2, !tbaa !399
  %19203 = getelementptr inbounds i16, i16* %19200, i64 16
  %19204 = bitcast i16* %19203 to <16 x i16>*
  %19205 = load <16 x i16>, <16 x i16>* %19204, align 2, !tbaa !399
  %19206 = shufflevector <16 x i16> %19202, <16 x i16> %19205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19207 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19206, <32 x i16> %19198, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19208 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19190, <32 x i16> %19207, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19209 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19208, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19210 = shufflevector <32 x i16> %19209, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19211 = add nsw i64 %19048, %.pre-phi3492
  %19212 = getelementptr inbounds i16, i16* %258, i64 %19211
  %19213 = bitcast i16* %19212 to <16 x i16>*
  store <16 x i16> %19210, <16 x i16>* %19213, align 2, !tbaa !401
  %19214 = shufflevector <32 x i16> %19209, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19215 = getelementptr inbounds i16, i16* %19212, i64 16
  %19216 = bitcast i16* %19215 to <16 x i16>*
  store <16 x i16> %19214, <16 x i16>* %19216, align 2, !tbaa !401
  %indvars.iv.next3331 = add nuw nsw i64 %indvars.iv3330, 1
  %19217 = icmp eq i64 %indvars.iv.next3331, %zext3332
  br i1 %19217, label %"end for blur_y.s0.x.x.rebased2164", label %"for blur_y.s0.x.x.rebased2163"

"for blur_y.s0.x.x.rebased2179":                  ; preds = %"for blur_y.s0.x.x.rebased2179.preheader", %"consume blur_x2190"
  %blur_y.s0.x.x.rebased2181 = phi i32 [ %19292, %"consume blur_x2190" ], [ 0, %"for blur_y.s0.x.x.rebased2179.preheader" ]
  %19218 = add nsw i32 %blur_y.s0.x.x.rebased2181, %t1582776
  %a5568 = shl nsw i32 %19218, 5
  %19219 = icmp sgt i32 %t1603, %a5568
  %blur_y.s0.x.v0.base.s2182 = select i1 %19219, i32 %a5568, i32 %t1603
  %19220 = icmp slt i32 %19218, 1
  %19221 = icmp sgt i32 %194, %a5568
  %19222 = or i1 %19220, %19221
  br i1 %19222, label %"produce blur_x2187", label %"consume blur_x2190"

"end for blur_y.s0.x.x.rebased2180":              ; preds = %"consume blur_x2190", %"end for blur_y.s0.x.x.rebased2164"
  br i1 %225, label %"produce blur_x2194", label %after_bb2191

"produce blur_x2187":                             ; preds = %"for blur_y.s0.x.x.rebased2179"
  %19223 = icmp slt i32 %blur_y.s0.x.v0.base.s2182, %194
  %blur_x.s0.x.v1.base.s2188 = select i1 %19223, i32 %blur_y.s0.x.v0.base.s2182, i32 %194
  %t11412189 = add nsw i32 %496, %blur_x.s0.x.v1.base.s2188
  %19224 = sext i32 %t11412189 to i64
  %19225 = getelementptr inbounds i16, i16* %read_input784, i64 %19224
  %19226 = getelementptr inbounds i16, i16* %19225, i64 1
  %19227 = bitcast i16* %19226 to <16 x i16>*
  %19228 = load <16 x i16>, <16 x i16>* %19227, align 2, !tbaa !396
  %19229 = getelementptr inbounds i16, i16* %19225, i64 17
  %19230 = bitcast i16* %19229 to <16 x i16>*
  %19231 = load <16 x i16>, <16 x i16>* %19230, align 2, !tbaa !396
  %19232 = shufflevector <16 x i16> %19228, <16 x i16> %19231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19233 = getelementptr inbounds i16, i16* %19225, i64 2
  %19234 = bitcast i16* %19233 to <16 x i16>*
  %19235 = load <16 x i16>, <16 x i16>* %19234, align 2, !tbaa !396
  %19236 = getelementptr inbounds i16, i16* %19225, i64 18
  %19237 = bitcast i16* %19236 to <16 x i16>*
  %19238 = load <16 x i16>, <16 x i16>* %19237, align 2, !tbaa !396
  %19239 = shufflevector <16 x i16> %19235, <16 x i16> %19238, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19240 = bitcast i16* %19225 to <16 x i16>*
  %19241 = load <16 x i16>, <16 x i16>* %19240, align 2, !tbaa !396
  %19242 = getelementptr inbounds i16, i16* %19225, i64 16
  %19243 = bitcast i16* %19242 to <16 x i16>*
  %19244 = load <16 x i16>, <16 x i16>* %19243, align 2, !tbaa !396
  %19245 = shufflevector <16 x i16> %19241, <16 x i16> %19244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19246 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19245, <32 x i16> %19239, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19247 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19232, <32 x i16> %19246, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19248 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19247, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19249 = shufflevector <32 x i16> %19248, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19250 = sext i32 %blur_x.s0.x.v1.base.s2188 to i64
  %19251 = add nsw i64 %19250, %19136
  %19252 = getelementptr inbounds i16, i16* %blur_x841, i64 %19251
  %19253 = bitcast i16* %19252 to <16 x i16>*
  store <16 x i16> %19249, <16 x i16>* %19253, align 2, !tbaa !399
  %19254 = shufflevector <32 x i16> %19248, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19255 = getelementptr inbounds i16, i16* %19252, i64 16
  %19256 = bitcast i16* %19255 to <16 x i16>*
  store <16 x i16> %19254, <16 x i16>* %19256, align 2, !tbaa !399
  br label %"consume blur_x2190"

"consume blur_x2190":                             ; preds = %"for blur_y.s0.x.x.rebased2179", %"produce blur_x2187"
  %19257 = sext i32 %blur_y.s0.x.v0.base.s2182 to i64
  %19258 = add nsw i64 %19139, %19257
  %19259 = getelementptr inbounds i16, i16* %blur_x841, i64 %19258
  %19260 = bitcast i16* %19259 to <16 x i16>*
  %19261 = load <16 x i16>, <16 x i16>* %19260, align 2, !tbaa !399
  %19262 = getelementptr inbounds i16, i16* %19259, i64 16
  %19263 = bitcast i16* %19262 to <16 x i16>*
  %19264 = load <16 x i16>, <16 x i16>* %19263, align 2, !tbaa !399
  %19265 = shufflevector <16 x i16> %19261, <16 x i16> %19264, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19266 = add nsw i64 %19142, %19257
  %19267 = getelementptr inbounds i16, i16* %blur_x841, i64 %19266
  %19268 = bitcast i16* %19267 to <16 x i16>*
  %19269 = load <16 x i16>, <16 x i16>* %19268, align 2, !tbaa !399
  %19270 = getelementptr inbounds i16, i16* %19267, i64 16
  %19271 = bitcast i16* %19270 to <16 x i16>*
  %19272 = load <16 x i16>, <16 x i16>* %19271, align 2, !tbaa !399
  %19273 = shufflevector <16 x i16> %19269, <16 x i16> %19272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19274 = add nsw i64 %19145, %19257
  %19275 = getelementptr inbounds i16, i16* %blur_x841, i64 %19274
  %19276 = bitcast i16* %19275 to <16 x i16>*
  %19277 = load <16 x i16>, <16 x i16>* %19276, align 2, !tbaa !399
  %19278 = getelementptr inbounds i16, i16* %19275, i64 16
  %19279 = bitcast i16* %19278 to <16 x i16>*
  %19280 = load <16 x i16>, <16 x i16>* %19279, align 2, !tbaa !399
  %19281 = shufflevector <16 x i16> %19277, <16 x i16> %19280, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19282 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19281, <32 x i16> %19273, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19283 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19265, <32 x i16> %19282, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19284 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19283, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19285 = shufflevector <32 x i16> %19284, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19286 = add nsw i64 %19149, %19257
  %19287 = getelementptr inbounds i16, i16* %258, i64 %19286
  %19288 = bitcast i16* %19287 to <16 x i16>*
  store <16 x i16> %19285, <16 x i16>* %19288, align 2, !tbaa !401
  %19289 = shufflevector <32 x i16> %19284, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19290 = getelementptr inbounds i16, i16* %19287, i64 16
  %19291 = bitcast i16* %19290 to <16 x i16>*
  store <16 x i16> %19289, <16 x i16>* %19291, align 2, !tbaa !401
  %19292 = add nuw nsw i32 %blur_y.s0.x.x.rebased2181, 1
  %.not2442 = icmp eq i32 %19292, %t1639860
  br i1 %.not2442, label %"end for blur_y.s0.x.x.rebased2180", label %"for blur_y.s0.x.x.rebased2179"

after_bb2191:                                     ; preds = %"end for blur_y.s0.x.x.rebased2180", %"produce blur_x2194"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2206.preheader", label %"end for blur_y.s0.x.x.rebased2207", !prof !386

"for blur_y.s0.x.x.rebased2206.preheader":        ; preds = %after_bb2191
  %19293 = sext i32 %t1638848 to i64
  %19294 = zext i32 %.pre-phi3434 to i64
  %19295 = mul nsw i64 %19294, %322
  %19296 = sub nsw i64 %19295, %293
  %19297 = zext i32 %.pre-phi3420 to i64
  %19298 = mul nsw i64 %19297, %322
  %19299 = sub nsw i64 %19298, %293
  %19300 = zext i32 %.pre-phi3428 to i64
  %19301 = mul nsw i64 %19300, %322
  %19302 = sub nsw i64 %19301, %293
  %19303 = sext i32 %a365 to i64
  %19304 = add nsw i64 %19303, 30
  %19305 = mul nsw i64 %19304, %319
  %19306 = add nsw i64 %19305, %323
  br label %"for blur_y.s0.x.x.rebased2206"

"produce blur_x2194":                             ; preds = %"end for blur_y.s0.x.x.rebased2180"
  %19307 = getelementptr inbounds i16, i16* %read_input784, i64 %500
  %19308 = getelementptr inbounds i16, i16* %19307, i64 -31
  %19309 = bitcast i16* %19308 to <16 x i16>*
  %19310 = load <16 x i16>, <16 x i16>* %19309, align 2, !tbaa !396
  %19311 = getelementptr inbounds i16, i16* %19307, i64 -15
  %19312 = bitcast i16* %19311 to <16 x i16>*
  %19313 = load <16 x i16>, <16 x i16>* %19312, align 2, !tbaa !396
  %19314 = shufflevector <16 x i16> %19310, <16 x i16> %19313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19315 = getelementptr inbounds i16, i16* %19307, i64 -30
  %19316 = bitcast i16* %19315 to <16 x i16>*
  %19317 = load <16 x i16>, <16 x i16>* %19316, align 2, !tbaa !396
  %19318 = getelementptr inbounds i16, i16* %19307, i64 -14
  %19319 = bitcast i16* %19318 to <16 x i16>*
  %19320 = load <16 x i16>, <16 x i16>* %19319, align 2, !tbaa !396
  %19321 = shufflevector <16 x i16> %19317, <16 x i16> %19320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19322 = getelementptr inbounds i16, i16* %19307, i64 -32
  %19323 = bitcast i16* %19322 to <16 x i16>*
  %19324 = load <16 x i16>, <16 x i16>* %19323, align 2, !tbaa !396
  %19325 = getelementptr inbounds i16, i16* %19307, i64 -16
  %19326 = bitcast i16* %19325 to <16 x i16>*
  %19327 = load <16 x i16>, <16 x i16>* %19326, align 2, !tbaa !396
  %19328 = shufflevector <16 x i16> %19324, <16 x i16> %19327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19329 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19328, <32 x i16> %19321, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19330 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19314, <32 x i16> %19329, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19331 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19330, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19332 = shufflevector <32 x i16> %19331, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19333 = zext i32 %.pre-phi3420 to i64
  %19334 = mul nsw i64 %294, %19333
  %19335 = add nsw i64 %296, %19334
  %19336 = getelementptr inbounds i16, i16* %blur_x841, i64 %19335
  %19337 = getelementptr inbounds i16, i16* %19336, i64 -32
  %19338 = bitcast i16* %19337 to <16 x i16>*
  store <16 x i16> %19332, <16 x i16>* %19338, align 2, !tbaa !399
  %19339 = shufflevector <32 x i16> %19331, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19340 = getelementptr inbounds i16, i16* %19336, i64 -16
  %19341 = bitcast i16* %19340 to <16 x i16>*
  store <16 x i16> %19339, <16 x i16>* %19341, align 2, !tbaa !399
  %19342 = zext i32 %.pre-phi3434 to i64
  %19343 = mul nsw i64 %19342, %318
  %19344 = add nsw i64 %19343, %291
  %19345 = getelementptr inbounds i16, i16* %blur_x841, i64 %19344
  %19346 = getelementptr inbounds i16, i16* %19345, i64 -32
  %19347 = bitcast i16* %19346 to <16 x i16>*
  %19348 = load <16 x i16>, <16 x i16>* %19347, align 2, !tbaa !399
  %19349 = getelementptr inbounds i16, i16* %19345, i64 -16
  %19350 = bitcast i16* %19349 to <16 x i16>*
  %19351 = load <16 x i16>, <16 x i16>* %19350, align 2, !tbaa !399
  %19352 = shufflevector <16 x i16> %19348, <16 x i16> %19351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19353 = mul nsw i64 %19333, %318
  %19354 = add nsw i64 %19353, %291
  %19355 = getelementptr inbounds i16, i16* %blur_x841, i64 %19354
  %19356 = getelementptr inbounds i16, i16* %19355, i64 -32
  %19357 = bitcast i16* %19356 to <16 x i16>*
  %19358 = load <16 x i16>, <16 x i16>* %19357, align 2, !tbaa !399
  %19359 = getelementptr inbounds i16, i16* %19355, i64 -16
  %19360 = bitcast i16* %19359 to <16 x i16>*
  %19361 = load <16 x i16>, <16 x i16>* %19360, align 2, !tbaa !399
  %19362 = shufflevector <16 x i16> %19358, <16 x i16> %19361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19363 = zext i32 %.pre-phi3428 to i64
  %19364 = mul nsw i64 %19363, %318
  %19365 = add nsw i64 %19364, %291
  %19366 = getelementptr inbounds i16, i16* %blur_x841, i64 %19365
  %19367 = getelementptr inbounds i16, i16* %19366, i64 -32
  %19368 = bitcast i16* %19367 to <16 x i16>*
  %19369 = load <16 x i16>, <16 x i16>* %19368, align 2, !tbaa !399
  %19370 = getelementptr inbounds i16, i16* %19366, i64 -16
  %19371 = bitcast i16* %19370 to <16 x i16>*
  %19372 = load <16 x i16>, <16 x i16>* %19371, align 2, !tbaa !399
  %19373 = shufflevector <16 x i16> %19369, <16 x i16> %19372, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19374 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19373, <32 x i16> %19362, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19375 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19352, <32 x i16> %19374, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19376 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19375, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19377 = shufflevector <32 x i16> %19376, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19378 = sext i32 %a365 to i64
  %19379 = add nsw i64 %19378, 30
  %19380 = mul nsw i64 %19379, %319
  %19381 = add nsw i64 %321, %19380
  %19382 = getelementptr inbounds i16, i16* %258, i64 %19381
  %19383 = getelementptr inbounds i16, i16* %19382, i64 -32
  %19384 = bitcast i16* %19383 to <16 x i16>*
  store <16 x i16> %19377, <16 x i16>* %19384, align 2, !tbaa !401
  %19385 = shufflevector <32 x i16> %19376, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19386 = getelementptr inbounds i16, i16* %19382, i64 -16
  %19387 = bitcast i16* %19386 to <16 x i16>*
  store <16 x i16> %19385, <16 x i16>* %19387, align 2, !tbaa !401
  br label %after_bb2191

"for blur_y.s0.x.x.rebased2206":                  ; preds = %"for blur_y.s0.x.x.rebased2206.preheader", %"consume blur_x2214"
  %indvars.iv3333 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2206.preheader" ], [ %indvars.iv.next3334, %"consume blur_x2214" ]
  %19388 = add nsw i64 %indvars.iv3333, %298
  %19389 = icmp slt i64 %19388, 1
  %19390 = trunc i64 %19388 to i32
  %19391 = shl nsw i32 %19390, 5
  %19392 = icmp sgt i32 %194, %19391
  %19393 = or i1 %19389, %19392
  br i1 %19393, label %"produce blur_x2212", label %"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge"

"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2206"
  %.pre3493 = shl nsw i64 %19388, 5
  br label %"consume blur_x2214"

"end for blur_y.s0.x.x.rebased2207":              ; preds = %"consume blur_x2214", %after_bb2191
  br i1 %299, label %"for blur_y.s0.x.x.rebased2222.preheader", label %"end for blur_y.s0.x.x.rebased2223", !prof !386

"for blur_y.s0.x.x.rebased2222.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2207"
  %19394 = sext i32 %t1638848 to i64
  %19395 = zext i32 %.pre-phi3434 to i64
  %19396 = mul nsw i64 %19395, %322
  %19397 = sub nsw i64 %19396, %293
  %19398 = zext i32 %.pre-phi3420 to i64
  %19399 = mul nsw i64 %19398, %322
  %19400 = sub nsw i64 %19399, %293
  %19401 = zext i32 %.pre-phi3428 to i64
  %19402 = mul nsw i64 %19401, %322
  %19403 = sub nsw i64 %19402, %293
  %19404 = sext i32 %a365 to i64
  %19405 = add nsw i64 %19404, 30
  %19406 = mul nsw i64 %19405, %319
  %19407 = add nsw i64 %19406, %323
  br label %"for blur_y.s0.x.x.rebased2222"

"produce blur_x2212":                             ; preds = %"for blur_y.s0.x.x.rebased2206"
  %t11522213 = add nsw i32 %502, %19391
  %19408 = sext i32 %t11522213 to i64
  %19409 = getelementptr inbounds i16, i16* %read_input784, i64 %19408
  %19410 = getelementptr inbounds i16, i16* %19409, i64 1
  %19411 = bitcast i16* %19410 to <16 x i16>*
  %19412 = load <16 x i16>, <16 x i16>* %19411, align 2, !tbaa !396
  %19413 = getelementptr inbounds i16, i16* %19409, i64 17
  %19414 = bitcast i16* %19413 to <16 x i16>*
  %19415 = load <16 x i16>, <16 x i16>* %19414, align 2, !tbaa !396
  %19416 = shufflevector <16 x i16> %19412, <16 x i16> %19415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19417 = getelementptr inbounds i16, i16* %19409, i64 2
  %19418 = bitcast i16* %19417 to <16 x i16>*
  %19419 = load <16 x i16>, <16 x i16>* %19418, align 2, !tbaa !396
  %19420 = getelementptr inbounds i16, i16* %19409, i64 18
  %19421 = bitcast i16* %19420 to <16 x i16>*
  %19422 = load <16 x i16>, <16 x i16>* %19421, align 2, !tbaa !396
  %19423 = shufflevector <16 x i16> %19419, <16 x i16> %19422, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19424 = bitcast i16* %19409 to <16 x i16>*
  %19425 = load <16 x i16>, <16 x i16>* %19424, align 2, !tbaa !396
  %19426 = getelementptr inbounds i16, i16* %19409, i64 16
  %19427 = bitcast i16* %19426 to <16 x i16>*
  %19428 = load <16 x i16>, <16 x i16>* %19427, align 2, !tbaa !396
  %19429 = shufflevector <16 x i16> %19425, <16 x i16> %19428, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19430 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19429, <32 x i16> %19423, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19431 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19416, <32 x i16> %19430, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19432 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19431, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19433 = shufflevector <32 x i16> %19432, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19434 = shl nsw i64 %19388, 5
  %19435 = add nsw i64 %19434, %19293
  %19436 = getelementptr inbounds i16, i16* %blur_x841, i64 %19435
  %19437 = bitcast i16* %19436 to <16 x i16>*
  store <16 x i16> %19433, <16 x i16>* %19437, align 2, !tbaa !399
  %19438 = shufflevector <32 x i16> %19432, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19439 = getelementptr inbounds i16, i16* %19436, i64 16
  %19440 = bitcast i16* %19439 to <16 x i16>*
  store <16 x i16> %19438, <16 x i16>* %19440, align 2, !tbaa !399
  br label %"consume blur_x2214"

"consume blur_x2214":                             ; preds = %"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge", %"produce blur_x2212"
  %.pre-phi3494 = phi i64 [ %.pre3493, %"for blur_y.s0.x.x.rebased2206.consume blur_x2214_crit_edge" ], [ %19434, %"produce blur_x2212" ]
  %19441 = add nsw i64 %19296, %.pre-phi3494
  %19442 = getelementptr inbounds i16, i16* %blur_x841, i64 %19441
  %19443 = bitcast i16* %19442 to <16 x i16>*
  %19444 = load <16 x i16>, <16 x i16>* %19443, align 2, !tbaa !399
  %19445 = getelementptr inbounds i16, i16* %19442, i64 16
  %19446 = bitcast i16* %19445 to <16 x i16>*
  %19447 = load <16 x i16>, <16 x i16>* %19446, align 2, !tbaa !399
  %19448 = shufflevector <16 x i16> %19444, <16 x i16> %19447, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19449 = add nsw i64 %19299, %.pre-phi3494
  %19450 = getelementptr inbounds i16, i16* %blur_x841, i64 %19449
  %19451 = bitcast i16* %19450 to <16 x i16>*
  %19452 = load <16 x i16>, <16 x i16>* %19451, align 2, !tbaa !399
  %19453 = getelementptr inbounds i16, i16* %19450, i64 16
  %19454 = bitcast i16* %19453 to <16 x i16>*
  %19455 = load <16 x i16>, <16 x i16>* %19454, align 2, !tbaa !399
  %19456 = shufflevector <16 x i16> %19452, <16 x i16> %19455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19457 = add nsw i64 %19302, %.pre-phi3494
  %19458 = getelementptr inbounds i16, i16* %blur_x841, i64 %19457
  %19459 = bitcast i16* %19458 to <16 x i16>*
  %19460 = load <16 x i16>, <16 x i16>* %19459, align 2, !tbaa !399
  %19461 = getelementptr inbounds i16, i16* %19458, i64 16
  %19462 = bitcast i16* %19461 to <16 x i16>*
  %19463 = load <16 x i16>, <16 x i16>* %19462, align 2, !tbaa !399
  %19464 = shufflevector <16 x i16> %19460, <16 x i16> %19463, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19465 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19464, <32 x i16> %19456, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19466 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19448, <32 x i16> %19465, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19467 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19466, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19468 = shufflevector <32 x i16> %19467, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19469 = add nsw i64 %19306, %.pre-phi3494
  %19470 = getelementptr inbounds i16, i16* %258, i64 %19469
  %19471 = bitcast i16* %19470 to <16 x i16>*
  store <16 x i16> %19468, <16 x i16>* %19471, align 2, !tbaa !401
  %19472 = shufflevector <32 x i16> %19467, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19473 = getelementptr inbounds i16, i16* %19470, i64 16
  %19474 = bitcast i16* %19473 to <16 x i16>*
  store <16 x i16> %19472, <16 x i16>* %19474, align 2, !tbaa !401
  %indvars.iv.next3334 = add nuw nsw i64 %indvars.iv3333, 1
  %19475 = icmp eq i64 %indvars.iv.next3334, %zext3335
  br i1 %19475, label %"end for blur_y.s0.x.x.rebased2207", label %"for blur_y.s0.x.x.rebased2206"

"for blur_y.s0.x.x.rebased2222":                  ; preds = %"for blur_y.s0.x.x.rebased2222.preheader", %"consume blur_x2233"
  %blur_y.s0.x.x.rebased2224 = phi i32 [ %19550, %"consume blur_x2233" ], [ 0, %"for blur_y.s0.x.x.rebased2222.preheader" ]
  %19476 = add nsw i32 %blur_y.s0.x.x.rebased2224, %t1582776
  %a5725 = shl nsw i32 %19476, 5
  %19477 = icmp sgt i32 %t1603, %a5725
  %blur_y.s0.x.v0.base.s2225 = select i1 %19477, i32 %a5725, i32 %t1603
  %19478 = icmp slt i32 %19476, 1
  %19479 = icmp sgt i32 %194, %a5725
  %19480 = or i1 %19478, %19479
  br i1 %19480, label %"produce blur_x2230", label %"consume blur_x2233"

"end for blur_y.s0.x.x.rebased2223":              ; preds = %"consume blur_x2233", %"end for blur_y.s0.x.x.rebased2207"
  br i1 %225, label %"produce blur_x2237", label %after_bb2234

"produce blur_x2230":                             ; preds = %"for blur_y.s0.x.x.rebased2222"
  %19481 = icmp slt i32 %blur_y.s0.x.v0.base.s2225, %194
  %blur_x.s0.x.v1.base.s2231 = select i1 %19481, i32 %blur_y.s0.x.v0.base.s2225, i32 %194
  %t11572232 = add nsw i32 %502, %blur_x.s0.x.v1.base.s2231
  %19482 = sext i32 %t11572232 to i64
  %19483 = getelementptr inbounds i16, i16* %read_input784, i64 %19482
  %19484 = getelementptr inbounds i16, i16* %19483, i64 1
  %19485 = bitcast i16* %19484 to <16 x i16>*
  %19486 = load <16 x i16>, <16 x i16>* %19485, align 2, !tbaa !396
  %19487 = getelementptr inbounds i16, i16* %19483, i64 17
  %19488 = bitcast i16* %19487 to <16 x i16>*
  %19489 = load <16 x i16>, <16 x i16>* %19488, align 2, !tbaa !396
  %19490 = shufflevector <16 x i16> %19486, <16 x i16> %19489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19491 = getelementptr inbounds i16, i16* %19483, i64 2
  %19492 = bitcast i16* %19491 to <16 x i16>*
  %19493 = load <16 x i16>, <16 x i16>* %19492, align 2, !tbaa !396
  %19494 = getelementptr inbounds i16, i16* %19483, i64 18
  %19495 = bitcast i16* %19494 to <16 x i16>*
  %19496 = load <16 x i16>, <16 x i16>* %19495, align 2, !tbaa !396
  %19497 = shufflevector <16 x i16> %19493, <16 x i16> %19496, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19498 = bitcast i16* %19483 to <16 x i16>*
  %19499 = load <16 x i16>, <16 x i16>* %19498, align 2, !tbaa !396
  %19500 = getelementptr inbounds i16, i16* %19483, i64 16
  %19501 = bitcast i16* %19500 to <16 x i16>*
  %19502 = load <16 x i16>, <16 x i16>* %19501, align 2, !tbaa !396
  %19503 = shufflevector <16 x i16> %19499, <16 x i16> %19502, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19504 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19503, <32 x i16> %19497, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19505 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19490, <32 x i16> %19504, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19506 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19505, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19507 = shufflevector <32 x i16> %19506, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19508 = sext i32 %blur_x.s0.x.v1.base.s2231 to i64
  %19509 = add nsw i64 %19508, %19394
  %19510 = getelementptr inbounds i16, i16* %blur_x841, i64 %19509
  %19511 = bitcast i16* %19510 to <16 x i16>*
  store <16 x i16> %19507, <16 x i16>* %19511, align 2, !tbaa !399
  %19512 = shufflevector <32 x i16> %19506, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19513 = getelementptr inbounds i16, i16* %19510, i64 16
  %19514 = bitcast i16* %19513 to <16 x i16>*
  store <16 x i16> %19512, <16 x i16>* %19514, align 2, !tbaa !399
  br label %"consume blur_x2233"

"consume blur_x2233":                             ; preds = %"for blur_y.s0.x.x.rebased2222", %"produce blur_x2230"
  %19515 = sext i32 %blur_y.s0.x.v0.base.s2225 to i64
  %19516 = add nsw i64 %19397, %19515
  %19517 = getelementptr inbounds i16, i16* %blur_x841, i64 %19516
  %19518 = bitcast i16* %19517 to <16 x i16>*
  %19519 = load <16 x i16>, <16 x i16>* %19518, align 2, !tbaa !399
  %19520 = getelementptr inbounds i16, i16* %19517, i64 16
  %19521 = bitcast i16* %19520 to <16 x i16>*
  %19522 = load <16 x i16>, <16 x i16>* %19521, align 2, !tbaa !399
  %19523 = shufflevector <16 x i16> %19519, <16 x i16> %19522, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19524 = add nsw i64 %19400, %19515
  %19525 = getelementptr inbounds i16, i16* %blur_x841, i64 %19524
  %19526 = bitcast i16* %19525 to <16 x i16>*
  %19527 = load <16 x i16>, <16 x i16>* %19526, align 2, !tbaa !399
  %19528 = getelementptr inbounds i16, i16* %19525, i64 16
  %19529 = bitcast i16* %19528 to <16 x i16>*
  %19530 = load <16 x i16>, <16 x i16>* %19529, align 2, !tbaa !399
  %19531 = shufflevector <16 x i16> %19527, <16 x i16> %19530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19532 = add nsw i64 %19403, %19515
  %19533 = getelementptr inbounds i16, i16* %blur_x841, i64 %19532
  %19534 = bitcast i16* %19533 to <16 x i16>*
  %19535 = load <16 x i16>, <16 x i16>* %19534, align 2, !tbaa !399
  %19536 = getelementptr inbounds i16, i16* %19533, i64 16
  %19537 = bitcast i16* %19536 to <16 x i16>*
  %19538 = load <16 x i16>, <16 x i16>* %19537, align 2, !tbaa !399
  %19539 = shufflevector <16 x i16> %19535, <16 x i16> %19538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19540 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19539, <32 x i16> %19531, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19541 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19523, <32 x i16> %19540, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19542 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19541, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19543 = shufflevector <32 x i16> %19542, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19544 = add nsw i64 %19407, %19515
  %19545 = getelementptr inbounds i16, i16* %258, i64 %19544
  %19546 = bitcast i16* %19545 to <16 x i16>*
  store <16 x i16> %19543, <16 x i16>* %19546, align 2, !tbaa !401
  %19547 = shufflevector <32 x i16> %19542, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19548 = getelementptr inbounds i16, i16* %19545, i64 16
  %19549 = bitcast i16* %19548 to <16 x i16>*
  store <16 x i16> %19547, <16 x i16>* %19549, align 2, !tbaa !401
  %19550 = add nuw nsw i32 %blur_y.s0.x.x.rebased2224, 1
  %.not2438 = icmp eq i32 %19550, %t1639860
  br i1 %.not2438, label %"end for blur_y.s0.x.x.rebased2223", label %"for blur_y.s0.x.x.rebased2222"

after_bb2234:                                     ; preds = %"end for blur_y.s0.x.x.rebased2223", %"produce blur_x2237"
  br i1 %297, label %"for blur_y.s0.x.x.rebased2249.preheader", label %"end for blur_y.s0.x.x.rebased2250", !prof !386

"for blur_y.s0.x.x.rebased2249.preheader":        ; preds = %after_bb2234
  %19551 = sext i32 %t1644876 to i64
  %19552 = zext i32 %.pre-phi3420 to i64
  %19553 = mul nsw i64 %19552, %322
  %19554 = sub nsw i64 %19553, %293
  %19555 = zext i32 %.pre-phi3424 to i64
  %19556 = mul nsw i64 %19555, %322
  %19557 = sub nsw i64 %19556, %293
  %19558 = zext i32 %.pre-phi3434 to i64
  %19559 = mul nsw i64 %19558, %322
  %19560 = sub nsw i64 %19559, %293
  %19561 = sext i32 %a365 to i64
  %19562 = add nsw i64 %19561, 31
  %19563 = mul nsw i64 %19562, %319
  %19564 = add nsw i64 %19563, %323
  br label %"for blur_y.s0.x.x.rebased2249"

"produce blur_x2237":                             ; preds = %"end for blur_y.s0.x.x.rebased2223"
  %19565 = getelementptr inbounds i16, i16* %read_input784, i64 %506
  %19566 = getelementptr inbounds i16, i16* %19565, i64 -31
  %19567 = bitcast i16* %19566 to <16 x i16>*
  %19568 = load <16 x i16>, <16 x i16>* %19567, align 2, !tbaa !396
  %19569 = getelementptr inbounds i16, i16* %19565, i64 -15
  %19570 = bitcast i16* %19569 to <16 x i16>*
  %19571 = load <16 x i16>, <16 x i16>* %19570, align 2, !tbaa !396
  %19572 = shufflevector <16 x i16> %19568, <16 x i16> %19571, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19573 = getelementptr inbounds i16, i16* %19565, i64 -30
  %19574 = bitcast i16* %19573 to <16 x i16>*
  %19575 = load <16 x i16>, <16 x i16>* %19574, align 2, !tbaa !396
  %19576 = getelementptr inbounds i16, i16* %19565, i64 -14
  %19577 = bitcast i16* %19576 to <16 x i16>*
  %19578 = load <16 x i16>, <16 x i16>* %19577, align 2, !tbaa !396
  %19579 = shufflevector <16 x i16> %19575, <16 x i16> %19578, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19580 = getelementptr inbounds i16, i16* %19565, i64 -32
  %19581 = bitcast i16* %19580 to <16 x i16>*
  %19582 = load <16 x i16>, <16 x i16>* %19581, align 2, !tbaa !396
  %19583 = getelementptr inbounds i16, i16* %19565, i64 -16
  %19584 = bitcast i16* %19583 to <16 x i16>*
  %19585 = load <16 x i16>, <16 x i16>* %19584, align 2, !tbaa !396
  %19586 = shufflevector <16 x i16> %19582, <16 x i16> %19585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19587 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19586, <32 x i16> %19579, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19588 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19572, <32 x i16> %19587, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19589 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19588, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19590 = shufflevector <32 x i16> %19589, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19591 = zext i32 %.pre-phi3424 to i64
  %19592 = mul nsw i64 %294, %19591
  %19593 = add nsw i64 %296, %19592
  %19594 = getelementptr inbounds i16, i16* %blur_x841, i64 %19593
  %19595 = getelementptr inbounds i16, i16* %19594, i64 -32
  %19596 = bitcast i16* %19595 to <16 x i16>*
  store <16 x i16> %19590, <16 x i16>* %19596, align 2, !tbaa !399
  %19597 = shufflevector <32 x i16> %19589, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19598 = getelementptr inbounds i16, i16* %19594, i64 -16
  %19599 = bitcast i16* %19598 to <16 x i16>*
  store <16 x i16> %19597, <16 x i16>* %19599, align 2, !tbaa !399
  %19600 = zext i32 %.pre-phi3420 to i64
  %19601 = mul nsw i64 %19600, %318
  %19602 = add nsw i64 %19601, %291
  %19603 = getelementptr inbounds i16, i16* %blur_x841, i64 %19602
  %19604 = getelementptr inbounds i16, i16* %19603, i64 -32
  %19605 = bitcast i16* %19604 to <16 x i16>*
  %19606 = load <16 x i16>, <16 x i16>* %19605, align 2, !tbaa !399
  %19607 = getelementptr inbounds i16, i16* %19603, i64 -16
  %19608 = bitcast i16* %19607 to <16 x i16>*
  %19609 = load <16 x i16>, <16 x i16>* %19608, align 2, !tbaa !399
  %19610 = shufflevector <16 x i16> %19606, <16 x i16> %19609, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19611 = mul nsw i64 %19591, %318
  %19612 = add nsw i64 %19611, %291
  %19613 = getelementptr inbounds i16, i16* %blur_x841, i64 %19612
  %19614 = getelementptr inbounds i16, i16* %19613, i64 -32
  %19615 = bitcast i16* %19614 to <16 x i16>*
  %19616 = load <16 x i16>, <16 x i16>* %19615, align 2, !tbaa !399
  %19617 = getelementptr inbounds i16, i16* %19613, i64 -16
  %19618 = bitcast i16* %19617 to <16 x i16>*
  %19619 = load <16 x i16>, <16 x i16>* %19618, align 2, !tbaa !399
  %19620 = shufflevector <16 x i16> %19616, <16 x i16> %19619, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19621 = zext i32 %.pre-phi3434 to i64
  %19622 = mul nsw i64 %19621, %318
  %19623 = add nsw i64 %19622, %291
  %19624 = getelementptr inbounds i16, i16* %blur_x841, i64 %19623
  %19625 = getelementptr inbounds i16, i16* %19624, i64 -32
  %19626 = bitcast i16* %19625 to <16 x i16>*
  %19627 = load <16 x i16>, <16 x i16>* %19626, align 2, !tbaa !399
  %19628 = getelementptr inbounds i16, i16* %19624, i64 -16
  %19629 = bitcast i16* %19628 to <16 x i16>*
  %19630 = load <16 x i16>, <16 x i16>* %19629, align 2, !tbaa !399
  %19631 = shufflevector <16 x i16> %19627, <16 x i16> %19630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19632 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19631, <32 x i16> %19620, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19633 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19610, <32 x i16> %19632, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19634 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19633, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19635 = shufflevector <32 x i16> %19634, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19636 = sext i32 %a365 to i64
  %19637 = add nsw i64 %19636, 31
  %19638 = mul nsw i64 %19637, %319
  %19639 = add nsw i64 %321, %19638
  %19640 = getelementptr inbounds i16, i16* %258, i64 %19639
  %19641 = getelementptr inbounds i16, i16* %19640, i64 -32
  %19642 = bitcast i16* %19641 to <16 x i16>*
  store <16 x i16> %19635, <16 x i16>* %19642, align 2, !tbaa !401
  %19643 = shufflevector <32 x i16> %19634, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19644 = getelementptr inbounds i16, i16* %19640, i64 -16
  %19645 = bitcast i16* %19644 to <16 x i16>*
  store <16 x i16> %19643, <16 x i16>* %19645, align 2, !tbaa !401
  br label %after_bb2234

"for blur_y.s0.x.x.rebased2249":                  ; preds = %"for blur_y.s0.x.x.rebased2249.preheader", %"consume blur_x2257"
  %indvars.iv3336 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2249.preheader" ], [ %indvars.iv.next3337, %"consume blur_x2257" ]
  %19646 = add nsw i64 %indvars.iv3336, %298
  %19647 = icmp slt i64 %19646, 1
  %19648 = trunc i64 %19646 to i32
  %19649 = shl nsw i32 %19648, 5
  %19650 = icmp sgt i32 %194, %19649
  %19651 = or i1 %19647, %19650
  br i1 %19651, label %"produce blur_x2255", label %"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge"

"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2249"
  %.pre3495 = shl nsw i64 %19646, 5
  br label %"consume blur_x2257"

"end for blur_y.s0.x.x.rebased2250":              ; preds = %"consume blur_x2257", %after_bb2234
  br i1 %299, label %"for blur_y.s0.x.x.rebased2265.preheader", label %"end for blur_y.s0.x.x.rebased2266", !prof !386

"for blur_y.s0.x.x.rebased2265.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2250"
  %19652 = sext i32 %t1644876 to i64
  %19653 = zext i32 %.pre-phi3420 to i64
  %19654 = mul nsw i64 %19653, %322
  %19655 = sub nsw i64 %19654, %293
  %19656 = zext i32 %.pre-phi3424 to i64
  %19657 = mul nsw i64 %19656, %322
  %19658 = sub nsw i64 %19657, %293
  %19659 = zext i32 %.pre-phi3434 to i64
  %19660 = mul nsw i64 %19659, %322
  %19661 = sub nsw i64 %19660, %293
  %19662 = sext i32 %a365 to i64
  %19663 = add nsw i64 %19662, 31
  %19664 = mul nsw i64 %19663, %319
  %19665 = add nsw i64 %19664, %323
  br label %"for blur_y.s0.x.x.rebased2265"

"produce blur_x2255":                             ; preds = %"for blur_y.s0.x.x.rebased2249"
  %t11682256 = add nsw i32 %508, %19649
  %19666 = sext i32 %t11682256 to i64
  %19667 = getelementptr inbounds i16, i16* %read_input784, i64 %19666
  %19668 = getelementptr inbounds i16, i16* %19667, i64 1
  %19669 = bitcast i16* %19668 to <16 x i16>*
  %19670 = load <16 x i16>, <16 x i16>* %19669, align 2, !tbaa !396
  %19671 = getelementptr inbounds i16, i16* %19667, i64 17
  %19672 = bitcast i16* %19671 to <16 x i16>*
  %19673 = load <16 x i16>, <16 x i16>* %19672, align 2, !tbaa !396
  %19674 = shufflevector <16 x i16> %19670, <16 x i16> %19673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19675 = getelementptr inbounds i16, i16* %19667, i64 2
  %19676 = bitcast i16* %19675 to <16 x i16>*
  %19677 = load <16 x i16>, <16 x i16>* %19676, align 2, !tbaa !396
  %19678 = getelementptr inbounds i16, i16* %19667, i64 18
  %19679 = bitcast i16* %19678 to <16 x i16>*
  %19680 = load <16 x i16>, <16 x i16>* %19679, align 2, !tbaa !396
  %19681 = shufflevector <16 x i16> %19677, <16 x i16> %19680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19682 = bitcast i16* %19667 to <16 x i16>*
  %19683 = load <16 x i16>, <16 x i16>* %19682, align 2, !tbaa !396
  %19684 = getelementptr inbounds i16, i16* %19667, i64 16
  %19685 = bitcast i16* %19684 to <16 x i16>*
  %19686 = load <16 x i16>, <16 x i16>* %19685, align 2, !tbaa !396
  %19687 = shufflevector <16 x i16> %19683, <16 x i16> %19686, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19688 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19687, <32 x i16> %19681, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19689 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19674, <32 x i16> %19688, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19690 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19689, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19691 = shufflevector <32 x i16> %19690, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19692 = shl nsw i64 %19646, 5
  %19693 = add nsw i64 %19692, %19551
  %19694 = getelementptr inbounds i16, i16* %blur_x841, i64 %19693
  %19695 = bitcast i16* %19694 to <16 x i16>*
  store <16 x i16> %19691, <16 x i16>* %19695, align 2, !tbaa !399
  %19696 = shufflevector <32 x i16> %19690, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19697 = getelementptr inbounds i16, i16* %19694, i64 16
  %19698 = bitcast i16* %19697 to <16 x i16>*
  store <16 x i16> %19696, <16 x i16>* %19698, align 2, !tbaa !399
  br label %"consume blur_x2257"

"consume blur_x2257":                             ; preds = %"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge", %"produce blur_x2255"
  %.pre-phi3496 = phi i64 [ %.pre3495, %"for blur_y.s0.x.x.rebased2249.consume blur_x2257_crit_edge" ], [ %19692, %"produce blur_x2255" ]
  %19699 = add nsw i64 %19554, %.pre-phi3496
  %19700 = getelementptr inbounds i16, i16* %blur_x841, i64 %19699
  %19701 = bitcast i16* %19700 to <16 x i16>*
  %19702 = load <16 x i16>, <16 x i16>* %19701, align 2, !tbaa !399
  %19703 = getelementptr inbounds i16, i16* %19700, i64 16
  %19704 = bitcast i16* %19703 to <16 x i16>*
  %19705 = load <16 x i16>, <16 x i16>* %19704, align 2, !tbaa !399
  %19706 = shufflevector <16 x i16> %19702, <16 x i16> %19705, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19707 = add nsw i64 %19557, %.pre-phi3496
  %19708 = getelementptr inbounds i16, i16* %blur_x841, i64 %19707
  %19709 = bitcast i16* %19708 to <16 x i16>*
  %19710 = load <16 x i16>, <16 x i16>* %19709, align 2, !tbaa !399
  %19711 = getelementptr inbounds i16, i16* %19708, i64 16
  %19712 = bitcast i16* %19711 to <16 x i16>*
  %19713 = load <16 x i16>, <16 x i16>* %19712, align 2, !tbaa !399
  %19714 = shufflevector <16 x i16> %19710, <16 x i16> %19713, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19715 = add nsw i64 %19560, %.pre-phi3496
  %19716 = getelementptr inbounds i16, i16* %blur_x841, i64 %19715
  %19717 = bitcast i16* %19716 to <16 x i16>*
  %19718 = load <16 x i16>, <16 x i16>* %19717, align 2, !tbaa !399
  %19719 = getelementptr inbounds i16, i16* %19716, i64 16
  %19720 = bitcast i16* %19719 to <16 x i16>*
  %19721 = load <16 x i16>, <16 x i16>* %19720, align 2, !tbaa !399
  %19722 = shufflevector <16 x i16> %19718, <16 x i16> %19721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19723 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19722, <32 x i16> %19714, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19724 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19706, <32 x i16> %19723, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19725 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19724, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19726 = shufflevector <32 x i16> %19725, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19727 = add nsw i64 %19564, %.pre-phi3496
  %19728 = getelementptr inbounds i16, i16* %258, i64 %19727
  %19729 = bitcast i16* %19728 to <16 x i16>*
  store <16 x i16> %19726, <16 x i16>* %19729, align 2, !tbaa !401
  %19730 = shufflevector <32 x i16> %19725, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19731 = getelementptr inbounds i16, i16* %19728, i64 16
  %19732 = bitcast i16* %19731 to <16 x i16>*
  store <16 x i16> %19730, <16 x i16>* %19732, align 2, !tbaa !401
  %indvars.iv.next3337 = add nuw nsw i64 %indvars.iv3336, 1
  %19733 = icmp eq i64 %indvars.iv.next3337, %zext3338
  br i1 %19733, label %"end for blur_y.s0.x.x.rebased2250", label %"for blur_y.s0.x.x.rebased2249"

"for blur_y.s0.x.x.rebased2265":                  ; preds = %"for blur_y.s0.x.x.rebased2265.preheader", %"consume blur_x2276"
  %blur_y.s0.x.x.rebased2267 = phi i32 [ %19809, %"consume blur_x2276" ], [ 0, %"for blur_y.s0.x.x.rebased2265.preheader" ]
  %19734 = add nsw i32 %blur_y.s0.x.x.rebased2267, %t1582776
  %a5882 = shl nsw i32 %19734, 5
  %19735 = icmp sgt i32 %t1603, %a5882
  %blur_y.s0.x.v0.base.s2268 = select i1 %19735, i32 %a5882, i32 %t1603
  %19736 = icmp slt i32 %19734, 1
  %19737 = icmp sgt i32 %194, %a5882
  %19738 = or i1 %19736, %19737
  br i1 %19738, label %"produce blur_x2273", label %"consume blur_x2276"

"end for blur_y.s0.x.x.rebased2266":              ; preds = %"consume blur_x2276", %"end for blur_y.s0.x.x.rebased2250"
  %19739 = add nuw nsw i32 %blur_y.s0.y.y780, 1
  %.not2434 = icmp eq i32 %19739, %t1568777
  br i1 %.not2434, label %if.then.i2743.loopexit, label %"for blur_y.s0.y.y778"

"produce blur_x2273":                             ; preds = %"for blur_y.s0.x.x.rebased2265"
  %19740 = icmp slt i32 %blur_y.s0.x.v0.base.s2268, %194
  %blur_x.s0.x.v1.base.s2274 = select i1 %19740, i32 %blur_y.s0.x.v0.base.s2268, i32 %194
  %t11732275 = add nsw i32 %508, %blur_x.s0.x.v1.base.s2274
  %19741 = sext i32 %t11732275 to i64
  %19742 = getelementptr inbounds i16, i16* %read_input784, i64 %19741
  %19743 = getelementptr inbounds i16, i16* %19742, i64 1
  %19744 = bitcast i16* %19743 to <16 x i16>*
  %19745 = load <16 x i16>, <16 x i16>* %19744, align 2, !tbaa !396
  %19746 = getelementptr inbounds i16, i16* %19742, i64 17
  %19747 = bitcast i16* %19746 to <16 x i16>*
  %19748 = load <16 x i16>, <16 x i16>* %19747, align 2, !tbaa !396
  %19749 = shufflevector <16 x i16> %19745, <16 x i16> %19748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19750 = getelementptr inbounds i16, i16* %19742, i64 2
  %19751 = bitcast i16* %19750 to <16 x i16>*
  %19752 = load <16 x i16>, <16 x i16>* %19751, align 2, !tbaa !396
  %19753 = getelementptr inbounds i16, i16* %19742, i64 18
  %19754 = bitcast i16* %19753 to <16 x i16>*
  %19755 = load <16 x i16>, <16 x i16>* %19754, align 2, !tbaa !396
  %19756 = shufflevector <16 x i16> %19752, <16 x i16> %19755, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19757 = bitcast i16* %19742 to <16 x i16>*
  %19758 = load <16 x i16>, <16 x i16>* %19757, align 2, !tbaa !396
  %19759 = getelementptr inbounds i16, i16* %19742, i64 16
  %19760 = bitcast i16* %19759 to <16 x i16>*
  %19761 = load <16 x i16>, <16 x i16>* %19760, align 2, !tbaa !396
  %19762 = shufflevector <16 x i16> %19758, <16 x i16> %19761, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19763 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19762, <32 x i16> %19756, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19764 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19749, <32 x i16> %19763, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19765 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19764, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19766 = shufflevector <32 x i16> %19765, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19767 = sext i32 %blur_x.s0.x.v1.base.s2274 to i64
  %19768 = add nsw i64 %19767, %19652
  %19769 = getelementptr inbounds i16, i16* %blur_x841, i64 %19768
  %19770 = bitcast i16* %19769 to <16 x i16>*
  store <16 x i16> %19766, <16 x i16>* %19770, align 2, !tbaa !399
  %19771 = shufflevector <32 x i16> %19765, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19772 = getelementptr inbounds i16, i16* %19769, i64 16
  %19773 = bitcast i16* %19772 to <16 x i16>*
  store <16 x i16> %19771, <16 x i16>* %19773, align 2, !tbaa !399
  br label %"consume blur_x2276"

"consume blur_x2276":                             ; preds = %"for blur_y.s0.x.x.rebased2265", %"produce blur_x2273"
  %19774 = sext i32 %blur_y.s0.x.v0.base.s2268 to i64
  %19775 = add nsw i64 %19655, %19774
  %19776 = getelementptr inbounds i16, i16* %blur_x841, i64 %19775
  %19777 = bitcast i16* %19776 to <16 x i16>*
  %19778 = load <16 x i16>, <16 x i16>* %19777, align 2, !tbaa !399
  %19779 = getelementptr inbounds i16, i16* %19776, i64 16
  %19780 = bitcast i16* %19779 to <16 x i16>*
  %19781 = load <16 x i16>, <16 x i16>* %19780, align 2, !tbaa !399
  %19782 = shufflevector <16 x i16> %19778, <16 x i16> %19781, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19783 = add nsw i64 %19658, %19774
  %19784 = getelementptr inbounds i16, i16* %blur_x841, i64 %19783
  %19785 = bitcast i16* %19784 to <16 x i16>*
  %19786 = load <16 x i16>, <16 x i16>* %19785, align 2, !tbaa !399
  %19787 = getelementptr inbounds i16, i16* %19784, i64 16
  %19788 = bitcast i16* %19787 to <16 x i16>*
  %19789 = load <16 x i16>, <16 x i16>* %19788, align 2, !tbaa !399
  %19790 = shufflevector <16 x i16> %19786, <16 x i16> %19789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19791 = add nsw i64 %19661, %19774
  %19792 = getelementptr inbounds i16, i16* %blur_x841, i64 %19791
  %19793 = bitcast i16* %19792 to <16 x i16>*
  %19794 = load <16 x i16>, <16 x i16>* %19793, align 2, !tbaa !399
  %19795 = getelementptr inbounds i16, i16* %19792, i64 16
  %19796 = bitcast i16* %19795 to <16 x i16>*
  %19797 = load <16 x i16>, <16 x i16>* %19796, align 2, !tbaa !399
  %19798 = shufflevector <16 x i16> %19794, <16 x i16> %19797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19799 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19798, <32 x i16> %19790, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19800 = call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %19782, <32 x i16> %19799, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0) #11
  %19801 = call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %19800, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0) #11
  %19802 = shufflevector <32 x i16> %19801, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19803 = add nsw i64 %19665, %19774
  %19804 = getelementptr inbounds i16, i16* %258, i64 %19803
  %19805 = bitcast i16* %19804 to <16 x i16>*
  store <16 x i16> %19802, <16 x i16>* %19805, align 2, !tbaa !401
  %19806 = shufflevector <32 x i16> %19801, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19807 = getelementptr inbounds i16, i16* %19804, i64 16
  %19808 = bitcast i16* %19807 to <16 x i16>*
  store <16 x i16> %19806, <16 x i16>* %19808, align 2, !tbaa !401
  %19809 = add nuw nsw i32 %blur_y.s0.x.x.rebased2267, 1
  %.not2435 = icmp eq i32 %19809, %t1639860
  br i1 %.not2435, label %"end for blur_y.s0.x.x.rebased2266", label %"for blur_y.s0.x.x.rebased2265"
}

; Function Attrs: nounwind
define i32 @blur3x3_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur3x3(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur3x3_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur3x3_metadata_storage
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.0(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

declare <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16>, <32 x i16>, i32, i32, i32, i32, i32, i32, i32)

declare <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16>, <32 x i16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.1(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.2(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.3(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.4(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.5(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.6(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.7(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.8(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.9(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.10(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.11(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.12(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.13(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.14(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.15(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.16(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.17(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.18(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.19(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.20(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.21(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.22(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.23(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.24(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.25(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.26(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.27(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.28(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.29(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.30(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.31(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.32(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.33(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.34(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.35(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.36(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.37(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.38(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.39(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.40(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.41(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.42(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.43(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.44(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.45(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.46(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.47(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.48(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.49(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.50(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.51(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.52(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.53(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.54(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.55(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.56(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.57(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.58(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.59(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.60(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.61(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.62(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.63(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.64(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.65(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.66(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.67(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.68(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.69(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.70(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.71(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.72(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.73(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.74(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.75(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.76(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.77(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.78(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.79(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.80(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.81(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.82(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.83(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.84(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.85(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.86(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.87(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.88(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.89(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.90(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.91(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.92(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.93(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.94(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.95(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.96(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.97(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.98(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.99(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.100(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.101(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.102(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.103(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.104(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.105(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.106(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.107(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.108(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.109(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.110(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.111(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.112(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.113(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.114(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.115(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.116(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.117(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.118(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.119(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.120(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.121(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.122(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.123(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.124(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.125(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.126(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.127(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.128(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.129(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.130(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.131(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.132(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.133(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.134(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.135(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.136(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.137(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.138(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.139(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.140(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.141(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.142(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.143(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.144(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.145(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.146(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.147(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.148(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.149(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.150(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.151(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.152(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.153(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.154(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.155(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.156(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.157(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.158(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.159(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.160(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.161(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.162(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.163(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.164(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.165(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.166(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.167(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.168(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.169(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.170(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.171(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.172(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.173(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.174(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.175(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.176(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.177(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.178(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.179(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.180(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.181(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.182(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.183(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.184(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.185(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.186(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.187(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.188(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.189(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.190(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.191(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.192(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.193(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.194(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.195(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.196(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

define <32 x i16> @hydride.node.blur3x3_x86_depth3_muchen_unlegalized.197(<32 x i16> %arg, <32 x i16> %arg.1, <32 x i16> %arg.2) local_unnamed_addr {
entry:
  %0 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg.2, <32 x i16> %arg.1, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %1 = tail call <32 x i16> @llvm.hydride._mm_add_pi8_dsl(<32 x i16> %arg, <32 x i16> %0, i32 512, i32 512, i32 0, i32 512, i32 16, i32 -1, i32 0)
  %2 = tail call <32 x i16> @llvm.hydride._mm_div_epi64_dsl(<32 x i16> %1, <32 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, i32 512, i32 512, i32 0, i32 512, i32 16, i32 0, i32 0, i32 32, i32 0, i32 32, i32 0)
  ret <32 x i16> %2
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
