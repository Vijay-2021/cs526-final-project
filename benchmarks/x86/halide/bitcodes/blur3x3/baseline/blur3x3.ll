; ModuleID = 'blur3x3'
source_filename = "/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@.str.5 = private unnamed_addr constant [136 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@.str.3 = private unnamed_addr constant [269 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [130 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [192 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [146 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@reltable.halide_default_trace = private unnamed_addr constant [11 x i32] [i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @.str.3.12 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @.str.4.13 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([18 x i8]* @.str.5.14 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @.str.6.15 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @.str.7 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @.str.8.16 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([8 x i8]* @.str.9.17 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([12 x i8]* @.str.10 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([15 x i8]* @.str.11 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([13 x i8]* @.str.12 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.13 to i64), i64 ptrtoint ([11 x i32]* @reltable.halide_default_trace to i64)) to i32)], align 4
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [148 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [145 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [126 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.32 = private unnamed_addr constant [150 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [132 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [135 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [134 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [135 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [128 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [129 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [133 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [133 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [133 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [134 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [134 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [128 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [144 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [134 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [128 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [144 x i8] c"/home/akashk4/fresh3/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [59 x i8] c"x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-sse41\00", align 64
@str.202 = private constant [8 x i8] c"blur3x3\00", align 32
@blur3x3_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@str.203 = private constant [21 x i8] c"Output buffer blur_y\00", align 32
@str.204 = private constant [19 x i8] c"Input buffer input\00", align 32
@str.205 = private constant [16 x i8] c"blur_y.stride.0\00", align 32
@str.206 = private constant [2 x i8] c"1\00", align 32
@str.207 = private constant [15 x i8] c"input.stride.0\00", align 32
@str.208 = private constant [11 x i8] c"read_input\00", align 32
@str.209 = private constant [7 x i8] c"blur_x\00", align 32
@reltable.halide_type_to_string = private unnamed_addr constant [4 x i32] [i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @.str.14.76 to i64), i64 ptrtoint ([4 x i32]* @reltable.halide_type_to_string to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @.str.15.75 to i64), i64 ptrtoint ([4 x i32]* @reltable.halide_type_to_string to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @.str.16.74 to i64), i64 ptrtoint ([4 x i32]* @reltable.halide_type_to_string to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([7 x i8]* @.str.17.73 to i64), i64 ptrtoint ([4 x i32]* @reltable.halide_type_to_string to i64)) to i32)], align 4

; Function Attrs: mustprogress nounwind
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #18
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !11
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !11
  tail call void @free(i8* %1) #18
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !11
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !11
  ret i8* (i8*, i64)* %0
}

; Function Attrs: mustprogress nounwind
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !11
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !11
  ret void (i8*, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !11
  %call = tail call i8* %0(i8* %user_context, i64 %x) #18
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !11
  tail call void %0(i8* %user_context, i8* %ptr) #18
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #18
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #18
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !15
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !15
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #18
  call void @halide_print(i8* %user_context, i8* nonnull %0) #18
  call void @abort() #18
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nounwind
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !11
  tail call void %0(i8* %user_context, i8* %msg) #18
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !11
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !11
  ret void (i8*, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !11
  tail call void %0(i8* %user_context, i8* %msg) #18
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !11
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !11
  ret void (i8*, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !16, !range !18
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #18
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #18
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !19
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !19
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: mustprogress nounwind
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #18
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #18
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #18
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #18
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #18
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !21
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !25
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !26
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !27
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !28
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !29
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !30
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !31
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !32
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !33
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !34
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !35
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !36
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !37
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !38
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !39
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !40
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !41
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #19
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #19
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %1 = load i32, i32* %exit_status, align 4, !tbaa !35
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic, align 8
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic, align 8
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #18
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic, align 8
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !42
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !44
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %5, i64 %6) #18
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i, !llvm.loop !46

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !18
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i.3
  %bytes.011.i = phi i8* [ %incdec.ptr.i.3, %while.body.i.3 ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !15
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %2 = load i8, i8* %incdec.ptr.i, align 1, !tbaa !15
  %cmp2.i.1 = icmp eq i8 %2, 0
  br i1 %cmp2.i.1, label %while.body.i.1, label %do.body.i.split.loop.exit11

do.body.i.split.loop.exit:                        ; preds = %while.body.i.2
  %incdec.ptr.i.2.le = getelementptr inbounds i8, i8* %bytes.011.i, i64 3
  br label %do.body.i

do.body.i.split.loop.exit9:                       ; preds = %while.body.i.1
  %incdec.ptr.i.1.le = getelementptr inbounds i8, i8* %bytes.011.i, i64 2
  br label %do.body.i

do.body.i.split.loop.exit11:                      ; preds = %while.body.i
  %incdec.ptr.i.le = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  br label %do.body.i

do.body.i:                                        ; preds = %land.rhs.i, %do.body.i.split.loop.exit11, %do.body.i.split.loop.exit9, %do.body.i.split.loop.exit
  %bytes.011.i.lcssa = phi i8* [ %incdec.ptr.i.2.le, %do.body.i.split.loop.exit ], [ %incdec.ptr.i.1.le, %do.body.i.split.loop.exit9 ], [ %incdec.ptr.i.le, %do.body.i.split.loop.exit11 ], [ %bytes.011.i, %land.rhs.i ]
  %cmp3.i = icmp eq i8* %bytes.011.i.lcssa, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @.str.6, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %while.body.i.3, %if.then.i, %do.body.i
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !52
  %tobool1.not = icmp eq i32 %3, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #19
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %4 = phi i32 [ %call, %if.then2 ], [ %3, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %5 = icmp sgt i32 %4, 1
  %.threads.i = select i1 %5, i32 %4, i32 1
  %6 = icmp slt i32 %.threads.i, 256
  %retval.0.i = select i1 %6, i32 %.threads.i, i32 256
  store i32 %retval.0.i, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !52
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp178 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp178, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %7 = icmp eq i32 %num_jobs, 1
  br i1 %7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
  %min_threads.0184.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0182.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0181.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0180.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0179.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.unr, i32 0, i32 7
  %8 = load i32, i32* %min_threads5.epil, align 4, !tbaa !31
  %cmp6.epil = icmp eq i32 %8, 0
  %add.epil = add nsw i32 %8, %min_threads.0184.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0180.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0182.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.unr, i32 0, i32 4
  %9 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !29
  %cmp16.not.epil = icmp eq i32 %9, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0181.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.unr, i32 0, i32 8
  %10 = load i8, i8* %serial.epil, align 8, !tbaa !27, !range !18
  %tobool22.not.epil = icmp eq i8 %10, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0179.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.unr, i32 0, i32 6
  %11 = load i32, i32* %extent.epil, align 8, !tbaa !26
  %add28.epil = add nsw i32 %11, %workers_to_wake.0179.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %spec.select.lcssa, 1
  %phi.bo197 = and i8 %job_may_block.1.lcssa, 1
  %phi.bo198 = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo198, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo197, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %min_threads.0184 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0182 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0181 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0180 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0179 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv, i32 0, i32 7
  %12 = load i32, i32* %min_threads5, align 4, !tbaa !31
  %cmp6 = icmp eq i32 %12, 0
  %add = add nsw i32 %12, %min_threads.0184
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv, i32 0, i32 4
  %13 = load i32, i32* %num_semaphores, align 8, !tbaa !29
  %cmp16.not = icmp eq i32 %13, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv, i32 0, i32 8
  %14 = load i8, i8* %serial, align 8, !tbaa !27, !range !18
  %tobool22.not = icmp eq i8 %14, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0179, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv, i32 0, i32 6
  %15 = load i32, i32* %extent, align 8, !tbaa !26
  %add28 = add nsw i32 %15, %workers_to_wake.0179
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 0, i32 7
  %16 = load i32, i32* %min_threads5.1, align 4, !tbaa !31
  %cmp6.1 = icmp eq i32 %16, 0
  %add.1 = add nsw i32 %16, %add
  %17 = select i1 %cmp6.1, i1 true, i1 %cmp6
  %stealable_jobs.1.1 = select i1 %17, i8 1, i8 %stealable_jobs.0180
  %18 = select i1 %cmp6.1, i1 %cmp6, i1 false
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0182, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !29
  %cmp16.not.1 = icmp eq i32 %19, 0
  %20 = select i1 %cmp16.not.1, i1 %cmp16.not, i1 false
  %spec.select.1 = select i1 %20, i8 %job_has_acquires.0181, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 0, i32 8
  %21 = load i8, i8* %serial.1, align 8, !tbaa !27, !range !18
  %tobool22.not.1 = icmp eq i8 %21, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %tobool33.not = icmp eq i8 %job_has_acquires.0.lcssa, 0
  %tobool34.not = icmp eq i8 %job_may_block.0.lcssa, 0
  %or.cond = select i1 %tobool33.not, i1 %tobool34.not, i1 false
  %not.or.cond = xor i1 %or.cond, true
  %add36 = zext i1 %not.or.cond to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %.pr = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !53
  %cmp38189 = icmp slt i32 %.pr, 256
  br i1 %cmp38189, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %22 = phi i32 [ %inc45, %while.body ], [ %.pr, %if.then32 ]
  %23 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !52
  %sub = add nsw i32 %23, -1
  %cmp39 = icmp slt i32 %22, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %22, 1
  %24 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  %sub41 = sub i32 %add40, %24
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %25 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  %inc43 = add nsw i32 %25, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #19
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !53
  %inc45 = add nsw i32 %26, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !53
  %idxprom46 = sext i32 %26 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !11
  %cmp38 = icmp slt i32 %26, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !56

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %or.cond, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %27 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  %inc55 = add nsw i32 %27, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %28 = load i32, i32* %min_threads63, align 4, !tbaa !31
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %29 = load i32, i32* %active_workers, align 8, !tbaa !36
  %mul = mul nsw i32 %29, %28
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %30 = load i32, i32* %threads_reserved, align 8, !tbaa !57
  %sub64 = sub nsw i32 %mul, %30
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([269 x i8], [269 x i8]* @.str.3, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %tobool70.not = icmp eq i8 %job_has_acquires.0.lcssa, 0
  %tobool72.not = icmp eq i8 %job_may_block.0.lcssa, 0
  %or.cond173 = select i1 %tobool70.not, i1 %tobool72.not, i1 false
  br i1 %or.cond173, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %31 = load i32, i32* %threads_reserved, align 8, !tbaa !57
  %inc75 = add nsw i32 %31, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !57
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp178, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !58
  %32 = zext i32 %num_jobs to i64
  %xtraiter7 = and i64 %32, 1
  %lcmp.mod8.not = icmp eq i64 %xtraiter7, 0
  br i1 %lcmp.mod8.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %i78.0192.prol = add nsw i32 %num_jobs, -1
  %idxprom84176.prol = zext i32 %i78.0192.prol to i64
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !59
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !39
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !40
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !57
  %indvars.iv.next196.prol = add nsw i64 %32, -1
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv195.unr = phi i64 [ %32, %for.body83.lr.ph ], [ %indvars.iv.next196.prol, %for.body83.prol ]
  %arrayidx85193.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %i78.0192.in.unr = phi i32 [ %num_jobs, %for.body83.lr.ph ], [ %i78.0192.prol, %for.body83.prol ]
  %33 = icmp eq i32 %num_jobs, 1
  br i1 %33, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !58
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %34 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !60
  %tobool96 = icmp ne i32 %34, 0
  %35 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %36 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %35, %36
  %37 = select i1 %tobool96, i1 true, i1 %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %35
  %or.cond174 = select i1 %37, i1 true, i1 %cmp102
  %storemerge = select i1 %or.cond174, i32 %36, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !61
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #19
  %38 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !61
  %39 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  %cmp106 = icmp sgt i32 %38, %39
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv195 = phi i64 [ %indvars.iv.next196.1, %for.body83 ], [ %indvars.iv195.unr, %for.body83.prol.loopexit ]
  %arrayidx85193 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85193.unr, %for.body83.prol.loopexit ]
  %i78.0192.in = phi i32 [ %i78.0192.1, %for.body83 ], [ %i78.0192.in.unr, %for.body83.prol.loopexit ]
  %i78.0192 = add nsw i32 %i78.0192.in, -1
  %idxprom84176 = zext i32 %i78.0192 to i64
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85193, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !59
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !39
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !40
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !57
  %i78.0192.1 = add nsw i32 %i78.0192.in, -2
  %idxprom84176.1 = zext i32 %i78.0192.1 to i64
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !59
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !39
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !40
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %idxprom84176.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !57
  %cmp81.1 = icmp sgt i64 %indvars.iv195, 2
  %indvars.iv.next196.1 = add nsw i64 %indvars.iv195, -2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !62

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #19
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #19
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %tobool112.not = icmp eq i8 %job_has_acquires.0.lcssa, 0
  %tobool114.not = icmp eq i8 %job_may_block.0.lcssa, 0
  %or.cond175 = select i1 %tobool112.not, i1 %tobool114.not, i1 false
  br i1 %or.cond175, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %40 = load i32, i32* %threads_reserved118, align 8, !tbaa !57
  %dec119 = add nsw i32 %40, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !57
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  %dec121 = add nsw i32 %41, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

while.body.i.1:                                   ; preds = %while.body.i
  %incdec.ptr.i.1 = getelementptr inbounds i8, i8* %bytes.011.i, i64 2
  %42 = load i8, i8* %incdec.ptr.i.1, align 1, !tbaa !15
  %cmp2.i.2 = icmp eq i8 %42, 0
  br i1 %cmp2.i.2, label %while.body.i.2, label %do.body.i.split.loop.exit9

while.body.i.2:                                   ; preds = %while.body.i.1
  %incdec.ptr.i.2 = getelementptr inbounds i8, i8* %bytes.011.i, i64 3
  %43 = load i8, i8* %incdec.ptr.i.2, align 1, !tbaa !15
  %cmp2.i.3 = icmp eq i8 %43, 0
  br i1 %cmp2.i.3, label %while.body.i.3, label %do.body.i.split.loop.exit

while.body.i.3:                                   ; preds = %while.body.i.2
  %incdec.ptr.i.3 = getelementptr inbounds i8, i8* %bytes.011.i, i64 4
  %exitcond.not.i.3 = icmp eq i8* %incdec.ptr.i.3, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %exitcond.not.i.3, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %land.rhs.i, !llvm.loop !63

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 0, i32 6
  %44 = load i32, i32* %extent.1, align 8, !tbaa !26
  %add28.1 = add nsw i32 %44, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !64
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !26
  %tobool.not.i = icmp ne i32 %0, 0
  %1 = load i32, i32* %active_workers.i, align 8
  %tobool2.i = icmp ne i32 %1, 0
  %2 = select i1 %tobool.not.i, i1 true, i1 %tobool2.i
  br i1 %2, label %if.then, label %while.end316

cond.end:                                         ; preds = %while.cond
  %3 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !65, !range !18
  %tobool1.not = icmp eq i8 %3, 0
  br i1 %tobool1.not, label %while.body.thread, label %while.end316

while.body.thread:                                ; preds = %cond.end
  %4 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !58
  br label %do.end

if.then:                                          ; preds = %cond.true
  %5 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !58
  %6 = load i32, i32* %exit_status, align 4, !tbaa !35
  %cmp.not = icmp eq i32 %6, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %cmp4 = icmp eq i32 %1, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not534 = icmp eq %"struct.Halide::Runtime::Internal::work"* %5, %owned_job
  br i1 %cmp7.not534, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0535 = phi %"struct.Halide::Runtime::Internal::work"* [ %7, %while.body8 ], [ %5, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0535, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !59
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %7, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !66

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0535, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !59
  store %"struct.Halide::Runtime::Internal::work"* %8, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !11
  store i32 0, i32* %extent.i, align 8, !tbaa !26
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %9 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !41
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %9, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %9, i64 0, i32 9
  %10 = load i32, i32* %exit_status13, align 4, !tbaa !35
  %cmp14.not = icmp eq i32 %10, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %10, i32* %exit_status, align 4, !tbaa !35
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #19
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3, %while.body.thread
  %11 = phi %"struct.Halide::Runtime::Internal::work"* [ %4, %while.body.thread ], [ %5, %if.else ], [ %5, %land.lhs.true ], [ %5, %if.then3 ]
  %tobool23.old.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %tobool23.old.not, label %if.then103, label %do.end27

do.end27:                                         ; preds = %do.end, %cleanup
  %prev_ptr.1 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %job.1 = phi %"struct.Halide::Runtime::Internal::work"* [ %37, %cleanup ], [ %11, %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 5
  %12 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !41
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %12, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %13 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !53
  %add = add nsw i32 %13, 1
  %14 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  %sub = sub i32 %add, %14
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %12, i64 0, i32 8
  %15 = load i32, i32* %active_workers33, align 8, !tbaa !36
  %cmp34 = icmp eq i32 %15, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %12, i64 0, i32 0, i32 7
  %16 = load i32, i32* %min_threads, align 4, !tbaa !31
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %12, i64 0, i32 6
  %17 = load i32, i32* %threads_reserved, align 8, !tbaa !57
  %sub37 = sub nsw i32 %16, %17
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %16, %15
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %12, i64 0, i32 6
  %18 = load i32, i32* %threads_reserved42, align 8, !tbaa !57
  %sub43 = sub nsw i32 %mul, %18
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 7
  %19 = load i32, i32* %min_threads47, align 4, !tbaa !31
  %cmp48.not = icmp slt i32 %threads_available.0, %19
  br i1 %tobool.not, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end45
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 3
  %20 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !39
  %21 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !39
  %cmp57 = icmp eq %"struct.Halide::Runtime::Internal::work"* %20, %21
  %cmp60 = icmp eq i32 %19, 0
  %spec.select = select i1 %cmp57, i1 true, i1 %cmp60
  br label %lor.end

lor.end:                                          ; preds = %lor.lhs.false, %if.end45
  %22 = phi i1 [ true, %if.end45 ], [ %spec.select, %lor.lhs.false ]
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 8
  %23 = load i8, i8* %serial, align 8, !tbaa !27, !range !18
  %tobool69.not = icmp eq i8 %23, 0
  br i1 %tobool69.not, label %lor.end73, label %lor.rhs70

lor.rhs70:                                        ; preds = %lor.end
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 8
  %24 = load i32, i32* %active_workers71, align 8, !tbaa !36
  %cmp72 = icmp eq i32 %24, 0
  br label %lor.end73

lor.end73:                                        ; preds = %lor.rhs70, %lor.end
  %25 = phi i1 [ true, %lor.end ], [ %cmp72, %lor.rhs70 ]
  %.not = xor i1 %22, true
  %brmerge = select i1 %cmp48.not, i1 true, i1 %.not
  %.not473 = xor i1 %25, true
  %brmerge474 = select i1 %brmerge, i1 true, i1 %.not473
  br i1 %brmerge474, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 10
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 4
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 3
  %26 = load i32, i32* %next_semaphore.i, align 8, !tbaa !37
  %27 = load i32, i32* %num_semaphores.i, align 8, !tbaa !29
  %cmp14.i = icmp slt i32 %26, %27
  br i1 %cmp14.i, label %for.body.i, label %while.end101.thread502.loopexit67

for.body.i:                                       ; preds = %if.then86, %for.inc.i
  %28 = phi i32 [ %inc.i, %for.inc.i ], [ %26, %if.then86 ]
  %29 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !28
  %idxprom.i = sext i32 %28 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %29, i64 %idxprom.i, i32 0
  %30 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !67
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %29, i64 %idxprom.i, i32 1
  %31 = load i32, i32* %count.i, align 8, !tbaa !69
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %30, i32 %31) #18
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %32 = load i32, i32* %next_semaphore.i, align 8, !tbaa !37
  %inc.i = add nsw i32 %32, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !37
  %33 = load i32, i32* %num_semaphores.i, align 8, !tbaa !29
  %cmp.i = icmp slt i32 %inc.i, %33
  br i1 %cmp.i, label %for.body.i, label %while.end101.thread502.loopexit, !llvm.loop !70

while.end101.thread502.loopexit:                  ; preds = %for.inc.i
  %parent_job29.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 5
  %min_threads47.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 7
  %.pre = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.le, align 8, !tbaa !41
  %.pre66 = load i32, i32* %min_threads47.le, align 4, !tbaa !31
  br label %while.end101.thread502

while.end101.thread502.loopexit67:                ; preds = %if.then86
  %parent_job29.le103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 5
  %min_threads47.le100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 7
  br label %while.end101.thread502

while.end101.thread502:                           ; preds = %while.end101.thread502.loopexit67, %while.end101.thread502.loopexit
  %min_threads4790 = phi i32* [ %min_threads47.le, %while.end101.thread502.loopexit ], [ %min_threads47.le100, %while.end101.thread502.loopexit67 ]
  %parent_job2978 = phi %"struct.Halide::Runtime::Internal::work"** [ %parent_job29.le, %while.end101.thread502.loopexit ], [ %parent_job29.le103, %while.end101.thread502.loopexit67 ]
  %34 = phi i32 [ %.pre66, %while.end101.thread502.loopexit ], [ %19, %while.end101.thread502.loopexit67 ]
  %35 = phi %"struct.Halide::Runtime::Internal::work"* [ %.pre, %while.end101.thread502.loopexit ], [ %12, %while.end101.thread502.loopexit67 ]
  %serial93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 8
  store i32 0, i32* %next_semaphore.i, align 8, !tbaa !37
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 8
  %36 = load i32, i32* %active_workers132, align 8, !tbaa !36
  %inc133 = add nsw i32 %36, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !36
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %35, null
  br i1 %cmp135, label %if.then136, label %if.else143

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 2
  %37 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !59
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %37, null
  br i1 %tobool23.not, label %if.then103, label %do.end27, !llvm.loop !71

if.then103:                                       ; preds = %cleanup, %do.end
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  tail call void @halide_thread_yield() #18
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %38 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !60
  %inc109 = add nsw i32 %38, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !60
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !38
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !38
  %39 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !60
  %dec = add nsw i32 %39, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !60
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103
  %40 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !72
  %inc113 = add nsw i32 %40, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !72
  %41 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !61
  %cmp114 = icmp sgt i32 %41, %42
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %41, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  %inc117 = add nsw i32 %43, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !55
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  tail call void @halide_thread_yield() #18
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !72
  %dec125 = add nsw i32 %44, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !72
  br label %while.cond.backedge

if.then136:                                       ; preds = %while.end101.thread502
  %45 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  %add139 = add nsw i32 %45, %34
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  br label %if.end152

if.else143:                                       ; preds = %while.end101.thread502
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %35, i64 0, i32 6
  %46 = load i32, i32* %threads_reserved147, align 8, !tbaa !57
  %add148 = add nsw i32 %46, %34
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !57
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %47 = load i8, i8* %serial93, align 8, !tbaa !27, !range !18
  %tobool155.not = icmp eq i8 %47, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 2
  %48 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !59
  store %"struct.Halide::Runtime::Internal::work"* %48, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1, align 8, !tbaa !11
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 6
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 1
  %49 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0544 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0543 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %50 = load i32, i32* %extent163, align 8, !tbaa !26
  %sub164537 = sub nsw i32 %50, %total_iters.0543
  %cmp165538 = icmp sgt i32 %sub164537, %iters.0544
  br i1 %cmp165538, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre565 = load i32, i32* %next_semaphore.i, align 8, !tbaa !37
  %.pre566 = load i32, i32* %num_semaphores.i, align 8, !tbaa !29
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %51 = phi i32 [ %60, %while.body167 ], [ %50, %land.rhs.preheader ]
  %52 = phi i32 [ %61, %while.body167 ], [ %.pre566, %land.rhs.preheader ]
  %53 = phi i32 [ 0, %while.body167 ], [ %.pre565, %land.rhs.preheader ]
  %iters.1539 = phi i32 [ %inc168, %while.body167 ], [ %iters.0544, %land.rhs.preheader ]
  %cmp14.i478 = icmp slt i32 %53, %52
  br i1 %cmp14.i478, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %54 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %53, %land.rhs ]
  %55 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !28
  %idxprom.i479 = sext i32 %54 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %55, i64 %idxprom.i479, i32 0
  %56 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !67
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %55, i64 %idxprom.i479, i32 1
  %57 = load i32, i32* %count.i481, align 8, !tbaa !69
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %56, i32 %57) #18
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %58 = load i32, i32* %next_semaphore.i, align 8, !tbaa !37
  %inc.i484 = add nsw i32 %58, 1
  store i32 %inc.i484, i32* %next_semaphore.i, align 8, !tbaa !37
  %59 = load i32, i32* %num_semaphores.i, align 8, !tbaa !29
  %cmp.i485 = icmp slt i32 %inc.i484, %59
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !70

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre567 = load i32, i32* %extent163, align 8, !tbaa !26
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %60 = phi i32 [ %.pre567, %while.body167.loopexit ], [ %51, %land.rhs ]
  %61 = phi i32 [ %59, %while.body167.loopexit ], [ %52, %land.rhs ]
  store i32 0, i32* %next_semaphore.i, align 8, !tbaa !37
  %inc168 = add nuw nsw i32 %iters.1539, 1
  %sub164 = sub nsw i32 %60, %total_iters.0543
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !73

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1533 = phi i32 [ %iters.0544, %while.cond161.preheader ], [ %iters.1539, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1533, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1533570 = phi i32 [ %iters.1533, %while.end169 ], [ %inc168, %while.body167 ]
  %62 = load i8*, i8** %user_context, align 8, !tbaa !34
  %63 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !21
  %64 = load i32, i32* %min, align 4, !tbaa !25
  %add175 = add nsw i32 %64, %total_iters.0543
  %65 = load i8*, i8** %closure, align 8, !tbaa !30
  %call177 = tail call i32 @halide_do_loop_task(i8* %62, i32 (i8*, i32, i32, i8*, i8*)* %63, i32 %add175, i32 %iters.1533570, i8* %65, i8* nonnull %49) #19
  %add178 = add nuw nsw i32 %iters.1533570, %total_iters.0543
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !74

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170572 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0543, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %66 = load i32, i32* %min, align 4, !tbaa !25
  %add182 = add nsw i32 %66, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !25
  %67 = load i32, i32* %extent163, align 8, !tbaa !26
  %sub185 = sub nsw i32 %67, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !26
  br i1 %cmp170572, label %if.else190, label %if.end230.thread513

if.end230.thread513:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !26
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %68 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %68, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !59
  store %"struct.Halide::Runtime::Internal::work"* %job.1, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !58
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !75
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !77
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !78
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !79
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !25
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 6
  %69 = load i32, i32* %extent203, align 8, !tbaa !26
  %dec204 = add nsw i32 %69, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !26
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 2
  %70 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !59
  store %"struct.Halide::Runtime::Internal::work"* %70, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1, align 8, !tbaa !11
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #19
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %71 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %71) #19
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread513
  %result.2518 = phi i32 [ %result.0.lcssa, %if.end230.thread513 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 9
  store i32 %result.2518, i32* %exit_status239, align 4, !tbaa !35
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 4
  %72 = load i32, i32* %sibling_count, align 8, !tbaa !40
  %cmp240546 = icmp sgt i32 %72, 0
  br i1 %cmp240546, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 3
  %73 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !39
  %wide.trip.count = zext i32 %72 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %74 = icmp eq i32 %72, 1
  br i1 %74, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0547 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %73, i64 %indvars.iv, i32 9
  %75 = load i32, i32* %exit_status245, align 4, !tbaa !35
  %cmp246 = icmp eq i32 %75, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2518, i32* %exit_status245, align 4, !tbaa !35
  %76 = load i32, i32* %active_workers132, align 8, !tbaa !36
  %cmp253 = icmp eq i32 %76, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %73, i64 %indvars.iv, i32 11
  %77 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !38, !range !18
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %78 = phi i8 [ 0, %if.then247 ], [ %77, %land.rhs254 ]
  %79 = and i8 %wake_owners.0547, 1
  %or = or i8 %78, %79
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0547, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %73, i64 %indvars.iv.next, i32 9
  %80 = load i32, i32* %exit_status245.1, align 4, !tbaa !35
  %cmp246.1 = icmp eq i32 %80, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0547.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %73, i64 %indvars.iv.unr, i32 9
  %81 = load i32, i32* %exit_status245.epil, align 4, !tbaa !35
  %cmp246.epil = icmp eq i32 %81, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2518, i32* %exit_status245.epil, align 4, !tbaa !35
  %82 = load i32, i32* %active_workers132, align 8, !tbaa !36
  %cmp253.epil = icmp eq i32 %82, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %73, i64 %indvars.iv.unr, i32 11
  %83 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !38, !range !18
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %84 = phi i8 [ 0, %if.then247.epil ], [ %83, %land.rhs254.epil ]
  %85 = and i8 %wake_owners.0547.unr, 1
  %or.epil = or i8 %84, %85
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0547.unr, %do.end243.epil ]
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job2978, align 8, !tbaa !41
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %86, null
  %87 = load i32, i32* %min_threads4790, align 4, !tbaa !31
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %88 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  %sub277 = sub nsw i32 %88, %87
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !54
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %86, i64 0, i32 6
  %89 = load i32, i32* %threads_reserved285, align 8, !tbaa !57
  %sub286 = sub nsw i32 %89, %87
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !57
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %90 = load i32, i32* %active_workers132, align 8, !tbaa !36
  %dec292 = add nsw i32 %90, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !36
  %91 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %91, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 0, i32 6
  %92 = load i32, i32* %extent302, align 8, !tbaa !26
  %cmp303 = icmp eq i32 %92, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 9
  %93 = load i32, i32* %exit_status305, align 4, !tbaa !35
  %cmp306.not = icmp eq i32 %93, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1, i64 0, i32 11
  %94 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !38, !range !18
  %tobool309.not = icmp eq i8 %94, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #19
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !80

while.end316:                                     ; preds = %cond.end, %cond.true
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2518, i32* %exit_status245.1, align 4, !tbaa !35
  %95 = load i32, i32* %active_workers132, align 8, !tbaa !36
  %cmp253.1 = icmp eq i32 %95, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %73, i64 %indvars.iv.next, i32 11
  %96 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !38, !range !18
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %97 = phi i8 [ 0, %if.then247.1 ], [ %96, %land.rhs254.1 ]
  %98 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %97, %98
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !81
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic, align 8
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic, align 8
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !42
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !44
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %6, i64 %7) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #19
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !11
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !82
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !11
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !88
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !88
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !82
  %cmp8 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %tobool.not = xor i1 %cmp11, true
  %7 = select i1 %cmp8, i1 %tobool.not, i1 false
  br i1 %7, label %while.body9, label %if.end.loopexit, !llvm.loop !91

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !42
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #18
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !92
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #18
  %9 = atomicrmw and i64* %state.i, i64 -2 release, align 8
  %and.i = and i64 %9, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %9, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit: ; preds = %if.then.i, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !93
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i60 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #18
  %call.i62 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #18
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !94

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !42
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, i32 0, i1 zeroext false) #18
  %12 = atomicrmw and i64* %state.i, i64 -2 release, align 8
  %and.i64 = and i64 %12, 2
  %cmp.i65 = icmp ne i64 %and.i64, 0
  %cmp3.not.i66 = icmp ult i64 %12, 4
  %or.cond.i67 = or i1 %cmp3.not.i66, %cmp.i65
  br i1 %or.cond.i67, label %cleanup27, label %if.then.i68

if.then.i68:                                      ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex) #18
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i68, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i68 ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: mustprogress nounwind
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic, align 8
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %this) local_unnamed_addr #0 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic, align 8
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.lcssa187.sink.pn = phi { i64, i1 } [ %.lcssa187.sink, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.lcssa187.sink.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0145 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !95
  %cmp16146 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0145, null
  br i1 %cmp16146, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0147 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0147, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !97
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([136 x i8], [136 x i8]* @.str.5, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0147, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !98
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !95
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !99

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0145, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !95
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic, align 8
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70, !llvm.loop !100

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !98
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5148 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5148, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5148, i64 %and43 acq_rel monotonic, align 8
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !101

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !95
  %12 = atomicrmw and i64* %state, i64 -3 release, align 8
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #18
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !93
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i105 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #18
  %call.i107 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #18
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.lcssa187.sink = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %this) local_unnamed_addr #3 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic, align 8
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = select i1 %cmp.not, i1 %cmp.i, i1 false
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #18
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !93
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #18
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #18
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !11
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !95
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !93
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !95
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !97
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic, align 8
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !93, !range !18
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !93, !range !18
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i31 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #18
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer, !llvm.loop !103

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull align 8 dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #0 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !44
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: mustprogress nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this) unnamed_addr #0 comdat align 2 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull align 8 dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #0 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !44
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: mustprogress nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #0 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #3 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !42
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !104
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !106
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic, align 4
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !42
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !107
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !109
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %3, i64 %4) #18
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic, align 8
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic, align 8
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #18
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic, align 8
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !42
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !44
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %12, i64 %5) #18
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i, !llvm.loop !46

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5.6, i64 0, i64 0)) #18
  call void @abort() #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !11
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !11
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #18
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, i64 %addr) local_unnamed_addr #3 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !93
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #18
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #18
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !110
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !82
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !92
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #19
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !111
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !113
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !42
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #18
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release, align 8
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex) #18
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !82
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !110
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !93
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !114
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !11
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !88
  %state.i22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i22, i64 -2 release, align 8
  %and.i23 = and i64 %7, 2
  %cmp.i24 = icmp ne i64 %and.i23, 0
  %cmp3.not.i25 = icmp ult i64 %7, 4
  %or.cond.i26 = or i1 %cmp3.not.i25, %cmp.i24
  br i1 %or.cond.i26, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit28, label %if.then.i27

if.then.i27:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex8) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit28

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit28: ; preds = %if.then.i27, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !42
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this) #18
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !93, !range !18
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit28, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !93, !range !18
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !102

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit28
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !115
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i30 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #18
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #18
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: mustprogress nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull align 8 dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #0 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !107
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !113
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull align 8 dereferenceable(24) %this) unnamed_addr #3 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !109
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic, align 8
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic, align 8
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !42
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !44
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %7, i64 %8) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull align 8 dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #0 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !107
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #3 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #19
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !111
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !113
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !42
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #18
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #19
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !116
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !11
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !82
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !11
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !116
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !88
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !88
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !111, !range !18
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = select i1 %tobool, i1 %cmp11, i1 false
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !82
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !118

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !82
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !119
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !114
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !88
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !11
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !88
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !42
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #18
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !92
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #18
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #19
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !93
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #18
  %call.i90 = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #18
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #19
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = select i1 %cmp39, i1 %tobool52, i1 false
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #3 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic, align 8
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %cleanup.sink.split

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic, align 8
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex7) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.then3
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic, align 8
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %cleanup.sink.split

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i47, i64 0, i64 1 acquire monotonic, align 8
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49, label %if.then.i48

if.then.i48:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex14) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49: ; preds = %if.then.i48, %if.else9
  %state.i50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i50, i64 0, i64 1 acquire monotonic, align 8
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %cleanup.sink.split

cleanup.sink.split:                               ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then
  %10 = phi i64 [ %shr.i, %if.then ], [ %shr.i38, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %shr.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49 ]
  %arrayidx13.sink.ph = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49 ]
  %arrayidx11.sink.ph = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49 ]
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %10, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex15) #18
  br label %cleanup

cleanup:                                          ; preds = %cleanup.sink.split, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49 ], [ %arrayidx13.sink.ph, %cleanup.sink.split ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49 ], [ %arrayidx11.sink.ph, %cleanup.sink.split ]
  %from2.i53 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i53, align 8, !tbaa !11
  %to3.i54 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i54, align 8, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !116
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !119
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release, align 8
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.end15.sink.split

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release, align 8
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex7) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !119
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release, align 8
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.end15.sink.split

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release, align 8
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex12) #18
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !116
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release, align 8
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.end15.sink.split

if.end15.sink.split:                              ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then
  %.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %0, %if.then ], [ %4, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31 ], [ %7, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45 ]
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %.sink, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull align 8 dereferenceable(8) %mutex14) #18
  br label %if.end15

if.end15:                                         ; preds = %if.end15.sink.split, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull align 8 dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #0 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !104
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !106
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !106
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic, align 8
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !111
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: mustprogress nounwind
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #0 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: mustprogress nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull align 8 dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #0 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !111, !range !18
  %tobool.not = icmp eq i8 %0, 0
  %some_requeued.not = xor i1 %some_requeued, true
  %brmerge = select i1 %tobool.not, i1 true, i1 %some_requeued.not
  br i1 %brmerge, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %1 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !106
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %1, i64 0, i32 0
  %2 = atomicrmw or i64* %state.i, i64 2 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #18
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #18
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #18
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #18
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  ret void
}

; Function Attrs: mustprogress nounwind
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #18
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !120
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !122
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !123
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #18
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: mustprogress nounwind
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !120
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !122
  tail call void %0(i8* %2) #18
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp73 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp73, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.075 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.074 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.074, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !124
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.075, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.074, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.074 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %2, i8* noundef nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !125
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !33
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !34
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !35
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !36
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !37
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !38
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !41
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.074, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.075, %if.end ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !126

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #19
  %cmp2378 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2378, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv82 = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next83, %for.body25 ]
  %exit_status20.079 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #19
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !35
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.079, i32 %7
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next83, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !127

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel, align 4
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = select i1 %cmp, i1 %cmp1, i1 false
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #19
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: mustprogress nounwind
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #19
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !48, !range !18
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !65
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #19
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #19
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !53
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #18
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !11
  tail call void @halide_join_thread(%struct.halide_thread* %2) #19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !53
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !128

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !11
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !123
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #18
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #3 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !42
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !129
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !131
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %4, i64 %5) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull align 8 dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #0 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: mustprogress nounwind
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull align 8 dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #0 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !129
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: mustprogress nounwind
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #18
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #18
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !132
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #18
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !132
  tail call void @halide_free(i8* %user_context, i8* %1) #18
  tail call void @halide_free(i8* %user_context, i8* %array) #18
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !132
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #19
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !132
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #19
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end.thread, label %if.end

if.end.thread:                                    ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #18
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  br label %if.end3

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #19
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end, %if.end.thread
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ], [ %n, %if.end.thread ]
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !52
  %1 = icmp sgt i32 %n.addr.0, 1
  %.threads.i = select i1 %1, i32 %n.addr.0, i32 1
  %2 = icmp slt i32 %.threads.i, 256
  %retval.0.i = select i1 %2, i32 %.threads.i, i32 256
  store i32 %retval.0.i, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !52
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #19
  ret i32 %0
}

; Function Attrs: mustprogress nounwind
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !11
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !11
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !11
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !11
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !11
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !11
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #0 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !11
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !11
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !11
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !11
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !11
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !11
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !11
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !11
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !11
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !11
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !11
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #18
  ret i1 %call
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #18
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #18
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #18
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !11
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !11
  ret i8* (i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !11
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !11
  ret i8* (i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !11
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !11
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !11
  %call = tail call i8* %0(i8* %name) #18
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !11
  %call = tail call i8* %0(i8* %name) #18
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !11
  %call = tail call i8* %0(i8* %lib, i8* %name) #18
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #0 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !76
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #3 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire, align 1
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !134

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !16, !range !18
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !76
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #18
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #18
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !76
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !16
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #3 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst, align 4
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #19
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !135
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !141
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !142
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !143
  %call4 = tail call i64 @strlen(i8* %4) #18
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !144
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #18
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !11
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !145
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst, align 4
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.us.i, label %while.body.i.i.us.i.backedge

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.us.i: ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst, align 4
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst, align 4
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst, align 4
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst, align 4
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst, align 4
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i, !llvm.loop !147

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !148
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !150
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !148
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #18
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !148
  store i32 0, i32* %overage.i.i, align 4, !tbaa !150
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst, align 4
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.32, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst, align 4
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !151

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !145
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst, align 4
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.i, label %while.body.i.i.i.backedge

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.i: ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.31, i64 0, i64 0)) #18
  tail call void @abort() #18
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst, align 4
  %add.i.i = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst, align 4
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst, align 4
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst, align 4
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst, align 4
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i, !llvm.loop !147

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !148
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !150
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !148
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #18
  %conv5.i.i = trunc i64 %call.i.i to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !148
  store i32 0, i32* %overage.i.i, align 4, !tbaa !150
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst, align 4
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.32, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst, align 4
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !151

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.i, %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.us.i
  %.us-phi.i = phi i32 [ %12, %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.us.i ], [ %25, %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.i ]
  %idx.ext.i.i = zext i32 %.us-phi.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i415 = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i416 = icmp eq i8* %call.i415, null
  br i1 %tobool.not.i416, label %if.then.i427, label %if.else.i

if.then.i427:                                     ; preds = %if.then17
  %conv.i4201 = zext i32 %and to i64
  %call.i4212 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4201, i32 1) #18
  %call.i42418 = tail call i8* @halide_string_to_string(i8* %call.i4212, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #18
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %if.then17
  %add.ptr.i417 = getelementptr inbounds i8, i8* %call.i415, i64 1023
  store i8 0, i8* %add.ptr.i417, align 1, !tbaa !15
  %conv.i4203 = zext i32 %and to i64
  %call.i4214 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i415, i8* nonnull %add.ptr.i417, i64 %conv.i4203, i32 1) #18
  %call.i424 = tail call i8* @halide_string_to_string(i8* %call.i4214, i8* nonnull %add.ptr.i417, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i424 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i415 to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i428 = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i429 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i415, i64 %add.i.i428) #18
  tail call void @halide_print(i8* null, i8* nonnull %call.i415) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i427
  tail call void @free(i8* %call.i415) #18
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !152
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !154
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !15
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !15
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !155
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #18
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !156
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !157
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #18
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !157
  %idx.ext.i.i400 = sext i32 %54 to i64
  %add.ptr.i.i401 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i400
  %55 = bitcast i32* %add.ptr.i.i401 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !158
  %conv.i402 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !141
  %conv.i.i403 = zext i8 %59 to i32
  %add.i.i404 = add nuw nsw i32 %conv.i.i403, 7
  %div.i.i = lshr i32 %add.i.i404, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i402
  %idx.ext4.i = zext i32 %mul.i to i64
  %add.ptr.i405 = getelementptr inbounds i8, i8* %55, i64 %idx.ext4.i
  %60 = load i8*, i8** %func, align 8, !tbaa !143
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i405, i8* %60, i64 %conv43) #18
  %61 = load i32, i32* %42, align 4, !tbaa !157
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !158
  %conv.i.i406 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !141
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i407 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i407, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i406
  %idx.ext4.i.i = zext i32 %mul.i.i to i64
  %add.ptr.i.i408 = getelementptr inbounds i8, i8* %62, i64 %idx.ext4.i.i
  br label %while.cond.i409

while.cond.i409:                                  ; preds = %while.cond.i409, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i408, %if.end40 ], [ %incdec.ptr.i, %while.cond.i409 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !15
  %tobool.not.i = icmp eq i8 %65, 0
  br i1 %tobool.not.i, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i409, !llvm.loop !159

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i409
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !144
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #18
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !11
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst, align 4
  %69 = load i32, i32* %event, align 4, !tbaa !160
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !11
  %lock.i.i410 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i410, i32 1073741824 seq_cst, align 4
  %72 = cmpxchg i32* %lock.i.i410, i32 1073741824, i32 -2147483648 seq_cst seq_cst, align 4
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i, !llvm.loop !147

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !148
  %tobool.not.i411 = icmp eq i32 %74, 0
  br i1 %tobool.not.i411, label %do.end.critedge.i, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !150
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !148
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i412 = zext i32 %sub.i to i64
  %call.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i412) #18
  %conv5.i = trunc i64 %call.i to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !148
  store i32 0, i32* %overage.i, align 4, !tbaa !150
  %76 = atomicrmw and i32* %lock.i.i410, i32 2147483647 seq_cst, align 4
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.32, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i410, i32 2147483647 seq_cst, align 4
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i433 = tail call i8* @malloc(i64 4096) #18
  %tobool.not.i436 = icmp eq i8* %call.i433, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i439

if.then6.i439:                                    ; preds = %if.else
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i433, i64 4095
  store i8 0, i8* %add.ptr.i437, align 1, !tbaa !15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i439, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i437, %if.then6.i439 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !161
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !162

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.2.11, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !160
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %reltable.shift = shl i64 %idxprom, 2
  %reltable.intrinsic = call i8* @llvm.load.relative.i64(i8* bitcast ([11 x i32]* @reltable.halide_default_trace to i8*), i64 %reltable.shift)
  %call.i444 = tail call i8* @halide_string_to_string(i8* %call.i433, i8* %ss.sroa.74.0, i8* %reltable.intrinsic) #18
  %call.i447 = tail call i8* @halide_string_to_string(i8* %call.i444, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %80 = load i8*, i8** %func70, align 8, !tbaa !143
  %call.i450 = tail call i8* @halide_string_to_string(i8* %call.i447, i8* %ss.sroa.74.0, i8* %80) #18
  %call.i453 = tail call i8* @halide_string_to_string(i8* %call.i450, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %81 = load i32, i32* %value_index73, align 4, !tbaa !163
  %conv.i456 = sext i32 %81 to i64
  %call.i457 = tail call i8* @halide_int64_to_string(i8* %call.i453, i8* %ss.sroa.74.0, i64 %conv.i456, i32 1) #18
  %call.i460 = tail call i8* @halide_string_to_string(i8* %call.i457, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #18
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %82 = load i16, i16* %lanes77, align 2, !tbaa !135
  %cmp79 = icmp ugt i16 %82, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i463 = tail call i8* @halide_string_to_string(i8* %call.i460, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #18
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i463, %if.then80 ], [ %call.i460, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %83 = load i32, i32* %dimensions83, align 8, !tbaa !142
  %cmp84654 = icmp sgt i32 %83, 0
  br i1 %cmp84654, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !155
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !76
  %conv.i472.peel = sext i32 %.pre673 to i64
  %call.i473.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i472.peel, i32 1) #18
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !142
  %cmp84.peel = icmp sgt i32 %84, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i473.peel, %if.end100.peel ], [ %call.i473, %if.end100 ]
  %85 = load i16, i16* %lanes77, align 2, !tbaa !135
  %cmp108 = icmp ugt i16 %85, 1
  %. = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i479 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.) #18
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1655 = phi i8* [ %call.i473, %if.end100 ], [ %call.i473.peel, %if.end100.peel ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !135
  %cmp90 = icmp ugt i16 %86, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %86 to i32
  %87 = trunc i64 %indvars.iv to i32
  %rem = urem i32 %87, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4666 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1655, i8* %ss.sroa.74.0, i8* %.sink) #18
  %88 = load i32*, i32** %coordinates101, align 8, !tbaa !155
  %arrayidx103 = getelementptr inbounds i32, i32* %88, i64 %indvars.iv
  %89 = load i32, i32* %arrayidx103, align 4, !tbaa !76
  %conv.i472 = sext i32 %89 to i64
  %call.i473 = tail call i8* @halide_int64_to_string(i8* %call.i4666, i8* %ss.sroa.74.0, i64 %conv.i472, i32 1) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %90 = load i32, i32* %dimensions83, align 8, !tbaa !142
  %91 = sext i32 %90 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next, %91
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !164

if.then115:                                       ; preds = %for.cond.cleanup
  %92 = load i16, i16* %lanes77, align 2, !tbaa !135
  %cmp119 = icmp ugt i16 %92, 1
  %.683 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i485 = tail call i8* @halide_string_to_string(i8* %call.i479, i8* %ss.sroa.74.0, i8* %.683) #18
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %93 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %94 = bitcast i8** %value245 to i16**
  %95 = bitcast i8** %value245 to float**
  %96 = bitcast i8** %value245 to double**
  %97 = bitcast i8** %value245 to i32**
  %98 = bitcast i8** %value245 to i64**
  %99 = load i16, i16* %lanes77, align 2, !tbaa !135
  %cmp130660.not = icmp eq i16 %99, 0
  br i1 %cmp130660.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %.pre674 = load i8, i8* %code, align 8, !tbaa !166
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %100 = load i8**, i8*** %93, align 8, !tbaa !156
  %101 = load i8*, i8** %100, align 8, !tbaa !11
  %call.i531.peel = tail call i8* @halide_pointer_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i8* %101) #18
  br label %for.inc253.peelthread-pre-split

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.24, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %102 = load i16*, i16** %94, align 8, !tbaa !156
  %103 = load i16, i16* %102, align 2, !tbaa !167
  %call.i523.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %103) #18
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i485, i8* %ss.sroa.74.0, double %call.i523.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then220.peel:                                  ; preds = %do.end218.peel
  %104 = load float*, float** %95, align 8, !tbaa !156
  %105 = load float, float* %104, align 4, !tbaa !168
  %conv.i521.peel = fpext float %105 to double
  %call.i522.peel = tail call i8* @halide_double_to_string(i8* %call.i485, i8* %ss.sroa.74.0, double %conv.i521.peel, i32 0) #18
  br label %for.inc253.peelthread-pre-split

if.else232.peel:                                  ; preds = %do.end218.peel
  %106 = load double*, double** %96, align 8, !tbaa !156
  %107 = load double, double* %106, align 8, !tbaa !170
  %call.i528.peel = tail call i8* @halide_double_to_string(i8* %call.i485, i8* %ss.sroa.74.0, double %107, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %108 = load i32*, i32** %97, align 8, !tbaa !156
  %109 = load i32, i32* %108, align 4, !tbaa !76
  %conv.i514.peel = zext i32 %109 to i64
  %call.i515.peel = tail call i8* @halide_uint64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %conv.i514.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then186.peel:                                  ; preds = %if.then176.peel
  %110 = load i16*, i16** %94, align 8, !tbaa !156
  %111 = load i16, i16* %110, align 2, !tbaa !167
  %conv.i510650.peel = zext i16 %111 to i64
  %call.i511.peel = tail call i8* @halide_int64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %conv.i510650.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then178.peel:                                  ; preds = %if.then176.peel
  %112 = load i8*, i8** %value245, align 8, !tbaa !156
  %113 = load i8, i8* %112, align 1, !tbaa !15
  %conv.i506649.peel = zext i8 %113 to i64
  %call.i507.peel = tail call i8* @halide_int64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %conv.i506649.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.else199.peel:                                  ; preds = %if.then176.peel
  %114 = load i64*, i64** %98, align 8, !tbaa !156
  %115 = load i64, i64* %114, align 8, !tbaa !115
  %call.i518.peel = tail call i8* @halide_uint64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %115, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %116 = load i32*, i32** %97, align 8, !tbaa !156
  %117 = load i32, i32* %116, align 4, !tbaa !76
  %conv.i499.peel = sext i32 %117 to i64
  %call.i500.peel = tail call i8* @halide_int64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %conv.i499.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then150.peel:                                  ; preds = %if.then140.peel
  %118 = load i16*, i16** %94, align 8, !tbaa !156
  %119 = load i16, i16* %118, align 2, !tbaa !167
  %conv.i495.peel = sext i16 %119 to i64
  %call.i496.peel = tail call i8* @halide_int64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %conv.i495.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.then142.peel:                                  ; preds = %if.then140.peel
  %120 = load i8*, i8** %value245, align 8, !tbaa !156
  %121 = load i8, i8* %120, align 1, !tbaa !15
  %conv.i491.peel = sext i8 %121 to i64
  %call.i492.peel = tail call i8* @halide_int64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %conv.i491.peel, i32 1) #18
  br label %for.inc253.peelthread-pre-split

if.else163.peel:                                  ; preds = %if.then140.peel
  %122 = load i64*, i64** %98, align 8, !tbaa !156
  %123 = load i64, i64* %122, align 8, !tbaa !115
  %call.i503.peel = tail call i8* @halide_int64_to_string(i8* %call.i485, i8* %ss.sroa.74.0, i64 %123, i32 1) #18
  br label %for.inc253.peelthread-pre-split

for.inc253.peelthread-pre-split:                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel
  %ss.sroa.7.7.peel.ph = phi i8* [ %call.i492.peel, %if.then142.peel ], [ %call.i496.peel, %if.then150.peel ], [ %call.i500.peel, %if.then158.peel ], [ %call.i503.peel, %if.else163.peel ], [ %call.i507.peel, %if.then178.peel ], [ %call.i511.peel, %if.then186.peel ], [ %call.i515.peel, %if.then194.peel ], [ %call.i518.peel, %if.else199.peel ], [ %call.i522.peel, %if.then220.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i528.peel, %if.else232.peel ], [ %call.i531.peel, %if.then244.peel ]
  %.pr = load i16, i16* %lanes77, align 2, !tbaa !135
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %for.inc253.peelthread-pre-split, %if.end136.peel
  %124 = phi i16 [ %.pr, %for.inc253.peelthread-pre-split ], [ %99, %if.end136.peel ]
  %ss.sroa.7.7.peel = phi i8* [ %ss.sroa.7.7.peel.ph, %for.inc253.peelthread-pre-split ], [ %call.i485, %if.end136.peel ]
  %cmp130.peel = icmp ugt i16 %124, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %150, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5661 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i488 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5661, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %125 = load i8, i8* %code, align 8, !tbaa !166
  switch i8 %125, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %126 = load i8*, i8** %value245, align 8, !tbaa !156
  %arrayidx145 = getelementptr inbounds i8, i8* %126, i64 %indvars.iv670
  %127 = load i8, i8* %arrayidx145, align 1, !tbaa !15
  %conv.i491 = sext i8 %127 to i64
  %call.i492 = tail call i8* @halide_int64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %conv.i491, i32 1) #18
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %128 = load i16*, i16** %94, align 8, !tbaa !156
  %arrayidx153 = getelementptr inbounds i16, i16* %128, i64 %indvars.iv670
  %129 = load i16, i16* %arrayidx153, align 2, !tbaa !167
  %conv.i495 = sext i16 %129 to i64
  %call.i496 = tail call i8* @halide_int64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %conv.i495, i32 1) #18
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %130 = load i32*, i32** %97, align 8, !tbaa !156
  %arrayidx161 = getelementptr inbounds i32, i32* %130, i64 %indvars.iv670
  %131 = load i32, i32* %arrayidx161, align 4, !tbaa !76
  %conv.i499 = sext i32 %131 to i64
  %call.i500 = tail call i8* @halide_int64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %conv.i499, i32 1) #18
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %132 = load i64*, i64** %98, align 8, !tbaa !156
  %arrayidx166 = getelementptr inbounds i64, i64* %132, i64 %indvars.iv670
  %133 = load i64, i64* %arrayidx166, align 8, !tbaa !115
  %call.i503 = tail call i8* @halide_int64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %133, i32 1) #18
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %134 = load i8*, i8** %value245, align 8, !tbaa !156
  %arrayidx181 = getelementptr inbounds i8, i8* %134, i64 %indvars.iv670
  %135 = load i8, i8* %arrayidx181, align 1, !tbaa !15
  %conv.i506649 = zext i8 %135 to i64
  %call.i507 = tail call i8* @halide_int64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %conv.i506649, i32 1) #18
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %136 = load i16*, i16** %94, align 8, !tbaa !156
  %arrayidx189 = getelementptr inbounds i16, i16* %136, i64 %indvars.iv670
  %137 = load i16, i16* %arrayidx189, align 2, !tbaa !167
  %conv.i510650 = zext i16 %137 to i64
  %call.i511 = tail call i8* @halide_int64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %conv.i510650, i32 1) #18
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %138 = load i32*, i32** %97, align 8, !tbaa !156
  %arrayidx197 = getelementptr inbounds i32, i32* %138, i64 %indvars.iv670
  %139 = load i32, i32* %arrayidx197, align 4, !tbaa !76
  %conv.i514 = zext i32 %139 to i64
  %call.i515 = tail call i8* @halide_uint64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %conv.i514, i32 1) #18
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %140 = load i64*, i64** %98, align 8, !tbaa !156
  %arrayidx202 = getelementptr inbounds i64, i64* %140, i64 %indvars.iv670
  %141 = load i64, i64* %arrayidx202, align 8, !tbaa !115
  %call.i518 = tail call i8* @halide_uint64_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i64 %141, i32 1) #18
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.24, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %142 = load float*, float** %95, align 8, !tbaa !156
  %arrayidx223 = getelementptr inbounds float, float* %142, i64 %indvars.iv670
  %143 = load float, float* %arrayidx223, align 4, !tbaa !168
  %conv.i521 = fpext float %143 to double
  %call.i522 = tail call i8* @halide_double_to_string(i8* %call.i488, i8* %ss.sroa.74.0, double %conv.i521, i32 0) #18
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %144 = load i16*, i16** %94, align 8, !tbaa !156
  %arrayidx230 = getelementptr inbounds i16, i16* %144, i64 %indvars.iv670
  %145 = load i16, i16* %arrayidx230, align 2, !tbaa !167
  %call.i523 = tail call double @halide_float16_bits_to_double(i16 zeroext %145) #18
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i488, i8* %ss.sroa.74.0, double %call.i523, i32 1) #18
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %146 = load double*, double** %96, align 8, !tbaa !156
  %arrayidx235 = getelementptr inbounds double, double* %146, i64 %indvars.iv670
  %147 = load double, double* %arrayidx235, align 8, !tbaa !170
  %call.i528 = tail call i8* @halide_double_to_string(i8* %call.i488, i8* %ss.sroa.74.0, double %147, i32 1) #18
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %148 = load i8**, i8*** %93, align 8, !tbaa !156
  %arrayidx247 = getelementptr inbounds i8*, i8** %148, i64 %indvars.iv670
  %149 = load i8*, i8** %arrayidx247, align 8, !tbaa !11
  %call.i531 = tail call i8* @halide_pointer_to_string(i8* %call.i488, i8* %ss.sroa.74.0, i8* %149) #18
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i488, %if.end136 ], [ %call.i531, %if.then244 ], [ %call.i528, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i522, %if.then220 ], [ %call.i518, %if.else199 ], [ %call.i515, %if.then194 ], [ %call.i511, %if.then186 ], [ %call.i507, %if.then178 ], [ %call.i503, %if.else163 ], [ %call.i500, %if.then158 ], [ %call.i496, %if.then150 ], [ %call.i492, %if.then142 ]
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %150 = load i16, i16* %lanes77, align 2, !tbaa !135
  %151 = zext i16 %150 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next671, %151
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !172

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i534 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #18
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i534, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i479, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i485, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %152 = load i8*, i8** %trace_tag264, align 8, !tbaa !144
  %tobool265.not = icmp eq i8* %152, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %153 = load i8, i8* %152, align 1, !tbaa !15
  %tobool268.not = icmp eq i8 %153, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i537 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #18
  %154 = load i8*, i8** %trace_tag264, align 8, !tbaa !144
  %call.i540 = tail call i8* @halide_string_to_string(i8* %call.i537, i8* %ss.sroa.74.0, i8* %154) #18
  %call.i543 = tail call i8* @halide_string_to_string(i8* %call.i540, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #18
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i543, %if.then269 ]
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #18
  br label %while.cond.i414

while.cond.i414:                                  ; preds = %while.cond.i414, %if.end274
  %155 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire, align 1
  %tobool.not.i413 = icmp eq i8 %155, 0
  br i1 %tobool.not.i413, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i414, !llvm.loop !173

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i414
  br i1 %tobool.not.i436, label %if.then.i558, label %if.else.i564

if.then.i558:                                     ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #18
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i564:                                     ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i549 = ptrtoint i8* %call.i546 to i64
  %sub.ptr.rhs.cast.i.i550 = ptrtoint i8* %call.i433 to i64
  %sub.ptr.sub.i.i551 = sub i64 1, %sub.ptr.rhs.cast.i.i550
  %add.i.i552 = add i64 %sub.ptr.sub.i.i551, %sub.ptr.lhs.cast.i.i549
  %call.i.i553 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i433, i64 %add.i.i552) #18
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i433) #18
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i563 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i433, i64 %add.i.i552) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i564, %if.then.i558
  tail call void @free(i8* %call.i433) #18
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #3 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire, align 1
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !173

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !76
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #18
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #18
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.30, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #18
  tail call void @halide_set_trace_file(i32 %call5) #19
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !11
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !11
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #18
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !11
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !148
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !150
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !145
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #19
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !76
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #0 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !76
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #19
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !11
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #18
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !76
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !16
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !11
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !11
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #18
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !11
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !11
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !11
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #18
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #3 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !143
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !156
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !155
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !144
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !166
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !161
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !135
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !160
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !174
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !163
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !142
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #18
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #18
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #18
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #18
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: mustprogress nounwind
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !15
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !175

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !15
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !176

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = select i1 %cmp34, i1 %cmp735, i1 false
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13643 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13742 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13643, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13742, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = select i1 %cmp, i1 %cmp7, i1 false
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !15
  %.pre39 = load i8, i8* %incdec.ptr12, align 1, !tbaa !15
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !177

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre39
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre39, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #3 {
entry:
  %filename884 = ptrtoint i8* %filename to i64
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name49 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %array_name886 = ptrtoint [256 x i8]* %array_name to i64
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !178
  %cmp.i = icmp eq i8* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8
  %cmp2.i = icmp eq i64 %1, 0
  %2 = select i1 %cmp.i, i1 %cmp2.i, i1 false
  br i1 %2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #18
  br label %return

if.end:                                           ; preds = %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %3 = load i32, i32* %dimensions, align 4, !tbaa !180
  %cmp = icmp sgt i32 %3, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #18
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #18
  %cmp.i599.not = icmp eq i8* %call.i, null
  br i1 %cmp.i599.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %5 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !76
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %6 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %6, align 4, !tbaa !76
  %7 = load i32, i32* %dimensions, align 4, !tbaa !180
  %cmp11833 = icmp sgt i32 %7, 0
  br i1 %cmp11833, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %9 = add nsw i32 %7, -1
  %umin = call i32 @llvm.umin.i32(i32 %9, i32 3)
  %10 = add nuw nsw i32 %umin, 1
  %11 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %12 = bitcast %struct.halide_dimension_t* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %11, i8* noundef nonnull align 4 dereferenceable(16) %12, i64 16, i1 false), !tbaa.struct !182
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %13 = load i32, i32* %extent, align 4, !tbaa !183
  %conv904 = zext i32 %13 to i64
  %exitcond.not = icmp eq i32 %umin, 0
  br i1 %exitcond.not, label %for.cond19.preheader, label %for.body.1, !llvm.loop !185

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv904, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20837 = icmp slt i32 %7, 4
  br i1 %cmp20837, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa908 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %14 = sext i32 %7 to i64
  %15 = sub i32 3, %7
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %min.iters.check = icmp ult i32 %15, 7
  br i1 %min.iters.check, label %for.body22.preheader218, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %17, 8589934584
  %ind.end = add nsw i64 %n.vec, %14
  %.splatinsert = insertelement <8 x i64> poison, i64 %14, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %18 = add nsw i64 %n.vec, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %xtraiter = and i64 %20, 3
  %21 = icmp ult i64 %18, 24
  br i1 %21, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %20, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %22 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %22, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !186
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !183
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !187
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !186
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !183
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !187
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !186
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !183
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !187
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !186
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !183
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !187
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !188

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !186
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !183
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !187
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !190

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %17, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader218

for.body22.preheader218:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv881.ph = phi i64 [ %14, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa908, %middle.block ], [ %elts.0.lcssa908, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %37 = load i8, i8* %bits.i, align 1, !tbaa !141
  %conv.i = zext i8 %37 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #19
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader218, %for.body22
  %indvars.iv881 = phi i64 [ %indvars.iv.next882, %for.body22 ], [ %indvars.iv881.ph, %for.body22.preheader218 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv881, i32 0
  store i32 0, i32* %min, align 4, !tbaa !186
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv881, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !183
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv881, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !187
  %indvars.iv.next882 = add nsw i64 %indvars.iv881, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next882 to i32
  %exitcond883.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond883.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !192

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #19
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %38 = load i32, i32* %extent.i, align 4, !tbaa !183
  %39 = load i32, i32* %extent.i.1, align 4, !tbaa !183
  %40 = load i32, i32* %extent.i.3, align 4, !tbaa !183
  %switch = icmp ult i32 %40, 2
  %41 = load i32, i32* %extent.i.2, align 4, !tbaa !183
  %cmp50 = icmp slt i32 %41, 5
  %or.cond = select i1 %switch, i1 %cmp50, i1 false
  %depth.0 = select i1 %or.cond, i32 1, i32 %41
  %channels.0 = select i1 %or.cond, i32 %41, i32 %40
  %42 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %42) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !194
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !196
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !197
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !198
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !199
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !201
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !202
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %38, i32* %i32.i, align 2, !tbaa !15
  %tag_code2.i600 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i600, align 2, !tbaa !199
  %type_code.i601 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i601, align 2, !tbaa !201
  %count3.i602 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i602, align 2, !tbaa !202
  %i32.i603 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %39, i32* %i32.i603, align 2, !tbaa !15
  %43 = trunc i32 %add.i to i16
  %conv68 = and i16 %43, 504
  %tag_code2.i604 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i604, align 2, !tbaa !199
  %type_code.i605 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i605, align 2, !tbaa !201
  %count3.i606 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i606, align 2, !tbaa !202
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !15
  %tag_code2.i607 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i607, align 2, !tbaa !199
  %type_code.i608 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i608, align 2, !tbaa !201
  %count3.i609 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i609, align 2, !tbaa !202
  %value4.i610 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i611 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i610 to i16*
  store i16 1, i16* %i16.i611, align 2, !tbaa !15
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i612 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i612, align 2, !tbaa !199
  %type_code.i613 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i613, align 2, !tbaa !201
  %count3.i614 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i614, align 2, !tbaa !202
  %value4.i615 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i616 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i615 to i16*
  store i16 %conv72, i16* %i16.i616, align 2, !tbaa !15
  %tag_code2.i617 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i617, align 2, !tbaa !199
  %type_code.i618 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i618, align 2, !tbaa !201
  %count3.i619 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i619, align 2, !tbaa !202
  %i32.i620 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i620, align 2, !tbaa !15
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i621 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i621, align 2, !tbaa !199
  %type_code.i622 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i622, align 2, !tbaa !201
  %count3.i623 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i623, align 2, !tbaa !202
  %value4.i624 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i625 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i624 to i16*
  store i16 %conv75, i16* %i16.i625, align 2, !tbaa !15
  %tag_code2.i626 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i626, align 2, !tbaa !199
  %type_code.i627 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i627, align 2, !tbaa !201
  %count3.i628 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i628, align 2, !tbaa !202
  %i32.i629 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %39, i32* %i32.i629, align 2, !tbaa !15
  %cmp80 = icmp eq i32 %channels.0, 1
  %44 = trunc i64 %elts.0.lcssa907 to i32
  %conv86595 = mul i32 %div.i, %44
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %45, align 2
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %48, align 2
  %tag_code2.i638 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i638, align 2, !tbaa !199
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !201
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !202
  %i32.i639 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i639, align 2, !tbaa !15
  %tag_code2.i640 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i640, align 2, !tbaa !199
  %type_code3.i641 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i641, align 2, !tbaa !201
  %count4.i642 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i642, align 2, !tbaa !202
  %i32.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i643, align 2, !tbaa !15
  %tag_code2.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i644, align 2, !tbaa !199
  %type_code.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i645, align 2, !tbaa !201
  %count3.i646 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i646, align 2, !tbaa !202
  %value4.i647 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i648 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i647 to i16*
  store i16 2, i16* %i16.i648, align 2, !tbaa !15
  %tag_code2.i649 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i649, align 2, !tbaa !199
  %type_code.i650 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i650, align 2, !tbaa !201
  %count3.i651 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i651, align 2, !tbaa !202
  %value4.i652 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i653 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i652 to i16*
  store i16 1, i16* %i16.i653, align 2, !tbaa !15
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %49 = load i16, i16* %arrayidx93, align 2, !tbaa !167
  %tag_code2.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i654, align 2, !tbaa !199
  %type_code.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i655, align 2, !tbaa !201
  %count3.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i656, align 2, !tbaa !202
  %value4.i657 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i658 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i657 to i16*
  store i16 %49, i16* %i16.i658, align 2, !tbaa !15
  %tag_code2.i659 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i659, align 2, !tbaa !199
  %type_code.i660 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i660, align 2, !tbaa !201
  %count3.i661 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i661, align 2, !tbaa !202
  %i32.i662 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i662, align 2, !tbaa !15
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %50 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 2, !tbaa !76
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !76
  %call.i664 = call i64 @fwrite(i8* nonnull %42, i64 210, i64 1, i8* nonnull %call.i) #18
  %cmp.i665.not = icmp eq i64 %call.i664, 0
  br i1 %cmp.i665.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672.preheader, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672.preheader: ; preds = %if.end103
  %51 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !76
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672.preheader
  %i111.0847 = phi i32 [ %inc128, %if.end118 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672.preheader ]
  %call.i668 = call i64 @fwrite(i8* nonnull %51, i64 4, i64 1, i8* nonnull %call.i) #18
  %cmp.i669.not = icmp eq i64 %call.i668, 0
  br i1 %cmp.i669.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672
  %52 = load i32, i32* %extent.i, align 4, !tbaa !183
  %53 = load i32, i32* %extent.i.1, align 4, !tbaa !183
  %mul124 = mul i32 %mul123, %52
  %mul125 = mul i32 %mul124, %53
  %54 = load i32, i32* %offset, align 4, !tbaa !76
  %add126 = add nsw i32 %mul125, %54
  store i32 %add126, i32* %offset, align 4, !tbaa !76
  %inc128 = add nuw nsw i32 %i111.0847, 1
  %exitcond889.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond889.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672, !llvm.loop !203

for.end129:                                       ; preds = %if.end118
  %55 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !76
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit679

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit679
  %exitcond890.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond890.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit679, !llvm.loop !204

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit679: ; preds = %for.end129, %for.cond138
  %i137.0849 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i675 = call i64 @fwrite(i8* nonnull %55, i64 4, i64 1, i8* nonnull %call.i) #18
  %cmp.i676.not = icmp eq i64 %call.i675, 0
  %inc146 = add nuw nsw i32 %i137.0849, 1
  br i1 %cmp.i676.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit679
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %42) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %42) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #19
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %56 = load i8, i8* %end.0, align 1, !tbaa !15
  %tobool.not = icmp eq i8 %56, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !205

while.cond174.preheader:                          ; preds = %while.body171
  %end.1839.lcssa885 = ptrtoint i8* %end.1839 to i64
  %57 = sub i64 %filename884, %end.1839.lcssa885
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1839 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1839, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !15
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !206

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1839, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1839, i64 %start.0.add
  %58 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !15
  %cmp179.not = icmp eq i8 %58, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !207

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %57, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %59 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %59, -1
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %60) #11
  %cmp186.not840 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not840, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %61 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check56 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check56, label %while.body187.preheader216, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %62 = xor i64 %start.0.idx.lcssa, -1
  %scevgep50 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %62
  %scevgep51 = getelementptr i8, i8* %end.1839, i64 %start.0.idx.lcssa
  %scevgep52 = getelementptr i8, i8* %end.1839, i64 -1
  %bound0 = icmp ult i8* %array_name49, %scevgep52
  %bound1 = icmp ult i8* %scevgep51, %scevgep50
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader216, label %vector.ph57

vector.ph57:                                      ; preds = %vector.memcheck
  %n.vec59 = and i64 %61, -128
  %ind.end63 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec59
  %ind.end65 = add i64 %start.0.idx.lcssa, %n.vec59
  %63 = add i64 %n.vec59, -128
  %64 = lshr exact i64 %63, 7
  %65 = add nuw nsw i64 %64, 1
  %xtraiter219 = and i64 %65, 3
  %66 = icmp ult i64 %63, 384
  br i1 %66, label %middle.block53.unr-lcssa, label %vector.ph57.new

vector.ph57.new:                                  ; preds = %vector.ph57
  %unroll_iter222 = and i64 %65, 288230376151711740
  br label %vector.body55

vector.body55:                                    ; preds = %vector.body55, %vector.ph57.new
  %index60 = phi i64 [ 0, %vector.ph57.new ], [ %index.next61.3, %vector.body55 ]
  %niter223 = phi i64 [ %unroll_iter222, %vector.ph57.new ], [ %niter223.nsub.3, %vector.body55 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index60
  %offset.idx = add i64 %start.0.idx.lcssa, %index60
  %67 = getelementptr inbounds i8, i8* %end.1839, i64 %offset.idx
  %68 = bitcast i8* %67 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %68, align 1, !tbaa !15, !alias.scope !208
  %69 = getelementptr inbounds i8, i8* %67, i64 32
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load70 = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !15, !alias.scope !208
  %71 = getelementptr inbounds i8, i8* %67, i64 64
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load71 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !15, !alias.scope !208
  %73 = getelementptr inbounds i8, i8* %67, i64 96
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load72 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !15, !alias.scope !208
  %75 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %75, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %76 = getelementptr i8, i8* %next.gep, i64 32
  %77 = bitcast i8* %76 to <32 x i8>*
  store <32 x i8> %wide.load70, <32 x i8>* %77, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %78 = getelementptr i8, i8* %next.gep, i64 64
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load71, <32 x i8>* %79, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %80 = getelementptr i8, i8* %next.gep, i64 96
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load72, <32 x i8>* %81, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %index.next61 = or i64 %index60, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next61
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next61
  %82 = getelementptr inbounds i8, i8* %end.1839, i64 %offset.idx.1
  %83 = bitcast i8* %82 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %83, align 1, !tbaa !15, !alias.scope !208
  %84 = getelementptr inbounds i8, i8* %82, i64 32
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load70.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !15, !alias.scope !208
  %86 = getelementptr inbounds i8, i8* %82, i64 64
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load71.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !15, !alias.scope !208
  %88 = getelementptr inbounds i8, i8* %82, i64 96
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load72.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !15, !alias.scope !208
  %90 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %90, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %91 = getelementptr i8, i8* %next.gep.1, i64 32
  %92 = bitcast i8* %91 to <32 x i8>*
  store <32 x i8> %wide.load70.1, <32 x i8>* %92, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %93 = getelementptr i8, i8* %next.gep.1, i64 64
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load71.1, <32 x i8>* %94, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %95 = getelementptr i8, i8* %next.gep.1, i64 96
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load72.1, <32 x i8>* %96, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %index.next61.1 = or i64 %index60, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next61.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next61.1
  %97 = getelementptr inbounds i8, i8* %end.1839, i64 %offset.idx.2
  %98 = bitcast i8* %97 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %98, align 1, !tbaa !15, !alias.scope !208
  %99 = getelementptr inbounds i8, i8* %97, i64 32
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load70.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !15, !alias.scope !208
  %101 = getelementptr inbounds i8, i8* %97, i64 64
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load71.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !15, !alias.scope !208
  %103 = getelementptr inbounds i8, i8* %97, i64 96
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load72.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !15, !alias.scope !208
  %105 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %105, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %106 = getelementptr i8, i8* %next.gep.2, i64 32
  %107 = bitcast i8* %106 to <32 x i8>*
  store <32 x i8> %wide.load70.2, <32 x i8>* %107, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %108 = getelementptr i8, i8* %next.gep.2, i64 64
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load71.2, <32 x i8>* %109, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %110 = getelementptr i8, i8* %next.gep.2, i64 96
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load72.2, <32 x i8>* %111, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %index.next61.2 = or i64 %index60, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next61.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next61.2
  %112 = getelementptr inbounds i8, i8* %end.1839, i64 %offset.idx.3
  %113 = bitcast i8* %112 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %113, align 1, !tbaa !15, !alias.scope !208
  %114 = getelementptr inbounds i8, i8* %112, i64 32
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load70.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !15, !alias.scope !208
  %116 = getelementptr inbounds i8, i8* %112, i64 64
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load71.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !15, !alias.scope !208
  %118 = getelementptr inbounds i8, i8* %112, i64 96
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load72.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !15, !alias.scope !208
  %120 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %120, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %121 = getelementptr i8, i8* %next.gep.3, i64 32
  %122 = bitcast i8* %121 to <32 x i8>*
  store <32 x i8> %wide.load70.3, <32 x i8>* %122, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %123 = getelementptr i8, i8* %next.gep.3, i64 64
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load71.3, <32 x i8>* %124, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %125 = getelementptr i8, i8* %next.gep.3, i64 96
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load72.3, <32 x i8>* %126, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %index.next61.3 = add nuw i64 %index60, 512
  %niter223.nsub.3 = add i64 %niter223, -4
  %niter223.ncmp.3 = icmp eq i64 %niter223.nsub.3, 0
  br i1 %niter223.ncmp.3, label %middle.block53.unr-lcssa, label %vector.body55, !llvm.loop !213

middle.block53.unr-lcssa:                         ; preds = %vector.body55, %vector.ph57
  %index60.unr = phi i64 [ 0, %vector.ph57 ], [ %index.next61.3, %vector.body55 ]
  %lcmp.mod221.not = icmp eq i64 %xtraiter219, 0
  br i1 %lcmp.mod221.not, label %middle.block53, label %vector.body55.epil

vector.body55.epil:                               ; preds = %middle.block53.unr-lcssa, %vector.body55.epil
  %index60.epil = phi i64 [ %index.next61.epil, %vector.body55.epil ], [ %index60.unr, %middle.block53.unr-lcssa ]
  %epil.iter220 = phi i64 [ %epil.iter220.sub, %vector.body55.epil ], [ %xtraiter219, %middle.block53.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index60.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index60.epil
  %127 = getelementptr inbounds i8, i8* %end.1839, i64 %offset.idx.epil
  %128 = bitcast i8* %127 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %128, align 1, !tbaa !15, !alias.scope !208
  %129 = getelementptr inbounds i8, i8* %127, i64 32
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load70.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !15, !alias.scope !208
  %131 = getelementptr inbounds i8, i8* %127, i64 64
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load71.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !15, !alias.scope !208
  %133 = getelementptr inbounds i8, i8* %127, i64 96
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load72.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !15, !alias.scope !208
  %135 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %135, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %136 = getelementptr i8, i8* %next.gep.epil, i64 32
  %137 = bitcast i8* %136 to <32 x i8>*
  store <32 x i8> %wide.load70.epil, <32 x i8>* %137, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %138 = getelementptr i8, i8* %next.gep.epil, i64 64
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load71.epil, <32 x i8>* %139, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %140 = getelementptr i8, i8* %next.gep.epil, i64 96
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load72.epil, <32 x i8>* %141, align 1, !tbaa !15, !alias.scope !211, !noalias !208
  %index.next61.epil = add nuw i64 %index60.epil, 128
  %epil.iter220.sub = add i64 %epil.iter220, -1
  %epil.iter220.cmp.not = icmp eq i64 %epil.iter220.sub, 0
  br i1 %epil.iter220.cmp.not, label %middle.block53, label %vector.body55.epil, !llvm.loop !214

middle.block53:                                   ; preds = %vector.body55.epil, %middle.block53.unr-lcssa
  %cmp.n66 = icmp eq i64 %n.vec59, %61
  br i1 %cmp.n66, label %while.cond191.preheader, label %while.body187.preheader216

while.body187.preheader216:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block53
  %dst.0842.ph = phi i8* [ %60, %vector.memcheck ], [ %60, %while.body187.preheader ], [ %ind.end63, %middle.block53 ]
  %start.1841.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end65, %middle.block53 ]
  %142 = sub i64 -2, %start.1841.idx.ph
  %143 = and i64 %start.1841.idx.ph, 7
  %xtraiter224 = xor i64 %143, 7
  %lcmp.mod225.not = icmp eq i64 %xtraiter224, 0
  br i1 %lcmp.mod225.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader216, %while.body187.prol
  %dst.0842.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0842.ph, %while.body187.preheader216 ]
  %start.1841.idx.prol = phi i64 [ %start.1841.add.prol, %while.body187.prol ], [ %start.1841.idx.ph, %while.body187.preheader216 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter224, %while.body187.preheader216 ]
  %start.1841.ptr.prol = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.idx.prol
  %start.1841.add.prol = add nuw nsw i64 %start.1841.idx.prol, 1
  %144 = load i8, i8* %start.1841.ptr.prol, align 1, !tbaa !15
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0842.prol, i64 1
  store i8 %144, i8* %dst.0842.prol, align 1, !tbaa !15
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !215

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader216
  %incdec.ptr189.lcssa217.unr = phi i8* [ undef, %while.body187.preheader216 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0842.unr = phi i8* [ %dst.0842.ph, %while.body187.preheader216 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1841.idx.unr = phi i64 [ %start.1841.idx.ph, %while.body187.preheader216 ], [ %start.1841.add.prol, %while.body187.prol ]
  %145 = icmp ult i64 %142, 7
  br i1 %145, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block53
  %incdec.ptr189.lcssa = phi i8* [ %ind.end63, %middle.block53 ], [ %incdec.ptr189.lcssa217.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193844 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193844, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa912 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %60, %while.end183 ]
  %dst.0.lcssa887 = ptrtoint i8* %dst.0.lcssa912 to i64
  %146 = add i64 %array_name886, 256
  %147 = sub i64 %146, %dst.0.lcssa887
  %scevgep = getelementptr i8, i8* %dst.0.lcssa912, i64 %147
  %min.iters.check76 = icmp ult i64 %147, 16
  br i1 %min.iters.check76, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check78 = icmp ult i64 %147, 128
  br i1 %min.iters.check78, label %vec.epilog.ph, label %vector.ph79

vector.ph79:                                      ; preds = %vector.main.loop.iter.check
  %n.vec81 = and i64 %147, -128
  %148 = add i64 %n.vec81, -128
  %149 = lshr exact i64 %148, 7
  %150 = add nuw nsw i64 %149, 1
  %xtraiter226 = and i64 %150, 7
  %151 = icmp ult i64 %148, 896
  br i1 %151, label %middle.block73.unr-lcssa, label %vector.ph79.new

vector.ph79.new:                                  ; preds = %vector.ph79
  %unroll_iter229 = and i64 %150, 288230376151711736
  br label %vector.body75

vector.body75:                                    ; preds = %vector.body75, %vector.ph79.new
  %index82 = phi i64 [ 0, %vector.ph79.new ], [ %index.next83.7, %vector.body75 ]
  %niter230 = phi i64 [ %unroll_iter229, %vector.ph79.new ], [ %niter230.nsub.7, %vector.body75 ]
  %next.gep85 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index82
  %152 = bitcast i8* %next.gep85 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %152, align 1, !tbaa !15
  %153 = getelementptr i8, i8* %next.gep85, i64 32
  %154 = bitcast i8* %153 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %154, align 1, !tbaa !15
  %155 = getelementptr i8, i8* %next.gep85, i64 64
  %156 = bitcast i8* %155 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %156, align 1, !tbaa !15
  %157 = getelementptr i8, i8* %next.gep85, i64 96
  %158 = bitcast i8* %157 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %158, align 1, !tbaa !15
  %index.next83 = or i64 %index82, 128
  %next.gep85.1 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83
  %159 = bitcast i8* %next.gep85.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !15
  %160 = getelementptr i8, i8* %next.gep85.1, i64 32
  %161 = bitcast i8* %160 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %161, align 1, !tbaa !15
  %162 = getelementptr i8, i8* %next.gep85.1, i64 64
  %163 = bitcast i8* %162 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %163, align 1, !tbaa !15
  %164 = getelementptr i8, i8* %next.gep85.1, i64 96
  %165 = bitcast i8* %164 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %165, align 1, !tbaa !15
  %index.next83.1 = or i64 %index82, 256
  %next.gep85.2 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83.1
  %166 = bitcast i8* %next.gep85.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !15
  %167 = getelementptr i8, i8* %next.gep85.2, i64 32
  %168 = bitcast i8* %167 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %168, align 1, !tbaa !15
  %169 = getelementptr i8, i8* %next.gep85.2, i64 64
  %170 = bitcast i8* %169 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %170, align 1, !tbaa !15
  %171 = getelementptr i8, i8* %next.gep85.2, i64 96
  %172 = bitcast i8* %171 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %172, align 1, !tbaa !15
  %index.next83.2 = or i64 %index82, 384
  %next.gep85.3 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83.2
  %173 = bitcast i8* %next.gep85.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !15
  %174 = getelementptr i8, i8* %next.gep85.3, i64 32
  %175 = bitcast i8* %174 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %175, align 1, !tbaa !15
  %176 = getelementptr i8, i8* %next.gep85.3, i64 64
  %177 = bitcast i8* %176 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %177, align 1, !tbaa !15
  %178 = getelementptr i8, i8* %next.gep85.3, i64 96
  %179 = bitcast i8* %178 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %179, align 1, !tbaa !15
  %index.next83.3 = or i64 %index82, 512
  %next.gep85.4 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83.3
  %180 = bitcast i8* %next.gep85.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !15
  %181 = getelementptr i8, i8* %next.gep85.4, i64 32
  %182 = bitcast i8* %181 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %182, align 1, !tbaa !15
  %183 = getelementptr i8, i8* %next.gep85.4, i64 64
  %184 = bitcast i8* %183 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %184, align 1, !tbaa !15
  %185 = getelementptr i8, i8* %next.gep85.4, i64 96
  %186 = bitcast i8* %185 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %186, align 1, !tbaa !15
  %index.next83.4 = or i64 %index82, 640
  %next.gep85.5 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83.4
  %187 = bitcast i8* %next.gep85.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !15
  %188 = getelementptr i8, i8* %next.gep85.5, i64 32
  %189 = bitcast i8* %188 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %189, align 1, !tbaa !15
  %190 = getelementptr i8, i8* %next.gep85.5, i64 64
  %191 = bitcast i8* %190 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %191, align 1, !tbaa !15
  %192 = getelementptr i8, i8* %next.gep85.5, i64 96
  %193 = bitcast i8* %192 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %193, align 1, !tbaa !15
  %index.next83.5 = or i64 %index82, 768
  %next.gep85.6 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83.5
  %194 = bitcast i8* %next.gep85.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !15
  %195 = getelementptr i8, i8* %next.gep85.6, i64 32
  %196 = bitcast i8* %195 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %196, align 1, !tbaa !15
  %197 = getelementptr i8, i8* %next.gep85.6, i64 64
  %198 = bitcast i8* %197 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %198, align 1, !tbaa !15
  %199 = getelementptr i8, i8* %next.gep85.6, i64 96
  %200 = bitcast i8* %199 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %200, align 1, !tbaa !15
  %index.next83.6 = or i64 %index82, 896
  %next.gep85.7 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index.next83.6
  %201 = bitcast i8* %next.gep85.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !15
  %202 = getelementptr i8, i8* %next.gep85.7, i64 32
  %203 = bitcast i8* %202 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %203, align 1, !tbaa !15
  %204 = getelementptr i8, i8* %next.gep85.7, i64 64
  %205 = bitcast i8* %204 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %205, align 1, !tbaa !15
  %206 = getelementptr i8, i8* %next.gep85.7, i64 96
  %207 = bitcast i8* %206 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %207, align 1, !tbaa !15
  %index.next83.7 = add nuw i64 %index82, 1024
  %niter230.nsub.7 = add i64 %niter230, -8
  %niter230.ncmp.7 = icmp eq i64 %niter230.nsub.7, 0
  br i1 %niter230.ncmp.7, label %middle.block73.unr-lcssa, label %vector.body75, !llvm.loop !216

middle.block73.unr-lcssa:                         ; preds = %vector.body75, %vector.ph79
  %index82.unr = phi i64 [ 0, %vector.ph79 ], [ %index.next83.7, %vector.body75 ]
  %lcmp.mod228.not = icmp eq i64 %xtraiter226, 0
  br i1 %lcmp.mod228.not, label %middle.block73, label %vector.body75.epil

vector.body75.epil:                               ; preds = %middle.block73.unr-lcssa, %vector.body75.epil
  %index82.epil = phi i64 [ %index.next83.epil, %vector.body75.epil ], [ %index82.unr, %middle.block73.unr-lcssa ]
  %epil.iter227 = phi i64 [ %epil.iter227.sub, %vector.body75.epil ], [ %xtraiter226, %middle.block73.unr-lcssa ]
  %next.gep85.epil = getelementptr i8, i8* %dst.0.lcssa912, i64 %index82.epil
  %208 = bitcast i8* %next.gep85.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !15
  %209 = getelementptr i8, i8* %next.gep85.epil, i64 32
  %210 = bitcast i8* %209 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %210, align 1, !tbaa !15
  %211 = getelementptr i8, i8* %next.gep85.epil, i64 64
  %212 = bitcast i8* %211 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %212, align 1, !tbaa !15
  %213 = getelementptr i8, i8* %next.gep85.epil, i64 96
  %214 = bitcast i8* %213 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %214, align 1, !tbaa !15
  %index.next83.epil = add nuw i64 %index82.epil, 128
  %epil.iter227.sub = add i64 %epil.iter227, -1
  %epil.iter227.cmp.not = icmp eq i64 %epil.iter227.sub, 0
  br i1 %epil.iter227.cmp.not, label %middle.block73, label %vector.body75.epil, !llvm.loop !217

middle.block73:                                   ; preds = %vector.body75.epil, %middle.block73.unr-lcssa
  %cmp.n84 = icmp eq i64 %147, %n.vec81
  br i1 %cmp.n84, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block73
  %ind.end95 = getelementptr i8, i8* %dst.0.lcssa912, i64 %n.vec81
  %n.vec.remaining = and i64 %147, 112
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec81, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %n.vec90 = and i64 %147, -16
  %ind.end94 = getelementptr i8, i8* %dst.0.lcssa912, i64 %n.vec90
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index91 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next92, %vec.epilog.vector.body ]
  %next.gep97 = getelementptr i8, i8* %dst.0.lcssa912, i64 %index91
  %215 = bitcast i8* %next.gep97 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %215, align 1, !tbaa !15
  %index.next92 = add nuw i64 %index91, 16
  %216 = icmp eq i64 %index.next92, %n.vec90
  br i1 %216, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !218

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n96 = icmp eq i64 %147, %n.vec90
  br i1 %cmp.n96, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1845.ph = phi i8* [ %dst.0.lcssa912, %iter.check ], [ %ind.end95, %vec.epilog.iter.check ], [ %ind.end94, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0842 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0842.unr, %while.body187.prol.loopexit ]
  %start.1841.idx = phi i64 [ %start.1841.add.7, %while.body187 ], [ %start.1841.idx.unr, %while.body187.prol.loopexit ]
  %start.1841.ptr = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.idx
  %start.1841.add = add nuw nsw i64 %start.1841.idx, 1
  %217 = load i8, i8* %start.1841.ptr, align 1, !tbaa !15
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0842, i64 1
  store i8 %217, i8* %dst.0842, align 1, !tbaa !15
  %start.1841.ptr.1 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add
  %start.1841.add.1 = add nuw nsw i64 %start.1841.idx, 2
  %218 = load i8, i8* %start.1841.ptr.1, align 1, !tbaa !15
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0842, i64 2
  store i8 %218, i8* %incdec.ptr189, align 1, !tbaa !15
  %start.1841.ptr.2 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add.1
  %start.1841.add.2 = add nuw nsw i64 %start.1841.idx, 3
  %219 = load i8, i8* %start.1841.ptr.2, align 1, !tbaa !15
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0842, i64 3
  store i8 %219, i8* %incdec.ptr189.1, align 1, !tbaa !15
  %start.1841.ptr.3 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add.2
  %start.1841.add.3 = add nuw nsw i64 %start.1841.idx, 4
  %220 = load i8, i8* %start.1841.ptr.3, align 1, !tbaa !15
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0842, i64 4
  store i8 %220, i8* %incdec.ptr189.2, align 1, !tbaa !15
  %start.1841.ptr.4 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add.3
  %start.1841.add.4 = add nuw nsw i64 %start.1841.idx, 5
  %221 = load i8, i8* %start.1841.ptr.4, align 1, !tbaa !15
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0842, i64 5
  store i8 %221, i8* %incdec.ptr189.3, align 1, !tbaa !15
  %start.1841.ptr.5 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add.4
  %start.1841.add.5 = add nuw nsw i64 %start.1841.idx, 6
  %222 = load i8, i8* %start.1841.ptr.5, align 1, !tbaa !15
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0842, i64 6
  store i8 %222, i8* %incdec.ptr189.4, align 1, !tbaa !15
  %start.1841.ptr.6 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add.5
  %start.1841.add.6 = add nuw nsw i64 %start.1841.idx, 7
  %223 = load i8, i8* %start.1841.ptr.6, align 1, !tbaa !15
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0842, i64 7
  store i8 %223, i8* %incdec.ptr189.5, align 1, !tbaa !15
  %start.1841.ptr.7 = getelementptr inbounds i8, i8* %end.1839, i64 %start.1841.add.6
  %start.1841.add.7 = add nuw nsw i64 %start.1841.idx, 8
  %224 = load i8, i8* %start.1841.ptr.7, align 1, !tbaa !15
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0842, i64 8
  store i8 %224, i8* %incdec.ptr189.6, align 1, !tbaa !15
  %cmp186.not.7 = icmp eq i64 %start.1841.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !219

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1845 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1845.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1845, i64 1
  store i8 0, i8* %dst.1845, align 1, !tbaa !15
  %exitcond888.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond888.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686, label %while.body194, !llvm.loop !220

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686: ; preds = %while.body194, %middle.block73, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %59
  %and = and i32 %add197, -8
  %225 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %225) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(129) %225, i8* noundef nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i682 = call i64 @fwrite(i8* nonnull %225, i64 128, i64 1, i8* nonnull %call.i) #18
  %226 = load i32, i32* %dimensions, align 4, !tbaa !180
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %227 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8
  %cmp19.i.i = icmp sgt i32 %226, 0
  br i1 %cmp19.i.i, label %for.body.preheader.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.preheader.i.i:                           ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686
  %wide.trip.count.i.i = zext i32 %226 to i64
  %min.iters.check101 = icmp ult i32 %226, 17
  br i1 %min.iters.check101, label %for.body.i.i.preheader, label %vector.ph102

vector.ph102:                                     ; preds = %for.body.preheader.i.i
  %n.mod.vf103 = and i64 %wide.trip.count.i.i, 15
  %228 = icmp eq i64 %n.mod.vf103, 0
  %229 = select i1 %228, i64 16, i64 %n.mod.vf103
  %n.vec104 = sub nsw i64 %wide.trip.count.i.i, %229
  br label %vector.body100

vector.body100:                                   ; preds = %vector.body100, %vector.ph102
  %index105 = phi i64 [ 0, %vector.ph102 ], [ %index.next106, %vector.body100 ]
  %vec.ind108 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph102 ], [ %vec.ind.next112, %vector.body100 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph102 ], [ %predphi, %vector.body100 ]
  %vec.phi113 = phi <4 x i64> [ zeroinitializer, %vector.ph102 ], [ %predphi125, %vector.body100 ]
  %vec.phi114 = phi <4 x i64> [ zeroinitializer, %vector.ph102 ], [ %predphi126, %vector.body100 ]
  %vec.phi115 = phi <4 x i64> [ zeroinitializer, %vector.ph102 ], [ %predphi127, %vector.body100 ]
  %step.add = add <4 x i64> %vec.ind108, <i64 4, i64 4, i64 4, i64 4>
  %step.add109 = add <4 x i64> %vec.ind108, <i64 8, i64 8, i64 8, i64 8>
  %step.add110 = add <4 x i64> %vec.ind108, <i64 12, i64 12, i64 12, i64 12>
  %230 = or i64 %index105, 4
  %231 = or i64 %index105, 8
  %232 = or i64 %index105, 12
  %233 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %index105, i32 2
  %234 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %230, i32 2
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %231, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %232, i32 2
  %237 = bitcast i32* %233 to <16 x i32>*
  %238 = bitcast i32* %234 to <16 x i32>*
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %237, align 4, !tbaa !187
  %wide.vec116 = load <16 x i32>, <16 x i32>* %238, align 4, !tbaa !187
  %wide.vec117 = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !187
  %wide.vec118 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !187
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec119 = shufflevector <16 x i32> %wide.vec116, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec120 = shufflevector <16 x i32> %wide.vec117, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec121 = shufflevector <16 x i32> %wide.vec118, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %241 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %242 = icmp sgt <4 x i32> %strided.vec119, zeroinitializer
  %243 = icmp sgt <4 x i32> %strided.vec120, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec121, zeroinitializer
  %245 = zext <4 x i32> %strided.vec to <4 x i64>
  %246 = zext <4 x i32> %strided.vec119 to <4 x i64>
  %247 = zext <4 x i32> %strided.vec120 to <4 x i64>
  %248 = zext <4 x i32> %strided.vec121 to <4 x i64>
  %249 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %vec.ind108, i32 1
  %250 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %step.add, i32 1
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %step.add109, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %step.add110, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %249, i32 4, <4 x i1> %241, <4 x i32> undef), !tbaa !183
  %wide.masked.gather122 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %250, i32 4, <4 x i1> %242, <4 x i32> undef), !tbaa !183
  %wide.masked.gather123 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !183
  %wide.masked.gather124 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !183
  %253 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %254 = add nsw <4 x i32> %wide.masked.gather122, <i32 -1, i32 -1, i32 -1, i32 -1>
  %255 = add nsw <4 x i32> %wide.masked.gather123, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather124, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = sext <4 x i32> %253 to <4 x i64>
  %258 = sext <4 x i32> %254 to <4 x i64>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = mul nsw <4 x i64> %257, %245
  %262 = mul nsw <4 x i64> %258, %246
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = select <4 x i1> %241, <4 x i64> %261, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %265
  %266 = select <4 x i1> %242, <4 x i64> %262, <4 x i64> zeroinitializer
  %predphi125 = add <4 x i64> %vec.phi113, %266
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi126 = add <4 x i64> %vec.phi114, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi127 = add <4 x i64> %vec.phi115, %268
  %index.next106 = add nuw i64 %index105, 16
  %vec.ind.next112 = add <4 x i64> %vec.ind108, <i64 16, i64 16, i64 16, i64 16>
  %269 = icmp eq i64 %index.next106, %n.vec104
  br i1 %269, label %middle.block98, label %vector.body100, !llvm.loop !221

middle.block98:                                   ; preds = %vector.body100
  %bin.rdx = add <4 x i64> %predphi125, %predphi
  %bin.rdx128 = add <4 x i64> %predphi126, %bin.rdx
  %bin.rdx129 = add <4 x i64> %predphi127, %bin.rdx128
  %270 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx129)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.preheader.i.i, %middle.block98
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %n.vec104, %middle.block98 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %270, %middle.block98 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %indvars.iv.i.i, i32 2
  %271 = load i32, i32* %stride2.i.i, align 4, !tbaa !187
  %cmp3.i.i = icmp sgt i32 %271, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %271 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %indvars.iv.i.i, i32 1
  %272 = load i32, i32* %extent.i.i, align 4, !tbaa !183
  %sub.i.i = add nsw i32 %272, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i12.i.preheader, label %for.body.i.i, !llvm.loop !222

for.body.i12.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check133 = icmp ult i32 %226, 17
  br i1 %min.iters.check133, label %for.body.i12.i.preheader215, label %vector.ph134

vector.ph134:                                     ; preds = %for.body.i12.i.preheader
  %n.mod.vf135 = and i64 %wide.trip.count.i.i, 15
  %273 = icmp eq i64 %n.mod.vf135, 0
  %274 = select i1 %273, i64 16, i64 %n.mod.vf135
  %n.vec136 = sub nsw i64 %wide.trip.count.i.i, %274
  br label %vector.body132

vector.body132:                                   ; preds = %vector.body132, %vector.ph134
  %index137 = phi i64 [ 0, %vector.ph134 ], [ %index.next138, %vector.body132 ]
  %vec.ind140 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph134 ], [ %vec.ind.next145, %vector.body132 ]
  %vec.phi146 = phi <4 x i64> [ zeroinitializer, %vector.ph134 ], [ %predphi162, %vector.body132 ]
  %vec.phi147 = phi <4 x i64> [ zeroinitializer, %vector.ph134 ], [ %predphi163, %vector.body132 ]
  %vec.phi148 = phi <4 x i64> [ zeroinitializer, %vector.ph134 ], [ %predphi164, %vector.body132 ]
  %vec.phi149 = phi <4 x i64> [ zeroinitializer, %vector.ph134 ], [ %predphi165, %vector.body132 ]
  %step.add141 = add <4 x i64> %vec.ind140, <i64 4, i64 4, i64 4, i64 4>
  %step.add142 = add <4 x i64> %vec.ind140, <i64 8, i64 8, i64 8, i64 8>
  %step.add143 = add <4 x i64> %vec.ind140, <i64 12, i64 12, i64 12, i64 12>
  %275 = or i64 %index137, 4
  %276 = or i64 %index137, 8
  %277 = or i64 %index137, 12
  %278 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %index137, i32 2
  %279 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %275, i32 2
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %276, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %277, i32 2
  %282 = bitcast i32* %278 to <16 x i32>*
  %283 = bitcast i32* %279 to <16 x i32>*
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %wide.vec150 = load <16 x i32>, <16 x i32>* %282, align 4, !tbaa !187
  %wide.vec151 = load <16 x i32>, <16 x i32>* %283, align 4, !tbaa !187
  %wide.vec152 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !187
  %wide.vec153 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !187
  %strided.vec154 = shufflevector <16 x i32> %wide.vec150, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec155 = shufflevector <16 x i32> %wide.vec151, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec156 = shufflevector <16 x i32> %wide.vec152, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec157 = shufflevector <16 x i32> %wide.vec153, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %286 = icmp slt <4 x i32> %strided.vec154, zeroinitializer
  %287 = icmp slt <4 x i32> %strided.vec155, zeroinitializer
  %288 = icmp slt <4 x i32> %strided.vec156, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec157, zeroinitializer
  %290 = sext <4 x i32> %strided.vec154 to <4 x i64>
  %291 = sext <4 x i32> %strided.vec155 to <4 x i64>
  %292 = sext <4 x i32> %strided.vec156 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec157 to <4 x i64>
  %294 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %vec.ind140, i32 1
  %295 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %step.add141, i32 1
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %step.add142, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, <4 x i64> %step.add143, i32 1
  %wide.masked.gather158 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %294, i32 4, <4 x i1> %286, <4 x i32> undef), !tbaa !183
  %wide.masked.gather159 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %295, i32 4, <4 x i1> %287, <4 x i32> undef), !tbaa !183
  %wide.masked.gather160 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !183
  %wide.masked.gather161 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !183
  %298 = add nsw <4 x i32> %wide.masked.gather158, <i32 -1, i32 -1, i32 -1, i32 -1>
  %299 = add nsw <4 x i32> %wide.masked.gather159, <i32 -1, i32 -1, i32 -1, i32 -1>
  %300 = add nsw <4 x i32> %wide.masked.gather160, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather161, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = sext <4 x i32> %298 to <4 x i64>
  %303 = sext <4 x i32> %299 to <4 x i64>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = mul nsw <4 x i64> %302, %290
  %307 = mul nsw <4 x i64> %303, %291
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = select <4 x i1> %286, <4 x i64> %306, <4 x i64> zeroinitializer
  %predphi162 = add <4 x i64> %vec.phi146, %310
  %311 = select <4 x i1> %287, <4 x i64> %307, <4 x i64> zeroinitializer
  %predphi163 = add <4 x i64> %vec.phi147, %311
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi164 = add <4 x i64> %vec.phi148, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi165 = add <4 x i64> %vec.phi149, %313
  %index.next138 = add nuw i64 %index137, 16
  %vec.ind.next145 = add <4 x i64> %vec.ind140, <i64 16, i64 16, i64 16, i64 16>
  %314 = icmp eq i64 %index.next138, %n.vec136
  br i1 %314, label %middle.block130, label %vector.body132, !llvm.loop !223

middle.block130:                                  ; preds = %vector.body132
  %bin.rdx166 = add <4 x i64> %predphi163, %predphi162
  %bin.rdx167 = add <4 x i64> %predphi164, %bin.rdx166
  %bin.rdx168 = add <4 x i64> %predphi165, %bin.rdx167
  %315 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx168)
  br label %for.body.i12.i.preheader215

for.body.i12.i.preheader215:                      ; preds = %for.body.i12.i.preheader, %middle.block130
  %indvars.iv.i9.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %n.vec136, %middle.block130 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %315, %middle.block130 ]
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %for.body.i12.i.preheader215, %if.end.i22.i
  %indvars.iv.i9.i = phi i64 [ %indvars.iv.next.i20.i, %if.end.i22.i ], [ %indvars.iv.i9.i.ph, %for.body.i12.i.preheader215 ]
  %index.018.i.i = phi i64 [ %index.1.i19.i, %if.end.i22.i ], [ %index.018.i.i.ph, %for.body.i12.i.preheader215 ]
  %stride2.i10.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %indvars.iv.i9.i, i32 2
  %316 = load i32, i32* %stride2.i10.i, align 4, !tbaa !187
  %cmp3.i11.i = icmp slt i32 %316, 0
  br i1 %cmp3.i11.i, label %if.then.i18.i, label %if.end.i22.i

if.then.i18.i:                                    ; preds = %for.body.i12.i
  %conv.i.i = sext i32 %316 to i64
  %extent.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %227, i64 %indvars.iv.i9.i, i32 1
  %317 = load i32, i32* %extent.i13.i, align 4, !tbaa !183
  %sub.i14.i = add nsw i32 %317, -1
  %conv7.i15.i = sext i32 %sub.i14.i to i64
  %mul.i16.i = mul nsw i64 %conv7.i15.i, %conv.i.i
  %add.i17.i = add nsw i64 %mul.i16.i, %index.018.i.i
  br label %if.end.i22.i

if.end.i22.i:                                     ; preds = %if.then.i18.i, %for.body.i12.i
  %index.1.i19.i = phi i64 [ %add.i17.i, %if.then.i18.i ], [ %index.018.i.i, %for.body.i12.i ]
  %indvars.iv.next.i20.i = add nuw nsw i64 %indvars.iv.i9.i, 1
  %exitcond.not.i21.i = icmp eq i64 %indvars.iv.next.i20.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i21.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i12.i, !llvm.loop !224

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i22.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i8.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686 ], [ %index.1.i19.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i8.i
  %318 = load i8, i8* %bits.i, align 1, !tbaa !141
  %conv.i23.i = zext i8 %318 to i64
  %add.i24.i = add nuw nsw i64 %conv.i23.i, 7
  %div.i.i = lshr i64 %add.i24.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %319 = trunc i64 %mul.i to i32
  %320 = add i32 %319, 7
  %321 = and i32 %320, 7
  %conv204 = xor i32 %321, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #18
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %225) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %60) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %322 = icmp sgt i32 %226, 2
  %spec.store.select = select i1 %322, i32 %226, i32 2
  %323 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %323) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !76
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %319
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !76
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !76
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !76
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %324 = load i8, i8* %arrayidx226, align 1, !tbaa !15
  %conv227 = zext i8 %324 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !76
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !76
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !76
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !76
  %call.i689 = call i64 @fwrite(i8* nonnull %323, i64 32, i64 1, i8* nonnull %call.i) #18
  %cmp.i690.not = icmp eq i64 %call.i689, 0
  br i1 %cmp.i690.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693
  %325 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %325) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %326 = load i32, i32* %extent.i, align 4, !tbaa !183
  store i32 %326, i32* %arrayinit.begin235, align 4, !tbaa !76
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %327 = load i32, i32* %extent.i.1, align 4, !tbaa !183
  store i32 %327, i32* %arrayinit.element238, align 4, !tbaa !76
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %328 = load i32, i32* %extent.i.2, align 4, !tbaa !183
  store i32 %328, i32* %arrayinit.element241, align 4, !tbaa !76
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %329 = load i32, i32* %extent.i.3, align 4, !tbaa !183
  store i32 %329, i32* %arrayinit.element244, align 4, !tbaa !76
  %conv248 = sext i32 %mul216 to i64
  %call.i696 = call i64 @fwrite(i8* nonnull %325, i64 %conv248, i64 1, i8* nonnull %call.i) #18
  %cmp.i697.not = icmp eq i64 %call.i696, 0
  br i1 %cmp.i697.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700
  %330 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %330) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !76
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !76
  %call.i703 = call i64 @fwrite(i8* nonnull %330, i64 8, i64 1, i8* nonnull %call.i) #18
  %cmp.i704.not = icmp eq i64 %call.i703, 0
  br i1 %cmp.i704.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707
  %conv258 = zext i32 %and to i64
  %call.i710 = call i64 @fwrite(i8* nonnull %60, i64 %conv258, i64 1, i8* nonnull %call.i) #18
  %cmp.i711.not = icmp eq i64 %call.i710, 0
  br i1 %cmp.i711.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit721

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit721: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714
  %331 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %331) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %332 = load i8, i8* %arrayidx264, align 1, !tbaa !15
  %conv265 = zext i8 %332 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !76
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %319, i32* %arrayinit.element266, align 4, !tbaa !76
  %call.i717 = call i64 @fwrite(i8* nonnull %331, i64 8, i64 1, i8* nonnull %call.i) #18
  %cmp.i718.not = icmp eq i64 %call.i717, 0
  %. = zext i1 %cmp.i718.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %331) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit721, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707
  %cleanup.dest.slot.6 = phi i32 [ %., %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit721 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit721 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %330) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %325) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %323) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %225) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %60) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728: ; preds = %if.else164
  %333 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %333) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %334 = load i32, i32* %extent.i, align 4, !tbaa !183
  store i32 %334, i32* %arrayinit.begin290, align 4, !tbaa !76
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %335 = load i32, i32* %extent.i.1, align 4, !tbaa !183
  store i32 %335, i32* %arrayinit.element293, align 4, !tbaa !76
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %336 = load i32, i32* %extent.i.2, align 4, !tbaa !183
  store i32 %336, i32* %arrayinit.element296, align 4, !tbaa !76
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %337 = load i32, i32* %extent.i.3, align 4, !tbaa !183
  store i32 %337, i32* %arrayinit.element299, align 4, !tbaa !76
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !76
  %call.i724 = call i64 @fwrite(i8* nonnull %333, i64 20, i64 1, i8* nonnull %call.i) #18
  %cmp.i725.not = icmp eq i64 %call.i724, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %333) #11
  br i1 %cmp.i725.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728 ], [ 0, %cleanup154.thread ]
  %338 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %338) #11
  %div = udiv i32 4096, %div.i
  %339 = load i32, i32* %min.i.3, align 4, !tbaa !186
  %340 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !183
  %cmp320874 = icmp sgt i32 %341, 0
  br i1 %cmp320874, label %for.body322.preheader, label %if.end412

for.body322.preheader:                            ; preds = %if.end311
  %.pre893 = load i32, i32* %min.i.2, align 4, !tbaa !186
  %.pre894 = load i32, i32* %extent.i.2, align 4, !tbaa !183
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.preheader
  %.pre89925 = phi i32 [ %.pre89926, %for.inc399 ], [ %.pre893, %for.body322.preheader ]
  %.pre89820 = phi i32 [ %.pre89821, %for.inc399 ], [ %.pre894, %for.body322.preheader ]
  %342 = phi i32 [ %434, %for.inc399 ], [ %339, %for.body322.preheader ]
  %343 = phi i32 [ %435, %for.inc399 ], [ %341, %for.body322.preheader ]
  %344 = phi i32 [ %436, %for.inc399 ], [ %.pre893, %for.body322.preheader ]
  %345 = phi i32 [ %437, %for.inc399 ], [ %.pre894, %for.body322.preheader ]
  %346 = phi i32 [ %438, %for.inc399 ], [ %.pre894, %for.body322.preheader ]
  %347 = phi i32 [ %439, %for.inc399 ], [ %.pre893, %for.body322.preheader ]
  %dim3.0876 = phi i32 [ %inc400, %for.inc399 ], [ %339, %for.body322.preheader ]
  %counter.0875 = phi i32 [ %counter.1.lcssa, %for.inc399 ], [ 0, %for.body322.preheader ]
  %cmp331866 = icmp sgt i32 %346, 0
  br i1 %cmp331866, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre895 = load i32, i32* %min.i.1, align 4, !tbaa !186
  %.pre896 = load i32, i32* %extent.i.1, align 4, !tbaa !183
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %.pre89927 = phi i32 [ %.pre89928, %for.inc394 ], [ %.pre89925, %for.body333.preheader ]
  %.pre89822 = phi i32 [ %.pre89823, %for.inc394 ], [ %.pre89820, %for.body333.preheader ]
  %348 = phi i32 [ %426, %for.inc394 ], [ %.pre895, %for.body333.preheader ]
  %349 = phi i32 [ %427, %for.inc394 ], [ %.pre896, %for.body333.preheader ]
  %350 = phi i32 [ %428, %for.inc394 ], [ %.pre895, %for.body333.preheader ]
  %351 = phi i32 [ %429, %for.inc394 ], [ %.pre896, %for.body333.preheader ]
  %352 = phi i32 [ %430, %for.inc394 ], [ %344, %for.body333.preheader ]
  %353 = phi i32 [ %431, %for.inc394 ], [ %345, %for.body333.preheader ]
  %354 = phi i32 [ %432, %for.inc394 ], [ %.pre896, %for.body333.preheader ]
  %355 = phi i32 [ %433, %for.inc394 ], [ %.pre895, %for.body333.preheader ]
  %dim2.0868 = phi i32 [ %inc395, %for.inc394 ], [ %347, %for.body333.preheader ]
  %counter.1867 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0875, %for.body333.preheader ]
  %cmp342857 = icmp sgt i32 %354, 0
  br i1 %cmp342857, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %356 = load i32, i32* %extent.i, align 4, !tbaa !183
  %357 = icmp sgt i32 %356, 0
  br i1 %357, label %for.body344, label %for.inc394

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %358 = phi i32 [ %423, %for.inc389 ], [ %348, %for.body344.preheader ]
  %359 = phi i32 [ %424, %for.inc389 ], [ %349, %for.body344.preheader ]
  %360 = phi i32 [ %425, %for.inc389 ], [ %356, %for.body344.preheader ]
  %dim1.0859 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2858 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1867, %for.body344.preheader ]
  %cmp353851 = icmp sgt i32 %360, 0
  br i1 %cmp353851, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %361 = load i32, i32* %min.i, align 4, !tbaa !186
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0853 = phi i32 [ %inc385, %for.inc384 ], [ %361, %for.body355.preheader ]
  %counter.3852 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2858, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3852, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %340) #11
  store i32 %dim0.0853, i32* %arrayinit.begin357, align 4, !tbaa !76
  store i32 %dim1.0859, i32* %arrayinit.element358, align 4, !tbaa !76
  store i32 %dim2.0868, i32* %arrayinit.element359, align 4, !tbaa !76
  store i32 %dim3.0876, i32* %arrayinit.element360, align 4, !tbaa !76
  %362 = load i32, i32* %dimensions, align 4, !tbaa !180
  %363 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8
  %cmp18.i = icmp sgt i32 %362, 0
  br i1 %cmp18.i, label %for.body.preheader.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.preheader.i:                             ; preds = %for.body355
  %wide.trip.count.i = zext i32 %362 to i64
  %stride.i734921 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 0, i32 2
  %364 = load i32, i32* %stride.i734921, align 4, !tbaa !187
  %conv.i735922 = sext i32 %364 to i64
  %min.i736923 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 0, i32 0
  %365 = load i32, i32* %min.i736923, align 4, !tbaa !186
  %sub.i737924 = sub nsw i32 %dim0.0853, %365
  %conv7.i925 = sext i32 %sub.i737924 to i64
  %mul.i738926 = mul nsw i64 %conv7.i925, %conv.i735922
  %exitcond.not.i928 = icmp eq i32 %362, 1
  br i1 %exitcond.not.i928, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !225

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.preheader.i
  %stride.i73439 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 1, i32 2
  %366 = load i32, i32* %stride.i73439, align 4, !tbaa !187
  %conv.i73540 = sext i32 %366 to i64
  %min.i73641 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 1, i32 0
  %367 = load i32, i32* %min.i73641, align 4, !tbaa !186
  %sub.i73742 = sub nsw i32 %dim1.0859, %367
  %conv7.i43 = sext i32 %sub.i73742 to i64
  %mul.i73844 = mul nsw i64 %conv7.i43, %conv.i73540
  %add.i73945 = add nsw i64 %mul.i73844, %mul.i738926
  %exitcond.not.i46 = icmp eq i32 %362, 2
  br i1 %exitcond.not.i46, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !225

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %368 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check173 = icmp ult i64 %368, 17
  br i1 %min.iters.check173, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph174

vector.ph174:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf175 = and i64 %368, 15
  %369 = icmp eq i64 %n.mod.vf175, 0
  %370 = select i1 %369, i64 16, i64 %n.mod.vf175
  %n.vec176 = sub nsw i64 %368, %370
  %ind.end180 = add nsw i64 %n.vec176, 2
  %371 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i73945, i32 0
  br label %vector.body172

vector.body172:                                   ; preds = %vector.body172, %vector.ph174
  %index177 = phi i64 [ 0, %vector.ph174 ], [ %index.next178, %vector.body172 ]
  %vec.phi182 = phi <4 x i64> [ %371, %vector.ph174 ], [ %411, %vector.body172 ]
  %vec.phi183 = phi <4 x i64> [ zeroinitializer, %vector.ph174 ], [ %412, %vector.body172 ]
  %vec.phi184 = phi <4 x i64> [ zeroinitializer, %vector.ph174 ], [ %413, %vector.body172 ]
  %vec.phi185 = phi <4 x i64> [ zeroinitializer, %vector.ph174 ], [ %414, %vector.body172 ]
  %offset.idx181 = or i64 %index177, 2
  %372 = or i64 %index177, 6
  %373 = or i64 %index177, 10
  %374 = or i64 %index177, 14
  %375 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx181
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !76
  %377 = getelementptr inbounds i32, i32* %375, i64 4
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load187 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !76
  %379 = getelementptr inbounds i32, i32* %375, i64 8
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load188 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !76
  %381 = getelementptr inbounds i32, i32* %375, i64 12
  %382 = bitcast i32* %381 to <4 x i32>*
  %wide.load189 = load <4 x i32>, <4 x i32>* %382, align 4, !tbaa !76
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 %offset.idx181, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 %372, i32 2
  %385 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 %373, i32 2
  %386 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 %374, i32 2
  %387 = getelementptr inbounds i32, i32* %383, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %384, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %385, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %393 = getelementptr inbounds i32, i32* %386, i64 -2
  %394 = bitcast i32* %393 to <16 x i32>*
  %wide.vec190 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !76
  %wide.vec191 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !76
  %wide.vec192 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !76
  %wide.vec193 = load <16 x i32>, <16 x i32>* %394, align 4, !tbaa !76
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec191, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec192, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec193, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec199 = shufflevector <16 x i32> %wide.vec191, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec200 = shufflevector <16 x i32> %wide.vec192, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec201 = shufflevector <16 x i32> %wide.vec193, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %395 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec199 to <4 x i64>
  %397 = sext <4 x i32> %strided.vec200 to <4 x i64>
  %398 = sext <4 x i32> %strided.vec201 to <4 x i64>
  %399 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %400 = sub nsw <4 x i32> %wide.load187, %strided.vec195
  %401 = sub nsw <4 x i32> %wide.load188, %strided.vec196
  %402 = sub nsw <4 x i32> %wide.load189, %strided.vec197
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = sext <4 x i32> %401 to <4 x i64>
  %406 = sext <4 x i32> %402 to <4 x i64>
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = mul nsw <4 x i64> %405, %397
  %410 = mul nsw <4 x i64> %406, %398
  %411 = add <4 x i64> %407, %vec.phi182
  %412 = add <4 x i64> %408, %vec.phi183
  %413 = add <4 x i64> %409, %vec.phi184
  %414 = add <4 x i64> %410, %vec.phi185
  %index.next178 = add nuw i64 %index177, 16
  %415 = icmp eq i64 %index.next178, %n.vec176
  br i1 %415, label %middle.block170, label %vector.body172, !llvm.loop !226

middle.block170:                                  ; preds = %vector.body172
  %bin.rdx202 = add <4 x i64> %412, %411
  %bin.rdx203 = add <4 x i64> %413, %bin.rdx202
  %bin.rdx204 = add <4 x i64> %414, %bin.rdx203
  %416 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx204)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, %middle.block170
  %indvars.iv.next.i48.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end180, %middle.block170 ]
  %add.i73947.ph = phi i64 [ %add.i73945, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %416, %middle.block170 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i48 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i48.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i73947 = phi i64 [ %add.i739, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i73947.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i48
  %.pre897.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !76
  %stride.i734 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 %indvars.iv.next.i48, i32 2
  %417 = load i32, i32* %stride.i734, align 4, !tbaa !187
  %conv.i735 = sext i32 %417 to i64
  %min.i736 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %363, i64 %indvars.iv.next.i48, i32 0
  %418 = load i32, i32* %min.i736, align 4, !tbaa !186
  %sub.i737 = sub nsw i32 %.pre897.pre, %418
  %conv7.i = sext i32 %sub.i737 to i64
  %mul.i738 = mul nsw i64 %conv7.i, %conv.i735
  %add.i739 = add nsw i64 %mul.i738, %add.i73947
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i48, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !227

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.preheader.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i738926, %for.body.preheader.i ], [ %add.i73945, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i739, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %419 = load i8*, i8** %host.i, align 8, !tbaa !178
  %420 = load i8, i8* %bits.i, align 1, !tbaa !141
  %conv.i.i731 = zext i8 %420 to i64
  %add.i.i732 = add nuw nsw i64 %conv.i.i731, 7
  %div.i.i733 = lshr i64 %add.i.i732, 3
  %mul9.i = mul nsw i64 %div.i.i733, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %419, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3852, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #18
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit746, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit746: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i742 = call i64 @fwrite(i8* nonnull %338, i64 %conv374, i64 1, i8* nonnull %call.i) #18
  %cmp.i743.not = icmp eq i64 %call.i742, 0
  br i1 %cmp.i743.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit746, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit746 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %340) #11
  %inc385 = add nsw i32 %dim0.0853, 1
  %421 = load i32, i32* %extent.i, align 4, !tbaa !183
  %422 = load i32, i32* %min.i, align 4, !tbaa !186
  %add352 = add nsw i32 %422, %421
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !228

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre = load i32, i32* %extent.i.1, align 4, !tbaa !183
  %.pre19 = load i32, i32* %min.i.1, align 4, !tbaa !186
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %423 = phi i32 [ %358, %for.body344 ], [ %.pre19, %for.inc389.loopexit ]
  %424 = phi i32 [ %359, %for.body344 ], [ %.pre, %for.inc389.loopexit ]
  %425 = phi i32 [ %360, %for.body344 ], [ %421, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2858, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0859, 1
  %add341 = add nsw i32 %423, %424
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit.loopexit, !llvm.loop !229

for.inc394.loopexit.loopexit:                     ; preds = %for.inc389
  %.pre898.pre = load i32, i32* %extent.i.2, align 4, !tbaa !183
  %.pre899.pre = load i32, i32* %min.i.2, align 4, !tbaa !186
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit.loopexit, %for.body344.preheader, %for.body333
  %.pre89928 = phi i32 [ %.pre89927, %for.body333 ], [ %.pre899.pre, %for.inc394.loopexit.loopexit ], [ %.pre89927, %for.body344.preheader ]
  %.pre89823 = phi i32 [ %.pre89822, %for.body333 ], [ %.pre898.pre, %for.inc394.loopexit.loopexit ], [ %.pre89822, %for.body344.preheader ]
  %426 = phi i32 [ %348, %for.body333 ], [ %423, %for.inc394.loopexit.loopexit ], [ %348, %for.body344.preheader ]
  %427 = phi i32 [ %349, %for.body333 ], [ %424, %for.inc394.loopexit.loopexit ], [ %349, %for.body344.preheader ]
  %428 = phi i32 [ %350, %for.body333 ], [ %423, %for.inc394.loopexit.loopexit ], [ %350, %for.body344.preheader ]
  %429 = phi i32 [ %351, %for.body333 ], [ %424, %for.inc394.loopexit.loopexit ], [ %351, %for.body344.preheader ]
  %430 = phi i32 [ %352, %for.body333 ], [ %.pre899.pre, %for.inc394.loopexit.loopexit ], [ %.pre89927, %for.body344.preheader ]
  %431 = phi i32 [ %353, %for.body333 ], [ %.pre898.pre, %for.inc394.loopexit.loopexit ], [ %.pre89822, %for.body344.preheader ]
  %432 = phi i32 [ %354, %for.body333 ], [ %424, %for.inc394.loopexit.loopexit ], [ %351, %for.body344.preheader ]
  %433 = phi i32 [ %355, %for.body333 ], [ %423, %for.inc394.loopexit.loopexit ], [ %350, %for.body344.preheader ]
  %counter.2.lcssa = phi i32 [ %counter.1867, %for.body333 ], [ %counter.6797, %for.inc394.loopexit.loopexit ], [ %counter.1867, %for.body344.preheader ]
  %inc395 = add nsw i32 %dim2.0868, 1
  %add330 = add nsw i32 %431, %430
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !231

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre900 = load i32, i32* %extent.i.3, align 4, !tbaa !183
  %.pre901 = load i32, i32* %min.i.3, align 4, !tbaa !186
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %.pre89926 = phi i32 [ %.pre89925, %for.body322 ], [ %.pre89928, %for.inc399.loopexit ]
  %.pre89821 = phi i32 [ %.pre89820, %for.body322 ], [ %.pre89823, %for.inc399.loopexit ]
  %434 = phi i32 [ %342, %for.body322 ], [ %.pre901, %for.inc399.loopexit ]
  %435 = phi i32 [ %343, %for.body322 ], [ %.pre900, %for.inc399.loopexit ]
  %436 = phi i32 [ %344, %for.body322 ], [ %430, %for.inc399.loopexit ]
  %437 = phi i32 [ %345, %for.body322 ], [ %431, %for.inc399.loopexit ]
  %438 = phi i32 [ %346, %for.body322 ], [ %431, %for.inc399.loopexit ]
  %439 = phi i32 [ %347, %for.body322 ], [ %430, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0875, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0876, 1
  %add319 = add nsw i32 %435, %434
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !232

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit753, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit753: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i749 = call i64 @fwrite(i8* nonnull %338, i64 %conv408, i64 1, i8* nonnull %call.i) #18
  %cmp.i750.not = icmp eq i64 %call.i749, 0
  br i1 %cmp.i750.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit753, %for.end403, %if.end311
  %440 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %440) #11
  store i64 0, i64* %zero, align 8, !tbaa !115
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit760

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit760: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i756 = call i64 @fwrite(i8* nonnull %440, i64 %conv415, i64 1, i8* nonnull %call.i) #18
  %cmp.i757.not = icmp eq i64 %call.i756, 0
  br i1 %cmp.i757.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit760, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit760
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit760 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %440) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit746
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %340) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit753
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit753 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %338) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #11
  %call.i763 = call i32 @fclose(i8* nonnull %call.i) #18
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %441 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %442 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %441, i8* noundef nonnull align 4 dereferenceable(16) %442, i64 16, i1 false), !tbaa.struct !182
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %443 = load i32, i32* %extent.1, align 4, !tbaa !183
  %conv904.1 = zext i32 %443 to i64
  %mul.1 = mul nuw i64 %conv904, %conv904.1
  %exitcond.not.1 = icmp eq i32 %10, 2
  br i1 %exitcond.not.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !185

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %444 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %445 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %444, i8* noundef nonnull align 4 dereferenceable(16) %445, i64 16, i1 false), !tbaa.struct !182
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %446 = load i32, i32* %extent.2, align 4, !tbaa !183
  %conv904.2 = zext i32 %446 to i64
  %mul.2 = mul i64 %mul.1, %conv904.2
  %exitcond.not.2 = icmp eq i32 %10, 3
  br i1 %exitcond.not.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !185

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %447 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %448 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %447, i8* noundef nonnull align 4 dereferenceable(16) %448, i64 16, i1 false), !tbaa.struct !182
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %449 = load i32, i32* %extent.3, align 4, !tbaa !183
  %conv904.3 = zext i32 %449 to i64
  %mul.3 = mul i64 %mul.2, %conv904.3
  br label %for.cond19.preheader
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.umin.i32(i32, i32) #5

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #19
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !11
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !11
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !233
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull align 8 dereferenceable(96) %entry1.017) #19
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #18
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !235

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull align 8 dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !236
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !237
  tail call void @halide_free(i8* null, i8* %1) #18
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #18
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !238
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !178
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #19
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !236
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !239
}

; Function Attrs: mustprogress nounwind
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #0 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp37 = icmp sgt i32 %d, -1
  br i1 %cmp37, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.038 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.038 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !115
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %for.cond.preheader

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.038, -1
  %cmp = icmp sgt i32 %d.addr.038, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !240

while.end:                                        ; preds = %entry
  %cmp2 = icmp eq i32 %d, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %land.rhs, %while.end
  %d.addr.0.lcssa49 = phi i32 [ %d, %while.end ], [ %d.addr.038, %land.rhs ]
  %idxprom5 = sext i32 %d.addr.0.lcssa49 to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %sub = add nsw i32 %d.addr.0.lcssa49, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !115
  %cmp740.not = icmp eq i64 %1, 0
  br i1 %cmp740.not, label %if.end, label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !241
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !243
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !244
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #18
  br label %if.end

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %i.043 = phi i64 [ %inc, %for.body ], [ 0, %for.cond.preheader ]
  %src_off.addr.042 = phi i64 [ %add10, %for.body ], [ %src_off, %for.cond.preheader ]
  %dst_off.addr.041 = phi i64 [ %add13, %for.body ], [ %dst_off, %for.cond.preheader ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.042, i64 %dst_off.addr.041) #19
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !115
  %add10 = add i64 %7, %src_off.addr.042
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !115
  %add13 = add i64 %8, %dst_off.addr.041
  %inc = add nuw i64 %i.043, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !115
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !245

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !241
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !243
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !246
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #19
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !178
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !247
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !241
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !178
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !247
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !243
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !141
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv261 = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv261, i64* %chunk_size, align 8, !tbaa !244
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !115
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !115
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !115
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !115
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !115
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !115
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !115
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !115
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !115
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !115
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !115
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !115
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !180
  %cmp17264 = icmp sgt i32 %20, 0
  br i1 %cmp17264, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !181
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !76
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !76
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !76
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !76
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !186
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !186
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !186
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !186
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add nuw i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !248

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.body19.preheader:                             ; preds = %for.body19.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv261
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !246
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !180
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body19 ], [ %indvars.iv.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !187
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !186
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !186
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !249

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i249 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i249, align 1, !tbaa !141
  %conv.i250 = zext i8 %80 to i32
  %add.i251 = add nuw nsw i32 %conv.i250, 7
  %div.i252 = lshr i32 %add.i251, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i252
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond262 = select i1 %cmp45.not, i1 true, i1 %cmp48
  br i1 %or.cond262, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i8 %7, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17264, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !181
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !181
  %wide.trip.count286 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !244
  %.pre292 = load i64, i64* %arrayidx12, align 8, !tbaa !115
  %cmp139276 = icmp eq i64 %.pre, %.pre292
  br i1 %cmp139276, label %land.rhs.preheader, label %while.end

land.rhs.preheader:                               ; preds = %while.cond.preheader
  %.pre293 = load i64, i64* %arrayidx14, align 8, !tbaa !115
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv282 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next283, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv282, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !187
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv261
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv282, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !187
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv261
  %cmp80266.not = icmp eq i64 %indvars.iv282, 0
  br i1 %cmp80266.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.us.preheader, label %for.body81

for.body81.us.preheader:                          ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv282 to i32
  br label %for.end91

for.body81:                                       ; preds = %for.body81.lr.ph, %for.inc89
  %indvars.iv278 = phi i64 [ %indvars.iv.next279, %for.inc89 ], [ 0, %for.body81.lr.ph ]
  %arrayidx84 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv278
  %112 = load i64, i64* %arrayidx84, align 8, !tbaa !115
  %cmp85 = icmp ult i64 %mul68, %112
  br i1 %cmp85, label %for.end91.loopexit277, label %for.inc89

for.inc89:                                        ; preds = %for.body81
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond281.not = icmp eq i64 %indvars.iv.next279, %indvars.iv282
  br i1 %exitcond281.not, label %for.end91.loopexit277, label %for.body81, !llvm.loop !250

for.end91.loopexit277:                            ; preds = %for.inc89, %for.body81
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv282, %for.inc89 ], [ %indvars.iv278, %for.body81 ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit277, %for.body81.us.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %111, %for.body81.us.preheader ], [ %insert.0.lcssa.ph, %for.end91.loopexit277 ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93270 = icmp ugt i64 %indvars.iv282, %113
  br i1 %cmp93270, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv282, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv282, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv284.prol = phi i64 [ %indvars.iv.next285.prol, %for.body95.prol ], [ %indvars.iv282, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next285.prol = add nsw i64 %indvars.iv284.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !115
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv284.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !115
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !115
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv284.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !115
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !115
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv284.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !115
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !251

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv284.unr = phi i64 [ %indvars.iv282, %for.body95.preheader ], [ %indvars.iv.next285.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv282, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !183
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !115
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !115
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !115
  %indvars.iv.next283 = add nuw nsw i64 %indvars.iv282, 1
  %exitcond287.not = icmp eq i64 %indvars.iv.next283, %wide.trip.count286
  br i1 %exitcond287.not, label %while.cond.preheader, label %for.body58, !llvm.loop !252

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv284 = phi i64 [ %indvars.iv.next285.3, %for.body95 ], [ %indvars.iv284.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next285 = add nsw i64 %indvars.iv284, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !115
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv284
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !115
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !115
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv284
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !115
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !115
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv284
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !115
  %indvars.iv.next285.1 = add nsw i64 %indvars.iv284, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !115
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !115
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !115
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !115
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !115
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !115
  %indvars.iv.next285.2 = add nsw i64 %indvars.iv284, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !115
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !115
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !115
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !115
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !115
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !115
  %indvars.iv.next285.3 = add nsw i64 %indvars.iv284, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !115
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next285.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !115
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !115
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next285.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !115
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !115
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next285.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !115
  %cmp93.3 = icmp sgt i64 %indvars.iv.next285.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !253

land.rhs:                                         ; preds = %while.body, %land.rhs.preheader
  %135 = phi i64 [ %154, %while.body ], [ %.pre293, %land.rhs.preheader ]
  %136 = phi i64 [ %mul147, %while.body ], [ %.pre, %land.rhs.preheader ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !115
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !244
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !115
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !115
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !115
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !115
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !115
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !115
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !115
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !115
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !115
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !115
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !115
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !115
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !115
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !115
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !115
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !115
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !115
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !115
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !115
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !115
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !115
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !115
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !115
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !115
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !115
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !115
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !115
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !115
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !115
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !115
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !115
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !115
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !115
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !254

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(416) %155, i8* noundef nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !255
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: mustprogress nounwind
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #18
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !180
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %2 = zext i32 %0 to i64
  %min.i.i16 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 0
  %3 = load i32, i32* %min.i.i16, align 4, !tbaa !186
  %min2.i.i17 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 0, i32 0
  %4 = load i32, i32* %min2.i.i17, align 4, !tbaa !186
  %cmp.i.i18 = icmp eq i32 %3, %4
  br i1 %cmp.i.i18, label %land.lhs.true.i.i.preheader, label %return

land.lhs.true.i.i.preheader:                      ; preds = %for.body.lr.ph
  %extent.i.i1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 1
  %5 = load i32, i32* %extent.i.i1, align 4, !tbaa !183
  %extent3.i.i2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 0, i32 1
  %6 = load i32, i32* %extent3.i.i2, align 4, !tbaa !183
  %cmp4.i.i3 = icmp eq i32 %5, %6
  br i1 %cmp4.i.i3, label %land.lhs.true5.i.i.preheader, label %return

land.lhs.true5.i.i.preheader:                     ; preds = %land.lhs.true.i.i.preheader
  %stride.i.i10 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 0, i32 2
  %7 = load i32, i32* %stride.i.i10, align 4, !tbaa !187
  %stride6.i.i11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 0, i32 2
  %8 = load i32, i32* %stride6.i.i11, align 4, !tbaa !187
  %cmp7.i.i12 = icmp eq i32 %7, %8
  br i1 %cmp7.i.i12, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %cmp = icmp ult i64 %indvars.iv.next, %2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !256

for.body:                                         ; preds = %for.cond
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv.next, i32 0
  %9 = load i32, i32* %min.i.i, align 4, !tbaa !186
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv.next, i32 0
  %10 = load i32, i32* %min2.i.i, align 4, !tbaa !186
  %cmp.i.i = icmp eq i32 %9, %10
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return, !llvm.loop !256

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv.next, i32 1
  %11 = load i32, i32* %extent.i.i, align 4, !tbaa !183
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv.next, i32 1
  %12 = load i32, i32* %extent3.i.i, align 4, !tbaa !183
  %cmp4.i.i = icmp eq i32 %11, %12
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return, !llvm.loop !256

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv.next, i32 2
  %13 = load i32, i32* %stride.i.i, align 4, !tbaa !187
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv.next, i32 2
  %14 = load i32, i32* %stride6.i.i, align 4, !tbaa !187
  %cmp7.i.i = icmp eq i32 %13, %14
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return, !llvm.loop !256

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i.preheader, %land.lhs.true5.i.i
  %cmp1120414 = phi i1 [ %cmp, %land.lhs.true5.i.i ], [ true, %land.lhs.true5.i.i.preheader ]
  %indvars.iv19513 = phi i64 [ %indvars.iv.next, %land.lhs.true5.i.i ], [ 0, %land.lhs.true5.i.i.preheader ]
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv19513, i32 3
  %15 = load i32, i32* %flags.i.i, align 4, !tbaa !257
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv19513, i32 3
  %16 = load i32, i32* %flags8.i.i, align 4, !tbaa !257
  %cmp9.i.i.not = icmp eq i32 %15, %16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv19513, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %land.lhs.true5.i.i.preheader, %land.lhs.true.i.i.preheader, %for.body.lr.ph, %entry
  %cmp.lcssa = phi i1 [ false, %entry ], [ true, %for.body.lr.ph ], [ true, %land.lhs.true.i.i.preheader ], [ true, %land.lhs.true5.i.i.preheader ], [ %cmp, %for.cond ], [ %cmp, %for.body ], [ %cmp, %land.lhs.true.i.i ], [ %cmp, %land.lhs.true5.i.i ], [ %cmp1120414, %_ZNK18halide_dimension_tneERKS_.exit ]
  %17 = xor i1 %cmp.lcssa, true
  ret i1 %17
}

; Function Attrs: mustprogress nounwind
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull align 8 dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !11
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !258
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !259
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !260
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !261
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !236
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !180
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !262
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #18
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !237
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !238
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !263
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !264
  %4 = load i64, i64* %key_size, align 8, !tbaa !259
  %cmp111.not = icmp eq i64 %4, 0
  br i1 %cmp111.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !15
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !15
  %6 = load i64, i64* %key_size, align 8, !tbaa !259
  %cmp125 = icmp ugt i64 %6, 1
  br i1 %cmp125, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !265

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !262
  %cmp25113 = icmp sgt i32 %7, 0
  br i1 %cmp25113, label %for.body27, label %for.cond36.preheader

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc126 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !264
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc126
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !15
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc126
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !15
  %inc = add nuw i64 %inc126, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !259
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !265

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !236
  %cmp38117.not = icmp eq i32 %10, 0
  br i1 %cmp38117.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.cond23.preheader, %for.body27
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body27 ], [ 0, %for.cond23.preheader ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !263
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %13, i8* noundef nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !182
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !262
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !266

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !236
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next122, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !267

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !268
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !269
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv121 = phi i64 [ %indvars.iv.next122, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv121
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !11
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !238
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv121
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %22, i8* noundef nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !270
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !263
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !262
  %25 = trunc i64 %indvars.iv.next122 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !238
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv121, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !181
  %cmp57115 = icmp sgt i32 %24, 0
  br i1 %cmp57115, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !11
  %dim62127 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62127 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !181
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %30, i8* noundef nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !182
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !262
  %cmp57130 = icmp sgt i32 %31, 1
  br i1 %cmp57130, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !272

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next120131 = phi i64 [ %indvars.iv.next120, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !238
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv121, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !181
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !11
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !181
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next120131
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next120131
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %34, i8* noundef nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !182
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv.next120131, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !262
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next120, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !272

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: mustprogress nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !15
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !273

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body ]
  %h.09 = phi i32 [ 5381, %for.body.preheader.new ], [ %add1.7, %for.body ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body ]
  %add = mul i32 %h.09, 33
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !15
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !15
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !15
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !15
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !15
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !15
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !15
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !15
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !274
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !115
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = select i1 %cmp84, i1 %cmp185, i1 false
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %115, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %116, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !275
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !261
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !260
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !11
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !233
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !11
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !233
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !276

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.2.42, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !233
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !233
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !258
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !258
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !258
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !258
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !236
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !238
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull align 8 dereferenceable(96) %prune_candidate.086) #19
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #18
  %.pre90 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  %.pre91 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !115
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !180
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.preheader.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.preheader.i.i:                           ; preds = %for.body
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.preheader.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind50 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next55, %vector.body42 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi72, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %step.add51 = add <4 x i64> %vec.ind50, <i64 4, i64 4, i64 4, i64 4>
  %step.add52 = add <4 x i64> %vec.ind50, <i64 8, i64 8, i64 8, i64 8>
  %step.add53 = add <4 x i64> %vec.ind50, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec60 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !187
  %wide.vec61 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !187
  %wide.vec62 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !187
  %wide.vec63 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !187
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %40 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind50, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add51, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !183
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !183
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !183
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !183
  %48 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %63
  %index.next48 = add nuw i64 %index47, 16
  %vec.ind.next55 = add <4 x i64> %vec.ind50, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !277

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx76 = add <4 x i64> %predphi73, %predphi72
  %bin.rdx77 = add <4 x i64> %predphi74, %bin.rdx76
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx78)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.preheader.i.i, %middle.block40
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !187
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !183
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i12.i.preheader, label %for.body.i.i, !llvm.loop !278

for.body.i12.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i12.i.preheader80, label %vector.ph

vector.ph:                                        ; preds = %for.body.i12.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !187
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !187
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !187
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !187
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !183
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !183
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !183
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !183
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add nuw i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !279

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i12.i.preheader80

for.body.i12.i.preheader80:                       ; preds = %for.body.i12.i.preheader, %middle.block
  %indvars.iv.i9.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %for.body.i12.i.preheader80, %if.end.i22.i
  %indvars.iv.i9.i = phi i64 [ %indvars.iv.next.i20.i, %if.end.i22.i ], [ %indvars.iv.i9.i.ph, %for.body.i12.i.preheader80 ]
  %index.018.i.i = phi i64 [ %index.1.i19.i, %if.end.i22.i ], [ %index.018.i.i.ph, %for.body.i12.i.preheader80 ]
  %stride2.i10.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i9.i, i32 2
  %111 = load i32, i32* %stride2.i10.i, align 4, !tbaa !187
  %cmp3.i11.i = icmp slt i32 %111, 0
  br i1 %cmp3.i11.i, label %if.then.i18.i, label %if.end.i22.i

if.then.i18.i:                                    ; preds = %for.body.i12.i
  %conv.i.i = sext i32 %111 to i64
  %extent.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i9.i, i32 1
  %112 = load i32, i32* %extent.i13.i, align 4, !tbaa !183
  %sub.i14.i = add nsw i32 %112, -1
  %conv7.i15.i = sext i32 %sub.i14.i to i64
  %mul.i16.i = mul nsw i64 %conv7.i15.i, %conv.i.i
  %add.i17.i = add nsw i64 %mul.i16.i, %index.018.i.i
  br label %if.end.i22.i

if.end.i22.i:                                     ; preds = %if.then.i18.i, %for.body.i12.i
  %index.1.i19.i = phi i64 [ %add.i17.i, %if.then.i18.i ], [ %index.018.i.i, %for.body.i12.i ]
  %indvars.iv.next.i20.i = add nuw nsw i64 %indvars.iv.i9.i, 1
  %exitcond.not.i21.i = icmp eq i64 %indvars.iv.next.i20.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i21.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i12.i, !llvm.loop !280

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i22.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body
  %add8.i27.i.neg = phi i64 [ -1, %for.body ], [ %add8.i.i.neg, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i8.i = phi i64 [ 0, %for.body ], [ %index.1.i19.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i.neg = add i64 %index.0.lcssa.i8.i, %add8.i27.i.neg
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !141
  %conv.i23.i = zext i8 %113 to i64
  %add.i24.i = add nuw nsw i64 %conv.i23.i, 7
  %div.i.i = lshr i64 %add.i24.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg
  %114 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  %sub = add i64 %mul.i.neg, %114
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !281

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %115 = phi i64 [ %.pre91, %for.cond.cleanup ], [ %4, %while.body ]
  %116 = phi i64 [ %.pre90, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %116, %115
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %117 = select i1 %cmp, i1 %cmp1, i1 false
  br i1 %117, label %while.body, label %while.end42, !llvm.loop !282

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #3 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !115
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #3 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #19
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %cmp16208 = icmp sgt i32 %tuple_count, 0
  %entry3.0212 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !11
  %cmp.not213 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0212, null
  br i1 %cmp.not213, label %for.cond75.preheader, label %while.body.preheader

while.body.preheader:                             ; preds = %entry
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16208, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.preheader, %if.end73.us
  %entry3.0214.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0212, %while.body.preheader ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !260
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !259
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !264
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #19
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !263
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #19
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !236
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.cond.preheader.us, %for.body.us
  %indvars.iv.us = phi i64 [ %indvars.iv.next.us, %for.body.us ], [ 0, %for.cond.preheader.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !11
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !238
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !181
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #19
  %indvars.iv.next.us = add nuw nsw i64 %indvars.iv.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next.us, %1
  %10 = select i1 %call21.us, i1 %cmp16.us, i1 false
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !283

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !11
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !284

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  br i1 %cmp16208, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count230 = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.preheader, %if.end73
  %entry3.0214 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0212, %while.body.preheader ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !260
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !259
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !264
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #19
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !263
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #19
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !236
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %for.cond.preheader, label %if.end73

for.cond.preheader:                               ; preds = %land.lhs.true13
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 11
  br label %if.then23

if.then23:                                        ; preds = %for.cond.cleanup.us, %for.cond.preheader
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0214, %for.cond.preheader ], [ %entry3.0214.us, %for.cond.cleanup.us ]
  %.us-phi11 = phi %struct.halide_buffer_t** [ %buf, %for.cond.preheader ], [ %buf.us, %for.cond.cleanup.us ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.3.43, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !258
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !275
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.4.44, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.5.45, i64 0, i64 0)) #18
  tail call void @abort() #18
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !258
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !258
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !258
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !275
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16208, label %for.body62.preheader, label %cleanup119.loopexit223

for.body62.preheader:                             ; preds = %if.end57
  %wide.trip.count = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.preheader.new

for.body62.preheader.new:                         ; preds = %for.body62.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.preheader.new
  %indvars.iv224 = phi i64 [ 0, %for.body62.preheader.new ], [ %indvars.iv.next225.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.preheader.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv224
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !11
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %.us-phi11, align 8, !tbaa !238
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv224
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %29, i8* noundef nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !270
  %indvars.iv.next225 = or i64 %indvars.iv224, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next225
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !11
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %.us-phi11, align 8, !tbaa !238
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next225
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %33, i8* noundef nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !270
  %indvars.iv.next225.1 = or i64 %indvars.iv224, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next225.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !11
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %.us-phi11, align 8, !tbaa !238
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next225.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %37, i8* noundef nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !270
  %indvars.iv.next225.2 = or i64 %indvars.iv224, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next225.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !11
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %.us-phi11, align 8, !tbaa !238
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next225.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %41, i8* noundef nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !270
  %indvars.iv.next225.3 = add nuw nsw i64 %indvars.iv224, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !285

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0214, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !11
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !284

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv226 = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next227, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !11
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !180
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.preheader.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.preheader.i.i:                           ; preds = %for.body78
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.preheader.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind60 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next65, %vector.body52 ]
  %vec.phi66 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi82, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %step.add61 = add <4 x i64> %vec.ind60, <i64 4, i64 4, i64 4, i64 4>
  %step.add62 = add <4 x i64> %vec.ind60, <i64 8, i64 8, i64 8, i64 8>
  %step.add63 = add <4 x i64> %vec.ind60, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec70 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !187
  %wide.vec71 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !187
  %wide.vec72 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !187
  %wide.vec73 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !187
  %strided.vec74 = shufflevector <16 x i32> %wide.vec70, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec74, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %64 = zext <4 x i32> %strided.vec74 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind60, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add61, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %wide.masked.gather78 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !183
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !183
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !183
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !183
  %72 = add nsw <4 x i32> %wide.masked.gather78, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi82 = add <4 x i64> %vec.phi66, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %87
  %index.next58 = add nuw i64 %index57, 16
  %vec.ind.next65 = add <4 x i64> %vec.ind60, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !286

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx86 = add <4 x i64> %predphi83, %predphi82
  %bin.rdx87 = add <4 x i64> %predphi84, %bin.rdx86
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx88)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.preheader.i.i, %middle.block50
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !187
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !183
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i12.i.preheader, label %for.body.i.i, !llvm.loop !287

for.body.i12.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i12.i.preheader90, label %vector.ph

vector.ph:                                        ; preds = %for.body.i12.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !187
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !187
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !187
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !187
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !183
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !183
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !183
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !183
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add nuw i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !288

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i12.i.preheader90

for.body.i12.i.preheader90:                       ; preds = %for.body.i12.i.preheader, %middle.block
  %indvars.iv.i9.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %for.body.i12.i.preheader90, %if.end.i22.i
  %indvars.iv.i9.i = phi i64 [ %indvars.iv.next.i20.i, %if.end.i22.i ], [ %indvars.iv.i9.i.ph, %for.body.i12.i.preheader90 ]
  %index.018.i.i = phi i64 [ %index.1.i19.i, %if.end.i22.i ], [ %index.018.i.i.ph, %for.body.i12.i.preheader90 ]
  %stride2.i10.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i9.i, i32 2
  %135 = load i32, i32* %stride2.i10.i, align 4, !tbaa !187
  %cmp3.i11.i = icmp slt i32 %135, 0
  br i1 %cmp3.i11.i, label %if.then.i18.i, label %if.end.i22.i

if.then.i18.i:                                    ; preds = %for.body.i12.i
  %conv.i.i = sext i32 %135 to i64
  %extent.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i9.i, i32 1
  %136 = load i32, i32* %extent.i13.i, align 4, !tbaa !183
  %sub.i14.i = add nsw i32 %136, -1
  %conv7.i15.i = sext i32 %sub.i14.i to i64
  %mul.i16.i = mul nsw i64 %conv7.i15.i, %conv.i.i
  %add.i17.i = add nsw i64 %mul.i16.i, %index.018.i.i
  br label %if.end.i22.i

if.end.i22.i:                                     ; preds = %if.then.i18.i, %for.body.i12.i
  %index.1.i19.i = phi i64 [ %add.i17.i, %if.then.i18.i ], [ %index.018.i.i, %for.body.i12.i ]
  %indvars.iv.next.i20.i = add nuw nsw i64 %indvars.iv.i9.i, 1
  %exitcond.not.i21.i = icmp eq i64 %indvars.iv.next.i20.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i21.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i12.i, !llvm.loop !289

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i22.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i8.i = phi i64 [ 0, %for.body78 ], [ %index.1.i19.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i8.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !141
  %conv.i23.i = zext i8 %137 to i64
  %add.i24.i = add nuw nsw i64 %conv.i23.i, 7
  %div.i.i = lshr i64 %add.i24.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #18
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !178
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90215.not = icmp eq i64 %indvars.iv226, 0
  br i1 %cmp90215.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv228 = phi i64 [ %indvars.iv.next229, %for.body92 ], [ %indvars.iv226, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv228, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !11
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !178
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #19
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #18
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !11
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !178
  %143 = icmp sgt i64 %indvars.iv228, 1
  %indvars.iv.next229 = add nsw i64 %indvars.iv228, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !290

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !178
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #19
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !291
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !293
  %indvars.iv.next227 = add nuw nsw i64 %indvars.iv226, 1
  %exitcond231.not = icmp eq i64 %indvars.iv.next227, %wide.trip.count230
  br i1 %exitcond231.not, label %cleanup119, label %for.body78, !llvm.loop !294

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.preheader
  %indvars.iv224.unr = phi i64 [ 0, %for.body62.preheader ], [ %indvars.iv.next225.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv224.epil = phi i64 [ %indvars.iv.next225.epil, %for.body62.epil ], [ %indvars.iv224.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv224.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !11
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %.us-phi11, align 8, !tbaa !238
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv224.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(56) %145, i8* noundef nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !270
  %indvars.iv.next225.epil = add nuw nsw i64 %indvars.iv224.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !295

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !261
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !261
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #3 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !11
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !178
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #19
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !291
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %conv10 = sext i32 %size to i64
  %cmp22214 = icmp sgt i32 %tuple_count, 0
  %entry6.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !11
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0220, null
  br i1 %cmp.not221, label %for.cond61.preheader, label %while.body.preheader

while.body.preheader:                             ; preds = %entry
  %4 = sext i32 %tuple_count to i64
  br i1 %cmp22214, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.preheader, %if.end59.us
  %entry6.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0220, %while.body.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !260
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !259
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !264
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #19
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !263
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #19
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !236
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.cond.preheader.us, label %if.end59.us

for.cond.preheader.us:                            ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 11
  %.pre.us = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !238
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %10 = phi %struct.halide_buffer_t* [ %.pre.us, %for.cond.preheader.us ], [ %13, %for.body.us ]
  %indvars.iv.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next.us, %for.body.us ]
  %no_host_pointers_equal.0215.us = phi i8 [ 1, %for.cond.preheader.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.us
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !11
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %10, i64 %indvars.iv.us, i32 6
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !181
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %11, %struct.halide_dimension_t* %12) #19
  %13 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !238
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv.us, i32 2
  %14 = load i8*, i8** %host35.us, align 8, !tbaa !178
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %15 = load i8*, i8** %host36.us, align 8, !tbaa !178
  %cmp37.us = icmp eq i8* %14, %15
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0215.us
  %indvars.iv.next.us = add nuw nsw i64 %indvars.iv.us, 1
  %cmp22.us = icmp slt i64 %indvars.iv.next.us, %4
  %16 = select i1 %call30.us, i1 %cmp22.us, i1 false
  br i1 %16, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !296

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body, label %if.end59.us

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !11
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !297

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  br i1 %cmp22214, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.preheader, %if.end59
  %entry6.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0220, %while.body.preheader ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222, i64 0, i32 6
  %17 = load i32, i32* %hash8, align 8, !tbaa !260
  %cmp9 = icmp eq i32 %17, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222, i64 0, i32 4
  %18 = load i64, i64* %key_size, align 8, !tbaa !259
  %cmp11 = icmp eq i64 %18, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222, i64 0, i32 5
  %19 = load i8*, i8** %key, align 8, !tbaa !264
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %19, i8* %cache_key, i64 %conv10) #19
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222, i64 0, i32 10
  %20 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !263
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %20) #19
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222, i64 0, i32 8
  %21 = load i32, i32* %tuple_count19, align 8, !tbaa !236
  %cmp20 = icmp eq i32 %21, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

do.body:                                          ; preds = %for.cond.cleanup.us
  %22 = and i8 %spec.select.us, 1
  %tobool41.not = icmp eq i8 %22, 0
  br i1 %tobool41.not, label %if.then42, label %for.body48.preheader

if.then42:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.9.46, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %for.body48.preheader

for.body48.preheader:                             ; preds = %do.body, %if.then42
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body48

for.body48:                                       ; preds = %for.body48, %for.body48.preheader
  %indvars.iv232 = phi i64 [ 0, %for.body48.preheader ], [ %indvars.iv.next233, %for.body48 ]
  %arrayidx50 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv232
  %23 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50, align 8, !tbaa !11
  %host51 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %23, i64 0, i32 2
  %24 = load i8*, i8** %host51, align 8, !tbaa !178
  %call52 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %24) #19
  %entry53 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53, align 8, !tbaa !293
  %indvars.iv.next233 = add nuw nsw i64 %indvars.iv232, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next233, %wide.trip.count
  br i1 %exitcond.not, label %cleanup132, label %for.body48, !llvm.loop !298

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0222, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !11
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !297

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #19
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #18
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next235, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0224 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !11
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !180
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.preheader.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.preheader.i.i:                           ; preds = %for.body64
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check40 = icmp ult i32 %27, 17
  br i1 %min.iters.check40, label %for.body.i.i.preheader, label %vector.ph41

vector.ph41:                                      ; preds = %for.body.preheader.i.i
  %n.mod.vf42 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf42, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf42
  %n.vec43 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body39

vector.body39:                                    ; preds = %vector.body39, %vector.ph41
  %index44 = phi i64 [ 0, %vector.ph41 ], [ %index.next45, %vector.body39 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph41 ], [ %vec.ind.next52, %vector.body39 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph41 ], [ %predphi69, %vector.body39 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph41 ], [ %predphi70, %vector.body39 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph41 ], [ %predphi71, %vector.body39 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph41 ], [ %predphi72, %vector.body39 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index44, 4
  %32 = or i64 %index44, 8
  %33 = or i64 %index44, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index44, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !187
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !187
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !187
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !187
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !183
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !183
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !183
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !183
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next45 = add nuw i64 %index44, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next45, %n.vec43
  br i1 %70, label %middle.block37, label %vector.body39, !llvm.loop !299

middle.block37:                                   ; preds = %vector.body39
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.preheader.i.i, %middle.block37
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %n.vec43, %middle.block37 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %71, %middle.block37 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !187
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !183
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i12.i.preheader, label %for.body.i.i, !llvm.loop !300

for.body.i12.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i12.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i12.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %vec.phi22 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi34, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add17 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add18 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !187
  %wide.vec23 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !187
  %wide.vec24 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !187
  %wide.vec25 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !187
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec28 = shufflevector <16 x i32> %wide.vec25, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec28, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec28 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add18, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !183
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !183
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !183
  %wide.masked.gather31 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !183
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi34 = add <4 x i64> %vec.phi22, %114
  %index.next = add nuw i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !301

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi32, %predphi
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx
  %bin.rdx36 = add <4 x i64> %predphi34, %bin.rdx35
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx36)
  br label %for.body.i12.i.preheader77

for.body.i12.i.preheader77:                       ; preds = %for.body.i12.i.preheader, %middle.block
  %indvars.iv.i9.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %for.body.i12.i.preheader77, %if.end.i22.i
  %indvars.iv.i9.i = phi i64 [ %indvars.iv.next.i20.i, %if.end.i22.i ], [ %indvars.iv.i9.i.ph, %for.body.i12.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i19.i, %if.end.i22.i ], [ %index.018.i.i.ph, %for.body.i12.i.preheader77 ]
  %stride2.i10.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i9.i, i32 2
  %117 = load i32, i32* %stride2.i10.i, align 4, !tbaa !187
  %cmp3.i11.i = icmp slt i32 %117, 0
  br i1 %cmp3.i11.i, label %if.then.i18.i, label %if.end.i22.i

if.then.i18.i:                                    ; preds = %for.body.i12.i
  %conv.i.i = sext i32 %117 to i64
  %extent.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i9.i, i32 1
  %118 = load i32, i32* %extent.i13.i, align 4, !tbaa !183
  %sub.i14.i = add nsw i32 %118, -1
  %conv7.i15.i = sext i32 %sub.i14.i to i64
  %mul.i16.i = mul nsw i64 %conv7.i15.i, %conv.i.i
  %add.i17.i = add nsw i64 %mul.i16.i, %index.018.i.i
  br label %if.end.i22.i

if.end.i22.i:                                     ; preds = %if.then.i18.i, %for.body.i12.i
  %index.1.i19.i = phi i64 [ %add.i17.i, %if.then.i18.i ], [ %index.018.i.i, %for.body.i12.i ]
  %indvars.iv.next.i20.i = add nuw nsw i64 %indvars.iv.i9.i, 1
  %exitcond.not.i21.i = icmp eq i64 %indvars.iv.next.i20.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i21.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i12.i, !llvm.loop !302

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i22.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i8.i = phi i64 [ 0, %for.body64 ], [ %index.1.i19.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i8.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !141
  %conv.i23.i = zext i8 %119 to i64
  %add.i24.i = add nuw nsw i64 %conv.i23.i, 7
  %div.i.i = lshr i64 %add.i24.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0224
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !303

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull align 8 dereferenceable(96) %120, i8* %cache_key, i64 %conv10, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #19
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !115
  br i1 %cmp22214, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count244 = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv242 = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next243, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !11
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !178
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #19
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !293
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %exitcond245.not = icmp eq i64 %indvars.iv.next243, %wide.trip.count244
  br i1 %exitcond245.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !304

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #18
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !11
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !233
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !258
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !275
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !11
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !11
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !11
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !11
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !261
  br i1 %cmp22214, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next239, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !11
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !178
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #19
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !293
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %cleanup132, label %for.body117, !llvm.loop !305

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #3 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #19
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !293
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #18
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !261
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.12.47, i64 0, i64 0)) #18
  tail call void @abort() #18
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !261
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !261
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #18
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !11
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !233
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !268, !range !18
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !269
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !11
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !275
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !258
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !258
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !258
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !11
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !11
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull align 8 dereferenceable(96) %entry1.056) #19
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #18
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !306

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !15
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !15
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !15
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5, !llvm.loop !307

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !15
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = select i1 %cmp13, i1 true, i1 %tobool14
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !15
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = select i1 %cmp, i1 true, i1 %3
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !308
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = select i1 %cmp, i1 %cmp1, i1 false
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !15
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #19
  ret i8* %call
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !170
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !115
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #18
  %2 = load i64, i64* %bits, align 8, !tbaa !115
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #19
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #19
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #19
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #19
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = select i1 %cmp16, i1 %cmp17, i1 false
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #19
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #19
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #19
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #19
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #19
  %4 = load double, double* %arg.addr, align 8, !tbaa !170
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !170
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !170
  %cmp39263 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39263, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0264 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0264, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !309

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !170
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41265 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41265, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1266 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1266, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !310

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !170
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #19
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #19
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #19
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #19
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #19
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #19
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #19
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #19
  %call1081 = ptrtoint i8* %call108 to i64
  %cmp109274 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109274, label %for.cond111.preheader, label %for.cond.cleanup

for.cond111.preheader:                            ; preds = %if.end104, %if.end137
  %i.0277 = phi i32 [ %inc139, %if.end137 ], [ 0, %if.end104 ]
  %int_part_ptr.0275 = phi i8* [ %int_part_ptr.1, %if.end137 ], [ %add.ptr105, %if.end104 ]
  %int_part_ptr.02752 = ptrtoint i8* %int_part_ptr.0275 to i64
  %cmp113.not270 = icmp eq i8* %call108, %int_part_ptr.0275
  br i1 %cmp113.not270, label %if.end137, label %for.body115.preheader

for.body115.preheader:                            ; preds = %for.cond111.preheader
  %9 = sub i64 %call1081, %int_part_ptr.02752
  %10 = xor i64 %int_part_ptr.02752, -1
  %11 = add i64 %10, %call1081
  %xtraiter = and i64 %9, 3
  %12 = icmp ult i64 %11, 3
  br i1 %12, label %for.cond.cleanup114.unr-lcssa, label %for.body115.preheader.new

for.body115.preheader.new:                        ; preds = %for.body115.preheader
  %unroll_iter = and i64 %9, -4
  br label %for.body115

for.cond.cleanup:                                 ; preds = %if.end137, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1, %if.end137 ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #19
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #19
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #19
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114.unr-lcssa:                    ; preds = %for.body115, %for.body115.preheader
  %cmp124.lcssa.ph = phi i1 [ undef, %for.body115.preheader ], [ %cmp124.3, %for.body115 ]
  %p.0272.pn.unr = phi i8* [ %call108, %for.body115.preheader ], [ %p.0272.3, %for.body115 ]
  %carry.0271.unr = phi i32 [ 0, %for.body115.preheader ], [ %carry.1.3, %for.body115 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup114, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond.cleanup114.unr-lcssa, %for.body115.epil
  %p.0272.pn.epil = phi i8* [ %p.0272.epil, %for.body115.epil ], [ %p.0272.pn.unr, %for.cond.cleanup114.unr-lcssa ]
  %carry.0271.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ %carry.0271.unr, %for.cond.cleanup114.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body115.epil ], [ %xtraiter, %for.cond.cleanup114.unr-lcssa ]
  %p.0272.epil = getelementptr inbounds i8, i8* %p.0272.pn.epil, i64 -1
  %13 = load i8, i8* %p.0272.epil, align 1, !tbaa !15
  %sub117.epil = add i8 %13, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0271.epil
  %14 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %14, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %15 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %15, 48
  store i8 %conv133.epil, i8* %p.0272.epil, align 1, !tbaa !15
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup114, label %for.body115.epil, !llvm.loop !311

for.cond.cleanup114:                              ; preds = %for.body115.epil, %for.cond.cleanup114.unr-lcssa
  %cmp124.lcssa = phi i1 [ %cmp124.lcssa.ph, %for.cond.cleanup114.unr-lcssa ], [ %cmp124.epil, %for.body115.epil ]
  br i1 %cmp124.lcssa, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.body115, %for.body115.preheader.new
  %p.0272.pn = phi i8* [ %call108, %for.body115.preheader.new ], [ %p.0272.3, %for.body115 ]
  %carry.0271 = phi i32 [ 0, %for.body115.preheader.new ], [ %carry.1.3, %for.body115 ]
  %niter = phi i64 [ %unroll_iter, %for.body115.preheader.new ], [ %niter.nsub.3, %for.body115 ]
  %p.0272 = getelementptr inbounds i8, i8* %p.0272.pn, i64 -1
  %16 = load i8, i8* %p.0272, align 1, !tbaa !15
  %sub117 = add i8 %16, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0271
  %17 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %17, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %18 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %18, 48
  store i8 %conv133, i8* %p.0272, align 1, !tbaa !15
  %p.0272.1 = getelementptr inbounds i8, i8* %p.0272.pn, i64 -2
  %19 = load i8, i8* %p.0272.1, align 1, !tbaa !15
  %sub117.1 = add i8 %19, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.1
  %20 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %20, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %21 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %21, 48
  store i8 %conv133.1, i8* %p.0272.1, align 1, !tbaa !15
  %p.0272.2 = getelementptr inbounds i8, i8* %p.0272.pn, i64 -3
  %22 = load i8, i8* %p.0272.2, align 1, !tbaa !15
  %sub117.2 = add i8 %22, -48
  %conv119.2 = sext i8 %sub117.2 to i32
  %mul120.2 = shl nsw i32 %conv119.2, 1
  %add121.2 = or i32 %mul120.2, %carry.1.1
  %23 = trunc i32 %add121.2 to i8
  %cmp124.2 = icmp sgt i8 %23, 9
  %sub127.2 = add nsw i32 %add121.2, 246
  %carry.1.2 = zext i1 %cmp124.2 to i32
  %new_digit.0.in.2 = select i1 %cmp124.2, i32 %sub127.2, i32 %add121.2
  %24 = trunc i32 %new_digit.0.in.2 to i8
  %conv133.2 = add i8 %24, 48
  store i8 %conv133.2, i8* %p.0272.2, align 1, !tbaa !15
  %p.0272.3 = getelementptr inbounds i8, i8* %p.0272.pn, i64 -4
  %25 = load i8, i8* %p.0272.3, align 1, !tbaa !15
  %sub117.3 = add i8 %25, -48
  %conv119.3 = sext i8 %sub117.3 to i32
  %mul120.3 = shl nsw i32 %conv119.3, 1
  %add121.3 = or i32 %mul120.3, %carry.1.2
  %26 = trunc i32 %add121.3 to i8
  %cmp124.3 = icmp sgt i8 %26, 9
  %sub127.3 = add nsw i32 %add121.3, 246
  %carry.1.3 = zext i1 %cmp124.3 to i32
  %new_digit.0.in.3 = select i1 %cmp124.3, i32 %sub127.3, i32 %add121.3
  %27 = trunc i32 %new_digit.0.in.3 to i8
  %conv133.3 = add i8 %27, 48
  store i8 %conv133.3, i8* %p.0272.3, align 1, !tbaa !15
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup114.unr-lcssa, label %for.body115, !llvm.loop !312

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0275, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !15
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0275, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %inc139 = add nuw nsw i32 %i.0277, 1
  %exitcond.not = icmp eq i32 %inc139, %integer_exponent.0
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond111.preheader, !llvm.loop !313

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !15
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !15
  %tobool.not = icmp ult i8* %arg, inttoptr (i64 16 to i8*)
  br i1 %tobool.not, label %cleanup, label %for.inc

for.inc:                                          ; preds = %entry
  %shr = lshr i64 %1, 4
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !15
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !15
  %tobool.not.1 = icmp ult i8* %arg, inttoptr (i64 256 to i8*)
  br i1 %tobool.not.1, label %cleanup, label %for.inc.1

cleanup:                                          ; preds = %for.inc.14, %for.inc.13, %for.inc.12, %for.inc.11, %for.inc.10, %for.inc.9, %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.inc ], [ %incdec.ptr.1, %for.inc.1 ], [ %incdec.ptr.2, %for.inc.2 ], [ %incdec.ptr.3, %for.inc.3 ], [ %incdec.ptr.4, %for.inc.4 ], [ %incdec.ptr.5, %for.inc.5 ], [ %incdec.ptr.6, %for.inc.6 ], [ %incdec.ptr.7, %for.inc.7 ], [ %incdec.ptr.8, %for.inc.8 ], [ %incdec.ptr.9, %for.inc.9 ], [ %incdec.ptr.10, %for.inc.10 ], [ %incdec.ptr.11, %for.inc.11 ], [ %incdec.ptr.12, %for.inc.12 ], [ %incdec.ptr.13, %for.inc.13 ], [ %incdec.ptr.14, %for.inc.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.inc ], [ %incdec.ptr.2, %for.inc.1 ], [ %incdec.ptr.3, %for.inc.2 ], [ %incdec.ptr.4, %for.inc.3 ], [ %incdec.ptr.5, %for.inc.4 ], [ %incdec.ptr.6, %for.inc.5 ], [ %incdec.ptr.7, %for.inc.6 ], [ %incdec.ptr.8, %for.inc.7 ], [ %incdec.ptr.9, %for.inc.8 ], [ %incdec.ptr.10, %for.inc.9 ], [ %incdec.ptr.11, %for.inc.10 ], [ %incdec.ptr.12, %for.inc.11 ], [ %incdec.ptr.13, %for.inc.12 ], [ %incdec.ptr.14, %for.inc.13 ], [ %incdec.ptr.15, %for.inc.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !15
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !15
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #19
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.inc.1:                                        ; preds = %for.inc
  %shr.1 = lshr i64 %1, 8
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !15
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !15
  %tobool.not.2 = icmp ult i8* %arg, inttoptr (i64 4096 to i8*)
  br i1 %tobool.not.2, label %cleanup, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %shr.2 = lshr i64 %1, 12
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !15
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !15
  %tobool.not.3 = icmp ult i8* %arg, inttoptr (i64 65536 to i8*)
  br i1 %tobool.not.3, label %cleanup, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %shr.3 = lshr i64 %1, 16
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !15
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !15
  %tobool.not.4 = icmp ult i8* %arg, inttoptr (i64 1048576 to i8*)
  br i1 %tobool.not.4, label %cleanup, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %shr.4 = lshr i64 %1, 20
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !15
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !15
  %tobool.not.5 = icmp ult i8* %arg, inttoptr (i64 16777216 to i8*)
  br i1 %tobool.not.5, label %cleanup, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %shr.5 = lshr i64 %1, 24
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !15
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !15
  %tobool.not.6 = icmp ult i8* %arg, inttoptr (i64 268435456 to i8*)
  br i1 %tobool.not.6, label %cleanup, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %shr.6 = lshr i64 %1, 28
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !15
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !15
  %tobool.not.7 = icmp ult i8* %arg, inttoptr (i64 4294967296 to i8*)
  br i1 %tobool.not.7, label %cleanup, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %shr.7 = lshr i64 %1, 32
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !15
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !15
  %tobool.not.8 = icmp ult i8* %arg, inttoptr (i64 68719476736 to i8*)
  br i1 %tobool.not.8, label %cleanup, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %shr.8 = lshr i64 %1, 36
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !15
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !15
  %tobool.not.9 = icmp ult i8* %arg, inttoptr (i64 1099511627776 to i8*)
  br i1 %tobool.not.9, label %cleanup, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  %shr.9 = lshr i64 %1, 40
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !15
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !15
  %tobool.not.10 = icmp ult i8* %arg, inttoptr (i64 17592186044416 to i8*)
  br i1 %tobool.not.10, label %cleanup, label %for.inc.10

for.inc.10:                                       ; preds = %for.inc.9
  %shr.10 = lshr i64 %1, 44
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !15
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !15
  %tobool.not.11 = icmp ult i8* %arg, inttoptr (i64 281474976710656 to i8*)
  br i1 %tobool.not.11, label %cleanup, label %for.inc.11

for.inc.11:                                       ; preds = %for.inc.10
  %shr.11 = lshr i64 %1, 48
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !15
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !15
  %tobool.not.12 = icmp ult i8* %arg, inttoptr (i64 4503599627370496 to i8*)
  br i1 %tobool.not.12, label %cleanup, label %for.inc.12

for.inc.12:                                       ; preds = %for.inc.11
  %shr.12 = lshr i64 %1, 52
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !15
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !15
  %tobool.not.13 = icmp ult i8* %arg, inttoptr (i64 72057594037927936 to i8*)
  br i1 %tobool.not.13, label %cleanup, label %for.inc.13

for.inc.13:                                       ; preds = %for.inc.12
  %shr.13 = lshr i64 %1, 56
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !15
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !15
  %tobool.not.14 = icmp ult i8* %arg, inttoptr (i64 1152921504606846976 to i8*)
  br i1 %tobool.not.14, label %cleanup, label %for.inc.14

for.inc.14:                                       ; preds = %for.inc.13
  %shr.14 = lshr i64 %1, 60
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !15
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !15
  br label %cleanup
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !314
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %reltable.shift = shl i64 %2, 2
  %reltable.intrinsic = call i8* @llvm.load.relative.i64(i8* bitcast ([4 x i32]* @reltable.halide_type_to_string to i8*), i64 %reltable.shift)
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %reltable.intrinsic, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #19
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !141
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #19
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !315
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #19
  %5 = load i16, i16* %lanes, align 2, !tbaa !315
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #19
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: mustprogress nounwind
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #19
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #19
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !247
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #19
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #19
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !316
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #19
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #19
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !178
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #19
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #19
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !317
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #19
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #19
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #19
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load i32, i32* %dimensions, align 4, !tbaa !180
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #19
  br label %return

for.body:                                         ; preds = %if.end, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.end ]
  %dst.addr.080 = phi i8* [ %call26, %for.body ], [ %call10, %if.end ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #19
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !186
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #19
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #19
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !183
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #19
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #19
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !181
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !187
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #19
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !180
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !318

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline mustprogress nounwind
define weak i32 @halide_malloc_alignment() local_unnamed_addr #7 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #3 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !16
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #18
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !11
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #18
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !319
  %call = tail call i32 %0(i8* %user_context) #18
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !11
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !321

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: mustprogress nounwind
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !16, !range !18
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #18
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !11
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !322
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !11
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #18
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %and.i.i45 = and i64 %0, 1
  %cmp.i.i46.not = icmp eq i64 %and.i.i45, 0
  br i1 %cmp.i.i46.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !325
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i48 = and i64 %4, -3
  store i64 %and.i.i48, i64* %flags.i.i, align 8, !tbaa !317
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: mustprogress nounwind
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !327
  %call = tail call i32 %1(i8* %user_context) #18
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #19
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #19
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !316
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !247
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !316
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #18
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #19
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i = and i64 %7, 1
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i97 = and i64 %7, 2
  %cmp.i.i98.not = icmp eq i64 %and.i.i97, 0
  br i1 %cmp.i.i98.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !328
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i100 = and i64 %10, -2
  store i64 %and.i.i100, i64* %flags.i.i, align 8, !tbaa !317
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = select i1 %cmp4.not, i1 true, i1 %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #18
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !330
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %10() #18
  %tobool.not = icmp eq i32 %call9, 0
  %. = select i1 %tobool.not, i32 0, i32 -16
  br label %cleanup12

cleanup12:                                        ; preds = %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ %., %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !332
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %tobool.not = icmp eq i32 %call6, 0
  %. = select i1 %tobool.not, i32 0, i32 -17
  br label %cleanup8

cleanup8:                                         ; preds = %if.end5, %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ], [ %., %if.end5 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !333
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %10() #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !247
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.22.97, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %. = select i1 %tobool.not, i32 0, i32 -18
  br label %cleanup12

if.end11:                                         ; preds = %if.end
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags.i.i, align 8, !tbaa !317
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %do.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ], [ %., %do.end ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #19
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = select i1 %cmp4.not, i1 true, i1 %cmp5.not
  br i1 %or.cond, label %if.end7, label %cleanup14.sink.split

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !334
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %10() #18
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %cleanup14.sink.split

cleanup14.sink.split:                             ; preds = %if.end7, %if.end
  %.sink = phi i8* [ getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0), %if.end ], [ getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0), %if.end7 ]
  %retval.1.ph = phi i32 [ -42, %if.end ], [ -16, %if.end7 ]
  tail call void @halide_error(i8* %user_context, i8* %.sink) #18
  br label %cleanup14

cleanup14:                                        ; preds = %cleanup14.sink.split, %if.end7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end7 ], [ %retval.1.ph, %cleanup14.sink.split ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !335
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %10() #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !247
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.28.102, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %. = select i1 %tobool.not, i32 0, i32 -18
  br label %cleanup18

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !178
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #18
  store i8* null, i8** %host, align 8, !tbaa !178
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags.i.i, align 8, !tbaa !317
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %do.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ], [ %., %do.end ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !180
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.preheader.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.preheader.i.i:                           ; preds = %if.end
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.preheader.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !187
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !187
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !187
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !187
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !183
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !183
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !183
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !183
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add nuw i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !336

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %for.body.preheader.i.i, %middle.block
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.preheader.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !187
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !183
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i12.i.preheader, label %for.body.i.i, !llvm.loop !337

for.body.i12.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i12.i.preheader63, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i12.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind33 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next38, %vector.body25 ]
  %vec.phi39 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi55, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %step.add34 = add <4 x i64> %vec.ind33, <i64 4, i64 4, i64 4, i64 4>
  %step.add35 = add <4 x i64> %vec.ind33, <i64 8, i64 8, i64 8, i64 8>
  %step.add36 = add <4 x i64> %vec.ind33, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec43 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !187
  %wide.vec44 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !187
  %wide.vec45 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !187
  %wide.vec46 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !187
  %strided.vec47 = shufflevector <16 x i32> %wide.vec43, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec47, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %68 = sext <4 x i32> %strided.vec47 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind33, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add34, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %wide.masked.gather51 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !183
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !183
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !183
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !183
  %76 = add nsw <4 x i32> %wide.masked.gather51, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi55 = add <4 x i64> %vec.phi39, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %91
  %index.next31 = add nuw i64 %index30, 16
  %vec.ind.next38 = add <4 x i64> %vec.ind33, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !338

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx59 = add <4 x i64> %predphi56, %predphi55
  %bin.rdx60 = add <4 x i64> %predphi57, %bin.rdx59
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx61)
  br label %for.body.i12.i.preheader63

for.body.i12.i.preheader63:                       ; preds = %for.body.i12.i.preheader, %middle.block23
  %indvars.iv.i9.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i12.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i12.i

for.body.i12.i:                                   ; preds = %for.body.i12.i.preheader63, %if.end.i22.i
  %indvars.iv.i9.i = phi i64 [ %indvars.iv.next.i20.i, %if.end.i22.i ], [ %indvars.iv.i9.i.ph, %for.body.i12.i.preheader63 ]
  %index.018.i.i = phi i64 [ %index.1.i19.i, %if.end.i22.i ], [ %index.018.i.i.ph, %for.body.i12.i.preheader63 ]
  %stride2.i10.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i9.i, i32 2
  %94 = load i32, i32* %stride2.i10.i, align 4, !tbaa !187
  %cmp3.i11.i = icmp slt i32 %94, 0
  br i1 %cmp3.i11.i, label %if.then.i18.i, label %if.end.i22.i

if.then.i18.i:                                    ; preds = %for.body.i12.i
  %conv.i.i = sext i32 %94 to i64
  %extent.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i9.i, i32 1
  %95 = load i32, i32* %extent.i13.i, align 4, !tbaa !183
  %sub.i14.i = add nsw i32 %95, -1
  %conv7.i15.i = sext i32 %sub.i14.i to i64
  %mul.i16.i = mul nsw i64 %conv7.i15.i, %conv.i.i
  %add.i17.i = add nsw i64 %mul.i16.i, %index.018.i.i
  br label %if.end.i22.i

if.end.i22.i:                                     ; preds = %if.then.i18.i, %for.body.i12.i
  %index.1.i19.i = phi i64 [ %add.i17.i, %if.then.i18.i ], [ %index.018.i.i, %for.body.i12.i ]
  %indvars.iv.next.i20.i = add nuw nsw i64 %indvars.iv.i9.i, 1
  %exitcond.not.i21.i = icmp eq i64 %indvars.iv.next.i20.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i21.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i12.i, !llvm.loop !339

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i22.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i8.i = phi i64 [ 0, %if.end ], [ %index.1.i19.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i8.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !141
  %conv.i23.i = zext i8 %96 to i64
  %add.i24.i = add nuw nsw i64 %conv.i23.i, 7
  %div.i.i = lshr i64 %add.i24.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #18
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !178
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #19
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !178
  tail call void @halide_free(i8* %user_context, i8* %97) #18
  store i8* null, i8** %host, align 8, !tbaa !178
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #19
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #19
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !178
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #18
  store i8* null, i8** %host, align 8, !tbaa !178
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags.i.i, align 8, !tbaa !317
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = select i1 %cmp2.not, i1 true, i1 %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #18
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !316
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !340
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #18
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %10() #18
  %tobool.not = icmp eq i32 %call8, 0
  %. = select i1 %tobool.not, i32 0, i32 -16
  br label %cleanup12

cleanup12:                                        ; preds = %if.end5, %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ], [ %., %if.end5 ]
  ret i32 %retval.1
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !316
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !341
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %10() #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !247
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.34.108, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ], [ %spec.select, %do.end ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !247
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %3() #18
  store i64 %handle, i64* %device, align 8, !tbaa !247
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !316
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = select i1 %cmp5.not.i, i1 true, i1 %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = select i1 %cmp4.not.i, i1 true, i1 %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #18
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !247
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %7() #18
  store i64 0, i64* %device, align 8, !tbaa !247
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #19
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  ret i32 -39
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = select i1 %tobool1.not, i1 true, i1 %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #18
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !247
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #19
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !247
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !178
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread268

land.end.thread268:                               ; preds = %land.rhs
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i, align 8, !tbaa !317
  %and.i.i = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i241.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i241.phi.trans.insert, align 8, !tbaa !317
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread268
  %4 = phi i64 [ %3, %land.end.thread268 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread268 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i242 = and i64 %4, 2
  %cmp.i.i243.not = icmp eq i64 %and.i.i242, 0
  br i1 %cmp.i.i243.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !316
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not267 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !178
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = select i1 %tobool.not, i1 %cmp35.not, i1 false
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = select i1 %7, i1 true, i1 %tobool.not
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !342
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #18
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %13 = select i1 %cmp23.not267, i1 %cmp35.not, i1 false
  br i1 %13, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = select i1 %cmp20.not, i1 true, i1 %8
  br i1 %brmerge234, label %if.else, label %if.end117.thread262

if.end117.thread262:                              ; preds = %if.end58
  %14 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %14) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #19
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #19
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %14) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = select i1 %cmp20.not, i1 true, i1 %7
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %15 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !316
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %15, i64 0, i32 15
  %16 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !323
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %16, i64 0, i32 10
  %17 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !342
  %call72 = tail call i32 %17(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #18
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #19
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #19
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = select i1 %7, i1 true, i1 %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %18 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !316
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %18, i64 0, i32 15
  %19 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !323
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %19, i64 0, i32 10
  %20 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !342
  %call93 = tail call i32 %20(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #18
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i244 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %21 = load i64, i64* %flags.i.i244, align 8, !tbaa !317
  %or.i.sink.i = or i64 %21, 1
  store i64 %or.i.sink.i, i64* %flags.i.i244, align 8, !tbaa !317
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #19
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #19
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %22 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !323
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %22, i64 0, i32 10
  %23 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !342
  %call108 = tail call i32 %23(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #18
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread262
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i251 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %24 = load i64, i64* %flags.i.i251, align 8, !tbaa !317
  %or.i.sink.i253 = and i64 %24, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.sink.i250 = or i64 %or.i.sink.i253, 2
  store i64 %or.i.sink.i250, i64* %flags.i.i251, align 8, !tbaa !317
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i255 = or i64 %or.i.sink.i253, 1
  store i64 %and.i.i255, i64* %flags.i.i251, align 8, !tbaa !317
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %1() #18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !323
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !329
  tail call void %4() #18
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #19
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %6() #18
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !323
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !331
  tail call void %9() #18
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  ret i32 %call
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #18
  ret i32 -40
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #18
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !247
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !247
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #18
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !180
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !180
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #18
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !323
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !343
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #3 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !247
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !247
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #18
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !180
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !180
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #18
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !329
  tail call void %6() #18
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !323
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !344
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !247
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #18
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #3 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !247
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !345
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  store i64 0, i64* %device, align 8, !tbaa !247
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !323
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !331
  tail call void %5() #18
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !316
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #18
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #0 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = select i1 %cmp, i1 %cmp5, i1 false
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !346
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add nsw i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: mustprogress nounwind
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #0 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #19
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #18
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #18
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #18
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #18
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #18
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #18
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #18
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #18
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #18
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #18
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #18
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #18
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #18
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #18
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #18
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #3 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !76
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !76
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !314
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !141
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !315
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !314
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !141
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !315
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #18
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #18
  %call.i = call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i121 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i122 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i121, %entry.split ], [ %call.i122, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i15 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #18
  %call.i18 = call i8* @halide_type_to_string(i8* %call.i15, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #18
  %call.i21 = call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #18
  %call.i24 = call i8* @halide_type_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  call void @free(i8* %call.i) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #18
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #18
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #18
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #18
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #3 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #18
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #18
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #18
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #18
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #18
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #18
  br i1 %tobool.not.i, label %if.end17.sink.split, label %if.end17.sink.split.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !15
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #18
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #18
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #18
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #18
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #18
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #18
  br i1 %tobool.not.i56, label %if.end17.sink.split, label %if.end17.sink.split.sink.split

if.end17.sink.split.sink.split:                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %call.i86.sink = phi i8* [ %call.i47, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ %call.i86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62 ]
  %call.i53.sink152 = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ %call.i53, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62 ]
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86.sink to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53.sink152 to i64
  %sub.ptr.sub.i.i97 = add i64 %sub.ptr.lhs.cast.i.i95, 1
  %add.i.i98 = sub i64 %sub.ptr.sub.i.i97, %sub.ptr.rhs.cast.i.i96
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53.sink152, i64 %add.i.i98) #18
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.end17.sink.split.sink.split, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i101.sink = phi i8* [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62 ], [ %call.i53.sink152, %if.end17.sink.split.sink.split ]
  %call.i53.sink = phi i8* [ null, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ null, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62 ], [ %call.i53.sink152, %if.end17.sink.split.sink.split ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i101.sink) #18
  tail call void @free(i8* %call.i53.sink) #18
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #18
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #18
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #18
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #18
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #18
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #3 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #18
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #18
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #18
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #18
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #18
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #18
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #18
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #18
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #18
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #18
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #18
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #18
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #18
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #18
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #18
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #18
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #18
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #18
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #18
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #18
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #18
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -10
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #18
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #18
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #18
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #18
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #18
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #18
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #18
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #18
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #18
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #18
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #18
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #18
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #18
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #18
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #18
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #18
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #3 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #18
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #18
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #18
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #18
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #18
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #18
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #18
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #18
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #18
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #18
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %if.end, label %if.end.sink.split

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !15
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #18
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #18
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #18
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #18
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #18
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #18
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #18
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #18
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #18
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #18
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  br i1 %tobool.not.i104, label %if.end, label %if.end.sink.split

if.end.sink.split:                                ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %call.i153.sink = phi i8* [ %call.i95, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ %call.i153, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110 ]
  %call.i101.sink245 = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ %call.i101, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110 ]
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153.sink to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101.sink245 to i64
  %sub.ptr.sub.i.i164 = add i64 %sub.ptr.lhs.cast.i.i162, 1
  %add.i.i165 = sub i64 %sub.ptr.sub.i.i164, %sub.ptr.rhs.cast.i.i163
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101.sink245, i64 %add.i.i165) #18
  br label %if.end

if.end:                                           ; preds = %if.end.sink.split, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i168.sink = phi i8* [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110 ], [ %call.i101.sink245, %if.end.sink.split ]
  %call.i101.sink = phi i8* [ null, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ], [ null, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110 ], [ %call.i101.sink245, %if.end.sink.split ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i168.sink) #18
  tail call void @free(i8* %call.i101.sink) #18
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #18
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #18
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #18
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #18
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #18
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #18
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #18
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #18
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #18
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #18
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #18
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.thread, label %if.else.i

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.thread: ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #18
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #18
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #18
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.thread, %if.else.i
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.thread ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i317 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.then.i ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i317 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.then.i ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i317 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.then.i ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #18
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #18
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #18
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #18
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #18
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #18
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #18
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #18
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit, label %if.else.i

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i317 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  %.sink10.i = phi i8* [ %call.i, %if.else.i ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.then.i ]
  tail call void @halide_error(i8* %user_context, i8* nonnull %.sink10.i) #18
  tail call void @free(i8* %call.i) #18
  ret i32 -41
}

; Function Attrs: mustprogress nounwind
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !347
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !349
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #18
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !347
  store i32 -1, i32* %current_func, align 8, !tbaa !349
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #19
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #19
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #0 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #3 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #18
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  %p.0623 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !11
  %tobool.not624 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0623, null
  br i1 %tobool.not624, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %add.i.i = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #18
  ret void

for.body:                                         ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, %cleanup181
  %p.0626 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %cleanup181 ], [ %p.0623, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ]
  %sstr.sroa.19.0625 = phi i8* [ %sstr.sroa.19.15, %cleanup181 ], [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !350
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !352
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !353
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !354
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !355
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !15
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !353
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !354
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !355
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #18
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #18
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #18
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #18
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #18
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !356
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #18
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #18
  %12 = load i32, i32* %runs, align 8, !tbaa !352
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #18
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #18
  %13 = load i32, i32* %runs, align 8, !tbaa !352
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #18
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #18
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #18
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #18
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #18
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #18
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !357
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #18
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #18
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !358
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #18
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #18
  %16 = load i64, i64* %time, align 8, !tbaa !350
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !359
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !360
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !361
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !362

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %20 = load i64, i64* %stack_peak, align 8, !tbaa !363
  %tobool45.not = icmp eq i64 %20, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 9
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 7
  %21 = load i32, i32* %num_funcs54, align 8, !tbaa !360
  %cmp55620 = icmp sgt i32 %21, 0
  br i1 %cmp55620, label %for.body57, label %cleanup181

for.body57:                                       ; preds = %for.cond53.preheader, %cleanup172
  %indvars.iv629 = phi i64 [ %indvars.iv.next630, %cleanup172 ], [ 0, %for.cond53.preheader ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %22 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !361
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629
  %cmp62 = icmp eq i64 %indvars.iv629, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %23 = load i64, i64* %time63, align 8, !tbaa !365
  %cmp64 = icmp eq i64 %23, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #18
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 7
  %24 = load i8*, i8** %name68, align 8, !tbaa !366
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %24) #18
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i370, %while.body ], [ %call.i367, %if.end66 ]
  %call.i370 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i370 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !367

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i370, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %25 = load i64, i64* %time75, align 8, !tbaa !365
  %conv76 = uitofp i64 %25 to float
  %26 = load i32, i32* %runs, align 8, !tbaa !352
  %conv78 = sitofp i32 %26 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i373 = fpext float %div79 to double
  %call.i374 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i373, i32 0) #18
  %tobool.not.i376 = icmp eq i8* %call.i374, null
  br i1 %tobool.not.i376, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i379

if.then.i379:                                     ; preds = %while.end
  %add.ptr.i377 = getelementptr inbounds i8, i8* %call.i374, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i377, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i377
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i379, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i379 ]
  %call.i382 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i383595 = ptrtoint i8* %call.i382 to i64
  %sub.ptr.sub.i385596 = sub i64 %sub.ptr.lhs.cast.i383595, %sub.ptr.rhs.cast.i.i348
  %cmp85597 = icmp ult i64 %sub.ptr.sub.i385596, 35
  br i1 %cmp85597, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5598 = phi i8* [ %call.i388, %while.body86 ], [ %call.i382, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i388 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5598, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i383 = ptrtoint i8* %call.i388 to i64
  %sub.ptr.sub.i385 = sub i64 %sub.ptr.lhs.cast.i383, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i385, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !368

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i382, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i388, %while.body86 ]
  %27 = load i64, i64* %time, align 8, !tbaa !350
  %cmp90.not = icmp eq i64 %27, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %28 = load i64, i64* %time75, align 8, !tbaa !365
  %mul93 = mul i64 %28, 100
  %div95 = udiv i64 %mul93, %27
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i391 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #18
  %sext = shl i64 %percent.0, 32
  %conv.i394 = ashr exact i64 %sext, 32
  %call.i395 = tail call i8* @halide_int64_to_string(i8* %call.i391, i8* %sstr.sroa.125.0, i64 %conv.i394, i32 1) #18
  %call.i398 = tail call i8* @halide_string_to_string(i8* %call.i395, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i399600 = ptrtoint i8* %call.i398 to i64
  %sub.ptr.sub.i401601 = sub i64 %sub.ptr.lhs.cast.i399600, %sub.ptr.rhs.cast.i.i348
  %cmp104602 = icmp ult i64 %sub.ptr.sub.i401601, 43
  br i1 %cmp104602, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6603 = phi i8* [ %call.i404, %while.body105 ], [ %call.i398, %if.end97 ]
  %call.i404 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6603, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i399 = ptrtoint i8* %call.i404 to i64
  %sub.ptr.sub.i401 = sub i64 %sub.ptr.lhs.cast.i399, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i401, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !369

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i398, %if.end97 ], [ %call.i404, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 5
  %29 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !370
  %conv112 = uitofp i64 %29 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 6
  %30 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !371
  %conv114 = uitofp i64 %30 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i407 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #18
  %conv.i410 = fpext float %conv117 to double
  %call.i411 = tail call i8* @halide_double_to_string(i8* %call.i407, i8* %sstr.sroa.125.0, double %conv.i410, i32 0) #18
  %tobool.not.i413 = icmp eq i8* %call.i411, null
  br i1 %tobool.not.i413, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419, label %if.then.i418

if.then.i418:                                     ; preds = %if.then109
  %add.ptr.i414 = getelementptr inbounds i8, i8* %call.i411, i64 -3
  %cmp.i416 = icmp ult i8* %add.ptr.i414, %call.i
  %spec.store.select.i417 = select i1 %cmp.i416, i8* %call.i, i8* %add.ptr.i414
  store i8 0, i8* %spec.store.select.i417, align 1, !tbaa !15
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419: ; preds = %if.then.i418, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i417, %if.then.i418 ]
  %sub.ptr.lhs.cast.i420605 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i422606 = sub i64 %sub.ptr.lhs.cast.i420605, %sub.ptr.rhs.cast.i.i348
  %cmp123607 = icmp ult i64 %sub.ptr.sub.i422606, 58
  br i1 %cmp123607, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419, %while.body124
  %sstr.sroa.19.8608 = phi i8* [ %call.i425, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419 ]
  %call.i425 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8608, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i420 = ptrtoint i8* %call.i425 to i64
  %sub.ptr.sub.i422 = sub i64 %sub.ptr.lhs.cast.i420, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i422, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !372

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419 ], [ %call.i425, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 2
  %31 = load i64, i64* %memory_peak128, align 8, !tbaa !373
  %tobool129.not = icmp eq i64 %31, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i428 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #18
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !373
  %call.i431 = tail call i8* @halide_uint64_to_string(i8* %call.i428, i8* %sstr.sroa.125.0, i64 %32, i32 1) #18
  %sub.ptr.lhs.cast.i432610 = ptrtoint i8* %call.i431 to i64
  %sub.ptr.sub.i434611 = sub i64 %sub.ptr.lhs.cast.i432610, %sub.ptr.rhs.cast.i.i348
  %cmp137612 = icmp ult i64 %sub.ptr.sub.i434611, %cursor.0
  br i1 %cmp137612, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10613 = phi i8* [ %call.i437, %while.body138 ], [ %call.i431, %if.then130 ]
  %call.i437 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10613, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i432 = ptrtoint i8* %call.i437 to i64
  %sub.ptr.sub.i434 = sub i64 %sub.ptr.lhs.cast.i432, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i434, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !374

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i431, %if.then130 ], [ %call.i437, %while.body138 ]
  %call.i440 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #18
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 8
  %33 = load i32, i32* %num_allocs142, align 8, !tbaa !375
  %conv.i443 = sext i32 %33 to i64
  %call.i444 = tail call i8* @halide_int64_to_string(i8* %call.i440, i8* %sstr.sroa.125.0, i64 %conv.i443, i32 1) #18
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i445615 = ptrtoint i8* %call.i444 to i64
  %sub.ptr.sub.i447616 = sub i64 %sub.ptr.lhs.cast.i445615, %sub.ptr.rhs.cast.i.i348
  %cmp147617 = icmp ult i64 %sub.ptr.sub.i447616, %add144
  br i1 %cmp147617, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11618 = phi i8* [ %call.i450, %while.body148 ], [ %call.i444, %while.end140 ]
  %call.i450 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11618, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #18
  %sub.ptr.lhs.cast.i445 = ptrtoint i8* %call.i450 to i64
  %sub.ptr.sub.i447 = sub i64 %sub.ptr.lhs.cast.i445, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i447, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !376

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i444, %while.end140 ], [ %call.i450, %while.body148 ]
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !375
  %cmp152.not = icmp eq i32 %34, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 3
  %35 = load i64, i64* %memory_total154, align 8, !tbaa !377
  %conv156 = sext i32 %34 to i64
  %div157 = udiv i64 %35, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i453 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #18
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i456 = ashr exact i64 %sext586, 32
  %call.i457 = tail call i8* @halide_int64_to_string(i8* %call.i453, i8* %sstr.sroa.125.0, i64 %conv.i456, i32 1) #18
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i457, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %22, i64 %indvars.iv629, i32 4
  %36 = load i64, i64* %stack_peak163, align 8, !tbaa !363
  %cmp164.not = icmp eq i64 %36, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i460 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #18
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !363
  %call.i463 = tail call i8* @halide_uint64_to_string(i8* %call.i460, i8* %sstr.sroa.125.0, i64 %37, i32 1) #18
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i463, %if.then165 ]
  %call.i466 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #18
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit480, label %if.then.i478

if.then.i478:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i473 = ptrtoint i8* %call.i466 to i64
  %add.i.i476 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i473
  %call.i.i477 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i476) #18
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit480

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit480: ; preds = %if.then.i478, %if.end169
  %retval.0.i479 = phi i8* [ %call.i, %if.then.i478 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i479) #18
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit480, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i466, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit480 ]
  %indvars.iv.next630 = add nuw nsw i64 %indvars.iv629, 1
  %38 = load i32, i32* %num_funcs54, align 8, !tbaa !360
  %39 = sext i32 %38 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next630, %39
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !378

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0625, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0626, i64 0, i32 8
  %40 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %40, align 8, !tbaa !11
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !379
}

; Function Attrs: mustprogress nounwind
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !380
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !381
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !380
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !361
  tail call void @free(i8* %5) #18
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #18
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !380
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !382

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !383
  ret void
}

; Function Attrs: mustprogress nounwind
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0119 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !11
  %tobool.not120 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0119, null
  br i1 %tobool.not120, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0121 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0119, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0121, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !355
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0121, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !360
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0121, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !11
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !384

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #18
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !380
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !381
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !355
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !383
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !385
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !360
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !352
  %time = bitcast i8* %call4 to i64*
  store i64 0, i64* %time, align 8, !tbaa !350
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !356
  %memory_current = getelementptr inbounds i8, i8* %call4, i64 8
  %13 = bitcast i8* %memory_current to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %13, align 8, !tbaa !115
  %memory_total = getelementptr inbounds i8, i8* %call4, i64 24
  %14 = bitcast i8* %memory_total to i64*
  store i64 0, i64* %14, align 8, !tbaa !359
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %15 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %15, align 8, !tbaa !357
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %16 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8, !tbaa !115
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #18
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %17 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %17, align 8, !tbaa !361
  %tobool14.not = icmp eq i8* %call12, null
  %18 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18123 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18123, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %19 = icmp eq i32 %num_funcs, 1
  br i1 %19, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #18
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !365
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %20 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !115
  %21 = inttoptr i64 %20 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 7
  store i8* %21, i8** %name28.epil, align 8, !tbaa !366
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 1
  %22 = bitcast i64* %memory_current32.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !115
  %memory_total40.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 3
  store i64 0, i64* %memory_total40.epil, align 8, !tbaa !377
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !375
  %stack_peak.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 4
  %23 = bitcast i64* %stack_peak.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %23, align 8, !tbaa !115
  %active_threads_denominator55.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.unr, i32 6
  store i64 0, i64* %active_threads_denominator55.epil, align 8, !tbaa !371
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %24 = load i32, i32* %first_free_id, align 4, !tbaa !383
  %add = add nsw i32 %24, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !383
  store i8* %call4, i8** %4, align 8, !tbaa !380
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !365
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %25 = load i64, i64* %arrayidx24, align 8, !tbaa !115
  %26 = inttoptr i64 %25 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 7
  store i8* %26, i8** %name28, align 8, !tbaa !366
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 1
  %27 = bitcast i64* %memory_current32 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !115
  %memory_total40 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 3
  store i64 0, i64* %memory_total40, align 8, !tbaa !377
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !375
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 4
  %28 = bitcast i64* %stack_peak to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %28, align 8, !tbaa !115
  %active_threads_denominator55 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv, i32 6
  store i64 0, i64* %active_threads_denominator55, align 8, !tbaa !371
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !365
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %29 = load i64, i64* %arrayidx24.1, align 8, !tbaa !115
  %30 = inttoptr i64 %29 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 7
  store i8* %30, i8** %name28.1, align 8, !tbaa !366
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 1
  %31 = bitcast i64* %memory_current32.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !115
  %memory_total40.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 3
  store i64 0, i64* %memory_total40.1, align 8, !tbaa !377
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !375
  %stack_peak.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 4
  %32 = bitcast i64* %stack_peak.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %32, align 8, !tbaa !115
  %active_threads_denominator55.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %18, i64 %indvars.iv.next, i32 6
  store i64 0, i64* %active_threads_denominator55.1, align 8, !tbaa !371
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !386

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0121, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !11
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !385
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !360
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !381
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !381
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !381
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !380
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !361
  %idx.ext = sext i32 %func_id to i64
  %idx.ext10 = sext i32 %0 to i64
  %add.ptr11.idx = sub nsw i64 %idx.ext, %idx.ext10
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %add.ptr11.idx, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !365
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !365
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %add.ptr11.idx, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !115
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !115
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !350
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !350
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !356
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !356
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !115
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !115
  br label %cleanup25

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !11
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !387

cleanup25:                                        ; preds = %if.end23, %if.end, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !388
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #18
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !349
  store i32 %3, i32* %func, align 4, !tbaa !76
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !389
  store i32 %4, i32* %active_threads, align 4, !tbaa !76
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #18
  %5 = load i32, i32* %func, align 4, !tbaa !76
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !115
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !76
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #19
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !115
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !390
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #0 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #18
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = bitcast i64* %t to i8*
  %2 = load i32, i32* %current_func, align 8, !tbaa !349
  %cmp.not23 = icmp eq i32 %2, -2
  br i1 %cmp.not23, label %while.end8, label %while.body

while.body:                                       ; preds = %entry, %while.end
  %call1 = call i64 @halide_current_time_ns(i8* null) #18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i64 %call1, i64* %t, align 8, !tbaa !115
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #19
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #18
  call void @halide_sleep_ms(i8* null, i32 %call422) #18
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #18
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #19
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end, !llvm.loop !391

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !349
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !392

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #18
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #3 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #18
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !11
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !355
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !11
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !393

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #18
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #3 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #18
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !347
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #18
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #18
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !347
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #19
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #18
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !352
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !352
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !385
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #18
  ret i32 %retval.0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.186, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %1 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %2 = load i32, i32* %0, align 8, !tbaa !360
  %cmp118 = icmp sgt i32 %2, 0
  br i1 %cmp118, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %do.end, %for.inc
  %3 = phi i32 [ %9, %for.inc ], [ %2, %do.end ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %do.end ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !115
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %1, align 8, !tbaa !361
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !115
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst, align 8
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !394

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !360
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !395
}

; Function Attrs: mustprogress nounwind
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.1.187, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.2.188, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !360
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.3.189, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !361
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst, align 4
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst, align 8
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst, align 8
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !115
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst, align 8
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !394

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst, align 4
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst, align 8
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst, align 8
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !115
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst, align 8
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !394

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.4.190, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.5.191, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !360
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.6.192, i64 0, i64 0)) #18
  tail call void @abort() #18
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !361
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst, align 8
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst, align 8
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #3 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #18
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #18
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #3 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #19
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #18
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #19
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #18
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #0 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !349
  ret void
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #0 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #0 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #0 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #0 {
entry:
  ret i32 0
}

; Function Attrs: mustprogress nounwind
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #0 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #3 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #18
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !16, !range !18
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #18
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #18
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #18
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #18
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !115
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !115
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !115
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !115
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !115
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !115
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: mustprogress nounwind
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !11
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !11
  ret i32 (i32, i64*)* %0
}

; Function Attrs: mustprogress nounwind
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !11
  %call = tail call i32 %0(i32 %count, i64* %features) #18
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !115
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !76
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i, align 4, !tbaa !76
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !76
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !115
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !76
  %arrayidx1.i113 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i113, align 4, !tbaa !76
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i113, align 4, !tbaa !76
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i115 = or i64 %10, 64
  store i64 %or.i115, i64* %arrayidx3.i, align 8, !tbaa !115
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i115, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i121 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i121, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !115
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i123 = or i64 %spec.select130, 8796093022208
  store i64 %or.i123, i64* %arrayidx3.i, align 8, !tbaa !115
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !76
  %arrayidx1.i124 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i124, align 4, !tbaa !76
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !76
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !76
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i126 = or i64 %spec.select130, 26388279066624
  store i64 %or.i126, i64* %arrayidx3.i, align 8, !tbaa !115
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_use_jit_module() local_unnamed_addr #0 {
entry:
  ret void
}

; Function Attrs: mustprogress nounwind
define weak void @halide_release_jit_module() local_unnamed_addr #0 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur3x3(%struct.halide_buffer_t* noalias %input.buffer, %struct.halide_buffer_t* noalias %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %0 = alloca [8 x i32], align 4
  %1 = alloca [8 x i32], align 4
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep1505 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep1506 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep1507 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %2 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %2, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %3 = alloca [8 x i32], align 4
  %4 = alloca [8 x i32], align 4
  %.not = icmp eq %struct.halide_buffer_t* %input.buffer, null
  %5 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  br i1 %.not, label %"assert failed", label %"assert succeeded", !prof !396

"assert failed":                                  ; preds = %entry
  %6 = tail call i32 @halide_error_buffer_argument_is_null(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0)) #11
  br label %common.ret

"assert succeeded":                               ; preds = %entry
  %.not1637 = icmp eq %struct.halide_buffer_t* %blur_y.buffer, null
  br i1 %.not1637, label %"assert failed1", label %"assert succeeded2", !prof !396

common.ret:                                       ; preds = %call_destructor.exit.thread, %"assert failed", %"assert failed1", %pseudostack_free.exit2335, %call_destructor.exit, %assert_failed644, %assert_failed643, %assert_failed642, %assert_failed641, %assert_failed640, %assert_failed639, %assert_failed638, %assert_failed637, %assert_failed636, %assert_failed635, %assert_failed631, %assert_failed630, %assert_failed629, %assert_failed628, %assert_failed627, %assert_failed626, %assert_failed624, %assert_failed622, %assert_failed621, %assert_failed620, %assert_failed619, %assert_failed618, %assert_failed30, %assert_failed29, %assert_failed28, %assert_failed27, %assert_failed26, %assert_failed25, %assert_failed24, %assert_failed23, %assert_failed22, %assert_failed21, %assert_failed19, %assert_failed18, %assert_failed17, %assert_failed16, %assert_failed15, %assert_failed14, %assert_failed13, %assert_failed12, %assert_failed11, %assert_failed10, %assert_failed9, %assert_failed
  %common.ret.op = phi i32 [ %177, %assert_failed ], [ %178, %assert_failed9 ], [ %179, %assert_failed10 ], [ %180, %assert_failed11 ], [ %183, %assert_failed12 ], [ %186, %assert_failed13 ], [ %189, %assert_failed14 ], [ %190, %assert_failed15 ], [ %193, %assert_failed16 ], [ %194, %assert_failed17 ], [ %195, %assert_failed18 ], [ %196, %assert_failed19 ], [ %197, %assert_failed21 ], [ %198, %assert_failed22 ], [ %199, %assert_failed23 ], [ %200, %assert_failed24 ], [ %201, %assert_failed25 ], [ %202, %assert_failed26 ], [ %203, %assert_failed27 ], [ %204, %assert_failed28 ], [ %205, %assert_failed29 ], [ %206, %assert_failed30 ], [ %5573, %assert_failed618 ], [ %5574, %assert_failed619 ], [ %5575, %assert_failed620 ], [ %5576, %assert_failed621 ], [ %5579, %assert_failed622 ], [ %5582, %assert_failed624 ], [ %5585, %assert_failed626 ], [ %5586, %assert_failed627 ], [ %5589, %assert_failed628 ], [ %5590, %assert_failed629 ], [ %5591, %assert_failed630 ], [ %5592, %assert_failed631 ], [ %5593, %assert_failed635 ], [ %5594, %assert_failed636 ], [ %5595, %assert_failed637 ], [ %5596, %assert_failed638 ], [ %5597, %assert_failed639 ], [ %5598, %assert_failed640 ], [ %5599, %assert_failed641 ], [ %5600, %assert_failed642 ], [ %5601, %assert_failed643 ], [ %5602, %assert_failed644 ], [ %12, %call_destructor.exit ], [ %13, %pseudostack_free.exit2335 ], [ %17, %"assert failed1" ], [ %6, %"assert failed" ], [ %355, %call_destructor.exit.thread ]
  ret i32 %common.ret.op

destructor_block:                                 ; preds = %"produce blur_y645", %_halide_buffer_is_bounds_query.exit2261, %"assert failed710", %"assert failed657"
  %.0 = phi i8* [ %.2, %_halide_buffer_is_bounds_query.exit2261 ], [ %5633, %"assert failed710" ], [ %.2, %"assert failed657" ], [ %.2, %"produce blur_y645" ]
  %7 = phi i32 [ 0, %_halide_buffer_is_bounds_query.exit2261 ], [ %6494, %"assert failed710" ], [ %5751, %"assert failed657" ], [ 0, %"produce blur_y645" ]
  %tobool.not.i = icmp eq i8* %.22339, null
  br i1 %tobool.not.i, label %call_destructor.exit, label %if.then.i

if.then.i:                                        ; preds = %after_bb1497, %destructor_block
  %8 = phi i32 [ %7, %destructor_block ], [ 0, %after_bb1497 ]
  %.02352 = phi i8* [ %.0, %destructor_block ], [ %5633, %after_bb1497 ]
  %.023372351 = phi i8* [ %.22339, %destructor_block ], [ %5656, %after_bb1497 ]
  %ptr1.i = bitcast i8* %.023372351 to i8**
  %9 = load i8*, i8** %ptr1.i, align 8, !tbaa !397
  %tobool.not.i2319 = icmp eq i8* %9, null
  br i1 %tobool.not.i2319, label %pseudostack_free.exit, label %land.lhs.true.i2322

land.lhs.true.i2322:                              ; preds = %if.then.i
  %cumulative_size.i2320 = getelementptr inbounds i8, i8* %.023372351, i64 16
  %10 = bitcast i8* %cumulative_size.i2320 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !399
  %cmp.i2321 = icmp ugt i64 %11, 16384
  br i1 %cmp.i2321, label %if.then.i2323, label %pseudostack_free.exit

if.then.i2323:                                    ; preds = %land.lhs.true.i2322
  call void @halide_free(i8* null, i8* nonnull %9) #18
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i, %land.lhs.true.i2322, %if.then.i2323
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.023372351, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %destructor_block, %pseudostack_free.exit
  %12 = phi i32 [ %7, %destructor_block ], [ %8, %pseudostack_free.exit ]
  %.02345 = phi i8* [ %.0, %destructor_block ], [ %.02352, %pseudostack_free.exit ]
  %tobool.not.i2064 = icmp eq i8* %.02345, null
  br i1 %tobool.not.i2064, label %common.ret, label %if.then.i2065

if.then.i2065:                                    ; preds = %call_destructor.exit.thread2803, %call_destructor.exit
  %.023452806 = phi i8* [ %237, %call_destructor.exit.thread2803 ], [ %.02345, %call_destructor.exit ]
  %13 = phi i32 [ %1098, %call_destructor.exit.thread2803 ], [ %12, %call_destructor.exit ]
  %ptr1.i2326 = bitcast i8* %.023452806 to i8**
  %14 = load i8*, i8** %ptr1.i2326, align 8, !tbaa !397
  %tobool.not.i2327 = icmp eq i8* %14, null
  br i1 %tobool.not.i2327, label %pseudostack_free.exit2335, label %land.lhs.true.i2330

land.lhs.true.i2330:                              ; preds = %if.then.i2065
  %cumulative_size.i2328 = getelementptr inbounds i8, i8* %.023452806, i64 16
  %15 = bitcast i8* %cumulative_size.i2328 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !399
  %cmp.i2329 = icmp ugt i64 %16, 16384
  br i1 %cmp.i2329, label %if.then.i2331, label %pseudostack_free.exit2335

if.then.i2331:                                    ; preds = %land.lhs.true.i2330
  call void @halide_free(i8* null, i8* nonnull %14) #18
  br label %pseudostack_free.exit2335

pseudostack_free.exit2335:                        ; preds = %if.then.i2065, %land.lhs.true.i2330, %if.then.i2331
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %.023452806, i8 0, i64 24, i1 false)
  br label %common.ret

"assert failed1":                                 ; preds = %"assert succeeded"
  %17 = tail call i32 @halide_error_buffer_argument_is_null(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0)) #11
  br label %common.ret

"assert succeeded2":                              ; preds = %"assert succeeded"
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %18 = load i8*, i8** %host.i, align 8, !tbaa !178
  %code.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 4, i32 0
  %19 = load i8, i8* %code.i.i, align 2, !tbaa !314
  %conv.i.i = zext i8 %19 to i32
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 4, i32 1
  %20 = load i8, i8* %bits.i.i, align 1, !tbaa !141
  %conv3.i.i = zext i8 %20 to i32
  %shl.i.i = shl nuw nsw i32 %conv3.i.i, 8
  %or.i.i = or i32 %shl.i.i, %conv.i.i
  %lanes.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 4, i32 2
  %21 = load i16, i16* %lanes.i.i, align 2, !tbaa !315
  %conv4.i.i = zext i16 %21 to i32
  %shl5.i.i = shl nuw i32 %conv4.i.i, 16
  %or6.i.i = or i32 %or.i.i, %shl5.i.i
  %flags.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 3
  %22 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %dimensions.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 5
  %23 = load i32, i32* %dimensions.i, align 4, !tbaa !180
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !181
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 0, i32 0
  %25 = load i32, i32* %min.i, align 4, !tbaa !186
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 0, i32 1
  %26 = load i32, i32* %extent.i, align 4, !tbaa !183
  %stride.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 0, i32 2
  %27 = load i32, i32* %stride.i, align 4, !tbaa !187
  %min.i2070 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 1, i32 0
  %28 = load i32, i32* %min.i2070, align 4, !tbaa !186
  %extent.i2072 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 1, i32 1
  %29 = load i32, i32* %extent.i2072, align 4, !tbaa !183
  %stride.i2074 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 1, i32 2
  %30 = load i32, i32* %stride.i2074, align 4, !tbaa !187
  %host.i2075 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %31 = load i8*, i8** %host.i2075, align 8, !tbaa !178
  %code.i.i2076 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 4, i32 0
  %32 = load i8, i8* %code.i.i2076, align 2, !tbaa !314
  %conv.i.i2077 = zext i8 %32 to i32
  %bits.i.i2078 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 4, i32 1
  %33 = load i8, i8* %bits.i.i2078, align 1, !tbaa !141
  %conv3.i.i2079 = zext i8 %33 to i32
  %shl.i.i2080 = shl nuw nsw i32 %conv3.i.i2079, 8
  %or.i.i2081 = or i32 %shl.i.i2080, %conv.i.i2077
  %lanes.i.i2082 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 4, i32 2
  %34 = load i16, i16* %lanes.i.i2082, align 2, !tbaa !315
  %conv4.i.i2083 = zext i16 %34 to i32
  %shl5.i.i2084 = shl nuw i32 %conv4.i.i2083, 16
  %or6.i.i2085 = or i32 %or.i.i2081, %shl5.i.i2084
  %flags.i.i.i2086 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 3
  %35 = load i64, i64* %flags.i.i.i2086, align 8, !tbaa !317
  %dimensions.i2089 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 5
  %36 = load i32, i32* %dimensions.i2089, align 4, !tbaa !180
  %dim.i2090 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %37 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2090, align 8, !tbaa !181
  %min.i2091 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %37, i64 0, i32 0
  %38 = load i32, i32* %min.i2091, align 4, !tbaa !186
  %extent.i2093 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %37, i64 0, i32 1
  %39 = load i32, i32* %extent.i2093, align 4, !tbaa !183
  %stride.i2095 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %37, i64 0, i32 2
  %40 = load i32, i32* %stride.i2095, align 4, !tbaa !187
  %min.i2097 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %37, i64 1, i32 0
  %41 = load i32, i32* %min.i2097, align 4, !tbaa !186
  %extent.i2099 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %37, i64 1, i32 1
  %42 = load i32, i32* %extent.i2099, align 4, !tbaa !183
  %stride.i2101 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %37, i64 1, i32 2
  %43 = load i32, i32* %stride.i2101, align 4, !tbaa !187
  %44 = icmp slt i32 %26, 32
  %t1098 = select i1 %44, i32 %26, i32 32
  %b4 = add nsw i32 %39, %38
  %a3 = add nsw i32 %26, 2
  %45 = icmp sgt i32 %26, 32
  %46 = select i1 %45, i32 %26, i32 32
  %47 = add nuw nsw i32 %46, 1
  %48 = and i32 %47, 2147483616
  %b5 = add nsw i32 %48, %t1098
  %49 = icmp sgt i32 %b5, %a3
  %50 = select i1 %49, i32 %a3, i32 %b5
  %a2 = add nsw i32 %50, %25
  %51 = icmp sgt i32 %b4, %a2
  %a1 = select i1 %51, i32 %a2, i32 %b4
  %b3 = add nsw i32 %38, 1
  %52 = icmp sgt i32 %a1, %b3
  %53 = select i1 %52, i32 %a1, i32 %b3
  %a6 = add nsw i32 %t1098, %25
  %b8 = add nsw i32 %b4, 31
  %54 = icmp sgt i32 %b8, %a6
  %55 = select i1 %54, i32 %a6, i32 %b8
  %a5 = add nsw i32 %55, -32
  %56 = icmp sgt i32 %a5, %38
  %57 = select i1 %56, i32 %a5, i32 %38
  %input.extent.0.required = sub nsw i32 %53, %57
  %b13 = add nsw i32 %42, %41
  %58 = add nsw i32 %29, %28
  %a11 = add nsw i32 %58, 2
  %59 = icmp sgt i32 %b13, %a11
  %a10 = select i1 %59, i32 %a11, i32 %b13
  %b12 = add nsw i32 %41, 1
  %60 = icmp sgt i32 %a10, %b12
  %61 = select i1 %60, i32 %a10, i32 %b12
  %62 = icmp slt i32 %29, 32
  %63 = select i1 %62, i32 %29, i32 32
  %a13 = add nsw i32 %63, %28
  %b15 = add nsw i32 %b13, 31
  %64 = icmp sgt i32 %b15, %a13
  %65 = select i1 %64, i32 %a13, i32 %b15
  %a12 = add nsw i32 %65, -32
  %66 = icmp sgt i32 %a12, %41
  %67 = select i1 %66, i32 %a12, i32 %41
  %input.extent.1.required = sub nsw i32 %61, %67
  %cmp.i = icmp eq i8* %18, null
  br i1 %cmp.i, label %_halide_buffer_is_bounds_query.exit, label %after_bb

_halide_buffer_is_bounds_query.exit:              ; preds = %"assert succeeded2"
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 0
  %68 = load i64, i64* %device.i, align 8, !tbaa !247
  %cmp1.i = icmp eq i64 %68, 0
  br i1 %cmp1.i, label %_halide_buffer_init.exit, label %after_bb

after_bb:                                         ; preds = %"assert succeeded2", %_halide_buffer_is_bounds_query.exit, %_halide_buffer_init.exit
  %69 = phi i8* [ %31, %"assert succeeded2" ], [ %31, %_halide_buffer_is_bounds_query.exit ], [ %.pre, %_halide_buffer_init.exit ]
  %cmp.i2104 = icmp eq i8* %69, null
  br i1 %cmp.i2104, label %_halide_buffer_is_bounds_query.exit2108, label %after_bb3

_halide_buffer_is_bounds_query.exit2108:          ; preds = %after_bb
  %device.i2105 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 0
  %70 = load i64, i64* %device.i2105, align 8, !tbaa !247
  %cmp1.i2106 = icmp eq i64 %70, 0
  br i1 %cmp1.i2106, label %_halide_buffer_init.exit2142, label %after_bb3

_halide_buffer_init.exit:                         ; preds = %_halide_buffer_is_bounds_query.exit
  %71 = add nsw i32 %a6, -32
  %72 = add nsw i32 %a13, -32
  %73 = icmp sgt i32 %29, 32
  %74 = select i1 %73, i32 %29, i32 32
  %75 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0
  store i32 %71, i32* %75, align 4
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1
  store i32 %46, i32* %76, align 4
  %77 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 2
  store i32 1, i32* %77, align 4
  %78 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 3
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 4
  store i32 %72, i32* %79, align 4
  %80 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5
  store i32 %74, i32* %80, align 4
  %81 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6
  store i32 %46, i32* %81, align 4
  %82 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 7
  store i32 0, i32* %82, align 4
  %83 = bitcast %struct.halide_buffer_t* %blur_y.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %83, i8 0, i64 24, i1 false)
  store i8 1, i8* %code.i.i, align 8, !tbaa !400
  store i8 16, i8* %bits.i.i, align 1, !tbaa !401
  store i16 1, i16* %lanes.i.i, align 2, !tbaa !402
  store i32 2, i32* %dimensions.i, align 4, !tbaa !180
  %84 = bitcast %struct.halide_dimension_t* %24 to i8*
  %85 = bitcast [8 x i32]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %84, i8* noundef nonnull align 4 dereferenceable(16) %85, i64 16, i1 false) #11, !tbaa.struct !182
  %.pre.i = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !181
  %arrayidx.i = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 4
  %arrayidx12.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i, i64 1
  %86 = bitcast %struct.halide_dimension_t* %arrayidx12.i to i8*
  %87 = bitcast i32* %arrayidx.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %86, i8* noundef nonnull align 4 dereferenceable(16) %87, i64 16, i1 false) #11, !tbaa.struct !182
  store i64 0, i64* %flags.i.i.i, align 8, !tbaa !317
  %.pre = load i8*, i8** %host.i2075, align 8, !tbaa !178
  br label %after_bb

after_bb3:                                        ; preds = %after_bb, %_halide_buffer_is_bounds_query.exit2108, %_halide_buffer_init.exit2142
  %88 = load i8*, i8** %host.i, align 8, !tbaa !178
  %cmp.i2112 = icmp eq i8* %88, null
  br i1 %cmp.i2112, label %land.rhs.i2115, label %_halide_buffer_is_bounds_query.exit2116

land.rhs.i2115:                                   ; preds = %after_bb3
  %device.i2113 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 0
  %89 = load i64, i64* %device.i2113, align 8, !tbaa !247
  %cmp1.i2114 = icmp eq i64 %89, 0
  br label %_halide_buffer_is_bounds_query.exit2116

_halide_buffer_is_bounds_query.exit2116:          ; preds = %after_bb3, %land.rhs.i2115
  %90 = phi i1 [ false, %after_bb3 ], [ %cmp1.i2114, %land.rhs.i2115 ]
  %91 = load i8*, i8** %host.i2075, align 8, !tbaa !178
  %cmp.i2118 = icmp eq i8* %91, null
  br i1 %cmp.i2118, label %land.rhs.i2121, label %_halide_buffer_is_bounds_query.exit2122

land.rhs.i2121:                                   ; preds = %_halide_buffer_is_bounds_query.exit2116
  %device.i2119 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 0
  %92 = load i64, i64* %device.i2119, align 8, !tbaa !247
  %cmp1.i2120 = icmp eq i64 %92, 0
  br label %_halide_buffer_is_bounds_query.exit2122

_halide_buffer_is_bounds_query.exit2122:          ; preds = %_halide_buffer_is_bounds_query.exit2116, %land.rhs.i2121
  %93 = phi i1 [ false, %_halide_buffer_is_bounds_query.exit2116 ], [ %cmp1.i2120, %land.rhs.i2121 ]
  %94 = or i1 %90, %93
  br i1 %94, label %"assert succeeded585", label %then_bb7

_halide_buffer_init.exit2142:                     ; preds = %_halide_buffer_is_bounds_query.exit2108
  %95 = bitcast %struct.halide_dimension_t** %dim.i2090 to i8**
  %96 = load i8*, i8** %95, align 8, !tbaa !181
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  store i32 %57, i32* %97, align 4
  %98 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  store i32 %input.extent.0.required, i32* %98, align 4
  %99 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2
  store i32 1, i32* %99, align 4
  %100 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3
  store i32 0, i32* %100, align 4
  %101 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 4
  store i32 %67, i32* %101, align 4
  %102 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 5
  store i32 %input.extent.1.required, i32* %102, align 4
  %103 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 6
  store i32 %input.extent.0.required, i32* %103, align 4
  %104 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 7
  store i32 0, i32* %104, align 4
  %105 = bitcast %struct.halide_buffer_t* %input.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %105, i8 0, i64 24, i1 false)
  store i8 1, i8* %code.i.i2076, align 8, !tbaa !400
  store i8 16, i8* %bits.i.i2078, align 1, !tbaa !401
  store i16 1, i16* %lanes.i.i2082, align 2, !tbaa !402
  store i32 2, i32* %dimensions.i2089, align 4, !tbaa !180
  %106 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %96, i8* noundef nonnull align 4 dereferenceable(16) %106, i64 16, i1 false) #11, !tbaa.struct !182
  %.pre.i2135 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2090, align 8, !tbaa !181
  %arrayidx.i2136 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 4
  %arrayidx12.i2137 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i2135, i64 1
  %107 = bitcast %struct.halide_dimension_t* %arrayidx12.i2137 to i8*
  %108 = bitcast i32* %arrayidx.i2136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %107, i8* noundef nonnull align 4 dereferenceable(16) %108, i64 16, i1 false) #11, !tbaa.struct !182
  store i64 0, i64* %flags.i.i.i2086, align 8, !tbaa !317
  br label %after_bb3

then_bb7:                                         ; preds = %_halide_buffer_is_bounds_query.exit2122
  %109 = icmp ne i32 %or6.i.i, 69633
  %110 = zext i1 %109 to i64
  %.not1850 = icmp eq i32 %23, 2
  %.not1851 = icmp eq i32 %or6.i.i2085, 69633
  %111 = select i1 %.not1851, i64 0, i64 4
  %.not1852 = icmp eq i32 %36, 2
  %112 = select i1 %.not1852, i64 0, i64 8
  %113 = select i1 %44, i64 16, i64 0
  %114 = select i1 %62, i64 32, i64 0
  %115 = icmp sgt i32 %53, %b4
  %116 = select i1 %115, i64 64, i64 0
  %117 = lshr i32 %39, 24
  %118 = and i32 %117, 128
  %119 = zext i32 %118 to i64
  %120 = icmp sgt i32 %61, %b13
  %121 = select i1 %120, i64 256, i64 0
  %122 = lshr i32 %42, 22
  %123 = and i32 %122, 512
  %124 = zext i32 %123 to i64
  %.not1853 = icmp eq i32 %27, 1
  %125 = select i1 %.not1853, i64 0, i64 1024
  %.not1854 = icmp eq i32 %40, 1
  %126 = select i1 %.not1854, i64 0, i64 2048
  %127 = select i1 %.not1850, i64 -9223372036854775808, i64 -9223372036854775806
  %128 = or i64 %127, %110
  %129 = or i64 %128, %113
  %130 = or i64 %129, %125
  %131 = or i64 %130, %114
  %132 = or i64 %131, %112
  %133 = or i64 %132, %111
  %134 = or i64 %133, %119
  %135 = or i64 %134, %126
  %136 = or i64 %135, %124
  %137 = or i64 %136, %116
  %138 = or i64 %137, %121
  %139 = tail call i64 @llvm.cttz.i64(i64 %138, i1 true), !range !403
  %140 = trunc i64 %139 to i32
  switch i32 %140, label %no_errors_bb [
    i32 0, label %assert_failed
    i32 1, label %assert_failed9
    i32 2, label %assert_failed10
    i32 3, label %assert_failed11
    i32 4, label %assert_failed12
    i32 5, label %assert_failed13
    i32 6, label %assert_failed14
    i32 7, label %assert_failed15
    i32 8, label %assert_failed16
    i32 9, label %assert_failed17
    i32 10, label %assert_failed18
    i32 11, label %assert_failed19
  ], !prof !404

no_errors_bb:                                     ; preds = %then_bb7
  %141 = sext i32 %29 to i64
  %142 = sext i32 %26 to i64
  %blur_y.total_extent.1 = mul nsw i64 %141, %142
  %143 = sext i32 %42 to i64
  %144 = sext i32 %39 to i64
  %input.total_extent.1 = mul nsw i64 %143, %144
  %a84.lobit = lshr i32 %26, 31
  %145 = zext i32 %a84.lobit to i64
  %146 = sext i32 %30 to i64
  %x4 = mul nsw i64 %146, %141
  %147 = tail call i64 @llvm.abs.i64(i64 %x4, i1 true)
  %148 = icmp ugt i64 %147, 2147483647
  %149 = select i1 %148, i64 2, i64 0
  %150 = icmp sgt i64 %blur_y.total_extent.1, 2147483647
  %151 = select i1 %150, i64 4, i64 0
  %152 = lshr i32 %39, 28
  %153 = and i32 %152, 8
  %154 = zext i32 %153 to i64
  %155 = sext i32 %43 to i64
  %x5 = mul nsw i64 %155, %143
  %156 = tail call i64 @llvm.abs.i64(i64 %x5, i1 true)
  %157 = icmp ugt i64 %156, 2147483647
  %158 = select i1 %157, i64 16, i64 0
  %159 = icmp sgt i64 %input.total_extent.1, 2147483647
  %160 = select i1 %159, i64 32, i64 0
  %and.i.i.i = shl i64 %22, 5
  %161 = and i64 %and.i.i.i, 64
  %and.i.i.i2087 = shl i64 %35, 6
  %162 = and i64 %and.i.i.i2087, 128
  %163 = icmp eq i8* %31, null
  %164 = select i1 %163, i64 512, i64 0
  %165 = select i1 %cmp.i, i64 -9223372036854775552, i64 -9223372036854775808
  %166 = or i64 %165, %161
  %167 = or i64 %166, %145
  %168 = or i64 %167, %151
  %169 = or i64 %168, %164
  %170 = or i64 %169, %149
  %171 = or i64 %170, %162
  %172 = or i64 %171, %154
  %173 = or i64 %172, %160
  %174 = or i64 %173, %158
  %175 = tail call i64 @llvm.cttz.i64(i64 %174, i1 true), !range !403
  %176 = trunc i64 %175 to i32
  switch i32 %176, label %"produce blur_y" [
    i32 0, label %assert_failed21
    i32 1, label %assert_failed22
    i32 2, label %assert_failed23
    i32 3, label %assert_failed24
    i32 4, label %assert_failed25
    i32 5, label %assert_failed26
    i32 6, label %assert_failed27
    i32 7, label %assert_failed28
    i32 8, label %assert_failed29
    i32 9, label %assert_failed30
  ], !prof !405

assert_failed:                                    ; preds = %then_bb7
  %177 = tail call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 %or6.i.i, i32 69633) #11
  br label %common.ret

assert_failed9:                                   ; preds = %then_bb7
  %178 = tail call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 %23, i32 2) #11
  br label %common.ret

assert_failed10:                                  ; preds = %then_bb7
  %179 = tail call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 %or6.i.i2085, i32 69633) #11
  br label %common.ret

assert_failed11:                                  ; preds = %then_bb7
  %180 = tail call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 %36, i32 2) #11
  br label %common.ret

assert_failed12:                                  ; preds = %then_bb7
  %181 = add nsw i32 %a6, -32
  %t1102 = add i32 %26, -1
  %182 = add i32 %t1102, %25
  %183 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 0, i32 %181, i32 %182, i32 %25, i32 %182) #11
  br label %common.ret

assert_failed13:                                  ; preds = %then_bb7
  %184 = add nsw i32 %a13, -32
  %185 = add nsw i32 %58, -1
  %186 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 1, i32 %184, i32 %185, i32 %28, i32 %185) #11
  br label %common.ret

assert_failed14:                                  ; preds = %then_bb7
  %187 = add nsw i32 %53, -1
  %188 = add nsw i32 %b4, -1
  %189 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 0, i32 %57, i32 %187, i32 %38, i32 %188) #11
  br label %common.ret

assert_failed15:                                  ; preds = %then_bb7
  %190 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 0, i32 %39) #11
  br label %common.ret

assert_failed16:                                  ; preds = %then_bb7
  %191 = add nsw i32 %61, -1
  %192 = add nsw i32 %b13, -1
  %193 = tail call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 1, i32 %67, i32 %191, i32 %41, i32 %192) #11
  br label %common.ret

assert_failed17:                                  ; preds = %then_bb7
  %194 = tail call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 1, i32 %42) #11
  br label %common.ret

assert_failed18:                                  ; preds = %then_bb7
  %195 = tail call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.205, i64 0, i64 0), i32 %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #11
  br label %common.ret

assert_failed19:                                  ; preds = %then_bb7
  %196 = tail call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.207, i64 0, i64 0), i32 %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #11
  br label %common.ret

assert_failed21:                                  ; preds = %no_errors_bb
  %197 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0), i64 %142, i64 2147483647) #11
  br label %common.ret

assert_failed22:                                  ; preds = %no_errors_bb
  %198 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0), i64 %147, i64 2147483647) #11
  br label %common.ret

assert_failed23:                                  ; preds = %no_errors_bb
  %199 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0), i64 %blur_y.total_extent.1, i64 2147483647) #11
  br label %common.ret

assert_failed24:                                  ; preds = %no_errors_bb
  %200 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0), i64 %144, i64 2147483647) #11
  br label %common.ret

assert_failed25:                                  ; preds = %no_errors_bb
  %201 = tail call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0), i64 %156, i64 2147483647) #11
  br label %common.ret

assert_failed26:                                  ; preds = %no_errors_bb
  %202 = tail call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0), i64 %input.total_extent.1, i64 2147483647) #11
  br label %common.ret

assert_failed27:                                  ; preds = %no_errors_bb
  %203 = tail call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0)) #11
  br label %common.ret

assert_failed28:                                  ; preds = %no_errors_bb
  %204 = tail call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0)) #11
  br label %common.ret

assert_failed29:                                  ; preds = %no_errors_bb
  %205 = tail call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0)) #11
  br label %common.ret

assert_failed30:                                  ; preds = %no_errors_bb
  %206 = tail call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0)) #11
  br label %common.ret

"produce blur_y":                                 ; preds = %no_errors_bb
  %t903 = mul nsw i32 %30, %28
  %b120 = and i32 %26, -32
  %b34 = add nsw i32 %26, 33
  %b26 = ashr i32 %b34, 5
  %b37 = add nsw i32 %26, -32
  %207 = sub i32 31, %25
  %208 = add i32 %207, %38
  %a25 = ashr i32 %208, 5
  %209 = icmp sgt i32 %a25, 0
  %a24 = select i1 %209, i32 %a25, i32 0
  %210 = icmp sgt i32 %b26, %a24
  %b33 = select i1 %210, i32 %a24, i32 %b26
  %b35 = sub nsw i32 %b4, %25
  %211 = add nsw i32 %26, -1
  %212 = and i32 %211, -32
  %a26 = select i1 %45, i32 %212, i32 %b37
  %213 = icmp sgt i32 %a26, %b37
  %214 = select i1 %213, i32 %a26, i32 %b37
  %215 = add nsw i32 %46, -1
  %216 = and i32 %215, -32
  %b32 = add nsw i32 %214, %216
  %a29 = add nsw i32 %b32, 32
  %217 = icmp sgt i32 %26, %a29
  %a28 = select i1 %217, i32 %a29, i32 %26
  %218 = icmp sgt i32 %b32, %b37
  %219 = select i1 %218, i32 %b37, i32 %b32
  %b30 = add nsw i32 %219, 33
  %220 = icmp sgt i32 %a28, %b30
  %a27 = select i1 %220, i32 %a28, i32 %b30
  %b29 = add nsw i32 %26, 1
  %221 = icmp sgt i32 %a27, %b29
  %222 = select i1 %221, i32 %a27, i32 %b29
  %a40 = add nsw i32 %222, 1
  %223 = and i32 %26, 31
  %.not1855 = icmp eq i32 %223, 0
  %a34 = add nsw i32 %b35, 29
  %224 = icmp sgt i32 %26, %a34
  %225 = select i1 %224, i32 %a34, i32 %26
  %a33 = add nsw i32 %225, 2
  %226 = icmp sgt i32 %b35, %a33
  %a32 = select i1 %226, i32 %a33, i32 %b35
  %227 = icmp sgt i32 %b34, %a32
  %228 = select i1 %227, i32 %a32, i32 %b34
  %a31 = ashr i32 %228, 5
  %229 = icmp sgt i32 %a31, %b33
  %t892 = select i1 %229, i32 %a31, i32 %b33
  %230 = icmp sgt i32 %b37, %b120
  %a118 = select i1 %230, i32 %b120, i32 %b37
  %231 = add nsw i32 %29, 31
  %t884 = ashr i32 %231, 5
  %232 = icmp sgt i32 %29, 0
  br i1 %232, label %"for blur_y.s0.y.y.preheader", label %"assert succeeded585", !prof !406

"for blur_y.s0.y.y.preheader":                    ; preds = %"produce blur_y"
  %b38 = add nsw i32 %29, -32
  %.inv1856 = icmp slt i32 %222, 0
  %233 = select i1 %.inv1856, i32 0, i32 %a40
  %t1106 = zext i32 %233 to i64
  %234 = mul nuw nsw i64 %t1106, 68
  %235 = icmp ult i64 %234, 2147483648
  %236 = add nuw nsw i64 %234, 6
  %237 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %238 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %239 = sub i32 %28, %41
  %b52 = add nsw i32 %42, -1
  %240 = icmp sgt i32 %26, -2
  %b53 = add nsw i32 %26, -30
  %241 = add nsw i32 %b4, -1
  %242 = insertelement <32 x i32> undef, i32 %241, i32 0
  %243 = shufflevector <32 x i32> %242, <32 x i32> undef, <16 x i32> zeroinitializer
  %244 = insertelement <32 x i32> undef, i32 %38, i32 0
  %245 = shufflevector <32 x i32> %244, <32 x i32> undef, <16 x i32> zeroinitializer
  %246 = bitcast i8* %31 to i16*
  %t922 = sub nsw i32 %b26, %t892
  %247 = icmp sgt i32 %b33, 0
  %248 = sext i32 %41 to i64
  %249 = sext i32 %28 to i64
  %250 = sext i32 %a40 to i64
  %t928 = sub nsw i32 %t892, %b33
  %251 = icmp sgt i32 %t928, 0
  %252 = icmp sgt i32 %t922, 0
  %253 = sub nsw i32 %28, %b13
  %254 = sext i32 %b13 to i64
  %255 = icmp sgt i32 %26, 0
  %256 = select i1 %255, i32 %26, i32 0
  %t1107 = zext i32 %256 to i64
  %257 = icmp ult i32 %256, 268435456
  %258 = shl nuw nsw i64 %t1107, 3
  %259 = or i64 %258, 6
  %260 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  %261 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %262 = icmp sgt i32 %26, 63
  %263 = sext i32 %a118 to i64
  %264 = shl nsw i32 %a40, 1
  %a40.neg = xor i32 %222, -1
  %265 = add i32 %a118, %a40.neg
  %t575 = add i32 %265, %264
  %266 = sext i32 %t575 to i64
  %267 = shl nsw i64 %250, 1
  %268 = bitcast i8* %18 to i16*
  %t944 = sub nsw i32 0, %t903
  %269 = sext i32 %t944 to i64
  %t785 = add nsw i32 %264, %a118
  %270 = sext i32 %t785 to i64
  %271 = sext i32 %t903 to i64
  %272 = sub nsw i64 %263, %271
  %273 = mul nsw i64 %250, 3
  %t946 = mul nsw i32 %a40, 3
  %274 = add i32 %a40, %a118
  %t584 = add i32 %274, %264
  %275 = sext i32 %t584 to i64
  %276 = shl nsw i64 %250, 2
  %277 = shl nsw i32 %a40, 2
  %t589 = add nsw i32 %277, %a118
  %278 = sext i32 %t589 to i64
  %279 = mul nsw i64 %250, 5
  %t956 = mul nsw i32 %a40, 5
  %t594 = add nsw i32 %t956, %a118
  %280 = sext i32 %t594 to i64
  %281 = mul nsw i64 %250, 6
  %282 = mul nsw i32 %a40, 6
  %t599 = add nsw i32 %282, %a118
  %283 = sext i32 %t599 to i64
  %284 = mul nsw i64 %250, 7
  %t965 = mul nsw i32 %a40, 7
  %t604 = add nsw i32 %t965, %a118
  %285 = sext i32 %t604 to i64
  %286 = shl nsw i64 %250, 3
  %t970 = shl nsw i32 %a40, 3
  %t609 = add nsw i32 %t970, %a118
  %287 = sext i32 %t609 to i64
  %288 = mul nsw i64 %250, 9
  %t975 = mul nsw i32 %a40, 9
  %t614 = add nsw i32 %t975, %a118
  %289 = sext i32 %t614 to i64
  %290 = mul nsw i64 %250, 10
  %291 = mul nsw i32 %a40, 10
  %t619 = add nsw i32 %291, %a118
  %292 = sext i32 %t619 to i64
  %293 = mul nsw i64 %250, 11
  %t984 = mul nsw i32 %a40, 11
  %t624 = add nsw i32 %t984, %a118
  %294 = sext i32 %t624 to i64
  %295 = mul nsw i64 %250, 12
  %t989 = mul nsw i32 %a40, 12
  %t629 = add nsw i32 %t989, %a118
  %296 = sext i32 %t629 to i64
  %297 = mul nsw i64 %250, 13
  %t994 = mul nsw i32 %a40, 13
  %t634 = add nsw i32 %t994, %a118
  %298 = sext i32 %t634 to i64
  %299 = mul nsw i64 %250, 14
  %t999 = mul nsw i32 %a40, 14
  %t639 = add nsw i32 %t999, %a118
  %300 = sext i32 %t639 to i64
  %301 = mul nsw i64 %250, 15
  %t1004 = mul nsw i32 %a40, 15
  %t644 = add nsw i32 %t1004, %a118
  %302 = sext i32 %t644 to i64
  %303 = shl nsw i64 %250, 4
  %t1009 = shl nsw i32 %a40, 4
  %t649 = add nsw i32 %t1009, %a118
  %304 = sext i32 %t649 to i64
  %305 = mul nsw i64 %250, 17
  %t1014 = mul nsw i32 %a40, 17
  %t654 = add nsw i32 %t1014, %a118
  %306 = sext i32 %t654 to i64
  %307 = mul nsw i64 %250, 18
  %308 = mul nsw i32 %a40, 18
  %t659 = add nsw i32 %308, %a118
  %309 = sext i32 %t659 to i64
  %310 = mul nsw i64 %250, 19
  %t1023 = mul nsw i32 %a40, 19
  %t664 = add nsw i32 %t1023, %a118
  %311 = sext i32 %t664 to i64
  %312 = mul nsw i64 %250, 20
  %t1028 = mul nsw i32 %a40, 20
  %t669 = add nsw i32 %t1028, %a118
  %313 = sext i32 %t669 to i64
  %314 = mul nsw i64 %250, 21
  %t1033 = mul nsw i32 %a40, 21
  %t674 = add nsw i32 %t1033, %a118
  %315 = sext i32 %t674 to i64
  %316 = mul nsw i64 %250, 22
  %t1038 = mul nsw i32 %a40, 22
  %t679 = add nsw i32 %t1038, %a118
  %317 = sext i32 %t679 to i64
  %318 = mul nsw i64 %250, 23
  %t1043 = mul nsw i32 %a40, 23
  %t684 = add nsw i32 %t1043, %a118
  %319 = sext i32 %t684 to i64
  %320 = mul nsw i64 %250, 24
  %t1048 = mul nsw i32 %a40, 24
  %t689 = add nsw i32 %t1048, %a118
  %321 = sext i32 %t689 to i64
  %322 = mul nsw i64 %250, 25
  %t1053 = mul nsw i32 %a40, 25
  %t694 = add nsw i32 %t1053, %a118
  %323 = sext i32 %t694 to i64
  %324 = mul nsw i64 %250, 26
  %t1058 = mul nsw i32 %a40, 26
  %t699 = add nsw i32 %t1058, %a118
  %325 = sext i32 %t699 to i64
  %326 = mul nsw i64 %250, 27
  %t1063 = mul nsw i32 %a40, 27
  %t704 = add nsw i32 %t1063, %a118
  %327 = sext i32 %t704 to i64
  %328 = mul nsw i64 %250, 28
  %t1068 = mul nsw i32 %a40, 28
  %t709 = add nsw i32 %t1068, %a118
  %329 = sext i32 %t709 to i64
  %330 = mul nsw i64 %250, 29
  %t1073 = mul nsw i32 %a40, 29
  %t714 = add nsw i32 %t1073, %a118
  %331 = sext i32 %t714 to i64
  %332 = mul nsw i64 %250, 30
  %t1078 = mul nsw i32 %a40, 30
  %t719 = add nsw i32 %t1078, %a118
  %333 = sext i32 %t719 to i64
  %334 = mul nsw i64 %250, 31
  %t1083 = mul nsw i32 %a40, 31
  %t724 = add nsw i32 %t1083, %a118
  %335 = sext i32 %t724 to i64
  %336 = shl nsw i64 %250, 5
  %t1088 = shl nsw i32 %a40, 5
  %t729 = add nsw i32 %t1088, %a118
  %337 = sext i32 %t729 to i64
  %338 = mul nsw i64 %250, 33
  %t1093 = mul nsw i32 %a40, 33
  %t734 = add nsw i32 %t1093, %a118
  %339 = sext i32 %t734 to i64
  br i1 %235, label %"assert succeeded32.preheader", label %call_destructor.exit.thread, !prof !406

"assert succeeded32.preheader":                   ; preds = %"for blur_y.s0.y.y.preheader"
  %340 = icmp slt i32 %b38, 0
  %blur_y.s0.y.yi.base.s2473 = select i1 %340, i32 %b38, i32 0
  %t904 = ashr i32 %26, 5
  %341 = add nsw i32 %t904, -1
  %342 = sub i32 %25, %38
  %343 = sext i32 %b52 to i64
  %344 = sext i32 %b33 to i64
  %345 = zext i32 %t928 to i64
  %346 = zext i32 %38 to i64
  %347 = sext i32 %342 to i64
  %348 = zext i32 %341 to i64
  %349 = add nsw i64 %345, -1
  %350 = add nsw i64 %348, -1
  %xtraiter = and i64 %345, 3
  %351 = icmp ult i64 %349, 3
  %unroll_iter = and i64 %345, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  %xtraiter2807 = and i64 %348, 1
  %352 = icmp eq i64 %350, 0
  %unroll_iter2809 = and i64 %348, 4294967294
  %lcmp.mod2808.not = icmp eq i64 %xtraiter2807, 0
  %xtraiter2811 = and i64 %348, 1
  %353 = icmp eq i64 %350, 0
  %unroll_iter2813 = and i64 %348, 4294967294
  %lcmp.mod2812.not = icmp eq i64 %xtraiter2811, 0
  br label %"assert succeeded32"

"for blur_y.s0.y.y":                              ; preds = %after_bb576
  %a36 = shl nsw i32 %5371, 5
  %354 = icmp sgt i32 %b38, %a36
  %blur_y.s0.y.yi.base.s = select i1 %354, i32 %a36, i32 %b38
  br label %"assert succeeded32"

call_destructor.exit.thread:                      ; preds = %"for blur_y.s0.y.y.preheader"
  %355 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.208, i64 0, i64 0), i64 %234, i64 2147483647) #11
  br label %common.ret

"assert succeeded32":                             ; preds = %"for blur_y.s0.y.y", %"assert succeeded32.preheader"
  %blur_y.s0.y.yi.base.s2476 = phi i32 [ %blur_y.s0.y.yi.base.s, %"for blur_y.s0.y.y" ], [ %blur_y.s0.y.yi.base.s2473, %"assert succeeded32.preheader" ]
  %blur_y.s0.y.y2475 = phi i32 [ %5371, %"for blur_y.s0.y.y" ], [ 0, %"assert succeeded32.preheader" ]
  %356 = load i64, i64* %.fca.1.gep, align 8, !tbaa !407
  %cmp.i2143 = icmp ult i64 %356, %236
  %357 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !397
  br i1 %cmp.i2143, label %if.then.i2144, label %pseudostack_alloc.exit, !prof !408

if.then.i2144:                                    ; preds = %"assert succeeded32"
  %tobool1.not.i = icmp ne i8* %357, null
  %358 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %358, 16384
  %or.cond = select i1 %tobool1.not.i, i1 %cmp2.i, i1 false
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i2144
  call void @halide_free(i8* null, i8* nonnull %357) #18
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i2144
  %add.i = add i64 %358, %236
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !399
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %236) #18
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !397
  store i64 %236, i64* %.fca.1.gep, align 8, !tbaa !407
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"assert succeeded32", %if.end11.i
  %359 = phi i8* [ %storemerge.i, %if.end11.i ], [ %357, %"assert succeeded32" ]
  %360 = bitcast i8* %359 to i16*
  %.not1857 = icmp eq i8* %359, null
  br i1 %.not1857, label %then_bb34, label %"produce read_input", !prof !396

then_bb34:                                        ; preds = %pseudostack_alloc.exit
  %361 = alloca i8*, i64 %236, align 64
  %362 = bitcast i8** %361 to i16*
  store i8** %361, i8*** %238, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb34
  %read_input = phi i16* [ %362, %then_bb34 ], [ %360, %pseudostack_alloc.exit ]
  %a42 = add i32 %blur_y.s0.y.yi.base.s2476, %28
  %363 = icmp slt i32 %41, %a42
  %a41 = select i1 %363, i32 %a42, i32 %41
  %b43 = add nsw i32 %a42, 34
  %364 = icmp sgt i32 %b43, %a41
  %read_input.s0.y.prologue = select i1 %364, i32 %a41, i32 %b43
  %365 = icmp sgt i32 %a41, %b13
  %a43 = select i1 %365, i32 %a41, i32 %b13
  %366 = icmp sgt i32 %b43, %a43
  %read_input.s0.y.epilogue = select i1 %366, i32 %a43, i32 %b43
  %a47 = sub i32 %41, %a42
  %367 = icmp sgt i32 %a47, 0
  br i1 %367, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !406

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t914 = add nsw i32 %239, %blur_y.s0.y.yi.base.s2476
  %368 = icmp slt i32 %a47, 34
  %a46 = select i1 %368, i32 %a47, i32 34
  %369 = sext i32 %t914 to i64
  %370 = zext i32 %a46 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %371 = add nsw i64 %indvars.iv, %369
  %372 = icmp slt i64 %371, %343
  %373 = trunc i64 %371 to i32
  %a49 = select i1 %372, i32 %373, i32 %b52
  br i1 %240, label %"for read_input.s0.x.x.preheader", label %"end for read_input.s0.x.x", !prof !406

"for read_input.s0.x.x.preheader":                ; preds = %"for read_input.s0.y.rebased"
  %374 = icmp sgt i32 %a49, 0
  %375 = select i1 %374, i32 %a49, i32 0
  %376 = mul nsw i32 %375, %43
  %t915 = sub nsw i32 %376, %38
  %377 = mul nsw i64 %indvars.iv, %250
  %378 = insertelement <32 x i32> undef, i32 %t915, i32 0
  %379 = shufflevector <32 x i32> %378, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %380 = icmp sgt i32 %b13, %a42
  %a55 = select i1 %380, i32 %b13, i32 %a42
  %381 = icmp sgt i32 %b43, %a55
  %382 = select i1 %381, i32 %a55, i32 %b43
  %t917 = sub nsw i32 %382, %read_input.s0.y.prologue
  %383 = icmp sgt i32 %t917, 0
  br i1 %383, label %"for read_input.s0.y.rebased35.preheader", label %"end for read_input.s0.y.rebased36", !prof !406

"for read_input.s0.y.rebased35.preheader":        ; preds = %"end for read_input.s0.y.rebased"
  %t919 = sub i32 %read_input.s0.y.prologue, %41
  %384 = sext i32 %blur_y.s0.y.yi.base.s2476 to i64
  %385 = add nsw i64 %249, %384
  %a63 = sub nsw i64 %248, %385
  %386 = icmp slt i64 %a63, 34
  %a62 = select i1 %386, i64 %a63, i64 34
  %387 = icmp sgt i64 %a62, 0
  %388 = select i1 %387, i64 %a62, i64 0
  %389 = sext i32 %t919 to i64
  %390 = zext i32 %t917 to i64
  br label %"for read_input.s0.y.rebased35"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.x.x.preheader", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %547, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.x.x.preheader" ]
  %a51 = shl nsw i32 %read_input.s0.x.x, 5
  %391 = icmp sgt i32 %b53, %a51
  %read_input.s0.x.v2.base.s = select i1 %391, i32 %a51, i32 %b53
  %392 = add nsw i32 %read_input.s0.x.v2.base.s, %25
  %393 = insertelement <32 x i32> undef, i32 %392, i32 0
  %394 = shufflevector <32 x i32> %393, <32 x i32> undef, <32 x i32> zeroinitializer
  %a53 = add nsw <32 x i32> %394, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %395 = shufflevector <32 x i32> %a53, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %396 = icmp sgt <16 x i32> %243, %395
  %397 = shufflevector <32 x i32> %a53, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %398 = icmp sgt <16 x i32> %243, %397
  %399 = select <16 x i1> %396, <16 x i32> %395, <16 x i32> %243
  %400 = select <16 x i1> %398, <16 x i32> %397, <16 x i32> %243
  %401 = icmp sgt <16 x i32> %399, %245
  %402 = icmp sgt <16 x i32> %400, %245
  %403 = select <16 x i1> %401, <16 x i32> %399, <16 x i32> %245
  %404 = select <16 x i1> %402, <16 x i32> %400, <16 x i32> %245
  %405 = shufflevector <16 x i32> %403, <16 x i32> %404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %406 = add nsw <32 x i32> %405, %379
  %407 = shufflevector <32 x i32> %406, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %408 = sext <8 x i32> %407 to <8 x i64>
  %409 = extractelement <8 x i64> %408, i32 0
  %410 = getelementptr inbounds i16, i16* %246, i64 %409
  %411 = load i16, i16* %410, align 2, !tbaa !409
  %412 = insertelement <32 x i16> undef, i16 %411, i32 0
  %413 = extractelement <8 x i64> %408, i32 1
  %414 = getelementptr inbounds i16, i16* %246, i64 %413
  %415 = load i16, i16* %414, align 2, !tbaa !409
  %416 = insertelement <32 x i16> %412, i16 %415, i32 1
  %417 = extractelement <8 x i64> %408, i32 2
  %418 = getelementptr inbounds i16, i16* %246, i64 %417
  %419 = load i16, i16* %418, align 2, !tbaa !409
  %420 = insertelement <32 x i16> %416, i16 %419, i32 2
  %421 = extractelement <8 x i64> %408, i32 3
  %422 = getelementptr inbounds i16, i16* %246, i64 %421
  %423 = load i16, i16* %422, align 2, !tbaa !409
  %424 = insertelement <32 x i16> %420, i16 %423, i32 3
  %425 = extractelement <8 x i64> %408, i32 4
  %426 = getelementptr inbounds i16, i16* %246, i64 %425
  %427 = load i16, i16* %426, align 2, !tbaa !409
  %428 = insertelement <32 x i16> %424, i16 %427, i32 4
  %429 = extractelement <8 x i64> %408, i32 5
  %430 = getelementptr inbounds i16, i16* %246, i64 %429
  %431 = load i16, i16* %430, align 2, !tbaa !409
  %432 = insertelement <32 x i16> %428, i16 %431, i32 5
  %433 = extractelement <8 x i64> %408, i32 6
  %434 = getelementptr inbounds i16, i16* %246, i64 %433
  %435 = load i16, i16* %434, align 2, !tbaa !409
  %436 = insertelement <32 x i16> %432, i16 %435, i32 6
  %437 = extractelement <8 x i64> %408, i32 7
  %438 = getelementptr inbounds i16, i16* %246, i64 %437
  %439 = load i16, i16* %438, align 2, !tbaa !409
  %440 = insertelement <32 x i16> %436, i16 %439, i32 7
  %441 = shufflevector <32 x i32> %406, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %442 = sext <8 x i32> %441 to <8 x i64>
  %443 = extractelement <8 x i64> %442, i32 0
  %444 = getelementptr inbounds i16, i16* %246, i64 %443
  %445 = load i16, i16* %444, align 2, !tbaa !409
  %446 = insertelement <32 x i16> %440, i16 %445, i32 8
  %447 = extractelement <8 x i64> %442, i32 1
  %448 = getelementptr inbounds i16, i16* %246, i64 %447
  %449 = load i16, i16* %448, align 2, !tbaa !409
  %450 = insertelement <32 x i16> %446, i16 %449, i32 9
  %451 = extractelement <8 x i64> %442, i32 2
  %452 = getelementptr inbounds i16, i16* %246, i64 %451
  %453 = load i16, i16* %452, align 2, !tbaa !409
  %454 = insertelement <32 x i16> %450, i16 %453, i32 10
  %455 = extractelement <8 x i64> %442, i32 3
  %456 = getelementptr inbounds i16, i16* %246, i64 %455
  %457 = load i16, i16* %456, align 2, !tbaa !409
  %458 = insertelement <32 x i16> %454, i16 %457, i32 11
  %459 = extractelement <8 x i64> %442, i32 4
  %460 = getelementptr inbounds i16, i16* %246, i64 %459
  %461 = load i16, i16* %460, align 2, !tbaa !409
  %462 = insertelement <32 x i16> %458, i16 %461, i32 12
  %463 = extractelement <8 x i64> %442, i32 5
  %464 = getelementptr inbounds i16, i16* %246, i64 %463
  %465 = load i16, i16* %464, align 2, !tbaa !409
  %466 = insertelement <32 x i16> %462, i16 %465, i32 13
  %467 = extractelement <8 x i64> %442, i32 6
  %468 = getelementptr inbounds i16, i16* %246, i64 %467
  %469 = load i16, i16* %468, align 2, !tbaa !409
  %470 = insertelement <32 x i16> %466, i16 %469, i32 14
  %471 = extractelement <8 x i64> %442, i32 7
  %472 = getelementptr inbounds i16, i16* %246, i64 %471
  %473 = load i16, i16* %472, align 2, !tbaa !409
  %474 = insertelement <32 x i16> %470, i16 %473, i32 15
  %475 = shufflevector <32 x i32> %406, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %476 = sext <8 x i32> %475 to <8 x i64>
  %477 = extractelement <8 x i64> %476, i32 0
  %478 = getelementptr inbounds i16, i16* %246, i64 %477
  %479 = load i16, i16* %478, align 2, !tbaa !409
  %480 = insertelement <32 x i16> %474, i16 %479, i32 16
  %481 = extractelement <8 x i64> %476, i32 1
  %482 = getelementptr inbounds i16, i16* %246, i64 %481
  %483 = load i16, i16* %482, align 2, !tbaa !409
  %484 = insertelement <32 x i16> %480, i16 %483, i32 17
  %485 = extractelement <8 x i64> %476, i32 2
  %486 = getelementptr inbounds i16, i16* %246, i64 %485
  %487 = load i16, i16* %486, align 2, !tbaa !409
  %488 = insertelement <32 x i16> %484, i16 %487, i32 18
  %489 = extractelement <8 x i64> %476, i32 3
  %490 = getelementptr inbounds i16, i16* %246, i64 %489
  %491 = load i16, i16* %490, align 2, !tbaa !409
  %492 = insertelement <32 x i16> %488, i16 %491, i32 19
  %493 = extractelement <8 x i64> %476, i32 4
  %494 = getelementptr inbounds i16, i16* %246, i64 %493
  %495 = load i16, i16* %494, align 2, !tbaa !409
  %496 = insertelement <32 x i16> %492, i16 %495, i32 20
  %497 = extractelement <8 x i64> %476, i32 5
  %498 = getelementptr inbounds i16, i16* %246, i64 %497
  %499 = load i16, i16* %498, align 2, !tbaa !409
  %500 = insertelement <32 x i16> %496, i16 %499, i32 21
  %501 = extractelement <8 x i64> %476, i32 6
  %502 = getelementptr inbounds i16, i16* %246, i64 %501
  %503 = load i16, i16* %502, align 2, !tbaa !409
  %504 = insertelement <32 x i16> %500, i16 %503, i32 22
  %505 = extractelement <8 x i64> %476, i32 7
  %506 = getelementptr inbounds i16, i16* %246, i64 %505
  %507 = load i16, i16* %506, align 2, !tbaa !409
  %508 = insertelement <32 x i16> %504, i16 %507, i32 23
  %509 = shufflevector <32 x i32> %406, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %510 = sext <8 x i32> %509 to <8 x i64>
  %511 = extractelement <8 x i64> %510, i32 0
  %512 = getelementptr inbounds i16, i16* %246, i64 %511
  %513 = load i16, i16* %512, align 2, !tbaa !409
  %514 = insertelement <32 x i16> %508, i16 %513, i32 24
  %515 = extractelement <8 x i64> %510, i32 1
  %516 = getelementptr inbounds i16, i16* %246, i64 %515
  %517 = load i16, i16* %516, align 2, !tbaa !409
  %518 = insertelement <32 x i16> %514, i16 %517, i32 25
  %519 = extractelement <8 x i64> %510, i32 2
  %520 = getelementptr inbounds i16, i16* %246, i64 %519
  %521 = load i16, i16* %520, align 2, !tbaa !409
  %522 = insertelement <32 x i16> %518, i16 %521, i32 26
  %523 = extractelement <8 x i64> %510, i32 3
  %524 = getelementptr inbounds i16, i16* %246, i64 %523
  %525 = load i16, i16* %524, align 2, !tbaa !409
  %526 = insertelement <32 x i16> %522, i16 %525, i32 27
  %527 = extractelement <8 x i64> %510, i32 4
  %528 = getelementptr inbounds i16, i16* %246, i64 %527
  %529 = load i16, i16* %528, align 2, !tbaa !409
  %530 = insertelement <32 x i16> %526, i16 %529, i32 28
  %531 = extractelement <8 x i64> %510, i32 5
  %532 = getelementptr inbounds i16, i16* %246, i64 %531
  %533 = load i16, i16* %532, align 2, !tbaa !409
  %534 = insertelement <32 x i16> %530, i16 %533, i32 29
  %535 = extractelement <8 x i64> %510, i32 6
  %536 = getelementptr inbounds i16, i16* %246, i64 %535
  %537 = load i16, i16* %536, align 2, !tbaa !409
  %538 = insertelement <32 x i16> %534, i16 %537, i32 30
  %539 = extractelement <8 x i64> %510, i32 7
  %540 = getelementptr inbounds i16, i16* %246, i64 %539
  %541 = load i16, i16* %540, align 2, !tbaa !409
  %542 = insertelement <32 x i16> %538, i16 %541, i32 31
  %543 = sext i32 %read_input.s0.x.v2.base.s to i64
  %544 = add nsw i64 %377, %543
  %545 = getelementptr inbounds i16, i16* %read_input, i64 %544
  %546 = bitcast i16* %545 to <32 x i16>*
  store <32 x i16> %542, <32 x i16>* %546, align 2, !tbaa !412
  %547 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2063 = icmp eq i32 %547, %b26
  br i1 %.not2063, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x", %"for read_input.s0.y.rebased"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2062 = icmp eq i64 %indvars.iv.next, %370
  br i1 %.not2062, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased35":                  ; preds = %"for read_input.s0.y.rebased35.preheader", %"end for read_input.s0.x.x.rebased43"
  %indvars.iv2504 = phi i64 [ 0, %"for read_input.s0.y.rebased35.preheader" ], [ %indvars.iv.next2505, %"end for read_input.s0.x.x.rebased43" ]
  %548 = add nsw i64 %indvars.iv2504, %389
  %549 = mul nsw i64 %548, %155
  %550 = sub i64 %549, %346
  br i1 %247, label %"for read_input.s0.x.x38.preheader", label %"end for read_input.s0.x.x39", !prof !406

"for read_input.s0.x.x38.preheader":              ; preds = %"for read_input.s0.y.rebased35"
  %551 = trunc i64 %550 to i32
  %552 = insertelement <32 x i32> undef, i32 %551, i32 0
  %553 = shufflevector <32 x i32> %552, <32 x i32> undef, <32 x i32> zeroinitializer
  %554 = add nuw nsw i64 %388, %indvars.iv2504
  %555 = mul nsw i64 %554, %250
  br label %"for read_input.s0.x.x38"

"end for read_input.s0.y.rebased36":              ; preds = %"end for read_input.s0.x.x.rebased43", %"end for read_input.s0.y.rebased"
  %a73 = add nsw i32 %blur_y.s0.y.yi.base.s2476, %253
  %556 = icmp slt i32 %a73, 0
  %a72 = select i1 %556, i32 %a73, i32 0
  %557 = icmp sgt i32 %a72, -34
  %t935 = sub nsw i32 %read_input.s0.y.epilogue, %41
  br i1 %557, label %"for read_input.s0.y.rebased46.preheader", label %"end for read_input.s0.y.rebased47", !prof !406

"for read_input.s0.y.rebased46.preheader":        ; preds = %"end for read_input.s0.y.rebased36"
  %558 = sext i32 %blur_y.s0.y.yi.base.s2476 to i64
  %559 = add nsw i64 %249, %558
  %a80 = sub nsw i64 %254, %559
  %560 = icmp slt i64 %a80, 34
  %a79 = select i1 %560, i64 %a80, i64 34
  %561 = icmp sgt i64 %a79, 0
  %562 = select i1 %561, i64 %a79, i64 0
  %a72.op = add nsw i32 %a72, 33
  %563 = zext i32 %a72.op to i64
  br label %"for read_input.s0.y.rebased46"

"for read_input.s0.x.x38":                        ; preds = %"for read_input.s0.x.x38.preheader", %"for read_input.s0.x.x38"
  %read_input.s0.x.x40 = phi i32 [ %720, %"for read_input.s0.x.x38" ], [ 0, %"for read_input.s0.x.x38.preheader" ]
  %a59 = shl nsw i32 %read_input.s0.x.x40, 5
  %564 = icmp sgt i32 %b53, %a59
  %read_input.s0.x.v2.base.s41 = select i1 %564, i32 %a59, i32 %b53
  %565 = add nsw i32 %read_input.s0.x.v2.base.s41, %25
  %566 = insertelement <32 x i32> undef, i32 %565, i32 0
  %567 = shufflevector <32 x i32> %566, <32 x i32> undef, <32 x i32> zeroinitializer
  %a61 = add nsw <32 x i32> %567, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %568 = shufflevector <32 x i32> %a61, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %569 = icmp sgt <16 x i32> %243, %568
  %570 = shufflevector <32 x i32> %a61, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %571 = icmp sgt <16 x i32> %243, %570
  %572 = select <16 x i1> %569, <16 x i32> %568, <16 x i32> %243
  %573 = select <16 x i1> %571, <16 x i32> %570, <16 x i32> %243
  %574 = icmp sgt <16 x i32> %572, %245
  %575 = icmp sgt <16 x i32> %573, %245
  %576 = select <16 x i1> %574, <16 x i32> %572, <16 x i32> %245
  %577 = select <16 x i1> %575, <16 x i32> %573, <16 x i32> %245
  %578 = shufflevector <16 x i32> %576, <16 x i32> %577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %579 = add nsw <32 x i32> %578, %553
  %580 = shufflevector <32 x i32> %579, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %581 = sext <8 x i32> %580 to <8 x i64>
  %582 = extractelement <8 x i64> %581, i32 0
  %583 = getelementptr inbounds i16, i16* %246, i64 %582
  %584 = load i16, i16* %583, align 2, !tbaa !409
  %585 = insertelement <32 x i16> undef, i16 %584, i32 0
  %586 = extractelement <8 x i64> %581, i32 1
  %587 = getelementptr inbounds i16, i16* %246, i64 %586
  %588 = load i16, i16* %587, align 2, !tbaa !409
  %589 = insertelement <32 x i16> %585, i16 %588, i32 1
  %590 = extractelement <8 x i64> %581, i32 2
  %591 = getelementptr inbounds i16, i16* %246, i64 %590
  %592 = load i16, i16* %591, align 2, !tbaa !409
  %593 = insertelement <32 x i16> %589, i16 %592, i32 2
  %594 = extractelement <8 x i64> %581, i32 3
  %595 = getelementptr inbounds i16, i16* %246, i64 %594
  %596 = load i16, i16* %595, align 2, !tbaa !409
  %597 = insertelement <32 x i16> %593, i16 %596, i32 3
  %598 = extractelement <8 x i64> %581, i32 4
  %599 = getelementptr inbounds i16, i16* %246, i64 %598
  %600 = load i16, i16* %599, align 2, !tbaa !409
  %601 = insertelement <32 x i16> %597, i16 %600, i32 4
  %602 = extractelement <8 x i64> %581, i32 5
  %603 = getelementptr inbounds i16, i16* %246, i64 %602
  %604 = load i16, i16* %603, align 2, !tbaa !409
  %605 = insertelement <32 x i16> %601, i16 %604, i32 5
  %606 = extractelement <8 x i64> %581, i32 6
  %607 = getelementptr inbounds i16, i16* %246, i64 %606
  %608 = load i16, i16* %607, align 2, !tbaa !409
  %609 = insertelement <32 x i16> %605, i16 %608, i32 6
  %610 = extractelement <8 x i64> %581, i32 7
  %611 = getelementptr inbounds i16, i16* %246, i64 %610
  %612 = load i16, i16* %611, align 2, !tbaa !409
  %613 = insertelement <32 x i16> %609, i16 %612, i32 7
  %614 = shufflevector <32 x i32> %579, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %615 = sext <8 x i32> %614 to <8 x i64>
  %616 = extractelement <8 x i64> %615, i32 0
  %617 = getelementptr inbounds i16, i16* %246, i64 %616
  %618 = load i16, i16* %617, align 2, !tbaa !409
  %619 = insertelement <32 x i16> %613, i16 %618, i32 8
  %620 = extractelement <8 x i64> %615, i32 1
  %621 = getelementptr inbounds i16, i16* %246, i64 %620
  %622 = load i16, i16* %621, align 2, !tbaa !409
  %623 = insertelement <32 x i16> %619, i16 %622, i32 9
  %624 = extractelement <8 x i64> %615, i32 2
  %625 = getelementptr inbounds i16, i16* %246, i64 %624
  %626 = load i16, i16* %625, align 2, !tbaa !409
  %627 = insertelement <32 x i16> %623, i16 %626, i32 10
  %628 = extractelement <8 x i64> %615, i32 3
  %629 = getelementptr inbounds i16, i16* %246, i64 %628
  %630 = load i16, i16* %629, align 2, !tbaa !409
  %631 = insertelement <32 x i16> %627, i16 %630, i32 11
  %632 = extractelement <8 x i64> %615, i32 4
  %633 = getelementptr inbounds i16, i16* %246, i64 %632
  %634 = load i16, i16* %633, align 2, !tbaa !409
  %635 = insertelement <32 x i16> %631, i16 %634, i32 12
  %636 = extractelement <8 x i64> %615, i32 5
  %637 = getelementptr inbounds i16, i16* %246, i64 %636
  %638 = load i16, i16* %637, align 2, !tbaa !409
  %639 = insertelement <32 x i16> %635, i16 %638, i32 13
  %640 = extractelement <8 x i64> %615, i32 6
  %641 = getelementptr inbounds i16, i16* %246, i64 %640
  %642 = load i16, i16* %641, align 2, !tbaa !409
  %643 = insertelement <32 x i16> %639, i16 %642, i32 14
  %644 = extractelement <8 x i64> %615, i32 7
  %645 = getelementptr inbounds i16, i16* %246, i64 %644
  %646 = load i16, i16* %645, align 2, !tbaa !409
  %647 = insertelement <32 x i16> %643, i16 %646, i32 15
  %648 = shufflevector <32 x i32> %579, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %649 = sext <8 x i32> %648 to <8 x i64>
  %650 = extractelement <8 x i64> %649, i32 0
  %651 = getelementptr inbounds i16, i16* %246, i64 %650
  %652 = load i16, i16* %651, align 2, !tbaa !409
  %653 = insertelement <32 x i16> %647, i16 %652, i32 16
  %654 = extractelement <8 x i64> %649, i32 1
  %655 = getelementptr inbounds i16, i16* %246, i64 %654
  %656 = load i16, i16* %655, align 2, !tbaa !409
  %657 = insertelement <32 x i16> %653, i16 %656, i32 17
  %658 = extractelement <8 x i64> %649, i32 2
  %659 = getelementptr inbounds i16, i16* %246, i64 %658
  %660 = load i16, i16* %659, align 2, !tbaa !409
  %661 = insertelement <32 x i16> %657, i16 %660, i32 18
  %662 = extractelement <8 x i64> %649, i32 3
  %663 = getelementptr inbounds i16, i16* %246, i64 %662
  %664 = load i16, i16* %663, align 2, !tbaa !409
  %665 = insertelement <32 x i16> %661, i16 %664, i32 19
  %666 = extractelement <8 x i64> %649, i32 4
  %667 = getelementptr inbounds i16, i16* %246, i64 %666
  %668 = load i16, i16* %667, align 2, !tbaa !409
  %669 = insertelement <32 x i16> %665, i16 %668, i32 20
  %670 = extractelement <8 x i64> %649, i32 5
  %671 = getelementptr inbounds i16, i16* %246, i64 %670
  %672 = load i16, i16* %671, align 2, !tbaa !409
  %673 = insertelement <32 x i16> %669, i16 %672, i32 21
  %674 = extractelement <8 x i64> %649, i32 6
  %675 = getelementptr inbounds i16, i16* %246, i64 %674
  %676 = load i16, i16* %675, align 2, !tbaa !409
  %677 = insertelement <32 x i16> %673, i16 %676, i32 22
  %678 = extractelement <8 x i64> %649, i32 7
  %679 = getelementptr inbounds i16, i16* %246, i64 %678
  %680 = load i16, i16* %679, align 2, !tbaa !409
  %681 = insertelement <32 x i16> %677, i16 %680, i32 23
  %682 = shufflevector <32 x i32> %579, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %683 = sext <8 x i32> %682 to <8 x i64>
  %684 = extractelement <8 x i64> %683, i32 0
  %685 = getelementptr inbounds i16, i16* %246, i64 %684
  %686 = load i16, i16* %685, align 2, !tbaa !409
  %687 = insertelement <32 x i16> %681, i16 %686, i32 24
  %688 = extractelement <8 x i64> %683, i32 1
  %689 = getelementptr inbounds i16, i16* %246, i64 %688
  %690 = load i16, i16* %689, align 2, !tbaa !409
  %691 = insertelement <32 x i16> %687, i16 %690, i32 25
  %692 = extractelement <8 x i64> %683, i32 2
  %693 = getelementptr inbounds i16, i16* %246, i64 %692
  %694 = load i16, i16* %693, align 2, !tbaa !409
  %695 = insertelement <32 x i16> %691, i16 %694, i32 26
  %696 = extractelement <8 x i64> %683, i32 3
  %697 = getelementptr inbounds i16, i16* %246, i64 %696
  %698 = load i16, i16* %697, align 2, !tbaa !409
  %699 = insertelement <32 x i16> %695, i16 %698, i32 27
  %700 = extractelement <8 x i64> %683, i32 4
  %701 = getelementptr inbounds i16, i16* %246, i64 %700
  %702 = load i16, i16* %701, align 2, !tbaa !409
  %703 = insertelement <32 x i16> %699, i16 %702, i32 28
  %704 = extractelement <8 x i64> %683, i32 5
  %705 = getelementptr inbounds i16, i16* %246, i64 %704
  %706 = load i16, i16* %705, align 2, !tbaa !409
  %707 = insertelement <32 x i16> %703, i16 %706, i32 29
  %708 = extractelement <8 x i64> %683, i32 6
  %709 = getelementptr inbounds i16, i16* %246, i64 %708
  %710 = load i16, i16* %709, align 2, !tbaa !409
  %711 = insertelement <32 x i16> %707, i16 %710, i32 30
  %712 = extractelement <8 x i64> %683, i32 7
  %713 = getelementptr inbounds i16, i16* %246, i64 %712
  %714 = load i16, i16* %713, align 2, !tbaa !409
  %715 = insertelement <32 x i16> %711, i16 %714, i32 31
  %716 = sext i32 %read_input.s0.x.v2.base.s41 to i64
  %717 = add nsw i64 %555, %716
  %718 = getelementptr inbounds i16, i16* %read_input, i64 %717
  %719 = bitcast i16* %718 to <32 x i16>*
  store <32 x i16> %715, <32 x i16>* %719, align 2, !tbaa !412
  %720 = add nuw nsw i32 %read_input.s0.x.x40, 1
  %.not2061 = icmp eq i32 %720, %b33
  br i1 %.not2061, label %"end for read_input.s0.x.x39", label %"for read_input.s0.x.x38"

"end for read_input.s0.x.x39":                    ; preds = %"for read_input.s0.x.x38", %"for read_input.s0.y.rebased35"
  br i1 %251, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !406

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x39"
  %721 = add nsw i64 %549, %347
  %722 = add nuw nsw i64 %388, %indvars.iv2504
  %723 = mul nsw i64 %722, %250
  br i1 %351, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv2501 = phi i64 [ %indvars.iv.next2502.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %724 = add nsw i64 %indvars.iv2501, %344
  %725 = shl nsw i64 %724, 5
  %726 = add nsw i64 %725, %721
  %727 = getelementptr inbounds i16, i16* %246, i64 %726
  %728 = bitcast i16* %727 to <32 x i16>*
  %729 = load <32 x i16>, <32 x i16>* %728, align 2, !tbaa !409
  %730 = add nsw i64 %725, %723
  %731 = getelementptr inbounds i16, i16* %read_input, i64 %730
  %732 = bitcast i16* %731 to <32 x i16>*
  store <32 x i16> %729, <32 x i16>* %732, align 2, !tbaa !412
  %indvars.iv.next2502 = or i64 %indvars.iv2501, 1
  %733 = add nsw i64 %indvars.iv.next2502, %344
  %734 = shl nsw i64 %733, 5
  %735 = add nsw i64 %734, %721
  %736 = getelementptr inbounds i16, i16* %246, i64 %735
  %737 = bitcast i16* %736 to <32 x i16>*
  %738 = load <32 x i16>, <32 x i16>* %737, align 2, !tbaa !409
  %739 = add nsw i64 %734, %723
  %740 = getelementptr inbounds i16, i16* %read_input, i64 %739
  %741 = bitcast i16* %740 to <32 x i16>*
  store <32 x i16> %738, <32 x i16>* %741, align 2, !tbaa !412
  %indvars.iv.next2502.1 = or i64 %indvars.iv2501, 2
  %742 = add nsw i64 %indvars.iv.next2502.1, %344
  %743 = shl nsw i64 %742, 5
  %744 = add nsw i64 %743, %721
  %745 = getelementptr inbounds i16, i16* %246, i64 %744
  %746 = bitcast i16* %745 to <32 x i16>*
  %747 = load <32 x i16>, <32 x i16>* %746, align 2, !tbaa !409
  %748 = add nsw i64 %743, %723
  %749 = getelementptr inbounds i16, i16* %read_input, i64 %748
  %750 = bitcast i16* %749 to <32 x i16>*
  store <32 x i16> %747, <32 x i16>* %750, align 2, !tbaa !412
  %indvars.iv.next2502.2 = or i64 %indvars.iv2501, 3
  %751 = add nsw i64 %indvars.iv.next2502.2, %344
  %752 = shl nsw i64 %751, 5
  %753 = add nsw i64 %752, %721
  %754 = getelementptr inbounds i16, i16* %246, i64 %753
  %755 = bitcast i16* %754 to <32 x i16>*
  %756 = load <32 x i16>, <32 x i16>* %755, align 2, !tbaa !409
  %757 = add nsw i64 %752, %723
  %758 = getelementptr inbounds i16, i16* %read_input, i64 %757
  %759 = bitcast i16* %758 to <32 x i16>*
  store <32 x i16> %756, <32 x i16>* %759, align 2, !tbaa !412
  %indvars.iv.next2502.3 = add nuw nsw i64 %indvars.iv2501, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv2501.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next2502.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv2501.epil = phi i64 [ %indvars.iv.next2502.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv2501.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %760 = add nsw i64 %indvars.iv2501.epil, %344
  %761 = shl nsw i64 %760, 5
  %762 = add nsw i64 %761, %721
  %763 = getelementptr inbounds i16, i16* %246, i64 %762
  %764 = bitcast i16* %763 to <32 x i16>*
  %765 = load <32 x i16>, <32 x i16>* %764, align 2, !tbaa !409
  %766 = add nsw i64 %761, %723
  %767 = getelementptr inbounds i16, i16* %read_input, i64 %766
  %768 = bitcast i16* %767 to <32 x i16>*
  store <32 x i16> %765, <32 x i16>* %768, align 2, !tbaa !412
  %indvars.iv.next2502.epil = add nuw nsw i64 %indvars.iv2501.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !414

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x39"
  br i1 %252, label %"for read_input.s0.x.x.rebased42.preheader", label %"end for read_input.s0.x.x.rebased43", !prof !406

"for read_input.s0.x.x.rebased42.preheader":      ; preds = %"end for read_input.s0.x.x.rebased"
  %769 = trunc i64 %550 to i32
  %770 = insertelement <32 x i32> undef, i32 %769, i32 0
  %771 = shufflevector <32 x i32> %770, <32 x i32> undef, <32 x i32> zeroinitializer
  %772 = add nuw nsw i64 %388, %indvars.iv2504
  %773 = mul nsw i64 %772, %250
  br label %"for read_input.s0.x.x.rebased42"

"for read_input.s0.x.x.rebased42":                ; preds = %"for read_input.s0.x.x.rebased42.preheader", %"for read_input.s0.x.x.rebased42"
  %read_input.s0.x.x.rebased44 = phi i32 [ %931, %"for read_input.s0.x.x.rebased42" ], [ 0, %"for read_input.s0.x.x.rebased42.preheader" ]
  %774 = add nsw i32 %read_input.s0.x.x.rebased44, %t892
  %a66 = shl nsw i32 %774, 5
  %775 = icmp sgt i32 %b53, %a66
  %read_input.s0.x.v2.base.s45 = select i1 %775, i32 %a66, i32 %b53
  %776 = add nsw i32 %read_input.s0.x.v2.base.s45, %25
  %777 = insertelement <32 x i32> undef, i32 %776, i32 0
  %778 = shufflevector <32 x i32> %777, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %778, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %779 = shufflevector <32 x i32> %a68, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %780 = icmp sgt <16 x i32> %243, %779
  %781 = shufflevector <32 x i32> %a68, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %782 = icmp sgt <16 x i32> %243, %781
  %783 = select <16 x i1> %780, <16 x i32> %779, <16 x i32> %243
  %784 = select <16 x i1> %782, <16 x i32> %781, <16 x i32> %243
  %785 = icmp sgt <16 x i32> %783, %245
  %786 = icmp sgt <16 x i32> %784, %245
  %787 = select <16 x i1> %785, <16 x i32> %783, <16 x i32> %245
  %788 = select <16 x i1> %786, <16 x i32> %784, <16 x i32> %245
  %789 = shufflevector <16 x i32> %787, <16 x i32> %788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %790 = add nsw <32 x i32> %789, %771
  %791 = shufflevector <32 x i32> %790, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %792 = sext <8 x i32> %791 to <8 x i64>
  %793 = extractelement <8 x i64> %792, i32 0
  %794 = getelementptr inbounds i16, i16* %246, i64 %793
  %795 = load i16, i16* %794, align 2, !tbaa !409
  %796 = insertelement <32 x i16> undef, i16 %795, i32 0
  %797 = extractelement <8 x i64> %792, i32 1
  %798 = getelementptr inbounds i16, i16* %246, i64 %797
  %799 = load i16, i16* %798, align 2, !tbaa !409
  %800 = insertelement <32 x i16> %796, i16 %799, i32 1
  %801 = extractelement <8 x i64> %792, i32 2
  %802 = getelementptr inbounds i16, i16* %246, i64 %801
  %803 = load i16, i16* %802, align 2, !tbaa !409
  %804 = insertelement <32 x i16> %800, i16 %803, i32 2
  %805 = extractelement <8 x i64> %792, i32 3
  %806 = getelementptr inbounds i16, i16* %246, i64 %805
  %807 = load i16, i16* %806, align 2, !tbaa !409
  %808 = insertelement <32 x i16> %804, i16 %807, i32 3
  %809 = extractelement <8 x i64> %792, i32 4
  %810 = getelementptr inbounds i16, i16* %246, i64 %809
  %811 = load i16, i16* %810, align 2, !tbaa !409
  %812 = insertelement <32 x i16> %808, i16 %811, i32 4
  %813 = extractelement <8 x i64> %792, i32 5
  %814 = getelementptr inbounds i16, i16* %246, i64 %813
  %815 = load i16, i16* %814, align 2, !tbaa !409
  %816 = insertelement <32 x i16> %812, i16 %815, i32 5
  %817 = extractelement <8 x i64> %792, i32 6
  %818 = getelementptr inbounds i16, i16* %246, i64 %817
  %819 = load i16, i16* %818, align 2, !tbaa !409
  %820 = insertelement <32 x i16> %816, i16 %819, i32 6
  %821 = extractelement <8 x i64> %792, i32 7
  %822 = getelementptr inbounds i16, i16* %246, i64 %821
  %823 = load i16, i16* %822, align 2, !tbaa !409
  %824 = insertelement <32 x i16> %820, i16 %823, i32 7
  %825 = shufflevector <32 x i32> %790, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %826 = sext <8 x i32> %825 to <8 x i64>
  %827 = extractelement <8 x i64> %826, i32 0
  %828 = getelementptr inbounds i16, i16* %246, i64 %827
  %829 = load i16, i16* %828, align 2, !tbaa !409
  %830 = insertelement <32 x i16> %824, i16 %829, i32 8
  %831 = extractelement <8 x i64> %826, i32 1
  %832 = getelementptr inbounds i16, i16* %246, i64 %831
  %833 = load i16, i16* %832, align 2, !tbaa !409
  %834 = insertelement <32 x i16> %830, i16 %833, i32 9
  %835 = extractelement <8 x i64> %826, i32 2
  %836 = getelementptr inbounds i16, i16* %246, i64 %835
  %837 = load i16, i16* %836, align 2, !tbaa !409
  %838 = insertelement <32 x i16> %834, i16 %837, i32 10
  %839 = extractelement <8 x i64> %826, i32 3
  %840 = getelementptr inbounds i16, i16* %246, i64 %839
  %841 = load i16, i16* %840, align 2, !tbaa !409
  %842 = insertelement <32 x i16> %838, i16 %841, i32 11
  %843 = extractelement <8 x i64> %826, i32 4
  %844 = getelementptr inbounds i16, i16* %246, i64 %843
  %845 = load i16, i16* %844, align 2, !tbaa !409
  %846 = insertelement <32 x i16> %842, i16 %845, i32 12
  %847 = extractelement <8 x i64> %826, i32 5
  %848 = getelementptr inbounds i16, i16* %246, i64 %847
  %849 = load i16, i16* %848, align 2, !tbaa !409
  %850 = insertelement <32 x i16> %846, i16 %849, i32 13
  %851 = extractelement <8 x i64> %826, i32 6
  %852 = getelementptr inbounds i16, i16* %246, i64 %851
  %853 = load i16, i16* %852, align 2, !tbaa !409
  %854 = insertelement <32 x i16> %850, i16 %853, i32 14
  %855 = extractelement <8 x i64> %826, i32 7
  %856 = getelementptr inbounds i16, i16* %246, i64 %855
  %857 = load i16, i16* %856, align 2, !tbaa !409
  %858 = insertelement <32 x i16> %854, i16 %857, i32 15
  %859 = shufflevector <32 x i32> %790, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %860 = sext <8 x i32> %859 to <8 x i64>
  %861 = extractelement <8 x i64> %860, i32 0
  %862 = getelementptr inbounds i16, i16* %246, i64 %861
  %863 = load i16, i16* %862, align 2, !tbaa !409
  %864 = insertelement <32 x i16> %858, i16 %863, i32 16
  %865 = extractelement <8 x i64> %860, i32 1
  %866 = getelementptr inbounds i16, i16* %246, i64 %865
  %867 = load i16, i16* %866, align 2, !tbaa !409
  %868 = insertelement <32 x i16> %864, i16 %867, i32 17
  %869 = extractelement <8 x i64> %860, i32 2
  %870 = getelementptr inbounds i16, i16* %246, i64 %869
  %871 = load i16, i16* %870, align 2, !tbaa !409
  %872 = insertelement <32 x i16> %868, i16 %871, i32 18
  %873 = extractelement <8 x i64> %860, i32 3
  %874 = getelementptr inbounds i16, i16* %246, i64 %873
  %875 = load i16, i16* %874, align 2, !tbaa !409
  %876 = insertelement <32 x i16> %872, i16 %875, i32 19
  %877 = extractelement <8 x i64> %860, i32 4
  %878 = getelementptr inbounds i16, i16* %246, i64 %877
  %879 = load i16, i16* %878, align 2, !tbaa !409
  %880 = insertelement <32 x i16> %876, i16 %879, i32 20
  %881 = extractelement <8 x i64> %860, i32 5
  %882 = getelementptr inbounds i16, i16* %246, i64 %881
  %883 = load i16, i16* %882, align 2, !tbaa !409
  %884 = insertelement <32 x i16> %880, i16 %883, i32 21
  %885 = extractelement <8 x i64> %860, i32 6
  %886 = getelementptr inbounds i16, i16* %246, i64 %885
  %887 = load i16, i16* %886, align 2, !tbaa !409
  %888 = insertelement <32 x i16> %884, i16 %887, i32 22
  %889 = extractelement <8 x i64> %860, i32 7
  %890 = getelementptr inbounds i16, i16* %246, i64 %889
  %891 = load i16, i16* %890, align 2, !tbaa !409
  %892 = insertelement <32 x i16> %888, i16 %891, i32 23
  %893 = shufflevector <32 x i32> %790, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %894 = sext <8 x i32> %893 to <8 x i64>
  %895 = extractelement <8 x i64> %894, i32 0
  %896 = getelementptr inbounds i16, i16* %246, i64 %895
  %897 = load i16, i16* %896, align 2, !tbaa !409
  %898 = insertelement <32 x i16> %892, i16 %897, i32 24
  %899 = extractelement <8 x i64> %894, i32 1
  %900 = getelementptr inbounds i16, i16* %246, i64 %899
  %901 = load i16, i16* %900, align 2, !tbaa !409
  %902 = insertelement <32 x i16> %898, i16 %901, i32 25
  %903 = extractelement <8 x i64> %894, i32 2
  %904 = getelementptr inbounds i16, i16* %246, i64 %903
  %905 = load i16, i16* %904, align 2, !tbaa !409
  %906 = insertelement <32 x i16> %902, i16 %905, i32 26
  %907 = extractelement <8 x i64> %894, i32 3
  %908 = getelementptr inbounds i16, i16* %246, i64 %907
  %909 = load i16, i16* %908, align 2, !tbaa !409
  %910 = insertelement <32 x i16> %906, i16 %909, i32 27
  %911 = extractelement <8 x i64> %894, i32 4
  %912 = getelementptr inbounds i16, i16* %246, i64 %911
  %913 = load i16, i16* %912, align 2, !tbaa !409
  %914 = insertelement <32 x i16> %910, i16 %913, i32 28
  %915 = extractelement <8 x i64> %894, i32 5
  %916 = getelementptr inbounds i16, i16* %246, i64 %915
  %917 = load i16, i16* %916, align 2, !tbaa !409
  %918 = insertelement <32 x i16> %914, i16 %917, i32 29
  %919 = extractelement <8 x i64> %894, i32 6
  %920 = getelementptr inbounds i16, i16* %246, i64 %919
  %921 = load i16, i16* %920, align 2, !tbaa !409
  %922 = insertelement <32 x i16> %918, i16 %921, i32 30
  %923 = extractelement <8 x i64> %894, i32 7
  %924 = getelementptr inbounds i16, i16* %246, i64 %923
  %925 = load i16, i16* %924, align 2, !tbaa !409
  %926 = insertelement <32 x i16> %922, i16 %925, i32 31
  %927 = sext i32 %read_input.s0.x.v2.base.s45 to i64
  %928 = add nsw i64 %773, %927
  %929 = getelementptr inbounds i16, i16* %read_input, i64 %928
  %930 = bitcast i16* %929 to <32 x i16>*
  store <32 x i16> %926, <32 x i16>* %930, align 2, !tbaa !412
  %931 = add nuw nsw i32 %read_input.s0.x.x.rebased44, 1
  %.not2059 = icmp eq i32 %931, %t922
  br i1 %.not2059, label %"end for read_input.s0.x.x.rebased43", label %"for read_input.s0.x.x.rebased42"

"end for read_input.s0.x.x.rebased43":            ; preds = %"for read_input.s0.x.x.rebased42", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next2505 = add nuw nsw i64 %indvars.iv2504, 1
  %.not2058 = icmp eq i64 %indvars.iv.next2505, %390
  br i1 %.not2058, label %"end for read_input.s0.y.rebased36", label %"for read_input.s0.y.rebased35"

"for read_input.s0.y.rebased46":                  ; preds = %"for read_input.s0.y.rebased46.preheader", %"end for read_input.s0.x.x50"
  %indvars.iv2508 = phi i64 [ 0, %"for read_input.s0.y.rebased46.preheader" ], [ %indvars.iv.next2509, %"end for read_input.s0.x.x50" ]
  %932 = trunc i64 %indvars.iv2508 to i32
  %a75 = add nsw i32 %t935, %932
  %933 = icmp sgt i32 %b52, %a75
  %a74 = select i1 %933, i32 %a75, i32 %b52
  br i1 %240, label %"for read_input.s0.x.x49.preheader", label %"end for read_input.s0.x.x50", !prof !406

"for read_input.s0.x.x49.preheader":              ; preds = %"for read_input.s0.y.rebased46"
  %934 = icmp sgt i32 %a74, 0
  %935 = select i1 %934, i32 %a74, i32 0
  %936 = mul nsw i32 %935, %43
  %t938 = sub nsw i32 %936, %38
  %937 = insertelement <32 x i32> undef, i32 %t938, i32 0
  %938 = shufflevector <32 x i32> %937, <32 x i32> undef, <32 x i32> zeroinitializer
  %939 = add nuw nsw i64 %562, %indvars.iv2508
  %940 = mul nsw i64 %939, %250
  br label %"for read_input.s0.x.x49"

"end for read_input.s0.y.rebased47":              ; preds = %"end for read_input.s0.x.x50", %"end for read_input.s0.y.rebased36"
  br i1 %257, label %"assert succeeded54", label %call_destructor.exit.thread2803, !prof !406

"for read_input.s0.x.x49":                        ; preds = %"for read_input.s0.x.x49.preheader", %"for read_input.s0.x.x49"
  %read_input.s0.x.x51 = phi i32 [ %1097, %"for read_input.s0.x.x49" ], [ 0, %"for read_input.s0.x.x49.preheader" ]
  %a76 = shl nsw i32 %read_input.s0.x.x51, 5
  %941 = icmp sgt i32 %b53, %a76
  %read_input.s0.x.v2.base.s52 = select i1 %941, i32 %a76, i32 %b53
  %942 = add nsw i32 %read_input.s0.x.v2.base.s52, %25
  %943 = insertelement <32 x i32> undef, i32 %942, i32 0
  %944 = shufflevector <32 x i32> %943, <32 x i32> undef, <32 x i32> zeroinitializer
  %a78 = add nsw <32 x i32> %944, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %945 = shufflevector <32 x i32> %a78, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %946 = icmp sgt <16 x i32> %243, %945
  %947 = shufflevector <32 x i32> %a78, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %948 = icmp sgt <16 x i32> %243, %947
  %949 = select <16 x i1> %946, <16 x i32> %945, <16 x i32> %243
  %950 = select <16 x i1> %948, <16 x i32> %947, <16 x i32> %243
  %951 = icmp sgt <16 x i32> %949, %245
  %952 = icmp sgt <16 x i32> %950, %245
  %953 = select <16 x i1> %951, <16 x i32> %949, <16 x i32> %245
  %954 = select <16 x i1> %952, <16 x i32> %950, <16 x i32> %245
  %955 = shufflevector <16 x i32> %953, <16 x i32> %954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %956 = add nsw <32 x i32> %955, %938
  %957 = shufflevector <32 x i32> %956, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %958 = sext <8 x i32> %957 to <8 x i64>
  %959 = extractelement <8 x i64> %958, i32 0
  %960 = getelementptr inbounds i16, i16* %246, i64 %959
  %961 = load i16, i16* %960, align 2, !tbaa !409
  %962 = insertelement <32 x i16> undef, i16 %961, i32 0
  %963 = extractelement <8 x i64> %958, i32 1
  %964 = getelementptr inbounds i16, i16* %246, i64 %963
  %965 = load i16, i16* %964, align 2, !tbaa !409
  %966 = insertelement <32 x i16> %962, i16 %965, i32 1
  %967 = extractelement <8 x i64> %958, i32 2
  %968 = getelementptr inbounds i16, i16* %246, i64 %967
  %969 = load i16, i16* %968, align 2, !tbaa !409
  %970 = insertelement <32 x i16> %966, i16 %969, i32 2
  %971 = extractelement <8 x i64> %958, i32 3
  %972 = getelementptr inbounds i16, i16* %246, i64 %971
  %973 = load i16, i16* %972, align 2, !tbaa !409
  %974 = insertelement <32 x i16> %970, i16 %973, i32 3
  %975 = extractelement <8 x i64> %958, i32 4
  %976 = getelementptr inbounds i16, i16* %246, i64 %975
  %977 = load i16, i16* %976, align 2, !tbaa !409
  %978 = insertelement <32 x i16> %974, i16 %977, i32 4
  %979 = extractelement <8 x i64> %958, i32 5
  %980 = getelementptr inbounds i16, i16* %246, i64 %979
  %981 = load i16, i16* %980, align 2, !tbaa !409
  %982 = insertelement <32 x i16> %978, i16 %981, i32 5
  %983 = extractelement <8 x i64> %958, i32 6
  %984 = getelementptr inbounds i16, i16* %246, i64 %983
  %985 = load i16, i16* %984, align 2, !tbaa !409
  %986 = insertelement <32 x i16> %982, i16 %985, i32 6
  %987 = extractelement <8 x i64> %958, i32 7
  %988 = getelementptr inbounds i16, i16* %246, i64 %987
  %989 = load i16, i16* %988, align 2, !tbaa !409
  %990 = insertelement <32 x i16> %986, i16 %989, i32 7
  %991 = shufflevector <32 x i32> %956, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %992 = sext <8 x i32> %991 to <8 x i64>
  %993 = extractelement <8 x i64> %992, i32 0
  %994 = getelementptr inbounds i16, i16* %246, i64 %993
  %995 = load i16, i16* %994, align 2, !tbaa !409
  %996 = insertelement <32 x i16> %990, i16 %995, i32 8
  %997 = extractelement <8 x i64> %992, i32 1
  %998 = getelementptr inbounds i16, i16* %246, i64 %997
  %999 = load i16, i16* %998, align 2, !tbaa !409
  %1000 = insertelement <32 x i16> %996, i16 %999, i32 9
  %1001 = extractelement <8 x i64> %992, i32 2
  %1002 = getelementptr inbounds i16, i16* %246, i64 %1001
  %1003 = load i16, i16* %1002, align 2, !tbaa !409
  %1004 = insertelement <32 x i16> %1000, i16 %1003, i32 10
  %1005 = extractelement <8 x i64> %992, i32 3
  %1006 = getelementptr inbounds i16, i16* %246, i64 %1005
  %1007 = load i16, i16* %1006, align 2, !tbaa !409
  %1008 = insertelement <32 x i16> %1004, i16 %1007, i32 11
  %1009 = extractelement <8 x i64> %992, i32 4
  %1010 = getelementptr inbounds i16, i16* %246, i64 %1009
  %1011 = load i16, i16* %1010, align 2, !tbaa !409
  %1012 = insertelement <32 x i16> %1008, i16 %1011, i32 12
  %1013 = extractelement <8 x i64> %992, i32 5
  %1014 = getelementptr inbounds i16, i16* %246, i64 %1013
  %1015 = load i16, i16* %1014, align 2, !tbaa !409
  %1016 = insertelement <32 x i16> %1012, i16 %1015, i32 13
  %1017 = extractelement <8 x i64> %992, i32 6
  %1018 = getelementptr inbounds i16, i16* %246, i64 %1017
  %1019 = load i16, i16* %1018, align 2, !tbaa !409
  %1020 = insertelement <32 x i16> %1016, i16 %1019, i32 14
  %1021 = extractelement <8 x i64> %992, i32 7
  %1022 = getelementptr inbounds i16, i16* %246, i64 %1021
  %1023 = load i16, i16* %1022, align 2, !tbaa !409
  %1024 = insertelement <32 x i16> %1020, i16 %1023, i32 15
  %1025 = shufflevector <32 x i32> %956, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1026 = sext <8 x i32> %1025 to <8 x i64>
  %1027 = extractelement <8 x i64> %1026, i32 0
  %1028 = getelementptr inbounds i16, i16* %246, i64 %1027
  %1029 = load i16, i16* %1028, align 2, !tbaa !409
  %1030 = insertelement <32 x i16> %1024, i16 %1029, i32 16
  %1031 = extractelement <8 x i64> %1026, i32 1
  %1032 = getelementptr inbounds i16, i16* %246, i64 %1031
  %1033 = load i16, i16* %1032, align 2, !tbaa !409
  %1034 = insertelement <32 x i16> %1030, i16 %1033, i32 17
  %1035 = extractelement <8 x i64> %1026, i32 2
  %1036 = getelementptr inbounds i16, i16* %246, i64 %1035
  %1037 = load i16, i16* %1036, align 2, !tbaa !409
  %1038 = insertelement <32 x i16> %1034, i16 %1037, i32 18
  %1039 = extractelement <8 x i64> %1026, i32 3
  %1040 = getelementptr inbounds i16, i16* %246, i64 %1039
  %1041 = load i16, i16* %1040, align 2, !tbaa !409
  %1042 = insertelement <32 x i16> %1038, i16 %1041, i32 19
  %1043 = extractelement <8 x i64> %1026, i32 4
  %1044 = getelementptr inbounds i16, i16* %246, i64 %1043
  %1045 = load i16, i16* %1044, align 2, !tbaa !409
  %1046 = insertelement <32 x i16> %1042, i16 %1045, i32 20
  %1047 = extractelement <8 x i64> %1026, i32 5
  %1048 = getelementptr inbounds i16, i16* %246, i64 %1047
  %1049 = load i16, i16* %1048, align 2, !tbaa !409
  %1050 = insertelement <32 x i16> %1046, i16 %1049, i32 21
  %1051 = extractelement <8 x i64> %1026, i32 6
  %1052 = getelementptr inbounds i16, i16* %246, i64 %1051
  %1053 = load i16, i16* %1052, align 2, !tbaa !409
  %1054 = insertelement <32 x i16> %1050, i16 %1053, i32 22
  %1055 = extractelement <8 x i64> %1026, i32 7
  %1056 = getelementptr inbounds i16, i16* %246, i64 %1055
  %1057 = load i16, i16* %1056, align 2, !tbaa !409
  %1058 = insertelement <32 x i16> %1054, i16 %1057, i32 23
  %1059 = shufflevector <32 x i32> %956, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1060 = sext <8 x i32> %1059 to <8 x i64>
  %1061 = extractelement <8 x i64> %1060, i32 0
  %1062 = getelementptr inbounds i16, i16* %246, i64 %1061
  %1063 = load i16, i16* %1062, align 2, !tbaa !409
  %1064 = insertelement <32 x i16> %1058, i16 %1063, i32 24
  %1065 = extractelement <8 x i64> %1060, i32 1
  %1066 = getelementptr inbounds i16, i16* %246, i64 %1065
  %1067 = load i16, i16* %1066, align 2, !tbaa !409
  %1068 = insertelement <32 x i16> %1064, i16 %1067, i32 25
  %1069 = extractelement <8 x i64> %1060, i32 2
  %1070 = getelementptr inbounds i16, i16* %246, i64 %1069
  %1071 = load i16, i16* %1070, align 2, !tbaa !409
  %1072 = insertelement <32 x i16> %1068, i16 %1071, i32 26
  %1073 = extractelement <8 x i64> %1060, i32 3
  %1074 = getelementptr inbounds i16, i16* %246, i64 %1073
  %1075 = load i16, i16* %1074, align 2, !tbaa !409
  %1076 = insertelement <32 x i16> %1072, i16 %1075, i32 27
  %1077 = extractelement <8 x i64> %1060, i32 4
  %1078 = getelementptr inbounds i16, i16* %246, i64 %1077
  %1079 = load i16, i16* %1078, align 2, !tbaa !409
  %1080 = insertelement <32 x i16> %1076, i16 %1079, i32 28
  %1081 = extractelement <8 x i64> %1060, i32 5
  %1082 = getelementptr inbounds i16, i16* %246, i64 %1081
  %1083 = load i16, i16* %1082, align 2, !tbaa !409
  %1084 = insertelement <32 x i16> %1080, i16 %1083, i32 29
  %1085 = extractelement <8 x i64> %1060, i32 6
  %1086 = getelementptr inbounds i16, i16* %246, i64 %1085
  %1087 = load i16, i16* %1086, align 2, !tbaa !409
  %1088 = insertelement <32 x i16> %1084, i16 %1087, i32 30
  %1089 = extractelement <8 x i64> %1060, i32 7
  %1090 = getelementptr inbounds i16, i16* %246, i64 %1089
  %1091 = load i16, i16* %1090, align 2, !tbaa !409
  %1092 = insertelement <32 x i16> %1088, i16 %1091, i32 31
  %1093 = sext i32 %read_input.s0.x.v2.base.s52 to i64
  %1094 = add nsw i64 %940, %1093
  %1095 = getelementptr inbounds i16, i16* %read_input, i64 %1094
  %1096 = bitcast i16* %1095 to <32 x i16>*
  store <32 x i16> %1092, <32 x i16>* %1096, align 2, !tbaa !412
  %1097 = add nuw nsw i32 %read_input.s0.x.x51, 1
  %.not2057 = icmp eq i32 %1097, %b26
  br i1 %.not2057, label %"end for read_input.s0.x.x50", label %"for read_input.s0.x.x49"

"end for read_input.s0.x.x50":                    ; preds = %"for read_input.s0.x.x49", %"for read_input.s0.y.rebased46"
  %indvars.iv.next2509 = add nuw nsw i64 %indvars.iv2508, 1
  %.not2056 = icmp eq i64 %indvars.iv2508, %563
  br i1 %.not2056, label %"end for read_input.s0.y.rebased47", label %"for read_input.s0.y.rebased46"

call_destructor.exit.thread2803:                  ; preds = %"end for read_input.s0.y.rebased47"
  %1098 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.209, i64 0, i64 0), i64 %258, i64 2147483647) #11
  br label %if.then.i2065

"assert succeeded54":                             ; preds = %"end for read_input.s0.y.rebased47"
  %1099 = load i64, i64* %.fca.1.gep1506, align 8, !tbaa !407
  %cmp.i2146 = icmp ult i64 %1099, %259
  %1100 = load i8*, i8** %.fca.0.gep1505, align 8, !tbaa !397
  br i1 %cmp.i2146, label %if.then.i2149, label %pseudostack_alloc.exit2162, !prof !408

if.then.i2149:                                    ; preds = %"assert succeeded54"
  %tobool1.not.i2148 = icmp ne i8* %1100, null
  %1101 = load i64, i64* %.fca.2.gep1507, align 8
  %cmp2.i2151 = icmp ugt i64 %1101, 16384
  %or.cond2355 = select i1 %tobool1.not.i2148, i1 %cmp2.i2151, i1 false
  br i1 %or.cond2355, label %if.then3.i2153, label %if.end.i2157

if.then3.i2153:                                   ; preds = %if.then.i2149
  call void @halide_free(i8* null, i8* nonnull %1100) #18
  br label %if.end.i2157

if.end.i2157:                                     ; preds = %if.then3.i2153, %if.then.i2149
  %add.i2155 = add i64 %1101, %259
  store i64 %add.i2155, i64* %.fca.2.gep1507, align 8, !tbaa !399
  %cmp7.i2156 = icmp ugt i64 %add.i2155, 16384
  br i1 %cmp7.i2156, label %if.then8.i2159, label %if.end11.i2161

if.then8.i2159:                                   ; preds = %if.end.i2157
  %call.i2158 = call i8* @halide_malloc(i8* null, i64 %259) #18
  br label %if.end11.i2161

if.end11.i2161:                                   ; preds = %if.then8.i2159, %if.end.i2157
  %storemerge.i2160 = phi i8* [ %call.i2158, %if.then8.i2159 ], [ null, %if.end.i2157 ]
  store i8* %storemerge.i2160, i8** %.fca.0.gep1505, align 8, !tbaa !397
  store i64 %259, i64* %.fca.1.gep1506, align 8, !tbaa !407
  br label %pseudostack_alloc.exit2162

pseudostack_alloc.exit2162:                       ; preds = %"assert succeeded54", %if.end11.i2161
  %1102 = phi i8* [ %storemerge.i2160, %if.end11.i2161 ], [ %1100, %"assert succeeded54" ]
  %1103 = bitcast i8* %1102 to i16*
  %.not1858 = icmp eq i8* %1102, null
  br i1 %.not1858, label %then_bb56, label %"produce blur_x", !prof !396

then_bb56:                                        ; preds = %pseudostack_alloc.exit2162
  %1104 = alloca i8*, i64 %259, align 64
  %1105 = bitcast i8** %1104 to i16*
  store i8** %1104, i8*** %261, align 8
  br label %"produce blur_x"

"produce blur_x":                                 ; preds = %then_bb56, %pseudostack_alloc.exit2162
  %blur_x = phi i16* [ %1105, %then_bb56 ], [ %1103, %pseudostack_alloc.exit2162 ]
  %1106 = getelementptr inbounds i16, i16* %read_input, i64 1
  %1107 = bitcast i16* %1106 to <32 x i16>*
  %1108 = load <32 x i16>, <32 x i16>* %1107, align 2, !tbaa !415
  %1109 = getelementptr inbounds i16, i16* %read_input, i64 2
  %1110 = bitcast i16* %1109 to <32 x i16>*
  %1111 = load <32 x i16>, <32 x i16>* %1110, align 4, !tbaa !415
  %1112 = bitcast i16* %read_input to <32 x i16>*
  %1113 = load <32 x i16>, <32 x i16>* %1112, align 64, !tbaa !421
  %1114 = add <32 x i16> %1111, %1108
  %1115 = add <32 x i16> %1114, %1113
  %1116 = shufflevector <32 x i16> %1115, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1117 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1116, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1118 = shufflevector <32 x i16> %1115, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1119 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1118, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1120 = shufflevector <16 x i16> %1117, <16 x i16> %1119, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1121 = lshr <32 x i16> %1120, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1122 = and i32 %a42, 3
  %1123 = zext i32 %1122 to i64
  %1124 = mul nsw i64 %1123, %142
  %1125 = getelementptr inbounds i16, i16* %blur_x, i64 %1124
  %1126 = bitcast i16* %1125 to <32 x i16>*
  store <32 x i16> %1121, <32 x i16>* %1126, align 2, !tbaa !423
  %t939 = mul nsw i32 %1122, %26
  br i1 %262, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !406

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %"produce blur_x"
  %1127 = sext i32 %t939 to i64
  %1128 = add nsw i64 %1127, 32
  br i1 %352, label %"end for blur_y.s0.x.x.rebased.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased"

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %"for blur_y.s0.x.x.rebased"
  %indvars.iv2510 = phi i64 [ %indvars.iv.next2511.1, %"for blur_y.s0.x.x.rebased" ], [ 0, %"for blur_y.s0.x.x.rebased.preheader" ]
  %niter2810 = phi i64 [ %niter2810.nsub.1, %"for blur_y.s0.x.x.rebased" ], [ %unroll_iter2809, %"for blur_y.s0.x.x.rebased.preheader" ]
  %1129 = shl nuw nsw i64 %indvars.iv2510, 5
  %1130 = getelementptr inbounds i16, i16* %read_input, i64 %1129
  %1131 = getelementptr inbounds i16, i16* %1130, i64 33
  %1132 = bitcast i16* %1131 to <32 x i16>*
  %1133 = load <32 x i16>, <32 x i16>* %1132, align 2, !tbaa !412
  %1134 = getelementptr inbounds i16, i16* %1130, i64 34
  %1135 = bitcast i16* %1134 to <32 x i16>*
  %1136 = load <32 x i16>, <32 x i16>* %1135, align 4, !tbaa !412
  %1137 = getelementptr inbounds i16, i16* %1130, i64 32
  %1138 = bitcast i16* %1137 to <32 x i16>*
  %1139 = load <32 x i16>, <32 x i16>* %1138, align 64, !tbaa !412
  %1140 = add <32 x i16> %1136, %1133
  %1141 = add <32 x i16> %1140, %1139
  %1142 = shufflevector <32 x i16> %1141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1143 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1142, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1144 = shufflevector <32 x i16> %1141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1144, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1146 = shufflevector <16 x i16> %1143, <16 x i16> %1145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1147 = lshr <32 x i16> %1146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx2054 = add nsw i64 %1128, %1129
  %1148 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2054
  %1149 = bitcast i16* %1148 to <32 x i16>*
  store <32 x i16> %1147, <32 x i16>* %1149, align 2, !tbaa !423
  %indvars.iv.next2511 = shl i64 %indvars.iv2510, 5
  %1150 = or i64 %indvars.iv.next2511, 32
  %1151 = getelementptr inbounds i16, i16* %read_input, i64 %1150
  %1152 = getelementptr inbounds i16, i16* %1151, i64 33
  %1153 = bitcast i16* %1152 to <32 x i16>*
  %1154 = load <32 x i16>, <32 x i16>* %1153, align 2, !tbaa !412
  %1155 = getelementptr inbounds i16, i16* %1151, i64 34
  %1156 = bitcast i16* %1155 to <32 x i16>*
  %1157 = load <32 x i16>, <32 x i16>* %1156, align 4, !tbaa !412
  %1158 = getelementptr inbounds i16, i16* %1151, i64 32
  %1159 = bitcast i16* %1158 to <32 x i16>*
  %1160 = load <32 x i16>, <32 x i16>* %1159, align 64, !tbaa !412
  %1161 = add <32 x i16> %1157, %1154
  %1162 = add <32 x i16> %1161, %1160
  %1163 = shufflevector <32 x i16> %1162, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1164 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1163, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1165 = shufflevector <32 x i16> %1162, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1166 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1165, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1167 = shufflevector <16 x i16> %1164, <16 x i16> %1166, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1168 = lshr <32 x i16> %1167, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx2054.1 = add nsw i64 %1128, %1150
  %1169 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2054.1
  %1170 = bitcast i16* %1169 to <32 x i16>*
  store <32 x i16> %1168, <32 x i16>* %1170, align 2, !tbaa !423
  %indvars.iv.next2511.1 = add nuw nsw i64 %indvars.iv2510, 2
  %niter2810.nsub.1 = add i64 %niter2810, -2
  %niter2810.ncmp.1 = icmp eq i64 %niter2810.nsub.1, 0
  br i1 %niter2810.ncmp.1, label %"end for blur_y.s0.x.x.rebased.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased"

"end for blur_y.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for blur_y.s0.x.x.rebased", %"for blur_y.s0.x.x.rebased.preheader"
  %indvars.iv2510.unr = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next2511.1, %"for blur_y.s0.x.x.rebased" ]
  br i1 %lcmp.mod2808.not, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased.epil"

"for blur_y.s0.x.x.rebased.epil":                 ; preds = %"end for blur_y.s0.x.x.rebased.loopexit.unr-lcssa"
  %1171 = shl nuw nsw i64 %indvars.iv2510.unr, 5
  %1172 = getelementptr inbounds i16, i16* %read_input, i64 %1171
  %1173 = getelementptr inbounds i16, i16* %1172, i64 33
  %1174 = bitcast i16* %1173 to <32 x i16>*
  %1175 = load <32 x i16>, <32 x i16>* %1174, align 2, !tbaa !412
  %1176 = getelementptr inbounds i16, i16* %1172, i64 34
  %1177 = bitcast i16* %1176 to <32 x i16>*
  %1178 = load <32 x i16>, <32 x i16>* %1177, align 4, !tbaa !412
  %1179 = getelementptr inbounds i16, i16* %1172, i64 32
  %1180 = bitcast i16* %1179 to <32 x i16>*
  %1181 = load <32 x i16>, <32 x i16>* %1180, align 64, !tbaa !412
  %1182 = add <32 x i16> %1178, %1175
  %1183 = add <32 x i16> %1182, %1181
  %1184 = shufflevector <32 x i16> %1183, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1185 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1184, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1186 = shufflevector <32 x i16> %1183, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1187 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1186, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1188 = shufflevector <16 x i16> %1185, <16 x i16> %1187, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1189 = lshr <32 x i16> %1188, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx2054.epil = add nsw i64 %1128, %1171
  %1190 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2054.epil
  %1191 = bitcast i16* %1190 to <32 x i16>*
  store <32 x i16> %1189, <32 x i16>* %1191, align 2, !tbaa !423
  br label %"end for blur_y.s0.x.x.rebased"

"end for blur_y.s0.x.x.rebased":                  ; preds = %"for blur_y.s0.x.x.rebased.epil", %"end for blur_y.s0.x.x.rebased.loopexit.unr-lcssa", %"produce blur_x"
  br i1 %.not1855, label %"produce blur_x62", label %"produce blur_x61"

"produce blur_x61":                               ; preds = %"end for blur_y.s0.x.x.rebased"
  %1192 = getelementptr inbounds i16, i16* %read_input, i64 %263
  %1193 = getelementptr inbounds i16, i16* %1192, i64 1
  %1194 = bitcast i16* %1193 to <32 x i16>*
  %1195 = load <32 x i16>, <32 x i16>* %1194, align 2, !tbaa !412
  %1196 = getelementptr inbounds i16, i16* %1192, i64 2
  %1197 = bitcast i16* %1196 to <32 x i16>*
  %1198 = load <32 x i16>, <32 x i16>* %1197, align 2, !tbaa !412
  %1199 = bitcast i16* %1192 to <32 x i16>*
  %1200 = load <32 x i16>, <32 x i16>* %1199, align 2, !tbaa !412
  %1201 = add <32 x i16> %1198, %1195
  %1202 = add <32 x i16> %1201, %1200
  %1203 = shufflevector <32 x i16> %1202, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1204 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1203, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1205 = shufflevector <32 x i16> %1202, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1205, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1207 = shufflevector <16 x i16> %1204, <16 x i16> %1206, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1208 = lshr <32 x i16> %1207, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1209 = add nsw i64 %1124, %263
  %1210 = getelementptr inbounds i16, i16* %blur_x, i64 %1209
  %1211 = bitcast i16* %1210 to <32 x i16>*
  store <32 x i16> %1208, <32 x i16>* %1211, align 2, !tbaa !423
  br label %"produce blur_x62"

"produce blur_x62":                               ; preds = %"end for blur_y.s0.x.x.rebased", %"produce blur_x61"
  %1212 = getelementptr inbounds i16, i16* %read_input, i64 %250
  %1213 = getelementptr inbounds i16, i16* %1212, i64 1
  %1214 = bitcast i16* %1213 to <32 x i16>*
  %1215 = load <32 x i16>, <32 x i16>* %1214, align 2, !tbaa !412
  %1216 = getelementptr inbounds i16, i16* %1212, i64 2
  %1217 = bitcast i16* %1216 to <32 x i16>*
  %1218 = load <32 x i16>, <32 x i16>* %1217, align 2, !tbaa !412
  %1219 = bitcast i16* %1212 to <32 x i16>*
  %1220 = load <32 x i16>, <32 x i16>* %1219, align 2, !tbaa !412
  %1221 = add <32 x i16> %1218, %1215
  %1222 = add <32 x i16> %1221, %1220
  %1223 = shufflevector <32 x i16> %1222, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1224 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1223, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1225 = shufflevector <32 x i16> %1222, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1226 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1225, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1227 = shufflevector <16 x i16> %1224, <16 x i16> %1226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1228 = lshr <32 x i16> %1227, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1229 = add nsw i32 %a42, 1
  %1230 = and i32 %1229, 3
  %1231 = zext i32 %1230 to i64
  %1232 = mul nsw i64 %1231, %142
  %1233 = getelementptr inbounds i16, i16* %blur_x, i64 %1232
  %1234 = bitcast i16* %1233 to <32 x i16>*
  store <32 x i16> %1228, <32 x i16>* %1234, align 2, !tbaa !423
  %t941 = mul nsw i32 %1230, %26
  br i1 %262, label %"for blur_y.s0.x.x.rebased63.preheader", label %"end for blur_y.s0.x.x.rebased64", !prof !406

"for blur_y.s0.x.x.rebased63.preheader":          ; preds = %"produce blur_x62"
  %1235 = sext i32 %t941 to i64
  %1236 = add nsw i64 %1235, 32
  br i1 %353, label %"end for blur_y.s0.x.x.rebased64.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased63"

"for blur_y.s0.x.x.rebased63":                    ; preds = %"for blur_y.s0.x.x.rebased63.preheader", %"for blur_y.s0.x.x.rebased63"
  %indvars.iv2512 = phi i64 [ %indvars.iv.next2513.1, %"for blur_y.s0.x.x.rebased63" ], [ 0, %"for blur_y.s0.x.x.rebased63.preheader" ]
  %niter2814 = phi i64 [ %niter2814.nsub.1, %"for blur_y.s0.x.x.rebased63" ], [ %unroll_iter2813, %"for blur_y.s0.x.x.rebased63.preheader" ]
  %1237 = shl nsw i64 %indvars.iv2512, 5
  %1238 = add nsw i64 %1237, %250
  %1239 = getelementptr inbounds i16, i16* %read_input, i64 %1238
  %1240 = getelementptr inbounds i16, i16* %1239, i64 33
  %1241 = bitcast i16* %1240 to <32 x i16>*
  %1242 = load <32 x i16>, <32 x i16>* %1241, align 2, !tbaa !412
  %1243 = getelementptr inbounds i16, i16* %1239, i64 34
  %1244 = bitcast i16* %1243 to <32 x i16>*
  %1245 = load <32 x i16>, <32 x i16>* %1244, align 2, !tbaa !412
  %1246 = getelementptr inbounds i16, i16* %1239, i64 32
  %1247 = bitcast i16* %1246 to <32 x i16>*
  %1248 = load <32 x i16>, <32 x i16>* %1247, align 2, !tbaa !412
  %1249 = add <32 x i16> %1245, %1242
  %1250 = add <32 x i16> %1249, %1248
  %1251 = shufflevector <32 x i16> %1250, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1252 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1251, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1253 = shufflevector <32 x i16> %1250, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1254 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1253, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1255 = shufflevector <16 x i16> %1252, <16 x i16> %1254, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1256 = lshr <32 x i16> %1255, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx2052 = add nsw i64 %1236, %1237
  %1257 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2052
  %1258 = bitcast i16* %1257 to <32 x i16>*
  store <32 x i16> %1256, <32 x i16>* %1258, align 2, !tbaa !423
  %indvars.iv.next2513 = shl i64 %indvars.iv2512, 5
  %1259 = or i64 %indvars.iv.next2513, 32
  %1260 = add nsw i64 %1259, %250
  %1261 = getelementptr inbounds i16, i16* %read_input, i64 %1260
  %1262 = getelementptr inbounds i16, i16* %1261, i64 33
  %1263 = bitcast i16* %1262 to <32 x i16>*
  %1264 = load <32 x i16>, <32 x i16>* %1263, align 2, !tbaa !412
  %1265 = getelementptr inbounds i16, i16* %1261, i64 34
  %1266 = bitcast i16* %1265 to <32 x i16>*
  %1267 = load <32 x i16>, <32 x i16>* %1266, align 2, !tbaa !412
  %1268 = getelementptr inbounds i16, i16* %1261, i64 32
  %1269 = bitcast i16* %1268 to <32 x i16>*
  %1270 = load <32 x i16>, <32 x i16>* %1269, align 2, !tbaa !412
  %1271 = add <32 x i16> %1267, %1264
  %1272 = add <32 x i16> %1271, %1270
  %1273 = shufflevector <32 x i16> %1272, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1274 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1273, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1275 = shufflevector <32 x i16> %1272, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1276 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1275, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1277 = shufflevector <16 x i16> %1274, <16 x i16> %1276, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1278 = lshr <32 x i16> %1277, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx2052.1 = add nsw i64 %1236, %1259
  %1279 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2052.1
  %1280 = bitcast i16* %1279 to <32 x i16>*
  store <32 x i16> %1278, <32 x i16>* %1280, align 2, !tbaa !423
  %indvars.iv.next2513.1 = add nuw nsw i64 %indvars.iv2512, 2
  %niter2814.nsub.1 = add i64 %niter2814, -2
  %niter2814.ncmp.1 = icmp eq i64 %niter2814.nsub.1, 0
  br i1 %niter2814.ncmp.1, label %"end for blur_y.s0.x.x.rebased64.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased63"

"end for blur_y.s0.x.x.rebased64.loopexit.unr-lcssa": ; preds = %"for blur_y.s0.x.x.rebased63", %"for blur_y.s0.x.x.rebased63.preheader"
  %indvars.iv2512.unr = phi i64 [ 0, %"for blur_y.s0.x.x.rebased63.preheader" ], [ %indvars.iv.next2513.1, %"for blur_y.s0.x.x.rebased63" ]
  br i1 %lcmp.mod2812.not, label %"end for blur_y.s0.x.x.rebased64", label %"for blur_y.s0.x.x.rebased63.epil"

"for blur_y.s0.x.x.rebased63.epil":               ; preds = %"end for blur_y.s0.x.x.rebased64.loopexit.unr-lcssa"
  %1281 = shl nsw i64 %indvars.iv2512.unr, 5
  %1282 = add nsw i64 %1281, %250
  %1283 = getelementptr inbounds i16, i16* %read_input, i64 %1282
  %1284 = getelementptr inbounds i16, i16* %1283, i64 33
  %1285 = bitcast i16* %1284 to <32 x i16>*
  %1286 = load <32 x i16>, <32 x i16>* %1285, align 2, !tbaa !412
  %1287 = getelementptr inbounds i16, i16* %1283, i64 34
  %1288 = bitcast i16* %1287 to <32 x i16>*
  %1289 = load <32 x i16>, <32 x i16>* %1288, align 2, !tbaa !412
  %1290 = getelementptr inbounds i16, i16* %1283, i64 32
  %1291 = bitcast i16* %1290 to <32 x i16>*
  %1292 = load <32 x i16>, <32 x i16>* %1291, align 2, !tbaa !412
  %1293 = add <32 x i16> %1289, %1286
  %1294 = add <32 x i16> %1293, %1292
  %1295 = shufflevector <32 x i16> %1294, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1296 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1295, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1297 = shufflevector <32 x i16> %1294, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1298 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1297, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1299 = shufflevector <16 x i16> %1296, <16 x i16> %1298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1300 = lshr <32 x i16> %1299, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx2052.epil = add nsw i64 %1236, %1281
  %1301 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2052.epil
  %1302 = bitcast i16* %1301 to <32 x i16>*
  store <32 x i16> %1300, <32 x i16>* %1302, align 2, !tbaa !423
  br label %"end for blur_y.s0.x.x.rebased64"

"end for blur_y.s0.x.x.rebased64":                ; preds = %"for blur_y.s0.x.x.rebased63.epil", %"end for blur_y.s0.x.x.rebased64.loopexit.unr-lcssa", %"produce blur_x62"
  br i1 %.not1855, label %"produce blur_x71", label %"produce blur_x70"

"produce blur_x70":                               ; preds = %"end for blur_y.s0.x.x.rebased64"
  %1303 = getelementptr inbounds i16, i16* %read_input, i64 %266
  %1304 = getelementptr inbounds i16, i16* %1303, i64 1
  %1305 = bitcast i16* %1304 to <32 x i16>*
  %1306 = load <32 x i16>, <32 x i16>* %1305, align 2, !tbaa !412
  %1307 = getelementptr inbounds i16, i16* %1303, i64 2
  %1308 = bitcast i16* %1307 to <32 x i16>*
  %1309 = load <32 x i16>, <32 x i16>* %1308, align 2, !tbaa !412
  %1310 = bitcast i16* %1303 to <32 x i16>*
  %1311 = load <32 x i16>, <32 x i16>* %1310, align 2, !tbaa !412
  %1312 = add <32 x i16> %1309, %1306
  %1313 = add <32 x i16> %1312, %1311
  %1314 = shufflevector <32 x i16> %1313, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1315 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1314, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1316 = shufflevector <32 x i16> %1313, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1317 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1316, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1318 = shufflevector <16 x i16> %1315, <16 x i16> %1317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1319 = lshr <32 x i16> %1318, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1320 = add nsw i64 %1232, %263
  %1321 = getelementptr inbounds i16, i16* %blur_x, i64 %1320
  %1322 = bitcast i16* %1321 to <32 x i16>*
  store <32 x i16> %1319, <32 x i16>* %1322, align 2, !tbaa !423
  br label %"produce blur_x71"

"produce blur_x71":                               ; preds = %"end for blur_y.s0.x.x.rebased64", %"produce blur_x70"
  %1323 = getelementptr inbounds i16, i16* %read_input, i64 %267
  %1324 = getelementptr inbounds i16, i16* %1323, i64 1
  %1325 = bitcast i16* %1324 to <32 x i16>*
  %1326 = load <32 x i16>, <32 x i16>* %1325, align 2, !tbaa !412
  %1327 = getelementptr inbounds i16, i16* %1323, i64 2
  %1328 = bitcast i16* %1327 to <32 x i16>*
  %1329 = load <32 x i16>, <32 x i16>* %1328, align 4, !tbaa !412
  %1330 = bitcast i16* %1323 to <32 x i16>*
  %1331 = load <32 x i16>, <32 x i16>* %1330, align 4, !tbaa !412
  %1332 = add <32 x i16> %1329, %1326
  %1333 = add <32 x i16> %1332, %1331
  %1334 = shufflevector <32 x i16> %1333, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1334, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1336 = shufflevector <32 x i16> %1333, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1337 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1336, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1338 = shufflevector <16 x i16> %1335, <16 x i16> %1337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1339 = lshr <32 x i16> %1338, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1340 = add nsw i32 %a42, 2
  %1341 = and i32 %1340, 3
  %1342 = zext i32 %1341 to i64
  %1343 = mul nsw i64 %1342, %142
  %1344 = getelementptr inbounds i16, i16* %blur_x, i64 %1343
  %1345 = bitcast i16* %1344 to <32 x i16>*
  store <32 x i16> %1339, <32 x i16>* %1345, align 2, !tbaa !423
  %1346 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %1347 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %1348 = add <32 x i16> %1346, %1339
  %1349 = add <32 x i16> %1348, %1347
  %1350 = shufflevector <32 x i16> %1349, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1351 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1350, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1352 = shufflevector <32 x i16> %1349, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1353 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1352, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1354 = shufflevector <16 x i16> %1351, <16 x i16> %1353, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1355 = lshr <32 x i16> %1354, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1356 = sext i32 %blur_y.s0.y.yi.base.s2476 to i64
  %1357 = mul nsw i64 %1356, %146
  %1358 = getelementptr inbounds i16, i16* %268, i64 %1357
  %1359 = bitcast i16* %1358 to <32 x i16>*
  store <32 x i16> %1355, <32 x i16>* %1359, align 2, !tbaa !425
  %t942 = mul nsw i32 %1341, %26
  br i1 %262, label %"for blur_y.s0.x.x.rebased72.preheader", label %"end for blur_y.s0.x.x.rebased73", !prof !406

"for blur_y.s0.x.x.rebased72.preheader":          ; preds = %"produce blur_x71"
  %1360 = sext i32 %t942 to i64
  %1361 = add nsw i64 %1360, 32
  %1362 = add nsw i64 %1232, 32
  %1363 = add nsw i64 %1343, 32
  %1364 = add nsw i64 %1124, 32
  %1365 = sext i32 %a42 to i64
  %1366 = mul nsw i64 %1365, %146
  br label %"for blur_y.s0.x.x.rebased72"

"for blur_y.s0.x.x.rebased72":                    ; preds = %"for blur_y.s0.x.x.rebased72.preheader", %"consume blur_x79"
  %indvars.iv2515 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased72.preheader" ], [ %indvars.iv.next2516, %"consume blur_x79" ]
  %1367 = trunc i64 %indvars.iv2515 to i32
  %1368 = shl nsw i32 %1367, 5
  %1369 = icmp sgt i32 %b37, %1368
  br i1 %1369, label %"produce blur_x78", label %"for blur_y.s0.x.x.rebased72.consume blur_x79_crit_edge"

"for blur_y.s0.x.x.rebased72.consume blur_x79_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased72"
  %.pre2733 = shl nuw nsw i64 %indvars.iv2515, 5
  br label %"consume blur_x79"

"end for blur_y.s0.x.x.rebased73":                ; preds = %"consume blur_x79", %"produce blur_x71"
  br i1 %.not1855, label %"produce blur_x86", label %"produce blur_x83"

"produce blur_x78":                               ; preds = %"for blur_y.s0.x.x.rebased72"
  %1370 = shl nsw i32 %1367, 4
  %t783 = add nsw i32 %1370, %a40
  %1371 = sext i32 %t783 to i64
  %1372 = shl nsw i64 %1371, 1
  %1373 = getelementptr inbounds i16, i16* %read_input, i64 %1372
  %1374 = getelementptr inbounds i16, i16* %1373, i64 33
  %1375 = bitcast i16* %1374 to <32 x i16>*
  %1376 = load <32 x i16>, <32 x i16>* %1375, align 2, !tbaa !412
  %1377 = getelementptr inbounds i16, i16* %1373, i64 34
  %1378 = bitcast i16* %1377 to <32 x i16>*
  %1379 = load <32 x i16>, <32 x i16>* %1378, align 4, !tbaa !412
  %1380 = getelementptr inbounds i16, i16* %1373, i64 32
  %1381 = bitcast i16* %1380 to <32 x i16>*
  %1382 = load <32 x i16>, <32 x i16>* %1381, align 4, !tbaa !412
  %1383 = add <32 x i16> %1379, %1376
  %1384 = add <32 x i16> %1383, %1382
  %1385 = shufflevector <32 x i16> %1384, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1386 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1385, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1387 = shufflevector <32 x i16> %1384, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1388 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1387, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1389 = shufflevector <16 x i16> %1386, <16 x i16> %1388, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1390 = lshr <32 x i16> %1389, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1391 = shl nuw nsw i64 %indvars.iv2515, 5
  %.idx2051 = add nsw i64 %1361, %1391
  %1392 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2051
  %1393 = bitcast i16* %1392 to <32 x i16>*
  store <32 x i16> %1390, <32 x i16>* %1393, align 2, !tbaa !423
  br label %"consume blur_x79"

"consume blur_x79":                               ; preds = %"for blur_y.s0.x.x.rebased72.consume blur_x79_crit_edge", %"produce blur_x78"
  %.pre-phi2734 = phi i64 [ %.pre2733, %"for blur_y.s0.x.x.rebased72.consume blur_x79_crit_edge" ], [ %1391, %"produce blur_x78" ]
  %.idx2046 = add nsw i64 %1362, %.pre-phi2734
  %1394 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2046
  %1395 = bitcast i16* %1394 to <32 x i16>*
  %1396 = load <32 x i16>, <32 x i16>* %1395, align 2, !tbaa !423
  %.idx2047 = add nsw i64 %1363, %.pre-phi2734
  %1397 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2047
  %1398 = bitcast i16* %1397 to <32 x i16>*
  %1399 = load <32 x i16>, <32 x i16>* %1398, align 2, !tbaa !423
  %.idx2048 = add nsw i64 %1364, %.pre-phi2734
  %1400 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2048
  %1401 = bitcast i16* %1400 to <32 x i16>*
  %1402 = load <32 x i16>, <32 x i16>* %1401, align 2, !tbaa !423
  %1403 = add <32 x i16> %1399, %1396
  %1404 = add <32 x i16> %1403, %1402
  %1405 = shufflevector <32 x i16> %1404, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1406 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1405, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1407 = shufflevector <32 x i16> %1404, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1407, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1409 = shufflevector <16 x i16> %1406, <16 x i16> %1408, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1410 = lshr <32 x i16> %1409, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1411 = add nuw nsw i64 %.pre-phi2734, 32
  %1412 = add nsw i64 %1411, %269
  %.idx2049 = add i64 %1412, %1366
  %1413 = getelementptr inbounds i16, i16* %268, i64 %.idx2049
  %1414 = bitcast i16* %1413 to <32 x i16>*
  store <32 x i16> %1410, <32 x i16>* %1414, align 2, !tbaa !425
  %indvars.iv.next2516 = add nuw nsw i64 %indvars.iv2515, 1
  %.not2050 = icmp eq i64 %indvars.iv.next2516, %348
  br i1 %.not2050, label %"end for blur_y.s0.x.x.rebased73", label %"for blur_y.s0.x.x.rebased72"

"produce blur_x83":                               ; preds = %"end for blur_y.s0.x.x.rebased73"
  %1415 = getelementptr inbounds i16, i16* %read_input, i64 %270
  %1416 = getelementptr inbounds i16, i16* %1415, i64 1
  %1417 = bitcast i16* %1416 to <32 x i16>*
  %1418 = load <32 x i16>, <32 x i16>* %1417, align 2, !tbaa !412
  %1419 = getelementptr inbounds i16, i16* %1415, i64 2
  %1420 = bitcast i16* %1419 to <32 x i16>*
  %1421 = load <32 x i16>, <32 x i16>* %1420, align 2, !tbaa !412
  %1422 = bitcast i16* %1415 to <32 x i16>*
  %1423 = load <32 x i16>, <32 x i16>* %1422, align 2, !tbaa !412
  %1424 = add <32 x i16> %1421, %1418
  %1425 = add <32 x i16> %1424, %1423
  %1426 = shufflevector <32 x i16> %1425, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1427 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1426, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1428 = shufflevector <32 x i16> %1425, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1429 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1428, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1430 = shufflevector <16 x i16> %1427, <16 x i16> %1429, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1431 = lshr <32 x i16> %1430, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1432 = add nsw i64 %1343, %263
  %1433 = getelementptr inbounds i16, i16* %blur_x, i64 %1432
  %1434 = bitcast i16* %1433 to <32 x i16>*
  store <32 x i16> %1431, <32 x i16>* %1434, align 2, !tbaa !423
  %1435 = add nsw i64 %1232, %263
  %1436 = getelementptr inbounds i16, i16* %blur_x, i64 %1435
  %1437 = bitcast i16* %1436 to <32 x i16>*
  %1438 = load <32 x i16>, <32 x i16>* %1437, align 2, !tbaa !423
  %1439 = add nsw i64 %1124, %263
  %1440 = getelementptr inbounds i16, i16* %blur_x, i64 %1439
  %1441 = bitcast i16* %1440 to <32 x i16>*
  %1442 = load <32 x i16>, <32 x i16>* %1441, align 2, !tbaa !423
  %1443 = add <32 x i16> %1438, %1431
  %1444 = add <32 x i16> %1443, %1442
  %1445 = shufflevector <32 x i16> %1444, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1446 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1445, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1447 = shufflevector <32 x i16> %1444, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1448 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1447, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1449 = shufflevector <16 x i16> %1446, <16 x i16> %1448, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1450 = lshr <32 x i16> %1449, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1451 = sext i32 %a42 to i64
  %1452 = mul nsw i64 %1451, %146
  %1453 = add nsw i64 %272, %1452
  %1454 = getelementptr inbounds i16, i16* %268, i64 %1453
  %1455 = bitcast i16* %1454 to <32 x i16>*
  store <32 x i16> %1450, <32 x i16>* %1455, align 2, !tbaa !425
  br label %"produce blur_x86"

"produce blur_x86":                               ; preds = %"end for blur_y.s0.x.x.rebased73", %"produce blur_x83"
  %1456 = getelementptr inbounds i16, i16* %read_input, i64 %273
  %1457 = getelementptr inbounds i16, i16* %1456, i64 1
  %1458 = bitcast i16* %1457 to <32 x i16>*
  %1459 = load <32 x i16>, <32 x i16>* %1458, align 2, !tbaa !412
  %1460 = getelementptr inbounds i16, i16* %1456, i64 2
  %1461 = bitcast i16* %1460 to <32 x i16>*
  %1462 = load <32 x i16>, <32 x i16>* %1461, align 2, !tbaa !412
  %1463 = bitcast i16* %1456 to <32 x i16>*
  %1464 = load <32 x i16>, <32 x i16>* %1463, align 2, !tbaa !412
  %1465 = add <32 x i16> %1462, %1459
  %1466 = add <32 x i16> %1465, %1464
  %1467 = shufflevector <32 x i16> %1466, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1467, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1469 = shufflevector <32 x i16> %1466, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1469, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1471 = shufflevector <16 x i16> %1468, <16 x i16> %1470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1472 = lshr <32 x i16> %1471, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1473 = add nsw i32 %a42, 3
  %1474 = and i32 %1473, 3
  %1475 = zext i32 %1474 to i64
  %1476 = mul nsw i64 %1475, %142
  %1477 = getelementptr inbounds i16, i16* %blur_x, i64 %1476
  %1478 = bitcast i16* %1477 to <32 x i16>*
  store <32 x i16> %1472, <32 x i16>* %1478, align 2, !tbaa !423
  %1479 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %1480 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %1481 = add <32 x i16> %1479, %1472
  %1482 = add <32 x i16> %1481, %1480
  %1483 = shufflevector <32 x i16> %1482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1484 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1483, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1485 = shufflevector <32 x i16> %1482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1485, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1487 = shufflevector <16 x i16> %1484, <16 x i16> %1486, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1488 = lshr <32 x i16> %1487, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1489 = add nsw i64 %1356, 1
  %1490 = mul nsw i64 %1489, %146
  %1491 = getelementptr inbounds i16, i16* %268, i64 %1490
  %1492 = bitcast i16* %1491 to <32 x i16>*
  store <32 x i16> %1488, <32 x i16>* %1492, align 2, !tbaa !425
  %t947 = mul nsw i32 %1474, %26
  br i1 %262, label %"for blur_y.s0.x.x.rebased88.preheader", label %"end for blur_y.s0.x.x.rebased89", !prof !406

"for blur_y.s0.x.x.rebased88.preheader":          ; preds = %"produce blur_x86"
  %1493 = sext i32 %t947 to i64
  %1494 = add nsw i64 %1493, 32
  %1495 = add nsw i64 %1343, 32
  %1496 = add nsw i64 %1476, 32
  %1497 = add nsw i64 %1232, 32
  %1498 = sext i32 %a42 to i64
  %1499 = add nsw i64 %1498, 1
  %1500 = mul nsw i64 %1499, %146
  br label %"for blur_y.s0.x.x.rebased88"

"for blur_y.s0.x.x.rebased88":                    ; preds = %"for blur_y.s0.x.x.rebased88.preheader", %"consume blur_x95"
  %indvars.iv2517 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased88.preheader" ], [ %indvars.iv.next2518, %"consume blur_x95" ]
  %1501 = trunc i64 %indvars.iv2517 to i32
  %1502 = shl nsw i32 %1501, 5
  %1503 = icmp sgt i32 %b37, %1502
  br i1 %1503, label %"produce blur_x94", label %"for blur_y.s0.x.x.rebased88.consume blur_x95_crit_edge"

"for blur_y.s0.x.x.rebased88.consume blur_x95_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased88"
  %.pre2735 = shl nuw nsw i64 %indvars.iv2517, 5
  br label %"consume blur_x95"

"end for blur_y.s0.x.x.rebased89":                ; preds = %"consume blur_x95", %"produce blur_x86"
  br i1 %.not1855, label %"produce blur_x102", label %"produce blur_x99"

"produce blur_x94":                               ; preds = %"for blur_y.s0.x.x.rebased88"
  %t582.s = add nsw i32 %1502, %t946
  %1504 = sext i32 %t582.s to i64
  %1505 = getelementptr inbounds i16, i16* %read_input, i64 %1504
  %1506 = getelementptr inbounds i16, i16* %1505, i64 33
  %1507 = bitcast i16* %1506 to <32 x i16>*
  %1508 = load <32 x i16>, <32 x i16>* %1507, align 2, !tbaa !412
  %1509 = getelementptr inbounds i16, i16* %1505, i64 34
  %1510 = bitcast i16* %1509 to <32 x i16>*
  %1511 = load <32 x i16>, <32 x i16>* %1510, align 2, !tbaa !412
  %1512 = getelementptr inbounds i16, i16* %1505, i64 32
  %1513 = bitcast i16* %1512 to <32 x i16>*
  %1514 = load <32 x i16>, <32 x i16>* %1513, align 2, !tbaa !412
  %1515 = add <32 x i16> %1511, %1508
  %1516 = add <32 x i16> %1515, %1514
  %1517 = shufflevector <32 x i16> %1516, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1517, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1519 = shufflevector <32 x i16> %1516, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1520 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1519, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1521 = shufflevector <16 x i16> %1518, <16 x i16> %1520, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1522 = lshr <32 x i16> %1521, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1523 = shl nuw nsw i64 %indvars.iv2517, 5
  %.idx2045 = add nsw i64 %1494, %1523
  %1524 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2045
  %1525 = bitcast i16* %1524 to <32 x i16>*
  store <32 x i16> %1522, <32 x i16>* %1525, align 2, !tbaa !423
  br label %"consume blur_x95"

"consume blur_x95":                               ; preds = %"for blur_y.s0.x.x.rebased88.consume blur_x95_crit_edge", %"produce blur_x94"
  %.pre-phi2736 = phi i64 [ %.pre2735, %"for blur_y.s0.x.x.rebased88.consume blur_x95_crit_edge" ], [ %1523, %"produce blur_x94" ]
  %.idx2040 = add nsw i64 %1495, %.pre-phi2736
  %1526 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2040
  %1527 = bitcast i16* %1526 to <32 x i16>*
  %1528 = load <32 x i16>, <32 x i16>* %1527, align 2, !tbaa !423
  %.idx2041 = add nsw i64 %1496, %.pre-phi2736
  %1529 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2041
  %1530 = bitcast i16* %1529 to <32 x i16>*
  %1531 = load <32 x i16>, <32 x i16>* %1530, align 2, !tbaa !423
  %.idx2042 = add nsw i64 %1497, %.pre-phi2736
  %1532 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2042
  %1533 = bitcast i16* %1532 to <32 x i16>*
  %1534 = load <32 x i16>, <32 x i16>* %1533, align 2, !tbaa !423
  %1535 = add <32 x i16> %1531, %1528
  %1536 = add <32 x i16> %1535, %1534
  %1537 = shufflevector <32 x i16> %1536, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1538 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1537, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1539 = shufflevector <32 x i16> %1536, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1540 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1539, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1541 = shufflevector <16 x i16> %1538, <16 x i16> %1540, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1542 = lshr <32 x i16> %1541, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1543 = add nuw nsw i64 %.pre-phi2736, 32
  %1544 = add nsw i64 %1543, %269
  %.idx2043 = add i64 %1544, %1500
  %1545 = getelementptr inbounds i16, i16* %268, i64 %.idx2043
  %1546 = bitcast i16* %1545 to <32 x i16>*
  store <32 x i16> %1542, <32 x i16>* %1546, align 2, !tbaa !425
  %indvars.iv.next2518 = add nuw nsw i64 %indvars.iv2517, 1
  %.not2044 = icmp eq i64 %indvars.iv.next2518, %348
  br i1 %.not2044, label %"end for blur_y.s0.x.x.rebased89", label %"for blur_y.s0.x.x.rebased88"

"produce blur_x99":                               ; preds = %"end for blur_y.s0.x.x.rebased89"
  %1547 = getelementptr inbounds i16, i16* %read_input, i64 %275
  %1548 = getelementptr inbounds i16, i16* %1547, i64 1
  %1549 = bitcast i16* %1548 to <32 x i16>*
  %1550 = load <32 x i16>, <32 x i16>* %1549, align 2, !tbaa !412
  %1551 = getelementptr inbounds i16, i16* %1547, i64 2
  %1552 = bitcast i16* %1551 to <32 x i16>*
  %1553 = load <32 x i16>, <32 x i16>* %1552, align 2, !tbaa !412
  %1554 = bitcast i16* %1547 to <32 x i16>*
  %1555 = load <32 x i16>, <32 x i16>* %1554, align 2, !tbaa !412
  %1556 = add <32 x i16> %1553, %1550
  %1557 = add <32 x i16> %1556, %1555
  %1558 = shufflevector <32 x i16> %1557, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1559 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1558, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1560 = shufflevector <32 x i16> %1557, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1561 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1560, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1562 = shufflevector <16 x i16> %1559, <16 x i16> %1561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1563 = lshr <32 x i16> %1562, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1564 = add nsw i64 %1476, %263
  %1565 = getelementptr inbounds i16, i16* %blur_x, i64 %1564
  %1566 = bitcast i16* %1565 to <32 x i16>*
  store <32 x i16> %1563, <32 x i16>* %1566, align 2, !tbaa !423
  %1567 = add nsw i64 %1343, %263
  %1568 = getelementptr inbounds i16, i16* %blur_x, i64 %1567
  %1569 = bitcast i16* %1568 to <32 x i16>*
  %1570 = load <32 x i16>, <32 x i16>* %1569, align 2, !tbaa !423
  %1571 = add nsw i64 %1232, %263
  %1572 = getelementptr inbounds i16, i16* %blur_x, i64 %1571
  %1573 = bitcast i16* %1572 to <32 x i16>*
  %1574 = load <32 x i16>, <32 x i16>* %1573, align 2, !tbaa !423
  %1575 = add <32 x i16> %1570, %1563
  %1576 = add <32 x i16> %1575, %1574
  %1577 = shufflevector <32 x i16> %1576, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1578 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1577, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1579 = shufflevector <32 x i16> %1576, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1579, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1581 = shufflevector <16 x i16> %1578, <16 x i16> %1580, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1582 = lshr <32 x i16> %1581, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1583 = sext i32 %a42 to i64
  %1584 = add nsw i64 %1583, 1
  %1585 = mul nsw i64 %1584, %146
  %1586 = add nsw i64 %272, %1585
  %1587 = getelementptr inbounds i16, i16* %268, i64 %1586
  %1588 = bitcast i16* %1587 to <32 x i16>*
  store <32 x i16> %1582, <32 x i16>* %1588, align 2, !tbaa !425
  br label %"produce blur_x102"

"produce blur_x102":                              ; preds = %"end for blur_y.s0.x.x.rebased89", %"produce blur_x99"
  %1589 = getelementptr inbounds i16, i16* %read_input, i64 %276
  %1590 = getelementptr inbounds i16, i16* %1589, i64 1
  %1591 = bitcast i16* %1590 to <32 x i16>*
  %1592 = load <32 x i16>, <32 x i16>* %1591, align 2, !tbaa !412
  %1593 = getelementptr inbounds i16, i16* %1589, i64 2
  %1594 = bitcast i16* %1593 to <32 x i16>*
  %1595 = load <32 x i16>, <32 x i16>* %1594, align 4, !tbaa !412
  %1596 = bitcast i16* %1589 to <32 x i16>*
  %1597 = load <32 x i16>, <32 x i16>* %1596, align 8, !tbaa !412
  %1598 = add <32 x i16> %1595, %1592
  %1599 = add <32 x i16> %1598, %1597
  %1600 = shufflevector <32 x i16> %1599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1601 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1600, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1602 = shufflevector <32 x i16> %1599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1603 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1602, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1604 = shufflevector <16 x i16> %1601, <16 x i16> %1603, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1605 = lshr <32 x i16> %1604, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %1605, <32 x i16>* %1126, align 2, !tbaa !423
  %1606 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %1607 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %1608 = add <32 x i16> %1606, %1605
  %1609 = add <32 x i16> %1608, %1607
  %1610 = shufflevector <32 x i16> %1609, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1610, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1612 = shufflevector <32 x i16> %1609, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1613 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1612, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1614 = shufflevector <16 x i16> %1611, <16 x i16> %1613, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1615 = lshr <32 x i16> %1614, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1616 = add nsw i64 %1356, 2
  %1617 = mul nsw i64 %1616, %146
  %1618 = getelementptr inbounds i16, i16* %268, i64 %1617
  %1619 = bitcast i16* %1618 to <32 x i16>*
  store <32 x i16> %1615, <32 x i16>* %1619, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased104.preheader", label %"end for blur_y.s0.x.x.rebased105", !prof !406

"for blur_y.s0.x.x.rebased104.preheader":         ; preds = %"produce blur_x102"
  %1620 = sext i32 %t939 to i64
  %1621 = add nsw i64 %1620, 32
  %1622 = add nsw i64 %1476, 32
  %1623 = add nsw i64 %1124, 32
  %1624 = add nsw i64 %1343, 32
  %1625 = sext i32 %a42 to i64
  %1626 = add nsw i64 %1625, 2
  %1627 = mul nsw i64 %1626, %146
  br label %"for blur_y.s0.x.x.rebased104"

"for blur_y.s0.x.x.rebased104":                   ; preds = %"for blur_y.s0.x.x.rebased104.preheader", %"consume blur_x111"
  %indvars.iv2519 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased104.preheader" ], [ %indvars.iv.next2520, %"consume blur_x111" ]
  %1628 = trunc i64 %indvars.iv2519 to i32
  %1629 = shl nsw i32 %1628, 5
  %1630 = icmp sgt i32 %b37, %1629
  br i1 %1630, label %"produce blur_x110", label %"for blur_y.s0.x.x.rebased104.consume blur_x111_crit_edge"

"for blur_y.s0.x.x.rebased104.consume blur_x111_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased104"
  %.pre2737 = shl nuw nsw i64 %indvars.iv2519, 5
  br label %"consume blur_x111"

"end for blur_y.s0.x.x.rebased105":               ; preds = %"consume blur_x111", %"produce blur_x102"
  br i1 %.not1855, label %"produce blur_x118", label %"produce blur_x115"

"produce blur_x110":                              ; preds = %"for blur_y.s0.x.x.rebased104"
  %1631 = shl nsw i32 %1628, 4
  %t791 = add nsw i32 %1631, %264
  %1632 = sext i32 %t791 to i64
  %1633 = shl nsw i64 %1632, 1
  %1634 = getelementptr inbounds i16, i16* %read_input, i64 %1633
  %1635 = getelementptr inbounds i16, i16* %1634, i64 33
  %1636 = bitcast i16* %1635 to <32 x i16>*
  %1637 = load <32 x i16>, <32 x i16>* %1636, align 2, !tbaa !412
  %1638 = getelementptr inbounds i16, i16* %1634, i64 34
  %1639 = bitcast i16* %1638 to <32 x i16>*
  %1640 = load <32 x i16>, <32 x i16>* %1639, align 4, !tbaa !412
  %1641 = getelementptr inbounds i16, i16* %1634, i64 32
  %1642 = bitcast i16* %1641 to <32 x i16>*
  %1643 = load <32 x i16>, <32 x i16>* %1642, align 4, !tbaa !412
  %1644 = add <32 x i16> %1640, %1637
  %1645 = add <32 x i16> %1644, %1643
  %1646 = shufflevector <32 x i16> %1645, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1646, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1648 = shufflevector <32 x i16> %1645, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1649 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1648, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1650 = shufflevector <16 x i16> %1647, <16 x i16> %1649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1651 = lshr <32 x i16> %1650, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1652 = shl nuw nsw i64 %indvars.iv2519, 5
  %.idx2039 = add nsw i64 %1621, %1652
  %1653 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2039
  %1654 = bitcast i16* %1653 to <32 x i16>*
  store <32 x i16> %1651, <32 x i16>* %1654, align 2, !tbaa !423
  br label %"consume blur_x111"

"consume blur_x111":                              ; preds = %"for blur_y.s0.x.x.rebased104.consume blur_x111_crit_edge", %"produce blur_x110"
  %.pre-phi2738 = phi i64 [ %.pre2737, %"for blur_y.s0.x.x.rebased104.consume blur_x111_crit_edge" ], [ %1652, %"produce blur_x110" ]
  %.idx2034 = add nsw i64 %1622, %.pre-phi2738
  %1655 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2034
  %1656 = bitcast i16* %1655 to <32 x i16>*
  %1657 = load <32 x i16>, <32 x i16>* %1656, align 2, !tbaa !423
  %.idx2035 = add nsw i64 %1623, %.pre-phi2738
  %1658 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2035
  %1659 = bitcast i16* %1658 to <32 x i16>*
  %1660 = load <32 x i16>, <32 x i16>* %1659, align 2, !tbaa !423
  %.idx2036 = add nsw i64 %1624, %.pre-phi2738
  %1661 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2036
  %1662 = bitcast i16* %1661 to <32 x i16>*
  %1663 = load <32 x i16>, <32 x i16>* %1662, align 2, !tbaa !423
  %1664 = add <32 x i16> %1660, %1657
  %1665 = add <32 x i16> %1664, %1663
  %1666 = shufflevector <32 x i16> %1665, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1666, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1668 = shufflevector <32 x i16> %1665, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1668, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1670 = shufflevector <16 x i16> %1667, <16 x i16> %1669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1671 = lshr <32 x i16> %1670, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1672 = add nuw nsw i64 %.pre-phi2738, 32
  %1673 = add nsw i64 %1672, %269
  %.idx2037 = add i64 %1673, %1627
  %1674 = getelementptr inbounds i16, i16* %268, i64 %.idx2037
  %1675 = bitcast i16* %1674 to <32 x i16>*
  store <32 x i16> %1671, <32 x i16>* %1675, align 2, !tbaa !425
  %indvars.iv.next2520 = add nuw nsw i64 %indvars.iv2519, 1
  %.not2038 = icmp eq i64 %indvars.iv.next2520, %348
  br i1 %.not2038, label %"end for blur_y.s0.x.x.rebased105", label %"for blur_y.s0.x.x.rebased104"

"produce blur_x115":                              ; preds = %"end for blur_y.s0.x.x.rebased105"
  %1676 = getelementptr inbounds i16, i16* %read_input, i64 %278
  %1677 = getelementptr inbounds i16, i16* %1676, i64 1
  %1678 = bitcast i16* %1677 to <32 x i16>*
  %1679 = load <32 x i16>, <32 x i16>* %1678, align 2, !tbaa !412
  %1680 = getelementptr inbounds i16, i16* %1676, i64 2
  %1681 = bitcast i16* %1680 to <32 x i16>*
  %1682 = load <32 x i16>, <32 x i16>* %1681, align 2, !tbaa !412
  %1683 = bitcast i16* %1676 to <32 x i16>*
  %1684 = load <32 x i16>, <32 x i16>* %1683, align 2, !tbaa !412
  %1685 = add <32 x i16> %1682, %1679
  %1686 = add <32 x i16> %1685, %1684
  %1687 = shufflevector <32 x i16> %1686, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1688 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1687, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1689 = shufflevector <32 x i16> %1686, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1690 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1689, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1691 = shufflevector <16 x i16> %1688, <16 x i16> %1690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1692 = lshr <32 x i16> %1691, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1693 = add nsw i64 %1124, %263
  %1694 = getelementptr inbounds i16, i16* %blur_x, i64 %1693
  %1695 = bitcast i16* %1694 to <32 x i16>*
  store <32 x i16> %1692, <32 x i16>* %1695, align 2, !tbaa !423
  %1696 = add nsw i64 %1476, %263
  %1697 = getelementptr inbounds i16, i16* %blur_x, i64 %1696
  %1698 = bitcast i16* %1697 to <32 x i16>*
  %1699 = load <32 x i16>, <32 x i16>* %1698, align 2, !tbaa !423
  %1700 = add nsw i64 %1343, %263
  %1701 = getelementptr inbounds i16, i16* %blur_x, i64 %1700
  %1702 = bitcast i16* %1701 to <32 x i16>*
  %1703 = load <32 x i16>, <32 x i16>* %1702, align 2, !tbaa !423
  %1704 = add <32 x i16> %1699, %1692
  %1705 = add <32 x i16> %1704, %1703
  %1706 = shufflevector <32 x i16> %1705, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1707 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1706, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1708 = shufflevector <32 x i16> %1705, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1710 = shufflevector <16 x i16> %1707, <16 x i16> %1709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1711 = lshr <32 x i16> %1710, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1712 = sext i32 %a42 to i64
  %1713 = add nsw i64 %1712, 2
  %1714 = mul nsw i64 %1713, %146
  %1715 = add nsw i64 %272, %1714
  %1716 = getelementptr inbounds i16, i16* %268, i64 %1715
  %1717 = bitcast i16* %1716 to <32 x i16>*
  store <32 x i16> %1711, <32 x i16>* %1717, align 2, !tbaa !425
  br label %"produce blur_x118"

"produce blur_x118":                              ; preds = %"end for blur_y.s0.x.x.rebased105", %"produce blur_x115"
  %1718 = getelementptr inbounds i16, i16* %read_input, i64 %279
  %1719 = getelementptr inbounds i16, i16* %1718, i64 1
  %1720 = bitcast i16* %1719 to <32 x i16>*
  %1721 = load <32 x i16>, <32 x i16>* %1720, align 2, !tbaa !412
  %1722 = getelementptr inbounds i16, i16* %1718, i64 2
  %1723 = bitcast i16* %1722 to <32 x i16>*
  %1724 = load <32 x i16>, <32 x i16>* %1723, align 2, !tbaa !412
  %1725 = bitcast i16* %1718 to <32 x i16>*
  %1726 = load <32 x i16>, <32 x i16>* %1725, align 2, !tbaa !412
  %1727 = add <32 x i16> %1724, %1721
  %1728 = add <32 x i16> %1727, %1726
  %1729 = shufflevector <32 x i16> %1728, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1730 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1729, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1731 = shufflevector <32 x i16> %1728, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1731, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1733 = shufflevector <16 x i16> %1730, <16 x i16> %1732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1734 = lshr <32 x i16> %1733, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %1734, <32 x i16>* %1234, align 2, !tbaa !423
  %1735 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %1736 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %1737 = add <32 x i16> %1735, %1734
  %1738 = add <32 x i16> %1737, %1736
  %1739 = shufflevector <32 x i16> %1738, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1740 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1739, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1741 = shufflevector <32 x i16> %1738, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1742 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1741, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1743 = shufflevector <16 x i16> %1740, <16 x i16> %1742, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1744 = lshr <32 x i16> %1743, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1745 = add nsw i64 %1356, 3
  %1746 = mul nsw i64 %1745, %146
  %1747 = getelementptr inbounds i16, i16* %268, i64 %1746
  %1748 = bitcast i16* %1747 to <32 x i16>*
  store <32 x i16> %1744, <32 x i16>* %1748, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased120.preheader", label %"end for blur_y.s0.x.x.rebased121", !prof !406

"for blur_y.s0.x.x.rebased120.preheader":         ; preds = %"produce blur_x118"
  %1749 = sext i32 %t941 to i64
  %1750 = add nsw i64 %1749, 32
  %1751 = add nsw i64 %1124, 32
  %1752 = add nsw i64 %1232, 32
  %1753 = add nsw i64 %1476, 32
  %1754 = sext i32 %a42 to i64
  %1755 = add nsw i64 %1754, 3
  %1756 = mul nsw i64 %1755, %146
  br label %"for blur_y.s0.x.x.rebased120"

"for blur_y.s0.x.x.rebased120":                   ; preds = %"for blur_y.s0.x.x.rebased120.preheader", %"consume blur_x127"
  %indvars.iv2521 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased120.preheader" ], [ %indvars.iv.next2522, %"consume blur_x127" ]
  %1757 = trunc i64 %indvars.iv2521 to i32
  %1758 = shl nsw i32 %1757, 5
  %1759 = icmp sgt i32 %b37, %1758
  br i1 %1759, label %"produce blur_x126", label %"for blur_y.s0.x.x.rebased120.consume blur_x127_crit_edge"

"for blur_y.s0.x.x.rebased120.consume blur_x127_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased120"
  %.pre2739 = shl nuw nsw i64 %indvars.iv2521, 5
  br label %"consume blur_x127"

"end for blur_y.s0.x.x.rebased121":               ; preds = %"consume blur_x127", %"produce blur_x118"
  br i1 %.not1855, label %"produce blur_x134", label %"produce blur_x131"

"produce blur_x126":                              ; preds = %"for blur_y.s0.x.x.rebased120"
  %t592.s = add nsw i32 %1758, %t956
  %1760 = sext i32 %t592.s to i64
  %1761 = getelementptr inbounds i16, i16* %read_input, i64 %1760
  %1762 = getelementptr inbounds i16, i16* %1761, i64 33
  %1763 = bitcast i16* %1762 to <32 x i16>*
  %1764 = load <32 x i16>, <32 x i16>* %1763, align 2, !tbaa !412
  %1765 = getelementptr inbounds i16, i16* %1761, i64 34
  %1766 = bitcast i16* %1765 to <32 x i16>*
  %1767 = load <32 x i16>, <32 x i16>* %1766, align 2, !tbaa !412
  %1768 = getelementptr inbounds i16, i16* %1761, i64 32
  %1769 = bitcast i16* %1768 to <32 x i16>*
  %1770 = load <32 x i16>, <32 x i16>* %1769, align 2, !tbaa !412
  %1771 = add <32 x i16> %1767, %1764
  %1772 = add <32 x i16> %1771, %1770
  %1773 = shufflevector <32 x i16> %1772, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1774 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1773, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1775 = shufflevector <32 x i16> %1772, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1776 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1775, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1777 = shufflevector <16 x i16> %1774, <16 x i16> %1776, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1778 = lshr <32 x i16> %1777, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1779 = shl nuw nsw i64 %indvars.iv2521, 5
  %.idx2033 = add nsw i64 %1750, %1779
  %1780 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2033
  %1781 = bitcast i16* %1780 to <32 x i16>*
  store <32 x i16> %1778, <32 x i16>* %1781, align 2, !tbaa !423
  br label %"consume blur_x127"

"consume blur_x127":                              ; preds = %"for blur_y.s0.x.x.rebased120.consume blur_x127_crit_edge", %"produce blur_x126"
  %.pre-phi2740 = phi i64 [ %.pre2739, %"for blur_y.s0.x.x.rebased120.consume blur_x127_crit_edge" ], [ %1779, %"produce blur_x126" ]
  %.idx2028 = add nsw i64 %1751, %.pre-phi2740
  %1782 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2028
  %1783 = bitcast i16* %1782 to <32 x i16>*
  %1784 = load <32 x i16>, <32 x i16>* %1783, align 2, !tbaa !423
  %.idx2029 = add nsw i64 %1752, %.pre-phi2740
  %1785 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2029
  %1786 = bitcast i16* %1785 to <32 x i16>*
  %1787 = load <32 x i16>, <32 x i16>* %1786, align 2, !tbaa !423
  %.idx2030 = add nsw i64 %1753, %.pre-phi2740
  %1788 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2030
  %1789 = bitcast i16* %1788 to <32 x i16>*
  %1790 = load <32 x i16>, <32 x i16>* %1789, align 2, !tbaa !423
  %1791 = add <32 x i16> %1787, %1784
  %1792 = add <32 x i16> %1791, %1790
  %1793 = shufflevector <32 x i16> %1792, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1794 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1793, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1795 = shufflevector <32 x i16> %1792, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1795, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1797 = shufflevector <16 x i16> %1794, <16 x i16> %1796, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1798 = lshr <32 x i16> %1797, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1799 = add nuw nsw i64 %.pre-phi2740, 32
  %1800 = add nsw i64 %1799, %269
  %.idx2031 = add i64 %1800, %1756
  %1801 = getelementptr inbounds i16, i16* %268, i64 %.idx2031
  %1802 = bitcast i16* %1801 to <32 x i16>*
  store <32 x i16> %1798, <32 x i16>* %1802, align 2, !tbaa !425
  %indvars.iv.next2522 = add nuw nsw i64 %indvars.iv2521, 1
  %.not2032 = icmp eq i64 %indvars.iv.next2522, %348
  br i1 %.not2032, label %"end for blur_y.s0.x.x.rebased121", label %"for blur_y.s0.x.x.rebased120"

"produce blur_x131":                              ; preds = %"end for blur_y.s0.x.x.rebased121"
  %1803 = getelementptr inbounds i16, i16* %read_input, i64 %280
  %1804 = getelementptr inbounds i16, i16* %1803, i64 1
  %1805 = bitcast i16* %1804 to <32 x i16>*
  %1806 = load <32 x i16>, <32 x i16>* %1805, align 2, !tbaa !412
  %1807 = getelementptr inbounds i16, i16* %1803, i64 2
  %1808 = bitcast i16* %1807 to <32 x i16>*
  %1809 = load <32 x i16>, <32 x i16>* %1808, align 2, !tbaa !412
  %1810 = bitcast i16* %1803 to <32 x i16>*
  %1811 = load <32 x i16>, <32 x i16>* %1810, align 2, !tbaa !412
  %1812 = add <32 x i16> %1809, %1806
  %1813 = add <32 x i16> %1812, %1811
  %1814 = shufflevector <32 x i16> %1813, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1815 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1814, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1816 = shufflevector <32 x i16> %1813, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1817 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1816, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1818 = shufflevector <16 x i16> %1815, <16 x i16> %1817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1819 = lshr <32 x i16> %1818, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1820 = add nsw i64 %1232, %263
  %1821 = getelementptr inbounds i16, i16* %blur_x, i64 %1820
  %1822 = bitcast i16* %1821 to <32 x i16>*
  store <32 x i16> %1819, <32 x i16>* %1822, align 2, !tbaa !423
  %1823 = add nsw i64 %1124, %263
  %1824 = getelementptr inbounds i16, i16* %blur_x, i64 %1823
  %1825 = bitcast i16* %1824 to <32 x i16>*
  %1826 = load <32 x i16>, <32 x i16>* %1825, align 2, !tbaa !423
  %1827 = add nsw i64 %1476, %263
  %1828 = getelementptr inbounds i16, i16* %blur_x, i64 %1827
  %1829 = bitcast i16* %1828 to <32 x i16>*
  %1830 = load <32 x i16>, <32 x i16>* %1829, align 2, !tbaa !423
  %1831 = add <32 x i16> %1826, %1819
  %1832 = add <32 x i16> %1831, %1830
  %1833 = shufflevector <32 x i16> %1832, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1833, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1835 = shufflevector <32 x i16> %1832, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1835, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1837 = shufflevector <16 x i16> %1834, <16 x i16> %1836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1838 = lshr <32 x i16> %1837, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1839 = sext i32 %a42 to i64
  %1840 = add nsw i64 %1839, 3
  %1841 = mul nsw i64 %1840, %146
  %1842 = add nsw i64 %272, %1841
  %1843 = getelementptr inbounds i16, i16* %268, i64 %1842
  %1844 = bitcast i16* %1843 to <32 x i16>*
  store <32 x i16> %1838, <32 x i16>* %1844, align 2, !tbaa !425
  br label %"produce blur_x134"

"produce blur_x134":                              ; preds = %"end for blur_y.s0.x.x.rebased121", %"produce blur_x131"
  %1845 = getelementptr inbounds i16, i16* %read_input, i64 %281
  %1846 = getelementptr inbounds i16, i16* %1845, i64 1
  %1847 = bitcast i16* %1846 to <32 x i16>*
  %1848 = load <32 x i16>, <32 x i16>* %1847, align 2, !tbaa !412
  %1849 = getelementptr inbounds i16, i16* %1845, i64 2
  %1850 = bitcast i16* %1849 to <32 x i16>*
  %1851 = load <32 x i16>, <32 x i16>* %1850, align 4, !tbaa !412
  %1852 = bitcast i16* %1845 to <32 x i16>*
  %1853 = load <32 x i16>, <32 x i16>* %1852, align 4, !tbaa !412
  %1854 = add <32 x i16> %1851, %1848
  %1855 = add <32 x i16> %1854, %1853
  %1856 = shufflevector <32 x i16> %1855, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1857 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1856, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1858 = shufflevector <32 x i16> %1855, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1858, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1860 = shufflevector <16 x i16> %1857, <16 x i16> %1859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1861 = lshr <32 x i16> %1860, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %1861, <32 x i16>* %1345, align 2, !tbaa !423
  %1862 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %1863 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %1864 = add <32 x i16> %1862, %1861
  %1865 = add <32 x i16> %1864, %1863
  %1866 = shufflevector <32 x i16> %1865, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1867 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1866, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1868 = shufflevector <32 x i16> %1865, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1868, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1870 = shufflevector <16 x i16> %1867, <16 x i16> %1869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1871 = lshr <32 x i16> %1870, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1872 = add nsw i64 %1356, 4
  %1873 = mul nsw i64 %1872, %146
  %1874 = getelementptr inbounds i16, i16* %268, i64 %1873
  %1875 = bitcast i16* %1874 to <32 x i16>*
  store <32 x i16> %1871, <32 x i16>* %1875, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased136.preheader", label %"end for blur_y.s0.x.x.rebased137", !prof !406

"for blur_y.s0.x.x.rebased136.preheader":         ; preds = %"produce blur_x134"
  %1876 = sext i32 %t942 to i64
  %1877 = add nsw i64 %1876, 32
  %1878 = add nsw i64 %1232, 32
  %1879 = add nsw i64 %1343, 32
  %1880 = add nsw i64 %1124, 32
  %1881 = sext i32 %a42 to i64
  %1882 = add nsw i64 %1881, 4
  %1883 = mul nsw i64 %1882, %146
  br label %"for blur_y.s0.x.x.rebased136"

"for blur_y.s0.x.x.rebased136":                   ; preds = %"for blur_y.s0.x.x.rebased136.preheader", %"consume blur_x143"
  %indvars.iv2523 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased136.preheader" ], [ %indvars.iv.next2524, %"consume blur_x143" ]
  %1884 = trunc i64 %indvars.iv2523 to i32
  %1885 = shl nsw i32 %1884, 5
  %1886 = icmp sgt i32 %b37, %1885
  br i1 %1886, label %"produce blur_x142", label %"for blur_y.s0.x.x.rebased136.consume blur_x143_crit_edge"

"for blur_y.s0.x.x.rebased136.consume blur_x143_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased136"
  %.pre2741 = shl nuw nsw i64 %indvars.iv2523, 5
  br label %"consume blur_x143"

"end for blur_y.s0.x.x.rebased137":               ; preds = %"consume blur_x143", %"produce blur_x134"
  br i1 %.not1855, label %"produce blur_x150", label %"produce blur_x147"

"produce blur_x142":                              ; preds = %"for blur_y.s0.x.x.rebased136"
  %1887 = shl nsw i32 %1884, 3
  %1888 = add nsw i32 %1887, %a40
  %1889 = shl nsw i32 %1888, 1
  %t798 = add nsw i32 %1889, %a40
  %1890 = sext i32 %t798 to i64
  %1891 = shl nsw i64 %1890, 1
  %1892 = getelementptr inbounds i16, i16* %read_input, i64 %1891
  %1893 = getelementptr inbounds i16, i16* %1892, i64 33
  %1894 = bitcast i16* %1893 to <32 x i16>*
  %1895 = load <32 x i16>, <32 x i16>* %1894, align 2, !tbaa !412
  %1896 = getelementptr inbounds i16, i16* %1892, i64 34
  %1897 = bitcast i16* %1896 to <32 x i16>*
  %1898 = load <32 x i16>, <32 x i16>* %1897, align 4, !tbaa !412
  %1899 = getelementptr inbounds i16, i16* %1892, i64 32
  %1900 = bitcast i16* %1899 to <32 x i16>*
  %1901 = load <32 x i16>, <32 x i16>* %1900, align 4, !tbaa !412
  %1902 = add <32 x i16> %1898, %1895
  %1903 = add <32 x i16> %1902, %1901
  %1904 = shufflevector <32 x i16> %1903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1905 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1904, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1906 = shufflevector <32 x i16> %1903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1907 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1906, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1908 = shufflevector <16 x i16> %1905, <16 x i16> %1907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1909 = lshr <32 x i16> %1908, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1910 = shl nuw nsw i64 %indvars.iv2523, 5
  %.idx2027 = add nsw i64 %1877, %1910
  %1911 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2027
  %1912 = bitcast i16* %1911 to <32 x i16>*
  store <32 x i16> %1909, <32 x i16>* %1912, align 2, !tbaa !423
  br label %"consume blur_x143"

"consume blur_x143":                              ; preds = %"for blur_y.s0.x.x.rebased136.consume blur_x143_crit_edge", %"produce blur_x142"
  %.pre-phi2742 = phi i64 [ %.pre2741, %"for blur_y.s0.x.x.rebased136.consume blur_x143_crit_edge" ], [ %1910, %"produce blur_x142" ]
  %.idx2022 = add nsw i64 %1878, %.pre-phi2742
  %1913 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2022
  %1914 = bitcast i16* %1913 to <32 x i16>*
  %1915 = load <32 x i16>, <32 x i16>* %1914, align 2, !tbaa !423
  %.idx2023 = add nsw i64 %1879, %.pre-phi2742
  %1916 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2023
  %1917 = bitcast i16* %1916 to <32 x i16>*
  %1918 = load <32 x i16>, <32 x i16>* %1917, align 2, !tbaa !423
  %.idx2024 = add nsw i64 %1880, %.pre-phi2742
  %1919 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2024
  %1920 = bitcast i16* %1919 to <32 x i16>*
  %1921 = load <32 x i16>, <32 x i16>* %1920, align 2, !tbaa !423
  %1922 = add <32 x i16> %1918, %1915
  %1923 = add <32 x i16> %1922, %1921
  %1924 = shufflevector <32 x i16> %1923, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1925 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1924, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1926 = shufflevector <32 x i16> %1923, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1927 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1926, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1928 = shufflevector <16 x i16> %1925, <16 x i16> %1927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1929 = lshr <32 x i16> %1928, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1930 = add nuw nsw i64 %.pre-phi2742, 32
  %1931 = add nsw i64 %1930, %269
  %.idx2025 = add i64 %1931, %1883
  %1932 = getelementptr inbounds i16, i16* %268, i64 %.idx2025
  %1933 = bitcast i16* %1932 to <32 x i16>*
  store <32 x i16> %1929, <32 x i16>* %1933, align 2, !tbaa !425
  %indvars.iv.next2524 = add nuw nsw i64 %indvars.iv2523, 1
  %.not2026 = icmp eq i64 %indvars.iv.next2524, %348
  br i1 %.not2026, label %"end for blur_y.s0.x.x.rebased137", label %"for blur_y.s0.x.x.rebased136"

"produce blur_x147":                              ; preds = %"end for blur_y.s0.x.x.rebased137"
  %1934 = getelementptr inbounds i16, i16* %read_input, i64 %283
  %1935 = getelementptr inbounds i16, i16* %1934, i64 1
  %1936 = bitcast i16* %1935 to <32 x i16>*
  %1937 = load <32 x i16>, <32 x i16>* %1936, align 2, !tbaa !412
  %1938 = getelementptr inbounds i16, i16* %1934, i64 2
  %1939 = bitcast i16* %1938 to <32 x i16>*
  %1940 = load <32 x i16>, <32 x i16>* %1939, align 2, !tbaa !412
  %1941 = bitcast i16* %1934 to <32 x i16>*
  %1942 = load <32 x i16>, <32 x i16>* %1941, align 2, !tbaa !412
  %1943 = add <32 x i16> %1940, %1937
  %1944 = add <32 x i16> %1943, %1942
  %1945 = shufflevector <32 x i16> %1944, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1945, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1947 = shufflevector <32 x i16> %1944, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1948 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1947, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1949 = shufflevector <16 x i16> %1946, <16 x i16> %1948, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1950 = lshr <32 x i16> %1949, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1951 = add nsw i64 %1343, %263
  %1952 = getelementptr inbounds i16, i16* %blur_x, i64 %1951
  %1953 = bitcast i16* %1952 to <32 x i16>*
  store <32 x i16> %1950, <32 x i16>* %1953, align 2, !tbaa !423
  %1954 = add nsw i64 %1232, %263
  %1955 = getelementptr inbounds i16, i16* %blur_x, i64 %1954
  %1956 = bitcast i16* %1955 to <32 x i16>*
  %1957 = load <32 x i16>, <32 x i16>* %1956, align 2, !tbaa !423
  %1958 = add nsw i64 %1124, %263
  %1959 = getelementptr inbounds i16, i16* %blur_x, i64 %1958
  %1960 = bitcast i16* %1959 to <32 x i16>*
  %1961 = load <32 x i16>, <32 x i16>* %1960, align 2, !tbaa !423
  %1962 = add <32 x i16> %1957, %1950
  %1963 = add <32 x i16> %1962, %1961
  %1964 = shufflevector <32 x i16> %1963, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1965 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1964, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1966 = shufflevector <32 x i16> %1963, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1967 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1966, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1968 = shufflevector <16 x i16> %1965, <16 x i16> %1967, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1969 = lshr <32 x i16> %1968, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1970 = sext i32 %a42 to i64
  %1971 = add nsw i64 %1970, 4
  %1972 = mul nsw i64 %1971, %146
  %1973 = add nsw i64 %272, %1972
  %1974 = getelementptr inbounds i16, i16* %268, i64 %1973
  %1975 = bitcast i16* %1974 to <32 x i16>*
  store <32 x i16> %1969, <32 x i16>* %1975, align 2, !tbaa !425
  br label %"produce blur_x150"

"produce blur_x150":                              ; preds = %"end for blur_y.s0.x.x.rebased137", %"produce blur_x147"
  %1976 = getelementptr inbounds i16, i16* %read_input, i64 %284
  %1977 = getelementptr inbounds i16, i16* %1976, i64 1
  %1978 = bitcast i16* %1977 to <32 x i16>*
  %1979 = load <32 x i16>, <32 x i16>* %1978, align 2, !tbaa !412
  %1980 = getelementptr inbounds i16, i16* %1976, i64 2
  %1981 = bitcast i16* %1980 to <32 x i16>*
  %1982 = load <32 x i16>, <32 x i16>* %1981, align 2, !tbaa !412
  %1983 = bitcast i16* %1976 to <32 x i16>*
  %1984 = load <32 x i16>, <32 x i16>* %1983, align 2, !tbaa !412
  %1985 = add <32 x i16> %1982, %1979
  %1986 = add <32 x i16> %1985, %1984
  %1987 = shufflevector <32 x i16> %1986, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1987, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1989 = shufflevector <32 x i16> %1986, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1990 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1989, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1991 = shufflevector <16 x i16> %1988, <16 x i16> %1990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1992 = lshr <32 x i16> %1991, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %1992, <32 x i16>* %1478, align 2, !tbaa !423
  %1993 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %1994 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %1995 = add <32 x i16> %1993, %1992
  %1996 = add <32 x i16> %1995, %1994
  %1997 = shufflevector <32 x i16> %1996, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1998 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1997, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1999 = shufflevector <32 x i16> %1996, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2000 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1999, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2001 = shufflevector <16 x i16> %1998, <16 x i16> %2000, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2002 = lshr <32 x i16> %2001, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2003 = add nsw i64 %1356, 5
  %2004 = mul nsw i64 %2003, %146
  %2005 = getelementptr inbounds i16, i16* %268, i64 %2004
  %2006 = bitcast i16* %2005 to <32 x i16>*
  store <32 x i16> %2002, <32 x i16>* %2006, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased152.preheader", label %"end for blur_y.s0.x.x.rebased153", !prof !406

"for blur_y.s0.x.x.rebased152.preheader":         ; preds = %"produce blur_x150"
  %2007 = sext i32 %t947 to i64
  %2008 = add nsw i64 %2007, 32
  %2009 = add nsw i64 %1343, 32
  %2010 = add nsw i64 %1476, 32
  %2011 = add nsw i64 %1232, 32
  %2012 = sext i32 %a42 to i64
  %2013 = add nsw i64 %2012, 5
  %2014 = mul nsw i64 %2013, %146
  br label %"for blur_y.s0.x.x.rebased152"

"for blur_y.s0.x.x.rebased152":                   ; preds = %"for blur_y.s0.x.x.rebased152.preheader", %"consume blur_x159"
  %indvars.iv2525 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased152.preheader" ], [ %indvars.iv.next2526, %"consume blur_x159" ]
  %2015 = trunc i64 %indvars.iv2525 to i32
  %2016 = shl nsw i32 %2015, 5
  %2017 = icmp sgt i32 %b37, %2016
  br i1 %2017, label %"produce blur_x158", label %"for blur_y.s0.x.x.rebased152.consume blur_x159_crit_edge"

"for blur_y.s0.x.x.rebased152.consume blur_x159_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased152"
  %.pre2743 = shl nuw nsw i64 %indvars.iv2525, 5
  br label %"consume blur_x159"

"end for blur_y.s0.x.x.rebased153":               ; preds = %"consume blur_x159", %"produce blur_x150"
  br i1 %.not1855, label %"produce blur_x166", label %"produce blur_x163"

"produce blur_x158":                              ; preds = %"for blur_y.s0.x.x.rebased152"
  %t602.s = add nsw i32 %2016, %t965
  %2018 = sext i32 %t602.s to i64
  %2019 = getelementptr inbounds i16, i16* %read_input, i64 %2018
  %2020 = getelementptr inbounds i16, i16* %2019, i64 33
  %2021 = bitcast i16* %2020 to <32 x i16>*
  %2022 = load <32 x i16>, <32 x i16>* %2021, align 2, !tbaa !412
  %2023 = getelementptr inbounds i16, i16* %2019, i64 34
  %2024 = bitcast i16* %2023 to <32 x i16>*
  %2025 = load <32 x i16>, <32 x i16>* %2024, align 2, !tbaa !412
  %2026 = getelementptr inbounds i16, i16* %2019, i64 32
  %2027 = bitcast i16* %2026 to <32 x i16>*
  %2028 = load <32 x i16>, <32 x i16>* %2027, align 2, !tbaa !412
  %2029 = add <32 x i16> %2025, %2022
  %2030 = add <32 x i16> %2029, %2028
  %2031 = shufflevector <32 x i16> %2030, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2032 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2031, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2033 = shufflevector <32 x i16> %2030, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2033, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2035 = shufflevector <16 x i16> %2032, <16 x i16> %2034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2036 = lshr <32 x i16> %2035, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2037 = shl nuw nsw i64 %indvars.iv2525, 5
  %.idx2021 = add nsw i64 %2008, %2037
  %2038 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2021
  %2039 = bitcast i16* %2038 to <32 x i16>*
  store <32 x i16> %2036, <32 x i16>* %2039, align 2, !tbaa !423
  br label %"consume blur_x159"

"consume blur_x159":                              ; preds = %"for blur_y.s0.x.x.rebased152.consume blur_x159_crit_edge", %"produce blur_x158"
  %.pre-phi2744 = phi i64 [ %.pre2743, %"for blur_y.s0.x.x.rebased152.consume blur_x159_crit_edge" ], [ %2037, %"produce blur_x158" ]
  %.idx2016 = add nsw i64 %2009, %.pre-phi2744
  %2040 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2016
  %2041 = bitcast i16* %2040 to <32 x i16>*
  %2042 = load <32 x i16>, <32 x i16>* %2041, align 2, !tbaa !423
  %.idx2017 = add nsw i64 %2010, %.pre-phi2744
  %2043 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2017
  %2044 = bitcast i16* %2043 to <32 x i16>*
  %2045 = load <32 x i16>, <32 x i16>* %2044, align 2, !tbaa !423
  %.idx2018 = add nsw i64 %2011, %.pre-phi2744
  %2046 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2018
  %2047 = bitcast i16* %2046 to <32 x i16>*
  %2048 = load <32 x i16>, <32 x i16>* %2047, align 2, !tbaa !423
  %2049 = add <32 x i16> %2045, %2042
  %2050 = add <32 x i16> %2049, %2048
  %2051 = shufflevector <32 x i16> %2050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2052 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2051, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2053 = shufflevector <32 x i16> %2050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2053, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2055 = shufflevector <16 x i16> %2052, <16 x i16> %2054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2056 = lshr <32 x i16> %2055, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2057 = add nuw nsw i64 %.pre-phi2744, 32
  %2058 = add nsw i64 %2057, %269
  %.idx2019 = add i64 %2058, %2014
  %2059 = getelementptr inbounds i16, i16* %268, i64 %.idx2019
  %2060 = bitcast i16* %2059 to <32 x i16>*
  store <32 x i16> %2056, <32 x i16>* %2060, align 2, !tbaa !425
  %indvars.iv.next2526 = add nuw nsw i64 %indvars.iv2525, 1
  %.not2020 = icmp eq i64 %indvars.iv.next2526, %348
  br i1 %.not2020, label %"end for blur_y.s0.x.x.rebased153", label %"for blur_y.s0.x.x.rebased152"

"produce blur_x163":                              ; preds = %"end for blur_y.s0.x.x.rebased153"
  %2061 = getelementptr inbounds i16, i16* %read_input, i64 %285
  %2062 = getelementptr inbounds i16, i16* %2061, i64 1
  %2063 = bitcast i16* %2062 to <32 x i16>*
  %2064 = load <32 x i16>, <32 x i16>* %2063, align 2, !tbaa !412
  %2065 = getelementptr inbounds i16, i16* %2061, i64 2
  %2066 = bitcast i16* %2065 to <32 x i16>*
  %2067 = load <32 x i16>, <32 x i16>* %2066, align 2, !tbaa !412
  %2068 = bitcast i16* %2061 to <32 x i16>*
  %2069 = load <32 x i16>, <32 x i16>* %2068, align 2, !tbaa !412
  %2070 = add <32 x i16> %2067, %2064
  %2071 = add <32 x i16> %2070, %2069
  %2072 = shufflevector <32 x i16> %2071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2073 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2072, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2074 = shufflevector <32 x i16> %2071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2075 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2074, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2076 = shufflevector <16 x i16> %2073, <16 x i16> %2075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2077 = lshr <32 x i16> %2076, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2078 = add nsw i64 %1476, %263
  %2079 = getelementptr inbounds i16, i16* %blur_x, i64 %2078
  %2080 = bitcast i16* %2079 to <32 x i16>*
  store <32 x i16> %2077, <32 x i16>* %2080, align 2, !tbaa !423
  %2081 = add nsw i64 %1343, %263
  %2082 = getelementptr inbounds i16, i16* %blur_x, i64 %2081
  %2083 = bitcast i16* %2082 to <32 x i16>*
  %2084 = load <32 x i16>, <32 x i16>* %2083, align 2, !tbaa !423
  %2085 = add nsw i64 %1232, %263
  %2086 = getelementptr inbounds i16, i16* %blur_x, i64 %2085
  %2087 = bitcast i16* %2086 to <32 x i16>*
  %2088 = load <32 x i16>, <32 x i16>* %2087, align 2, !tbaa !423
  %2089 = add <32 x i16> %2084, %2077
  %2090 = add <32 x i16> %2089, %2088
  %2091 = shufflevector <32 x i16> %2090, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2091, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2093 = shufflevector <32 x i16> %2090, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2094 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2093, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2095 = shufflevector <16 x i16> %2092, <16 x i16> %2094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2096 = lshr <32 x i16> %2095, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2097 = sext i32 %a42 to i64
  %2098 = add nsw i64 %2097, 5
  %2099 = mul nsw i64 %2098, %146
  %2100 = add nsw i64 %272, %2099
  %2101 = getelementptr inbounds i16, i16* %268, i64 %2100
  %2102 = bitcast i16* %2101 to <32 x i16>*
  store <32 x i16> %2096, <32 x i16>* %2102, align 2, !tbaa !425
  br label %"produce blur_x166"

"produce blur_x166":                              ; preds = %"end for blur_y.s0.x.x.rebased153", %"produce blur_x163"
  %2103 = getelementptr inbounds i16, i16* %read_input, i64 %286
  %2104 = getelementptr inbounds i16, i16* %2103, i64 1
  %2105 = bitcast i16* %2104 to <32 x i16>*
  %2106 = load <32 x i16>, <32 x i16>* %2105, align 2, !tbaa !412
  %2107 = getelementptr inbounds i16, i16* %2103, i64 2
  %2108 = bitcast i16* %2107 to <32 x i16>*
  %2109 = load <32 x i16>, <32 x i16>* %2108, align 4, !tbaa !412
  %2110 = bitcast i16* %2103 to <32 x i16>*
  %2111 = load <32 x i16>, <32 x i16>* %2110, align 16, !tbaa !412
  %2112 = add <32 x i16> %2109, %2106
  %2113 = add <32 x i16> %2112, %2111
  %2114 = shufflevector <32 x i16> %2113, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2115 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2114, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2116 = shufflevector <32 x i16> %2113, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2117 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2116, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2118 = shufflevector <16 x i16> %2115, <16 x i16> %2117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2119 = lshr <32 x i16> %2118, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2119, <32 x i16>* %1126, align 2, !tbaa !423
  %2120 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %2121 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %2122 = add <32 x i16> %2120, %2119
  %2123 = add <32 x i16> %2122, %2121
  %2124 = shufflevector <32 x i16> %2123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2125 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2124, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2126 = shufflevector <32 x i16> %2123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2127 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2126, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2128 = shufflevector <16 x i16> %2125, <16 x i16> %2127, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2129 = lshr <32 x i16> %2128, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2130 = add nsw i64 %1356, 6
  %2131 = mul nsw i64 %2130, %146
  %2132 = getelementptr inbounds i16, i16* %268, i64 %2131
  %2133 = bitcast i16* %2132 to <32 x i16>*
  store <32 x i16> %2129, <32 x i16>* %2133, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased168.preheader", label %"end for blur_y.s0.x.x.rebased169", !prof !406

"for blur_y.s0.x.x.rebased168.preheader":         ; preds = %"produce blur_x166"
  %2134 = sext i32 %t939 to i64
  %2135 = add nsw i64 %2134, 32
  %2136 = add nsw i64 %1476, 32
  %2137 = add nsw i64 %1124, 32
  %2138 = add nsw i64 %1343, 32
  %2139 = sext i32 %a42 to i64
  %2140 = add nsw i64 %2139, 6
  %2141 = mul nsw i64 %2140, %146
  br label %"for blur_y.s0.x.x.rebased168"

"for blur_y.s0.x.x.rebased168":                   ; preds = %"for blur_y.s0.x.x.rebased168.preheader", %"consume blur_x175"
  %indvars.iv2527 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased168.preheader" ], [ %indvars.iv.next2528, %"consume blur_x175" ]
  %2142 = trunc i64 %indvars.iv2527 to i32
  %2143 = shl nsw i32 %2142, 5
  %2144 = icmp sgt i32 %b37, %2143
  br i1 %2144, label %"produce blur_x174", label %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge"

"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased168"
  %.pre2745 = shl nuw nsw i64 %indvars.iv2527, 5
  br label %"consume blur_x175"

"end for blur_y.s0.x.x.rebased169":               ; preds = %"consume blur_x175", %"produce blur_x166"
  br i1 %.not1855, label %"produce blur_x182", label %"produce blur_x179"

"produce blur_x174":                              ; preds = %"for blur_y.s0.x.x.rebased168"
  %t607.s = add nsw i32 %2143, %t970
  %2145 = sext i32 %t607.s to i64
  %2146 = getelementptr inbounds i16, i16* %read_input, i64 %2145
  %2147 = getelementptr inbounds i16, i16* %2146, i64 33
  %2148 = bitcast i16* %2147 to <32 x i16>*
  %2149 = load <32 x i16>, <32 x i16>* %2148, align 2, !tbaa !412
  %2150 = getelementptr inbounds i16, i16* %2146, i64 34
  %2151 = bitcast i16* %2150 to <32 x i16>*
  %2152 = load <32 x i16>, <32 x i16>* %2151, align 4, !tbaa !412
  %2153 = getelementptr inbounds i16, i16* %2146, i64 32
  %2154 = bitcast i16* %2153 to <32 x i16>*
  %2155 = load <32 x i16>, <32 x i16>* %2154, align 4, !tbaa !412
  %2156 = add <32 x i16> %2152, %2149
  %2157 = add <32 x i16> %2156, %2155
  %2158 = shufflevector <32 x i16> %2157, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2159 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2158, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2160 = shufflevector <32 x i16> %2157, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2161 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2160, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2162 = shufflevector <16 x i16> %2159, <16 x i16> %2161, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2163 = lshr <32 x i16> %2162, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2164 = shl nuw nsw i64 %indvars.iv2527, 5
  %.idx2015 = add nsw i64 %2135, %2164
  %2165 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2015
  %2166 = bitcast i16* %2165 to <32 x i16>*
  store <32 x i16> %2163, <32 x i16>* %2166, align 2, !tbaa !423
  br label %"consume blur_x175"

"consume blur_x175":                              ; preds = %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge", %"produce blur_x174"
  %.pre-phi2746 = phi i64 [ %.pre2745, %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge" ], [ %2164, %"produce blur_x174" ]
  %.idx2010 = add nsw i64 %2136, %.pre-phi2746
  %2167 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2010
  %2168 = bitcast i16* %2167 to <32 x i16>*
  %2169 = load <32 x i16>, <32 x i16>* %2168, align 2, !tbaa !423
  %.idx2011 = add nsw i64 %2137, %.pre-phi2746
  %2170 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2011
  %2171 = bitcast i16* %2170 to <32 x i16>*
  %2172 = load <32 x i16>, <32 x i16>* %2171, align 2, !tbaa !423
  %.idx2012 = add nsw i64 %2138, %.pre-phi2746
  %2173 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2012
  %2174 = bitcast i16* %2173 to <32 x i16>*
  %2175 = load <32 x i16>, <32 x i16>* %2174, align 2, !tbaa !423
  %2176 = add <32 x i16> %2172, %2169
  %2177 = add <32 x i16> %2176, %2175
  %2178 = shufflevector <32 x i16> %2177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2178, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2180 = shufflevector <32 x i16> %2177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2180, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2182 = shufflevector <16 x i16> %2179, <16 x i16> %2181, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2183 = lshr <32 x i16> %2182, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2184 = add nuw nsw i64 %.pre-phi2746, 32
  %2185 = add nsw i64 %2184, %269
  %.idx2013 = add i64 %2185, %2141
  %2186 = getelementptr inbounds i16, i16* %268, i64 %.idx2013
  %2187 = bitcast i16* %2186 to <32 x i16>*
  store <32 x i16> %2183, <32 x i16>* %2187, align 2, !tbaa !425
  %indvars.iv.next2528 = add nuw nsw i64 %indvars.iv2527, 1
  %.not2014 = icmp eq i64 %indvars.iv.next2528, %348
  br i1 %.not2014, label %"end for blur_y.s0.x.x.rebased169", label %"for blur_y.s0.x.x.rebased168"

"produce blur_x179":                              ; preds = %"end for blur_y.s0.x.x.rebased169"
  %2188 = getelementptr inbounds i16, i16* %read_input, i64 %287
  %2189 = getelementptr inbounds i16, i16* %2188, i64 1
  %2190 = bitcast i16* %2189 to <32 x i16>*
  %2191 = load <32 x i16>, <32 x i16>* %2190, align 2, !tbaa !412
  %2192 = getelementptr inbounds i16, i16* %2188, i64 2
  %2193 = bitcast i16* %2192 to <32 x i16>*
  %2194 = load <32 x i16>, <32 x i16>* %2193, align 2, !tbaa !412
  %2195 = bitcast i16* %2188 to <32 x i16>*
  %2196 = load <32 x i16>, <32 x i16>* %2195, align 2, !tbaa !412
  %2197 = add <32 x i16> %2194, %2191
  %2198 = add <32 x i16> %2197, %2196
  %2199 = shufflevector <32 x i16> %2198, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2199, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2201 = shufflevector <32 x i16> %2198, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2202 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2201, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2203 = shufflevector <16 x i16> %2200, <16 x i16> %2202, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2204 = lshr <32 x i16> %2203, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2205 = add nsw i64 %1124, %263
  %2206 = getelementptr inbounds i16, i16* %blur_x, i64 %2205
  %2207 = bitcast i16* %2206 to <32 x i16>*
  store <32 x i16> %2204, <32 x i16>* %2207, align 2, !tbaa !423
  %2208 = add nsw i64 %1476, %263
  %2209 = getelementptr inbounds i16, i16* %blur_x, i64 %2208
  %2210 = bitcast i16* %2209 to <32 x i16>*
  %2211 = load <32 x i16>, <32 x i16>* %2210, align 2, !tbaa !423
  %2212 = add nsw i64 %1343, %263
  %2213 = getelementptr inbounds i16, i16* %blur_x, i64 %2212
  %2214 = bitcast i16* %2213 to <32 x i16>*
  %2215 = load <32 x i16>, <32 x i16>* %2214, align 2, !tbaa !423
  %2216 = add <32 x i16> %2211, %2204
  %2217 = add <32 x i16> %2216, %2215
  %2218 = shufflevector <32 x i16> %2217, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2219 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2218, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2220 = shufflevector <32 x i16> %2217, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2221 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2220, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2222 = shufflevector <16 x i16> %2219, <16 x i16> %2221, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2223 = lshr <32 x i16> %2222, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2224 = sext i32 %a42 to i64
  %2225 = add nsw i64 %2224, 6
  %2226 = mul nsw i64 %2225, %146
  %2227 = add nsw i64 %272, %2226
  %2228 = getelementptr inbounds i16, i16* %268, i64 %2227
  %2229 = bitcast i16* %2228 to <32 x i16>*
  store <32 x i16> %2223, <32 x i16>* %2229, align 2, !tbaa !425
  br label %"produce blur_x182"

"produce blur_x182":                              ; preds = %"end for blur_y.s0.x.x.rebased169", %"produce blur_x179"
  %2230 = getelementptr inbounds i16, i16* %read_input, i64 %288
  %2231 = getelementptr inbounds i16, i16* %2230, i64 1
  %2232 = bitcast i16* %2231 to <32 x i16>*
  %2233 = load <32 x i16>, <32 x i16>* %2232, align 2, !tbaa !412
  %2234 = getelementptr inbounds i16, i16* %2230, i64 2
  %2235 = bitcast i16* %2234 to <32 x i16>*
  %2236 = load <32 x i16>, <32 x i16>* %2235, align 2, !tbaa !412
  %2237 = bitcast i16* %2230 to <32 x i16>*
  %2238 = load <32 x i16>, <32 x i16>* %2237, align 2, !tbaa !412
  %2239 = add <32 x i16> %2236, %2233
  %2240 = add <32 x i16> %2239, %2238
  %2241 = shufflevector <32 x i16> %2240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2242 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2241, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2243 = shufflevector <32 x i16> %2240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2243, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2245 = shufflevector <16 x i16> %2242, <16 x i16> %2244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2246 = lshr <32 x i16> %2245, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2246, <32 x i16>* %1234, align 2, !tbaa !423
  %2247 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %2248 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %2249 = add <32 x i16> %2247, %2246
  %2250 = add <32 x i16> %2249, %2248
  %2251 = shufflevector <32 x i16> %2250, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2252 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2251, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2253 = shufflevector <32 x i16> %2250, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2254 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2253, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2255 = shufflevector <16 x i16> %2252, <16 x i16> %2254, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2256 = lshr <32 x i16> %2255, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2257 = add nsw i64 %1356, 7
  %2258 = mul nsw i64 %2257, %146
  %2259 = getelementptr inbounds i16, i16* %268, i64 %2258
  %2260 = bitcast i16* %2259 to <32 x i16>*
  store <32 x i16> %2256, <32 x i16>* %2260, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased184.preheader", label %"end for blur_y.s0.x.x.rebased185", !prof !406

"for blur_y.s0.x.x.rebased184.preheader":         ; preds = %"produce blur_x182"
  %2261 = sext i32 %t941 to i64
  %2262 = add nsw i64 %2261, 32
  %2263 = add nsw i64 %1124, 32
  %2264 = add nsw i64 %1232, 32
  %2265 = add nsw i64 %1476, 32
  %2266 = sext i32 %a42 to i64
  %2267 = add nsw i64 %2266, 7
  %2268 = mul nsw i64 %2267, %146
  br label %"for blur_y.s0.x.x.rebased184"

"for blur_y.s0.x.x.rebased184":                   ; preds = %"for blur_y.s0.x.x.rebased184.preheader", %"consume blur_x191"
  %indvars.iv2529 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased184.preheader" ], [ %indvars.iv.next2530, %"consume blur_x191" ]
  %2269 = trunc i64 %indvars.iv2529 to i32
  %2270 = shl nsw i32 %2269, 5
  %2271 = icmp sgt i32 %b37, %2270
  br i1 %2271, label %"produce blur_x190", label %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge"

"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased184"
  %.pre2747 = shl nuw nsw i64 %indvars.iv2529, 5
  br label %"consume blur_x191"

"end for blur_y.s0.x.x.rebased185":               ; preds = %"consume blur_x191", %"produce blur_x182"
  br i1 %.not1855, label %"produce blur_x198", label %"produce blur_x195"

"produce blur_x190":                              ; preds = %"for blur_y.s0.x.x.rebased184"
  %t612.s = add nsw i32 %2270, %t975
  %2272 = sext i32 %t612.s to i64
  %2273 = getelementptr inbounds i16, i16* %read_input, i64 %2272
  %2274 = getelementptr inbounds i16, i16* %2273, i64 33
  %2275 = bitcast i16* %2274 to <32 x i16>*
  %2276 = load <32 x i16>, <32 x i16>* %2275, align 2, !tbaa !412
  %2277 = getelementptr inbounds i16, i16* %2273, i64 34
  %2278 = bitcast i16* %2277 to <32 x i16>*
  %2279 = load <32 x i16>, <32 x i16>* %2278, align 2, !tbaa !412
  %2280 = getelementptr inbounds i16, i16* %2273, i64 32
  %2281 = bitcast i16* %2280 to <32 x i16>*
  %2282 = load <32 x i16>, <32 x i16>* %2281, align 2, !tbaa !412
  %2283 = add <32 x i16> %2279, %2276
  %2284 = add <32 x i16> %2283, %2282
  %2285 = shufflevector <32 x i16> %2284, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2286 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2285, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2287 = shufflevector <32 x i16> %2284, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2287, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2289 = shufflevector <16 x i16> %2286, <16 x i16> %2288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2290 = lshr <32 x i16> %2289, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2291 = shl nuw nsw i64 %indvars.iv2529, 5
  %.idx2009 = add nsw i64 %2262, %2291
  %2292 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2009
  %2293 = bitcast i16* %2292 to <32 x i16>*
  store <32 x i16> %2290, <32 x i16>* %2293, align 2, !tbaa !423
  br label %"consume blur_x191"

"consume blur_x191":                              ; preds = %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge", %"produce blur_x190"
  %.pre-phi2748 = phi i64 [ %.pre2747, %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge" ], [ %2291, %"produce blur_x190" ]
  %.idx2004 = add nsw i64 %2263, %.pre-phi2748
  %2294 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2004
  %2295 = bitcast i16* %2294 to <32 x i16>*
  %2296 = load <32 x i16>, <32 x i16>* %2295, align 2, !tbaa !423
  %.idx2005 = add nsw i64 %2264, %.pre-phi2748
  %2297 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2005
  %2298 = bitcast i16* %2297 to <32 x i16>*
  %2299 = load <32 x i16>, <32 x i16>* %2298, align 2, !tbaa !423
  %.idx2006 = add nsw i64 %2265, %.pre-phi2748
  %2300 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2006
  %2301 = bitcast i16* %2300 to <32 x i16>*
  %2302 = load <32 x i16>, <32 x i16>* %2301, align 2, !tbaa !423
  %2303 = add <32 x i16> %2299, %2296
  %2304 = add <32 x i16> %2303, %2302
  %2305 = shufflevector <32 x i16> %2304, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2305, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2307 = shufflevector <32 x i16> %2304, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2307, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2309 = shufflevector <16 x i16> %2306, <16 x i16> %2308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2310 = lshr <32 x i16> %2309, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2311 = add nuw nsw i64 %.pre-phi2748, 32
  %2312 = add nsw i64 %2311, %269
  %.idx2007 = add i64 %2312, %2268
  %2313 = getelementptr inbounds i16, i16* %268, i64 %.idx2007
  %2314 = bitcast i16* %2313 to <32 x i16>*
  store <32 x i16> %2310, <32 x i16>* %2314, align 2, !tbaa !425
  %indvars.iv.next2530 = add nuw nsw i64 %indvars.iv2529, 1
  %.not2008 = icmp eq i64 %indvars.iv.next2530, %348
  br i1 %.not2008, label %"end for blur_y.s0.x.x.rebased185", label %"for blur_y.s0.x.x.rebased184"

"produce blur_x195":                              ; preds = %"end for blur_y.s0.x.x.rebased185"
  %2315 = getelementptr inbounds i16, i16* %read_input, i64 %289
  %2316 = getelementptr inbounds i16, i16* %2315, i64 1
  %2317 = bitcast i16* %2316 to <32 x i16>*
  %2318 = load <32 x i16>, <32 x i16>* %2317, align 2, !tbaa !412
  %2319 = getelementptr inbounds i16, i16* %2315, i64 2
  %2320 = bitcast i16* %2319 to <32 x i16>*
  %2321 = load <32 x i16>, <32 x i16>* %2320, align 2, !tbaa !412
  %2322 = bitcast i16* %2315 to <32 x i16>*
  %2323 = load <32 x i16>, <32 x i16>* %2322, align 2, !tbaa !412
  %2324 = add <32 x i16> %2321, %2318
  %2325 = add <32 x i16> %2324, %2323
  %2326 = shufflevector <32 x i16> %2325, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2327 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2326, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2328 = shufflevector <32 x i16> %2325, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2329 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2328, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2330 = shufflevector <16 x i16> %2327, <16 x i16> %2329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2331 = lshr <32 x i16> %2330, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2332 = add nsw i64 %1232, %263
  %2333 = getelementptr inbounds i16, i16* %blur_x, i64 %2332
  %2334 = bitcast i16* %2333 to <32 x i16>*
  store <32 x i16> %2331, <32 x i16>* %2334, align 2, !tbaa !423
  %2335 = add nsw i64 %1124, %263
  %2336 = getelementptr inbounds i16, i16* %blur_x, i64 %2335
  %2337 = bitcast i16* %2336 to <32 x i16>*
  %2338 = load <32 x i16>, <32 x i16>* %2337, align 2, !tbaa !423
  %2339 = add nsw i64 %1476, %263
  %2340 = getelementptr inbounds i16, i16* %blur_x, i64 %2339
  %2341 = bitcast i16* %2340 to <32 x i16>*
  %2342 = load <32 x i16>, <32 x i16>* %2341, align 2, !tbaa !423
  %2343 = add <32 x i16> %2338, %2331
  %2344 = add <32 x i16> %2343, %2342
  %2345 = shufflevector <32 x i16> %2344, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2346 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2345, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2347 = shufflevector <32 x i16> %2344, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2348 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2347, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2349 = shufflevector <16 x i16> %2346, <16 x i16> %2348, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2350 = lshr <32 x i16> %2349, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2351 = sext i32 %a42 to i64
  %2352 = add nsw i64 %2351, 7
  %2353 = mul nsw i64 %2352, %146
  %2354 = add nsw i64 %272, %2353
  %2355 = getelementptr inbounds i16, i16* %268, i64 %2354
  %2356 = bitcast i16* %2355 to <32 x i16>*
  store <32 x i16> %2350, <32 x i16>* %2356, align 2, !tbaa !425
  br label %"produce blur_x198"

"produce blur_x198":                              ; preds = %"end for blur_y.s0.x.x.rebased185", %"produce blur_x195"
  %2357 = getelementptr inbounds i16, i16* %read_input, i64 %290
  %2358 = getelementptr inbounds i16, i16* %2357, i64 1
  %2359 = bitcast i16* %2358 to <32 x i16>*
  %2360 = load <32 x i16>, <32 x i16>* %2359, align 2, !tbaa !412
  %2361 = getelementptr inbounds i16, i16* %2357, i64 2
  %2362 = bitcast i16* %2361 to <32 x i16>*
  %2363 = load <32 x i16>, <32 x i16>* %2362, align 4, !tbaa !412
  %2364 = bitcast i16* %2357 to <32 x i16>*
  %2365 = load <32 x i16>, <32 x i16>* %2364, align 4, !tbaa !412
  %2366 = add <32 x i16> %2363, %2360
  %2367 = add <32 x i16> %2366, %2365
  %2368 = shufflevector <32 x i16> %2367, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2369 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2368, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2370 = shufflevector <32 x i16> %2367, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2371 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2370, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2372 = shufflevector <16 x i16> %2369, <16 x i16> %2371, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2373 = lshr <32 x i16> %2372, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2373, <32 x i16>* %1345, align 2, !tbaa !423
  %2374 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %2375 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %2376 = add <32 x i16> %2374, %2373
  %2377 = add <32 x i16> %2376, %2375
  %2378 = shufflevector <32 x i16> %2377, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2379 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2378, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2380 = shufflevector <32 x i16> %2377, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2381 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2380, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2382 = shufflevector <16 x i16> %2379, <16 x i16> %2381, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2383 = lshr <32 x i16> %2382, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2384 = add nsw i64 %1356, 8
  %2385 = mul nsw i64 %2384, %146
  %2386 = getelementptr inbounds i16, i16* %268, i64 %2385
  %2387 = bitcast i16* %2386 to <32 x i16>*
  store <32 x i16> %2383, <32 x i16>* %2387, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased200.preheader", label %"end for blur_y.s0.x.x.rebased201", !prof !406

"for blur_y.s0.x.x.rebased200.preheader":         ; preds = %"produce blur_x198"
  %2388 = sext i32 %t942 to i64
  %2389 = add nsw i64 %2388, 32
  %2390 = add nsw i64 %1232, 32
  %2391 = add nsw i64 %1343, 32
  %2392 = add nsw i64 %1124, 32
  %2393 = sext i32 %a42 to i64
  %2394 = add nsw i64 %2393, 8
  %2395 = mul nsw i64 %2394, %146
  br label %"for blur_y.s0.x.x.rebased200"

"for blur_y.s0.x.x.rebased200":                   ; preds = %"for blur_y.s0.x.x.rebased200.preheader", %"consume blur_x207"
  %indvars.iv2531 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased200.preheader" ], [ %indvars.iv.next2532, %"consume blur_x207" ]
  %2396 = trunc i64 %indvars.iv2531 to i32
  %2397 = shl nsw i32 %2396, 5
  %2398 = icmp sgt i32 %b37, %2397
  br i1 %2398, label %"produce blur_x206", label %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge"

"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased200"
  %.pre2749 = shl nuw nsw i64 %indvars.iv2531, 5
  br label %"consume blur_x207"

"end for blur_y.s0.x.x.rebased201":               ; preds = %"consume blur_x207", %"produce blur_x198"
  br i1 %.not1855, label %"produce blur_x214", label %"produce blur_x211"

"produce blur_x206":                              ; preds = %"for blur_y.s0.x.x.rebased200"
  %2399 = shl nsw i32 %2396, 2
  %2400 = add nsw i32 %2399, %a40
  %2401 = shl nsw i32 %2400, 2
  %t811 = add nsw i32 %2401, %a40
  %2402 = sext i32 %t811 to i64
  %2403 = shl nsw i64 %2402, 1
  %2404 = getelementptr inbounds i16, i16* %read_input, i64 %2403
  %2405 = getelementptr inbounds i16, i16* %2404, i64 33
  %2406 = bitcast i16* %2405 to <32 x i16>*
  %2407 = load <32 x i16>, <32 x i16>* %2406, align 2, !tbaa !412
  %2408 = getelementptr inbounds i16, i16* %2404, i64 34
  %2409 = bitcast i16* %2408 to <32 x i16>*
  %2410 = load <32 x i16>, <32 x i16>* %2409, align 4, !tbaa !412
  %2411 = getelementptr inbounds i16, i16* %2404, i64 32
  %2412 = bitcast i16* %2411 to <32 x i16>*
  %2413 = load <32 x i16>, <32 x i16>* %2412, align 4, !tbaa !412
  %2414 = add <32 x i16> %2410, %2407
  %2415 = add <32 x i16> %2414, %2413
  %2416 = shufflevector <32 x i16> %2415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2417 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2416, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2418 = shufflevector <32 x i16> %2415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2419 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2418, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2420 = shufflevector <16 x i16> %2417, <16 x i16> %2419, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2421 = lshr <32 x i16> %2420, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2422 = shl nuw nsw i64 %indvars.iv2531, 5
  %.idx2003 = add nsw i64 %2389, %2422
  %2423 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2003
  %2424 = bitcast i16* %2423 to <32 x i16>*
  store <32 x i16> %2421, <32 x i16>* %2424, align 2, !tbaa !423
  br label %"consume blur_x207"

"consume blur_x207":                              ; preds = %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge", %"produce blur_x206"
  %.pre-phi2750 = phi i64 [ %.pre2749, %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge" ], [ %2422, %"produce blur_x206" ]
  %.idx1998 = add nsw i64 %2390, %.pre-phi2750
  %2425 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1998
  %2426 = bitcast i16* %2425 to <32 x i16>*
  %2427 = load <32 x i16>, <32 x i16>* %2426, align 2, !tbaa !423
  %.idx1999 = add nsw i64 %2391, %.pre-phi2750
  %2428 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1999
  %2429 = bitcast i16* %2428 to <32 x i16>*
  %2430 = load <32 x i16>, <32 x i16>* %2429, align 2, !tbaa !423
  %.idx2000 = add nsw i64 %2392, %.pre-phi2750
  %2431 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx2000
  %2432 = bitcast i16* %2431 to <32 x i16>*
  %2433 = load <32 x i16>, <32 x i16>* %2432, align 2, !tbaa !423
  %2434 = add <32 x i16> %2430, %2427
  %2435 = add <32 x i16> %2434, %2433
  %2436 = shufflevector <32 x i16> %2435, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2436, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2438 = shufflevector <32 x i16> %2435, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2438, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2440 = shufflevector <16 x i16> %2437, <16 x i16> %2439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2441 = lshr <32 x i16> %2440, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2442 = add nuw nsw i64 %.pre-phi2750, 32
  %2443 = add nsw i64 %2442, %269
  %.idx2001 = add i64 %2443, %2395
  %2444 = getelementptr inbounds i16, i16* %268, i64 %.idx2001
  %2445 = bitcast i16* %2444 to <32 x i16>*
  store <32 x i16> %2441, <32 x i16>* %2445, align 2, !tbaa !425
  %indvars.iv.next2532 = add nuw nsw i64 %indvars.iv2531, 1
  %.not2002 = icmp eq i64 %indvars.iv.next2532, %348
  br i1 %.not2002, label %"end for blur_y.s0.x.x.rebased201", label %"for blur_y.s0.x.x.rebased200"

"produce blur_x211":                              ; preds = %"end for blur_y.s0.x.x.rebased201"
  %2446 = getelementptr inbounds i16, i16* %read_input, i64 %292
  %2447 = getelementptr inbounds i16, i16* %2446, i64 1
  %2448 = bitcast i16* %2447 to <32 x i16>*
  %2449 = load <32 x i16>, <32 x i16>* %2448, align 2, !tbaa !412
  %2450 = getelementptr inbounds i16, i16* %2446, i64 2
  %2451 = bitcast i16* %2450 to <32 x i16>*
  %2452 = load <32 x i16>, <32 x i16>* %2451, align 2, !tbaa !412
  %2453 = bitcast i16* %2446 to <32 x i16>*
  %2454 = load <32 x i16>, <32 x i16>* %2453, align 2, !tbaa !412
  %2455 = add <32 x i16> %2452, %2449
  %2456 = add <32 x i16> %2455, %2454
  %2457 = shufflevector <32 x i16> %2456, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2458 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2457, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2459 = shufflevector <32 x i16> %2456, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2460 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2459, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2461 = shufflevector <16 x i16> %2458, <16 x i16> %2460, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2462 = lshr <32 x i16> %2461, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2463 = add nsw i64 %1343, %263
  %2464 = getelementptr inbounds i16, i16* %blur_x, i64 %2463
  %2465 = bitcast i16* %2464 to <32 x i16>*
  store <32 x i16> %2462, <32 x i16>* %2465, align 2, !tbaa !423
  %2466 = add nsw i64 %1232, %263
  %2467 = getelementptr inbounds i16, i16* %blur_x, i64 %2466
  %2468 = bitcast i16* %2467 to <32 x i16>*
  %2469 = load <32 x i16>, <32 x i16>* %2468, align 2, !tbaa !423
  %2470 = add nsw i64 %1124, %263
  %2471 = getelementptr inbounds i16, i16* %blur_x, i64 %2470
  %2472 = bitcast i16* %2471 to <32 x i16>*
  %2473 = load <32 x i16>, <32 x i16>* %2472, align 2, !tbaa !423
  %2474 = add <32 x i16> %2469, %2462
  %2475 = add <32 x i16> %2474, %2473
  %2476 = shufflevector <32 x i16> %2475, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2476, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2478 = shufflevector <32 x i16> %2475, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2478, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2480 = shufflevector <16 x i16> %2477, <16 x i16> %2479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2481 = lshr <32 x i16> %2480, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2482 = sext i32 %a42 to i64
  %2483 = add nsw i64 %2482, 8
  %2484 = mul nsw i64 %2483, %146
  %2485 = add nsw i64 %272, %2484
  %2486 = getelementptr inbounds i16, i16* %268, i64 %2485
  %2487 = bitcast i16* %2486 to <32 x i16>*
  store <32 x i16> %2481, <32 x i16>* %2487, align 2, !tbaa !425
  br label %"produce blur_x214"

"produce blur_x214":                              ; preds = %"end for blur_y.s0.x.x.rebased201", %"produce blur_x211"
  %2488 = getelementptr inbounds i16, i16* %read_input, i64 %293
  %2489 = getelementptr inbounds i16, i16* %2488, i64 1
  %2490 = bitcast i16* %2489 to <32 x i16>*
  %2491 = load <32 x i16>, <32 x i16>* %2490, align 2, !tbaa !412
  %2492 = getelementptr inbounds i16, i16* %2488, i64 2
  %2493 = bitcast i16* %2492 to <32 x i16>*
  %2494 = load <32 x i16>, <32 x i16>* %2493, align 2, !tbaa !412
  %2495 = bitcast i16* %2488 to <32 x i16>*
  %2496 = load <32 x i16>, <32 x i16>* %2495, align 2, !tbaa !412
  %2497 = add <32 x i16> %2494, %2491
  %2498 = add <32 x i16> %2497, %2496
  %2499 = shufflevector <32 x i16> %2498, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2500 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2499, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2501 = shufflevector <32 x i16> %2498, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2502 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2501, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2503 = shufflevector <16 x i16> %2500, <16 x i16> %2502, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2504 = lshr <32 x i16> %2503, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2504, <32 x i16>* %1478, align 2, !tbaa !423
  %2505 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %2506 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %2507 = add <32 x i16> %2505, %2504
  %2508 = add <32 x i16> %2507, %2506
  %2509 = shufflevector <32 x i16> %2508, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2509, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2511 = shufflevector <32 x i16> %2508, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2511, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2513 = shufflevector <16 x i16> %2510, <16 x i16> %2512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2514 = lshr <32 x i16> %2513, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2515 = add nsw i64 %1356, 9
  %2516 = mul nsw i64 %2515, %146
  %2517 = getelementptr inbounds i16, i16* %268, i64 %2516
  %2518 = bitcast i16* %2517 to <32 x i16>*
  store <32 x i16> %2514, <32 x i16>* %2518, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased216.preheader", label %"end for blur_y.s0.x.x.rebased217", !prof !406

"for blur_y.s0.x.x.rebased216.preheader":         ; preds = %"produce blur_x214"
  %2519 = sext i32 %t947 to i64
  %2520 = add nsw i64 %2519, 32
  %2521 = add nsw i64 %1343, 32
  %2522 = add nsw i64 %1476, 32
  %2523 = add nsw i64 %1232, 32
  %2524 = sext i32 %a42 to i64
  %2525 = add nsw i64 %2524, 9
  %2526 = mul nsw i64 %2525, %146
  br label %"for blur_y.s0.x.x.rebased216"

"for blur_y.s0.x.x.rebased216":                   ; preds = %"for blur_y.s0.x.x.rebased216.preheader", %"consume blur_x223"
  %indvars.iv2533 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased216.preheader" ], [ %indvars.iv.next2534, %"consume blur_x223" ]
  %2527 = trunc i64 %indvars.iv2533 to i32
  %2528 = shl nsw i32 %2527, 5
  %2529 = icmp sgt i32 %b37, %2528
  br i1 %2529, label %"produce blur_x222", label %"for blur_y.s0.x.x.rebased216.consume blur_x223_crit_edge"

"for blur_y.s0.x.x.rebased216.consume blur_x223_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased216"
  %.pre2751 = shl nuw nsw i64 %indvars.iv2533, 5
  br label %"consume blur_x223"

"end for blur_y.s0.x.x.rebased217":               ; preds = %"consume blur_x223", %"produce blur_x214"
  br i1 %.not1855, label %"produce blur_x230", label %"produce blur_x227"

"produce blur_x222":                              ; preds = %"for blur_y.s0.x.x.rebased216"
  %t622.s = add nsw i32 %2528, %t984
  %2530 = sext i32 %t622.s to i64
  %2531 = getelementptr inbounds i16, i16* %read_input, i64 %2530
  %2532 = getelementptr inbounds i16, i16* %2531, i64 33
  %2533 = bitcast i16* %2532 to <32 x i16>*
  %2534 = load <32 x i16>, <32 x i16>* %2533, align 2, !tbaa !412
  %2535 = getelementptr inbounds i16, i16* %2531, i64 34
  %2536 = bitcast i16* %2535 to <32 x i16>*
  %2537 = load <32 x i16>, <32 x i16>* %2536, align 2, !tbaa !412
  %2538 = getelementptr inbounds i16, i16* %2531, i64 32
  %2539 = bitcast i16* %2538 to <32 x i16>*
  %2540 = load <32 x i16>, <32 x i16>* %2539, align 2, !tbaa !412
  %2541 = add <32 x i16> %2537, %2534
  %2542 = add <32 x i16> %2541, %2540
  %2543 = shufflevector <32 x i16> %2542, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2544 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2543, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2545 = shufflevector <32 x i16> %2542, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2546 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2545, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2547 = shufflevector <16 x i16> %2544, <16 x i16> %2546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2548 = lshr <32 x i16> %2547, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2549 = shl nuw nsw i64 %indvars.iv2533, 5
  %.idx1997 = add nsw i64 %2520, %2549
  %2550 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1997
  %2551 = bitcast i16* %2550 to <32 x i16>*
  store <32 x i16> %2548, <32 x i16>* %2551, align 2, !tbaa !423
  br label %"consume blur_x223"

"consume blur_x223":                              ; preds = %"for blur_y.s0.x.x.rebased216.consume blur_x223_crit_edge", %"produce blur_x222"
  %.pre-phi2752 = phi i64 [ %.pre2751, %"for blur_y.s0.x.x.rebased216.consume blur_x223_crit_edge" ], [ %2549, %"produce blur_x222" ]
  %.idx1992 = add nsw i64 %2521, %.pre-phi2752
  %2552 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1992
  %2553 = bitcast i16* %2552 to <32 x i16>*
  %2554 = load <32 x i16>, <32 x i16>* %2553, align 2, !tbaa !423
  %.idx1993 = add nsw i64 %2522, %.pre-phi2752
  %2555 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1993
  %2556 = bitcast i16* %2555 to <32 x i16>*
  %2557 = load <32 x i16>, <32 x i16>* %2556, align 2, !tbaa !423
  %.idx1994 = add nsw i64 %2523, %.pre-phi2752
  %2558 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1994
  %2559 = bitcast i16* %2558 to <32 x i16>*
  %2560 = load <32 x i16>, <32 x i16>* %2559, align 2, !tbaa !423
  %2561 = add <32 x i16> %2557, %2554
  %2562 = add <32 x i16> %2561, %2560
  %2563 = shufflevector <32 x i16> %2562, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2563, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2565 = shufflevector <32 x i16> %2562, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2565, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2567 = shufflevector <16 x i16> %2564, <16 x i16> %2566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2568 = lshr <32 x i16> %2567, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2569 = add nuw nsw i64 %.pre-phi2752, 32
  %2570 = add nsw i64 %2569, %269
  %.idx1995 = add i64 %2570, %2526
  %2571 = getelementptr inbounds i16, i16* %268, i64 %.idx1995
  %2572 = bitcast i16* %2571 to <32 x i16>*
  store <32 x i16> %2568, <32 x i16>* %2572, align 2, !tbaa !425
  %indvars.iv.next2534 = add nuw nsw i64 %indvars.iv2533, 1
  %.not1996 = icmp eq i64 %indvars.iv.next2534, %348
  br i1 %.not1996, label %"end for blur_y.s0.x.x.rebased217", label %"for blur_y.s0.x.x.rebased216"

"produce blur_x227":                              ; preds = %"end for blur_y.s0.x.x.rebased217"
  %2573 = getelementptr inbounds i16, i16* %read_input, i64 %294
  %2574 = getelementptr inbounds i16, i16* %2573, i64 1
  %2575 = bitcast i16* %2574 to <32 x i16>*
  %2576 = load <32 x i16>, <32 x i16>* %2575, align 2, !tbaa !412
  %2577 = getelementptr inbounds i16, i16* %2573, i64 2
  %2578 = bitcast i16* %2577 to <32 x i16>*
  %2579 = load <32 x i16>, <32 x i16>* %2578, align 2, !tbaa !412
  %2580 = bitcast i16* %2573 to <32 x i16>*
  %2581 = load <32 x i16>, <32 x i16>* %2580, align 2, !tbaa !412
  %2582 = add <32 x i16> %2579, %2576
  %2583 = add <32 x i16> %2582, %2581
  %2584 = shufflevector <32 x i16> %2583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2585 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2584, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2586 = shufflevector <32 x i16> %2583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2587 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2586, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2588 = shufflevector <16 x i16> %2585, <16 x i16> %2587, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2589 = lshr <32 x i16> %2588, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2590 = add nsw i64 %1476, %263
  %2591 = getelementptr inbounds i16, i16* %blur_x, i64 %2590
  %2592 = bitcast i16* %2591 to <32 x i16>*
  store <32 x i16> %2589, <32 x i16>* %2592, align 2, !tbaa !423
  %2593 = add nsw i64 %1343, %263
  %2594 = getelementptr inbounds i16, i16* %blur_x, i64 %2593
  %2595 = bitcast i16* %2594 to <32 x i16>*
  %2596 = load <32 x i16>, <32 x i16>* %2595, align 2, !tbaa !423
  %2597 = add nsw i64 %1232, %263
  %2598 = getelementptr inbounds i16, i16* %blur_x, i64 %2597
  %2599 = bitcast i16* %2598 to <32 x i16>*
  %2600 = load <32 x i16>, <32 x i16>* %2599, align 2, !tbaa !423
  %2601 = add <32 x i16> %2596, %2589
  %2602 = add <32 x i16> %2601, %2600
  %2603 = shufflevector <32 x i16> %2602, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2604 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2603, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2605 = shufflevector <32 x i16> %2602, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2606 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2605, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2607 = shufflevector <16 x i16> %2604, <16 x i16> %2606, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2608 = lshr <32 x i16> %2607, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2609 = sext i32 %a42 to i64
  %2610 = add nsw i64 %2609, 9
  %2611 = mul nsw i64 %2610, %146
  %2612 = add nsw i64 %272, %2611
  %2613 = getelementptr inbounds i16, i16* %268, i64 %2612
  %2614 = bitcast i16* %2613 to <32 x i16>*
  store <32 x i16> %2608, <32 x i16>* %2614, align 2, !tbaa !425
  br label %"produce blur_x230"

"produce blur_x230":                              ; preds = %"end for blur_y.s0.x.x.rebased217", %"produce blur_x227"
  %2615 = getelementptr inbounds i16, i16* %read_input, i64 %295
  %2616 = getelementptr inbounds i16, i16* %2615, i64 1
  %2617 = bitcast i16* %2616 to <32 x i16>*
  %2618 = load <32 x i16>, <32 x i16>* %2617, align 2, !tbaa !412
  %2619 = getelementptr inbounds i16, i16* %2615, i64 2
  %2620 = bitcast i16* %2619 to <32 x i16>*
  %2621 = load <32 x i16>, <32 x i16>* %2620, align 4, !tbaa !412
  %2622 = bitcast i16* %2615 to <32 x i16>*
  %2623 = load <32 x i16>, <32 x i16>* %2622, align 8, !tbaa !412
  %2624 = add <32 x i16> %2621, %2618
  %2625 = add <32 x i16> %2624, %2623
  %2626 = shufflevector <32 x i16> %2625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2626, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2628 = shufflevector <32 x i16> %2625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2628, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2630 = shufflevector <16 x i16> %2627, <16 x i16> %2629, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2631 = lshr <32 x i16> %2630, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2631, <32 x i16>* %1126, align 2, !tbaa !423
  %2632 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %2633 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %2634 = add <32 x i16> %2632, %2631
  %2635 = add <32 x i16> %2634, %2633
  %2636 = shufflevector <32 x i16> %2635, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2636, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2638 = shufflevector <32 x i16> %2635, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2639 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2638, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2640 = shufflevector <16 x i16> %2637, <16 x i16> %2639, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2641 = lshr <32 x i16> %2640, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2642 = add nsw i64 %1356, 10
  %2643 = mul nsw i64 %2642, %146
  %2644 = getelementptr inbounds i16, i16* %268, i64 %2643
  %2645 = bitcast i16* %2644 to <32 x i16>*
  store <32 x i16> %2641, <32 x i16>* %2645, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased232.preheader", label %"end for blur_y.s0.x.x.rebased233", !prof !406

"for blur_y.s0.x.x.rebased232.preheader":         ; preds = %"produce blur_x230"
  %2646 = sext i32 %t939 to i64
  %2647 = add nsw i64 %2646, 32
  %2648 = add nsw i64 %1476, 32
  %2649 = add nsw i64 %1124, 32
  %2650 = add nsw i64 %1343, 32
  %2651 = sext i32 %a42 to i64
  %2652 = add nsw i64 %2651, 10
  %2653 = mul nsw i64 %2652, %146
  br label %"for blur_y.s0.x.x.rebased232"

"for blur_y.s0.x.x.rebased232":                   ; preds = %"for blur_y.s0.x.x.rebased232.preheader", %"consume blur_x239"
  %indvars.iv2535 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased232.preheader" ], [ %indvars.iv.next2536, %"consume blur_x239" ]
  %2654 = trunc i64 %indvars.iv2535 to i32
  %2655 = shl nsw i32 %2654, 5
  %2656 = icmp sgt i32 %b37, %2655
  br i1 %2656, label %"produce blur_x238", label %"for blur_y.s0.x.x.rebased232.consume blur_x239_crit_edge"

"for blur_y.s0.x.x.rebased232.consume blur_x239_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased232"
  %.pre2753 = shl nuw nsw i64 %indvars.iv2535, 5
  br label %"consume blur_x239"

"end for blur_y.s0.x.x.rebased233":               ; preds = %"consume blur_x239", %"produce blur_x230"
  br i1 %.not1855, label %"produce blur_x246", label %"produce blur_x243"

"produce blur_x238":                              ; preds = %"for blur_y.s0.x.x.rebased232"
  %t627.s = add nsw i32 %2655, %t989
  %2657 = sext i32 %t627.s to i64
  %2658 = getelementptr inbounds i16, i16* %read_input, i64 %2657
  %2659 = getelementptr inbounds i16, i16* %2658, i64 33
  %2660 = bitcast i16* %2659 to <32 x i16>*
  %2661 = load <32 x i16>, <32 x i16>* %2660, align 2, !tbaa !412
  %2662 = getelementptr inbounds i16, i16* %2658, i64 34
  %2663 = bitcast i16* %2662 to <32 x i16>*
  %2664 = load <32 x i16>, <32 x i16>* %2663, align 4, !tbaa !412
  %2665 = getelementptr inbounds i16, i16* %2658, i64 32
  %2666 = bitcast i16* %2665 to <32 x i16>*
  %2667 = load <32 x i16>, <32 x i16>* %2666, align 4, !tbaa !412
  %2668 = add <32 x i16> %2664, %2661
  %2669 = add <32 x i16> %2668, %2667
  %2670 = shufflevector <32 x i16> %2669, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2671 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2670, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2672 = shufflevector <32 x i16> %2669, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2673 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2672, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2674 = shufflevector <16 x i16> %2671, <16 x i16> %2673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2675 = lshr <32 x i16> %2674, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2676 = shl nuw nsw i64 %indvars.iv2535, 5
  %.idx1991 = add nsw i64 %2647, %2676
  %2677 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1991
  %2678 = bitcast i16* %2677 to <32 x i16>*
  store <32 x i16> %2675, <32 x i16>* %2678, align 2, !tbaa !423
  br label %"consume blur_x239"

"consume blur_x239":                              ; preds = %"for blur_y.s0.x.x.rebased232.consume blur_x239_crit_edge", %"produce blur_x238"
  %.pre-phi2754 = phi i64 [ %.pre2753, %"for blur_y.s0.x.x.rebased232.consume blur_x239_crit_edge" ], [ %2676, %"produce blur_x238" ]
  %.idx1986 = add nsw i64 %2648, %.pre-phi2754
  %2679 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1986
  %2680 = bitcast i16* %2679 to <32 x i16>*
  %2681 = load <32 x i16>, <32 x i16>* %2680, align 2, !tbaa !423
  %.idx1987 = add nsw i64 %2649, %.pre-phi2754
  %2682 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1987
  %2683 = bitcast i16* %2682 to <32 x i16>*
  %2684 = load <32 x i16>, <32 x i16>* %2683, align 2, !tbaa !423
  %.idx1988 = add nsw i64 %2650, %.pre-phi2754
  %2685 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1988
  %2686 = bitcast i16* %2685 to <32 x i16>*
  %2687 = load <32 x i16>, <32 x i16>* %2686, align 2, !tbaa !423
  %2688 = add <32 x i16> %2684, %2681
  %2689 = add <32 x i16> %2688, %2687
  %2690 = shufflevector <32 x i16> %2689, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2691 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2690, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2692 = shufflevector <32 x i16> %2689, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2692, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2694 = shufflevector <16 x i16> %2691, <16 x i16> %2693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2695 = lshr <32 x i16> %2694, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2696 = add nuw nsw i64 %.pre-phi2754, 32
  %2697 = add nsw i64 %2696, %269
  %.idx1989 = add i64 %2697, %2653
  %2698 = getelementptr inbounds i16, i16* %268, i64 %.idx1989
  %2699 = bitcast i16* %2698 to <32 x i16>*
  store <32 x i16> %2695, <32 x i16>* %2699, align 2, !tbaa !425
  %indvars.iv.next2536 = add nuw nsw i64 %indvars.iv2535, 1
  %.not1990 = icmp eq i64 %indvars.iv.next2536, %348
  br i1 %.not1990, label %"end for blur_y.s0.x.x.rebased233", label %"for blur_y.s0.x.x.rebased232"

"produce blur_x243":                              ; preds = %"end for blur_y.s0.x.x.rebased233"
  %2700 = getelementptr inbounds i16, i16* %read_input, i64 %296
  %2701 = getelementptr inbounds i16, i16* %2700, i64 1
  %2702 = bitcast i16* %2701 to <32 x i16>*
  %2703 = load <32 x i16>, <32 x i16>* %2702, align 2, !tbaa !412
  %2704 = getelementptr inbounds i16, i16* %2700, i64 2
  %2705 = bitcast i16* %2704 to <32 x i16>*
  %2706 = load <32 x i16>, <32 x i16>* %2705, align 2, !tbaa !412
  %2707 = bitcast i16* %2700 to <32 x i16>*
  %2708 = load <32 x i16>, <32 x i16>* %2707, align 2, !tbaa !412
  %2709 = add <32 x i16> %2706, %2703
  %2710 = add <32 x i16> %2709, %2708
  %2711 = shufflevector <32 x i16> %2710, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2712 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2711, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2713 = shufflevector <32 x i16> %2710, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2714 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2713, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2715 = shufflevector <16 x i16> %2712, <16 x i16> %2714, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2716 = lshr <32 x i16> %2715, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2717 = add nsw i64 %1124, %263
  %2718 = getelementptr inbounds i16, i16* %blur_x, i64 %2717
  %2719 = bitcast i16* %2718 to <32 x i16>*
  store <32 x i16> %2716, <32 x i16>* %2719, align 2, !tbaa !423
  %2720 = add nsw i64 %1476, %263
  %2721 = getelementptr inbounds i16, i16* %blur_x, i64 %2720
  %2722 = bitcast i16* %2721 to <32 x i16>*
  %2723 = load <32 x i16>, <32 x i16>* %2722, align 2, !tbaa !423
  %2724 = add nsw i64 %1343, %263
  %2725 = getelementptr inbounds i16, i16* %blur_x, i64 %2724
  %2726 = bitcast i16* %2725 to <32 x i16>*
  %2727 = load <32 x i16>, <32 x i16>* %2726, align 2, !tbaa !423
  %2728 = add <32 x i16> %2723, %2716
  %2729 = add <32 x i16> %2728, %2727
  %2730 = shufflevector <32 x i16> %2729, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2730, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2732 = shufflevector <32 x i16> %2729, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2732, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2734 = shufflevector <16 x i16> %2731, <16 x i16> %2733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2735 = lshr <32 x i16> %2734, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2736 = sext i32 %a42 to i64
  %2737 = add nsw i64 %2736, 10
  %2738 = mul nsw i64 %2737, %146
  %2739 = add nsw i64 %272, %2738
  %2740 = getelementptr inbounds i16, i16* %268, i64 %2739
  %2741 = bitcast i16* %2740 to <32 x i16>*
  store <32 x i16> %2735, <32 x i16>* %2741, align 2, !tbaa !425
  br label %"produce blur_x246"

"produce blur_x246":                              ; preds = %"end for blur_y.s0.x.x.rebased233", %"produce blur_x243"
  %2742 = getelementptr inbounds i16, i16* %read_input, i64 %297
  %2743 = getelementptr inbounds i16, i16* %2742, i64 1
  %2744 = bitcast i16* %2743 to <32 x i16>*
  %2745 = load <32 x i16>, <32 x i16>* %2744, align 2, !tbaa !412
  %2746 = getelementptr inbounds i16, i16* %2742, i64 2
  %2747 = bitcast i16* %2746 to <32 x i16>*
  %2748 = load <32 x i16>, <32 x i16>* %2747, align 2, !tbaa !412
  %2749 = bitcast i16* %2742 to <32 x i16>*
  %2750 = load <32 x i16>, <32 x i16>* %2749, align 2, !tbaa !412
  %2751 = add <32 x i16> %2748, %2745
  %2752 = add <32 x i16> %2751, %2750
  %2753 = shufflevector <32 x i16> %2752, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2754 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2753, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2755 = shufflevector <32 x i16> %2752, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2755, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2757 = shufflevector <16 x i16> %2754, <16 x i16> %2756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2758 = lshr <32 x i16> %2757, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2758, <32 x i16>* %1234, align 2, !tbaa !423
  %2759 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %2760 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %2761 = add <32 x i16> %2759, %2758
  %2762 = add <32 x i16> %2761, %2760
  %2763 = shufflevector <32 x i16> %2762, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2763, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2765 = shufflevector <32 x i16> %2762, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2766 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2765, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2767 = shufflevector <16 x i16> %2764, <16 x i16> %2766, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2768 = lshr <32 x i16> %2767, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2769 = add nsw i64 %1356, 11
  %2770 = mul nsw i64 %2769, %146
  %2771 = getelementptr inbounds i16, i16* %268, i64 %2770
  %2772 = bitcast i16* %2771 to <32 x i16>*
  store <32 x i16> %2768, <32 x i16>* %2772, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased248.preheader", label %"end for blur_y.s0.x.x.rebased249", !prof !406

"for blur_y.s0.x.x.rebased248.preheader":         ; preds = %"produce blur_x246"
  %2773 = sext i32 %t941 to i64
  %2774 = add nsw i64 %2773, 32
  %2775 = add nsw i64 %1124, 32
  %2776 = add nsw i64 %1232, 32
  %2777 = add nsw i64 %1476, 32
  %2778 = sext i32 %a42 to i64
  %2779 = add nsw i64 %2778, 11
  %2780 = mul nsw i64 %2779, %146
  br label %"for blur_y.s0.x.x.rebased248"

"for blur_y.s0.x.x.rebased248":                   ; preds = %"for blur_y.s0.x.x.rebased248.preheader", %"consume blur_x255"
  %indvars.iv2537 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased248.preheader" ], [ %indvars.iv.next2538, %"consume blur_x255" ]
  %2781 = trunc i64 %indvars.iv2537 to i32
  %2782 = shl nsw i32 %2781, 5
  %2783 = icmp sgt i32 %b37, %2782
  br i1 %2783, label %"produce blur_x254", label %"for blur_y.s0.x.x.rebased248.consume blur_x255_crit_edge"

"for blur_y.s0.x.x.rebased248.consume blur_x255_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased248"
  %.pre2755 = shl nuw nsw i64 %indvars.iv2537, 5
  br label %"consume blur_x255"

"end for blur_y.s0.x.x.rebased249":               ; preds = %"consume blur_x255", %"produce blur_x246"
  br i1 %.not1855, label %"produce blur_x262", label %"produce blur_x259"

"produce blur_x254":                              ; preds = %"for blur_y.s0.x.x.rebased248"
  %t632.s = add nsw i32 %2782, %t994
  %2784 = sext i32 %t632.s to i64
  %2785 = getelementptr inbounds i16, i16* %read_input, i64 %2784
  %2786 = getelementptr inbounds i16, i16* %2785, i64 33
  %2787 = bitcast i16* %2786 to <32 x i16>*
  %2788 = load <32 x i16>, <32 x i16>* %2787, align 2, !tbaa !412
  %2789 = getelementptr inbounds i16, i16* %2785, i64 34
  %2790 = bitcast i16* %2789 to <32 x i16>*
  %2791 = load <32 x i16>, <32 x i16>* %2790, align 2, !tbaa !412
  %2792 = getelementptr inbounds i16, i16* %2785, i64 32
  %2793 = bitcast i16* %2792 to <32 x i16>*
  %2794 = load <32 x i16>, <32 x i16>* %2793, align 2, !tbaa !412
  %2795 = add <32 x i16> %2791, %2788
  %2796 = add <32 x i16> %2795, %2794
  %2797 = shufflevector <32 x i16> %2796, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2798 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2797, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2799 = shufflevector <32 x i16> %2796, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2800 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2799, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2801 = shufflevector <16 x i16> %2798, <16 x i16> %2800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2802 = lshr <32 x i16> %2801, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2803 = shl nuw nsw i64 %indvars.iv2537, 5
  %.idx1985 = add nsw i64 %2774, %2803
  %2804 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1985
  %2805 = bitcast i16* %2804 to <32 x i16>*
  store <32 x i16> %2802, <32 x i16>* %2805, align 2, !tbaa !423
  br label %"consume blur_x255"

"consume blur_x255":                              ; preds = %"for blur_y.s0.x.x.rebased248.consume blur_x255_crit_edge", %"produce blur_x254"
  %.pre-phi2756 = phi i64 [ %.pre2755, %"for blur_y.s0.x.x.rebased248.consume blur_x255_crit_edge" ], [ %2803, %"produce blur_x254" ]
  %.idx1980 = add nsw i64 %2775, %.pre-phi2756
  %2806 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1980
  %2807 = bitcast i16* %2806 to <32 x i16>*
  %2808 = load <32 x i16>, <32 x i16>* %2807, align 2, !tbaa !423
  %.idx1981 = add nsw i64 %2776, %.pre-phi2756
  %2809 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1981
  %2810 = bitcast i16* %2809 to <32 x i16>*
  %2811 = load <32 x i16>, <32 x i16>* %2810, align 2, !tbaa !423
  %.idx1982 = add nsw i64 %2777, %.pre-phi2756
  %2812 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1982
  %2813 = bitcast i16* %2812 to <32 x i16>*
  %2814 = load <32 x i16>, <32 x i16>* %2813, align 2, !tbaa !423
  %2815 = add <32 x i16> %2811, %2808
  %2816 = add <32 x i16> %2815, %2814
  %2817 = shufflevector <32 x i16> %2816, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2818 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2817, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2819 = shufflevector <32 x i16> %2816, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2819, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2821 = shufflevector <16 x i16> %2818, <16 x i16> %2820, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2822 = lshr <32 x i16> %2821, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2823 = add nuw nsw i64 %.pre-phi2756, 32
  %2824 = add nsw i64 %2823, %269
  %.idx1983 = add i64 %2824, %2780
  %2825 = getelementptr inbounds i16, i16* %268, i64 %.idx1983
  %2826 = bitcast i16* %2825 to <32 x i16>*
  store <32 x i16> %2822, <32 x i16>* %2826, align 2, !tbaa !425
  %indvars.iv.next2538 = add nuw nsw i64 %indvars.iv2537, 1
  %.not1984 = icmp eq i64 %indvars.iv.next2538, %348
  br i1 %.not1984, label %"end for blur_y.s0.x.x.rebased249", label %"for blur_y.s0.x.x.rebased248"

"produce blur_x259":                              ; preds = %"end for blur_y.s0.x.x.rebased249"
  %2827 = getelementptr inbounds i16, i16* %read_input, i64 %298
  %2828 = getelementptr inbounds i16, i16* %2827, i64 1
  %2829 = bitcast i16* %2828 to <32 x i16>*
  %2830 = load <32 x i16>, <32 x i16>* %2829, align 2, !tbaa !412
  %2831 = getelementptr inbounds i16, i16* %2827, i64 2
  %2832 = bitcast i16* %2831 to <32 x i16>*
  %2833 = load <32 x i16>, <32 x i16>* %2832, align 2, !tbaa !412
  %2834 = bitcast i16* %2827 to <32 x i16>*
  %2835 = load <32 x i16>, <32 x i16>* %2834, align 2, !tbaa !412
  %2836 = add <32 x i16> %2833, %2830
  %2837 = add <32 x i16> %2836, %2835
  %2838 = shufflevector <32 x i16> %2837, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2839 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2838, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2840 = shufflevector <32 x i16> %2837, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2841 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2840, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2842 = shufflevector <16 x i16> %2839, <16 x i16> %2841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2843 = lshr <32 x i16> %2842, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2844 = add nsw i64 %1232, %263
  %2845 = getelementptr inbounds i16, i16* %blur_x, i64 %2844
  %2846 = bitcast i16* %2845 to <32 x i16>*
  store <32 x i16> %2843, <32 x i16>* %2846, align 2, !tbaa !423
  %2847 = add nsw i64 %1124, %263
  %2848 = getelementptr inbounds i16, i16* %blur_x, i64 %2847
  %2849 = bitcast i16* %2848 to <32 x i16>*
  %2850 = load <32 x i16>, <32 x i16>* %2849, align 2, !tbaa !423
  %2851 = add nsw i64 %1476, %263
  %2852 = getelementptr inbounds i16, i16* %blur_x, i64 %2851
  %2853 = bitcast i16* %2852 to <32 x i16>*
  %2854 = load <32 x i16>, <32 x i16>* %2853, align 2, !tbaa !423
  %2855 = add <32 x i16> %2850, %2843
  %2856 = add <32 x i16> %2855, %2854
  %2857 = shufflevector <32 x i16> %2856, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2858 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2857, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2859 = shufflevector <32 x i16> %2856, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2859, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2861 = shufflevector <16 x i16> %2858, <16 x i16> %2860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2862 = lshr <32 x i16> %2861, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2863 = sext i32 %a42 to i64
  %2864 = add nsw i64 %2863, 11
  %2865 = mul nsw i64 %2864, %146
  %2866 = add nsw i64 %272, %2865
  %2867 = getelementptr inbounds i16, i16* %268, i64 %2866
  %2868 = bitcast i16* %2867 to <32 x i16>*
  store <32 x i16> %2862, <32 x i16>* %2868, align 2, !tbaa !425
  br label %"produce blur_x262"

"produce blur_x262":                              ; preds = %"end for blur_y.s0.x.x.rebased249", %"produce blur_x259"
  %2869 = getelementptr inbounds i16, i16* %read_input, i64 %299
  %2870 = getelementptr inbounds i16, i16* %2869, i64 1
  %2871 = bitcast i16* %2870 to <32 x i16>*
  %2872 = load <32 x i16>, <32 x i16>* %2871, align 2, !tbaa !412
  %2873 = getelementptr inbounds i16, i16* %2869, i64 2
  %2874 = bitcast i16* %2873 to <32 x i16>*
  %2875 = load <32 x i16>, <32 x i16>* %2874, align 4, !tbaa !412
  %2876 = bitcast i16* %2869 to <32 x i16>*
  %2877 = load <32 x i16>, <32 x i16>* %2876, align 4, !tbaa !412
  %2878 = add <32 x i16> %2875, %2872
  %2879 = add <32 x i16> %2878, %2877
  %2880 = shufflevector <32 x i16> %2879, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2881 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2880, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2882 = shufflevector <32 x i16> %2879, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2883 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2882, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2884 = shufflevector <16 x i16> %2881, <16 x i16> %2883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2885 = lshr <32 x i16> %2884, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %2885, <32 x i16>* %1345, align 2, !tbaa !423
  %2886 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %2887 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %2888 = add <32 x i16> %2886, %2885
  %2889 = add <32 x i16> %2888, %2887
  %2890 = shufflevector <32 x i16> %2889, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2891 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2890, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2892 = shufflevector <32 x i16> %2889, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2892, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2894 = shufflevector <16 x i16> %2891, <16 x i16> %2893, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2895 = lshr <32 x i16> %2894, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2896 = add nsw i64 %1356, 12
  %2897 = mul nsw i64 %2896, %146
  %2898 = getelementptr inbounds i16, i16* %268, i64 %2897
  %2899 = bitcast i16* %2898 to <32 x i16>*
  store <32 x i16> %2895, <32 x i16>* %2899, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased264.preheader", label %"end for blur_y.s0.x.x.rebased265", !prof !406

"for blur_y.s0.x.x.rebased264.preheader":         ; preds = %"produce blur_x262"
  %2900 = sext i32 %t942 to i64
  %2901 = add nsw i64 %2900, 32
  %2902 = add nsw i64 %1232, 32
  %2903 = add nsw i64 %1343, 32
  %2904 = add nsw i64 %1124, 32
  %2905 = sext i32 %a42 to i64
  %2906 = add nsw i64 %2905, 12
  %2907 = mul nsw i64 %2906, %146
  br label %"for blur_y.s0.x.x.rebased264"

"for blur_y.s0.x.x.rebased264":                   ; preds = %"for blur_y.s0.x.x.rebased264.preheader", %"consume blur_x271"
  %indvars.iv2539 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased264.preheader" ], [ %indvars.iv.next2540, %"consume blur_x271" ]
  %2908 = trunc i64 %indvars.iv2539 to i32
  %2909 = shl nsw i32 %2908, 5
  %2910 = icmp sgt i32 %b37, %2909
  br i1 %2910, label %"produce blur_x270", label %"for blur_y.s0.x.x.rebased264.consume blur_x271_crit_edge"

"for blur_y.s0.x.x.rebased264.consume blur_x271_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased264"
  %.pre2757 = shl nuw nsw i64 %indvars.iv2539, 5
  br label %"consume blur_x271"

"end for blur_y.s0.x.x.rebased265":               ; preds = %"consume blur_x271", %"produce blur_x262"
  br i1 %.not1855, label %"produce blur_x278", label %"produce blur_x275"

"produce blur_x270":                              ; preds = %"for blur_y.s0.x.x.rebased264"
  %t637.s = add nsw i32 %2909, %t999
  %2911 = sext i32 %t637.s to i64
  %2912 = getelementptr inbounds i16, i16* %read_input, i64 %2911
  %2913 = getelementptr inbounds i16, i16* %2912, i64 33
  %2914 = bitcast i16* %2913 to <32 x i16>*
  %2915 = load <32 x i16>, <32 x i16>* %2914, align 2, !tbaa !412
  %2916 = getelementptr inbounds i16, i16* %2912, i64 34
  %2917 = bitcast i16* %2916 to <32 x i16>*
  %2918 = load <32 x i16>, <32 x i16>* %2917, align 4, !tbaa !412
  %2919 = getelementptr inbounds i16, i16* %2912, i64 32
  %2920 = bitcast i16* %2919 to <32 x i16>*
  %2921 = load <32 x i16>, <32 x i16>* %2920, align 4, !tbaa !412
  %2922 = add <32 x i16> %2918, %2915
  %2923 = add <32 x i16> %2922, %2921
  %2924 = shufflevector <32 x i16> %2923, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2925 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2924, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2926 = shufflevector <32 x i16> %2923, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2927 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2926, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2928 = shufflevector <16 x i16> %2925, <16 x i16> %2927, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2929 = lshr <32 x i16> %2928, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2930 = shl nuw nsw i64 %indvars.iv2539, 5
  %.idx1979 = add nsw i64 %2901, %2930
  %2931 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1979
  %2932 = bitcast i16* %2931 to <32 x i16>*
  store <32 x i16> %2929, <32 x i16>* %2932, align 2, !tbaa !423
  br label %"consume blur_x271"

"consume blur_x271":                              ; preds = %"for blur_y.s0.x.x.rebased264.consume blur_x271_crit_edge", %"produce blur_x270"
  %.pre-phi2758 = phi i64 [ %.pre2757, %"for blur_y.s0.x.x.rebased264.consume blur_x271_crit_edge" ], [ %2930, %"produce blur_x270" ]
  %.idx1974 = add nsw i64 %2902, %.pre-phi2758
  %2933 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1974
  %2934 = bitcast i16* %2933 to <32 x i16>*
  %2935 = load <32 x i16>, <32 x i16>* %2934, align 2, !tbaa !423
  %.idx1975 = add nsw i64 %2903, %.pre-phi2758
  %2936 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1975
  %2937 = bitcast i16* %2936 to <32 x i16>*
  %2938 = load <32 x i16>, <32 x i16>* %2937, align 2, !tbaa !423
  %.idx1976 = add nsw i64 %2904, %.pre-phi2758
  %2939 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1976
  %2940 = bitcast i16* %2939 to <32 x i16>*
  %2941 = load <32 x i16>, <32 x i16>* %2940, align 2, !tbaa !423
  %2942 = add <32 x i16> %2938, %2935
  %2943 = add <32 x i16> %2942, %2941
  %2944 = shufflevector <32 x i16> %2943, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2945 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2944, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2946 = shufflevector <32 x i16> %2943, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2946, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2948 = shufflevector <16 x i16> %2945, <16 x i16> %2947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2949 = lshr <32 x i16> %2948, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2950 = add nuw nsw i64 %.pre-phi2758, 32
  %2951 = add nsw i64 %2950, %269
  %.idx1977 = add i64 %2951, %2907
  %2952 = getelementptr inbounds i16, i16* %268, i64 %.idx1977
  %2953 = bitcast i16* %2952 to <32 x i16>*
  store <32 x i16> %2949, <32 x i16>* %2953, align 2, !tbaa !425
  %indvars.iv.next2540 = add nuw nsw i64 %indvars.iv2539, 1
  %.not1978 = icmp eq i64 %indvars.iv.next2540, %348
  br i1 %.not1978, label %"end for blur_y.s0.x.x.rebased265", label %"for blur_y.s0.x.x.rebased264"

"produce blur_x275":                              ; preds = %"end for blur_y.s0.x.x.rebased265"
  %2954 = getelementptr inbounds i16, i16* %read_input, i64 %300
  %2955 = getelementptr inbounds i16, i16* %2954, i64 1
  %2956 = bitcast i16* %2955 to <32 x i16>*
  %2957 = load <32 x i16>, <32 x i16>* %2956, align 2, !tbaa !412
  %2958 = getelementptr inbounds i16, i16* %2954, i64 2
  %2959 = bitcast i16* %2958 to <32 x i16>*
  %2960 = load <32 x i16>, <32 x i16>* %2959, align 2, !tbaa !412
  %2961 = bitcast i16* %2954 to <32 x i16>*
  %2962 = load <32 x i16>, <32 x i16>* %2961, align 2, !tbaa !412
  %2963 = add <32 x i16> %2960, %2957
  %2964 = add <32 x i16> %2963, %2962
  %2965 = shufflevector <32 x i16> %2964, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2966 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2965, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2967 = shufflevector <32 x i16> %2964, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2968 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2967, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2969 = shufflevector <16 x i16> %2966, <16 x i16> %2968, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2970 = lshr <32 x i16> %2969, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2971 = add nsw i64 %1343, %263
  %2972 = getelementptr inbounds i16, i16* %blur_x, i64 %2971
  %2973 = bitcast i16* %2972 to <32 x i16>*
  store <32 x i16> %2970, <32 x i16>* %2973, align 2, !tbaa !423
  %2974 = add nsw i64 %1232, %263
  %2975 = getelementptr inbounds i16, i16* %blur_x, i64 %2974
  %2976 = bitcast i16* %2975 to <32 x i16>*
  %2977 = load <32 x i16>, <32 x i16>* %2976, align 2, !tbaa !423
  %2978 = add nsw i64 %1124, %263
  %2979 = getelementptr inbounds i16, i16* %blur_x, i64 %2978
  %2980 = bitcast i16* %2979 to <32 x i16>*
  %2981 = load <32 x i16>, <32 x i16>* %2980, align 2, !tbaa !423
  %2982 = add <32 x i16> %2977, %2970
  %2983 = add <32 x i16> %2982, %2981
  %2984 = shufflevector <32 x i16> %2983, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2985 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2984, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2986 = shufflevector <32 x i16> %2983, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2986, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2988 = shufflevector <16 x i16> %2985, <16 x i16> %2987, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2989 = lshr <32 x i16> %2988, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2990 = sext i32 %a42 to i64
  %2991 = add nsw i64 %2990, 12
  %2992 = mul nsw i64 %2991, %146
  %2993 = add nsw i64 %272, %2992
  %2994 = getelementptr inbounds i16, i16* %268, i64 %2993
  %2995 = bitcast i16* %2994 to <32 x i16>*
  store <32 x i16> %2989, <32 x i16>* %2995, align 2, !tbaa !425
  br label %"produce blur_x278"

"produce blur_x278":                              ; preds = %"end for blur_y.s0.x.x.rebased265", %"produce blur_x275"
  %2996 = getelementptr inbounds i16, i16* %read_input, i64 %301
  %2997 = getelementptr inbounds i16, i16* %2996, i64 1
  %2998 = bitcast i16* %2997 to <32 x i16>*
  %2999 = load <32 x i16>, <32 x i16>* %2998, align 2, !tbaa !412
  %3000 = getelementptr inbounds i16, i16* %2996, i64 2
  %3001 = bitcast i16* %3000 to <32 x i16>*
  %3002 = load <32 x i16>, <32 x i16>* %3001, align 2, !tbaa !412
  %3003 = bitcast i16* %2996 to <32 x i16>*
  %3004 = load <32 x i16>, <32 x i16>* %3003, align 2, !tbaa !412
  %3005 = add <32 x i16> %3002, %2999
  %3006 = add <32 x i16> %3005, %3004
  %3007 = shufflevector <32 x i16> %3006, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3008 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3007, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3009 = shufflevector <32 x i16> %3006, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3009, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3011 = shufflevector <16 x i16> %3008, <16 x i16> %3010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3012 = lshr <32 x i16> %3011, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3012, <32 x i16>* %1478, align 2, !tbaa !423
  %3013 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %3014 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %3015 = add <32 x i16> %3013, %3012
  %3016 = add <32 x i16> %3015, %3014
  %3017 = shufflevector <32 x i16> %3016, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3018 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3017, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3019 = shufflevector <32 x i16> %3016, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3019, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3021 = shufflevector <16 x i16> %3018, <16 x i16> %3020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3022 = lshr <32 x i16> %3021, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3023 = add nsw i64 %1356, 13
  %3024 = mul nsw i64 %3023, %146
  %3025 = getelementptr inbounds i16, i16* %268, i64 %3024
  %3026 = bitcast i16* %3025 to <32 x i16>*
  store <32 x i16> %3022, <32 x i16>* %3026, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased280.preheader", label %"end for blur_y.s0.x.x.rebased281", !prof !406

"for blur_y.s0.x.x.rebased280.preheader":         ; preds = %"produce blur_x278"
  %3027 = sext i32 %t947 to i64
  %3028 = add nsw i64 %3027, 32
  %3029 = add nsw i64 %1343, 32
  %3030 = add nsw i64 %1476, 32
  %3031 = add nsw i64 %1232, 32
  %3032 = sext i32 %a42 to i64
  %3033 = add nsw i64 %3032, 13
  %3034 = mul nsw i64 %3033, %146
  br label %"for blur_y.s0.x.x.rebased280"

"for blur_y.s0.x.x.rebased280":                   ; preds = %"for blur_y.s0.x.x.rebased280.preheader", %"consume blur_x287"
  %indvars.iv2541 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased280.preheader" ], [ %indvars.iv.next2542, %"consume blur_x287" ]
  %3035 = trunc i64 %indvars.iv2541 to i32
  %3036 = shl nsw i32 %3035, 5
  %3037 = icmp sgt i32 %b37, %3036
  br i1 %3037, label %"produce blur_x286", label %"for blur_y.s0.x.x.rebased280.consume blur_x287_crit_edge"

"for blur_y.s0.x.x.rebased280.consume blur_x287_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased280"
  %.pre2759 = shl nuw nsw i64 %indvars.iv2541, 5
  br label %"consume blur_x287"

"end for blur_y.s0.x.x.rebased281":               ; preds = %"consume blur_x287", %"produce blur_x278"
  br i1 %.not1855, label %"produce blur_x294", label %"produce blur_x291"

"produce blur_x286":                              ; preds = %"for blur_y.s0.x.x.rebased280"
  %t642.s = add nsw i32 %3036, %t1004
  %3038 = sext i32 %t642.s to i64
  %3039 = getelementptr inbounds i16, i16* %read_input, i64 %3038
  %3040 = getelementptr inbounds i16, i16* %3039, i64 33
  %3041 = bitcast i16* %3040 to <32 x i16>*
  %3042 = load <32 x i16>, <32 x i16>* %3041, align 2, !tbaa !412
  %3043 = getelementptr inbounds i16, i16* %3039, i64 34
  %3044 = bitcast i16* %3043 to <32 x i16>*
  %3045 = load <32 x i16>, <32 x i16>* %3044, align 2, !tbaa !412
  %3046 = getelementptr inbounds i16, i16* %3039, i64 32
  %3047 = bitcast i16* %3046 to <32 x i16>*
  %3048 = load <32 x i16>, <32 x i16>* %3047, align 2, !tbaa !412
  %3049 = add <32 x i16> %3045, %3042
  %3050 = add <32 x i16> %3049, %3048
  %3051 = shufflevector <32 x i16> %3050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3052 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3051, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3053 = shufflevector <32 x i16> %3050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3053, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3055 = shufflevector <16 x i16> %3052, <16 x i16> %3054, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3056 = lshr <32 x i16> %3055, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3057 = shl nuw nsw i64 %indvars.iv2541, 5
  %.idx1973 = add nsw i64 %3028, %3057
  %3058 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1973
  %3059 = bitcast i16* %3058 to <32 x i16>*
  store <32 x i16> %3056, <32 x i16>* %3059, align 2, !tbaa !423
  br label %"consume blur_x287"

"consume blur_x287":                              ; preds = %"for blur_y.s0.x.x.rebased280.consume blur_x287_crit_edge", %"produce blur_x286"
  %.pre-phi2760 = phi i64 [ %.pre2759, %"for blur_y.s0.x.x.rebased280.consume blur_x287_crit_edge" ], [ %3057, %"produce blur_x286" ]
  %.idx1968 = add nsw i64 %3029, %.pre-phi2760
  %3060 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1968
  %3061 = bitcast i16* %3060 to <32 x i16>*
  %3062 = load <32 x i16>, <32 x i16>* %3061, align 2, !tbaa !423
  %.idx1969 = add nsw i64 %3030, %.pre-phi2760
  %3063 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1969
  %3064 = bitcast i16* %3063 to <32 x i16>*
  %3065 = load <32 x i16>, <32 x i16>* %3064, align 2, !tbaa !423
  %.idx1970 = add nsw i64 %3031, %.pre-phi2760
  %3066 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1970
  %3067 = bitcast i16* %3066 to <32 x i16>*
  %3068 = load <32 x i16>, <32 x i16>* %3067, align 2, !tbaa !423
  %3069 = add <32 x i16> %3065, %3062
  %3070 = add <32 x i16> %3069, %3068
  %3071 = shufflevector <32 x i16> %3070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3071, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3073 = shufflevector <32 x i16> %3070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3074 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3073, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3075 = shufflevector <16 x i16> %3072, <16 x i16> %3074, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3076 = lshr <32 x i16> %3075, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3077 = add nuw nsw i64 %.pre-phi2760, 32
  %3078 = add nsw i64 %3077, %269
  %.idx1971 = add i64 %3078, %3034
  %3079 = getelementptr inbounds i16, i16* %268, i64 %.idx1971
  %3080 = bitcast i16* %3079 to <32 x i16>*
  store <32 x i16> %3076, <32 x i16>* %3080, align 2, !tbaa !425
  %indvars.iv.next2542 = add nuw nsw i64 %indvars.iv2541, 1
  %.not1972 = icmp eq i64 %indvars.iv.next2542, %348
  br i1 %.not1972, label %"end for blur_y.s0.x.x.rebased281", label %"for blur_y.s0.x.x.rebased280"

"produce blur_x291":                              ; preds = %"end for blur_y.s0.x.x.rebased281"
  %3081 = getelementptr inbounds i16, i16* %read_input, i64 %302
  %3082 = getelementptr inbounds i16, i16* %3081, i64 1
  %3083 = bitcast i16* %3082 to <32 x i16>*
  %3084 = load <32 x i16>, <32 x i16>* %3083, align 2, !tbaa !412
  %3085 = getelementptr inbounds i16, i16* %3081, i64 2
  %3086 = bitcast i16* %3085 to <32 x i16>*
  %3087 = load <32 x i16>, <32 x i16>* %3086, align 2, !tbaa !412
  %3088 = bitcast i16* %3081 to <32 x i16>*
  %3089 = load <32 x i16>, <32 x i16>* %3088, align 2, !tbaa !412
  %3090 = add <32 x i16> %3087, %3084
  %3091 = add <32 x i16> %3090, %3089
  %3092 = shufflevector <32 x i16> %3091, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3093 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3092, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3094 = shufflevector <32 x i16> %3091, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3095 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3094, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3096 = shufflevector <16 x i16> %3093, <16 x i16> %3095, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3097 = lshr <32 x i16> %3096, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3098 = add nsw i64 %1476, %263
  %3099 = getelementptr inbounds i16, i16* %blur_x, i64 %3098
  %3100 = bitcast i16* %3099 to <32 x i16>*
  store <32 x i16> %3097, <32 x i16>* %3100, align 2, !tbaa !423
  %3101 = add nsw i64 %1343, %263
  %3102 = getelementptr inbounds i16, i16* %blur_x, i64 %3101
  %3103 = bitcast i16* %3102 to <32 x i16>*
  %3104 = load <32 x i16>, <32 x i16>* %3103, align 2, !tbaa !423
  %3105 = add nsw i64 %1232, %263
  %3106 = getelementptr inbounds i16, i16* %blur_x, i64 %3105
  %3107 = bitcast i16* %3106 to <32 x i16>*
  %3108 = load <32 x i16>, <32 x i16>* %3107, align 2, !tbaa !423
  %3109 = add <32 x i16> %3104, %3097
  %3110 = add <32 x i16> %3109, %3108
  %3111 = shufflevector <32 x i16> %3110, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3112 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3111, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3113 = shufflevector <32 x i16> %3110, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3113, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3115 = shufflevector <16 x i16> %3112, <16 x i16> %3114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3116 = lshr <32 x i16> %3115, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3117 = sext i32 %a42 to i64
  %3118 = add nsw i64 %3117, 13
  %3119 = mul nsw i64 %3118, %146
  %3120 = add nsw i64 %272, %3119
  %3121 = getelementptr inbounds i16, i16* %268, i64 %3120
  %3122 = bitcast i16* %3121 to <32 x i16>*
  store <32 x i16> %3116, <32 x i16>* %3122, align 2, !tbaa !425
  br label %"produce blur_x294"

"produce blur_x294":                              ; preds = %"end for blur_y.s0.x.x.rebased281", %"produce blur_x291"
  %3123 = getelementptr inbounds i16, i16* %read_input, i64 %303
  %3124 = getelementptr inbounds i16, i16* %3123, i64 1
  %3125 = bitcast i16* %3124 to <32 x i16>*
  %3126 = load <32 x i16>, <32 x i16>* %3125, align 2, !tbaa !412
  %3127 = getelementptr inbounds i16, i16* %3123, i64 2
  %3128 = bitcast i16* %3127 to <32 x i16>*
  %3129 = load <32 x i16>, <32 x i16>* %3128, align 4, !tbaa !412
  %3130 = bitcast i16* %3123 to <32 x i16>*
  %3131 = load <32 x i16>, <32 x i16>* %3130, align 32, !tbaa !412
  %3132 = add <32 x i16> %3129, %3126
  %3133 = add <32 x i16> %3132, %3131
  %3134 = shufflevector <32 x i16> %3133, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3135 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3134, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3136 = shufflevector <32 x i16> %3133, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3136, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3138 = shufflevector <16 x i16> %3135, <16 x i16> %3137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3139 = lshr <32 x i16> %3138, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3139, <32 x i16>* %1126, align 2, !tbaa !423
  %3140 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %3141 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %3142 = add <32 x i16> %3140, %3139
  %3143 = add <32 x i16> %3142, %3141
  %3144 = shufflevector <32 x i16> %3143, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3144, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3146 = shufflevector <32 x i16> %3143, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3147 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3146, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3148 = shufflevector <16 x i16> %3145, <16 x i16> %3147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3149 = lshr <32 x i16> %3148, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3150 = add nsw i64 %1356, 14
  %3151 = mul nsw i64 %3150, %146
  %3152 = getelementptr inbounds i16, i16* %268, i64 %3151
  %3153 = bitcast i16* %3152 to <32 x i16>*
  store <32 x i16> %3149, <32 x i16>* %3153, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased296.preheader", label %"end for blur_y.s0.x.x.rebased297", !prof !406

"for blur_y.s0.x.x.rebased296.preheader":         ; preds = %"produce blur_x294"
  %3154 = sext i32 %t939 to i64
  %3155 = add nsw i64 %3154, 32
  %3156 = add nsw i64 %1476, 32
  %3157 = add nsw i64 %1124, 32
  %3158 = add nsw i64 %1343, 32
  %3159 = sext i32 %a42 to i64
  %3160 = add nsw i64 %3159, 14
  %3161 = mul nsw i64 %3160, %146
  br label %"for blur_y.s0.x.x.rebased296"

"for blur_y.s0.x.x.rebased296":                   ; preds = %"for blur_y.s0.x.x.rebased296.preheader", %"consume blur_x303"
  %indvars.iv2543 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased296.preheader" ], [ %indvars.iv.next2544, %"consume blur_x303" ]
  %3162 = trunc i64 %indvars.iv2543 to i32
  %3163 = shl nsw i32 %3162, 5
  %3164 = icmp sgt i32 %b37, %3163
  br i1 %3164, label %"produce blur_x302", label %"for blur_y.s0.x.x.rebased296.consume blur_x303_crit_edge"

"for blur_y.s0.x.x.rebased296.consume blur_x303_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased296"
  %.pre2761 = shl nuw nsw i64 %indvars.iv2543, 5
  br label %"consume blur_x303"

"end for blur_y.s0.x.x.rebased297":               ; preds = %"consume blur_x303", %"produce blur_x294"
  br i1 %.not1855, label %"produce blur_x310", label %"produce blur_x307"

"produce blur_x302":                              ; preds = %"for blur_y.s0.x.x.rebased296"
  %t647.s = add nsw i32 %3163, %t1009
  %3165 = sext i32 %t647.s to i64
  %3166 = getelementptr inbounds i16, i16* %read_input, i64 %3165
  %3167 = getelementptr inbounds i16, i16* %3166, i64 33
  %3168 = bitcast i16* %3167 to <32 x i16>*
  %3169 = load <32 x i16>, <32 x i16>* %3168, align 2, !tbaa !412
  %3170 = getelementptr inbounds i16, i16* %3166, i64 34
  %3171 = bitcast i16* %3170 to <32 x i16>*
  %3172 = load <32 x i16>, <32 x i16>* %3171, align 4, !tbaa !412
  %3173 = getelementptr inbounds i16, i16* %3166, i64 32
  %3174 = bitcast i16* %3173 to <32 x i16>*
  %3175 = load <32 x i16>, <32 x i16>* %3174, align 4, !tbaa !412
  %3176 = add <32 x i16> %3172, %3169
  %3177 = add <32 x i16> %3176, %3175
  %3178 = shufflevector <32 x i16> %3177, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3178, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3180 = shufflevector <32 x i16> %3177, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3180, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3182 = shufflevector <16 x i16> %3179, <16 x i16> %3181, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3183 = lshr <32 x i16> %3182, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3184 = shl nuw nsw i64 %indvars.iv2543, 5
  %.idx1967 = add nsw i64 %3155, %3184
  %3185 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1967
  %3186 = bitcast i16* %3185 to <32 x i16>*
  store <32 x i16> %3183, <32 x i16>* %3186, align 2, !tbaa !423
  br label %"consume blur_x303"

"consume blur_x303":                              ; preds = %"for blur_y.s0.x.x.rebased296.consume blur_x303_crit_edge", %"produce blur_x302"
  %.pre-phi2762 = phi i64 [ %.pre2761, %"for blur_y.s0.x.x.rebased296.consume blur_x303_crit_edge" ], [ %3184, %"produce blur_x302" ]
  %.idx1962 = add nsw i64 %3156, %.pre-phi2762
  %3187 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1962
  %3188 = bitcast i16* %3187 to <32 x i16>*
  %3189 = load <32 x i16>, <32 x i16>* %3188, align 2, !tbaa !423
  %.idx1963 = add nsw i64 %3157, %.pre-phi2762
  %3190 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1963
  %3191 = bitcast i16* %3190 to <32 x i16>*
  %3192 = load <32 x i16>, <32 x i16>* %3191, align 2, !tbaa !423
  %.idx1964 = add nsw i64 %3158, %.pre-phi2762
  %3193 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1964
  %3194 = bitcast i16* %3193 to <32 x i16>*
  %3195 = load <32 x i16>, <32 x i16>* %3194, align 2, !tbaa !423
  %3196 = add <32 x i16> %3192, %3189
  %3197 = add <32 x i16> %3196, %3195
  %3198 = shufflevector <32 x i16> %3197, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3199 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3198, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3200 = shufflevector <32 x i16> %3197, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3200, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3202 = shufflevector <16 x i16> %3199, <16 x i16> %3201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3203 = lshr <32 x i16> %3202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3204 = add nuw nsw i64 %.pre-phi2762, 32
  %3205 = add nsw i64 %3204, %269
  %.idx1965 = add i64 %3205, %3161
  %3206 = getelementptr inbounds i16, i16* %268, i64 %.idx1965
  %3207 = bitcast i16* %3206 to <32 x i16>*
  store <32 x i16> %3203, <32 x i16>* %3207, align 2, !tbaa !425
  %indvars.iv.next2544 = add nuw nsw i64 %indvars.iv2543, 1
  %.not1966 = icmp eq i64 %indvars.iv.next2544, %348
  br i1 %.not1966, label %"end for blur_y.s0.x.x.rebased297", label %"for blur_y.s0.x.x.rebased296"

"produce blur_x307":                              ; preds = %"end for blur_y.s0.x.x.rebased297"
  %3208 = getelementptr inbounds i16, i16* %read_input, i64 %304
  %3209 = getelementptr inbounds i16, i16* %3208, i64 1
  %3210 = bitcast i16* %3209 to <32 x i16>*
  %3211 = load <32 x i16>, <32 x i16>* %3210, align 2, !tbaa !412
  %3212 = getelementptr inbounds i16, i16* %3208, i64 2
  %3213 = bitcast i16* %3212 to <32 x i16>*
  %3214 = load <32 x i16>, <32 x i16>* %3213, align 2, !tbaa !412
  %3215 = bitcast i16* %3208 to <32 x i16>*
  %3216 = load <32 x i16>, <32 x i16>* %3215, align 2, !tbaa !412
  %3217 = add <32 x i16> %3214, %3211
  %3218 = add <32 x i16> %3217, %3216
  %3219 = shufflevector <32 x i16> %3218, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3220 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3219, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3221 = shufflevector <32 x i16> %3218, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3222 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3221, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3223 = shufflevector <16 x i16> %3220, <16 x i16> %3222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3224 = lshr <32 x i16> %3223, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3225 = add nsw i64 %1124, %263
  %3226 = getelementptr inbounds i16, i16* %blur_x, i64 %3225
  %3227 = bitcast i16* %3226 to <32 x i16>*
  store <32 x i16> %3224, <32 x i16>* %3227, align 2, !tbaa !423
  %3228 = add nsw i64 %1476, %263
  %3229 = getelementptr inbounds i16, i16* %blur_x, i64 %3228
  %3230 = bitcast i16* %3229 to <32 x i16>*
  %3231 = load <32 x i16>, <32 x i16>* %3230, align 2, !tbaa !423
  %3232 = add nsw i64 %1343, %263
  %3233 = getelementptr inbounds i16, i16* %blur_x, i64 %3232
  %3234 = bitcast i16* %3233 to <32 x i16>*
  %3235 = load <32 x i16>, <32 x i16>* %3234, align 2, !tbaa !423
  %3236 = add <32 x i16> %3231, %3224
  %3237 = add <32 x i16> %3236, %3235
  %3238 = shufflevector <32 x i16> %3237, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3239 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3238, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3240 = shufflevector <32 x i16> %3237, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3241 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3240, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3242 = shufflevector <16 x i16> %3239, <16 x i16> %3241, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3243 = lshr <32 x i16> %3242, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3244 = sext i32 %a42 to i64
  %3245 = add nsw i64 %3244, 14
  %3246 = mul nsw i64 %3245, %146
  %3247 = add nsw i64 %272, %3246
  %3248 = getelementptr inbounds i16, i16* %268, i64 %3247
  %3249 = bitcast i16* %3248 to <32 x i16>*
  store <32 x i16> %3243, <32 x i16>* %3249, align 2, !tbaa !425
  br label %"produce blur_x310"

"produce blur_x310":                              ; preds = %"end for blur_y.s0.x.x.rebased297", %"produce blur_x307"
  %3250 = getelementptr inbounds i16, i16* %read_input, i64 %305
  %3251 = getelementptr inbounds i16, i16* %3250, i64 1
  %3252 = bitcast i16* %3251 to <32 x i16>*
  %3253 = load <32 x i16>, <32 x i16>* %3252, align 2, !tbaa !412
  %3254 = getelementptr inbounds i16, i16* %3250, i64 2
  %3255 = bitcast i16* %3254 to <32 x i16>*
  %3256 = load <32 x i16>, <32 x i16>* %3255, align 2, !tbaa !412
  %3257 = bitcast i16* %3250 to <32 x i16>*
  %3258 = load <32 x i16>, <32 x i16>* %3257, align 2, !tbaa !412
  %3259 = add <32 x i16> %3256, %3253
  %3260 = add <32 x i16> %3259, %3258
  %3261 = shufflevector <32 x i16> %3260, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3262 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3261, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3263 = shufflevector <32 x i16> %3260, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3263, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3265 = shufflevector <16 x i16> %3262, <16 x i16> %3264, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3266 = lshr <32 x i16> %3265, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3266, <32 x i16>* %1234, align 2, !tbaa !423
  %3267 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %3268 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %3269 = add <32 x i16> %3267, %3266
  %3270 = add <32 x i16> %3269, %3268
  %3271 = shufflevector <32 x i16> %3270, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3272 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3271, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3273 = shufflevector <32 x i16> %3270, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3274 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3273, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3275 = shufflevector <16 x i16> %3272, <16 x i16> %3274, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3276 = lshr <32 x i16> %3275, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3277 = add nsw i64 %1356, 15
  %3278 = mul nsw i64 %3277, %146
  %3279 = getelementptr inbounds i16, i16* %268, i64 %3278
  %3280 = bitcast i16* %3279 to <32 x i16>*
  store <32 x i16> %3276, <32 x i16>* %3280, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased312.preheader", label %"end for blur_y.s0.x.x.rebased313", !prof !406

"for blur_y.s0.x.x.rebased312.preheader":         ; preds = %"produce blur_x310"
  %3281 = sext i32 %t941 to i64
  %3282 = add nsw i64 %3281, 32
  %3283 = add nsw i64 %1124, 32
  %3284 = add nsw i64 %1232, 32
  %3285 = add nsw i64 %1476, 32
  %3286 = sext i32 %a42 to i64
  %3287 = add nsw i64 %3286, 15
  %3288 = mul nsw i64 %3287, %146
  br label %"for blur_y.s0.x.x.rebased312"

"for blur_y.s0.x.x.rebased312":                   ; preds = %"for blur_y.s0.x.x.rebased312.preheader", %"consume blur_x319"
  %indvars.iv2545 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased312.preheader" ], [ %indvars.iv.next2546, %"consume blur_x319" ]
  %3289 = trunc i64 %indvars.iv2545 to i32
  %3290 = shl nsw i32 %3289, 5
  %3291 = icmp sgt i32 %b37, %3290
  br i1 %3291, label %"produce blur_x318", label %"for blur_y.s0.x.x.rebased312.consume blur_x319_crit_edge"

"for blur_y.s0.x.x.rebased312.consume blur_x319_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased312"
  %.pre2763 = shl nuw nsw i64 %indvars.iv2545, 5
  br label %"consume blur_x319"

"end for blur_y.s0.x.x.rebased313":               ; preds = %"consume blur_x319", %"produce blur_x310"
  br i1 %.not1855, label %"produce blur_x326", label %"produce blur_x323"

"produce blur_x318":                              ; preds = %"for blur_y.s0.x.x.rebased312"
  %t652.s = add nsw i32 %3290, %t1014
  %3292 = sext i32 %t652.s to i64
  %3293 = getelementptr inbounds i16, i16* %read_input, i64 %3292
  %3294 = getelementptr inbounds i16, i16* %3293, i64 33
  %3295 = bitcast i16* %3294 to <32 x i16>*
  %3296 = load <32 x i16>, <32 x i16>* %3295, align 2, !tbaa !412
  %3297 = getelementptr inbounds i16, i16* %3293, i64 34
  %3298 = bitcast i16* %3297 to <32 x i16>*
  %3299 = load <32 x i16>, <32 x i16>* %3298, align 2, !tbaa !412
  %3300 = getelementptr inbounds i16, i16* %3293, i64 32
  %3301 = bitcast i16* %3300 to <32 x i16>*
  %3302 = load <32 x i16>, <32 x i16>* %3301, align 2, !tbaa !412
  %3303 = add <32 x i16> %3299, %3296
  %3304 = add <32 x i16> %3303, %3302
  %3305 = shufflevector <32 x i16> %3304, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3305, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3307 = shufflevector <32 x i16> %3304, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3307, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3309 = shufflevector <16 x i16> %3306, <16 x i16> %3308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3310 = lshr <32 x i16> %3309, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3311 = shl nuw nsw i64 %indvars.iv2545, 5
  %.idx1961 = add nsw i64 %3282, %3311
  %3312 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1961
  %3313 = bitcast i16* %3312 to <32 x i16>*
  store <32 x i16> %3310, <32 x i16>* %3313, align 2, !tbaa !423
  br label %"consume blur_x319"

"consume blur_x319":                              ; preds = %"for blur_y.s0.x.x.rebased312.consume blur_x319_crit_edge", %"produce blur_x318"
  %.pre-phi2764 = phi i64 [ %.pre2763, %"for blur_y.s0.x.x.rebased312.consume blur_x319_crit_edge" ], [ %3311, %"produce blur_x318" ]
  %.idx1956 = add nsw i64 %3283, %.pre-phi2764
  %3314 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1956
  %3315 = bitcast i16* %3314 to <32 x i16>*
  %3316 = load <32 x i16>, <32 x i16>* %3315, align 2, !tbaa !423
  %.idx1957 = add nsw i64 %3284, %.pre-phi2764
  %3317 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1957
  %3318 = bitcast i16* %3317 to <32 x i16>*
  %3319 = load <32 x i16>, <32 x i16>* %3318, align 2, !tbaa !423
  %.idx1958 = add nsw i64 %3285, %.pre-phi2764
  %3320 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1958
  %3321 = bitcast i16* %3320 to <32 x i16>*
  %3322 = load <32 x i16>, <32 x i16>* %3321, align 2, !tbaa !423
  %3323 = add <32 x i16> %3319, %3316
  %3324 = add <32 x i16> %3323, %3322
  %3325 = shufflevector <32 x i16> %3324, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3326 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3325, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3327 = shufflevector <32 x i16> %3324, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3328 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3327, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3329 = shufflevector <16 x i16> %3326, <16 x i16> %3328, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3330 = lshr <32 x i16> %3329, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3331 = add nuw nsw i64 %.pre-phi2764, 32
  %3332 = add nsw i64 %3331, %269
  %.idx1959 = add i64 %3332, %3288
  %3333 = getelementptr inbounds i16, i16* %268, i64 %.idx1959
  %3334 = bitcast i16* %3333 to <32 x i16>*
  store <32 x i16> %3330, <32 x i16>* %3334, align 2, !tbaa !425
  %indvars.iv.next2546 = add nuw nsw i64 %indvars.iv2545, 1
  %.not1960 = icmp eq i64 %indvars.iv.next2546, %348
  br i1 %.not1960, label %"end for blur_y.s0.x.x.rebased313", label %"for blur_y.s0.x.x.rebased312"

"produce blur_x323":                              ; preds = %"end for blur_y.s0.x.x.rebased313"
  %3335 = getelementptr inbounds i16, i16* %read_input, i64 %306
  %3336 = getelementptr inbounds i16, i16* %3335, i64 1
  %3337 = bitcast i16* %3336 to <32 x i16>*
  %3338 = load <32 x i16>, <32 x i16>* %3337, align 2, !tbaa !412
  %3339 = getelementptr inbounds i16, i16* %3335, i64 2
  %3340 = bitcast i16* %3339 to <32 x i16>*
  %3341 = load <32 x i16>, <32 x i16>* %3340, align 2, !tbaa !412
  %3342 = bitcast i16* %3335 to <32 x i16>*
  %3343 = load <32 x i16>, <32 x i16>* %3342, align 2, !tbaa !412
  %3344 = add <32 x i16> %3341, %3338
  %3345 = add <32 x i16> %3344, %3343
  %3346 = shufflevector <32 x i16> %3345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3347 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3346, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3348 = shufflevector <32 x i16> %3345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3349 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3348, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3350 = shufflevector <16 x i16> %3347, <16 x i16> %3349, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3351 = lshr <32 x i16> %3350, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3352 = add nsw i64 %1232, %263
  %3353 = getelementptr inbounds i16, i16* %blur_x, i64 %3352
  %3354 = bitcast i16* %3353 to <32 x i16>*
  store <32 x i16> %3351, <32 x i16>* %3354, align 2, !tbaa !423
  %3355 = add nsw i64 %1124, %263
  %3356 = getelementptr inbounds i16, i16* %blur_x, i64 %3355
  %3357 = bitcast i16* %3356 to <32 x i16>*
  %3358 = load <32 x i16>, <32 x i16>* %3357, align 2, !tbaa !423
  %3359 = add nsw i64 %1476, %263
  %3360 = getelementptr inbounds i16, i16* %blur_x, i64 %3359
  %3361 = bitcast i16* %3360 to <32 x i16>*
  %3362 = load <32 x i16>, <32 x i16>* %3361, align 2, !tbaa !423
  %3363 = add <32 x i16> %3358, %3351
  %3364 = add <32 x i16> %3363, %3362
  %3365 = shufflevector <32 x i16> %3364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3365, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3367 = shufflevector <32 x i16> %3364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3367, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3369 = shufflevector <16 x i16> %3366, <16 x i16> %3368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3370 = lshr <32 x i16> %3369, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3371 = sext i32 %a42 to i64
  %3372 = add nsw i64 %3371, 15
  %3373 = mul nsw i64 %3372, %146
  %3374 = add nsw i64 %272, %3373
  %3375 = getelementptr inbounds i16, i16* %268, i64 %3374
  %3376 = bitcast i16* %3375 to <32 x i16>*
  store <32 x i16> %3370, <32 x i16>* %3376, align 2, !tbaa !425
  br label %"produce blur_x326"

"produce blur_x326":                              ; preds = %"end for blur_y.s0.x.x.rebased313", %"produce blur_x323"
  %3377 = getelementptr inbounds i16, i16* %read_input, i64 %307
  %3378 = getelementptr inbounds i16, i16* %3377, i64 1
  %3379 = bitcast i16* %3378 to <32 x i16>*
  %3380 = load <32 x i16>, <32 x i16>* %3379, align 2, !tbaa !412
  %3381 = getelementptr inbounds i16, i16* %3377, i64 2
  %3382 = bitcast i16* %3381 to <32 x i16>*
  %3383 = load <32 x i16>, <32 x i16>* %3382, align 4, !tbaa !412
  %3384 = bitcast i16* %3377 to <32 x i16>*
  %3385 = load <32 x i16>, <32 x i16>* %3384, align 4, !tbaa !412
  %3386 = add <32 x i16> %3383, %3380
  %3387 = add <32 x i16> %3386, %3385
  %3388 = shufflevector <32 x i16> %3387, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3389 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3388, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3390 = shufflevector <32 x i16> %3387, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3391 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3390, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3392 = shufflevector <16 x i16> %3389, <16 x i16> %3391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3393 = lshr <32 x i16> %3392, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3393, <32 x i16>* %1345, align 2, !tbaa !423
  %3394 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %3395 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %3396 = add <32 x i16> %3394, %3393
  %3397 = add <32 x i16> %3396, %3395
  %3398 = shufflevector <32 x i16> %3397, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3398, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3400 = shufflevector <32 x i16> %3397, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3400, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3402 = shufflevector <16 x i16> %3399, <16 x i16> %3401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3403 = lshr <32 x i16> %3402, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3404 = add nsw i64 %1356, 16
  %3405 = mul nsw i64 %3404, %146
  %3406 = getelementptr inbounds i16, i16* %268, i64 %3405
  %3407 = bitcast i16* %3406 to <32 x i16>*
  store <32 x i16> %3403, <32 x i16>* %3407, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased328.preheader", label %"end for blur_y.s0.x.x.rebased329", !prof !406

"for blur_y.s0.x.x.rebased328.preheader":         ; preds = %"produce blur_x326"
  %3408 = sext i32 %t942 to i64
  %3409 = add nsw i64 %3408, 32
  %3410 = add nsw i64 %1232, 32
  %3411 = add nsw i64 %1343, 32
  %3412 = add nsw i64 %1124, 32
  %3413 = sext i32 %a42 to i64
  %3414 = add nsw i64 %3413, 16
  %3415 = mul nsw i64 %3414, %146
  br label %"for blur_y.s0.x.x.rebased328"

"for blur_y.s0.x.x.rebased328":                   ; preds = %"for blur_y.s0.x.x.rebased328.preheader", %"consume blur_x335"
  %indvars.iv2547 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased328.preheader" ], [ %indvars.iv.next2548, %"consume blur_x335" ]
  %3416 = trunc i64 %indvars.iv2547 to i32
  %3417 = shl nsw i32 %3416, 5
  %3418 = icmp sgt i32 %b37, %3417
  br i1 %3418, label %"produce blur_x334", label %"for blur_y.s0.x.x.rebased328.consume blur_x335_crit_edge"

"for blur_y.s0.x.x.rebased328.consume blur_x335_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased328"
  %.pre2765 = shl nuw nsw i64 %indvars.iv2547, 5
  br label %"consume blur_x335"

"end for blur_y.s0.x.x.rebased329":               ; preds = %"consume blur_x335", %"produce blur_x326"
  br i1 %.not1855, label %"produce blur_x342", label %"produce blur_x339"

"produce blur_x334":                              ; preds = %"for blur_y.s0.x.x.rebased328"
  %indvars.iv2547.tr = trunc i64 %indvars.iv2547 to i32
  %3419 = shl i32 %indvars.iv2547.tr, 1
  %3420 = add nsw i32 %3419, %a40
  %3421 = shl nsw i32 %3420, 3
  %t836 = add nsw i32 %3421, %a40
  %3422 = sext i32 %t836 to i64
  %3423 = shl nsw i64 %3422, 1
  %3424 = getelementptr inbounds i16, i16* %read_input, i64 %3423
  %3425 = getelementptr inbounds i16, i16* %3424, i64 33
  %3426 = bitcast i16* %3425 to <32 x i16>*
  %3427 = load <32 x i16>, <32 x i16>* %3426, align 2, !tbaa !412
  %3428 = getelementptr inbounds i16, i16* %3424, i64 34
  %3429 = bitcast i16* %3428 to <32 x i16>*
  %3430 = load <32 x i16>, <32 x i16>* %3429, align 4, !tbaa !412
  %3431 = getelementptr inbounds i16, i16* %3424, i64 32
  %3432 = bitcast i16* %3431 to <32 x i16>*
  %3433 = load <32 x i16>, <32 x i16>* %3432, align 4, !tbaa !412
  %3434 = add <32 x i16> %3430, %3427
  %3435 = add <32 x i16> %3434, %3433
  %3436 = shufflevector <32 x i16> %3435, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3436, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3438 = shufflevector <32 x i16> %3435, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3438, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3440 = shufflevector <16 x i16> %3437, <16 x i16> %3439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3441 = lshr <32 x i16> %3440, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3442 = shl nuw nsw i64 %indvars.iv2547, 5
  %.idx1955 = add nsw i64 %3409, %3442
  %3443 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1955
  %3444 = bitcast i16* %3443 to <32 x i16>*
  store <32 x i16> %3441, <32 x i16>* %3444, align 2, !tbaa !423
  br label %"consume blur_x335"

"consume blur_x335":                              ; preds = %"for blur_y.s0.x.x.rebased328.consume blur_x335_crit_edge", %"produce blur_x334"
  %.pre-phi2766 = phi i64 [ %.pre2765, %"for blur_y.s0.x.x.rebased328.consume blur_x335_crit_edge" ], [ %3442, %"produce blur_x334" ]
  %.idx1950 = add nsw i64 %3410, %.pre-phi2766
  %3445 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1950
  %3446 = bitcast i16* %3445 to <32 x i16>*
  %3447 = load <32 x i16>, <32 x i16>* %3446, align 2, !tbaa !423
  %.idx1951 = add nsw i64 %3411, %.pre-phi2766
  %3448 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1951
  %3449 = bitcast i16* %3448 to <32 x i16>*
  %3450 = load <32 x i16>, <32 x i16>* %3449, align 2, !tbaa !423
  %.idx1952 = add nsw i64 %3412, %.pre-phi2766
  %3451 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1952
  %3452 = bitcast i16* %3451 to <32 x i16>*
  %3453 = load <32 x i16>, <32 x i16>* %3452, align 2, !tbaa !423
  %3454 = add <32 x i16> %3450, %3447
  %3455 = add <32 x i16> %3454, %3453
  %3456 = shufflevector <32 x i16> %3455, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3456, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3458 = shufflevector <32 x i16> %3455, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3459 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3458, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3460 = shufflevector <16 x i16> %3457, <16 x i16> %3459, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3461 = lshr <32 x i16> %3460, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3462 = add nuw nsw i64 %.pre-phi2766, 32
  %3463 = add nsw i64 %3462, %269
  %.idx1953 = add i64 %3463, %3415
  %3464 = getelementptr inbounds i16, i16* %268, i64 %.idx1953
  %3465 = bitcast i16* %3464 to <32 x i16>*
  store <32 x i16> %3461, <32 x i16>* %3465, align 2, !tbaa !425
  %indvars.iv.next2548 = add nuw nsw i64 %indvars.iv2547, 1
  %.not1954 = icmp eq i64 %indvars.iv.next2548, %348
  br i1 %.not1954, label %"end for blur_y.s0.x.x.rebased329", label %"for blur_y.s0.x.x.rebased328"

"produce blur_x339":                              ; preds = %"end for blur_y.s0.x.x.rebased329"
  %3466 = getelementptr inbounds i16, i16* %read_input, i64 %309
  %3467 = getelementptr inbounds i16, i16* %3466, i64 1
  %3468 = bitcast i16* %3467 to <32 x i16>*
  %3469 = load <32 x i16>, <32 x i16>* %3468, align 2, !tbaa !412
  %3470 = getelementptr inbounds i16, i16* %3466, i64 2
  %3471 = bitcast i16* %3470 to <32 x i16>*
  %3472 = load <32 x i16>, <32 x i16>* %3471, align 2, !tbaa !412
  %3473 = bitcast i16* %3466 to <32 x i16>*
  %3474 = load <32 x i16>, <32 x i16>* %3473, align 2, !tbaa !412
  %3475 = add <32 x i16> %3472, %3469
  %3476 = add <32 x i16> %3475, %3474
  %3477 = shufflevector <32 x i16> %3476, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3477, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3479 = shufflevector <32 x i16> %3476, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3479, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3481 = shufflevector <16 x i16> %3478, <16 x i16> %3480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3482 = lshr <32 x i16> %3481, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3483 = add nsw i64 %1343, %263
  %3484 = getelementptr inbounds i16, i16* %blur_x, i64 %3483
  %3485 = bitcast i16* %3484 to <32 x i16>*
  store <32 x i16> %3482, <32 x i16>* %3485, align 2, !tbaa !423
  %3486 = add nsw i64 %1232, %263
  %3487 = getelementptr inbounds i16, i16* %blur_x, i64 %3486
  %3488 = bitcast i16* %3487 to <32 x i16>*
  %3489 = load <32 x i16>, <32 x i16>* %3488, align 2, !tbaa !423
  %3490 = add nsw i64 %1124, %263
  %3491 = getelementptr inbounds i16, i16* %blur_x, i64 %3490
  %3492 = bitcast i16* %3491 to <32 x i16>*
  %3493 = load <32 x i16>, <32 x i16>* %3492, align 2, !tbaa !423
  %3494 = add <32 x i16> %3489, %3482
  %3495 = add <32 x i16> %3494, %3493
  %3496 = shufflevector <32 x i16> %3495, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3497 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3496, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3498 = shufflevector <32 x i16> %3495, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3499 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3498, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3500 = shufflevector <16 x i16> %3497, <16 x i16> %3499, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3501 = lshr <32 x i16> %3500, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3502 = sext i32 %a42 to i64
  %3503 = add nsw i64 %3502, 16
  %3504 = mul nsw i64 %3503, %146
  %3505 = add nsw i64 %272, %3504
  %3506 = getelementptr inbounds i16, i16* %268, i64 %3505
  %3507 = bitcast i16* %3506 to <32 x i16>*
  store <32 x i16> %3501, <32 x i16>* %3507, align 2, !tbaa !425
  br label %"produce blur_x342"

"produce blur_x342":                              ; preds = %"end for blur_y.s0.x.x.rebased329", %"produce blur_x339"
  %3508 = getelementptr inbounds i16, i16* %read_input, i64 %310
  %3509 = getelementptr inbounds i16, i16* %3508, i64 1
  %3510 = bitcast i16* %3509 to <32 x i16>*
  %3511 = load <32 x i16>, <32 x i16>* %3510, align 2, !tbaa !412
  %3512 = getelementptr inbounds i16, i16* %3508, i64 2
  %3513 = bitcast i16* %3512 to <32 x i16>*
  %3514 = load <32 x i16>, <32 x i16>* %3513, align 2, !tbaa !412
  %3515 = bitcast i16* %3508 to <32 x i16>*
  %3516 = load <32 x i16>, <32 x i16>* %3515, align 2, !tbaa !412
  %3517 = add <32 x i16> %3514, %3511
  %3518 = add <32 x i16> %3517, %3516
  %3519 = shufflevector <32 x i16> %3518, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3520 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3519, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3521 = shufflevector <32 x i16> %3518, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3522 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3521, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3523 = shufflevector <16 x i16> %3520, <16 x i16> %3522, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3524 = lshr <32 x i16> %3523, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3524, <32 x i16>* %1478, align 2, !tbaa !423
  %3525 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %3526 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %3527 = add <32 x i16> %3525, %3524
  %3528 = add <32 x i16> %3527, %3526
  %3529 = shufflevector <32 x i16> %3528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3530 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3529, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3531 = shufflevector <32 x i16> %3528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3532 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3531, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3533 = shufflevector <16 x i16> %3530, <16 x i16> %3532, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3534 = lshr <32 x i16> %3533, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3535 = add nsw i64 %1356, 17
  %3536 = mul nsw i64 %3535, %146
  %3537 = getelementptr inbounds i16, i16* %268, i64 %3536
  %3538 = bitcast i16* %3537 to <32 x i16>*
  store <32 x i16> %3534, <32 x i16>* %3538, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased344.preheader", label %"end for blur_y.s0.x.x.rebased345", !prof !406

"for blur_y.s0.x.x.rebased344.preheader":         ; preds = %"produce blur_x342"
  %3539 = sext i32 %t947 to i64
  %3540 = add nsw i64 %3539, 32
  %3541 = add nsw i64 %1343, 32
  %3542 = add nsw i64 %1476, 32
  %3543 = add nsw i64 %1232, 32
  %3544 = sext i32 %a42 to i64
  %3545 = add nsw i64 %3544, 17
  %3546 = mul nsw i64 %3545, %146
  br label %"for blur_y.s0.x.x.rebased344"

"for blur_y.s0.x.x.rebased344":                   ; preds = %"for blur_y.s0.x.x.rebased344.preheader", %"consume blur_x351"
  %indvars.iv2549 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased344.preheader" ], [ %indvars.iv.next2550, %"consume blur_x351" ]
  %3547 = trunc i64 %indvars.iv2549 to i32
  %3548 = shl nsw i32 %3547, 5
  %3549 = icmp sgt i32 %b37, %3548
  br i1 %3549, label %"produce blur_x350", label %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge"

"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased344"
  %.pre2767 = shl nuw nsw i64 %indvars.iv2549, 5
  br label %"consume blur_x351"

"end for blur_y.s0.x.x.rebased345":               ; preds = %"consume blur_x351", %"produce blur_x342"
  br i1 %.not1855, label %"produce blur_x358", label %"produce blur_x355"

"produce blur_x350":                              ; preds = %"for blur_y.s0.x.x.rebased344"
  %t662.s = add nsw i32 %3548, %t1023
  %3550 = sext i32 %t662.s to i64
  %3551 = getelementptr inbounds i16, i16* %read_input, i64 %3550
  %3552 = getelementptr inbounds i16, i16* %3551, i64 33
  %3553 = bitcast i16* %3552 to <32 x i16>*
  %3554 = load <32 x i16>, <32 x i16>* %3553, align 2, !tbaa !412
  %3555 = getelementptr inbounds i16, i16* %3551, i64 34
  %3556 = bitcast i16* %3555 to <32 x i16>*
  %3557 = load <32 x i16>, <32 x i16>* %3556, align 2, !tbaa !412
  %3558 = getelementptr inbounds i16, i16* %3551, i64 32
  %3559 = bitcast i16* %3558 to <32 x i16>*
  %3560 = load <32 x i16>, <32 x i16>* %3559, align 2, !tbaa !412
  %3561 = add <32 x i16> %3557, %3554
  %3562 = add <32 x i16> %3561, %3560
  %3563 = shufflevector <32 x i16> %3562, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3563, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3565 = shufflevector <32 x i16> %3562, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3565, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3567 = shufflevector <16 x i16> %3564, <16 x i16> %3566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3568 = lshr <32 x i16> %3567, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3569 = shl nuw nsw i64 %indvars.iv2549, 5
  %.idx1949 = add nsw i64 %3540, %3569
  %3570 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1949
  %3571 = bitcast i16* %3570 to <32 x i16>*
  store <32 x i16> %3568, <32 x i16>* %3571, align 2, !tbaa !423
  br label %"consume blur_x351"

"consume blur_x351":                              ; preds = %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge", %"produce blur_x350"
  %.pre-phi2768 = phi i64 [ %.pre2767, %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge" ], [ %3569, %"produce blur_x350" ]
  %.idx1944 = add nsw i64 %3541, %.pre-phi2768
  %3572 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1944
  %3573 = bitcast i16* %3572 to <32 x i16>*
  %3574 = load <32 x i16>, <32 x i16>* %3573, align 2, !tbaa !423
  %.idx1945 = add nsw i64 %3542, %.pre-phi2768
  %3575 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1945
  %3576 = bitcast i16* %3575 to <32 x i16>*
  %3577 = load <32 x i16>, <32 x i16>* %3576, align 2, !tbaa !423
  %.idx1946 = add nsw i64 %3543, %.pre-phi2768
  %3578 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1946
  %3579 = bitcast i16* %3578 to <32 x i16>*
  %3580 = load <32 x i16>, <32 x i16>* %3579, align 2, !tbaa !423
  %3581 = add <32 x i16> %3577, %3574
  %3582 = add <32 x i16> %3581, %3580
  %3583 = shufflevector <32 x i16> %3582, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3584 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3583, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3585 = shufflevector <32 x i16> %3582, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3586 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3585, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3587 = shufflevector <16 x i16> %3584, <16 x i16> %3586, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3588 = lshr <32 x i16> %3587, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3589 = add nuw nsw i64 %.pre-phi2768, 32
  %3590 = add nsw i64 %3589, %269
  %.idx1947 = add i64 %3590, %3546
  %3591 = getelementptr inbounds i16, i16* %268, i64 %.idx1947
  %3592 = bitcast i16* %3591 to <32 x i16>*
  store <32 x i16> %3588, <32 x i16>* %3592, align 2, !tbaa !425
  %indvars.iv.next2550 = add nuw nsw i64 %indvars.iv2549, 1
  %.not1948 = icmp eq i64 %indvars.iv.next2550, %348
  br i1 %.not1948, label %"end for blur_y.s0.x.x.rebased345", label %"for blur_y.s0.x.x.rebased344"

"produce blur_x355":                              ; preds = %"end for blur_y.s0.x.x.rebased345"
  %3593 = getelementptr inbounds i16, i16* %read_input, i64 %311
  %3594 = getelementptr inbounds i16, i16* %3593, i64 1
  %3595 = bitcast i16* %3594 to <32 x i16>*
  %3596 = load <32 x i16>, <32 x i16>* %3595, align 2, !tbaa !412
  %3597 = getelementptr inbounds i16, i16* %3593, i64 2
  %3598 = bitcast i16* %3597 to <32 x i16>*
  %3599 = load <32 x i16>, <32 x i16>* %3598, align 2, !tbaa !412
  %3600 = bitcast i16* %3593 to <32 x i16>*
  %3601 = load <32 x i16>, <32 x i16>* %3600, align 2, !tbaa !412
  %3602 = add <32 x i16> %3599, %3596
  %3603 = add <32 x i16> %3602, %3601
  %3604 = shufflevector <32 x i16> %3603, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3605 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3604, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3606 = shufflevector <32 x i16> %3603, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3607 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3606, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3608 = shufflevector <16 x i16> %3605, <16 x i16> %3607, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3609 = lshr <32 x i16> %3608, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3610 = add nsw i64 %1476, %263
  %3611 = getelementptr inbounds i16, i16* %blur_x, i64 %3610
  %3612 = bitcast i16* %3611 to <32 x i16>*
  store <32 x i16> %3609, <32 x i16>* %3612, align 2, !tbaa !423
  %3613 = add nsw i64 %1343, %263
  %3614 = getelementptr inbounds i16, i16* %blur_x, i64 %3613
  %3615 = bitcast i16* %3614 to <32 x i16>*
  %3616 = load <32 x i16>, <32 x i16>* %3615, align 2, !tbaa !423
  %3617 = add nsw i64 %1232, %263
  %3618 = getelementptr inbounds i16, i16* %blur_x, i64 %3617
  %3619 = bitcast i16* %3618 to <32 x i16>*
  %3620 = load <32 x i16>, <32 x i16>* %3619, align 2, !tbaa !423
  %3621 = add <32 x i16> %3616, %3609
  %3622 = add <32 x i16> %3621, %3620
  %3623 = shufflevector <32 x i16> %3622, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3623, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3625 = shufflevector <32 x i16> %3622, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3626 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3625, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3627 = shufflevector <16 x i16> %3624, <16 x i16> %3626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3628 = lshr <32 x i16> %3627, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3629 = sext i32 %a42 to i64
  %3630 = add nsw i64 %3629, 17
  %3631 = mul nsw i64 %3630, %146
  %3632 = add nsw i64 %272, %3631
  %3633 = getelementptr inbounds i16, i16* %268, i64 %3632
  %3634 = bitcast i16* %3633 to <32 x i16>*
  store <32 x i16> %3628, <32 x i16>* %3634, align 2, !tbaa !425
  br label %"produce blur_x358"

"produce blur_x358":                              ; preds = %"end for blur_y.s0.x.x.rebased345", %"produce blur_x355"
  %3635 = getelementptr inbounds i16, i16* %read_input, i64 %312
  %3636 = getelementptr inbounds i16, i16* %3635, i64 1
  %3637 = bitcast i16* %3636 to <32 x i16>*
  %3638 = load <32 x i16>, <32 x i16>* %3637, align 2, !tbaa !412
  %3639 = getelementptr inbounds i16, i16* %3635, i64 2
  %3640 = bitcast i16* %3639 to <32 x i16>*
  %3641 = load <32 x i16>, <32 x i16>* %3640, align 4, !tbaa !412
  %3642 = bitcast i16* %3635 to <32 x i16>*
  %3643 = load <32 x i16>, <32 x i16>* %3642, align 8, !tbaa !412
  %3644 = add <32 x i16> %3641, %3638
  %3645 = add <32 x i16> %3644, %3643
  %3646 = shufflevector <32 x i16> %3645, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3646, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3648 = shufflevector <32 x i16> %3645, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3649 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3648, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3650 = shufflevector <16 x i16> %3647, <16 x i16> %3649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3651 = lshr <32 x i16> %3650, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3651, <32 x i16>* %1126, align 2, !tbaa !423
  %3652 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %3653 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %3654 = add <32 x i16> %3652, %3651
  %3655 = add <32 x i16> %3654, %3653
  %3656 = shufflevector <32 x i16> %3655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3657 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3656, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3658 = shufflevector <32 x i16> %3655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3659 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3658, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3660 = shufflevector <16 x i16> %3657, <16 x i16> %3659, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3661 = lshr <32 x i16> %3660, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3662 = add nsw i64 %1356, 18
  %3663 = mul nsw i64 %3662, %146
  %3664 = getelementptr inbounds i16, i16* %268, i64 %3663
  %3665 = bitcast i16* %3664 to <32 x i16>*
  store <32 x i16> %3661, <32 x i16>* %3665, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased360.preheader", label %"end for blur_y.s0.x.x.rebased361", !prof !406

"for blur_y.s0.x.x.rebased360.preheader":         ; preds = %"produce blur_x358"
  %3666 = sext i32 %t939 to i64
  %3667 = add nsw i64 %3666, 32
  %3668 = add nsw i64 %1476, 32
  %3669 = add nsw i64 %1124, 32
  %3670 = add nsw i64 %1343, 32
  %3671 = sext i32 %a42 to i64
  %3672 = add nsw i64 %3671, 18
  %3673 = mul nsw i64 %3672, %146
  br label %"for blur_y.s0.x.x.rebased360"

"for blur_y.s0.x.x.rebased360":                   ; preds = %"for blur_y.s0.x.x.rebased360.preheader", %"consume blur_x367"
  %indvars.iv2551 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased360.preheader" ], [ %indvars.iv.next2552, %"consume blur_x367" ]
  %3674 = trunc i64 %indvars.iv2551 to i32
  %3675 = shl nsw i32 %3674, 5
  %3676 = icmp sgt i32 %b37, %3675
  br i1 %3676, label %"produce blur_x366", label %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge"

"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased360"
  %.pre2769 = shl nuw nsw i64 %indvars.iv2551, 5
  br label %"consume blur_x367"

"end for blur_y.s0.x.x.rebased361":               ; preds = %"consume blur_x367", %"produce blur_x358"
  br i1 %.not1855, label %"produce blur_x374", label %"produce blur_x371"

"produce blur_x366":                              ; preds = %"for blur_y.s0.x.x.rebased360"
  %t667.s = add nsw i32 %3675, %t1028
  %3677 = sext i32 %t667.s to i64
  %3678 = getelementptr inbounds i16, i16* %read_input, i64 %3677
  %3679 = getelementptr inbounds i16, i16* %3678, i64 33
  %3680 = bitcast i16* %3679 to <32 x i16>*
  %3681 = load <32 x i16>, <32 x i16>* %3680, align 2, !tbaa !412
  %3682 = getelementptr inbounds i16, i16* %3678, i64 34
  %3683 = bitcast i16* %3682 to <32 x i16>*
  %3684 = load <32 x i16>, <32 x i16>* %3683, align 4, !tbaa !412
  %3685 = getelementptr inbounds i16, i16* %3678, i64 32
  %3686 = bitcast i16* %3685 to <32 x i16>*
  %3687 = load <32 x i16>, <32 x i16>* %3686, align 4, !tbaa !412
  %3688 = add <32 x i16> %3684, %3681
  %3689 = add <32 x i16> %3688, %3687
  %3690 = shufflevector <32 x i16> %3689, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3691 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3690, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3692 = shufflevector <32 x i16> %3689, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3692, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3694 = shufflevector <16 x i16> %3691, <16 x i16> %3693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3695 = lshr <32 x i16> %3694, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3696 = shl nuw nsw i64 %indvars.iv2551, 5
  %.idx1943 = add nsw i64 %3667, %3696
  %3697 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1943
  %3698 = bitcast i16* %3697 to <32 x i16>*
  store <32 x i16> %3695, <32 x i16>* %3698, align 2, !tbaa !423
  br label %"consume blur_x367"

"consume blur_x367":                              ; preds = %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge", %"produce blur_x366"
  %.pre-phi2770 = phi i64 [ %.pre2769, %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge" ], [ %3696, %"produce blur_x366" ]
  %.idx1938 = add nsw i64 %3668, %.pre-phi2770
  %3699 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1938
  %3700 = bitcast i16* %3699 to <32 x i16>*
  %3701 = load <32 x i16>, <32 x i16>* %3700, align 2, !tbaa !423
  %.idx1939 = add nsw i64 %3669, %.pre-phi2770
  %3702 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1939
  %3703 = bitcast i16* %3702 to <32 x i16>*
  %3704 = load <32 x i16>, <32 x i16>* %3703, align 2, !tbaa !423
  %.idx1940 = add nsw i64 %3670, %.pre-phi2770
  %3705 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1940
  %3706 = bitcast i16* %3705 to <32 x i16>*
  %3707 = load <32 x i16>, <32 x i16>* %3706, align 2, !tbaa !423
  %3708 = add <32 x i16> %3704, %3701
  %3709 = add <32 x i16> %3708, %3707
  %3710 = shufflevector <32 x i16> %3709, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3710, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3712 = shufflevector <32 x i16> %3709, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3713 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3712, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3714 = shufflevector <16 x i16> %3711, <16 x i16> %3713, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3715 = lshr <32 x i16> %3714, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3716 = add nuw nsw i64 %.pre-phi2770, 32
  %3717 = add nsw i64 %3716, %269
  %.idx1941 = add i64 %3717, %3673
  %3718 = getelementptr inbounds i16, i16* %268, i64 %.idx1941
  %3719 = bitcast i16* %3718 to <32 x i16>*
  store <32 x i16> %3715, <32 x i16>* %3719, align 2, !tbaa !425
  %indvars.iv.next2552 = add nuw nsw i64 %indvars.iv2551, 1
  %.not1942 = icmp eq i64 %indvars.iv.next2552, %348
  br i1 %.not1942, label %"end for blur_y.s0.x.x.rebased361", label %"for blur_y.s0.x.x.rebased360"

"produce blur_x371":                              ; preds = %"end for blur_y.s0.x.x.rebased361"
  %3720 = getelementptr inbounds i16, i16* %read_input, i64 %313
  %3721 = getelementptr inbounds i16, i16* %3720, i64 1
  %3722 = bitcast i16* %3721 to <32 x i16>*
  %3723 = load <32 x i16>, <32 x i16>* %3722, align 2, !tbaa !412
  %3724 = getelementptr inbounds i16, i16* %3720, i64 2
  %3725 = bitcast i16* %3724 to <32 x i16>*
  %3726 = load <32 x i16>, <32 x i16>* %3725, align 2, !tbaa !412
  %3727 = bitcast i16* %3720 to <32 x i16>*
  %3728 = load <32 x i16>, <32 x i16>* %3727, align 2, !tbaa !412
  %3729 = add <32 x i16> %3726, %3723
  %3730 = add <32 x i16> %3729, %3728
  %3731 = shufflevector <32 x i16> %3730, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3731, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3733 = shufflevector <32 x i16> %3730, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3733, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3735 = shufflevector <16 x i16> %3732, <16 x i16> %3734, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3736 = lshr <32 x i16> %3735, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3737 = add nsw i64 %1124, %263
  %3738 = getelementptr inbounds i16, i16* %blur_x, i64 %3737
  %3739 = bitcast i16* %3738 to <32 x i16>*
  store <32 x i16> %3736, <32 x i16>* %3739, align 2, !tbaa !423
  %3740 = add nsw i64 %1476, %263
  %3741 = getelementptr inbounds i16, i16* %blur_x, i64 %3740
  %3742 = bitcast i16* %3741 to <32 x i16>*
  %3743 = load <32 x i16>, <32 x i16>* %3742, align 2, !tbaa !423
  %3744 = add nsw i64 %1343, %263
  %3745 = getelementptr inbounds i16, i16* %blur_x, i64 %3744
  %3746 = bitcast i16* %3745 to <32 x i16>*
  %3747 = load <32 x i16>, <32 x i16>* %3746, align 2, !tbaa !423
  %3748 = add <32 x i16> %3743, %3736
  %3749 = add <32 x i16> %3748, %3747
  %3750 = shufflevector <32 x i16> %3749, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3750, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3752 = shufflevector <32 x i16> %3749, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3753 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3752, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3754 = shufflevector <16 x i16> %3751, <16 x i16> %3753, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3755 = lshr <32 x i16> %3754, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3756 = sext i32 %a42 to i64
  %3757 = add nsw i64 %3756, 18
  %3758 = mul nsw i64 %3757, %146
  %3759 = add nsw i64 %272, %3758
  %3760 = getelementptr inbounds i16, i16* %268, i64 %3759
  %3761 = bitcast i16* %3760 to <32 x i16>*
  store <32 x i16> %3755, <32 x i16>* %3761, align 2, !tbaa !425
  br label %"produce blur_x374"

"produce blur_x374":                              ; preds = %"end for blur_y.s0.x.x.rebased361", %"produce blur_x371"
  %3762 = getelementptr inbounds i16, i16* %read_input, i64 %314
  %3763 = getelementptr inbounds i16, i16* %3762, i64 1
  %3764 = bitcast i16* %3763 to <32 x i16>*
  %3765 = load <32 x i16>, <32 x i16>* %3764, align 2, !tbaa !412
  %3766 = getelementptr inbounds i16, i16* %3762, i64 2
  %3767 = bitcast i16* %3766 to <32 x i16>*
  %3768 = load <32 x i16>, <32 x i16>* %3767, align 2, !tbaa !412
  %3769 = bitcast i16* %3762 to <32 x i16>*
  %3770 = load <32 x i16>, <32 x i16>* %3769, align 2, !tbaa !412
  %3771 = add <32 x i16> %3768, %3765
  %3772 = add <32 x i16> %3771, %3770
  %3773 = shufflevector <32 x i16> %3772, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3774 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3773, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3775 = shufflevector <32 x i16> %3772, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3776 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3775, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3777 = shufflevector <16 x i16> %3774, <16 x i16> %3776, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3778 = lshr <32 x i16> %3777, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3778, <32 x i16>* %1234, align 2, !tbaa !423
  %3779 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %3780 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %3781 = add <32 x i16> %3779, %3778
  %3782 = add <32 x i16> %3781, %3780
  %3783 = shufflevector <32 x i16> %3782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3783, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3785 = shufflevector <32 x i16> %3782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3785, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3787 = shufflevector <16 x i16> %3784, <16 x i16> %3786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3788 = lshr <32 x i16> %3787, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3789 = add nsw i64 %1356, 19
  %3790 = mul nsw i64 %3789, %146
  %3791 = getelementptr inbounds i16, i16* %268, i64 %3790
  %3792 = bitcast i16* %3791 to <32 x i16>*
  store <32 x i16> %3788, <32 x i16>* %3792, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased376.preheader", label %"end for blur_y.s0.x.x.rebased377", !prof !406

"for blur_y.s0.x.x.rebased376.preheader":         ; preds = %"produce blur_x374"
  %3793 = sext i32 %t941 to i64
  %3794 = add nsw i64 %3793, 32
  %3795 = add nsw i64 %1124, 32
  %3796 = add nsw i64 %1232, 32
  %3797 = add nsw i64 %1476, 32
  %3798 = sext i32 %a42 to i64
  %3799 = add nsw i64 %3798, 19
  %3800 = mul nsw i64 %3799, %146
  br label %"for blur_y.s0.x.x.rebased376"

"for blur_y.s0.x.x.rebased376":                   ; preds = %"for blur_y.s0.x.x.rebased376.preheader", %"consume blur_x383"
  %indvars.iv2553 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased376.preheader" ], [ %indvars.iv.next2554, %"consume blur_x383" ]
  %3801 = trunc i64 %indvars.iv2553 to i32
  %3802 = shl nsw i32 %3801, 5
  %3803 = icmp sgt i32 %b37, %3802
  br i1 %3803, label %"produce blur_x382", label %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge"

"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased376"
  %.pre2771 = shl nuw nsw i64 %indvars.iv2553, 5
  br label %"consume blur_x383"

"end for blur_y.s0.x.x.rebased377":               ; preds = %"consume blur_x383", %"produce blur_x374"
  br i1 %.not1855, label %"produce blur_x390", label %"produce blur_x387"

"produce blur_x382":                              ; preds = %"for blur_y.s0.x.x.rebased376"
  %t672.s = add nsw i32 %3802, %t1033
  %3804 = sext i32 %t672.s to i64
  %3805 = getelementptr inbounds i16, i16* %read_input, i64 %3804
  %3806 = getelementptr inbounds i16, i16* %3805, i64 33
  %3807 = bitcast i16* %3806 to <32 x i16>*
  %3808 = load <32 x i16>, <32 x i16>* %3807, align 2, !tbaa !412
  %3809 = getelementptr inbounds i16, i16* %3805, i64 34
  %3810 = bitcast i16* %3809 to <32 x i16>*
  %3811 = load <32 x i16>, <32 x i16>* %3810, align 2, !tbaa !412
  %3812 = getelementptr inbounds i16, i16* %3805, i64 32
  %3813 = bitcast i16* %3812 to <32 x i16>*
  %3814 = load <32 x i16>, <32 x i16>* %3813, align 2, !tbaa !412
  %3815 = add <32 x i16> %3811, %3808
  %3816 = add <32 x i16> %3815, %3814
  %3817 = shufflevector <32 x i16> %3816, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3818 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3817, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3819 = shufflevector <32 x i16> %3816, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3819, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3821 = shufflevector <16 x i16> %3818, <16 x i16> %3820, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3822 = lshr <32 x i16> %3821, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3823 = shl nuw nsw i64 %indvars.iv2553, 5
  %.idx1937 = add nsw i64 %3794, %3823
  %3824 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1937
  %3825 = bitcast i16* %3824 to <32 x i16>*
  store <32 x i16> %3822, <32 x i16>* %3825, align 2, !tbaa !423
  br label %"consume blur_x383"

"consume blur_x383":                              ; preds = %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge", %"produce blur_x382"
  %.pre-phi2772 = phi i64 [ %.pre2771, %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge" ], [ %3823, %"produce blur_x382" ]
  %.idx1932 = add nsw i64 %3795, %.pre-phi2772
  %3826 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1932
  %3827 = bitcast i16* %3826 to <32 x i16>*
  %3828 = load <32 x i16>, <32 x i16>* %3827, align 2, !tbaa !423
  %.idx1933 = add nsw i64 %3796, %.pre-phi2772
  %3829 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1933
  %3830 = bitcast i16* %3829 to <32 x i16>*
  %3831 = load <32 x i16>, <32 x i16>* %3830, align 2, !tbaa !423
  %.idx1934 = add nsw i64 %3797, %.pre-phi2772
  %3832 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1934
  %3833 = bitcast i16* %3832 to <32 x i16>*
  %3834 = load <32 x i16>, <32 x i16>* %3833, align 2, !tbaa !423
  %3835 = add <32 x i16> %3831, %3828
  %3836 = add <32 x i16> %3835, %3834
  %3837 = shufflevector <32 x i16> %3836, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3838 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3837, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3839 = shufflevector <32 x i16> %3836, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3840 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3839, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3841 = shufflevector <16 x i16> %3838, <16 x i16> %3840, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3842 = lshr <32 x i16> %3841, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3843 = add nuw nsw i64 %.pre-phi2772, 32
  %3844 = add nsw i64 %3843, %269
  %.idx1935 = add i64 %3844, %3800
  %3845 = getelementptr inbounds i16, i16* %268, i64 %.idx1935
  %3846 = bitcast i16* %3845 to <32 x i16>*
  store <32 x i16> %3842, <32 x i16>* %3846, align 2, !tbaa !425
  %indvars.iv.next2554 = add nuw nsw i64 %indvars.iv2553, 1
  %.not1936 = icmp eq i64 %indvars.iv.next2554, %348
  br i1 %.not1936, label %"end for blur_y.s0.x.x.rebased377", label %"for blur_y.s0.x.x.rebased376"

"produce blur_x387":                              ; preds = %"end for blur_y.s0.x.x.rebased377"
  %3847 = getelementptr inbounds i16, i16* %read_input, i64 %315
  %3848 = getelementptr inbounds i16, i16* %3847, i64 1
  %3849 = bitcast i16* %3848 to <32 x i16>*
  %3850 = load <32 x i16>, <32 x i16>* %3849, align 2, !tbaa !412
  %3851 = getelementptr inbounds i16, i16* %3847, i64 2
  %3852 = bitcast i16* %3851 to <32 x i16>*
  %3853 = load <32 x i16>, <32 x i16>* %3852, align 2, !tbaa !412
  %3854 = bitcast i16* %3847 to <32 x i16>*
  %3855 = load <32 x i16>, <32 x i16>* %3854, align 2, !tbaa !412
  %3856 = add <32 x i16> %3853, %3850
  %3857 = add <32 x i16> %3856, %3855
  %3858 = shufflevector <32 x i16> %3857, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3858, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3860 = shufflevector <32 x i16> %3857, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3860, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3862 = shufflevector <16 x i16> %3859, <16 x i16> %3861, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3863 = lshr <32 x i16> %3862, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3864 = add nsw i64 %1232, %263
  %3865 = getelementptr inbounds i16, i16* %blur_x, i64 %3864
  %3866 = bitcast i16* %3865 to <32 x i16>*
  store <32 x i16> %3863, <32 x i16>* %3866, align 2, !tbaa !423
  %3867 = add nsw i64 %1124, %263
  %3868 = getelementptr inbounds i16, i16* %blur_x, i64 %3867
  %3869 = bitcast i16* %3868 to <32 x i16>*
  %3870 = load <32 x i16>, <32 x i16>* %3869, align 2, !tbaa !423
  %3871 = add nsw i64 %1476, %263
  %3872 = getelementptr inbounds i16, i16* %blur_x, i64 %3871
  %3873 = bitcast i16* %3872 to <32 x i16>*
  %3874 = load <32 x i16>, <32 x i16>* %3873, align 2, !tbaa !423
  %3875 = add <32 x i16> %3870, %3863
  %3876 = add <32 x i16> %3875, %3874
  %3877 = shufflevector <32 x i16> %3876, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3878 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3877, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3879 = shufflevector <32 x i16> %3876, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3879, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3881 = shufflevector <16 x i16> %3878, <16 x i16> %3880, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3882 = lshr <32 x i16> %3881, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3883 = sext i32 %a42 to i64
  %3884 = add nsw i64 %3883, 19
  %3885 = mul nsw i64 %3884, %146
  %3886 = add nsw i64 %272, %3885
  %3887 = getelementptr inbounds i16, i16* %268, i64 %3886
  %3888 = bitcast i16* %3887 to <32 x i16>*
  store <32 x i16> %3882, <32 x i16>* %3888, align 2, !tbaa !425
  br label %"produce blur_x390"

"produce blur_x390":                              ; preds = %"end for blur_y.s0.x.x.rebased377", %"produce blur_x387"
  %3889 = getelementptr inbounds i16, i16* %read_input, i64 %316
  %3890 = getelementptr inbounds i16, i16* %3889, i64 1
  %3891 = bitcast i16* %3890 to <32 x i16>*
  %3892 = load <32 x i16>, <32 x i16>* %3891, align 2, !tbaa !412
  %3893 = getelementptr inbounds i16, i16* %3889, i64 2
  %3894 = bitcast i16* %3893 to <32 x i16>*
  %3895 = load <32 x i16>, <32 x i16>* %3894, align 4, !tbaa !412
  %3896 = bitcast i16* %3889 to <32 x i16>*
  %3897 = load <32 x i16>, <32 x i16>* %3896, align 4, !tbaa !412
  %3898 = add <32 x i16> %3895, %3892
  %3899 = add <32 x i16> %3898, %3897
  %3900 = shufflevector <32 x i16> %3899, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3901 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3900, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3902 = shufflevector <32 x i16> %3899, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3903 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3902, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3904 = shufflevector <16 x i16> %3901, <16 x i16> %3903, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3905 = lshr <32 x i16> %3904, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %3905, <32 x i16>* %1345, align 2, !tbaa !423
  %3906 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %3907 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %3908 = add <32 x i16> %3906, %3905
  %3909 = add <32 x i16> %3908, %3907
  %3910 = shufflevector <32 x i16> %3909, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3911 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3910, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3912 = shufflevector <32 x i16> %3909, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3913 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3912, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3914 = shufflevector <16 x i16> %3911, <16 x i16> %3913, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3915 = lshr <32 x i16> %3914, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3916 = add nsw i64 %1356, 20
  %3917 = mul nsw i64 %3916, %146
  %3918 = getelementptr inbounds i16, i16* %268, i64 %3917
  %3919 = bitcast i16* %3918 to <32 x i16>*
  store <32 x i16> %3915, <32 x i16>* %3919, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased392.preheader", label %"end for blur_y.s0.x.x.rebased393", !prof !406

"for blur_y.s0.x.x.rebased392.preheader":         ; preds = %"produce blur_x390"
  %3920 = sext i32 %t942 to i64
  %3921 = add nsw i64 %3920, 32
  %3922 = add nsw i64 %1232, 32
  %3923 = add nsw i64 %1343, 32
  %3924 = add nsw i64 %1124, 32
  %3925 = sext i32 %a42 to i64
  %3926 = add nsw i64 %3925, 20
  %3927 = mul nsw i64 %3926, %146
  br label %"for blur_y.s0.x.x.rebased392"

"for blur_y.s0.x.x.rebased392":                   ; preds = %"for blur_y.s0.x.x.rebased392.preheader", %"consume blur_x399"
  %indvars.iv2555 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased392.preheader" ], [ %indvars.iv.next2556, %"consume blur_x399" ]
  %3928 = trunc i64 %indvars.iv2555 to i32
  %3929 = shl nsw i32 %3928, 5
  %3930 = icmp sgt i32 %b37, %3929
  br i1 %3930, label %"produce blur_x398", label %"for blur_y.s0.x.x.rebased392.consume blur_x399_crit_edge"

"for blur_y.s0.x.x.rebased392.consume blur_x399_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased392"
  %.pre2773 = shl nuw nsw i64 %indvars.iv2555, 5
  br label %"consume blur_x399"

"end for blur_y.s0.x.x.rebased393":               ; preds = %"consume blur_x399", %"produce blur_x390"
  br i1 %.not1855, label %"produce blur_x406", label %"produce blur_x403"

"produce blur_x398":                              ; preds = %"for blur_y.s0.x.x.rebased392"
  %t677.s = add nsw i32 %3929, %t1038
  %3931 = sext i32 %t677.s to i64
  %3932 = getelementptr inbounds i16, i16* %read_input, i64 %3931
  %3933 = getelementptr inbounds i16, i16* %3932, i64 33
  %3934 = bitcast i16* %3933 to <32 x i16>*
  %3935 = load <32 x i16>, <32 x i16>* %3934, align 2, !tbaa !412
  %3936 = getelementptr inbounds i16, i16* %3932, i64 34
  %3937 = bitcast i16* %3936 to <32 x i16>*
  %3938 = load <32 x i16>, <32 x i16>* %3937, align 4, !tbaa !412
  %3939 = getelementptr inbounds i16, i16* %3932, i64 32
  %3940 = bitcast i16* %3939 to <32 x i16>*
  %3941 = load <32 x i16>, <32 x i16>* %3940, align 4, !tbaa !412
  %3942 = add <32 x i16> %3938, %3935
  %3943 = add <32 x i16> %3942, %3941
  %3944 = shufflevector <32 x i16> %3943, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3945 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3944, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3946 = shufflevector <32 x i16> %3943, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3946, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3948 = shufflevector <16 x i16> %3945, <16 x i16> %3947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3949 = lshr <32 x i16> %3948, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3950 = shl nuw nsw i64 %indvars.iv2555, 5
  %.idx1931 = add nsw i64 %3921, %3950
  %3951 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1931
  %3952 = bitcast i16* %3951 to <32 x i16>*
  store <32 x i16> %3949, <32 x i16>* %3952, align 2, !tbaa !423
  br label %"consume blur_x399"

"consume blur_x399":                              ; preds = %"for blur_y.s0.x.x.rebased392.consume blur_x399_crit_edge", %"produce blur_x398"
  %.pre-phi2774 = phi i64 [ %.pre2773, %"for blur_y.s0.x.x.rebased392.consume blur_x399_crit_edge" ], [ %3950, %"produce blur_x398" ]
  %.idx1926 = add nsw i64 %3922, %.pre-phi2774
  %3953 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1926
  %3954 = bitcast i16* %3953 to <32 x i16>*
  %3955 = load <32 x i16>, <32 x i16>* %3954, align 2, !tbaa !423
  %.idx1927 = add nsw i64 %3923, %.pre-phi2774
  %3956 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1927
  %3957 = bitcast i16* %3956 to <32 x i16>*
  %3958 = load <32 x i16>, <32 x i16>* %3957, align 2, !tbaa !423
  %.idx1928 = add nsw i64 %3924, %.pre-phi2774
  %3959 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1928
  %3960 = bitcast i16* %3959 to <32 x i16>*
  %3961 = load <32 x i16>, <32 x i16>* %3960, align 2, !tbaa !423
  %3962 = add <32 x i16> %3958, %3955
  %3963 = add <32 x i16> %3962, %3961
  %3964 = shufflevector <32 x i16> %3963, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3965 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3964, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3966 = shufflevector <32 x i16> %3963, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3967 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3966, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3968 = shufflevector <16 x i16> %3965, <16 x i16> %3967, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3969 = lshr <32 x i16> %3968, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3970 = add nuw nsw i64 %.pre-phi2774, 32
  %3971 = add nsw i64 %3970, %269
  %.idx1929 = add i64 %3971, %3927
  %3972 = getelementptr inbounds i16, i16* %268, i64 %.idx1929
  %3973 = bitcast i16* %3972 to <32 x i16>*
  store <32 x i16> %3969, <32 x i16>* %3973, align 2, !tbaa !425
  %indvars.iv.next2556 = add nuw nsw i64 %indvars.iv2555, 1
  %.not1930 = icmp eq i64 %indvars.iv.next2556, %348
  br i1 %.not1930, label %"end for blur_y.s0.x.x.rebased393", label %"for blur_y.s0.x.x.rebased392"

"produce blur_x403":                              ; preds = %"end for blur_y.s0.x.x.rebased393"
  %3974 = getelementptr inbounds i16, i16* %read_input, i64 %317
  %3975 = getelementptr inbounds i16, i16* %3974, i64 1
  %3976 = bitcast i16* %3975 to <32 x i16>*
  %3977 = load <32 x i16>, <32 x i16>* %3976, align 2, !tbaa !412
  %3978 = getelementptr inbounds i16, i16* %3974, i64 2
  %3979 = bitcast i16* %3978 to <32 x i16>*
  %3980 = load <32 x i16>, <32 x i16>* %3979, align 2, !tbaa !412
  %3981 = bitcast i16* %3974 to <32 x i16>*
  %3982 = load <32 x i16>, <32 x i16>* %3981, align 2, !tbaa !412
  %3983 = add <32 x i16> %3980, %3977
  %3984 = add <32 x i16> %3983, %3982
  %3985 = shufflevector <32 x i16> %3984, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3985, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3987 = shufflevector <32 x i16> %3984, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3987, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3989 = shufflevector <16 x i16> %3986, <16 x i16> %3988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3990 = lshr <32 x i16> %3989, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3991 = add nsw i64 %1343, %263
  %3992 = getelementptr inbounds i16, i16* %blur_x, i64 %3991
  %3993 = bitcast i16* %3992 to <32 x i16>*
  store <32 x i16> %3990, <32 x i16>* %3993, align 2, !tbaa !423
  %3994 = add nsw i64 %1232, %263
  %3995 = getelementptr inbounds i16, i16* %blur_x, i64 %3994
  %3996 = bitcast i16* %3995 to <32 x i16>*
  %3997 = load <32 x i16>, <32 x i16>* %3996, align 2, !tbaa !423
  %3998 = add nsw i64 %1124, %263
  %3999 = getelementptr inbounds i16, i16* %blur_x, i64 %3998
  %4000 = bitcast i16* %3999 to <32 x i16>*
  %4001 = load <32 x i16>, <32 x i16>* %4000, align 2, !tbaa !423
  %4002 = add <32 x i16> %3997, %3990
  %4003 = add <32 x i16> %4002, %4001
  %4004 = shufflevector <32 x i16> %4003, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4005 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4004, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4006 = shufflevector <32 x i16> %4003, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4007 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4006, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4008 = shufflevector <16 x i16> %4005, <16 x i16> %4007, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4009 = lshr <32 x i16> %4008, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4010 = sext i32 %a42 to i64
  %4011 = add nsw i64 %4010, 20
  %4012 = mul nsw i64 %4011, %146
  %4013 = add nsw i64 %272, %4012
  %4014 = getelementptr inbounds i16, i16* %268, i64 %4013
  %4015 = bitcast i16* %4014 to <32 x i16>*
  store <32 x i16> %4009, <32 x i16>* %4015, align 2, !tbaa !425
  br label %"produce blur_x406"

"produce blur_x406":                              ; preds = %"end for blur_y.s0.x.x.rebased393", %"produce blur_x403"
  %4016 = getelementptr inbounds i16, i16* %read_input, i64 %318
  %4017 = getelementptr inbounds i16, i16* %4016, i64 1
  %4018 = bitcast i16* %4017 to <32 x i16>*
  %4019 = load <32 x i16>, <32 x i16>* %4018, align 2, !tbaa !412
  %4020 = getelementptr inbounds i16, i16* %4016, i64 2
  %4021 = bitcast i16* %4020 to <32 x i16>*
  %4022 = load <32 x i16>, <32 x i16>* %4021, align 2, !tbaa !412
  %4023 = bitcast i16* %4016 to <32 x i16>*
  %4024 = load <32 x i16>, <32 x i16>* %4023, align 2, !tbaa !412
  %4025 = add <32 x i16> %4022, %4019
  %4026 = add <32 x i16> %4025, %4024
  %4027 = shufflevector <32 x i16> %4026, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4027, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4029 = shufflevector <32 x i16> %4026, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4030 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4029, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4031 = shufflevector <16 x i16> %4028, <16 x i16> %4030, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4032 = lshr <32 x i16> %4031, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4032, <32 x i16>* %1478, align 2, !tbaa !423
  %4033 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %4034 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %4035 = add <32 x i16> %4033, %4032
  %4036 = add <32 x i16> %4035, %4034
  %4037 = shufflevector <32 x i16> %4036, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4037, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4039 = shufflevector <32 x i16> %4036, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4040 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4039, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4041 = shufflevector <16 x i16> %4038, <16 x i16> %4040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4042 = lshr <32 x i16> %4041, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4043 = add nsw i64 %1356, 21
  %4044 = mul nsw i64 %4043, %146
  %4045 = getelementptr inbounds i16, i16* %268, i64 %4044
  %4046 = bitcast i16* %4045 to <32 x i16>*
  store <32 x i16> %4042, <32 x i16>* %4046, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased408.preheader", label %"end for blur_y.s0.x.x.rebased409", !prof !406

"for blur_y.s0.x.x.rebased408.preheader":         ; preds = %"produce blur_x406"
  %4047 = sext i32 %t947 to i64
  %4048 = add nsw i64 %4047, 32
  %4049 = add nsw i64 %1343, 32
  %4050 = add nsw i64 %1476, 32
  %4051 = add nsw i64 %1232, 32
  %4052 = sext i32 %a42 to i64
  %4053 = add nsw i64 %4052, 21
  %4054 = mul nsw i64 %4053, %146
  br label %"for blur_y.s0.x.x.rebased408"

"for blur_y.s0.x.x.rebased408":                   ; preds = %"for blur_y.s0.x.x.rebased408.preheader", %"consume blur_x415"
  %indvars.iv2557 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased408.preheader" ], [ %indvars.iv.next2558, %"consume blur_x415" ]
  %4055 = trunc i64 %indvars.iv2557 to i32
  %4056 = shl nsw i32 %4055, 5
  %4057 = icmp sgt i32 %b37, %4056
  br i1 %4057, label %"produce blur_x414", label %"for blur_y.s0.x.x.rebased408.consume blur_x415_crit_edge"

"for blur_y.s0.x.x.rebased408.consume blur_x415_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased408"
  %.pre2775 = shl nuw nsw i64 %indvars.iv2557, 5
  br label %"consume blur_x415"

"end for blur_y.s0.x.x.rebased409":               ; preds = %"consume blur_x415", %"produce blur_x406"
  br i1 %.not1855, label %"produce blur_x422", label %"produce blur_x419"

"produce blur_x414":                              ; preds = %"for blur_y.s0.x.x.rebased408"
  %t682.s = add nsw i32 %4056, %t1043
  %4058 = sext i32 %t682.s to i64
  %4059 = getelementptr inbounds i16, i16* %read_input, i64 %4058
  %4060 = getelementptr inbounds i16, i16* %4059, i64 33
  %4061 = bitcast i16* %4060 to <32 x i16>*
  %4062 = load <32 x i16>, <32 x i16>* %4061, align 2, !tbaa !412
  %4063 = getelementptr inbounds i16, i16* %4059, i64 34
  %4064 = bitcast i16* %4063 to <32 x i16>*
  %4065 = load <32 x i16>, <32 x i16>* %4064, align 2, !tbaa !412
  %4066 = getelementptr inbounds i16, i16* %4059, i64 32
  %4067 = bitcast i16* %4066 to <32 x i16>*
  %4068 = load <32 x i16>, <32 x i16>* %4067, align 2, !tbaa !412
  %4069 = add <32 x i16> %4065, %4062
  %4070 = add <32 x i16> %4069, %4068
  %4071 = shufflevector <32 x i16> %4070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4071, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4073 = shufflevector <32 x i16> %4070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4074 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4073, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4075 = shufflevector <16 x i16> %4072, <16 x i16> %4074, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4076 = lshr <32 x i16> %4075, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4077 = shl nuw nsw i64 %indvars.iv2557, 5
  %.idx1925 = add nsw i64 %4048, %4077
  %4078 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1925
  %4079 = bitcast i16* %4078 to <32 x i16>*
  store <32 x i16> %4076, <32 x i16>* %4079, align 2, !tbaa !423
  br label %"consume blur_x415"

"consume blur_x415":                              ; preds = %"for blur_y.s0.x.x.rebased408.consume blur_x415_crit_edge", %"produce blur_x414"
  %.pre-phi2776 = phi i64 [ %.pre2775, %"for blur_y.s0.x.x.rebased408.consume blur_x415_crit_edge" ], [ %4077, %"produce blur_x414" ]
  %.idx1920 = add nsw i64 %4049, %.pre-phi2776
  %4080 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1920
  %4081 = bitcast i16* %4080 to <32 x i16>*
  %4082 = load <32 x i16>, <32 x i16>* %4081, align 2, !tbaa !423
  %.idx1921 = add nsw i64 %4050, %.pre-phi2776
  %4083 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1921
  %4084 = bitcast i16* %4083 to <32 x i16>*
  %4085 = load <32 x i16>, <32 x i16>* %4084, align 2, !tbaa !423
  %.idx1922 = add nsw i64 %4051, %.pre-phi2776
  %4086 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1922
  %4087 = bitcast i16* %4086 to <32 x i16>*
  %4088 = load <32 x i16>, <32 x i16>* %4087, align 2, !tbaa !423
  %4089 = add <32 x i16> %4085, %4082
  %4090 = add <32 x i16> %4089, %4088
  %4091 = shufflevector <32 x i16> %4090, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4091, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4093 = shufflevector <32 x i16> %4090, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4094 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4093, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4095 = shufflevector <16 x i16> %4092, <16 x i16> %4094, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4096 = lshr <32 x i16> %4095, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4097 = add nuw nsw i64 %.pre-phi2776, 32
  %4098 = add nsw i64 %4097, %269
  %.idx1923 = add i64 %4098, %4054
  %4099 = getelementptr inbounds i16, i16* %268, i64 %.idx1923
  %4100 = bitcast i16* %4099 to <32 x i16>*
  store <32 x i16> %4096, <32 x i16>* %4100, align 2, !tbaa !425
  %indvars.iv.next2558 = add nuw nsw i64 %indvars.iv2557, 1
  %.not1924 = icmp eq i64 %indvars.iv.next2558, %348
  br i1 %.not1924, label %"end for blur_y.s0.x.x.rebased409", label %"for blur_y.s0.x.x.rebased408"

"produce blur_x419":                              ; preds = %"end for blur_y.s0.x.x.rebased409"
  %4101 = getelementptr inbounds i16, i16* %read_input, i64 %319
  %4102 = getelementptr inbounds i16, i16* %4101, i64 1
  %4103 = bitcast i16* %4102 to <32 x i16>*
  %4104 = load <32 x i16>, <32 x i16>* %4103, align 2, !tbaa !412
  %4105 = getelementptr inbounds i16, i16* %4101, i64 2
  %4106 = bitcast i16* %4105 to <32 x i16>*
  %4107 = load <32 x i16>, <32 x i16>* %4106, align 2, !tbaa !412
  %4108 = bitcast i16* %4101 to <32 x i16>*
  %4109 = load <32 x i16>, <32 x i16>* %4108, align 2, !tbaa !412
  %4110 = add <32 x i16> %4107, %4104
  %4111 = add <32 x i16> %4110, %4109
  %4112 = shufflevector <32 x i16> %4111, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4113 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4112, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4114 = shufflevector <32 x i16> %4111, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4115 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4114, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4116 = shufflevector <16 x i16> %4113, <16 x i16> %4115, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4117 = lshr <32 x i16> %4116, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4118 = add nsw i64 %1476, %263
  %4119 = getelementptr inbounds i16, i16* %blur_x, i64 %4118
  %4120 = bitcast i16* %4119 to <32 x i16>*
  store <32 x i16> %4117, <32 x i16>* %4120, align 2, !tbaa !423
  %4121 = add nsw i64 %1343, %263
  %4122 = getelementptr inbounds i16, i16* %blur_x, i64 %4121
  %4123 = bitcast i16* %4122 to <32 x i16>*
  %4124 = load <32 x i16>, <32 x i16>* %4123, align 2, !tbaa !423
  %4125 = add nsw i64 %1232, %263
  %4126 = getelementptr inbounds i16, i16* %blur_x, i64 %4125
  %4127 = bitcast i16* %4126 to <32 x i16>*
  %4128 = load <32 x i16>, <32 x i16>* %4127, align 2, !tbaa !423
  %4129 = add <32 x i16> %4124, %4117
  %4130 = add <32 x i16> %4129, %4128
  %4131 = shufflevector <32 x i16> %4130, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4131, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4133 = shufflevector <32 x i16> %4130, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4134 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4133, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4135 = shufflevector <16 x i16> %4132, <16 x i16> %4134, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4136 = lshr <32 x i16> %4135, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4137 = sext i32 %a42 to i64
  %4138 = add nsw i64 %4137, 21
  %4139 = mul nsw i64 %4138, %146
  %4140 = add nsw i64 %272, %4139
  %4141 = getelementptr inbounds i16, i16* %268, i64 %4140
  %4142 = bitcast i16* %4141 to <32 x i16>*
  store <32 x i16> %4136, <32 x i16>* %4142, align 2, !tbaa !425
  br label %"produce blur_x422"

"produce blur_x422":                              ; preds = %"end for blur_y.s0.x.x.rebased409", %"produce blur_x419"
  %4143 = getelementptr inbounds i16, i16* %read_input, i64 %320
  %4144 = getelementptr inbounds i16, i16* %4143, i64 1
  %4145 = bitcast i16* %4144 to <32 x i16>*
  %4146 = load <32 x i16>, <32 x i16>* %4145, align 2, !tbaa !412
  %4147 = getelementptr inbounds i16, i16* %4143, i64 2
  %4148 = bitcast i16* %4147 to <32 x i16>*
  %4149 = load <32 x i16>, <32 x i16>* %4148, align 4, !tbaa !412
  %4150 = bitcast i16* %4143 to <32 x i16>*
  %4151 = load <32 x i16>, <32 x i16>* %4150, align 16, !tbaa !412
  %4152 = add <32 x i16> %4149, %4146
  %4153 = add <32 x i16> %4152, %4151
  %4154 = shufflevector <32 x i16> %4153, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4155 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4154, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4156 = shufflevector <32 x i16> %4153, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4157 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4156, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4158 = shufflevector <16 x i16> %4155, <16 x i16> %4157, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4159 = lshr <32 x i16> %4158, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4159, <32 x i16>* %1126, align 2, !tbaa !423
  %4160 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %4161 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %4162 = add <32 x i16> %4160, %4159
  %4163 = add <32 x i16> %4162, %4161
  %4164 = shufflevector <32 x i16> %4163, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4165 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4164, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4166 = shufflevector <32 x i16> %4163, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4166, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4168 = shufflevector <16 x i16> %4165, <16 x i16> %4167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4169 = lshr <32 x i16> %4168, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4170 = add nsw i64 %1356, 22
  %4171 = mul nsw i64 %4170, %146
  %4172 = getelementptr inbounds i16, i16* %268, i64 %4171
  %4173 = bitcast i16* %4172 to <32 x i16>*
  store <32 x i16> %4169, <32 x i16>* %4173, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased424.preheader", label %"end for blur_y.s0.x.x.rebased425", !prof !406

"for blur_y.s0.x.x.rebased424.preheader":         ; preds = %"produce blur_x422"
  %4174 = sext i32 %t939 to i64
  %4175 = add nsw i64 %4174, 32
  %4176 = add nsw i64 %1476, 32
  %4177 = add nsw i64 %1124, 32
  %4178 = add nsw i64 %1343, 32
  %4179 = sext i32 %a42 to i64
  %4180 = add nsw i64 %4179, 22
  %4181 = mul nsw i64 %4180, %146
  br label %"for blur_y.s0.x.x.rebased424"

"for blur_y.s0.x.x.rebased424":                   ; preds = %"for blur_y.s0.x.x.rebased424.preheader", %"consume blur_x431"
  %indvars.iv2559 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased424.preheader" ], [ %indvars.iv.next2560, %"consume blur_x431" ]
  %4182 = trunc i64 %indvars.iv2559 to i32
  %4183 = shl nsw i32 %4182, 5
  %4184 = icmp sgt i32 %b37, %4183
  br i1 %4184, label %"produce blur_x430", label %"for blur_y.s0.x.x.rebased424.consume blur_x431_crit_edge"

"for blur_y.s0.x.x.rebased424.consume blur_x431_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased424"
  %.pre2777 = shl nuw nsw i64 %indvars.iv2559, 5
  br label %"consume blur_x431"

"end for blur_y.s0.x.x.rebased425":               ; preds = %"consume blur_x431", %"produce blur_x422"
  br i1 %.not1855, label %"produce blur_x438", label %"produce blur_x435"

"produce blur_x430":                              ; preds = %"for blur_y.s0.x.x.rebased424"
  %t687.s = add nsw i32 %4183, %t1048
  %4185 = sext i32 %t687.s to i64
  %4186 = getelementptr inbounds i16, i16* %read_input, i64 %4185
  %4187 = getelementptr inbounds i16, i16* %4186, i64 33
  %4188 = bitcast i16* %4187 to <32 x i16>*
  %4189 = load <32 x i16>, <32 x i16>* %4188, align 2, !tbaa !412
  %4190 = getelementptr inbounds i16, i16* %4186, i64 34
  %4191 = bitcast i16* %4190 to <32 x i16>*
  %4192 = load <32 x i16>, <32 x i16>* %4191, align 4, !tbaa !412
  %4193 = getelementptr inbounds i16, i16* %4186, i64 32
  %4194 = bitcast i16* %4193 to <32 x i16>*
  %4195 = load <32 x i16>, <32 x i16>* %4194, align 4, !tbaa !412
  %4196 = add <32 x i16> %4192, %4189
  %4197 = add <32 x i16> %4196, %4195
  %4198 = shufflevector <32 x i16> %4197, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4199 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4198, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4200 = shufflevector <32 x i16> %4197, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4200, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4202 = shufflevector <16 x i16> %4199, <16 x i16> %4201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4203 = lshr <32 x i16> %4202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4204 = shl nuw nsw i64 %indvars.iv2559, 5
  %.idx1919 = add nsw i64 %4175, %4204
  %4205 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1919
  %4206 = bitcast i16* %4205 to <32 x i16>*
  store <32 x i16> %4203, <32 x i16>* %4206, align 2, !tbaa !423
  br label %"consume blur_x431"

"consume blur_x431":                              ; preds = %"for blur_y.s0.x.x.rebased424.consume blur_x431_crit_edge", %"produce blur_x430"
  %.pre-phi2778 = phi i64 [ %.pre2777, %"for blur_y.s0.x.x.rebased424.consume blur_x431_crit_edge" ], [ %4204, %"produce blur_x430" ]
  %.idx1914 = add nsw i64 %4176, %.pre-phi2778
  %4207 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1914
  %4208 = bitcast i16* %4207 to <32 x i16>*
  %4209 = load <32 x i16>, <32 x i16>* %4208, align 2, !tbaa !423
  %.idx1915 = add nsw i64 %4177, %.pre-phi2778
  %4210 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1915
  %4211 = bitcast i16* %4210 to <32 x i16>*
  %4212 = load <32 x i16>, <32 x i16>* %4211, align 2, !tbaa !423
  %.idx1916 = add nsw i64 %4178, %.pre-phi2778
  %4213 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1916
  %4214 = bitcast i16* %4213 to <32 x i16>*
  %4215 = load <32 x i16>, <32 x i16>* %4214, align 2, !tbaa !423
  %4216 = add <32 x i16> %4212, %4209
  %4217 = add <32 x i16> %4216, %4215
  %4218 = shufflevector <32 x i16> %4217, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4219 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4218, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4220 = shufflevector <32 x i16> %4217, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4221 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4220, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4222 = shufflevector <16 x i16> %4219, <16 x i16> %4221, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4223 = lshr <32 x i16> %4222, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4224 = add nuw nsw i64 %.pre-phi2778, 32
  %4225 = add nsw i64 %4224, %269
  %.idx1917 = add i64 %4225, %4181
  %4226 = getelementptr inbounds i16, i16* %268, i64 %.idx1917
  %4227 = bitcast i16* %4226 to <32 x i16>*
  store <32 x i16> %4223, <32 x i16>* %4227, align 2, !tbaa !425
  %indvars.iv.next2560 = add nuw nsw i64 %indvars.iv2559, 1
  %.not1918 = icmp eq i64 %indvars.iv.next2560, %348
  br i1 %.not1918, label %"end for blur_y.s0.x.x.rebased425", label %"for blur_y.s0.x.x.rebased424"

"produce blur_x435":                              ; preds = %"end for blur_y.s0.x.x.rebased425"
  %4228 = getelementptr inbounds i16, i16* %read_input, i64 %321
  %4229 = getelementptr inbounds i16, i16* %4228, i64 1
  %4230 = bitcast i16* %4229 to <32 x i16>*
  %4231 = load <32 x i16>, <32 x i16>* %4230, align 2, !tbaa !412
  %4232 = getelementptr inbounds i16, i16* %4228, i64 2
  %4233 = bitcast i16* %4232 to <32 x i16>*
  %4234 = load <32 x i16>, <32 x i16>* %4233, align 2, !tbaa !412
  %4235 = bitcast i16* %4228 to <32 x i16>*
  %4236 = load <32 x i16>, <32 x i16>* %4235, align 2, !tbaa !412
  %4237 = add <32 x i16> %4234, %4231
  %4238 = add <32 x i16> %4237, %4236
  %4239 = shufflevector <32 x i16> %4238, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4240 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4239, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4241 = shufflevector <32 x i16> %4238, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4242 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4241, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4243 = shufflevector <16 x i16> %4240, <16 x i16> %4242, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4244 = lshr <32 x i16> %4243, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4245 = add nsw i64 %1124, %263
  %4246 = getelementptr inbounds i16, i16* %blur_x, i64 %4245
  %4247 = bitcast i16* %4246 to <32 x i16>*
  store <32 x i16> %4244, <32 x i16>* %4247, align 2, !tbaa !423
  %4248 = add nsw i64 %1476, %263
  %4249 = getelementptr inbounds i16, i16* %blur_x, i64 %4248
  %4250 = bitcast i16* %4249 to <32 x i16>*
  %4251 = load <32 x i16>, <32 x i16>* %4250, align 2, !tbaa !423
  %4252 = add nsw i64 %1343, %263
  %4253 = getelementptr inbounds i16, i16* %blur_x, i64 %4252
  %4254 = bitcast i16* %4253 to <32 x i16>*
  %4255 = load <32 x i16>, <32 x i16>* %4254, align 2, !tbaa !423
  %4256 = add <32 x i16> %4251, %4244
  %4257 = add <32 x i16> %4256, %4255
  %4258 = shufflevector <32 x i16> %4257, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4259 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4258, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4260 = shufflevector <32 x i16> %4257, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4261 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4260, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4262 = shufflevector <16 x i16> %4259, <16 x i16> %4261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4263 = lshr <32 x i16> %4262, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4264 = sext i32 %a42 to i64
  %4265 = add nsw i64 %4264, 22
  %4266 = mul nsw i64 %4265, %146
  %4267 = add nsw i64 %272, %4266
  %4268 = getelementptr inbounds i16, i16* %268, i64 %4267
  %4269 = bitcast i16* %4268 to <32 x i16>*
  store <32 x i16> %4263, <32 x i16>* %4269, align 2, !tbaa !425
  br label %"produce blur_x438"

"produce blur_x438":                              ; preds = %"end for blur_y.s0.x.x.rebased425", %"produce blur_x435"
  %4270 = getelementptr inbounds i16, i16* %read_input, i64 %322
  %4271 = getelementptr inbounds i16, i16* %4270, i64 1
  %4272 = bitcast i16* %4271 to <32 x i16>*
  %4273 = load <32 x i16>, <32 x i16>* %4272, align 2, !tbaa !412
  %4274 = getelementptr inbounds i16, i16* %4270, i64 2
  %4275 = bitcast i16* %4274 to <32 x i16>*
  %4276 = load <32 x i16>, <32 x i16>* %4275, align 2, !tbaa !412
  %4277 = bitcast i16* %4270 to <32 x i16>*
  %4278 = load <32 x i16>, <32 x i16>* %4277, align 2, !tbaa !412
  %4279 = add <32 x i16> %4276, %4273
  %4280 = add <32 x i16> %4279, %4278
  %4281 = shufflevector <32 x i16> %4280, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4282 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4281, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4283 = shufflevector <32 x i16> %4280, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4283, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4285 = shufflevector <16 x i16> %4282, <16 x i16> %4284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4286 = lshr <32 x i16> %4285, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4286, <32 x i16>* %1234, align 2, !tbaa !423
  %4287 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %4288 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %4289 = add <32 x i16> %4287, %4286
  %4290 = add <32 x i16> %4289, %4288
  %4291 = shufflevector <32 x i16> %4290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4291, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4293 = shufflevector <32 x i16> %4290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4294 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4293, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4295 = shufflevector <16 x i16> %4292, <16 x i16> %4294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4296 = lshr <32 x i16> %4295, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4297 = add nsw i64 %1356, 23
  %4298 = mul nsw i64 %4297, %146
  %4299 = getelementptr inbounds i16, i16* %268, i64 %4298
  %4300 = bitcast i16* %4299 to <32 x i16>*
  store <32 x i16> %4296, <32 x i16>* %4300, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased440.preheader", label %"end for blur_y.s0.x.x.rebased441", !prof !406

"for blur_y.s0.x.x.rebased440.preheader":         ; preds = %"produce blur_x438"
  %4301 = sext i32 %t941 to i64
  %4302 = add nsw i64 %4301, 32
  %4303 = add nsw i64 %1124, 32
  %4304 = add nsw i64 %1232, 32
  %4305 = add nsw i64 %1476, 32
  %4306 = sext i32 %a42 to i64
  %4307 = add nsw i64 %4306, 23
  %4308 = mul nsw i64 %4307, %146
  br label %"for blur_y.s0.x.x.rebased440"

"for blur_y.s0.x.x.rebased440":                   ; preds = %"for blur_y.s0.x.x.rebased440.preheader", %"consume blur_x447"
  %indvars.iv2561 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased440.preheader" ], [ %indvars.iv.next2562, %"consume blur_x447" ]
  %4309 = trunc i64 %indvars.iv2561 to i32
  %4310 = shl nsw i32 %4309, 5
  %4311 = icmp sgt i32 %b37, %4310
  br i1 %4311, label %"produce blur_x446", label %"for blur_y.s0.x.x.rebased440.consume blur_x447_crit_edge"

"for blur_y.s0.x.x.rebased440.consume blur_x447_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased440"
  %.pre2779 = shl nuw nsw i64 %indvars.iv2561, 5
  br label %"consume blur_x447"

"end for blur_y.s0.x.x.rebased441":               ; preds = %"consume blur_x447", %"produce blur_x438"
  br i1 %.not1855, label %"produce blur_x454", label %"produce blur_x451"

"produce blur_x446":                              ; preds = %"for blur_y.s0.x.x.rebased440"
  %t692.s = add nsw i32 %4310, %t1053
  %4312 = sext i32 %t692.s to i64
  %4313 = getelementptr inbounds i16, i16* %read_input, i64 %4312
  %4314 = getelementptr inbounds i16, i16* %4313, i64 33
  %4315 = bitcast i16* %4314 to <32 x i16>*
  %4316 = load <32 x i16>, <32 x i16>* %4315, align 2, !tbaa !412
  %4317 = getelementptr inbounds i16, i16* %4313, i64 34
  %4318 = bitcast i16* %4317 to <32 x i16>*
  %4319 = load <32 x i16>, <32 x i16>* %4318, align 2, !tbaa !412
  %4320 = getelementptr inbounds i16, i16* %4313, i64 32
  %4321 = bitcast i16* %4320 to <32 x i16>*
  %4322 = load <32 x i16>, <32 x i16>* %4321, align 2, !tbaa !412
  %4323 = add <32 x i16> %4319, %4316
  %4324 = add <32 x i16> %4323, %4322
  %4325 = shufflevector <32 x i16> %4324, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4326 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4325, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4327 = shufflevector <32 x i16> %4324, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4328 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4327, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4329 = shufflevector <16 x i16> %4326, <16 x i16> %4328, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4330 = lshr <32 x i16> %4329, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4331 = shl nuw nsw i64 %indvars.iv2561, 5
  %.idx1913 = add nsw i64 %4302, %4331
  %4332 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1913
  %4333 = bitcast i16* %4332 to <32 x i16>*
  store <32 x i16> %4330, <32 x i16>* %4333, align 2, !tbaa !423
  br label %"consume blur_x447"

"consume blur_x447":                              ; preds = %"for blur_y.s0.x.x.rebased440.consume blur_x447_crit_edge", %"produce blur_x446"
  %.pre-phi2780 = phi i64 [ %.pre2779, %"for blur_y.s0.x.x.rebased440.consume blur_x447_crit_edge" ], [ %4331, %"produce blur_x446" ]
  %.idx1908 = add nsw i64 %4303, %.pre-phi2780
  %4334 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1908
  %4335 = bitcast i16* %4334 to <32 x i16>*
  %4336 = load <32 x i16>, <32 x i16>* %4335, align 2, !tbaa !423
  %.idx1909 = add nsw i64 %4304, %.pre-phi2780
  %4337 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1909
  %4338 = bitcast i16* %4337 to <32 x i16>*
  %4339 = load <32 x i16>, <32 x i16>* %4338, align 2, !tbaa !423
  %.idx1910 = add nsw i64 %4305, %.pre-phi2780
  %4340 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1910
  %4341 = bitcast i16* %4340 to <32 x i16>*
  %4342 = load <32 x i16>, <32 x i16>* %4341, align 2, !tbaa !423
  %4343 = add <32 x i16> %4339, %4336
  %4344 = add <32 x i16> %4343, %4342
  %4345 = shufflevector <32 x i16> %4344, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4346 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4345, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4347 = shufflevector <32 x i16> %4344, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4348 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4347, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4349 = shufflevector <16 x i16> %4346, <16 x i16> %4348, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4350 = lshr <32 x i16> %4349, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4351 = add nuw nsw i64 %.pre-phi2780, 32
  %4352 = add nsw i64 %4351, %269
  %.idx1911 = add i64 %4352, %4308
  %4353 = getelementptr inbounds i16, i16* %268, i64 %.idx1911
  %4354 = bitcast i16* %4353 to <32 x i16>*
  store <32 x i16> %4350, <32 x i16>* %4354, align 2, !tbaa !425
  %indvars.iv.next2562 = add nuw nsw i64 %indvars.iv2561, 1
  %.not1912 = icmp eq i64 %indvars.iv.next2562, %348
  br i1 %.not1912, label %"end for blur_y.s0.x.x.rebased441", label %"for blur_y.s0.x.x.rebased440"

"produce blur_x451":                              ; preds = %"end for blur_y.s0.x.x.rebased441"
  %4355 = getelementptr inbounds i16, i16* %read_input, i64 %323
  %4356 = getelementptr inbounds i16, i16* %4355, i64 1
  %4357 = bitcast i16* %4356 to <32 x i16>*
  %4358 = load <32 x i16>, <32 x i16>* %4357, align 2, !tbaa !412
  %4359 = getelementptr inbounds i16, i16* %4355, i64 2
  %4360 = bitcast i16* %4359 to <32 x i16>*
  %4361 = load <32 x i16>, <32 x i16>* %4360, align 2, !tbaa !412
  %4362 = bitcast i16* %4355 to <32 x i16>*
  %4363 = load <32 x i16>, <32 x i16>* %4362, align 2, !tbaa !412
  %4364 = add <32 x i16> %4361, %4358
  %4365 = add <32 x i16> %4364, %4363
  %4366 = shufflevector <32 x i16> %4365, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4366, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4368 = shufflevector <32 x i16> %4365, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4369 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4368, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4370 = shufflevector <16 x i16> %4367, <16 x i16> %4369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4371 = lshr <32 x i16> %4370, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4372 = add nsw i64 %1232, %263
  %4373 = getelementptr inbounds i16, i16* %blur_x, i64 %4372
  %4374 = bitcast i16* %4373 to <32 x i16>*
  store <32 x i16> %4371, <32 x i16>* %4374, align 2, !tbaa !423
  %4375 = add nsw i64 %1124, %263
  %4376 = getelementptr inbounds i16, i16* %blur_x, i64 %4375
  %4377 = bitcast i16* %4376 to <32 x i16>*
  %4378 = load <32 x i16>, <32 x i16>* %4377, align 2, !tbaa !423
  %4379 = add nsw i64 %1476, %263
  %4380 = getelementptr inbounds i16, i16* %blur_x, i64 %4379
  %4381 = bitcast i16* %4380 to <32 x i16>*
  %4382 = load <32 x i16>, <32 x i16>* %4381, align 2, !tbaa !423
  %4383 = add <32 x i16> %4378, %4371
  %4384 = add <32 x i16> %4383, %4382
  %4385 = shufflevector <32 x i16> %4384, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4386 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4385, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4387 = shufflevector <32 x i16> %4384, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4388 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4387, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4389 = shufflevector <16 x i16> %4386, <16 x i16> %4388, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4390 = lshr <32 x i16> %4389, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4391 = sext i32 %a42 to i64
  %4392 = add nsw i64 %4391, 23
  %4393 = mul nsw i64 %4392, %146
  %4394 = add nsw i64 %272, %4393
  %4395 = getelementptr inbounds i16, i16* %268, i64 %4394
  %4396 = bitcast i16* %4395 to <32 x i16>*
  store <32 x i16> %4390, <32 x i16>* %4396, align 2, !tbaa !425
  br label %"produce blur_x454"

"produce blur_x454":                              ; preds = %"end for blur_y.s0.x.x.rebased441", %"produce blur_x451"
  %4397 = getelementptr inbounds i16, i16* %read_input, i64 %324
  %4398 = getelementptr inbounds i16, i16* %4397, i64 1
  %4399 = bitcast i16* %4398 to <32 x i16>*
  %4400 = load <32 x i16>, <32 x i16>* %4399, align 2, !tbaa !412
  %4401 = getelementptr inbounds i16, i16* %4397, i64 2
  %4402 = bitcast i16* %4401 to <32 x i16>*
  %4403 = load <32 x i16>, <32 x i16>* %4402, align 4, !tbaa !412
  %4404 = bitcast i16* %4397 to <32 x i16>*
  %4405 = load <32 x i16>, <32 x i16>* %4404, align 4, !tbaa !412
  %4406 = add <32 x i16> %4403, %4400
  %4407 = add <32 x i16> %4406, %4405
  %4408 = shufflevector <32 x i16> %4407, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4409 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4408, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4410 = shufflevector <32 x i16> %4407, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4410, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4412 = shufflevector <16 x i16> %4409, <16 x i16> %4411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4413 = lshr <32 x i16> %4412, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4413, <32 x i16>* %1345, align 2, !tbaa !423
  %4414 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %4415 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %4416 = add <32 x i16> %4414, %4413
  %4417 = add <32 x i16> %4416, %4415
  %4418 = shufflevector <32 x i16> %4417, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4419 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4418, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4420 = shufflevector <32 x i16> %4417, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4421 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4420, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4422 = shufflevector <16 x i16> %4419, <16 x i16> %4421, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4423 = lshr <32 x i16> %4422, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4424 = add nsw i64 %1356, 24
  %4425 = mul nsw i64 %4424, %146
  %4426 = getelementptr inbounds i16, i16* %268, i64 %4425
  %4427 = bitcast i16* %4426 to <32 x i16>*
  store <32 x i16> %4423, <32 x i16>* %4427, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased456.preheader", label %"end for blur_y.s0.x.x.rebased457", !prof !406

"for blur_y.s0.x.x.rebased456.preheader":         ; preds = %"produce blur_x454"
  %4428 = sext i32 %t942 to i64
  %4429 = add nsw i64 %4428, 32
  %4430 = add nsw i64 %1232, 32
  %4431 = add nsw i64 %1343, 32
  %4432 = add nsw i64 %1124, 32
  %4433 = sext i32 %a42 to i64
  %4434 = add nsw i64 %4433, 24
  %4435 = mul nsw i64 %4434, %146
  br label %"for blur_y.s0.x.x.rebased456"

"for blur_y.s0.x.x.rebased456":                   ; preds = %"for blur_y.s0.x.x.rebased456.preheader", %"consume blur_x463"
  %indvars.iv2563 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased456.preheader" ], [ %indvars.iv.next2564, %"consume blur_x463" ]
  %4436 = trunc i64 %indvars.iv2563 to i32
  %4437 = shl nsw i32 %4436, 5
  %4438 = icmp sgt i32 %b37, %4437
  br i1 %4438, label %"produce blur_x462", label %"for blur_y.s0.x.x.rebased456.consume blur_x463_crit_edge"

"for blur_y.s0.x.x.rebased456.consume blur_x463_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased456"
  %.pre2781 = shl nuw nsw i64 %indvars.iv2563, 5
  br label %"consume blur_x463"

"end for blur_y.s0.x.x.rebased457":               ; preds = %"consume blur_x463", %"produce blur_x454"
  br i1 %.not1855, label %"produce blur_x470", label %"produce blur_x467"

"produce blur_x462":                              ; preds = %"for blur_y.s0.x.x.rebased456"
  %t697.s = add nsw i32 %4437, %t1058
  %4439 = sext i32 %t697.s to i64
  %4440 = getelementptr inbounds i16, i16* %read_input, i64 %4439
  %4441 = getelementptr inbounds i16, i16* %4440, i64 33
  %4442 = bitcast i16* %4441 to <32 x i16>*
  %4443 = load <32 x i16>, <32 x i16>* %4442, align 2, !tbaa !412
  %4444 = getelementptr inbounds i16, i16* %4440, i64 34
  %4445 = bitcast i16* %4444 to <32 x i16>*
  %4446 = load <32 x i16>, <32 x i16>* %4445, align 4, !tbaa !412
  %4447 = getelementptr inbounds i16, i16* %4440, i64 32
  %4448 = bitcast i16* %4447 to <32 x i16>*
  %4449 = load <32 x i16>, <32 x i16>* %4448, align 4, !tbaa !412
  %4450 = add <32 x i16> %4446, %4443
  %4451 = add <32 x i16> %4450, %4449
  %4452 = shufflevector <32 x i16> %4451, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4453 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4452, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4454 = shufflevector <32 x i16> %4451, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4454, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4456 = shufflevector <16 x i16> %4453, <16 x i16> %4455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4457 = lshr <32 x i16> %4456, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4458 = shl nuw nsw i64 %indvars.iv2563, 5
  %.idx1907 = add nsw i64 %4429, %4458
  %4459 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1907
  %4460 = bitcast i16* %4459 to <32 x i16>*
  store <32 x i16> %4457, <32 x i16>* %4460, align 2, !tbaa !423
  br label %"consume blur_x463"

"consume blur_x463":                              ; preds = %"for blur_y.s0.x.x.rebased456.consume blur_x463_crit_edge", %"produce blur_x462"
  %.pre-phi2782 = phi i64 [ %.pre2781, %"for blur_y.s0.x.x.rebased456.consume blur_x463_crit_edge" ], [ %4458, %"produce blur_x462" ]
  %.idx1902 = add nsw i64 %4430, %.pre-phi2782
  %4461 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1902
  %4462 = bitcast i16* %4461 to <32 x i16>*
  %4463 = load <32 x i16>, <32 x i16>* %4462, align 2, !tbaa !423
  %.idx1903 = add nsw i64 %4431, %.pre-phi2782
  %4464 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1903
  %4465 = bitcast i16* %4464 to <32 x i16>*
  %4466 = load <32 x i16>, <32 x i16>* %4465, align 2, !tbaa !423
  %.idx1904 = add nsw i64 %4432, %.pre-phi2782
  %4467 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1904
  %4468 = bitcast i16* %4467 to <32 x i16>*
  %4469 = load <32 x i16>, <32 x i16>* %4468, align 2, !tbaa !423
  %4470 = add <32 x i16> %4466, %4463
  %4471 = add <32 x i16> %4470, %4469
  %4472 = shufflevector <32 x i16> %4471, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4473 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4472, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4474 = shufflevector <32 x i16> %4471, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4475 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4474, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4476 = shufflevector <16 x i16> %4473, <16 x i16> %4475, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4477 = lshr <32 x i16> %4476, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4478 = add nuw nsw i64 %.pre-phi2782, 32
  %4479 = add nsw i64 %4478, %269
  %.idx1905 = add i64 %4479, %4435
  %4480 = getelementptr inbounds i16, i16* %268, i64 %.idx1905
  %4481 = bitcast i16* %4480 to <32 x i16>*
  store <32 x i16> %4477, <32 x i16>* %4481, align 2, !tbaa !425
  %indvars.iv.next2564 = add nuw nsw i64 %indvars.iv2563, 1
  %.not1906 = icmp eq i64 %indvars.iv.next2564, %348
  br i1 %.not1906, label %"end for blur_y.s0.x.x.rebased457", label %"for blur_y.s0.x.x.rebased456"

"produce blur_x467":                              ; preds = %"end for blur_y.s0.x.x.rebased457"
  %4482 = getelementptr inbounds i16, i16* %read_input, i64 %325
  %4483 = getelementptr inbounds i16, i16* %4482, i64 1
  %4484 = bitcast i16* %4483 to <32 x i16>*
  %4485 = load <32 x i16>, <32 x i16>* %4484, align 2, !tbaa !412
  %4486 = getelementptr inbounds i16, i16* %4482, i64 2
  %4487 = bitcast i16* %4486 to <32 x i16>*
  %4488 = load <32 x i16>, <32 x i16>* %4487, align 2, !tbaa !412
  %4489 = bitcast i16* %4482 to <32 x i16>*
  %4490 = load <32 x i16>, <32 x i16>* %4489, align 2, !tbaa !412
  %4491 = add <32 x i16> %4488, %4485
  %4492 = add <32 x i16> %4491, %4490
  %4493 = shufflevector <32 x i16> %4492, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4494 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4493, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4495 = shufflevector <32 x i16> %4492, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4496 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4495, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4497 = shufflevector <16 x i16> %4494, <16 x i16> %4496, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4498 = lshr <32 x i16> %4497, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4499 = add nsw i64 %1343, %263
  %4500 = getelementptr inbounds i16, i16* %blur_x, i64 %4499
  %4501 = bitcast i16* %4500 to <32 x i16>*
  store <32 x i16> %4498, <32 x i16>* %4501, align 2, !tbaa !423
  %4502 = add nsw i64 %1232, %263
  %4503 = getelementptr inbounds i16, i16* %blur_x, i64 %4502
  %4504 = bitcast i16* %4503 to <32 x i16>*
  %4505 = load <32 x i16>, <32 x i16>* %4504, align 2, !tbaa !423
  %4506 = add nsw i64 %1124, %263
  %4507 = getelementptr inbounds i16, i16* %blur_x, i64 %4506
  %4508 = bitcast i16* %4507 to <32 x i16>*
  %4509 = load <32 x i16>, <32 x i16>* %4508, align 2, !tbaa !423
  %4510 = add <32 x i16> %4505, %4498
  %4511 = add <32 x i16> %4510, %4509
  %4512 = shufflevector <32 x i16> %4511, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4512, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4514 = shufflevector <32 x i16> %4511, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4515 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4514, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4516 = shufflevector <16 x i16> %4513, <16 x i16> %4515, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4517 = lshr <32 x i16> %4516, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4518 = sext i32 %a42 to i64
  %4519 = add nsw i64 %4518, 24
  %4520 = mul nsw i64 %4519, %146
  %4521 = add nsw i64 %272, %4520
  %4522 = getelementptr inbounds i16, i16* %268, i64 %4521
  %4523 = bitcast i16* %4522 to <32 x i16>*
  store <32 x i16> %4517, <32 x i16>* %4523, align 2, !tbaa !425
  br label %"produce blur_x470"

"produce blur_x470":                              ; preds = %"end for blur_y.s0.x.x.rebased457", %"produce blur_x467"
  %4524 = getelementptr inbounds i16, i16* %read_input, i64 %326
  %4525 = getelementptr inbounds i16, i16* %4524, i64 1
  %4526 = bitcast i16* %4525 to <32 x i16>*
  %4527 = load <32 x i16>, <32 x i16>* %4526, align 2, !tbaa !412
  %4528 = getelementptr inbounds i16, i16* %4524, i64 2
  %4529 = bitcast i16* %4528 to <32 x i16>*
  %4530 = load <32 x i16>, <32 x i16>* %4529, align 2, !tbaa !412
  %4531 = bitcast i16* %4524 to <32 x i16>*
  %4532 = load <32 x i16>, <32 x i16>* %4531, align 2, !tbaa !412
  %4533 = add <32 x i16> %4530, %4527
  %4534 = add <32 x i16> %4533, %4532
  %4535 = shufflevector <32 x i16> %4534, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4536 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4535, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4537 = shufflevector <32 x i16> %4534, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4538 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4537, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4539 = shufflevector <16 x i16> %4536, <16 x i16> %4538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4540 = lshr <32 x i16> %4539, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4540, <32 x i16>* %1478, align 2, !tbaa !423
  %4541 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %4542 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %4543 = add <32 x i16> %4541, %4540
  %4544 = add <32 x i16> %4543, %4542
  %4545 = shufflevector <32 x i16> %4544, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4546 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4545, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4547 = shufflevector <32 x i16> %4544, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4548 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4547, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4549 = shufflevector <16 x i16> %4546, <16 x i16> %4548, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4550 = lshr <32 x i16> %4549, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4551 = add nsw i64 %1356, 25
  %4552 = mul nsw i64 %4551, %146
  %4553 = getelementptr inbounds i16, i16* %268, i64 %4552
  %4554 = bitcast i16* %4553 to <32 x i16>*
  store <32 x i16> %4550, <32 x i16>* %4554, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased472.preheader", label %"end for blur_y.s0.x.x.rebased473", !prof !406

"for blur_y.s0.x.x.rebased472.preheader":         ; preds = %"produce blur_x470"
  %4555 = sext i32 %t947 to i64
  %4556 = add nsw i64 %4555, 32
  %4557 = add nsw i64 %1343, 32
  %4558 = add nsw i64 %1476, 32
  %4559 = add nsw i64 %1232, 32
  %4560 = sext i32 %a42 to i64
  %4561 = add nsw i64 %4560, 25
  %4562 = mul nsw i64 %4561, %146
  br label %"for blur_y.s0.x.x.rebased472"

"for blur_y.s0.x.x.rebased472":                   ; preds = %"for blur_y.s0.x.x.rebased472.preheader", %"consume blur_x479"
  %indvars.iv2565 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased472.preheader" ], [ %indvars.iv.next2566, %"consume blur_x479" ]
  %4563 = trunc i64 %indvars.iv2565 to i32
  %4564 = shl nsw i32 %4563, 5
  %4565 = icmp sgt i32 %b37, %4564
  br i1 %4565, label %"produce blur_x478", label %"for blur_y.s0.x.x.rebased472.consume blur_x479_crit_edge"

"for blur_y.s0.x.x.rebased472.consume blur_x479_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased472"
  %.pre2783 = shl nuw nsw i64 %indvars.iv2565, 5
  br label %"consume blur_x479"

"end for blur_y.s0.x.x.rebased473":               ; preds = %"consume blur_x479", %"produce blur_x470"
  br i1 %.not1855, label %"produce blur_x486", label %"produce blur_x483"

"produce blur_x478":                              ; preds = %"for blur_y.s0.x.x.rebased472"
  %t702.s = add nsw i32 %4564, %t1063
  %4566 = sext i32 %t702.s to i64
  %4567 = getelementptr inbounds i16, i16* %read_input, i64 %4566
  %4568 = getelementptr inbounds i16, i16* %4567, i64 33
  %4569 = bitcast i16* %4568 to <32 x i16>*
  %4570 = load <32 x i16>, <32 x i16>* %4569, align 2, !tbaa !412
  %4571 = getelementptr inbounds i16, i16* %4567, i64 34
  %4572 = bitcast i16* %4571 to <32 x i16>*
  %4573 = load <32 x i16>, <32 x i16>* %4572, align 2, !tbaa !412
  %4574 = getelementptr inbounds i16, i16* %4567, i64 32
  %4575 = bitcast i16* %4574 to <32 x i16>*
  %4576 = load <32 x i16>, <32 x i16>* %4575, align 2, !tbaa !412
  %4577 = add <32 x i16> %4573, %4570
  %4578 = add <32 x i16> %4577, %4576
  %4579 = shufflevector <32 x i16> %4578, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4579, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4581 = shufflevector <32 x i16> %4578, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4581, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4583 = shufflevector <16 x i16> %4580, <16 x i16> %4582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4584 = lshr <32 x i16> %4583, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4585 = shl nuw nsw i64 %indvars.iv2565, 5
  %.idx1901 = add nsw i64 %4556, %4585
  %4586 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1901
  %4587 = bitcast i16* %4586 to <32 x i16>*
  store <32 x i16> %4584, <32 x i16>* %4587, align 2, !tbaa !423
  br label %"consume blur_x479"

"consume blur_x479":                              ; preds = %"for blur_y.s0.x.x.rebased472.consume blur_x479_crit_edge", %"produce blur_x478"
  %.pre-phi2784 = phi i64 [ %.pre2783, %"for blur_y.s0.x.x.rebased472.consume blur_x479_crit_edge" ], [ %4585, %"produce blur_x478" ]
  %.idx1896 = add nsw i64 %4557, %.pre-phi2784
  %4588 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1896
  %4589 = bitcast i16* %4588 to <32 x i16>*
  %4590 = load <32 x i16>, <32 x i16>* %4589, align 2, !tbaa !423
  %.idx1897 = add nsw i64 %4558, %.pre-phi2784
  %4591 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1897
  %4592 = bitcast i16* %4591 to <32 x i16>*
  %4593 = load <32 x i16>, <32 x i16>* %4592, align 2, !tbaa !423
  %.idx1898 = add nsw i64 %4559, %.pre-phi2784
  %4594 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1898
  %4595 = bitcast i16* %4594 to <32 x i16>*
  %4596 = load <32 x i16>, <32 x i16>* %4595, align 2, !tbaa !423
  %4597 = add <32 x i16> %4593, %4590
  %4598 = add <32 x i16> %4597, %4596
  %4599 = shufflevector <32 x i16> %4598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4600 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4599, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4601 = shufflevector <32 x i16> %4598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4602 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4601, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4603 = shufflevector <16 x i16> %4600, <16 x i16> %4602, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4604 = lshr <32 x i16> %4603, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4605 = add nuw nsw i64 %.pre-phi2784, 32
  %4606 = add nsw i64 %4605, %269
  %.idx1899 = add i64 %4606, %4562
  %4607 = getelementptr inbounds i16, i16* %268, i64 %.idx1899
  %4608 = bitcast i16* %4607 to <32 x i16>*
  store <32 x i16> %4604, <32 x i16>* %4608, align 2, !tbaa !425
  %indvars.iv.next2566 = add nuw nsw i64 %indvars.iv2565, 1
  %.not1900 = icmp eq i64 %indvars.iv.next2566, %348
  br i1 %.not1900, label %"end for blur_y.s0.x.x.rebased473", label %"for blur_y.s0.x.x.rebased472"

"produce blur_x483":                              ; preds = %"end for blur_y.s0.x.x.rebased473"
  %4609 = getelementptr inbounds i16, i16* %read_input, i64 %327
  %4610 = getelementptr inbounds i16, i16* %4609, i64 1
  %4611 = bitcast i16* %4610 to <32 x i16>*
  %4612 = load <32 x i16>, <32 x i16>* %4611, align 2, !tbaa !412
  %4613 = getelementptr inbounds i16, i16* %4609, i64 2
  %4614 = bitcast i16* %4613 to <32 x i16>*
  %4615 = load <32 x i16>, <32 x i16>* %4614, align 2, !tbaa !412
  %4616 = bitcast i16* %4609 to <32 x i16>*
  %4617 = load <32 x i16>, <32 x i16>* %4616, align 2, !tbaa !412
  %4618 = add <32 x i16> %4615, %4612
  %4619 = add <32 x i16> %4618, %4617
  %4620 = shufflevector <32 x i16> %4619, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4620, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4622 = shufflevector <32 x i16> %4619, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4622, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4624 = shufflevector <16 x i16> %4621, <16 x i16> %4623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4625 = lshr <32 x i16> %4624, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4626 = add nsw i64 %1476, %263
  %4627 = getelementptr inbounds i16, i16* %blur_x, i64 %4626
  %4628 = bitcast i16* %4627 to <32 x i16>*
  store <32 x i16> %4625, <32 x i16>* %4628, align 2, !tbaa !423
  %4629 = add nsw i64 %1343, %263
  %4630 = getelementptr inbounds i16, i16* %blur_x, i64 %4629
  %4631 = bitcast i16* %4630 to <32 x i16>*
  %4632 = load <32 x i16>, <32 x i16>* %4631, align 2, !tbaa !423
  %4633 = add nsw i64 %1232, %263
  %4634 = getelementptr inbounds i16, i16* %blur_x, i64 %4633
  %4635 = bitcast i16* %4634 to <32 x i16>*
  %4636 = load <32 x i16>, <32 x i16>* %4635, align 2, !tbaa !423
  %4637 = add <32 x i16> %4632, %4625
  %4638 = add <32 x i16> %4637, %4636
  %4639 = shufflevector <32 x i16> %4638, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4640 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4639, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4641 = shufflevector <32 x i16> %4638, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4642 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4641, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4643 = shufflevector <16 x i16> %4640, <16 x i16> %4642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4644 = lshr <32 x i16> %4643, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4645 = sext i32 %a42 to i64
  %4646 = add nsw i64 %4645, 25
  %4647 = mul nsw i64 %4646, %146
  %4648 = add nsw i64 %272, %4647
  %4649 = getelementptr inbounds i16, i16* %268, i64 %4648
  %4650 = bitcast i16* %4649 to <32 x i16>*
  store <32 x i16> %4644, <32 x i16>* %4650, align 2, !tbaa !425
  br label %"produce blur_x486"

"produce blur_x486":                              ; preds = %"end for blur_y.s0.x.x.rebased473", %"produce blur_x483"
  %4651 = getelementptr inbounds i16, i16* %read_input, i64 %328
  %4652 = getelementptr inbounds i16, i16* %4651, i64 1
  %4653 = bitcast i16* %4652 to <32 x i16>*
  %4654 = load <32 x i16>, <32 x i16>* %4653, align 2, !tbaa !412
  %4655 = getelementptr inbounds i16, i16* %4651, i64 2
  %4656 = bitcast i16* %4655 to <32 x i16>*
  %4657 = load <32 x i16>, <32 x i16>* %4656, align 4, !tbaa !412
  %4658 = bitcast i16* %4651 to <32 x i16>*
  %4659 = load <32 x i16>, <32 x i16>* %4658, align 8, !tbaa !412
  %4660 = add <32 x i16> %4657, %4654
  %4661 = add <32 x i16> %4660, %4659
  %4662 = shufflevector <32 x i16> %4661, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4663 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4662, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4664 = shufflevector <32 x i16> %4661, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4665 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4664, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4666 = shufflevector <16 x i16> %4663, <16 x i16> %4665, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4667 = lshr <32 x i16> %4666, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4667, <32 x i16>* %1126, align 2, !tbaa !423
  %4668 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %4669 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %4670 = add <32 x i16> %4668, %4667
  %4671 = add <32 x i16> %4670, %4669
  %4672 = shufflevector <32 x i16> %4671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4673 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4672, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4674 = shufflevector <32 x i16> %4671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4675 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4674, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4676 = shufflevector <16 x i16> %4673, <16 x i16> %4675, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4677 = lshr <32 x i16> %4676, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4678 = add nsw i64 %1356, 26
  %4679 = mul nsw i64 %4678, %146
  %4680 = getelementptr inbounds i16, i16* %268, i64 %4679
  %4681 = bitcast i16* %4680 to <32 x i16>*
  store <32 x i16> %4677, <32 x i16>* %4681, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased488.preheader", label %"end for blur_y.s0.x.x.rebased489", !prof !406

"for blur_y.s0.x.x.rebased488.preheader":         ; preds = %"produce blur_x486"
  %4682 = sext i32 %t939 to i64
  %4683 = add nsw i64 %4682, 32
  %4684 = add nsw i64 %1476, 32
  %4685 = add nsw i64 %1124, 32
  %4686 = add nsw i64 %1343, 32
  %4687 = sext i32 %a42 to i64
  %4688 = add nsw i64 %4687, 26
  %4689 = mul nsw i64 %4688, %146
  br label %"for blur_y.s0.x.x.rebased488"

"for blur_y.s0.x.x.rebased488":                   ; preds = %"for blur_y.s0.x.x.rebased488.preheader", %"consume blur_x495"
  %indvars.iv2567 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased488.preheader" ], [ %indvars.iv.next2568, %"consume blur_x495" ]
  %4690 = trunc i64 %indvars.iv2567 to i32
  %4691 = shl nsw i32 %4690, 5
  %4692 = icmp sgt i32 %b37, %4691
  br i1 %4692, label %"produce blur_x494", label %"for blur_y.s0.x.x.rebased488.consume blur_x495_crit_edge"

"for blur_y.s0.x.x.rebased488.consume blur_x495_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased488"
  %.pre2785 = shl nuw nsw i64 %indvars.iv2567, 5
  br label %"consume blur_x495"

"end for blur_y.s0.x.x.rebased489":               ; preds = %"consume blur_x495", %"produce blur_x486"
  br i1 %.not1855, label %"produce blur_x502", label %"produce blur_x499"

"produce blur_x494":                              ; preds = %"for blur_y.s0.x.x.rebased488"
  %t707.s = add nsw i32 %4691, %t1068
  %4693 = sext i32 %t707.s to i64
  %4694 = getelementptr inbounds i16, i16* %read_input, i64 %4693
  %4695 = getelementptr inbounds i16, i16* %4694, i64 33
  %4696 = bitcast i16* %4695 to <32 x i16>*
  %4697 = load <32 x i16>, <32 x i16>* %4696, align 2, !tbaa !412
  %4698 = getelementptr inbounds i16, i16* %4694, i64 34
  %4699 = bitcast i16* %4698 to <32 x i16>*
  %4700 = load <32 x i16>, <32 x i16>* %4699, align 4, !tbaa !412
  %4701 = getelementptr inbounds i16, i16* %4694, i64 32
  %4702 = bitcast i16* %4701 to <32 x i16>*
  %4703 = load <32 x i16>, <32 x i16>* %4702, align 4, !tbaa !412
  %4704 = add <32 x i16> %4700, %4697
  %4705 = add <32 x i16> %4704, %4703
  %4706 = shufflevector <32 x i16> %4705, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4707 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4706, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4708 = shufflevector <32 x i16> %4705, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4710 = shufflevector <16 x i16> %4707, <16 x i16> %4709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4711 = lshr <32 x i16> %4710, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4712 = shl nuw nsw i64 %indvars.iv2567, 5
  %.idx1895 = add nsw i64 %4683, %4712
  %4713 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1895
  %4714 = bitcast i16* %4713 to <32 x i16>*
  store <32 x i16> %4711, <32 x i16>* %4714, align 2, !tbaa !423
  br label %"consume blur_x495"

"consume blur_x495":                              ; preds = %"for blur_y.s0.x.x.rebased488.consume blur_x495_crit_edge", %"produce blur_x494"
  %.pre-phi2786 = phi i64 [ %.pre2785, %"for blur_y.s0.x.x.rebased488.consume blur_x495_crit_edge" ], [ %4712, %"produce blur_x494" ]
  %.idx1890 = add nsw i64 %4684, %.pre-phi2786
  %4715 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1890
  %4716 = bitcast i16* %4715 to <32 x i16>*
  %4717 = load <32 x i16>, <32 x i16>* %4716, align 2, !tbaa !423
  %.idx1891 = add nsw i64 %4685, %.pre-phi2786
  %4718 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1891
  %4719 = bitcast i16* %4718 to <32 x i16>*
  %4720 = load <32 x i16>, <32 x i16>* %4719, align 2, !tbaa !423
  %.idx1892 = add nsw i64 %4686, %.pre-phi2786
  %4721 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1892
  %4722 = bitcast i16* %4721 to <32 x i16>*
  %4723 = load <32 x i16>, <32 x i16>* %4722, align 2, !tbaa !423
  %4724 = add <32 x i16> %4720, %4717
  %4725 = add <32 x i16> %4724, %4723
  %4726 = shufflevector <32 x i16> %4725, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4727 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4726, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4728 = shufflevector <32 x i16> %4725, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4729 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4728, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4730 = shufflevector <16 x i16> %4727, <16 x i16> %4729, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4731 = lshr <32 x i16> %4730, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4732 = add nuw nsw i64 %.pre-phi2786, 32
  %4733 = add nsw i64 %4732, %269
  %.idx1893 = add i64 %4733, %4689
  %4734 = getelementptr inbounds i16, i16* %268, i64 %.idx1893
  %4735 = bitcast i16* %4734 to <32 x i16>*
  store <32 x i16> %4731, <32 x i16>* %4735, align 2, !tbaa !425
  %indvars.iv.next2568 = add nuw nsw i64 %indvars.iv2567, 1
  %.not1894 = icmp eq i64 %indvars.iv.next2568, %348
  br i1 %.not1894, label %"end for blur_y.s0.x.x.rebased489", label %"for blur_y.s0.x.x.rebased488"

"produce blur_x499":                              ; preds = %"end for blur_y.s0.x.x.rebased489"
  %4736 = getelementptr inbounds i16, i16* %read_input, i64 %329
  %4737 = getelementptr inbounds i16, i16* %4736, i64 1
  %4738 = bitcast i16* %4737 to <32 x i16>*
  %4739 = load <32 x i16>, <32 x i16>* %4738, align 2, !tbaa !412
  %4740 = getelementptr inbounds i16, i16* %4736, i64 2
  %4741 = bitcast i16* %4740 to <32 x i16>*
  %4742 = load <32 x i16>, <32 x i16>* %4741, align 2, !tbaa !412
  %4743 = bitcast i16* %4736 to <32 x i16>*
  %4744 = load <32 x i16>, <32 x i16>* %4743, align 2, !tbaa !412
  %4745 = add <32 x i16> %4742, %4739
  %4746 = add <32 x i16> %4745, %4744
  %4747 = shufflevector <32 x i16> %4746, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4747, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4749 = shufflevector <32 x i16> %4746, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4749, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4751 = shufflevector <16 x i16> %4748, <16 x i16> %4750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4752 = lshr <32 x i16> %4751, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4753 = add nsw i64 %1124, %263
  %4754 = getelementptr inbounds i16, i16* %blur_x, i64 %4753
  %4755 = bitcast i16* %4754 to <32 x i16>*
  store <32 x i16> %4752, <32 x i16>* %4755, align 2, !tbaa !423
  %4756 = add nsw i64 %1476, %263
  %4757 = getelementptr inbounds i16, i16* %blur_x, i64 %4756
  %4758 = bitcast i16* %4757 to <32 x i16>*
  %4759 = load <32 x i16>, <32 x i16>* %4758, align 2, !tbaa !423
  %4760 = add nsw i64 %1343, %263
  %4761 = getelementptr inbounds i16, i16* %blur_x, i64 %4760
  %4762 = bitcast i16* %4761 to <32 x i16>*
  %4763 = load <32 x i16>, <32 x i16>* %4762, align 2, !tbaa !423
  %4764 = add <32 x i16> %4759, %4752
  %4765 = add <32 x i16> %4764, %4763
  %4766 = shufflevector <32 x i16> %4765, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4767 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4766, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4768 = shufflevector <32 x i16> %4765, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4769 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4768, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4770 = shufflevector <16 x i16> %4767, <16 x i16> %4769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4771 = lshr <32 x i16> %4770, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4772 = sext i32 %a42 to i64
  %4773 = add nsw i64 %4772, 26
  %4774 = mul nsw i64 %4773, %146
  %4775 = add nsw i64 %272, %4774
  %4776 = getelementptr inbounds i16, i16* %268, i64 %4775
  %4777 = bitcast i16* %4776 to <32 x i16>*
  store <32 x i16> %4771, <32 x i16>* %4777, align 2, !tbaa !425
  br label %"produce blur_x502"

"produce blur_x502":                              ; preds = %"end for blur_y.s0.x.x.rebased489", %"produce blur_x499"
  %4778 = getelementptr inbounds i16, i16* %read_input, i64 %330
  %4779 = getelementptr inbounds i16, i16* %4778, i64 1
  %4780 = bitcast i16* %4779 to <32 x i16>*
  %4781 = load <32 x i16>, <32 x i16>* %4780, align 2, !tbaa !412
  %4782 = getelementptr inbounds i16, i16* %4778, i64 2
  %4783 = bitcast i16* %4782 to <32 x i16>*
  %4784 = load <32 x i16>, <32 x i16>* %4783, align 2, !tbaa !412
  %4785 = bitcast i16* %4778 to <32 x i16>*
  %4786 = load <32 x i16>, <32 x i16>* %4785, align 2, !tbaa !412
  %4787 = add <32 x i16> %4784, %4781
  %4788 = add <32 x i16> %4787, %4786
  %4789 = shufflevector <32 x i16> %4788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4789, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4791 = shufflevector <32 x i16> %4788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4792 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4791, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4793 = shufflevector <16 x i16> %4790, <16 x i16> %4792, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4794 = lshr <32 x i16> %4793, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4794, <32 x i16>* %1234, align 2, !tbaa !423
  %4795 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %4796 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %4797 = add <32 x i16> %4795, %4794
  %4798 = add <32 x i16> %4797, %4796
  %4799 = shufflevector <32 x i16> %4798, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4800 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4799, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4801 = shufflevector <32 x i16> %4798, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4802 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4801, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4803 = shufflevector <16 x i16> %4800, <16 x i16> %4802, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4804 = lshr <32 x i16> %4803, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4805 = add nsw i64 %1356, 27
  %4806 = mul nsw i64 %4805, %146
  %4807 = getelementptr inbounds i16, i16* %268, i64 %4806
  %4808 = bitcast i16* %4807 to <32 x i16>*
  store <32 x i16> %4804, <32 x i16>* %4808, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased504.preheader", label %"end for blur_y.s0.x.x.rebased505", !prof !406

"for blur_y.s0.x.x.rebased504.preheader":         ; preds = %"produce blur_x502"
  %4809 = sext i32 %t941 to i64
  %4810 = add nsw i64 %4809, 32
  %4811 = add nsw i64 %1124, 32
  %4812 = add nsw i64 %1232, 32
  %4813 = add nsw i64 %1476, 32
  %4814 = sext i32 %a42 to i64
  %4815 = add nsw i64 %4814, 27
  %4816 = mul nsw i64 %4815, %146
  br label %"for blur_y.s0.x.x.rebased504"

"for blur_y.s0.x.x.rebased504":                   ; preds = %"for blur_y.s0.x.x.rebased504.preheader", %"consume blur_x511"
  %indvars.iv2569 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased504.preheader" ], [ %indvars.iv.next2570, %"consume blur_x511" ]
  %4817 = trunc i64 %indvars.iv2569 to i32
  %4818 = shl nsw i32 %4817, 5
  %4819 = icmp sgt i32 %b37, %4818
  br i1 %4819, label %"produce blur_x510", label %"for blur_y.s0.x.x.rebased504.consume blur_x511_crit_edge"

"for blur_y.s0.x.x.rebased504.consume blur_x511_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased504"
  %.pre2787 = shl nuw nsw i64 %indvars.iv2569, 5
  br label %"consume blur_x511"

"end for blur_y.s0.x.x.rebased505":               ; preds = %"consume blur_x511", %"produce blur_x502"
  br i1 %.not1855, label %"produce blur_x518", label %"produce blur_x515"

"produce blur_x510":                              ; preds = %"for blur_y.s0.x.x.rebased504"
  %t712.s = add nsw i32 %4818, %t1073
  %4820 = sext i32 %t712.s to i64
  %4821 = getelementptr inbounds i16, i16* %read_input, i64 %4820
  %4822 = getelementptr inbounds i16, i16* %4821, i64 33
  %4823 = bitcast i16* %4822 to <32 x i16>*
  %4824 = load <32 x i16>, <32 x i16>* %4823, align 2, !tbaa !412
  %4825 = getelementptr inbounds i16, i16* %4821, i64 34
  %4826 = bitcast i16* %4825 to <32 x i16>*
  %4827 = load <32 x i16>, <32 x i16>* %4826, align 2, !tbaa !412
  %4828 = getelementptr inbounds i16, i16* %4821, i64 32
  %4829 = bitcast i16* %4828 to <32 x i16>*
  %4830 = load <32 x i16>, <32 x i16>* %4829, align 2, !tbaa !412
  %4831 = add <32 x i16> %4827, %4824
  %4832 = add <32 x i16> %4831, %4830
  %4833 = shufflevector <32 x i16> %4832, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4833, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4835 = shufflevector <32 x i16> %4832, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4835, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4837 = shufflevector <16 x i16> %4834, <16 x i16> %4836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4838 = lshr <32 x i16> %4837, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4839 = shl nuw nsw i64 %indvars.iv2569, 5
  %.idx1889 = add nsw i64 %4810, %4839
  %4840 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1889
  %4841 = bitcast i16* %4840 to <32 x i16>*
  store <32 x i16> %4838, <32 x i16>* %4841, align 2, !tbaa !423
  br label %"consume blur_x511"

"consume blur_x511":                              ; preds = %"for blur_y.s0.x.x.rebased504.consume blur_x511_crit_edge", %"produce blur_x510"
  %.pre-phi2788 = phi i64 [ %.pre2787, %"for blur_y.s0.x.x.rebased504.consume blur_x511_crit_edge" ], [ %4839, %"produce blur_x510" ]
  %.idx1884 = add nsw i64 %4811, %.pre-phi2788
  %4842 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1884
  %4843 = bitcast i16* %4842 to <32 x i16>*
  %4844 = load <32 x i16>, <32 x i16>* %4843, align 2, !tbaa !423
  %.idx1885 = add nsw i64 %4812, %.pre-phi2788
  %4845 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1885
  %4846 = bitcast i16* %4845 to <32 x i16>*
  %4847 = load <32 x i16>, <32 x i16>* %4846, align 2, !tbaa !423
  %.idx1886 = add nsw i64 %4813, %.pre-phi2788
  %4848 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1886
  %4849 = bitcast i16* %4848 to <32 x i16>*
  %4850 = load <32 x i16>, <32 x i16>* %4849, align 2, !tbaa !423
  %4851 = add <32 x i16> %4847, %4844
  %4852 = add <32 x i16> %4851, %4850
  %4853 = shufflevector <32 x i16> %4852, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4854 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4853, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4855 = shufflevector <32 x i16> %4852, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4856 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4855, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4857 = shufflevector <16 x i16> %4854, <16 x i16> %4856, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4858 = lshr <32 x i16> %4857, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4859 = add nuw nsw i64 %.pre-phi2788, 32
  %4860 = add nsw i64 %4859, %269
  %.idx1887 = add i64 %4860, %4816
  %4861 = getelementptr inbounds i16, i16* %268, i64 %.idx1887
  %4862 = bitcast i16* %4861 to <32 x i16>*
  store <32 x i16> %4858, <32 x i16>* %4862, align 2, !tbaa !425
  %indvars.iv.next2570 = add nuw nsw i64 %indvars.iv2569, 1
  %.not1888 = icmp eq i64 %indvars.iv.next2570, %348
  br i1 %.not1888, label %"end for blur_y.s0.x.x.rebased505", label %"for blur_y.s0.x.x.rebased504"

"produce blur_x515":                              ; preds = %"end for blur_y.s0.x.x.rebased505"
  %4863 = getelementptr inbounds i16, i16* %read_input, i64 %331
  %4864 = getelementptr inbounds i16, i16* %4863, i64 1
  %4865 = bitcast i16* %4864 to <32 x i16>*
  %4866 = load <32 x i16>, <32 x i16>* %4865, align 2, !tbaa !412
  %4867 = getelementptr inbounds i16, i16* %4863, i64 2
  %4868 = bitcast i16* %4867 to <32 x i16>*
  %4869 = load <32 x i16>, <32 x i16>* %4868, align 2, !tbaa !412
  %4870 = bitcast i16* %4863 to <32 x i16>*
  %4871 = load <32 x i16>, <32 x i16>* %4870, align 2, !tbaa !412
  %4872 = add <32 x i16> %4869, %4866
  %4873 = add <32 x i16> %4872, %4871
  %4874 = shufflevector <32 x i16> %4873, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4874, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4876 = shufflevector <32 x i16> %4873, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4877 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4876, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4878 = shufflevector <16 x i16> %4875, <16 x i16> %4877, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4879 = lshr <32 x i16> %4878, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4880 = add nsw i64 %1232, %263
  %4881 = getelementptr inbounds i16, i16* %blur_x, i64 %4880
  %4882 = bitcast i16* %4881 to <32 x i16>*
  store <32 x i16> %4879, <32 x i16>* %4882, align 2, !tbaa !423
  %4883 = add nsw i64 %1124, %263
  %4884 = getelementptr inbounds i16, i16* %blur_x, i64 %4883
  %4885 = bitcast i16* %4884 to <32 x i16>*
  %4886 = load <32 x i16>, <32 x i16>* %4885, align 2, !tbaa !423
  %4887 = add nsw i64 %1476, %263
  %4888 = getelementptr inbounds i16, i16* %blur_x, i64 %4887
  %4889 = bitcast i16* %4888 to <32 x i16>*
  %4890 = load <32 x i16>, <32 x i16>* %4889, align 2, !tbaa !423
  %4891 = add <32 x i16> %4886, %4879
  %4892 = add <32 x i16> %4891, %4890
  %4893 = shufflevector <32 x i16> %4892, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4894 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4893, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4895 = shufflevector <32 x i16> %4892, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4896 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4895, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4897 = shufflevector <16 x i16> %4894, <16 x i16> %4896, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4898 = lshr <32 x i16> %4897, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4899 = sext i32 %a42 to i64
  %4900 = add nsw i64 %4899, 27
  %4901 = mul nsw i64 %4900, %146
  %4902 = add nsw i64 %272, %4901
  %4903 = getelementptr inbounds i16, i16* %268, i64 %4902
  %4904 = bitcast i16* %4903 to <32 x i16>*
  store <32 x i16> %4898, <32 x i16>* %4904, align 2, !tbaa !425
  br label %"produce blur_x518"

"produce blur_x518":                              ; preds = %"end for blur_y.s0.x.x.rebased505", %"produce blur_x515"
  %4905 = getelementptr inbounds i16, i16* %read_input, i64 %332
  %4906 = getelementptr inbounds i16, i16* %4905, i64 1
  %4907 = bitcast i16* %4906 to <32 x i16>*
  %4908 = load <32 x i16>, <32 x i16>* %4907, align 2, !tbaa !412
  %4909 = getelementptr inbounds i16, i16* %4905, i64 2
  %4910 = bitcast i16* %4909 to <32 x i16>*
  %4911 = load <32 x i16>, <32 x i16>* %4910, align 4, !tbaa !412
  %4912 = bitcast i16* %4905 to <32 x i16>*
  %4913 = load <32 x i16>, <32 x i16>* %4912, align 4, !tbaa !412
  %4914 = add <32 x i16> %4911, %4908
  %4915 = add <32 x i16> %4914, %4913
  %4916 = shufflevector <32 x i16> %4915, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4917 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4916, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4918 = shufflevector <32 x i16> %4915, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4919 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4918, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4920 = shufflevector <16 x i16> %4917, <16 x i16> %4919, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4921 = lshr <32 x i16> %4920, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %4921, <32 x i16>* %1345, align 2, !tbaa !423
  %4922 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %4923 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %4924 = add <32 x i16> %4922, %4921
  %4925 = add <32 x i16> %4924, %4923
  %4926 = shufflevector <32 x i16> %4925, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4927 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4926, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4928 = shufflevector <32 x i16> %4925, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4929 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4928, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4930 = shufflevector <16 x i16> %4927, <16 x i16> %4929, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4931 = lshr <32 x i16> %4930, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4932 = add nsw i64 %1356, 28
  %4933 = mul nsw i64 %4932, %146
  %4934 = getelementptr inbounds i16, i16* %268, i64 %4933
  %4935 = bitcast i16* %4934 to <32 x i16>*
  store <32 x i16> %4931, <32 x i16>* %4935, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased520.preheader", label %"end for blur_y.s0.x.x.rebased521", !prof !406

"for blur_y.s0.x.x.rebased520.preheader":         ; preds = %"produce blur_x518"
  %4936 = sext i32 %t942 to i64
  %4937 = add nsw i64 %4936, 32
  %4938 = add nsw i64 %1232, 32
  %4939 = add nsw i64 %1343, 32
  %4940 = add nsw i64 %1124, 32
  %4941 = sext i32 %a42 to i64
  %4942 = add nsw i64 %4941, 28
  %4943 = mul nsw i64 %4942, %146
  br label %"for blur_y.s0.x.x.rebased520"

"for blur_y.s0.x.x.rebased520":                   ; preds = %"for blur_y.s0.x.x.rebased520.preheader", %"consume blur_x527"
  %indvars.iv2571 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased520.preheader" ], [ %indvars.iv.next2572, %"consume blur_x527" ]
  %4944 = trunc i64 %indvars.iv2571 to i32
  %4945 = shl nsw i32 %4944, 5
  %4946 = icmp sgt i32 %b37, %4945
  br i1 %4946, label %"produce blur_x526", label %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge"

"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased520"
  %.pre2789 = shl nuw nsw i64 %indvars.iv2571, 5
  br label %"consume blur_x527"

"end for blur_y.s0.x.x.rebased521":               ; preds = %"consume blur_x527", %"produce blur_x518"
  br i1 %.not1855, label %"produce blur_x534", label %"produce blur_x531"

"produce blur_x526":                              ; preds = %"for blur_y.s0.x.x.rebased520"
  %t717.s = add nsw i32 %4945, %t1078
  %4947 = sext i32 %t717.s to i64
  %4948 = getelementptr inbounds i16, i16* %read_input, i64 %4947
  %4949 = getelementptr inbounds i16, i16* %4948, i64 33
  %4950 = bitcast i16* %4949 to <32 x i16>*
  %4951 = load <32 x i16>, <32 x i16>* %4950, align 2, !tbaa !412
  %4952 = getelementptr inbounds i16, i16* %4948, i64 34
  %4953 = bitcast i16* %4952 to <32 x i16>*
  %4954 = load <32 x i16>, <32 x i16>* %4953, align 4, !tbaa !412
  %4955 = getelementptr inbounds i16, i16* %4948, i64 32
  %4956 = bitcast i16* %4955 to <32 x i16>*
  %4957 = load <32 x i16>, <32 x i16>* %4956, align 4, !tbaa !412
  %4958 = add <32 x i16> %4954, %4951
  %4959 = add <32 x i16> %4958, %4957
  %4960 = shufflevector <32 x i16> %4959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4961 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4960, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4962 = shufflevector <32 x i16> %4959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4963 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4962, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4964 = shufflevector <16 x i16> %4961, <16 x i16> %4963, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4965 = lshr <32 x i16> %4964, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4966 = shl nuw nsw i64 %indvars.iv2571, 5
  %.idx1883 = add nsw i64 %4937, %4966
  %4967 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1883
  %4968 = bitcast i16* %4967 to <32 x i16>*
  store <32 x i16> %4965, <32 x i16>* %4968, align 2, !tbaa !423
  br label %"consume blur_x527"

"consume blur_x527":                              ; preds = %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge", %"produce blur_x526"
  %.pre-phi2790 = phi i64 [ %.pre2789, %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge" ], [ %4966, %"produce blur_x526" ]
  %.idx1878 = add nsw i64 %4938, %.pre-phi2790
  %4969 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1878
  %4970 = bitcast i16* %4969 to <32 x i16>*
  %4971 = load <32 x i16>, <32 x i16>* %4970, align 2, !tbaa !423
  %.idx1879 = add nsw i64 %4939, %.pre-phi2790
  %4972 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1879
  %4973 = bitcast i16* %4972 to <32 x i16>*
  %4974 = load <32 x i16>, <32 x i16>* %4973, align 2, !tbaa !423
  %.idx1880 = add nsw i64 %4940, %.pre-phi2790
  %4975 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1880
  %4976 = bitcast i16* %4975 to <32 x i16>*
  %4977 = load <32 x i16>, <32 x i16>* %4976, align 2, !tbaa !423
  %4978 = add <32 x i16> %4974, %4971
  %4979 = add <32 x i16> %4978, %4977
  %4980 = shufflevector <32 x i16> %4979, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4981 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4980, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4982 = shufflevector <32 x i16> %4979, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4983 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4982, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4984 = shufflevector <16 x i16> %4981, <16 x i16> %4983, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4985 = lshr <32 x i16> %4984, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4986 = add nuw nsw i64 %.pre-phi2790, 32
  %4987 = add nsw i64 %4986, %269
  %.idx1881 = add i64 %4987, %4943
  %4988 = getelementptr inbounds i16, i16* %268, i64 %.idx1881
  %4989 = bitcast i16* %4988 to <32 x i16>*
  store <32 x i16> %4985, <32 x i16>* %4989, align 2, !tbaa !425
  %indvars.iv.next2572 = add nuw nsw i64 %indvars.iv2571, 1
  %.not1882 = icmp eq i64 %indvars.iv.next2572, %348
  br i1 %.not1882, label %"end for blur_y.s0.x.x.rebased521", label %"for blur_y.s0.x.x.rebased520"

"produce blur_x531":                              ; preds = %"end for blur_y.s0.x.x.rebased521"
  %4990 = getelementptr inbounds i16, i16* %read_input, i64 %333
  %4991 = getelementptr inbounds i16, i16* %4990, i64 1
  %4992 = bitcast i16* %4991 to <32 x i16>*
  %4993 = load <32 x i16>, <32 x i16>* %4992, align 2, !tbaa !412
  %4994 = getelementptr inbounds i16, i16* %4990, i64 2
  %4995 = bitcast i16* %4994 to <32 x i16>*
  %4996 = load <32 x i16>, <32 x i16>* %4995, align 2, !tbaa !412
  %4997 = bitcast i16* %4990 to <32 x i16>*
  %4998 = load <32 x i16>, <32 x i16>* %4997, align 2, !tbaa !412
  %4999 = add <32 x i16> %4996, %4993
  %5000 = add <32 x i16> %4999, %4998
  %5001 = shufflevector <32 x i16> %5000, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5002 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5001, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5003 = shufflevector <32 x i16> %5000, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5004 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5003, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5005 = shufflevector <16 x i16> %5002, <16 x i16> %5004, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5006 = lshr <32 x i16> %5005, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5007 = add nsw i64 %1343, %263
  %5008 = getelementptr inbounds i16, i16* %blur_x, i64 %5007
  %5009 = bitcast i16* %5008 to <32 x i16>*
  store <32 x i16> %5006, <32 x i16>* %5009, align 2, !tbaa !423
  %5010 = add nsw i64 %1232, %263
  %5011 = getelementptr inbounds i16, i16* %blur_x, i64 %5010
  %5012 = bitcast i16* %5011 to <32 x i16>*
  %5013 = load <32 x i16>, <32 x i16>* %5012, align 2, !tbaa !423
  %5014 = add nsw i64 %1124, %263
  %5015 = getelementptr inbounds i16, i16* %blur_x, i64 %5014
  %5016 = bitcast i16* %5015 to <32 x i16>*
  %5017 = load <32 x i16>, <32 x i16>* %5016, align 2, !tbaa !423
  %5018 = add <32 x i16> %5013, %5006
  %5019 = add <32 x i16> %5018, %5017
  %5020 = shufflevector <32 x i16> %5019, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5021 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5020, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5022 = shufflevector <32 x i16> %5019, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5023 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5022, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5024 = shufflevector <16 x i16> %5021, <16 x i16> %5023, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5025 = lshr <32 x i16> %5024, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5026 = sext i32 %a42 to i64
  %5027 = add nsw i64 %5026, 28
  %5028 = mul nsw i64 %5027, %146
  %5029 = add nsw i64 %272, %5028
  %5030 = getelementptr inbounds i16, i16* %268, i64 %5029
  %5031 = bitcast i16* %5030 to <32 x i16>*
  store <32 x i16> %5025, <32 x i16>* %5031, align 2, !tbaa !425
  br label %"produce blur_x534"

"produce blur_x534":                              ; preds = %"end for blur_y.s0.x.x.rebased521", %"produce blur_x531"
  %5032 = getelementptr inbounds i16, i16* %read_input, i64 %334
  %5033 = getelementptr inbounds i16, i16* %5032, i64 1
  %5034 = bitcast i16* %5033 to <32 x i16>*
  %5035 = load <32 x i16>, <32 x i16>* %5034, align 2, !tbaa !412
  %5036 = getelementptr inbounds i16, i16* %5032, i64 2
  %5037 = bitcast i16* %5036 to <32 x i16>*
  %5038 = load <32 x i16>, <32 x i16>* %5037, align 2, !tbaa !412
  %5039 = bitcast i16* %5032 to <32 x i16>*
  %5040 = load <32 x i16>, <32 x i16>* %5039, align 2, !tbaa !412
  %5041 = add <32 x i16> %5038, %5035
  %5042 = add <32 x i16> %5041, %5040
  %5043 = shufflevector <32 x i16> %5042, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5044 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5043, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5045 = shufflevector <32 x i16> %5042, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5046 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5045, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5047 = shufflevector <16 x i16> %5044, <16 x i16> %5046, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5048 = lshr <32 x i16> %5047, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %5048, <32 x i16>* %1478, align 2, !tbaa !423
  %5049 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %5050 = load <32 x i16>, <32 x i16>* %1234, align 2, !tbaa !423
  %5051 = add <32 x i16> %5049, %5048
  %5052 = add <32 x i16> %5051, %5050
  %5053 = shufflevector <32 x i16> %5052, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5053, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5055 = shufflevector <32 x i16> %5052, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5056 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5055, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5057 = shufflevector <16 x i16> %5054, <16 x i16> %5056, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5058 = lshr <32 x i16> %5057, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5059 = add nsw i64 %1356, 29
  %5060 = mul nsw i64 %5059, %146
  %5061 = getelementptr inbounds i16, i16* %268, i64 %5060
  %5062 = bitcast i16* %5061 to <32 x i16>*
  store <32 x i16> %5058, <32 x i16>* %5062, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased536.preheader", label %"end for blur_y.s0.x.x.rebased537", !prof !406

"for blur_y.s0.x.x.rebased536.preheader":         ; preds = %"produce blur_x534"
  %5063 = sext i32 %t947 to i64
  %5064 = add nsw i64 %5063, 32
  %5065 = add nsw i64 %1343, 32
  %5066 = add nsw i64 %1476, 32
  %5067 = add nsw i64 %1232, 32
  %5068 = sext i32 %a42 to i64
  %5069 = add nsw i64 %5068, 29
  %5070 = mul nsw i64 %5069, %146
  br label %"for blur_y.s0.x.x.rebased536"

"for blur_y.s0.x.x.rebased536":                   ; preds = %"for blur_y.s0.x.x.rebased536.preheader", %"consume blur_x543"
  %indvars.iv2573 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased536.preheader" ], [ %indvars.iv.next2574, %"consume blur_x543" ]
  %5071 = trunc i64 %indvars.iv2573 to i32
  %5072 = shl nsw i32 %5071, 5
  %5073 = icmp sgt i32 %b37, %5072
  br i1 %5073, label %"produce blur_x542", label %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge"

"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased536"
  %.pre2791 = shl nuw nsw i64 %indvars.iv2573, 5
  br label %"consume blur_x543"

"end for blur_y.s0.x.x.rebased537":               ; preds = %"consume blur_x543", %"produce blur_x534"
  br i1 %.not1855, label %"produce blur_x550", label %"produce blur_x547"

"produce blur_x542":                              ; preds = %"for blur_y.s0.x.x.rebased536"
  %t722.s = add nsw i32 %5072, %t1083
  %5074 = sext i32 %t722.s to i64
  %5075 = getelementptr inbounds i16, i16* %read_input, i64 %5074
  %5076 = getelementptr inbounds i16, i16* %5075, i64 33
  %5077 = bitcast i16* %5076 to <32 x i16>*
  %5078 = load <32 x i16>, <32 x i16>* %5077, align 2, !tbaa !412
  %5079 = getelementptr inbounds i16, i16* %5075, i64 34
  %5080 = bitcast i16* %5079 to <32 x i16>*
  %5081 = load <32 x i16>, <32 x i16>* %5080, align 2, !tbaa !412
  %5082 = getelementptr inbounds i16, i16* %5075, i64 32
  %5083 = bitcast i16* %5082 to <32 x i16>*
  %5084 = load <32 x i16>, <32 x i16>* %5083, align 2, !tbaa !412
  %5085 = add <32 x i16> %5081, %5078
  %5086 = add <32 x i16> %5085, %5084
  %5087 = shufflevector <32 x i16> %5086, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5087, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5089 = shufflevector <32 x i16> %5086, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5089, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5091 = shufflevector <16 x i16> %5088, <16 x i16> %5090, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5092 = lshr <32 x i16> %5091, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5093 = shl nuw nsw i64 %indvars.iv2573, 5
  %.idx1877 = add nsw i64 %5064, %5093
  %5094 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1877
  %5095 = bitcast i16* %5094 to <32 x i16>*
  store <32 x i16> %5092, <32 x i16>* %5095, align 2, !tbaa !423
  br label %"consume blur_x543"

"consume blur_x543":                              ; preds = %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge", %"produce blur_x542"
  %.pre-phi2792 = phi i64 [ %.pre2791, %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge" ], [ %5093, %"produce blur_x542" ]
  %.idx1872 = add nsw i64 %5065, %.pre-phi2792
  %5096 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1872
  %5097 = bitcast i16* %5096 to <32 x i16>*
  %5098 = load <32 x i16>, <32 x i16>* %5097, align 2, !tbaa !423
  %.idx1873 = add nsw i64 %5066, %.pre-phi2792
  %5099 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1873
  %5100 = bitcast i16* %5099 to <32 x i16>*
  %5101 = load <32 x i16>, <32 x i16>* %5100, align 2, !tbaa !423
  %.idx1874 = add nsw i64 %5067, %.pre-phi2792
  %5102 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1874
  %5103 = bitcast i16* %5102 to <32 x i16>*
  %5104 = load <32 x i16>, <32 x i16>* %5103, align 2, !tbaa !423
  %5105 = add <32 x i16> %5101, %5098
  %5106 = add <32 x i16> %5105, %5104
  %5107 = shufflevector <32 x i16> %5106, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5108 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5107, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5109 = shufflevector <32 x i16> %5106, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5110 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5109, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5111 = shufflevector <16 x i16> %5108, <16 x i16> %5110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5112 = lshr <32 x i16> %5111, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5113 = add nuw nsw i64 %.pre-phi2792, 32
  %5114 = add nsw i64 %5113, %269
  %.idx1875 = add i64 %5114, %5070
  %5115 = getelementptr inbounds i16, i16* %268, i64 %.idx1875
  %5116 = bitcast i16* %5115 to <32 x i16>*
  store <32 x i16> %5112, <32 x i16>* %5116, align 2, !tbaa !425
  %indvars.iv.next2574 = add nuw nsw i64 %indvars.iv2573, 1
  %.not1876 = icmp eq i64 %indvars.iv.next2574, %348
  br i1 %.not1876, label %"end for blur_y.s0.x.x.rebased537", label %"for blur_y.s0.x.x.rebased536"

"produce blur_x547":                              ; preds = %"end for blur_y.s0.x.x.rebased537"
  %5117 = getelementptr inbounds i16, i16* %read_input, i64 %335
  %5118 = getelementptr inbounds i16, i16* %5117, i64 1
  %5119 = bitcast i16* %5118 to <32 x i16>*
  %5120 = load <32 x i16>, <32 x i16>* %5119, align 2, !tbaa !412
  %5121 = getelementptr inbounds i16, i16* %5117, i64 2
  %5122 = bitcast i16* %5121 to <32 x i16>*
  %5123 = load <32 x i16>, <32 x i16>* %5122, align 2, !tbaa !412
  %5124 = bitcast i16* %5117 to <32 x i16>*
  %5125 = load <32 x i16>, <32 x i16>* %5124, align 2, !tbaa !412
  %5126 = add <32 x i16> %5123, %5120
  %5127 = add <32 x i16> %5126, %5125
  %5128 = shufflevector <32 x i16> %5127, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5129 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5128, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5130 = shufflevector <32 x i16> %5127, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5131 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5130, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5132 = shufflevector <16 x i16> %5129, <16 x i16> %5131, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5133 = lshr <32 x i16> %5132, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5134 = add nsw i64 %1476, %263
  %5135 = getelementptr inbounds i16, i16* %blur_x, i64 %5134
  %5136 = bitcast i16* %5135 to <32 x i16>*
  store <32 x i16> %5133, <32 x i16>* %5136, align 2, !tbaa !423
  %5137 = add nsw i64 %1343, %263
  %5138 = getelementptr inbounds i16, i16* %blur_x, i64 %5137
  %5139 = bitcast i16* %5138 to <32 x i16>*
  %5140 = load <32 x i16>, <32 x i16>* %5139, align 2, !tbaa !423
  %5141 = add nsw i64 %1232, %263
  %5142 = getelementptr inbounds i16, i16* %blur_x, i64 %5141
  %5143 = bitcast i16* %5142 to <32 x i16>*
  %5144 = load <32 x i16>, <32 x i16>* %5143, align 2, !tbaa !423
  %5145 = add <32 x i16> %5140, %5133
  %5146 = add <32 x i16> %5145, %5144
  %5147 = shufflevector <32 x i16> %5146, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5148 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5147, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5149 = shufflevector <32 x i16> %5146, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5150 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5149, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5151 = shufflevector <16 x i16> %5148, <16 x i16> %5150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5152 = lshr <32 x i16> %5151, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5153 = sext i32 %a42 to i64
  %5154 = add nsw i64 %5153, 29
  %5155 = mul nsw i64 %5154, %146
  %5156 = add nsw i64 %272, %5155
  %5157 = getelementptr inbounds i16, i16* %268, i64 %5156
  %5158 = bitcast i16* %5157 to <32 x i16>*
  store <32 x i16> %5152, <32 x i16>* %5158, align 2, !tbaa !425
  br label %"produce blur_x550"

"produce blur_x550":                              ; preds = %"end for blur_y.s0.x.x.rebased537", %"produce blur_x547"
  %5159 = getelementptr inbounds i16, i16* %read_input, i64 %336
  %5160 = getelementptr inbounds i16, i16* %5159, i64 1
  %5161 = bitcast i16* %5160 to <32 x i16>*
  %5162 = load <32 x i16>, <32 x i16>* %5161, align 2, !tbaa !412
  %5163 = getelementptr inbounds i16, i16* %5159, i64 2
  %5164 = bitcast i16* %5163 to <32 x i16>*
  %5165 = load <32 x i16>, <32 x i16>* %5164, align 4, !tbaa !412
  %5166 = bitcast i16* %5159 to <32 x i16>*
  %5167 = load <32 x i16>, <32 x i16>* %5166, align 64, !tbaa !412
  %5168 = add <32 x i16> %5165, %5162
  %5169 = add <32 x i16> %5168, %5167
  %5170 = shufflevector <32 x i16> %5169, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5171 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5170, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5172 = shufflevector <32 x i16> %5169, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5172, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5174 = shufflevector <16 x i16> %5171, <16 x i16> %5173, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5175 = lshr <32 x i16> %5174, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %5175, <32 x i16>* %1126, align 2, !tbaa !423
  %5176 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %5177 = load <32 x i16>, <32 x i16>* %1345, align 2, !tbaa !423
  %5178 = add <32 x i16> %5176, %5175
  %5179 = add <32 x i16> %5178, %5177
  %5180 = shufflevector <32 x i16> %5179, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5180, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5182 = shufflevector <32 x i16> %5179, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5183 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5182, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5184 = shufflevector <16 x i16> %5181, <16 x i16> %5183, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5185 = lshr <32 x i16> %5184, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5186 = add nsw i64 %1356, 30
  %5187 = mul nsw i64 %5186, %146
  %5188 = getelementptr inbounds i16, i16* %268, i64 %5187
  %5189 = bitcast i16* %5188 to <32 x i16>*
  store <32 x i16> %5185, <32 x i16>* %5189, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased552.preheader", label %"end for blur_y.s0.x.x.rebased553", !prof !406

"for blur_y.s0.x.x.rebased552.preheader":         ; preds = %"produce blur_x550"
  %5190 = sext i32 %t939 to i64
  %5191 = add nsw i64 %5190, 32
  %5192 = add nsw i64 %1476, 32
  %5193 = add nsw i64 %1124, 32
  %5194 = add nsw i64 %1343, 32
  %5195 = sext i32 %a42 to i64
  %5196 = add nsw i64 %5195, 30
  %5197 = mul nsw i64 %5196, %146
  br label %"for blur_y.s0.x.x.rebased552"

"for blur_y.s0.x.x.rebased552":                   ; preds = %"for blur_y.s0.x.x.rebased552.preheader", %"consume blur_x559"
  %indvars.iv2575 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased552.preheader" ], [ %indvars.iv.next2576, %"consume blur_x559" ]
  %5198 = trunc i64 %indvars.iv2575 to i32
  %5199 = shl nsw i32 %5198, 5
  %5200 = icmp sgt i32 %b37, %5199
  br i1 %5200, label %"produce blur_x558", label %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge"

"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased552"
  %.pre2793 = shl nuw nsw i64 %indvars.iv2575, 5
  br label %"consume blur_x559"

"end for blur_y.s0.x.x.rebased553":               ; preds = %"consume blur_x559", %"produce blur_x550"
  br i1 %.not1855, label %"produce blur_x566", label %"produce blur_x563"

"produce blur_x558":                              ; preds = %"for blur_y.s0.x.x.rebased552"
  %t727.s = add nsw i32 %5199, %t1088
  %5201 = sext i32 %t727.s to i64
  %5202 = getelementptr inbounds i16, i16* %read_input, i64 %5201
  %5203 = getelementptr inbounds i16, i16* %5202, i64 33
  %5204 = bitcast i16* %5203 to <32 x i16>*
  %5205 = load <32 x i16>, <32 x i16>* %5204, align 2, !tbaa !412
  %5206 = getelementptr inbounds i16, i16* %5202, i64 34
  %5207 = bitcast i16* %5206 to <32 x i16>*
  %5208 = load <32 x i16>, <32 x i16>* %5207, align 4, !tbaa !412
  %5209 = getelementptr inbounds i16, i16* %5202, i64 32
  %5210 = bitcast i16* %5209 to <32 x i16>*
  %5211 = load <32 x i16>, <32 x i16>* %5210, align 4, !tbaa !412
  %5212 = add <32 x i16> %5208, %5205
  %5213 = add <32 x i16> %5212, %5211
  %5214 = shufflevector <32 x i16> %5213, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5215 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5214, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5216 = shufflevector <32 x i16> %5213, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5216, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5218 = shufflevector <16 x i16> %5215, <16 x i16> %5217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5219 = lshr <32 x i16> %5218, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5220 = shl nuw nsw i64 %indvars.iv2575, 5
  %.idx1871 = add nsw i64 %5191, %5220
  %5221 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1871
  %5222 = bitcast i16* %5221 to <32 x i16>*
  store <32 x i16> %5219, <32 x i16>* %5222, align 2, !tbaa !423
  br label %"consume blur_x559"

"consume blur_x559":                              ; preds = %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge", %"produce blur_x558"
  %.pre-phi2794 = phi i64 [ %.pre2793, %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge" ], [ %5220, %"produce blur_x558" ]
  %.idx1866 = add nsw i64 %5192, %.pre-phi2794
  %5223 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1866
  %5224 = bitcast i16* %5223 to <32 x i16>*
  %5225 = load <32 x i16>, <32 x i16>* %5224, align 2, !tbaa !423
  %.idx1867 = add nsw i64 %5193, %.pre-phi2794
  %5226 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1867
  %5227 = bitcast i16* %5226 to <32 x i16>*
  %5228 = load <32 x i16>, <32 x i16>* %5227, align 2, !tbaa !423
  %.idx1868 = add nsw i64 %5194, %.pre-phi2794
  %5229 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1868
  %5230 = bitcast i16* %5229 to <32 x i16>*
  %5231 = load <32 x i16>, <32 x i16>* %5230, align 2, !tbaa !423
  %5232 = add <32 x i16> %5228, %5225
  %5233 = add <32 x i16> %5232, %5231
  %5234 = shufflevector <32 x i16> %5233, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5235 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5234, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5236 = shufflevector <32 x i16> %5233, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5237 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5236, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5238 = shufflevector <16 x i16> %5235, <16 x i16> %5237, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5239 = lshr <32 x i16> %5238, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5240 = add nuw nsw i64 %.pre-phi2794, 32
  %5241 = add nsw i64 %5240, %269
  %.idx1869 = add i64 %5241, %5197
  %5242 = getelementptr inbounds i16, i16* %268, i64 %.idx1869
  %5243 = bitcast i16* %5242 to <32 x i16>*
  store <32 x i16> %5239, <32 x i16>* %5243, align 2, !tbaa !425
  %indvars.iv.next2576 = add nuw nsw i64 %indvars.iv2575, 1
  %.not1870 = icmp eq i64 %indvars.iv.next2576, %348
  br i1 %.not1870, label %"end for blur_y.s0.x.x.rebased553", label %"for blur_y.s0.x.x.rebased552"

"produce blur_x563":                              ; preds = %"end for blur_y.s0.x.x.rebased553"
  %5244 = getelementptr inbounds i16, i16* %read_input, i64 %337
  %5245 = getelementptr inbounds i16, i16* %5244, i64 1
  %5246 = bitcast i16* %5245 to <32 x i16>*
  %5247 = load <32 x i16>, <32 x i16>* %5246, align 2, !tbaa !412
  %5248 = getelementptr inbounds i16, i16* %5244, i64 2
  %5249 = bitcast i16* %5248 to <32 x i16>*
  %5250 = load <32 x i16>, <32 x i16>* %5249, align 2, !tbaa !412
  %5251 = bitcast i16* %5244 to <32 x i16>*
  %5252 = load <32 x i16>, <32 x i16>* %5251, align 2, !tbaa !412
  %5253 = add <32 x i16> %5250, %5247
  %5254 = add <32 x i16> %5253, %5252
  %5255 = shufflevector <32 x i16> %5254, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5255, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5257 = shufflevector <32 x i16> %5254, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5257, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5259 = shufflevector <16 x i16> %5256, <16 x i16> %5258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5260 = lshr <32 x i16> %5259, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5261 = add nsw i64 %1124, %263
  %5262 = getelementptr inbounds i16, i16* %blur_x, i64 %5261
  %5263 = bitcast i16* %5262 to <32 x i16>*
  store <32 x i16> %5260, <32 x i16>* %5263, align 2, !tbaa !423
  %5264 = add nsw i64 %1476, %263
  %5265 = getelementptr inbounds i16, i16* %blur_x, i64 %5264
  %5266 = bitcast i16* %5265 to <32 x i16>*
  %5267 = load <32 x i16>, <32 x i16>* %5266, align 2, !tbaa !423
  %5268 = add nsw i64 %1343, %263
  %5269 = getelementptr inbounds i16, i16* %blur_x, i64 %5268
  %5270 = bitcast i16* %5269 to <32 x i16>*
  %5271 = load <32 x i16>, <32 x i16>* %5270, align 2, !tbaa !423
  %5272 = add <32 x i16> %5267, %5260
  %5273 = add <32 x i16> %5272, %5271
  %5274 = shufflevector <32 x i16> %5273, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5275 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5274, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5276 = shufflevector <32 x i16> %5273, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5277 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5276, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5278 = shufflevector <16 x i16> %5275, <16 x i16> %5277, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5279 = lshr <32 x i16> %5278, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5280 = sext i32 %a42 to i64
  %5281 = add nsw i64 %5280, 30
  %5282 = mul nsw i64 %5281, %146
  %5283 = add nsw i64 %272, %5282
  %5284 = getelementptr inbounds i16, i16* %268, i64 %5283
  %5285 = bitcast i16* %5284 to <32 x i16>*
  store <32 x i16> %5279, <32 x i16>* %5285, align 2, !tbaa !425
  br label %"produce blur_x566"

"produce blur_x566":                              ; preds = %"end for blur_y.s0.x.x.rebased553", %"produce blur_x563"
  %5286 = getelementptr inbounds i16, i16* %read_input, i64 %338
  %5287 = getelementptr inbounds i16, i16* %5286, i64 1
  %5288 = bitcast i16* %5287 to <32 x i16>*
  %5289 = load <32 x i16>, <32 x i16>* %5288, align 2, !tbaa !412
  %5290 = getelementptr inbounds i16, i16* %5286, i64 2
  %5291 = bitcast i16* %5290 to <32 x i16>*
  %5292 = load <32 x i16>, <32 x i16>* %5291, align 2, !tbaa !412
  %5293 = bitcast i16* %5286 to <32 x i16>*
  %5294 = load <32 x i16>, <32 x i16>* %5293, align 2, !tbaa !412
  %5295 = add <32 x i16> %5292, %5289
  %5296 = add <32 x i16> %5295, %5294
  %5297 = shufflevector <32 x i16> %5296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5298 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5297, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5299 = shufflevector <32 x i16> %5296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5300 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5299, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5301 = shufflevector <16 x i16> %5298, <16 x i16> %5300, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5302 = lshr <32 x i16> %5301, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %5302, <32 x i16>* %1234, align 2, !tbaa !423
  %5303 = load <32 x i16>, <32 x i16>* %1126, align 2, !tbaa !423
  %5304 = load <32 x i16>, <32 x i16>* %1478, align 2, !tbaa !423
  %5305 = add <32 x i16> %5303, %5302
  %5306 = add <32 x i16> %5305, %5304
  %5307 = shufflevector <32 x i16> %5306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5307, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5309 = shufflevector <32 x i16> %5306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5310 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5309, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5311 = shufflevector <16 x i16> %5308, <16 x i16> %5310, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5312 = lshr <32 x i16> %5311, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5313 = add nsw i64 %1356, 31
  %5314 = mul nsw i64 %5313, %146
  %5315 = getelementptr inbounds i16, i16* %268, i64 %5314
  %5316 = bitcast i16* %5315 to <32 x i16>*
  store <32 x i16> %5312, <32 x i16>* %5316, align 2, !tbaa !425
  br i1 %262, label %"for blur_y.s0.x.x.rebased568.preheader", label %"end for blur_y.s0.x.x.rebased569", !prof !406

"for blur_y.s0.x.x.rebased568.preheader":         ; preds = %"produce blur_x566"
  %5317 = sext i32 %t941 to i64
  %5318 = add nsw i64 %5317, 32
  %5319 = add nsw i64 %1124, 32
  %5320 = add nsw i64 %1232, 32
  %5321 = add nsw i64 %1476, 32
  %5322 = sext i32 %a42 to i64
  %5323 = add nsw i64 %5322, 31
  %5324 = mul nsw i64 %5323, %146
  br label %"for blur_y.s0.x.x.rebased568"

"for blur_y.s0.x.x.rebased568":                   ; preds = %"for blur_y.s0.x.x.rebased568.preheader", %"consume blur_x575"
  %indvars.iv2577 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased568.preheader" ], [ %indvars.iv.next2578, %"consume blur_x575" ]
  %5325 = trunc i64 %indvars.iv2577 to i32
  %5326 = shl nsw i32 %5325, 5
  %5327 = icmp sgt i32 %b37, %5326
  br i1 %5327, label %"produce blur_x574", label %"for blur_y.s0.x.x.rebased568.consume blur_x575_crit_edge"

"for blur_y.s0.x.x.rebased568.consume blur_x575_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased568"
  %.pre2795 = shl nuw nsw i64 %indvars.iv2577, 5
  br label %"consume blur_x575"

"end for blur_y.s0.x.x.rebased569":               ; preds = %"consume blur_x575", %"produce blur_x566"
  br i1 %.not1855, label %after_bb576, label %"produce blur_x579"

"produce blur_x574":                              ; preds = %"for blur_y.s0.x.x.rebased568"
  %t732.s = add nsw i32 %5326, %t1093
  %5328 = sext i32 %t732.s to i64
  %5329 = getelementptr inbounds i16, i16* %read_input, i64 %5328
  %5330 = getelementptr inbounds i16, i16* %5329, i64 33
  %5331 = bitcast i16* %5330 to <32 x i16>*
  %5332 = load <32 x i16>, <32 x i16>* %5331, align 2, !tbaa !412
  %5333 = getelementptr inbounds i16, i16* %5329, i64 34
  %5334 = bitcast i16* %5333 to <32 x i16>*
  %5335 = load <32 x i16>, <32 x i16>* %5334, align 2, !tbaa !412
  %5336 = getelementptr inbounds i16, i16* %5329, i64 32
  %5337 = bitcast i16* %5336 to <32 x i16>*
  %5338 = load <32 x i16>, <32 x i16>* %5337, align 2, !tbaa !412
  %5339 = add <32 x i16> %5335, %5332
  %5340 = add <32 x i16> %5339, %5338
  %5341 = shufflevector <32 x i16> %5340, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5341, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5343 = shufflevector <32 x i16> %5340, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5343, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5345 = shufflevector <16 x i16> %5342, <16 x i16> %5344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5346 = lshr <32 x i16> %5345, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5347 = shl nuw nsw i64 %indvars.iv2577, 5
  %.idx1865 = add nsw i64 %5318, %5347
  %5348 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1865
  %5349 = bitcast i16* %5348 to <32 x i16>*
  store <32 x i16> %5346, <32 x i16>* %5349, align 2, !tbaa !423
  br label %"consume blur_x575"

"consume blur_x575":                              ; preds = %"for blur_y.s0.x.x.rebased568.consume blur_x575_crit_edge", %"produce blur_x574"
  %.pre-phi2796 = phi i64 [ %.pre2795, %"for blur_y.s0.x.x.rebased568.consume blur_x575_crit_edge" ], [ %5347, %"produce blur_x574" ]
  %.idx1860 = add nsw i64 %5319, %.pre-phi2796
  %5350 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1860
  %5351 = bitcast i16* %5350 to <32 x i16>*
  %5352 = load <32 x i16>, <32 x i16>* %5351, align 2, !tbaa !423
  %.idx1861 = add nsw i64 %5320, %.pre-phi2796
  %5353 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1861
  %5354 = bitcast i16* %5353 to <32 x i16>*
  %5355 = load <32 x i16>, <32 x i16>* %5354, align 2, !tbaa !423
  %.idx1862 = add nsw i64 %5321, %.pre-phi2796
  %5356 = getelementptr inbounds i16, i16* %blur_x, i64 %.idx1862
  %5357 = bitcast i16* %5356 to <32 x i16>*
  %5358 = load <32 x i16>, <32 x i16>* %5357, align 2, !tbaa !423
  %5359 = add <32 x i16> %5355, %5352
  %5360 = add <32 x i16> %5359, %5358
  %5361 = shufflevector <32 x i16> %5360, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5362 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5361, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5363 = shufflevector <32 x i16> %5360, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5364 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5363, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5365 = shufflevector <16 x i16> %5362, <16 x i16> %5364, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5366 = lshr <32 x i16> %5365, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5367 = add nuw nsw i64 %.pre-phi2796, 32
  %5368 = add nsw i64 %5367, %269
  %.idx1863 = add i64 %5368, %5324
  %5369 = getelementptr inbounds i16, i16* %268, i64 %.idx1863
  %5370 = bitcast i16* %5369 to <32 x i16>*
  store <32 x i16> %5366, <32 x i16>* %5370, align 2, !tbaa !425
  %indvars.iv.next2578 = add nuw nsw i64 %indvars.iv2577, 1
  %.not1864 = icmp eq i64 %indvars.iv.next2578, %348
  br i1 %.not1864, label %"end for blur_y.s0.x.x.rebased569", label %"for blur_y.s0.x.x.rebased568"

after_bb576:                                      ; preds = %"end for blur_y.s0.x.x.rebased569", %"produce blur_x579"
  %5371 = add nuw nsw i32 %blur_y.s0.y.y2475, 1
  %.not1859 = icmp eq i32 %5371, %t884
  br i1 %.not1859, label %"assert succeeded585.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x579":                              ; preds = %"end for blur_y.s0.x.x.rebased569"
  %5372 = getelementptr inbounds i16, i16* %read_input, i64 %339
  %5373 = getelementptr inbounds i16, i16* %5372, i64 1
  %5374 = bitcast i16* %5373 to <32 x i16>*
  %5375 = load <32 x i16>, <32 x i16>* %5374, align 2, !tbaa !412
  %5376 = getelementptr inbounds i16, i16* %5372, i64 2
  %5377 = bitcast i16* %5376 to <32 x i16>*
  %5378 = load <32 x i16>, <32 x i16>* %5377, align 2, !tbaa !412
  %5379 = bitcast i16* %5372 to <32 x i16>*
  %5380 = load <32 x i16>, <32 x i16>* %5379, align 2, !tbaa !412
  %5381 = add <32 x i16> %5378, %5375
  %5382 = add <32 x i16> %5381, %5380
  %5383 = shufflevector <32 x i16> %5382, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5383, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5385 = shufflevector <32 x i16> %5382, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5386 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5385, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5387 = shufflevector <16 x i16> %5384, <16 x i16> %5386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5388 = lshr <32 x i16> %5387, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5389 = add nsw i64 %1232, %263
  %5390 = getelementptr inbounds i16, i16* %blur_x, i64 %5389
  %5391 = bitcast i16* %5390 to <32 x i16>*
  store <32 x i16> %5388, <32 x i16>* %5391, align 2, !tbaa !423
  %5392 = add nsw i64 %1124, %263
  %5393 = getelementptr inbounds i16, i16* %blur_x, i64 %5392
  %5394 = bitcast i16* %5393 to <32 x i16>*
  %5395 = load <32 x i16>, <32 x i16>* %5394, align 2, !tbaa !423
  %5396 = add nsw i64 %1476, %263
  %5397 = getelementptr inbounds i16, i16* %blur_x, i64 %5396
  %5398 = bitcast i16* %5397 to <32 x i16>*
  %5399 = load <32 x i16>, <32 x i16>* %5398, align 2, !tbaa !423
  %5400 = add <32 x i16> %5395, %5388
  %5401 = add <32 x i16> %5400, %5399
  %5402 = shufflevector <32 x i16> %5401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5403 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5402, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5404 = shufflevector <32 x i16> %5401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5405 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5404, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5406 = shufflevector <16 x i16> %5403, <16 x i16> %5405, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5407 = lshr <32 x i16> %5406, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5408 = sext i32 %a42 to i64
  %5409 = add nsw i64 %5408, 31
  %5410 = mul nsw i64 %5409, %146
  %5411 = add nsw i64 %272, %5410
  %5412 = getelementptr inbounds i16, i16* %268, i64 %5411
  %5413 = bitcast i16* %5412 to <32 x i16>*
  store <32 x i16> %5407, <32 x i16>* %5413, align 2, !tbaa !425
  br label %after_bb576

"assert succeeded585.loopexit":                   ; preds = %after_bb576
  %.pre2667 = load i8*, i8** %host.i, align 8, !tbaa !178
  %.pre2668 = load i8*, i8** %host.i2075, align 8, !tbaa !178
  br label %"assert succeeded585"

"assert succeeded585":                            ; preds = %"assert succeeded585.loopexit", %"produce blur_y", %_halide_buffer_is_bounds_query.exit2122
  %5414 = phi i8* [ %91, %_halide_buffer_is_bounds_query.exit2122 ], [ %91, %"produce blur_y" ], [ %.pre2668, %"assert succeeded585.loopexit" ]
  %5415 = phi i8* [ %88, %_halide_buffer_is_bounds_query.exit2122 ], [ %88, %"produce blur_y" ], [ %.pre2667, %"assert succeeded585.loopexit" ]
  %.22339 = phi i8* [ null, %_halide_buffer_is_bounds_query.exit2122 ], [ null, %"produce blur_y" ], [ %260, %"assert succeeded585.loopexit" ]
  %.2 = phi i8* [ null, %_halide_buffer_is_bounds_query.exit2122 ], [ null, %"produce blur_y" ], [ %237, %"assert succeeded585.loopexit" ]
  %5416 = load i8, i8* %code.i.i, align 2, !tbaa !314
  %conv.i.i2165 = zext i8 %5416 to i32
  %5417 = load i8, i8* %bits.i.i, align 1, !tbaa !141
  %conv3.i.i2167 = zext i8 %5417 to i32
  %shl.i.i2168 = shl nuw nsw i32 %conv3.i.i2167, 8
  %or.i.i2169 = or i32 %shl.i.i2168, %conv.i.i2165
  %5418 = load i16, i16* %lanes.i.i, align 2, !tbaa !315
  %conv4.i.i2171 = zext i16 %5418 to i32
  %shl5.i.i2172 = shl nuw i32 %conv4.i.i2171, 16
  %or6.i.i2173 = or i32 %or.i.i2169, %shl5.i.i2172
  %5419 = load i64, i64* %flags.i.i.i, align 8, !tbaa !317
  %5420 = load i32, i32* %dimensions.i, align 4, !tbaa !180
  %5421 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !181
  %min.i2179 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5421, i64 0, i32 0
  %5422 = load i32, i32* %min.i2179, align 4, !tbaa !186
  %extent.i2181 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5421, i64 0, i32 1
  %5423 = load i32, i32* %extent.i2181, align 4, !tbaa !183
  %stride.i2183 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5421, i64 0, i32 2
  %5424 = load i32, i32* %stride.i2183, align 4, !tbaa !187
  %min.i2185 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5421, i64 1, i32 0
  %5425 = load i32, i32* %min.i2185, align 4, !tbaa !186
  %extent.i2187 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5421, i64 1, i32 1
  %5426 = load i32, i32* %extent.i2187, align 4, !tbaa !183
  %stride.i2189 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5421, i64 1, i32 2
  %5427 = load i32, i32* %stride.i2189, align 4, !tbaa !187
  %5428 = load i8, i8* %code.i.i2076, align 2, !tbaa !314
  %conv.i.i2192 = zext i8 %5428 to i32
  %5429 = load i8, i8* %bits.i.i2078, align 1, !tbaa !141
  %conv3.i.i2194 = zext i8 %5429 to i32
  %shl.i.i2195 = shl nuw nsw i32 %conv3.i.i2194, 8
  %or.i.i2196 = or i32 %shl.i.i2195, %conv.i.i2192
  %5430 = load i16, i16* %lanes.i.i2082, align 2, !tbaa !315
  %conv4.i.i2198 = zext i16 %5430 to i32
  %shl5.i.i2199 = shl nuw i32 %conv4.i.i2198, 16
  %or6.i.i2200 = or i32 %or.i.i2196, %shl5.i.i2199
  %5431 = load i64, i64* %flags.i.i.i2086, align 8, !tbaa !317
  %5432 = load i32, i32* %dimensions.i2089, align 4, !tbaa !180
  %5433 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2090, align 8, !tbaa !181
  %min.i2206 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5433, i64 0, i32 0
  %5434 = load i32, i32* %min.i2206, align 4, !tbaa !186
  %extent.i2208 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5433, i64 0, i32 1
  %5435 = load i32, i32* %extent.i2208, align 4, !tbaa !183
  %stride.i2210 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5433, i64 0, i32 2
  %5436 = load i32, i32* %stride.i2210, align 4, !tbaa !187
  %min.i2212 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5433, i64 1, i32 0
  %5437 = load i32, i32* %min.i2212, align 4, !tbaa !186
  %extent.i2214 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5433, i64 1, i32 1
  %5438 = load i32, i32* %extent.i2214, align 4, !tbaa !183
  %stride.i2216 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5433, i64 1, i32 2
  %5439 = load i32, i32* %stride.i2216, align 4, !tbaa !187
  %5440 = icmp slt i32 %5423, 32
  %t1098602 = select i1 %5440, i32 %5423, i32 32
  %b123 = add nsw i32 %5435, %5434
  %a122 = add nsw i32 %5423, 2
  %5441 = icmp sgt i32 %5423, 32
  %5442 = select i1 %5441, i32 %5423, i32 32
  %5443 = add nuw nsw i32 %5442, 1
  %5444 = and i32 %5443, 2147483616
  %b124 = add nsw i32 %5444, %t1098602
  %5445 = icmp sgt i32 %b124, %a122
  %5446 = select i1 %5445, i32 %a122, i32 %b124
  %a121 = add nsw i32 %5446, %5422
  %5447 = icmp sgt i32 %b123, %a121
  %a120 = select i1 %5447, i32 %a121, i32 %b123
  %b122 = add nsw i32 %5434, 1
  %5448 = icmp sgt i32 %a120, %b122
  %5449 = select i1 %5448, i32 %a120, i32 %b122
  %a125 = add nsw i32 %t1098602, %5422
  %b127 = add nsw i32 %b123, 31
  %5450 = icmp sgt i32 %b127, %a125
  %5451 = select i1 %5450, i32 %a125, i32 %b127
  %a124 = add nsw i32 %5451, -32
  %5452 = icmp sgt i32 %a124, %5434
  %5453 = select i1 %5452, i32 %a124, i32 %5434
  %input.extent.0.required603 = sub nsw i32 %5449, %5453
  %b132 = add nsw i32 %5438, %5437
  %5454 = add nsw i32 %5426, %5425
  %a130 = add nsw i32 %5454, 2
  %5455 = icmp sgt i32 %b132, %a130
  %a129 = select i1 %5455, i32 %a130, i32 %b132
  %b131 = add nsw i32 %5437, 1
  %5456 = icmp sgt i32 %a129, %b131
  %5457 = select i1 %5456, i32 %a129, i32 %b131
  %5458 = icmp slt i32 %5426, 32
  %5459 = select i1 %5458, i32 %5426, i32 32
  %a132 = add nsw i32 %5459, %5425
  %b134 = add nsw i32 %b132, 31
  %5460 = icmp sgt i32 %b134, %a132
  %5461 = select i1 %5460, i32 %a132, i32 %b134
  %a131 = add nsw i32 %5461, -32
  %5462 = icmp sgt i32 %a131, %5437
  %5463 = select i1 %5462, i32 %a131, i32 %5437
  %input.extent.1.required605 = sub nsw i32 %5457, %5463
  %cmp.i2218 = icmp eq i8* %5415, null
  br i1 %cmp.i2218, label %_halide_buffer_is_bounds_query.exit2222, label %after_bb607

_halide_buffer_is_bounds_query.exit2222:          ; preds = %"assert succeeded585"
  %device.i2219 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 0
  %5464 = load i64, i64* %device.i2219, align 8, !tbaa !247
  %cmp1.i2220 = icmp eq i64 %5464, 0
  br i1 %cmp1.i2220, label %_halide_buffer_init.exit2249, label %after_bb607

after_bb607:                                      ; preds = %"assert succeeded585", %_halide_buffer_is_bounds_query.exit2222, %_halide_buffer_init.exit2249
  %5465 = phi i8* [ %5414, %"assert succeeded585" ], [ %5414, %_halide_buffer_is_bounds_query.exit2222 ], [ %.pre2669, %_halide_buffer_init.exit2249 ]
  %cmp.i2224 = icmp eq i8* %5465, null
  br i1 %cmp.i2224, label %_halide_buffer_is_bounds_query.exit2228, label %after_bb611

_halide_buffer_is_bounds_query.exit2228:          ; preds = %after_bb607
  %device.i2225 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 0
  %5466 = load i64, i64* %device.i2225, align 8, !tbaa !247
  %cmp1.i2226 = icmp eq i64 %5466, 0
  br i1 %cmp1.i2226, label %_halide_buffer_init.exit2282, label %after_bb611

_halide_buffer_init.exit2249:                     ; preds = %_halide_buffer_is_bounds_query.exit2222
  %5467 = add nsw i32 %a125, -32
  %5468 = add nsw i32 %a132, -32
  %5469 = icmp sgt i32 %5426, 32
  %5470 = select i1 %5469, i32 %5426, i32 32
  %5471 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 0
  store i32 %5467, i32* %5471, align 4
  %5472 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 1
  store i32 %5442, i32* %5472, align 4
  %5473 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 2
  store i32 1, i32* %5473, align 4
  %5474 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 3
  store i32 0, i32* %5474, align 4
  %5475 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 4
  store i32 %5468, i32* %5475, align 4
  %5476 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 5
  store i32 %5470, i32* %5476, align 4
  %5477 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 6
  store i32 %5442, i32* %5477, align 4
  %5478 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 7
  store i32 0, i32* %5478, align 4
  %5479 = bitcast %struct.halide_buffer_t* %blur_y.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5479, i8 0, i64 24, i1 false)
  store i8 1, i8* %code.i.i, align 8, !tbaa !400
  store i8 16, i8* %bits.i.i, align 1, !tbaa !401
  store i16 1, i16* %lanes.i.i, align 2, !tbaa !402
  store i32 2, i32* %dimensions.i, align 4, !tbaa !180
  %5480 = bitcast %struct.halide_dimension_t* %5421 to i8*
  %5481 = bitcast [8 x i32]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %5480, i8* noundef nonnull align 4 dereferenceable(16) %5481, i64 16, i1 false) #11, !tbaa.struct !182
  %.pre.i2241 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !181
  %arrayidx.i2242 = getelementptr inbounds [8 x i32], [8 x i32]* %1, i64 0, i64 4
  %arrayidx12.i2243 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i2241, i64 1
  %5482 = bitcast %struct.halide_dimension_t* %arrayidx12.i2243 to i8*
  %5483 = bitcast i32* %arrayidx.i2242 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %5482, i8* noundef nonnull align 4 dereferenceable(16) %5483, i64 16, i1 false) #11, !tbaa.struct !182
  store i64 0, i64* %flags.i.i.i, align 8, !tbaa !317
  %.pre2669 = load i8*, i8** %host.i2075, align 8, !tbaa !178
  br label %after_bb607

after_bb611:                                      ; preds = %after_bb607, %_halide_buffer_is_bounds_query.exit2228, %_halide_buffer_init.exit2282
  %5484 = load i8*, i8** %host.i, align 8, !tbaa !178
  %cmp.i2251 = icmp eq i8* %5484, null
  br i1 %cmp.i2251, label %land.rhs.i2254, label %_halide_buffer_is_bounds_query.exit2255

land.rhs.i2254:                                   ; preds = %after_bb611
  %device.i2252 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 0
  %5485 = load i64, i64* %device.i2252, align 8, !tbaa !247
  %cmp1.i2253 = icmp eq i64 %5485, 0
  br label %_halide_buffer_is_bounds_query.exit2255

_halide_buffer_is_bounds_query.exit2255:          ; preds = %after_bb611, %land.rhs.i2254
  %5486 = phi i1 [ false, %after_bb611 ], [ %cmp1.i2253, %land.rhs.i2254 ]
  %5487 = load i8*, i8** %host.i2075, align 8, !tbaa !178
  %cmp.i2257 = icmp eq i8* %5487, null
  br i1 %cmp.i2257, label %land.rhs.i2260, label %_halide_buffer_is_bounds_query.exit2261

land.rhs.i2260:                                   ; preds = %_halide_buffer_is_bounds_query.exit2255
  %device.i2258 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 0
  %5488 = load i64, i64* %device.i2258, align 8, !tbaa !247
  %cmp1.i2259 = icmp eq i64 %5488, 0
  br label %_halide_buffer_is_bounds_query.exit2261

_halide_buffer_is_bounds_query.exit2261:          ; preds = %_halide_buffer_is_bounds_query.exit2255, %land.rhs.i2260
  %5489 = phi i1 [ false, %_halide_buffer_is_bounds_query.exit2255 ], [ %cmp1.i2259, %land.rhs.i2260 ]
  %5490 = or i1 %5486, %5489
  br i1 %5490, label %destructor_block, label %then_bb615

_halide_buffer_init.exit2282:                     ; preds = %_halide_buffer_is_bounds_query.exit2228
  %5491 = bitcast %struct.halide_dimension_t** %dim.i2090 to i8**
  %5492 = load i8*, i8** %5491, align 8, !tbaa !181
  %5493 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 0
  store i32 %5453, i32* %5493, align 4
  %5494 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 1
  store i32 %input.extent.0.required603, i32* %5494, align 4
  %5495 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 2
  store i32 1, i32* %5495, align 4
  %5496 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 3
  store i32 0, i32* %5496, align 4
  %5497 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 4
  store i32 %5463, i32* %5497, align 4
  %5498 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 5
  store i32 %input.extent.1.required605, i32* %5498, align 4
  %5499 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 6
  store i32 %input.extent.0.required603, i32* %5499, align 4
  %5500 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 7
  store i32 0, i32* %5500, align 4
  %5501 = bitcast %struct.halide_buffer_t* %input.buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5501, i8 0, i64 24, i1 false)
  store i8 1, i8* %code.i.i2076, align 8, !tbaa !400
  store i8 16, i8* %bits.i.i2078, align 1, !tbaa !401
  store i16 1, i16* %lanes.i.i2082, align 2, !tbaa !402
  store i32 2, i32* %dimensions.i2089, align 4, !tbaa !180
  %5502 = bitcast [8 x i32]* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %5492, i8* noundef nonnull align 4 dereferenceable(16) %5502, i64 16, i1 false) #11, !tbaa.struct !182
  %.pre.i2274 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2090, align 8, !tbaa !181
  %arrayidx.i2275 = getelementptr inbounds [8 x i32], [8 x i32]* %0, i64 0, i64 4
  %arrayidx12.i2276 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre.i2274, i64 1
  %5503 = bitcast %struct.halide_dimension_t* %arrayidx12.i2276 to i8*
  %5504 = bitcast i32* %arrayidx.i2275 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %5503, i8* noundef nonnull align 4 dereferenceable(16) %5504, i64 16, i1 false) #11, !tbaa.struct !182
  store i64 0, i64* %flags.i.i.i2086, align 8, !tbaa !317
  br label %after_bb611

then_bb615:                                       ; preds = %_halide_buffer_is_bounds_query.exit2261
  %5505 = icmp ne i32 %or6.i.i2173, 69633
  %5506 = zext i1 %5505 to i64
  %.not1638 = icmp eq i32 %5420, 2
  %.not1639 = icmp eq i32 %or6.i.i2200, 69633
  %5507 = select i1 %.not1639, i64 0, i64 4
  %.not1640 = icmp eq i32 %5432, 2
  %5508 = select i1 %.not1640, i64 0, i64 8
  %5509 = select i1 %5440, i64 16, i64 0
  %5510 = select i1 %5458, i64 32, i64 0
  %5511 = icmp sgt i32 %5449, %b123
  %5512 = select i1 %5511, i64 64, i64 0
  %5513 = lshr i32 %5435, 24
  %5514 = and i32 %5513, 128
  %5515 = zext i32 %5514 to i64
  %5516 = icmp sgt i32 %5457, %b132
  %5517 = select i1 %5516, i64 256, i64 0
  %5518 = lshr i32 %5438, 22
  %5519 = and i32 %5518, 512
  %5520 = zext i32 %5519 to i64
  %.not1641 = icmp eq i32 %5424, 1
  %5521 = select i1 %.not1641, i64 0, i64 1024
  %.not1642 = icmp eq i32 %5436, 1
  %5522 = select i1 %.not1642, i64 0, i64 2048
  %5523 = select i1 %.not1638, i64 -9223372036854775808, i64 -9223372036854775806
  %5524 = or i64 %5523, %5506
  %5525 = or i64 %5524, %5509
  %5526 = or i64 %5525, %5521
  %5527 = or i64 %5526, %5510
  %5528 = or i64 %5527, %5508
  %5529 = or i64 %5528, %5507
  %5530 = or i64 %5529, %5515
  %5531 = or i64 %5530, %5522
  %5532 = or i64 %5531, %5520
  %5533 = or i64 %5532, %5512
  %5534 = or i64 %5533, %5517
  %5535 = call i64 @llvm.cttz.i64(i64 %5534, i1 true), !range !403
  %5536 = trunc i64 %5535 to i32
  switch i32 %5536, label %no_errors_bb617 [
    i32 0, label %assert_failed618
    i32 1, label %assert_failed619
    i32 2, label %assert_failed620
    i32 3, label %assert_failed621
    i32 4, label %assert_failed622
    i32 5, label %assert_failed624
    i32 6, label %assert_failed626
    i32 7, label %assert_failed627
    i32 8, label %assert_failed628
    i32 9, label %assert_failed629
    i32 10, label %assert_failed630
    i32 11, label %assert_failed631
  ], !prof !404

no_errors_bb617:                                  ; preds = %then_bb615
  %5537 = sext i32 %5426 to i64
  %5538 = sext i32 %5423 to i64
  %blur_y.total_extent.1632 = mul nsw i64 %5537, %5538
  %5539 = sext i32 %5438 to i64
  %5540 = sext i32 %5435 to i64
  %input.total_extent.1633 = mul nsw i64 %5539, %5540
  %a203.lobit = lshr i32 %5423, 31
  %5541 = zext i32 %a203.lobit to i64
  %5542 = sext i32 %5427 to i64
  %x8 = mul nsw i64 %5542, %5537
  %5543 = call i64 @llvm.abs.i64(i64 %x8, i1 true)
  %5544 = icmp ugt i64 %5543, 2147483647
  %5545 = select i1 %5544, i64 2, i64 0
  %5546 = icmp sgt i64 %blur_y.total_extent.1632, 2147483647
  %5547 = select i1 %5546, i64 4, i64 0
  %5548 = lshr i32 %5435, 28
  %5549 = and i32 %5548, 8
  %5550 = zext i32 %5549 to i64
  %5551 = sext i32 %5439 to i64
  %x9 = mul nsw i64 %5551, %5539
  %5552 = call i64 @llvm.abs.i64(i64 %x9, i1 true)
  %5553 = icmp ugt i64 %5552, 2147483647
  %5554 = select i1 %5553, i64 16, i64 0
  %5555 = icmp sgt i64 %input.total_extent.1633, 2147483647
  %5556 = select i1 %5555, i64 32, i64 0
  %and.i.i.i2175 = shl i64 %5419, 5
  %5557 = and i64 %and.i.i.i2175, 64
  %and.i.i.i2202 = shl i64 %5431, 6
  %5558 = and i64 %and.i.i.i2202, 128
  %5559 = icmp eq i8* %5414, null
  %5560 = select i1 %5559, i64 512, i64 0
  %5561 = select i1 %cmp.i2218, i64 -9223372036854775552, i64 -9223372036854775808
  %5562 = or i64 %5561, %5557
  %5563 = or i64 %5562, %5541
  %5564 = or i64 %5563, %5547
  %5565 = or i64 %5564, %5560
  %5566 = or i64 %5565, %5545
  %5567 = or i64 %5566, %5558
  %5568 = or i64 %5567, %5550
  %5569 = or i64 %5568, %5556
  %5570 = or i64 %5569, %5554
  %5571 = call i64 @llvm.cttz.i64(i64 %5570, i1 true), !range !403
  %5572 = trunc i64 %5571 to i32
  switch i32 %5572, label %"produce blur_y645" [
    i32 0, label %assert_failed635
    i32 1, label %assert_failed636
    i32 2, label %assert_failed637
    i32 3, label %assert_failed638
    i32 4, label %assert_failed639
    i32 5, label %assert_failed640
    i32 6, label %assert_failed641
    i32 7, label %assert_failed642
    i32 8, label %assert_failed643
    i32 9, label %assert_failed644
  ], !prof !405

assert_failed618:                                 ; preds = %then_bb615
  %5573 = call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 %or6.i.i2173, i32 69633) #11
  br label %common.ret

assert_failed619:                                 ; preds = %then_bb615
  %5574 = call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 %5420, i32 2) #11
  br label %common.ret

assert_failed620:                                 ; preds = %then_bb615
  %5575 = call i32 @halide_error_bad_type(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 %or6.i.i2200, i32 69633) #11
  br label %common.ret

assert_failed621:                                 ; preds = %then_bb615
  %5576 = call i32 @halide_error_bad_dimensions(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 %5432, i32 2) #11
  br label %common.ret

assert_failed622:                                 ; preds = %then_bb615
  %5577 = add nsw i32 %a125, -32
  %t1102623 = add i32 %5423, -1
  %5578 = add i32 %t1102623, %5422
  %5579 = call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 0, i32 %5577, i32 %5578, i32 %5422, i32 %5578) #11
  br label %common.ret

assert_failed624:                                 ; preds = %then_bb615
  %5580 = add nsw i32 %a132, -32
  %5581 = add nsw i32 %5454, -1
  %5582 = call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0), i32 1, i32 %5580, i32 %5581, i32 %5425, i32 %5581) #11
  br label %common.ret

assert_failed626:                                 ; preds = %then_bb615
  %5583 = add nsw i32 %5449, -1
  %5584 = add nsw i32 %b123, -1
  %5585 = call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 0, i32 %5453, i32 %5583, i32 %5434, i32 %5584) #11
  br label %common.ret

assert_failed627:                                 ; preds = %then_bb615
  %5586 = call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 0, i32 %5435) #11
  br label %common.ret

assert_failed628:                                 ; preds = %then_bb615
  %5587 = add nsw i32 %5457, -1
  %5588 = add nsw i32 %b132, -1
  %5589 = call i32 @halide_error_access_out_of_bounds(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 1, i32 %5463, i32 %5587, i32 %5437, i32 %5588) #11
  br label %common.ret

assert_failed629:                                 ; preds = %then_bb615
  %5590 = call i32 @halide_error_buffer_extents_negative(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0), i32 1, i32 %5438) #11
  br label %common.ret

assert_failed630:                                 ; preds = %then_bb615
  %5591 = call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.205, i64 0, i64 0), i32 %5424, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #11
  br label %common.ret

assert_failed631:                                 ; preds = %then_bb615
  %5592 = call i32 @halide_error_constraint_violated(i8* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.207, i64 0, i64 0), i32 %5436, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.206, i64 0, i64 0), i32 1) #11
  br label %common.ret

assert_failed635:                                 ; preds = %no_errors_bb617
  %5593 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0), i64 %5538, i64 2147483647) #11
  br label %common.ret

assert_failed636:                                 ; preds = %no_errors_bb617
  %5594 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0), i64 %5543, i64 2147483647) #11
  br label %common.ret

assert_failed637:                                 ; preds = %no_errors_bb617
  %5595 = call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i64 0, i64 0), i64 %blur_y.total_extent.1632, i64 2147483647) #11
  br label %common.ret

assert_failed638:                                 ; preds = %no_errors_bb617
  %5596 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0), i64 %5540, i64 2147483647) #11
  br label %common.ret

assert_failed639:                                 ; preds = %no_errors_bb617
  %5597 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0), i64 %5552, i64 2147483647) #11
  br label %common.ret

assert_failed640:                                 ; preds = %no_errors_bb617
  %5598 = call i32 @halide_error_buffer_extents_too_large(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i64 0, i64 0), i64 %input.total_extent.1633, i64 2147483647) #11
  br label %common.ret

assert_failed641:                                 ; preds = %no_errors_bb617
  %5599 = call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0)) #11
  br label %common.ret

assert_failed642:                                 ; preds = %no_errors_bb617
  %5600 = call i32 @halide_error_device_dirty_with_no_device_support(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0)) #11
  br label %common.ret

assert_failed643:                                 ; preds = %no_errors_bb617
  %5601 = call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @str.203, i64 0, i64 0)) #11
  br label %common.ret

assert_failed644:                                 ; preds = %no_errors_bb617
  %5602 = call i32 @halide_error_host_is_null(i8* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.204, i64 0, i64 0)) #11
  br label %common.ret

"produce blur_y645":                              ; preds = %no_errors_bb617
  %t903647 = mul nsw i32 %5427, %5425
  %b239 = and i32 %5423, -32
  %b153 = add nsw i32 %5423, 33
  %b145 = ashr i32 %b153, 5
  %b156 = add nsw i32 %5423, -32
  %5603 = sub i32 31, %5422
  %5604 = add i32 %5603, %5434
  %a144 = ashr i32 %5604, 5
  %5605 = icmp sgt i32 %a144, 0
  %a143 = select i1 %5605, i32 %a144, i32 0
  %5606 = icmp sgt i32 %b145, %a143
  %b152 = select i1 %5606, i32 %a143, i32 %b145
  %b154 = sub nsw i32 %b123, %5422
  %5607 = add nsw i32 %5423, -1
  %5608 = and i32 %5607, -32
  %a145 = select i1 %5441, i32 %5608, i32 %b156
  %5609 = icmp sgt i32 %a145, %b156
  %5610 = select i1 %5609, i32 %a145, i32 %b156
  %5611 = add nsw i32 %5442, -1
  %5612 = and i32 %5611, -32
  %b151 = add nsw i32 %5610, %5612
  %a148 = add nsw i32 %b151, 32
  %5613 = icmp sgt i32 %5423, %a148
  %a147 = select i1 %5613, i32 %a148, i32 %5423
  %5614 = icmp sgt i32 %b151, %b156
  %5615 = select i1 %5614, i32 %b156, i32 %b151
  %b149 = add nsw i32 %5615, 33
  %5616 = icmp sgt i32 %a147, %b149
  %a146 = select i1 %5616, i32 %a147, i32 %b149
  %b148 = add nsw i32 %5423, 1
  %5617 = icmp sgt i32 %a146, %b148
  %5618 = select i1 %5617, i32 %a146, i32 %b148
  %a159 = add nsw i32 %5618, 1
  %5619 = and i32 %5423, 31
  %.not1643 = icmp eq i32 %5619, 0
  %a153 = add nsw i32 %b154, 29
  %5620 = icmp sgt i32 %5423, %a153
  %5621 = select i1 %5620, i32 %a153, i32 %5423
  %a152 = add nsw i32 %5621, 2
  %5622 = icmp sgt i32 %b154, %a152
  %a151 = select i1 %5622, i32 %a152, i32 %b154
  %5623 = icmp sgt i32 %b153, %a151
  %5624 = select i1 %5623, i32 %a151, i32 %b153
  %a150 = ashr i32 %5624, 5
  %5625 = icmp sgt i32 %a150, %b152
  %t892651 = select i1 %5625, i32 %a150, i32 %b152
  %5626 = icmp sgt i32 %b156, %b239
  %a237 = select i1 %5626, i32 %b239, i32 %b156
  %5627 = add nsw i32 %5426, 31
  %t884652 = ashr i32 %5627, 5
  %5628 = icmp sgt i32 %5426, 0
  br i1 %5628, label %"for blur_y.s0.y.y653.preheader", label %destructor_block, !prof !406

"for blur_y.s0.y.y653.preheader":                 ; preds = %"produce blur_y645"
  %b157 = add nsw i32 %5426, -32
  %.inv = icmp slt i32 %5618, 0
  %5629 = select i1 %.inv, i32 0, i32 %a159
  %t1108 = zext i32 %5629 to i64
  %5630 = mul nuw nsw i64 %t1108, 68
  %5631 = icmp ult i64 %5630, 2147483648
  %5632 = add nuw nsw i64 %5630, 6
  %5633 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %5634 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %5635 = sub i32 %5425, %5437
  %b171 = add nsw i32 %5438, -1
  %5636 = icmp sgt i32 %5423, -2
  %b172 = add nsw i32 %5423, -30
  %5637 = add nsw i32 %b123, -1
  %5638 = insertelement <32 x i32> undef, i32 %5637, i32 0
  %5639 = shufflevector <32 x i32> %5638, <32 x i32> undef, <16 x i32> zeroinitializer
  %5640 = insertelement <32 x i32> undef, i32 %5434, i32 0
  %5641 = shufflevector <32 x i32> %5640, <32 x i32> undef, <16 x i32> zeroinitializer
  %5642 = bitcast i8* %5414 to i16*
  %t922678 = sub nsw i32 %b145, %t892651
  %5643 = icmp sgt i32 %b152, 0
  %5644 = sext i32 %5437 to i64
  %5645 = sext i32 %5425 to i64
  %5646 = sext i32 %a159 to i64
  %t928688 = sub nsw i32 %t892651, %b152
  %5647 = icmp sgt i32 %t928688, 0
  %5648 = icmp sgt i32 %t922678, 0
  %5649 = sub nsw i32 %5425, %b132
  %5650 = sext i32 %b132 to i64
  %5651 = icmp sgt i32 %5423, 0
  %5652 = select i1 %5651, i32 %5423, i32 0
  %t1109 = zext i32 %5652 to i64
  %5653 = icmp ult i32 %5652, 268435456
  %5654 = shl nuw nsw i64 %t1109, 3
  %5655 = or i64 %5654, 6
  %5656 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  %5657 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %5658 = icmp sgt i32 %5423, 63
  %5659 = sext i32 %a237 to i64
  %5660 = shl nsw i32 %a159, 1
  %a159.neg = xor i32 %5618, -1
  %5661 = add i32 %a237, %a159.neg
  %t575740 = add i32 %5661, %5660
  %5662 = sext i32 %t575740 to i64
  %5663 = shl nsw i64 %5646, 1
  %5664 = bitcast i8* %5415 to i16*
  %t944746 = sub nsw i32 0, %t903647
  %5665 = sext i32 %t944746 to i64
  %t785761 = add nsw i32 %5660, %a237
  %5666 = sext i32 %t785761 to i64
  %5667 = sext i32 %t903647 to i64
  %5668 = sub nsw i64 %5659, %5667
  %5669 = mul nsw i64 %5646, 3
  %t946769 = mul nsw i32 %a159, 3
  %5670 = add i32 %a159, %a237
  %t584785 = add i32 %5670, %5660
  %5671 = sext i32 %t584785 to i64
  %5672 = shl nsw i64 %5646, 2
  %5673 = shl nsw i32 %a159, 2
  %t589809 = add nsw i32 %5673, %a237
  %5674 = sext i32 %t589809 to i64
  %5675 = mul nsw i64 %5646, 5
  %t956817 = mul nsw i32 %a159, 5
  %t594833 = add nsw i32 %t956817, %a237
  %5676 = sext i32 %t594833 to i64
  %5677 = mul nsw i64 %5646, 6
  %5678 = mul nsw i32 %a159, 6
  %t599856 = add nsw i32 %5678, %a237
  %5679 = sext i32 %t599856 to i64
  %5680 = mul nsw i64 %5646, 7
  %t965864 = mul nsw i32 %a159, 7
  %t604880 = add nsw i32 %t965864, %a237
  %5681 = sext i32 %t604880 to i64
  %5682 = shl nsw i64 %5646, 3
  %t970888 = shl nsw i32 %a159, 3
  %t609904 = add nsw i32 %t970888, %a237
  %5683 = sext i32 %t609904 to i64
  %5684 = mul nsw i64 %5646, 9
  %t975912 = mul nsw i32 %a159, 9
  %t614928 = add nsw i32 %t975912, %a237
  %5685 = sext i32 %t614928 to i64
  %5686 = mul nsw i64 %5646, 10
  %5687 = mul nsw i32 %a159, 10
  %t619951 = add nsw i32 %5687, %a237
  %5688 = sext i32 %t619951 to i64
  %5689 = mul nsw i64 %5646, 11
  %t984959 = mul nsw i32 %a159, 11
  %t624975 = add nsw i32 %t984959, %a237
  %5690 = sext i32 %t624975 to i64
  %5691 = mul nsw i64 %5646, 12
  %t989983 = mul nsw i32 %a159, 12
  %t629999 = add nsw i32 %t989983, %a237
  %5692 = sext i32 %t629999 to i64
  %5693 = mul nsw i64 %5646, 13
  %t9941007 = mul nsw i32 %a159, 13
  %t6341023 = add nsw i32 %t9941007, %a237
  %5694 = sext i32 %t6341023 to i64
  %5695 = mul nsw i64 %5646, 14
  %t9991031 = mul nsw i32 %a159, 14
  %t6391047 = add nsw i32 %t9991031, %a237
  %5696 = sext i32 %t6391047 to i64
  %5697 = mul nsw i64 %5646, 15
  %t10041055 = mul nsw i32 %a159, 15
  %t6441071 = add nsw i32 %t10041055, %a237
  %5698 = sext i32 %t6441071 to i64
  %5699 = shl nsw i64 %5646, 4
  %t10091079 = shl nsw i32 %a159, 4
  %t6491095 = add nsw i32 %t10091079, %a237
  %5700 = sext i32 %t6491095 to i64
  %5701 = mul nsw i64 %5646, 17
  %t10141103 = mul nsw i32 %a159, 17
  %t6541119 = add nsw i32 %t10141103, %a237
  %5702 = sext i32 %t6541119 to i64
  %5703 = mul nsw i64 %5646, 18
  %5704 = mul nsw i32 %a159, 18
  %t6591142 = add nsw i32 %5704, %a237
  %5705 = sext i32 %t6591142 to i64
  %5706 = mul nsw i64 %5646, 19
  %t10231150 = mul nsw i32 %a159, 19
  %t6641166 = add nsw i32 %t10231150, %a237
  %5707 = sext i32 %t6641166 to i64
  %5708 = mul nsw i64 %5646, 20
  %t10281174 = mul nsw i32 %a159, 20
  %t6691190 = add nsw i32 %t10281174, %a237
  %5709 = sext i32 %t6691190 to i64
  %5710 = mul nsw i64 %5646, 21
  %t10331198 = mul nsw i32 %a159, 21
  %t6741214 = add nsw i32 %t10331198, %a237
  %5711 = sext i32 %t6741214 to i64
  %5712 = mul nsw i64 %5646, 22
  %t10381222 = mul nsw i32 %a159, 22
  %t6791238 = add nsw i32 %t10381222, %a237
  %5713 = sext i32 %t6791238 to i64
  %5714 = mul nsw i64 %5646, 23
  %t10431246 = mul nsw i32 %a159, 23
  %t6841262 = add nsw i32 %t10431246, %a237
  %5715 = sext i32 %t6841262 to i64
  %5716 = mul nsw i64 %5646, 24
  %t10481270 = mul nsw i32 %a159, 24
  %t6891286 = add nsw i32 %t10481270, %a237
  %5717 = sext i32 %t6891286 to i64
  %5718 = mul nsw i64 %5646, 25
  %t10531294 = mul nsw i32 %a159, 25
  %t6941310 = add nsw i32 %t10531294, %a237
  %5719 = sext i32 %t6941310 to i64
  %5720 = mul nsw i64 %5646, 26
  %t10581318 = mul nsw i32 %a159, 26
  %t6991334 = add nsw i32 %t10581318, %a237
  %5721 = sext i32 %t6991334 to i64
  %5722 = mul nsw i64 %5646, 27
  %t10631342 = mul nsw i32 %a159, 27
  %t7041358 = add nsw i32 %t10631342, %a237
  %5723 = sext i32 %t7041358 to i64
  %5724 = mul nsw i64 %5646, 28
  %t10681366 = mul nsw i32 %a159, 28
  %t7091382 = add nsw i32 %t10681366, %a237
  %5725 = sext i32 %t7091382 to i64
  %5726 = mul nsw i64 %5646, 29
  %t10731390 = mul nsw i32 %a159, 29
  %t7141406 = add nsw i32 %t10731390, %a237
  %5727 = sext i32 %t7141406 to i64
  %5728 = mul nsw i64 %5646, 30
  %t10781414 = mul nsw i32 %a159, 30
  %t7191430 = add nsw i32 %t10781414, %a237
  %5729 = sext i32 %t7191430 to i64
  %5730 = mul nsw i64 %5646, 31
  %t10831438 = mul nsw i32 %a159, 31
  %t7241454 = add nsw i32 %t10831438, %a237
  %5731 = sext i32 %t7241454 to i64
  %5732 = shl nsw i64 %5646, 5
  %t10881462 = shl nsw i32 %a159, 5
  %t7291478 = add nsw i32 %t10881462, %a237
  %5733 = sext i32 %t7291478 to i64
  %5734 = mul nsw i64 %5646, 33
  %t10931486 = mul nsw i32 %a159, 33
  %t7341502 = add nsw i32 %t10931486, %a237
  %5735 = sext i32 %t7341502 to i64
  br i1 %5631, label %"assert succeeded658.preheader", label %"assert failed657", !prof !406

"assert succeeded658.preheader":                  ; preds = %"for blur_y.s0.y.y653.preheader"
  %5736 = icmp slt i32 %b157, 0
  %blur_y.s0.y.yi.base.s6562481 = select i1 %5736, i32 %b157, i32 0
  %t904648 = ashr i32 %5423, 5
  %5737 = add nsw i32 %t904648, -1
  %5738 = sub i32 %5422, %5434
  %5739 = sext i32 %b171 to i64
  %5740 = sext i32 %b152 to i64
  %5741 = zext i32 %t928688 to i64
  %5742 = zext i32 %5434 to i64
  %5743 = sext i32 %5738 to i64
  %5744 = zext i32 %5737 to i64
  %5745 = add nsw i64 %5741, -1
  %5746 = add nsw i64 %5744, -1
  %xtraiter2815 = and i64 %5741, 3
  %5747 = icmp ult i64 %5745, 3
  %unroll_iter2818 = and i64 %5741, 4294967292
  %lcmp.mod2817.not = icmp eq i64 %xtraiter2815, 0
  %xtraiter2820 = and i64 %5744, 1
  %5748 = icmp eq i64 %5746, 0
  %unroll_iter2822 = and i64 %5744, 4294967294
  %lcmp.mod2821.not = icmp eq i64 %xtraiter2820, 0
  %xtraiter2824 = and i64 %5744, 1
  %5749 = icmp eq i64 %5746, 0
  %unroll_iter2826 = and i64 %5744, 4294967294
  %lcmp.mod2825.not = icmp eq i64 %xtraiter2824, 0
  br label %"assert succeeded658"

"for blur_y.s0.y.y653":                           ; preds = %after_bb1497
  %a155 = shl nsw i32 %10767, 5
  %5750 = icmp sgt i32 %b157, %a155
  %blur_y.s0.y.yi.base.s656 = select i1 %5750, i32 %a155, i32 %b157
  br label %"assert succeeded658"

"assert failed657":                               ; preds = %"for blur_y.s0.y.y653.preheader"
  %5751 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.208, i64 0, i64 0), i64 %5630, i64 2147483647) #11
  br label %destructor_block

"assert succeeded658":                            ; preds = %"for blur_y.s0.y.y653", %"assert succeeded658.preheader"
  %blur_y.s0.y.yi.base.s6562484 = phi i32 [ %blur_y.s0.y.yi.base.s656, %"for blur_y.s0.y.y653" ], [ %blur_y.s0.y.yi.base.s6562481, %"assert succeeded658.preheader" ]
  %blur_y.s0.y.y6552483 = phi i32 [ %10767, %"for blur_y.s0.y.y653" ], [ 0, %"assert succeeded658.preheader" ]
  %5752 = load i64, i64* %.fca.1.gep, align 8, !tbaa !407
  %cmp.i2284 = icmp ult i64 %5752, %5632
  %5753 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !397
  br i1 %cmp.i2284, label %if.then.i2287, label %pseudostack_alloc.exit2300, !prof !408

if.then.i2287:                                    ; preds = %"assert succeeded658"
  %tobool1.not.i2286 = icmp ne i8* %5753, null
  %5754 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2289 = icmp ugt i64 %5754, 16384
  %or.cond2356 = select i1 %tobool1.not.i2286, i1 %cmp2.i2289, i1 false
  br i1 %or.cond2356, label %if.then3.i2291, label %if.end.i2295

if.then3.i2291:                                   ; preds = %if.then.i2287
  call void @halide_free(i8* null, i8* nonnull %5753) #18
  br label %if.end.i2295

if.end.i2295:                                     ; preds = %if.then3.i2291, %if.then.i2287
  %add.i2293 = add i64 %5754, %5632
  store i64 %add.i2293, i64* %.fca.2.gep, align 8, !tbaa !399
  %cmp7.i2294 = icmp ugt i64 %add.i2293, 16384
  br i1 %cmp7.i2294, label %if.then8.i2297, label %if.end11.i2299

if.then8.i2297:                                   ; preds = %if.end.i2295
  %call.i2296 = call i8* @halide_malloc(i8* null, i64 %5632) #18
  br label %if.end11.i2299

if.end11.i2299:                                   ; preds = %if.then8.i2297, %if.end.i2295
  %storemerge.i2298 = phi i8* [ %call.i2296, %if.then8.i2297 ], [ null, %if.end.i2295 ]
  store i8* %storemerge.i2298, i8** %.fca.0.gep, align 8, !tbaa !397
  store i64 %5632, i64* %.fca.1.gep, align 8, !tbaa !407
  br label %pseudostack_alloc.exit2300

pseudostack_alloc.exit2300:                       ; preds = %"assert succeeded658", %if.end11.i2299
  %5755 = phi i8* [ %storemerge.i2298, %if.end11.i2299 ], [ %5753, %"assert succeeded658" ]
  %5756 = bitcast i8* %5755 to i16*
  %.not1644 = icmp eq i8* %5755, null
  br i1 %.not1644, label %then_bb660, label %"produce read_input662", !prof !396

then_bb660:                                       ; preds = %pseudostack_alloc.exit2300
  %5757 = alloca i8*, i64 %5632, align 64
  %5758 = bitcast i8** %5757 to i16*
  store i8** %5757, i8*** %5634, align 8
  br label %"produce read_input662"

"produce read_input662":                          ; preds = %pseudostack_alloc.exit2300, %then_bb660
  %read_input661 = phi i16* [ %5758, %then_bb660 ], [ %5756, %pseudostack_alloc.exit2300 ]
  %a161 = add i32 %blur_y.s0.y.yi.base.s6562484, %5425
  %5759 = icmp slt i32 %5437, %a161
  %a160 = select i1 %5759, i32 %a161, i32 %5437
  %b162 = add nsw i32 %a161, 34
  %5760 = icmp sgt i32 %b162, %a160
  %read_input.s0.y.prologue663 = select i1 %5760, i32 %a160, i32 %b162
  %5761 = icmp sgt i32 %a160, %b132
  %a162 = select i1 %5761, i32 %a160, i32 %b132
  %5762 = icmp sgt i32 %b162, %a162
  %read_input.s0.y.epilogue664 = select i1 %5762, i32 %a162, i32 %b162
  %a166 = sub i32 %5437, %a161
  %5763 = icmp sgt i32 %a166, 0
  br i1 %5763, label %"for read_input.s0.y.rebased667.preheader", label %"end for read_input.s0.y.rebased668", !prof !406

"for read_input.s0.y.rebased667.preheader":       ; preds = %"produce read_input662"
  %t914666 = add nsw i32 %5635, %blur_y.s0.y.yi.base.s6562484
  %5764 = icmp slt i32 %a166, 34
  %a165 = select i1 %5764, i32 %a166, i32 34
  %5765 = sext i32 %t914666 to i64
  %5766 = zext i32 %a165 to i64
  br label %"for read_input.s0.y.rebased667"

"for read_input.s0.y.rebased667":                 ; preds = %"for read_input.s0.y.rebased667.preheader", %"end for read_input.s0.x.x673"
  %indvars.iv2579 = phi i64 [ 0, %"for read_input.s0.y.rebased667.preheader" ], [ %indvars.iv.next2580, %"end for read_input.s0.x.x673" ]
  %5767 = add nsw i64 %indvars.iv2579, %5765
  %5768 = icmp slt i64 %5767, %5739
  %5769 = trunc i64 %5767 to i32
  %a168 = select i1 %5768, i32 %5769, i32 %b171
  br i1 %5636, label %"for read_input.s0.x.x672.preheader", label %"end for read_input.s0.x.x673", !prof !406

"for read_input.s0.x.x672.preheader":             ; preds = %"for read_input.s0.y.rebased667"
  %5770 = icmp sgt i32 %a168, 0
  %5771 = select i1 %5770, i32 %a168, i32 0
  %5772 = mul nsw i32 %5771, %5439
  %t915671 = sub nsw i32 %5772, %5434
  %5773 = mul nsw i64 %indvars.iv2579, %5646
  %5774 = insertelement <32 x i32> undef, i32 %t915671, i32 0
  %5775 = shufflevector <32 x i32> %5774, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x672"

"end for read_input.s0.y.rebased668":             ; preds = %"end for read_input.s0.x.x673", %"produce read_input662"
  %5776 = icmp sgt i32 %b132, %a161
  %a174 = select i1 %5776, i32 %b132, i32 %a161
  %5777 = icmp sgt i32 %b162, %a174
  %5778 = select i1 %5777, i32 %a174, i32 %b162
  %t917677 = sub nsw i32 %5778, %read_input.s0.y.prologue663
  %5779 = icmp sgt i32 %t917677, 0
  br i1 %5779, label %"for read_input.s0.y.rebased680.preheader", label %"end for read_input.s0.y.rebased681", !prof !406

"for read_input.s0.y.rebased680.preheader":       ; preds = %"end for read_input.s0.y.rebased668"
  %t919679 = sub i32 %read_input.s0.y.prologue663, %5437
  %5780 = sext i32 %blur_y.s0.y.yi.base.s6562484 to i64
  %5781 = add nsw i64 %5645, %5780
  %a182 = sub nsw i64 %5644, %5781
  %5782 = icmp slt i64 %a182, 34
  %a181 = select i1 %5782, i64 %a182, i64 34
  %5783 = icmp sgt i64 %a181, 0
  %5784 = select i1 %5783, i64 %a181, i64 0
  %5785 = sext i32 %t919679 to i64
  %5786 = zext i32 %t917677 to i64
  br label %"for read_input.s0.y.rebased680"

"for read_input.s0.x.x672":                       ; preds = %"for read_input.s0.x.x672.preheader", %"for read_input.s0.x.x672"
  %read_input.s0.x.x674 = phi i32 [ %5943, %"for read_input.s0.x.x672" ], [ 0, %"for read_input.s0.x.x672.preheader" ]
  %a170 = shl nsw i32 %read_input.s0.x.x674, 5
  %5787 = icmp sgt i32 %b172, %a170
  %read_input.s0.x.v2.base.s675 = select i1 %5787, i32 %a170, i32 %b172
  %5788 = add nsw i32 %read_input.s0.x.v2.base.s675, %5422
  %5789 = insertelement <32 x i32> undef, i32 %5788, i32 0
  %5790 = shufflevector <32 x i32> %5789, <32 x i32> undef, <32 x i32> zeroinitializer
  %a172 = add nsw <32 x i32> %5790, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5791 = shufflevector <32 x i32> %a172, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5792 = icmp sgt <16 x i32> %5639, %5791
  %5793 = shufflevector <32 x i32> %a172, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5794 = icmp sgt <16 x i32> %5639, %5793
  %5795 = select <16 x i1> %5792, <16 x i32> %5791, <16 x i32> %5639
  %5796 = select <16 x i1> %5794, <16 x i32> %5793, <16 x i32> %5639
  %5797 = icmp sgt <16 x i32> %5795, %5641
  %5798 = icmp sgt <16 x i32> %5796, %5641
  %5799 = select <16 x i1> %5797, <16 x i32> %5795, <16 x i32> %5641
  %5800 = select <16 x i1> %5798, <16 x i32> %5796, <16 x i32> %5641
  %5801 = shufflevector <16 x i32> %5799, <16 x i32> %5800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5802 = add nsw <32 x i32> %5801, %5775
  %5803 = shufflevector <32 x i32> %5802, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5804 = sext <8 x i32> %5803 to <8 x i64>
  %5805 = extractelement <8 x i64> %5804, i32 0
  %5806 = getelementptr inbounds i16, i16* %5642, i64 %5805
  %5807 = load i16, i16* %5806, align 2, !tbaa !409
  %5808 = insertelement <32 x i16> undef, i16 %5807, i32 0
  %5809 = extractelement <8 x i64> %5804, i32 1
  %5810 = getelementptr inbounds i16, i16* %5642, i64 %5809
  %5811 = load i16, i16* %5810, align 2, !tbaa !409
  %5812 = insertelement <32 x i16> %5808, i16 %5811, i32 1
  %5813 = extractelement <8 x i64> %5804, i32 2
  %5814 = getelementptr inbounds i16, i16* %5642, i64 %5813
  %5815 = load i16, i16* %5814, align 2, !tbaa !409
  %5816 = insertelement <32 x i16> %5812, i16 %5815, i32 2
  %5817 = extractelement <8 x i64> %5804, i32 3
  %5818 = getelementptr inbounds i16, i16* %5642, i64 %5817
  %5819 = load i16, i16* %5818, align 2, !tbaa !409
  %5820 = insertelement <32 x i16> %5816, i16 %5819, i32 3
  %5821 = extractelement <8 x i64> %5804, i32 4
  %5822 = getelementptr inbounds i16, i16* %5642, i64 %5821
  %5823 = load i16, i16* %5822, align 2, !tbaa !409
  %5824 = insertelement <32 x i16> %5820, i16 %5823, i32 4
  %5825 = extractelement <8 x i64> %5804, i32 5
  %5826 = getelementptr inbounds i16, i16* %5642, i64 %5825
  %5827 = load i16, i16* %5826, align 2, !tbaa !409
  %5828 = insertelement <32 x i16> %5824, i16 %5827, i32 5
  %5829 = extractelement <8 x i64> %5804, i32 6
  %5830 = getelementptr inbounds i16, i16* %5642, i64 %5829
  %5831 = load i16, i16* %5830, align 2, !tbaa !409
  %5832 = insertelement <32 x i16> %5828, i16 %5831, i32 6
  %5833 = extractelement <8 x i64> %5804, i32 7
  %5834 = getelementptr inbounds i16, i16* %5642, i64 %5833
  %5835 = load i16, i16* %5834, align 2, !tbaa !409
  %5836 = insertelement <32 x i16> %5832, i16 %5835, i32 7
  %5837 = shufflevector <32 x i32> %5802, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5838 = sext <8 x i32> %5837 to <8 x i64>
  %5839 = extractelement <8 x i64> %5838, i32 0
  %5840 = getelementptr inbounds i16, i16* %5642, i64 %5839
  %5841 = load i16, i16* %5840, align 2, !tbaa !409
  %5842 = insertelement <32 x i16> %5836, i16 %5841, i32 8
  %5843 = extractelement <8 x i64> %5838, i32 1
  %5844 = getelementptr inbounds i16, i16* %5642, i64 %5843
  %5845 = load i16, i16* %5844, align 2, !tbaa !409
  %5846 = insertelement <32 x i16> %5842, i16 %5845, i32 9
  %5847 = extractelement <8 x i64> %5838, i32 2
  %5848 = getelementptr inbounds i16, i16* %5642, i64 %5847
  %5849 = load i16, i16* %5848, align 2, !tbaa !409
  %5850 = insertelement <32 x i16> %5846, i16 %5849, i32 10
  %5851 = extractelement <8 x i64> %5838, i32 3
  %5852 = getelementptr inbounds i16, i16* %5642, i64 %5851
  %5853 = load i16, i16* %5852, align 2, !tbaa !409
  %5854 = insertelement <32 x i16> %5850, i16 %5853, i32 11
  %5855 = extractelement <8 x i64> %5838, i32 4
  %5856 = getelementptr inbounds i16, i16* %5642, i64 %5855
  %5857 = load i16, i16* %5856, align 2, !tbaa !409
  %5858 = insertelement <32 x i16> %5854, i16 %5857, i32 12
  %5859 = extractelement <8 x i64> %5838, i32 5
  %5860 = getelementptr inbounds i16, i16* %5642, i64 %5859
  %5861 = load i16, i16* %5860, align 2, !tbaa !409
  %5862 = insertelement <32 x i16> %5858, i16 %5861, i32 13
  %5863 = extractelement <8 x i64> %5838, i32 6
  %5864 = getelementptr inbounds i16, i16* %5642, i64 %5863
  %5865 = load i16, i16* %5864, align 2, !tbaa !409
  %5866 = insertelement <32 x i16> %5862, i16 %5865, i32 14
  %5867 = extractelement <8 x i64> %5838, i32 7
  %5868 = getelementptr inbounds i16, i16* %5642, i64 %5867
  %5869 = load i16, i16* %5868, align 2, !tbaa !409
  %5870 = insertelement <32 x i16> %5866, i16 %5869, i32 15
  %5871 = shufflevector <32 x i32> %5802, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %5872 = sext <8 x i32> %5871 to <8 x i64>
  %5873 = extractelement <8 x i64> %5872, i32 0
  %5874 = getelementptr inbounds i16, i16* %5642, i64 %5873
  %5875 = load i16, i16* %5874, align 2, !tbaa !409
  %5876 = insertelement <32 x i16> %5870, i16 %5875, i32 16
  %5877 = extractelement <8 x i64> %5872, i32 1
  %5878 = getelementptr inbounds i16, i16* %5642, i64 %5877
  %5879 = load i16, i16* %5878, align 2, !tbaa !409
  %5880 = insertelement <32 x i16> %5876, i16 %5879, i32 17
  %5881 = extractelement <8 x i64> %5872, i32 2
  %5882 = getelementptr inbounds i16, i16* %5642, i64 %5881
  %5883 = load i16, i16* %5882, align 2, !tbaa !409
  %5884 = insertelement <32 x i16> %5880, i16 %5883, i32 18
  %5885 = extractelement <8 x i64> %5872, i32 3
  %5886 = getelementptr inbounds i16, i16* %5642, i64 %5885
  %5887 = load i16, i16* %5886, align 2, !tbaa !409
  %5888 = insertelement <32 x i16> %5884, i16 %5887, i32 19
  %5889 = extractelement <8 x i64> %5872, i32 4
  %5890 = getelementptr inbounds i16, i16* %5642, i64 %5889
  %5891 = load i16, i16* %5890, align 2, !tbaa !409
  %5892 = insertelement <32 x i16> %5888, i16 %5891, i32 20
  %5893 = extractelement <8 x i64> %5872, i32 5
  %5894 = getelementptr inbounds i16, i16* %5642, i64 %5893
  %5895 = load i16, i16* %5894, align 2, !tbaa !409
  %5896 = insertelement <32 x i16> %5892, i16 %5895, i32 21
  %5897 = extractelement <8 x i64> %5872, i32 6
  %5898 = getelementptr inbounds i16, i16* %5642, i64 %5897
  %5899 = load i16, i16* %5898, align 2, !tbaa !409
  %5900 = insertelement <32 x i16> %5896, i16 %5899, i32 22
  %5901 = extractelement <8 x i64> %5872, i32 7
  %5902 = getelementptr inbounds i16, i16* %5642, i64 %5901
  %5903 = load i16, i16* %5902, align 2, !tbaa !409
  %5904 = insertelement <32 x i16> %5900, i16 %5903, i32 23
  %5905 = shufflevector <32 x i32> %5802, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5906 = sext <8 x i32> %5905 to <8 x i64>
  %5907 = extractelement <8 x i64> %5906, i32 0
  %5908 = getelementptr inbounds i16, i16* %5642, i64 %5907
  %5909 = load i16, i16* %5908, align 2, !tbaa !409
  %5910 = insertelement <32 x i16> %5904, i16 %5909, i32 24
  %5911 = extractelement <8 x i64> %5906, i32 1
  %5912 = getelementptr inbounds i16, i16* %5642, i64 %5911
  %5913 = load i16, i16* %5912, align 2, !tbaa !409
  %5914 = insertelement <32 x i16> %5910, i16 %5913, i32 25
  %5915 = extractelement <8 x i64> %5906, i32 2
  %5916 = getelementptr inbounds i16, i16* %5642, i64 %5915
  %5917 = load i16, i16* %5916, align 2, !tbaa !409
  %5918 = insertelement <32 x i16> %5914, i16 %5917, i32 26
  %5919 = extractelement <8 x i64> %5906, i32 3
  %5920 = getelementptr inbounds i16, i16* %5642, i64 %5919
  %5921 = load i16, i16* %5920, align 2, !tbaa !409
  %5922 = insertelement <32 x i16> %5918, i16 %5921, i32 27
  %5923 = extractelement <8 x i64> %5906, i32 4
  %5924 = getelementptr inbounds i16, i16* %5642, i64 %5923
  %5925 = load i16, i16* %5924, align 2, !tbaa !409
  %5926 = insertelement <32 x i16> %5922, i16 %5925, i32 28
  %5927 = extractelement <8 x i64> %5906, i32 5
  %5928 = getelementptr inbounds i16, i16* %5642, i64 %5927
  %5929 = load i16, i16* %5928, align 2, !tbaa !409
  %5930 = insertelement <32 x i16> %5926, i16 %5929, i32 29
  %5931 = extractelement <8 x i64> %5906, i32 6
  %5932 = getelementptr inbounds i16, i16* %5642, i64 %5931
  %5933 = load i16, i16* %5932, align 2, !tbaa !409
  %5934 = insertelement <32 x i16> %5930, i16 %5933, i32 30
  %5935 = extractelement <8 x i64> %5906, i32 7
  %5936 = getelementptr inbounds i16, i16* %5642, i64 %5935
  %5937 = load i16, i16* %5936, align 2, !tbaa !409
  %5938 = insertelement <32 x i16> %5934, i16 %5937, i32 31
  %5939 = sext i32 %read_input.s0.x.v2.base.s675 to i64
  %5940 = add nsw i64 %5773, %5939
  %5941 = getelementptr inbounds i16, i16* %read_input661, i64 %5940
  %5942 = bitcast i16* %5941 to <32 x i16>*
  store <32 x i16> %5938, <32 x i16>* %5942, align 2, !tbaa !412
  %5943 = add nuw nsw i32 %read_input.s0.x.x674, 1
  %.not1849 = icmp eq i32 %5943, %b145
  br i1 %.not1849, label %"end for read_input.s0.x.x673", label %"for read_input.s0.x.x672"

"end for read_input.s0.x.x673":                   ; preds = %"for read_input.s0.x.x672", %"for read_input.s0.y.rebased667"
  %indvars.iv.next2580 = add nuw nsw i64 %indvars.iv2579, 1
  %.not1848 = icmp eq i64 %indvars.iv.next2580, %5766
  br i1 %.not1848, label %"end for read_input.s0.y.rebased668", label %"for read_input.s0.y.rebased667"

"for read_input.s0.y.rebased680":                 ; preds = %"for read_input.s0.y.rebased680.preheader", %"end for read_input.s0.x.x.rebased696"
  %indvars.iv2592 = phi i64 [ 0, %"for read_input.s0.y.rebased680.preheader" ], [ %indvars.iv.next2593, %"end for read_input.s0.x.x.rebased696" ]
  %5944 = add nsw i64 %indvars.iv2592, %5785
  %5945 = mul nsw i64 %5944, %5551
  %5946 = sub i64 %5945, %5742
  br i1 %5643, label %"for read_input.s0.x.x684.preheader", label %"end for read_input.s0.x.x685", !prof !406

"for read_input.s0.x.x684.preheader":             ; preds = %"for read_input.s0.y.rebased680"
  %5947 = trunc i64 %5946 to i32
  %5948 = insertelement <32 x i32> undef, i32 %5947, i32 0
  %5949 = shufflevector <32 x i32> %5948, <32 x i32> undef, <32 x i32> zeroinitializer
  %5950 = add nuw nsw i64 %5784, %indvars.iv2592
  %5951 = mul nsw i64 %5950, %5646
  br label %"for read_input.s0.x.x684"

"end for read_input.s0.y.rebased681":             ; preds = %"end for read_input.s0.x.x.rebased696", %"end for read_input.s0.y.rebased668"
  %a192 = add nsw i32 %blur_y.s0.y.yi.base.s6562484, %5649
  %5952 = icmp slt i32 %a192, 0
  %a191 = select i1 %5952, i32 %a192, i32 0
  %5953 = icmp sgt i32 %a191, -34
  %t935701 = sub nsw i32 %read_input.s0.y.epilogue664, %5437
  br i1 %5953, label %"for read_input.s0.y.rebased702.preheader", label %"end for read_input.s0.y.rebased703", !prof !406

"for read_input.s0.y.rebased702.preheader":       ; preds = %"end for read_input.s0.y.rebased681"
  %5954 = sext i32 %blur_y.s0.y.yi.base.s6562484 to i64
  %5955 = add nsw i64 %5645, %5954
  %a199 = sub nsw i64 %5650, %5955
  %5956 = icmp slt i64 %a199, 34
  %a198 = select i1 %5956, i64 %a199, i64 34
  %5957 = icmp sgt i64 %a198, 0
  %5958 = select i1 %5957, i64 %a198, i64 0
  %a191.op = add nsw i32 %a191, 33
  %5959 = zext i32 %a191.op to i64
  br label %"for read_input.s0.y.rebased702"

"for read_input.s0.x.x684":                       ; preds = %"for read_input.s0.x.x684.preheader", %"for read_input.s0.x.x684"
  %read_input.s0.x.x686 = phi i32 [ %6116, %"for read_input.s0.x.x684" ], [ 0, %"for read_input.s0.x.x684.preheader" ]
  %a178 = shl nsw i32 %read_input.s0.x.x686, 5
  %5960 = icmp sgt i32 %b172, %a178
  %read_input.s0.x.v2.base.s687 = select i1 %5960, i32 %a178, i32 %b172
  %5961 = add nsw i32 %read_input.s0.x.v2.base.s687, %5422
  %5962 = insertelement <32 x i32> undef, i32 %5961, i32 0
  %5963 = shufflevector <32 x i32> %5962, <32 x i32> undef, <32 x i32> zeroinitializer
  %a180 = add nsw <32 x i32> %5963, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5964 = shufflevector <32 x i32> %a180, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5965 = icmp sgt <16 x i32> %5639, %5964
  %5966 = shufflevector <32 x i32> %a180, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5967 = icmp sgt <16 x i32> %5639, %5966
  %5968 = select <16 x i1> %5965, <16 x i32> %5964, <16 x i32> %5639
  %5969 = select <16 x i1> %5967, <16 x i32> %5966, <16 x i32> %5639
  %5970 = icmp sgt <16 x i32> %5968, %5641
  %5971 = icmp sgt <16 x i32> %5969, %5641
  %5972 = select <16 x i1> %5970, <16 x i32> %5968, <16 x i32> %5641
  %5973 = select <16 x i1> %5971, <16 x i32> %5969, <16 x i32> %5641
  %5974 = shufflevector <16 x i32> %5972, <16 x i32> %5973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5975 = add nsw <32 x i32> %5974, %5949
  %5976 = shufflevector <32 x i32> %5975, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5977 = sext <8 x i32> %5976 to <8 x i64>
  %5978 = extractelement <8 x i64> %5977, i32 0
  %5979 = getelementptr inbounds i16, i16* %5642, i64 %5978
  %5980 = load i16, i16* %5979, align 2, !tbaa !409
  %5981 = insertelement <32 x i16> undef, i16 %5980, i32 0
  %5982 = extractelement <8 x i64> %5977, i32 1
  %5983 = getelementptr inbounds i16, i16* %5642, i64 %5982
  %5984 = load i16, i16* %5983, align 2, !tbaa !409
  %5985 = insertelement <32 x i16> %5981, i16 %5984, i32 1
  %5986 = extractelement <8 x i64> %5977, i32 2
  %5987 = getelementptr inbounds i16, i16* %5642, i64 %5986
  %5988 = load i16, i16* %5987, align 2, !tbaa !409
  %5989 = insertelement <32 x i16> %5985, i16 %5988, i32 2
  %5990 = extractelement <8 x i64> %5977, i32 3
  %5991 = getelementptr inbounds i16, i16* %5642, i64 %5990
  %5992 = load i16, i16* %5991, align 2, !tbaa !409
  %5993 = insertelement <32 x i16> %5989, i16 %5992, i32 3
  %5994 = extractelement <8 x i64> %5977, i32 4
  %5995 = getelementptr inbounds i16, i16* %5642, i64 %5994
  %5996 = load i16, i16* %5995, align 2, !tbaa !409
  %5997 = insertelement <32 x i16> %5993, i16 %5996, i32 4
  %5998 = extractelement <8 x i64> %5977, i32 5
  %5999 = getelementptr inbounds i16, i16* %5642, i64 %5998
  %6000 = load i16, i16* %5999, align 2, !tbaa !409
  %6001 = insertelement <32 x i16> %5997, i16 %6000, i32 5
  %6002 = extractelement <8 x i64> %5977, i32 6
  %6003 = getelementptr inbounds i16, i16* %5642, i64 %6002
  %6004 = load i16, i16* %6003, align 2, !tbaa !409
  %6005 = insertelement <32 x i16> %6001, i16 %6004, i32 6
  %6006 = extractelement <8 x i64> %5977, i32 7
  %6007 = getelementptr inbounds i16, i16* %5642, i64 %6006
  %6008 = load i16, i16* %6007, align 2, !tbaa !409
  %6009 = insertelement <32 x i16> %6005, i16 %6008, i32 7
  %6010 = shufflevector <32 x i32> %5975, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6011 = sext <8 x i32> %6010 to <8 x i64>
  %6012 = extractelement <8 x i64> %6011, i32 0
  %6013 = getelementptr inbounds i16, i16* %5642, i64 %6012
  %6014 = load i16, i16* %6013, align 2, !tbaa !409
  %6015 = insertelement <32 x i16> %6009, i16 %6014, i32 8
  %6016 = extractelement <8 x i64> %6011, i32 1
  %6017 = getelementptr inbounds i16, i16* %5642, i64 %6016
  %6018 = load i16, i16* %6017, align 2, !tbaa !409
  %6019 = insertelement <32 x i16> %6015, i16 %6018, i32 9
  %6020 = extractelement <8 x i64> %6011, i32 2
  %6021 = getelementptr inbounds i16, i16* %5642, i64 %6020
  %6022 = load i16, i16* %6021, align 2, !tbaa !409
  %6023 = insertelement <32 x i16> %6019, i16 %6022, i32 10
  %6024 = extractelement <8 x i64> %6011, i32 3
  %6025 = getelementptr inbounds i16, i16* %5642, i64 %6024
  %6026 = load i16, i16* %6025, align 2, !tbaa !409
  %6027 = insertelement <32 x i16> %6023, i16 %6026, i32 11
  %6028 = extractelement <8 x i64> %6011, i32 4
  %6029 = getelementptr inbounds i16, i16* %5642, i64 %6028
  %6030 = load i16, i16* %6029, align 2, !tbaa !409
  %6031 = insertelement <32 x i16> %6027, i16 %6030, i32 12
  %6032 = extractelement <8 x i64> %6011, i32 5
  %6033 = getelementptr inbounds i16, i16* %5642, i64 %6032
  %6034 = load i16, i16* %6033, align 2, !tbaa !409
  %6035 = insertelement <32 x i16> %6031, i16 %6034, i32 13
  %6036 = extractelement <8 x i64> %6011, i32 6
  %6037 = getelementptr inbounds i16, i16* %5642, i64 %6036
  %6038 = load i16, i16* %6037, align 2, !tbaa !409
  %6039 = insertelement <32 x i16> %6035, i16 %6038, i32 14
  %6040 = extractelement <8 x i64> %6011, i32 7
  %6041 = getelementptr inbounds i16, i16* %5642, i64 %6040
  %6042 = load i16, i16* %6041, align 2, !tbaa !409
  %6043 = insertelement <32 x i16> %6039, i16 %6042, i32 15
  %6044 = shufflevector <32 x i32> %5975, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6045 = sext <8 x i32> %6044 to <8 x i64>
  %6046 = extractelement <8 x i64> %6045, i32 0
  %6047 = getelementptr inbounds i16, i16* %5642, i64 %6046
  %6048 = load i16, i16* %6047, align 2, !tbaa !409
  %6049 = insertelement <32 x i16> %6043, i16 %6048, i32 16
  %6050 = extractelement <8 x i64> %6045, i32 1
  %6051 = getelementptr inbounds i16, i16* %5642, i64 %6050
  %6052 = load i16, i16* %6051, align 2, !tbaa !409
  %6053 = insertelement <32 x i16> %6049, i16 %6052, i32 17
  %6054 = extractelement <8 x i64> %6045, i32 2
  %6055 = getelementptr inbounds i16, i16* %5642, i64 %6054
  %6056 = load i16, i16* %6055, align 2, !tbaa !409
  %6057 = insertelement <32 x i16> %6053, i16 %6056, i32 18
  %6058 = extractelement <8 x i64> %6045, i32 3
  %6059 = getelementptr inbounds i16, i16* %5642, i64 %6058
  %6060 = load i16, i16* %6059, align 2, !tbaa !409
  %6061 = insertelement <32 x i16> %6057, i16 %6060, i32 19
  %6062 = extractelement <8 x i64> %6045, i32 4
  %6063 = getelementptr inbounds i16, i16* %5642, i64 %6062
  %6064 = load i16, i16* %6063, align 2, !tbaa !409
  %6065 = insertelement <32 x i16> %6061, i16 %6064, i32 20
  %6066 = extractelement <8 x i64> %6045, i32 5
  %6067 = getelementptr inbounds i16, i16* %5642, i64 %6066
  %6068 = load i16, i16* %6067, align 2, !tbaa !409
  %6069 = insertelement <32 x i16> %6065, i16 %6068, i32 21
  %6070 = extractelement <8 x i64> %6045, i32 6
  %6071 = getelementptr inbounds i16, i16* %5642, i64 %6070
  %6072 = load i16, i16* %6071, align 2, !tbaa !409
  %6073 = insertelement <32 x i16> %6069, i16 %6072, i32 22
  %6074 = extractelement <8 x i64> %6045, i32 7
  %6075 = getelementptr inbounds i16, i16* %5642, i64 %6074
  %6076 = load i16, i16* %6075, align 2, !tbaa !409
  %6077 = insertelement <32 x i16> %6073, i16 %6076, i32 23
  %6078 = shufflevector <32 x i32> %5975, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6079 = sext <8 x i32> %6078 to <8 x i64>
  %6080 = extractelement <8 x i64> %6079, i32 0
  %6081 = getelementptr inbounds i16, i16* %5642, i64 %6080
  %6082 = load i16, i16* %6081, align 2, !tbaa !409
  %6083 = insertelement <32 x i16> %6077, i16 %6082, i32 24
  %6084 = extractelement <8 x i64> %6079, i32 1
  %6085 = getelementptr inbounds i16, i16* %5642, i64 %6084
  %6086 = load i16, i16* %6085, align 2, !tbaa !409
  %6087 = insertelement <32 x i16> %6083, i16 %6086, i32 25
  %6088 = extractelement <8 x i64> %6079, i32 2
  %6089 = getelementptr inbounds i16, i16* %5642, i64 %6088
  %6090 = load i16, i16* %6089, align 2, !tbaa !409
  %6091 = insertelement <32 x i16> %6087, i16 %6090, i32 26
  %6092 = extractelement <8 x i64> %6079, i32 3
  %6093 = getelementptr inbounds i16, i16* %5642, i64 %6092
  %6094 = load i16, i16* %6093, align 2, !tbaa !409
  %6095 = insertelement <32 x i16> %6091, i16 %6094, i32 27
  %6096 = extractelement <8 x i64> %6079, i32 4
  %6097 = getelementptr inbounds i16, i16* %5642, i64 %6096
  %6098 = load i16, i16* %6097, align 2, !tbaa !409
  %6099 = insertelement <32 x i16> %6095, i16 %6098, i32 28
  %6100 = extractelement <8 x i64> %6079, i32 5
  %6101 = getelementptr inbounds i16, i16* %5642, i64 %6100
  %6102 = load i16, i16* %6101, align 2, !tbaa !409
  %6103 = insertelement <32 x i16> %6099, i16 %6102, i32 29
  %6104 = extractelement <8 x i64> %6079, i32 6
  %6105 = getelementptr inbounds i16, i16* %5642, i64 %6104
  %6106 = load i16, i16* %6105, align 2, !tbaa !409
  %6107 = insertelement <32 x i16> %6103, i16 %6106, i32 30
  %6108 = extractelement <8 x i64> %6079, i32 7
  %6109 = getelementptr inbounds i16, i16* %5642, i64 %6108
  %6110 = load i16, i16* %6109, align 2, !tbaa !409
  %6111 = insertelement <32 x i16> %6107, i16 %6110, i32 31
  %6112 = sext i32 %read_input.s0.x.v2.base.s687 to i64
  %6113 = add nsw i64 %5951, %6112
  %6114 = getelementptr inbounds i16, i16* %read_input661, i64 %6113
  %6115 = bitcast i16* %6114 to <32 x i16>*
  store <32 x i16> %6111, <32 x i16>* %6115, align 2, !tbaa !412
  %6116 = add nuw nsw i32 %read_input.s0.x.x686, 1
  %.not1847 = icmp eq i32 %6116, %b152
  br i1 %.not1847, label %"end for read_input.s0.x.x685", label %"for read_input.s0.x.x684"

"end for read_input.s0.x.x685":                   ; preds = %"for read_input.s0.x.x684", %"for read_input.s0.y.rebased680"
  br i1 %5647, label %"for read_input.s0.x.x.rebased690.preheader", label %"end for read_input.s0.x.x.rebased691", !prof !406

"for read_input.s0.x.x.rebased690.preheader":     ; preds = %"end for read_input.s0.x.x685"
  %6117 = add nsw i64 %5945, %5743
  %6118 = add nuw nsw i64 %5784, %indvars.iv2592
  %6119 = mul nsw i64 %6118, %5646
  br i1 %5747, label %"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased690"

"for read_input.s0.x.x.rebased690":               ; preds = %"for read_input.s0.x.x.rebased690.preheader", %"for read_input.s0.x.x.rebased690"
  %indvars.iv2589 = phi i64 [ %indvars.iv.next2590.3, %"for read_input.s0.x.x.rebased690" ], [ 0, %"for read_input.s0.x.x.rebased690.preheader" ]
  %niter2819 = phi i64 [ %niter2819.nsub.3, %"for read_input.s0.x.x.rebased690" ], [ %unroll_iter2818, %"for read_input.s0.x.x.rebased690.preheader" ]
  %6120 = add nsw i64 %indvars.iv2589, %5740
  %6121 = shl nsw i64 %6120, 5
  %6122 = add nsw i64 %6121, %6117
  %6123 = getelementptr inbounds i16, i16* %5642, i64 %6122
  %6124 = bitcast i16* %6123 to <32 x i16>*
  %6125 = load <32 x i16>, <32 x i16>* %6124, align 2, !tbaa !409
  %6126 = add nsw i64 %6121, %6119
  %6127 = getelementptr inbounds i16, i16* %read_input661, i64 %6126
  %6128 = bitcast i16* %6127 to <32 x i16>*
  store <32 x i16> %6125, <32 x i16>* %6128, align 2, !tbaa !412
  %indvars.iv.next2590 = or i64 %indvars.iv2589, 1
  %6129 = add nsw i64 %indvars.iv.next2590, %5740
  %6130 = shl nsw i64 %6129, 5
  %6131 = add nsw i64 %6130, %6117
  %6132 = getelementptr inbounds i16, i16* %5642, i64 %6131
  %6133 = bitcast i16* %6132 to <32 x i16>*
  %6134 = load <32 x i16>, <32 x i16>* %6133, align 2, !tbaa !409
  %6135 = add nsw i64 %6130, %6119
  %6136 = getelementptr inbounds i16, i16* %read_input661, i64 %6135
  %6137 = bitcast i16* %6136 to <32 x i16>*
  store <32 x i16> %6134, <32 x i16>* %6137, align 2, !tbaa !412
  %indvars.iv.next2590.1 = or i64 %indvars.iv2589, 2
  %6138 = add nsw i64 %indvars.iv.next2590.1, %5740
  %6139 = shl nsw i64 %6138, 5
  %6140 = add nsw i64 %6139, %6117
  %6141 = getelementptr inbounds i16, i16* %5642, i64 %6140
  %6142 = bitcast i16* %6141 to <32 x i16>*
  %6143 = load <32 x i16>, <32 x i16>* %6142, align 2, !tbaa !409
  %6144 = add nsw i64 %6139, %6119
  %6145 = getelementptr inbounds i16, i16* %read_input661, i64 %6144
  %6146 = bitcast i16* %6145 to <32 x i16>*
  store <32 x i16> %6143, <32 x i16>* %6146, align 2, !tbaa !412
  %indvars.iv.next2590.2 = or i64 %indvars.iv2589, 3
  %6147 = add nsw i64 %indvars.iv.next2590.2, %5740
  %6148 = shl nsw i64 %6147, 5
  %6149 = add nsw i64 %6148, %6117
  %6150 = getelementptr inbounds i16, i16* %5642, i64 %6149
  %6151 = bitcast i16* %6150 to <32 x i16>*
  %6152 = load <32 x i16>, <32 x i16>* %6151, align 2, !tbaa !409
  %6153 = add nsw i64 %6148, %6119
  %6154 = getelementptr inbounds i16, i16* %read_input661, i64 %6153
  %6155 = bitcast i16* %6154 to <32 x i16>*
  store <32 x i16> %6152, <32 x i16>* %6155, align 2, !tbaa !412
  %indvars.iv.next2590.3 = add nuw nsw i64 %indvars.iv2589, 4
  %niter2819.nsub.3 = add i64 %niter2819, -4
  %niter2819.ncmp.3 = icmp eq i64 %niter2819.nsub.3, 0
  br i1 %niter2819.ncmp.3, label %"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased690"

"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased690", %"for read_input.s0.x.x.rebased690.preheader"
  %indvars.iv2589.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased690.preheader" ], [ %indvars.iv.next2590.3, %"for read_input.s0.x.x.rebased690" ]
  br i1 %lcmp.mod2817.not, label %"end for read_input.s0.x.x.rebased691", label %"for read_input.s0.x.x.rebased690.epil"

"for read_input.s0.x.x.rebased690.epil":          ; preds = %"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased690.epil"
  %indvars.iv2589.epil = phi i64 [ %indvars.iv.next2590.epil, %"for read_input.s0.x.x.rebased690.epil" ], [ %indvars.iv2589.unr, %"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa" ]
  %epil.iter2816 = phi i64 [ %epil.iter2816.sub, %"for read_input.s0.x.x.rebased690.epil" ], [ %xtraiter2815, %"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa" ]
  %6156 = add nsw i64 %indvars.iv2589.epil, %5740
  %6157 = shl nsw i64 %6156, 5
  %6158 = add nsw i64 %6157, %6117
  %6159 = getelementptr inbounds i16, i16* %5642, i64 %6158
  %6160 = bitcast i16* %6159 to <32 x i16>*
  %6161 = load <32 x i16>, <32 x i16>* %6160, align 2, !tbaa !409
  %6162 = add nsw i64 %6157, %6119
  %6163 = getelementptr inbounds i16, i16* %read_input661, i64 %6162
  %6164 = bitcast i16* %6163 to <32 x i16>*
  store <32 x i16> %6161, <32 x i16>* %6164, align 2, !tbaa !412
  %indvars.iv.next2590.epil = add nuw nsw i64 %indvars.iv2589.epil, 1
  %epil.iter2816.sub = add i64 %epil.iter2816, -1
  %epil.iter2816.cmp.not = icmp eq i64 %epil.iter2816.sub, 0
  br i1 %epil.iter2816.cmp.not, label %"end for read_input.s0.x.x.rebased691", label %"for read_input.s0.x.x.rebased690.epil", !llvm.loop !427

"end for read_input.s0.x.x.rebased691":           ; preds = %"end for read_input.s0.x.x.rebased691.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased690.epil", %"end for read_input.s0.x.x685"
  br i1 %5648, label %"for read_input.s0.x.x.rebased695.preheader", label %"end for read_input.s0.x.x.rebased696", !prof !406

"for read_input.s0.x.x.rebased695.preheader":     ; preds = %"end for read_input.s0.x.x.rebased691"
  %6165 = trunc i64 %5946 to i32
  %6166 = insertelement <32 x i32> undef, i32 %6165, i32 0
  %6167 = shufflevector <32 x i32> %6166, <32 x i32> undef, <32 x i32> zeroinitializer
  %6168 = add nuw nsw i64 %5784, %indvars.iv2592
  %6169 = mul nsw i64 %6168, %5646
  br label %"for read_input.s0.x.x.rebased695"

"for read_input.s0.x.x.rebased695":               ; preds = %"for read_input.s0.x.x.rebased695.preheader", %"for read_input.s0.x.x.rebased695"
  %read_input.s0.x.x.rebased697 = phi i32 [ %6327, %"for read_input.s0.x.x.rebased695" ], [ 0, %"for read_input.s0.x.x.rebased695.preheader" ]
  %6170 = add nsw i32 %read_input.s0.x.x.rebased697, %t892651
  %a185 = shl nsw i32 %6170, 5
  %6171 = icmp sgt i32 %b172, %a185
  %read_input.s0.x.v2.base.s698 = select i1 %6171, i32 %a185, i32 %b172
  %6172 = add nsw i32 %read_input.s0.x.v2.base.s698, %5422
  %6173 = insertelement <32 x i32> undef, i32 %6172, i32 0
  %6174 = shufflevector <32 x i32> %6173, <32 x i32> undef, <32 x i32> zeroinitializer
  %a187 = add nsw <32 x i32> %6174, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6175 = shufflevector <32 x i32> %a187, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6176 = icmp sgt <16 x i32> %5639, %6175
  %6177 = shufflevector <32 x i32> %a187, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6178 = icmp sgt <16 x i32> %5639, %6177
  %6179 = select <16 x i1> %6176, <16 x i32> %6175, <16 x i32> %5639
  %6180 = select <16 x i1> %6178, <16 x i32> %6177, <16 x i32> %5639
  %6181 = icmp sgt <16 x i32> %6179, %5641
  %6182 = icmp sgt <16 x i32> %6180, %5641
  %6183 = select <16 x i1> %6181, <16 x i32> %6179, <16 x i32> %5641
  %6184 = select <16 x i1> %6182, <16 x i32> %6180, <16 x i32> %5641
  %6185 = shufflevector <16 x i32> %6183, <16 x i32> %6184, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6186 = add nsw <32 x i32> %6185, %6167
  %6187 = shufflevector <32 x i32> %6186, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6188 = sext <8 x i32> %6187 to <8 x i64>
  %6189 = extractelement <8 x i64> %6188, i32 0
  %6190 = getelementptr inbounds i16, i16* %5642, i64 %6189
  %6191 = load i16, i16* %6190, align 2, !tbaa !409
  %6192 = insertelement <32 x i16> undef, i16 %6191, i32 0
  %6193 = extractelement <8 x i64> %6188, i32 1
  %6194 = getelementptr inbounds i16, i16* %5642, i64 %6193
  %6195 = load i16, i16* %6194, align 2, !tbaa !409
  %6196 = insertelement <32 x i16> %6192, i16 %6195, i32 1
  %6197 = extractelement <8 x i64> %6188, i32 2
  %6198 = getelementptr inbounds i16, i16* %5642, i64 %6197
  %6199 = load i16, i16* %6198, align 2, !tbaa !409
  %6200 = insertelement <32 x i16> %6196, i16 %6199, i32 2
  %6201 = extractelement <8 x i64> %6188, i32 3
  %6202 = getelementptr inbounds i16, i16* %5642, i64 %6201
  %6203 = load i16, i16* %6202, align 2, !tbaa !409
  %6204 = insertelement <32 x i16> %6200, i16 %6203, i32 3
  %6205 = extractelement <8 x i64> %6188, i32 4
  %6206 = getelementptr inbounds i16, i16* %5642, i64 %6205
  %6207 = load i16, i16* %6206, align 2, !tbaa !409
  %6208 = insertelement <32 x i16> %6204, i16 %6207, i32 4
  %6209 = extractelement <8 x i64> %6188, i32 5
  %6210 = getelementptr inbounds i16, i16* %5642, i64 %6209
  %6211 = load i16, i16* %6210, align 2, !tbaa !409
  %6212 = insertelement <32 x i16> %6208, i16 %6211, i32 5
  %6213 = extractelement <8 x i64> %6188, i32 6
  %6214 = getelementptr inbounds i16, i16* %5642, i64 %6213
  %6215 = load i16, i16* %6214, align 2, !tbaa !409
  %6216 = insertelement <32 x i16> %6212, i16 %6215, i32 6
  %6217 = extractelement <8 x i64> %6188, i32 7
  %6218 = getelementptr inbounds i16, i16* %5642, i64 %6217
  %6219 = load i16, i16* %6218, align 2, !tbaa !409
  %6220 = insertelement <32 x i16> %6216, i16 %6219, i32 7
  %6221 = shufflevector <32 x i32> %6186, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6222 = sext <8 x i32> %6221 to <8 x i64>
  %6223 = extractelement <8 x i64> %6222, i32 0
  %6224 = getelementptr inbounds i16, i16* %5642, i64 %6223
  %6225 = load i16, i16* %6224, align 2, !tbaa !409
  %6226 = insertelement <32 x i16> %6220, i16 %6225, i32 8
  %6227 = extractelement <8 x i64> %6222, i32 1
  %6228 = getelementptr inbounds i16, i16* %5642, i64 %6227
  %6229 = load i16, i16* %6228, align 2, !tbaa !409
  %6230 = insertelement <32 x i16> %6226, i16 %6229, i32 9
  %6231 = extractelement <8 x i64> %6222, i32 2
  %6232 = getelementptr inbounds i16, i16* %5642, i64 %6231
  %6233 = load i16, i16* %6232, align 2, !tbaa !409
  %6234 = insertelement <32 x i16> %6230, i16 %6233, i32 10
  %6235 = extractelement <8 x i64> %6222, i32 3
  %6236 = getelementptr inbounds i16, i16* %5642, i64 %6235
  %6237 = load i16, i16* %6236, align 2, !tbaa !409
  %6238 = insertelement <32 x i16> %6234, i16 %6237, i32 11
  %6239 = extractelement <8 x i64> %6222, i32 4
  %6240 = getelementptr inbounds i16, i16* %5642, i64 %6239
  %6241 = load i16, i16* %6240, align 2, !tbaa !409
  %6242 = insertelement <32 x i16> %6238, i16 %6241, i32 12
  %6243 = extractelement <8 x i64> %6222, i32 5
  %6244 = getelementptr inbounds i16, i16* %5642, i64 %6243
  %6245 = load i16, i16* %6244, align 2, !tbaa !409
  %6246 = insertelement <32 x i16> %6242, i16 %6245, i32 13
  %6247 = extractelement <8 x i64> %6222, i32 6
  %6248 = getelementptr inbounds i16, i16* %5642, i64 %6247
  %6249 = load i16, i16* %6248, align 2, !tbaa !409
  %6250 = insertelement <32 x i16> %6246, i16 %6249, i32 14
  %6251 = extractelement <8 x i64> %6222, i32 7
  %6252 = getelementptr inbounds i16, i16* %5642, i64 %6251
  %6253 = load i16, i16* %6252, align 2, !tbaa !409
  %6254 = insertelement <32 x i16> %6250, i16 %6253, i32 15
  %6255 = shufflevector <32 x i32> %6186, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6256 = sext <8 x i32> %6255 to <8 x i64>
  %6257 = extractelement <8 x i64> %6256, i32 0
  %6258 = getelementptr inbounds i16, i16* %5642, i64 %6257
  %6259 = load i16, i16* %6258, align 2, !tbaa !409
  %6260 = insertelement <32 x i16> %6254, i16 %6259, i32 16
  %6261 = extractelement <8 x i64> %6256, i32 1
  %6262 = getelementptr inbounds i16, i16* %5642, i64 %6261
  %6263 = load i16, i16* %6262, align 2, !tbaa !409
  %6264 = insertelement <32 x i16> %6260, i16 %6263, i32 17
  %6265 = extractelement <8 x i64> %6256, i32 2
  %6266 = getelementptr inbounds i16, i16* %5642, i64 %6265
  %6267 = load i16, i16* %6266, align 2, !tbaa !409
  %6268 = insertelement <32 x i16> %6264, i16 %6267, i32 18
  %6269 = extractelement <8 x i64> %6256, i32 3
  %6270 = getelementptr inbounds i16, i16* %5642, i64 %6269
  %6271 = load i16, i16* %6270, align 2, !tbaa !409
  %6272 = insertelement <32 x i16> %6268, i16 %6271, i32 19
  %6273 = extractelement <8 x i64> %6256, i32 4
  %6274 = getelementptr inbounds i16, i16* %5642, i64 %6273
  %6275 = load i16, i16* %6274, align 2, !tbaa !409
  %6276 = insertelement <32 x i16> %6272, i16 %6275, i32 20
  %6277 = extractelement <8 x i64> %6256, i32 5
  %6278 = getelementptr inbounds i16, i16* %5642, i64 %6277
  %6279 = load i16, i16* %6278, align 2, !tbaa !409
  %6280 = insertelement <32 x i16> %6276, i16 %6279, i32 21
  %6281 = extractelement <8 x i64> %6256, i32 6
  %6282 = getelementptr inbounds i16, i16* %5642, i64 %6281
  %6283 = load i16, i16* %6282, align 2, !tbaa !409
  %6284 = insertelement <32 x i16> %6280, i16 %6283, i32 22
  %6285 = extractelement <8 x i64> %6256, i32 7
  %6286 = getelementptr inbounds i16, i16* %5642, i64 %6285
  %6287 = load i16, i16* %6286, align 2, !tbaa !409
  %6288 = insertelement <32 x i16> %6284, i16 %6287, i32 23
  %6289 = shufflevector <32 x i32> %6186, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6290 = sext <8 x i32> %6289 to <8 x i64>
  %6291 = extractelement <8 x i64> %6290, i32 0
  %6292 = getelementptr inbounds i16, i16* %5642, i64 %6291
  %6293 = load i16, i16* %6292, align 2, !tbaa !409
  %6294 = insertelement <32 x i16> %6288, i16 %6293, i32 24
  %6295 = extractelement <8 x i64> %6290, i32 1
  %6296 = getelementptr inbounds i16, i16* %5642, i64 %6295
  %6297 = load i16, i16* %6296, align 2, !tbaa !409
  %6298 = insertelement <32 x i16> %6294, i16 %6297, i32 25
  %6299 = extractelement <8 x i64> %6290, i32 2
  %6300 = getelementptr inbounds i16, i16* %5642, i64 %6299
  %6301 = load i16, i16* %6300, align 2, !tbaa !409
  %6302 = insertelement <32 x i16> %6298, i16 %6301, i32 26
  %6303 = extractelement <8 x i64> %6290, i32 3
  %6304 = getelementptr inbounds i16, i16* %5642, i64 %6303
  %6305 = load i16, i16* %6304, align 2, !tbaa !409
  %6306 = insertelement <32 x i16> %6302, i16 %6305, i32 27
  %6307 = extractelement <8 x i64> %6290, i32 4
  %6308 = getelementptr inbounds i16, i16* %5642, i64 %6307
  %6309 = load i16, i16* %6308, align 2, !tbaa !409
  %6310 = insertelement <32 x i16> %6306, i16 %6309, i32 28
  %6311 = extractelement <8 x i64> %6290, i32 5
  %6312 = getelementptr inbounds i16, i16* %5642, i64 %6311
  %6313 = load i16, i16* %6312, align 2, !tbaa !409
  %6314 = insertelement <32 x i16> %6310, i16 %6313, i32 29
  %6315 = extractelement <8 x i64> %6290, i32 6
  %6316 = getelementptr inbounds i16, i16* %5642, i64 %6315
  %6317 = load i16, i16* %6316, align 2, !tbaa !409
  %6318 = insertelement <32 x i16> %6314, i16 %6317, i32 30
  %6319 = extractelement <8 x i64> %6290, i32 7
  %6320 = getelementptr inbounds i16, i16* %5642, i64 %6319
  %6321 = load i16, i16* %6320, align 2, !tbaa !409
  %6322 = insertelement <32 x i16> %6318, i16 %6321, i32 31
  %6323 = sext i32 %read_input.s0.x.v2.base.s698 to i64
  %6324 = add nsw i64 %6169, %6323
  %6325 = getelementptr inbounds i16, i16* %read_input661, i64 %6324
  %6326 = bitcast i16* %6325 to <32 x i16>*
  store <32 x i16> %6322, <32 x i16>* %6326, align 2, !tbaa !412
  %6327 = add nuw nsw i32 %read_input.s0.x.x.rebased697, 1
  %.not1845 = icmp eq i32 %6327, %t922678
  br i1 %.not1845, label %"end for read_input.s0.x.x.rebased696", label %"for read_input.s0.x.x.rebased695"

"end for read_input.s0.x.x.rebased696":           ; preds = %"for read_input.s0.x.x.rebased695", %"end for read_input.s0.x.x.rebased691"
  %indvars.iv.next2593 = add nuw nsw i64 %indvars.iv2592, 1
  %.not1844 = icmp eq i64 %indvars.iv.next2593, %5786
  br i1 %.not1844, label %"end for read_input.s0.y.rebased681", label %"for read_input.s0.y.rebased680"

"for read_input.s0.y.rebased702":                 ; preds = %"for read_input.s0.y.rebased702.preheader", %"end for read_input.s0.x.x707"
  %indvars.iv2596 = phi i64 [ 0, %"for read_input.s0.y.rebased702.preheader" ], [ %indvars.iv.next2597, %"end for read_input.s0.x.x707" ]
  %6328 = trunc i64 %indvars.iv2596 to i32
  %a194 = add nsw i32 %t935701, %6328
  %6329 = icmp sgt i32 %b171, %a194
  %a193 = select i1 %6329, i32 %a194, i32 %b171
  br i1 %5636, label %"for read_input.s0.x.x706.preheader", label %"end for read_input.s0.x.x707", !prof !406

"for read_input.s0.x.x706.preheader":             ; preds = %"for read_input.s0.y.rebased702"
  %6330 = icmp sgt i32 %a193, 0
  %6331 = select i1 %6330, i32 %a193, i32 0
  %6332 = mul nsw i32 %6331, %5439
  %t938705 = sub nsw i32 %6332, %5434
  %6333 = insertelement <32 x i32> undef, i32 %t938705, i32 0
  %6334 = shufflevector <32 x i32> %6333, <32 x i32> undef, <32 x i32> zeroinitializer
  %6335 = add nuw nsw i64 %5958, %indvars.iv2596
  %6336 = mul nsw i64 %6335, %5646
  br label %"for read_input.s0.x.x706"

"end for read_input.s0.y.rebased703":             ; preds = %"end for read_input.s0.x.x707", %"end for read_input.s0.y.rebased681"
  br i1 %5653, label %"assert succeeded711", label %"assert failed710", !prof !406

"for read_input.s0.x.x706":                       ; preds = %"for read_input.s0.x.x706.preheader", %"for read_input.s0.x.x706"
  %read_input.s0.x.x708 = phi i32 [ %6493, %"for read_input.s0.x.x706" ], [ 0, %"for read_input.s0.x.x706.preheader" ]
  %a195 = shl nsw i32 %read_input.s0.x.x708, 5
  %6337 = icmp sgt i32 %b172, %a195
  %read_input.s0.x.v2.base.s709 = select i1 %6337, i32 %a195, i32 %b172
  %6338 = add nsw i32 %read_input.s0.x.v2.base.s709, %5422
  %6339 = insertelement <32 x i32> undef, i32 %6338, i32 0
  %6340 = shufflevector <32 x i32> %6339, <32 x i32> undef, <32 x i32> zeroinitializer
  %a197 = add nsw <32 x i32> %6340, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6341 = shufflevector <32 x i32> %a197, <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6342 = icmp sgt <16 x i32> %5639, %6341
  %6343 = shufflevector <32 x i32> %a197, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6344 = icmp sgt <16 x i32> %5639, %6343
  %6345 = select <16 x i1> %6342, <16 x i32> %6341, <16 x i32> %5639
  %6346 = select <16 x i1> %6344, <16 x i32> %6343, <16 x i32> %5639
  %6347 = icmp sgt <16 x i32> %6345, %5641
  %6348 = icmp sgt <16 x i32> %6346, %5641
  %6349 = select <16 x i1> %6347, <16 x i32> %6345, <16 x i32> %5641
  %6350 = select <16 x i1> %6348, <16 x i32> %6346, <16 x i32> %5641
  %6351 = shufflevector <16 x i32> %6349, <16 x i32> %6350, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6352 = add nsw <32 x i32> %6351, %6334
  %6353 = shufflevector <32 x i32> %6352, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6354 = sext <8 x i32> %6353 to <8 x i64>
  %6355 = extractelement <8 x i64> %6354, i32 0
  %6356 = getelementptr inbounds i16, i16* %5642, i64 %6355
  %6357 = load i16, i16* %6356, align 2, !tbaa !409
  %6358 = insertelement <32 x i16> undef, i16 %6357, i32 0
  %6359 = extractelement <8 x i64> %6354, i32 1
  %6360 = getelementptr inbounds i16, i16* %5642, i64 %6359
  %6361 = load i16, i16* %6360, align 2, !tbaa !409
  %6362 = insertelement <32 x i16> %6358, i16 %6361, i32 1
  %6363 = extractelement <8 x i64> %6354, i32 2
  %6364 = getelementptr inbounds i16, i16* %5642, i64 %6363
  %6365 = load i16, i16* %6364, align 2, !tbaa !409
  %6366 = insertelement <32 x i16> %6362, i16 %6365, i32 2
  %6367 = extractelement <8 x i64> %6354, i32 3
  %6368 = getelementptr inbounds i16, i16* %5642, i64 %6367
  %6369 = load i16, i16* %6368, align 2, !tbaa !409
  %6370 = insertelement <32 x i16> %6366, i16 %6369, i32 3
  %6371 = extractelement <8 x i64> %6354, i32 4
  %6372 = getelementptr inbounds i16, i16* %5642, i64 %6371
  %6373 = load i16, i16* %6372, align 2, !tbaa !409
  %6374 = insertelement <32 x i16> %6370, i16 %6373, i32 4
  %6375 = extractelement <8 x i64> %6354, i32 5
  %6376 = getelementptr inbounds i16, i16* %5642, i64 %6375
  %6377 = load i16, i16* %6376, align 2, !tbaa !409
  %6378 = insertelement <32 x i16> %6374, i16 %6377, i32 5
  %6379 = extractelement <8 x i64> %6354, i32 6
  %6380 = getelementptr inbounds i16, i16* %5642, i64 %6379
  %6381 = load i16, i16* %6380, align 2, !tbaa !409
  %6382 = insertelement <32 x i16> %6378, i16 %6381, i32 6
  %6383 = extractelement <8 x i64> %6354, i32 7
  %6384 = getelementptr inbounds i16, i16* %5642, i64 %6383
  %6385 = load i16, i16* %6384, align 2, !tbaa !409
  %6386 = insertelement <32 x i16> %6382, i16 %6385, i32 7
  %6387 = shufflevector <32 x i32> %6352, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6388 = sext <8 x i32> %6387 to <8 x i64>
  %6389 = extractelement <8 x i64> %6388, i32 0
  %6390 = getelementptr inbounds i16, i16* %5642, i64 %6389
  %6391 = load i16, i16* %6390, align 2, !tbaa !409
  %6392 = insertelement <32 x i16> %6386, i16 %6391, i32 8
  %6393 = extractelement <8 x i64> %6388, i32 1
  %6394 = getelementptr inbounds i16, i16* %5642, i64 %6393
  %6395 = load i16, i16* %6394, align 2, !tbaa !409
  %6396 = insertelement <32 x i16> %6392, i16 %6395, i32 9
  %6397 = extractelement <8 x i64> %6388, i32 2
  %6398 = getelementptr inbounds i16, i16* %5642, i64 %6397
  %6399 = load i16, i16* %6398, align 2, !tbaa !409
  %6400 = insertelement <32 x i16> %6396, i16 %6399, i32 10
  %6401 = extractelement <8 x i64> %6388, i32 3
  %6402 = getelementptr inbounds i16, i16* %5642, i64 %6401
  %6403 = load i16, i16* %6402, align 2, !tbaa !409
  %6404 = insertelement <32 x i16> %6400, i16 %6403, i32 11
  %6405 = extractelement <8 x i64> %6388, i32 4
  %6406 = getelementptr inbounds i16, i16* %5642, i64 %6405
  %6407 = load i16, i16* %6406, align 2, !tbaa !409
  %6408 = insertelement <32 x i16> %6404, i16 %6407, i32 12
  %6409 = extractelement <8 x i64> %6388, i32 5
  %6410 = getelementptr inbounds i16, i16* %5642, i64 %6409
  %6411 = load i16, i16* %6410, align 2, !tbaa !409
  %6412 = insertelement <32 x i16> %6408, i16 %6411, i32 13
  %6413 = extractelement <8 x i64> %6388, i32 6
  %6414 = getelementptr inbounds i16, i16* %5642, i64 %6413
  %6415 = load i16, i16* %6414, align 2, !tbaa !409
  %6416 = insertelement <32 x i16> %6412, i16 %6415, i32 14
  %6417 = extractelement <8 x i64> %6388, i32 7
  %6418 = getelementptr inbounds i16, i16* %5642, i64 %6417
  %6419 = load i16, i16* %6418, align 2, !tbaa !409
  %6420 = insertelement <32 x i16> %6416, i16 %6419, i32 15
  %6421 = shufflevector <32 x i32> %6352, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6422 = sext <8 x i32> %6421 to <8 x i64>
  %6423 = extractelement <8 x i64> %6422, i32 0
  %6424 = getelementptr inbounds i16, i16* %5642, i64 %6423
  %6425 = load i16, i16* %6424, align 2, !tbaa !409
  %6426 = insertelement <32 x i16> %6420, i16 %6425, i32 16
  %6427 = extractelement <8 x i64> %6422, i32 1
  %6428 = getelementptr inbounds i16, i16* %5642, i64 %6427
  %6429 = load i16, i16* %6428, align 2, !tbaa !409
  %6430 = insertelement <32 x i16> %6426, i16 %6429, i32 17
  %6431 = extractelement <8 x i64> %6422, i32 2
  %6432 = getelementptr inbounds i16, i16* %5642, i64 %6431
  %6433 = load i16, i16* %6432, align 2, !tbaa !409
  %6434 = insertelement <32 x i16> %6430, i16 %6433, i32 18
  %6435 = extractelement <8 x i64> %6422, i32 3
  %6436 = getelementptr inbounds i16, i16* %5642, i64 %6435
  %6437 = load i16, i16* %6436, align 2, !tbaa !409
  %6438 = insertelement <32 x i16> %6434, i16 %6437, i32 19
  %6439 = extractelement <8 x i64> %6422, i32 4
  %6440 = getelementptr inbounds i16, i16* %5642, i64 %6439
  %6441 = load i16, i16* %6440, align 2, !tbaa !409
  %6442 = insertelement <32 x i16> %6438, i16 %6441, i32 20
  %6443 = extractelement <8 x i64> %6422, i32 5
  %6444 = getelementptr inbounds i16, i16* %5642, i64 %6443
  %6445 = load i16, i16* %6444, align 2, !tbaa !409
  %6446 = insertelement <32 x i16> %6442, i16 %6445, i32 21
  %6447 = extractelement <8 x i64> %6422, i32 6
  %6448 = getelementptr inbounds i16, i16* %5642, i64 %6447
  %6449 = load i16, i16* %6448, align 2, !tbaa !409
  %6450 = insertelement <32 x i16> %6446, i16 %6449, i32 22
  %6451 = extractelement <8 x i64> %6422, i32 7
  %6452 = getelementptr inbounds i16, i16* %5642, i64 %6451
  %6453 = load i16, i16* %6452, align 2, !tbaa !409
  %6454 = insertelement <32 x i16> %6450, i16 %6453, i32 23
  %6455 = shufflevector <32 x i32> %6352, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6456 = sext <8 x i32> %6455 to <8 x i64>
  %6457 = extractelement <8 x i64> %6456, i32 0
  %6458 = getelementptr inbounds i16, i16* %5642, i64 %6457
  %6459 = load i16, i16* %6458, align 2, !tbaa !409
  %6460 = insertelement <32 x i16> %6454, i16 %6459, i32 24
  %6461 = extractelement <8 x i64> %6456, i32 1
  %6462 = getelementptr inbounds i16, i16* %5642, i64 %6461
  %6463 = load i16, i16* %6462, align 2, !tbaa !409
  %6464 = insertelement <32 x i16> %6460, i16 %6463, i32 25
  %6465 = extractelement <8 x i64> %6456, i32 2
  %6466 = getelementptr inbounds i16, i16* %5642, i64 %6465
  %6467 = load i16, i16* %6466, align 2, !tbaa !409
  %6468 = insertelement <32 x i16> %6464, i16 %6467, i32 26
  %6469 = extractelement <8 x i64> %6456, i32 3
  %6470 = getelementptr inbounds i16, i16* %5642, i64 %6469
  %6471 = load i16, i16* %6470, align 2, !tbaa !409
  %6472 = insertelement <32 x i16> %6468, i16 %6471, i32 27
  %6473 = extractelement <8 x i64> %6456, i32 4
  %6474 = getelementptr inbounds i16, i16* %5642, i64 %6473
  %6475 = load i16, i16* %6474, align 2, !tbaa !409
  %6476 = insertelement <32 x i16> %6472, i16 %6475, i32 28
  %6477 = extractelement <8 x i64> %6456, i32 5
  %6478 = getelementptr inbounds i16, i16* %5642, i64 %6477
  %6479 = load i16, i16* %6478, align 2, !tbaa !409
  %6480 = insertelement <32 x i16> %6476, i16 %6479, i32 29
  %6481 = extractelement <8 x i64> %6456, i32 6
  %6482 = getelementptr inbounds i16, i16* %5642, i64 %6481
  %6483 = load i16, i16* %6482, align 2, !tbaa !409
  %6484 = insertelement <32 x i16> %6480, i16 %6483, i32 30
  %6485 = extractelement <8 x i64> %6456, i32 7
  %6486 = getelementptr inbounds i16, i16* %5642, i64 %6485
  %6487 = load i16, i16* %6486, align 2, !tbaa !409
  %6488 = insertelement <32 x i16> %6484, i16 %6487, i32 31
  %6489 = sext i32 %read_input.s0.x.v2.base.s709 to i64
  %6490 = add nsw i64 %6336, %6489
  %6491 = getelementptr inbounds i16, i16* %read_input661, i64 %6490
  %6492 = bitcast i16* %6491 to <32 x i16>*
  store <32 x i16> %6488, <32 x i16>* %6492, align 2, !tbaa !412
  %6493 = add nuw nsw i32 %read_input.s0.x.x708, 1
  %.not1843 = icmp eq i32 %6493, %b145
  br i1 %.not1843, label %"end for read_input.s0.x.x707", label %"for read_input.s0.x.x706"

"end for read_input.s0.x.x707":                   ; preds = %"for read_input.s0.x.x706", %"for read_input.s0.y.rebased702"
  %indvars.iv.next2597 = add nuw nsw i64 %indvars.iv2596, 1
  %.not1842 = icmp eq i64 %indvars.iv2596, %5959
  br i1 %.not1842, label %"end for read_input.s0.y.rebased703", label %"for read_input.s0.y.rebased702"

"assert failed710":                               ; preds = %"end for read_input.s0.y.rebased703"
  %6494 = call i32 @halide_error_buffer_allocation_too_large(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.209, i64 0, i64 0), i64 %5654, i64 2147483647) #11
  br label %destructor_block

"assert succeeded711":                            ; preds = %"end for read_input.s0.y.rebased703"
  %6495 = load i64, i64* %.fca.1.gep1506, align 8, !tbaa !407
  %cmp.i2302 = icmp ult i64 %6495, %5655
  %6496 = load i8*, i8** %.fca.0.gep1505, align 8, !tbaa !397
  br i1 %cmp.i2302, label %if.then.i2305, label %pseudostack_alloc.exit2318, !prof !408

if.then.i2305:                                    ; preds = %"assert succeeded711"
  %tobool1.not.i2304 = icmp ne i8* %6496, null
  %6497 = load i64, i64* %.fca.2.gep1507, align 8
  %cmp2.i2307 = icmp ugt i64 %6497, 16384
  %or.cond2357 = select i1 %tobool1.not.i2304, i1 %cmp2.i2307, i1 false
  br i1 %or.cond2357, label %if.then3.i2309, label %if.end.i2313

if.then3.i2309:                                   ; preds = %if.then.i2305
  call void @halide_free(i8* null, i8* nonnull %6496) #18
  br label %if.end.i2313

if.end.i2313:                                     ; preds = %if.then3.i2309, %if.then.i2305
  %add.i2311 = add i64 %6497, %5655
  store i64 %add.i2311, i64* %.fca.2.gep1507, align 8, !tbaa !399
  %cmp7.i2312 = icmp ugt i64 %add.i2311, 16384
  br i1 %cmp7.i2312, label %if.then8.i2315, label %if.end11.i2317

if.then8.i2315:                                   ; preds = %if.end.i2313
  %call.i2314 = call i8* @halide_malloc(i8* null, i64 %5655) #18
  br label %if.end11.i2317

if.end11.i2317:                                   ; preds = %if.then8.i2315, %if.end.i2313
  %storemerge.i2316 = phi i8* [ %call.i2314, %if.then8.i2315 ], [ null, %if.end.i2313 ]
  store i8* %storemerge.i2316, i8** %.fca.0.gep1505, align 8, !tbaa !397
  store i64 %5655, i64* %.fca.1.gep1506, align 8, !tbaa !407
  br label %pseudostack_alloc.exit2318

pseudostack_alloc.exit2318:                       ; preds = %"assert succeeded711", %if.end11.i2317
  %6498 = phi i8* [ %storemerge.i2316, %if.end11.i2317 ], [ %6496, %"assert succeeded711" ]
  %6499 = bitcast i8* %6498 to i16*
  %.not1645 = icmp eq i8* %6498, null
  br i1 %.not1645, label %then_bb713, label %"produce blur_x716", !prof !396

then_bb713:                                       ; preds = %pseudostack_alloc.exit2318
  %6500 = alloca i8*, i64 %5655, align 64
  %6501 = bitcast i8** %6500 to i16*
  store i8** %6500, i8*** %5657, align 8
  br label %"produce blur_x716"

"produce blur_x716":                              ; preds = %then_bb713, %pseudostack_alloc.exit2318
  %blur_x714 = phi i16* [ %6501, %then_bb713 ], [ %6499, %pseudostack_alloc.exit2318 ]
  %6502 = getelementptr inbounds i16, i16* %read_input661, i64 1
  %6503 = bitcast i16* %6502 to <32 x i16>*
  %6504 = load <32 x i16>, <32 x i16>* %6503, align 2, !tbaa !415
  %6505 = getelementptr inbounds i16, i16* %read_input661, i64 2
  %6506 = bitcast i16* %6505 to <32 x i16>*
  %6507 = load <32 x i16>, <32 x i16>* %6506, align 4, !tbaa !415
  %6508 = bitcast i16* %read_input661 to <32 x i16>*
  %6509 = load <32 x i16>, <32 x i16>* %6508, align 64, !tbaa !421
  %6510 = add <32 x i16> %6507, %6504
  %6511 = add <32 x i16> %6510, %6509
  %6512 = shufflevector <32 x i16> %6511, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6512, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6514 = shufflevector <32 x i16> %6511, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6515 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6514, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6516 = shufflevector <16 x i16> %6513, <16 x i16> %6515, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6517 = lshr <32 x i16> %6516, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6518 = and i32 %a161, 3
  %6519 = zext i32 %6518 to i64
  %6520 = mul nsw i64 %6519, %5538
  %6521 = getelementptr inbounds i16, i16* %blur_x714, i64 %6520
  %6522 = bitcast i16* %6521 to <32 x i16>*
  store <32 x i16> %6517, <32 x i16>* %6522, align 2, !tbaa !423
  %t939717 = mul nsw i32 %6518, %5423
  br i1 %5658, label %"for blur_y.s0.x.x.rebased718.preheader", label %"end for blur_y.s0.x.x.rebased719", !prof !406

"for blur_y.s0.x.x.rebased718.preheader":         ; preds = %"produce blur_x716"
  %6523 = sext i32 %t939717 to i64
  %6524 = add nsw i64 %6523, 32
  br i1 %5748, label %"end for blur_y.s0.x.x.rebased719.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased718"

"for blur_y.s0.x.x.rebased718":                   ; preds = %"for blur_y.s0.x.x.rebased718.preheader", %"for blur_y.s0.x.x.rebased718"
  %indvars.iv2598 = phi i64 [ %indvars.iv.next2599.1, %"for blur_y.s0.x.x.rebased718" ], [ 0, %"for blur_y.s0.x.x.rebased718.preheader" ]
  %niter2823 = phi i64 [ %niter2823.nsub.1, %"for blur_y.s0.x.x.rebased718" ], [ %unroll_iter2822, %"for blur_y.s0.x.x.rebased718.preheader" ]
  %6525 = shl nuw nsw i64 %indvars.iv2598, 5
  %6526 = getelementptr inbounds i16, i16* %read_input661, i64 %6525
  %6527 = getelementptr inbounds i16, i16* %6526, i64 33
  %6528 = bitcast i16* %6527 to <32 x i16>*
  %6529 = load <32 x i16>, <32 x i16>* %6528, align 2, !tbaa !412
  %6530 = getelementptr inbounds i16, i16* %6526, i64 34
  %6531 = bitcast i16* %6530 to <32 x i16>*
  %6532 = load <32 x i16>, <32 x i16>* %6531, align 4, !tbaa !412
  %6533 = getelementptr inbounds i16, i16* %6526, i64 32
  %6534 = bitcast i16* %6533 to <32 x i16>*
  %6535 = load <32 x i16>, <32 x i16>* %6534, align 64, !tbaa !412
  %6536 = add <32 x i16> %6532, %6529
  %6537 = add <32 x i16> %6536, %6535
  %6538 = shufflevector <32 x i16> %6537, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6539 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6538, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6540 = shufflevector <32 x i16> %6537, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6541 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6540, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6542 = shufflevector <16 x i16> %6539, <16 x i16> %6541, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6543 = lshr <32 x i16> %6542, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx1840 = add nsw i64 %6524, %6525
  %6544 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1840
  %6545 = bitcast i16* %6544 to <32 x i16>*
  store <32 x i16> %6543, <32 x i16>* %6545, align 2, !tbaa !423
  %indvars.iv.next2599 = shl i64 %indvars.iv2598, 5
  %6546 = or i64 %indvars.iv.next2599, 32
  %6547 = getelementptr inbounds i16, i16* %read_input661, i64 %6546
  %6548 = getelementptr inbounds i16, i16* %6547, i64 33
  %6549 = bitcast i16* %6548 to <32 x i16>*
  %6550 = load <32 x i16>, <32 x i16>* %6549, align 2, !tbaa !412
  %6551 = getelementptr inbounds i16, i16* %6547, i64 34
  %6552 = bitcast i16* %6551 to <32 x i16>*
  %6553 = load <32 x i16>, <32 x i16>* %6552, align 4, !tbaa !412
  %6554 = getelementptr inbounds i16, i16* %6547, i64 32
  %6555 = bitcast i16* %6554 to <32 x i16>*
  %6556 = load <32 x i16>, <32 x i16>* %6555, align 64, !tbaa !412
  %6557 = add <32 x i16> %6553, %6550
  %6558 = add <32 x i16> %6557, %6556
  %6559 = shufflevector <32 x i16> %6558, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6560 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6559, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6561 = shufflevector <32 x i16> %6558, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6562 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6561, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6563 = shufflevector <16 x i16> %6560, <16 x i16> %6562, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6564 = lshr <32 x i16> %6563, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx1840.1 = add nsw i64 %6524, %6546
  %6565 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1840.1
  %6566 = bitcast i16* %6565 to <32 x i16>*
  store <32 x i16> %6564, <32 x i16>* %6566, align 2, !tbaa !423
  %indvars.iv.next2599.1 = add nuw nsw i64 %indvars.iv2598, 2
  %niter2823.nsub.1 = add i64 %niter2823, -2
  %niter2823.ncmp.1 = icmp eq i64 %niter2823.nsub.1, 0
  br i1 %niter2823.ncmp.1, label %"end for blur_y.s0.x.x.rebased719.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased718"

"end for blur_y.s0.x.x.rebased719.loopexit.unr-lcssa": ; preds = %"for blur_y.s0.x.x.rebased718", %"for blur_y.s0.x.x.rebased718.preheader"
  %indvars.iv2598.unr = phi i64 [ 0, %"for blur_y.s0.x.x.rebased718.preheader" ], [ %indvars.iv.next2599.1, %"for blur_y.s0.x.x.rebased718" ]
  br i1 %lcmp.mod2821.not, label %"end for blur_y.s0.x.x.rebased719", label %"for blur_y.s0.x.x.rebased718.epil"

"for blur_y.s0.x.x.rebased718.epil":              ; preds = %"end for blur_y.s0.x.x.rebased719.loopexit.unr-lcssa"
  %6567 = shl nuw nsw i64 %indvars.iv2598.unr, 5
  %6568 = getelementptr inbounds i16, i16* %read_input661, i64 %6567
  %6569 = getelementptr inbounds i16, i16* %6568, i64 33
  %6570 = bitcast i16* %6569 to <32 x i16>*
  %6571 = load <32 x i16>, <32 x i16>* %6570, align 2, !tbaa !412
  %6572 = getelementptr inbounds i16, i16* %6568, i64 34
  %6573 = bitcast i16* %6572 to <32 x i16>*
  %6574 = load <32 x i16>, <32 x i16>* %6573, align 4, !tbaa !412
  %6575 = getelementptr inbounds i16, i16* %6568, i64 32
  %6576 = bitcast i16* %6575 to <32 x i16>*
  %6577 = load <32 x i16>, <32 x i16>* %6576, align 64, !tbaa !412
  %6578 = add <32 x i16> %6574, %6571
  %6579 = add <32 x i16> %6578, %6577
  %6580 = shufflevector <32 x i16> %6579, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6580, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6582 = shufflevector <32 x i16> %6579, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6582, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6584 = shufflevector <16 x i16> %6581, <16 x i16> %6583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6585 = lshr <32 x i16> %6584, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx1840.epil = add nsw i64 %6524, %6567
  %6586 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1840.epil
  %6587 = bitcast i16* %6586 to <32 x i16>*
  store <32 x i16> %6585, <32 x i16>* %6587, align 2, !tbaa !423
  br label %"end for blur_y.s0.x.x.rebased719"

"end for blur_y.s0.x.x.rebased719":               ; preds = %"for blur_y.s0.x.x.rebased718.epil", %"end for blur_y.s0.x.x.rebased719.loopexit.unr-lcssa", %"produce blur_x716"
  br i1 %.not1643, label %"produce blur_x728", label %"produce blur_x725"

"produce blur_x725":                              ; preds = %"end for blur_y.s0.x.x.rebased719"
  %6588 = getelementptr inbounds i16, i16* %read_input661, i64 %5659
  %6589 = getelementptr inbounds i16, i16* %6588, i64 1
  %6590 = bitcast i16* %6589 to <32 x i16>*
  %6591 = load <32 x i16>, <32 x i16>* %6590, align 2, !tbaa !412
  %6592 = getelementptr inbounds i16, i16* %6588, i64 2
  %6593 = bitcast i16* %6592 to <32 x i16>*
  %6594 = load <32 x i16>, <32 x i16>* %6593, align 2, !tbaa !412
  %6595 = bitcast i16* %6588 to <32 x i16>*
  %6596 = load <32 x i16>, <32 x i16>* %6595, align 2, !tbaa !412
  %6597 = add <32 x i16> %6594, %6591
  %6598 = add <32 x i16> %6597, %6596
  %6599 = shufflevector <32 x i16> %6598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6600 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6599, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6601 = shufflevector <32 x i16> %6598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6602 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6601, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6603 = shufflevector <16 x i16> %6600, <16 x i16> %6602, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6604 = lshr <32 x i16> %6603, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6605 = add nsw i64 %6520, %5659
  %6606 = getelementptr inbounds i16, i16* %blur_x714, i64 %6605
  %6607 = bitcast i16* %6606 to <32 x i16>*
  store <32 x i16> %6604, <32 x i16>* %6607, align 2, !tbaa !423
  br label %"produce blur_x728"

"produce blur_x728":                              ; preds = %"end for blur_y.s0.x.x.rebased719", %"produce blur_x725"
  %6608 = getelementptr inbounds i16, i16* %read_input661, i64 %5646
  %6609 = getelementptr inbounds i16, i16* %6608, i64 1
  %6610 = bitcast i16* %6609 to <32 x i16>*
  %6611 = load <32 x i16>, <32 x i16>* %6610, align 2, !tbaa !412
  %6612 = getelementptr inbounds i16, i16* %6608, i64 2
  %6613 = bitcast i16* %6612 to <32 x i16>*
  %6614 = load <32 x i16>, <32 x i16>* %6613, align 2, !tbaa !412
  %6615 = bitcast i16* %6608 to <32 x i16>*
  %6616 = load <32 x i16>, <32 x i16>* %6615, align 2, !tbaa !412
  %6617 = add <32 x i16> %6614, %6611
  %6618 = add <32 x i16> %6617, %6616
  %6619 = shufflevector <32 x i16> %6618, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6620 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6619, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6621 = shufflevector <32 x i16> %6618, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6621, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6623 = shufflevector <16 x i16> %6620, <16 x i16> %6622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6624 = lshr <32 x i16> %6623, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6625 = add nsw i32 %a161, 1
  %6626 = and i32 %6625, 3
  %6627 = zext i32 %6626 to i64
  %6628 = mul nsw i64 %6627, %5538
  %6629 = getelementptr inbounds i16, i16* %blur_x714, i64 %6628
  %6630 = bitcast i16* %6629 to <32 x i16>*
  store <32 x i16> %6624, <32 x i16>* %6630, align 2, !tbaa !423
  %t941729 = mul nsw i32 %6626, %5423
  br i1 %5658, label %"for blur_y.s0.x.x.rebased730.preheader", label %"end for blur_y.s0.x.x.rebased731", !prof !406

"for blur_y.s0.x.x.rebased730.preheader":         ; preds = %"produce blur_x728"
  %6631 = sext i32 %t941729 to i64
  %6632 = add nsw i64 %6631, 32
  br i1 %5749, label %"end for blur_y.s0.x.x.rebased731.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased730"

"for blur_y.s0.x.x.rebased730":                   ; preds = %"for blur_y.s0.x.x.rebased730.preheader", %"for blur_y.s0.x.x.rebased730"
  %indvars.iv2600 = phi i64 [ %indvars.iv.next2601.1, %"for blur_y.s0.x.x.rebased730" ], [ 0, %"for blur_y.s0.x.x.rebased730.preheader" ]
  %niter2827 = phi i64 [ %niter2827.nsub.1, %"for blur_y.s0.x.x.rebased730" ], [ %unroll_iter2826, %"for blur_y.s0.x.x.rebased730.preheader" ]
  %6633 = shl nsw i64 %indvars.iv2600, 5
  %6634 = add nsw i64 %6633, %5646
  %6635 = getelementptr inbounds i16, i16* %read_input661, i64 %6634
  %6636 = getelementptr inbounds i16, i16* %6635, i64 33
  %6637 = bitcast i16* %6636 to <32 x i16>*
  %6638 = load <32 x i16>, <32 x i16>* %6637, align 2, !tbaa !412
  %6639 = getelementptr inbounds i16, i16* %6635, i64 34
  %6640 = bitcast i16* %6639 to <32 x i16>*
  %6641 = load <32 x i16>, <32 x i16>* %6640, align 2, !tbaa !412
  %6642 = getelementptr inbounds i16, i16* %6635, i64 32
  %6643 = bitcast i16* %6642 to <32 x i16>*
  %6644 = load <32 x i16>, <32 x i16>* %6643, align 2, !tbaa !412
  %6645 = add <32 x i16> %6641, %6638
  %6646 = add <32 x i16> %6645, %6644
  %6647 = shufflevector <32 x i16> %6646, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6648 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6647, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6649 = shufflevector <32 x i16> %6646, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6650 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6649, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6651 = shufflevector <16 x i16> %6648, <16 x i16> %6650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6652 = lshr <32 x i16> %6651, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx1838 = add nsw i64 %6632, %6633
  %6653 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1838
  %6654 = bitcast i16* %6653 to <32 x i16>*
  store <32 x i16> %6652, <32 x i16>* %6654, align 2, !tbaa !423
  %indvars.iv.next2601 = shl i64 %indvars.iv2600, 5
  %6655 = or i64 %indvars.iv.next2601, 32
  %6656 = add nsw i64 %6655, %5646
  %6657 = getelementptr inbounds i16, i16* %read_input661, i64 %6656
  %6658 = getelementptr inbounds i16, i16* %6657, i64 33
  %6659 = bitcast i16* %6658 to <32 x i16>*
  %6660 = load <32 x i16>, <32 x i16>* %6659, align 2, !tbaa !412
  %6661 = getelementptr inbounds i16, i16* %6657, i64 34
  %6662 = bitcast i16* %6661 to <32 x i16>*
  %6663 = load <32 x i16>, <32 x i16>* %6662, align 2, !tbaa !412
  %6664 = getelementptr inbounds i16, i16* %6657, i64 32
  %6665 = bitcast i16* %6664 to <32 x i16>*
  %6666 = load <32 x i16>, <32 x i16>* %6665, align 2, !tbaa !412
  %6667 = add <32 x i16> %6663, %6660
  %6668 = add <32 x i16> %6667, %6666
  %6669 = shufflevector <32 x i16> %6668, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6669, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6671 = shufflevector <32 x i16> %6668, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6672 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6671, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6673 = shufflevector <16 x i16> %6670, <16 x i16> %6672, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6674 = lshr <32 x i16> %6673, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx1838.1 = add nsw i64 %6632, %6655
  %6675 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1838.1
  %6676 = bitcast i16* %6675 to <32 x i16>*
  store <32 x i16> %6674, <32 x i16>* %6676, align 2, !tbaa !423
  %indvars.iv.next2601.1 = add nuw nsw i64 %indvars.iv2600, 2
  %niter2827.nsub.1 = add i64 %niter2827, -2
  %niter2827.ncmp.1 = icmp eq i64 %niter2827.nsub.1, 0
  br i1 %niter2827.ncmp.1, label %"end for blur_y.s0.x.x.rebased731.loopexit.unr-lcssa", label %"for blur_y.s0.x.x.rebased730"

"end for blur_y.s0.x.x.rebased731.loopexit.unr-lcssa": ; preds = %"for blur_y.s0.x.x.rebased730", %"for blur_y.s0.x.x.rebased730.preheader"
  %indvars.iv2600.unr = phi i64 [ 0, %"for blur_y.s0.x.x.rebased730.preheader" ], [ %indvars.iv.next2601.1, %"for blur_y.s0.x.x.rebased730" ]
  br i1 %lcmp.mod2825.not, label %"end for blur_y.s0.x.x.rebased731", label %"for blur_y.s0.x.x.rebased730.epil"

"for blur_y.s0.x.x.rebased730.epil":              ; preds = %"end for blur_y.s0.x.x.rebased731.loopexit.unr-lcssa"
  %6677 = shl nsw i64 %indvars.iv2600.unr, 5
  %6678 = add nsw i64 %6677, %5646
  %6679 = getelementptr inbounds i16, i16* %read_input661, i64 %6678
  %6680 = getelementptr inbounds i16, i16* %6679, i64 33
  %6681 = bitcast i16* %6680 to <32 x i16>*
  %6682 = load <32 x i16>, <32 x i16>* %6681, align 2, !tbaa !412
  %6683 = getelementptr inbounds i16, i16* %6679, i64 34
  %6684 = bitcast i16* %6683 to <32 x i16>*
  %6685 = load <32 x i16>, <32 x i16>* %6684, align 2, !tbaa !412
  %6686 = getelementptr inbounds i16, i16* %6679, i64 32
  %6687 = bitcast i16* %6686 to <32 x i16>*
  %6688 = load <32 x i16>, <32 x i16>* %6687, align 2, !tbaa !412
  %6689 = add <32 x i16> %6685, %6682
  %6690 = add <32 x i16> %6689, %6688
  %6691 = shufflevector <32 x i16> %6690, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6691, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6693 = shufflevector <32 x i16> %6690, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6693, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6695 = shufflevector <16 x i16> %6692, <16 x i16> %6694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6696 = lshr <32 x i16> %6695, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %.idx1838.epil = add nsw i64 %6632, %6677
  %6697 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1838.epil
  %6698 = bitcast i16* %6697 to <32 x i16>*
  store <32 x i16> %6696, <32 x i16>* %6698, align 2, !tbaa !423
  br label %"end for blur_y.s0.x.x.rebased731"

"end for blur_y.s0.x.x.rebased731":               ; preds = %"for blur_y.s0.x.x.rebased730.epil", %"end for blur_y.s0.x.x.rebased731.loopexit.unr-lcssa", %"produce blur_x728"
  br i1 %.not1643, label %"produce blur_x741", label %"produce blur_x738"

"produce blur_x738":                              ; preds = %"end for blur_y.s0.x.x.rebased731"
  %6699 = getelementptr inbounds i16, i16* %read_input661, i64 %5662
  %6700 = getelementptr inbounds i16, i16* %6699, i64 1
  %6701 = bitcast i16* %6700 to <32 x i16>*
  %6702 = load <32 x i16>, <32 x i16>* %6701, align 2, !tbaa !412
  %6703 = getelementptr inbounds i16, i16* %6699, i64 2
  %6704 = bitcast i16* %6703 to <32 x i16>*
  %6705 = load <32 x i16>, <32 x i16>* %6704, align 2, !tbaa !412
  %6706 = bitcast i16* %6699 to <32 x i16>*
  %6707 = load <32 x i16>, <32 x i16>* %6706, align 2, !tbaa !412
  %6708 = add <32 x i16> %6705, %6702
  %6709 = add <32 x i16> %6708, %6707
  %6710 = shufflevector <32 x i16> %6709, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6710, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6712 = shufflevector <32 x i16> %6709, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6713 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6712, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6714 = shufflevector <16 x i16> %6711, <16 x i16> %6713, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6715 = lshr <32 x i16> %6714, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6716 = add nsw i64 %6628, %5659
  %6717 = getelementptr inbounds i16, i16* %blur_x714, i64 %6716
  %6718 = bitcast i16* %6717 to <32 x i16>*
  store <32 x i16> %6715, <32 x i16>* %6718, align 2, !tbaa !423
  br label %"produce blur_x741"

"produce blur_x741":                              ; preds = %"end for blur_y.s0.x.x.rebased731", %"produce blur_x738"
  %6719 = getelementptr inbounds i16, i16* %read_input661, i64 %5663
  %6720 = getelementptr inbounds i16, i16* %6719, i64 1
  %6721 = bitcast i16* %6720 to <32 x i16>*
  %6722 = load <32 x i16>, <32 x i16>* %6721, align 2, !tbaa !412
  %6723 = getelementptr inbounds i16, i16* %6719, i64 2
  %6724 = bitcast i16* %6723 to <32 x i16>*
  %6725 = load <32 x i16>, <32 x i16>* %6724, align 4, !tbaa !412
  %6726 = bitcast i16* %6719 to <32 x i16>*
  %6727 = load <32 x i16>, <32 x i16>* %6726, align 4, !tbaa !412
  %6728 = add <32 x i16> %6725, %6722
  %6729 = add <32 x i16> %6728, %6727
  %6730 = shufflevector <32 x i16> %6729, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6730, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6732 = shufflevector <32 x i16> %6729, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6733 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6732, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6734 = shufflevector <16 x i16> %6731, <16 x i16> %6733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6735 = lshr <32 x i16> %6734, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6736 = add nsw i32 %a161, 2
  %6737 = and i32 %6736, 3
  %6738 = zext i32 %6737 to i64
  %6739 = mul nsw i64 %6738, %5538
  %6740 = getelementptr inbounds i16, i16* %blur_x714, i64 %6739
  %6741 = bitcast i16* %6740 to <32 x i16>*
  store <32 x i16> %6735, <32 x i16>* %6741, align 2, !tbaa !423
  %6742 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %6743 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %6744 = add <32 x i16> %6742, %6735
  %6745 = add <32 x i16> %6744, %6743
  %6746 = shufflevector <32 x i16> %6745, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6746, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6748 = shufflevector <32 x i16> %6745, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6748, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6750 = shufflevector <16 x i16> %6747, <16 x i16> %6749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6751 = lshr <32 x i16> %6750, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6752 = sext i32 %blur_y.s0.y.yi.base.s6562484 to i64
  %6753 = mul nsw i64 %6752, %5542
  %6754 = getelementptr inbounds i16, i16* %5664, i64 %6753
  %6755 = bitcast i16* %6754 to <32 x i16>*
  store <32 x i16> %6751, <32 x i16>* %6755, align 2, !tbaa !425
  %t942745 = mul nsw i32 %6737, %5423
  br i1 %5658, label %"for blur_y.s0.x.x.rebased747.preheader", label %"end for blur_y.s0.x.x.rebased748", !prof !406

"for blur_y.s0.x.x.rebased747.preheader":         ; preds = %"produce blur_x741"
  %6756 = sext i32 %t942745 to i64
  %6757 = add nsw i64 %6756, 32
  %6758 = add nsw i64 %6628, 32
  %6759 = add nsw i64 %6739, 32
  %6760 = add nsw i64 %6520, 32
  %6761 = sext i32 %a161 to i64
  %6762 = mul nsw i64 %6761, %5542
  br label %"for blur_y.s0.x.x.rebased747"

"for blur_y.s0.x.x.rebased747":                   ; preds = %"for blur_y.s0.x.x.rebased747.preheader", %"consume blur_x755"
  %indvars.iv2603 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased747.preheader" ], [ %indvars.iv.next2604, %"consume blur_x755" ]
  %6763 = trunc i64 %indvars.iv2603 to i32
  %6764 = shl nsw i32 %6763, 5
  %6765 = icmp sgt i32 %b156, %6764
  br i1 %6765, label %"produce blur_x753", label %"for blur_y.s0.x.x.rebased747.consume blur_x755_crit_edge"

"for blur_y.s0.x.x.rebased747.consume blur_x755_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased747"
  %.pre2670 = shl nuw nsw i64 %indvars.iv2603, 5
  br label %"consume blur_x755"

"end for blur_y.s0.x.x.rebased748":               ; preds = %"consume blur_x755", %"produce blur_x741"
  br i1 %.not1643, label %"produce blur_x764", label %"produce blur_x759"

"produce blur_x753":                              ; preds = %"for blur_y.s0.x.x.rebased747"
  %6766 = shl nsw i32 %6763, 4
  %t783754 = add nsw i32 %6766, %a159
  %6767 = sext i32 %t783754 to i64
  %6768 = shl nsw i64 %6767, 1
  %6769 = getelementptr inbounds i16, i16* %read_input661, i64 %6768
  %6770 = getelementptr inbounds i16, i16* %6769, i64 33
  %6771 = bitcast i16* %6770 to <32 x i16>*
  %6772 = load <32 x i16>, <32 x i16>* %6771, align 2, !tbaa !412
  %6773 = getelementptr inbounds i16, i16* %6769, i64 34
  %6774 = bitcast i16* %6773 to <32 x i16>*
  %6775 = load <32 x i16>, <32 x i16>* %6774, align 4, !tbaa !412
  %6776 = getelementptr inbounds i16, i16* %6769, i64 32
  %6777 = bitcast i16* %6776 to <32 x i16>*
  %6778 = load <32 x i16>, <32 x i16>* %6777, align 4, !tbaa !412
  %6779 = add <32 x i16> %6775, %6772
  %6780 = add <32 x i16> %6779, %6778
  %6781 = shufflevector <32 x i16> %6780, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6781, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6783 = shufflevector <32 x i16> %6780, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6783, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6785 = shufflevector <16 x i16> %6782, <16 x i16> %6784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6786 = lshr <32 x i16> %6785, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6787 = shl nuw nsw i64 %indvars.iv2603, 5
  %.idx1837 = add nsw i64 %6757, %6787
  %6788 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1837
  %6789 = bitcast i16* %6788 to <32 x i16>*
  store <32 x i16> %6786, <32 x i16>* %6789, align 2, !tbaa !423
  br label %"consume blur_x755"

"consume blur_x755":                              ; preds = %"for blur_y.s0.x.x.rebased747.consume blur_x755_crit_edge", %"produce blur_x753"
  %.pre-phi = phi i64 [ %.pre2670, %"for blur_y.s0.x.x.rebased747.consume blur_x755_crit_edge" ], [ %6787, %"produce blur_x753" ]
  %.idx1832 = add nsw i64 %6758, %.pre-phi
  %6790 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1832
  %6791 = bitcast i16* %6790 to <32 x i16>*
  %6792 = load <32 x i16>, <32 x i16>* %6791, align 2, !tbaa !423
  %.idx1833 = add nsw i64 %6759, %.pre-phi
  %6793 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1833
  %6794 = bitcast i16* %6793 to <32 x i16>*
  %6795 = load <32 x i16>, <32 x i16>* %6794, align 2, !tbaa !423
  %.idx1834 = add nsw i64 %6760, %.pre-phi
  %6796 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1834
  %6797 = bitcast i16* %6796 to <32 x i16>*
  %6798 = load <32 x i16>, <32 x i16>* %6797, align 2, !tbaa !423
  %6799 = add <32 x i16> %6795, %6792
  %6800 = add <32 x i16> %6799, %6798
  %6801 = shufflevector <32 x i16> %6800, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6802 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6801, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6803 = shufflevector <32 x i16> %6800, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6803, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6805 = shufflevector <16 x i16> %6802, <16 x i16> %6804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6806 = lshr <32 x i16> %6805, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6807 = add nuw nsw i64 %.pre-phi, 32
  %6808 = add nsw i64 %6807, %5665
  %.idx1835 = add i64 %6808, %6762
  %6809 = getelementptr inbounds i16, i16* %5664, i64 %.idx1835
  %6810 = bitcast i16* %6809 to <32 x i16>*
  store <32 x i16> %6806, <32 x i16>* %6810, align 2, !tbaa !425
  %indvars.iv.next2604 = add nuw nsw i64 %indvars.iv2603, 1
  %.not1836 = icmp eq i64 %indvars.iv.next2604, %5744
  br i1 %.not1836, label %"end for blur_y.s0.x.x.rebased748", label %"for blur_y.s0.x.x.rebased747"

"produce blur_x759":                              ; preds = %"end for blur_y.s0.x.x.rebased748"
  %6811 = getelementptr inbounds i16, i16* %read_input661, i64 %5666
  %6812 = getelementptr inbounds i16, i16* %6811, i64 1
  %6813 = bitcast i16* %6812 to <32 x i16>*
  %6814 = load <32 x i16>, <32 x i16>* %6813, align 2, !tbaa !412
  %6815 = getelementptr inbounds i16, i16* %6811, i64 2
  %6816 = bitcast i16* %6815 to <32 x i16>*
  %6817 = load <32 x i16>, <32 x i16>* %6816, align 2, !tbaa !412
  %6818 = bitcast i16* %6811 to <32 x i16>*
  %6819 = load <32 x i16>, <32 x i16>* %6818, align 2, !tbaa !412
  %6820 = add <32 x i16> %6817, %6814
  %6821 = add <32 x i16> %6820, %6819
  %6822 = shufflevector <32 x i16> %6821, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6823 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6822, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6824 = shufflevector <32 x i16> %6821, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6825 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6824, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6826 = shufflevector <16 x i16> %6823, <16 x i16> %6825, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6827 = lshr <32 x i16> %6826, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6828 = add nsw i64 %6739, %5659
  %6829 = getelementptr inbounds i16, i16* %blur_x714, i64 %6828
  %6830 = bitcast i16* %6829 to <32 x i16>*
  store <32 x i16> %6827, <32 x i16>* %6830, align 2, !tbaa !423
  %6831 = add nsw i64 %6628, %5659
  %6832 = getelementptr inbounds i16, i16* %blur_x714, i64 %6831
  %6833 = bitcast i16* %6832 to <32 x i16>*
  %6834 = load <32 x i16>, <32 x i16>* %6833, align 2, !tbaa !423
  %6835 = add nsw i64 %6520, %5659
  %6836 = getelementptr inbounds i16, i16* %blur_x714, i64 %6835
  %6837 = bitcast i16* %6836 to <32 x i16>*
  %6838 = load <32 x i16>, <32 x i16>* %6837, align 2, !tbaa !423
  %6839 = add <32 x i16> %6834, %6827
  %6840 = add <32 x i16> %6839, %6838
  %6841 = shufflevector <32 x i16> %6840, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6842 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6841, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6843 = shufflevector <32 x i16> %6840, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6843, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6845 = shufflevector <16 x i16> %6842, <16 x i16> %6844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6846 = lshr <32 x i16> %6845, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6847 = sext i32 %a161 to i64
  %6848 = mul nsw i64 %6847, %5542
  %6849 = add nsw i64 %5668, %6848
  %6850 = getelementptr inbounds i16, i16* %5664, i64 %6849
  %6851 = bitcast i16* %6850 to <32 x i16>*
  store <32 x i16> %6846, <32 x i16>* %6851, align 2, !tbaa !425
  br label %"produce blur_x764"

"produce blur_x764":                              ; preds = %"end for blur_y.s0.x.x.rebased748", %"produce blur_x759"
  %6852 = getelementptr inbounds i16, i16* %read_input661, i64 %5669
  %6853 = getelementptr inbounds i16, i16* %6852, i64 1
  %6854 = bitcast i16* %6853 to <32 x i16>*
  %6855 = load <32 x i16>, <32 x i16>* %6854, align 2, !tbaa !412
  %6856 = getelementptr inbounds i16, i16* %6852, i64 2
  %6857 = bitcast i16* %6856 to <32 x i16>*
  %6858 = load <32 x i16>, <32 x i16>* %6857, align 2, !tbaa !412
  %6859 = bitcast i16* %6852 to <32 x i16>*
  %6860 = load <32 x i16>, <32 x i16>* %6859, align 2, !tbaa !412
  %6861 = add <32 x i16> %6858, %6855
  %6862 = add <32 x i16> %6861, %6860
  %6863 = shufflevector <32 x i16> %6862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6864 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6863, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6865 = shufflevector <32 x i16> %6862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6866 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6865, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6867 = shufflevector <16 x i16> %6864, <16 x i16> %6866, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6868 = lshr <32 x i16> %6867, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6869 = add nsw i32 %a161, 3
  %6870 = and i32 %6869, 3
  %6871 = zext i32 %6870 to i64
  %6872 = mul nsw i64 %6871, %5538
  %6873 = getelementptr inbounds i16, i16* %blur_x714, i64 %6872
  %6874 = bitcast i16* %6873 to <32 x i16>*
  store <32 x i16> %6868, <32 x i16>* %6874, align 2, !tbaa !423
  %6875 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %6876 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %6877 = add <32 x i16> %6875, %6868
  %6878 = add <32 x i16> %6877, %6876
  %6879 = shufflevector <32 x i16> %6878, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6879, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6881 = shufflevector <32 x i16> %6878, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6882 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6881, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6883 = shufflevector <16 x i16> %6880, <16 x i16> %6882, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6884 = lshr <32 x i16> %6883, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6885 = add nsw i64 %6752, 1
  %6886 = mul nsw i64 %6885, %5542
  %6887 = getelementptr inbounds i16, i16* %5664, i64 %6886
  %6888 = bitcast i16* %6887 to <32 x i16>*
  store <32 x i16> %6884, <32 x i16>* %6888, align 2, !tbaa !425
  %t947768 = mul nsw i32 %6870, %5423
  br i1 %5658, label %"for blur_y.s0.x.x.rebased771.preheader", label %"end for blur_y.s0.x.x.rebased772", !prof !406

"for blur_y.s0.x.x.rebased771.preheader":         ; preds = %"produce blur_x764"
  %6889 = sext i32 %t947768 to i64
  %6890 = add nsw i64 %6889, 32
  %6891 = add nsw i64 %6739, 32
  %6892 = add nsw i64 %6872, 32
  %6893 = add nsw i64 %6628, 32
  %6894 = sext i32 %a161 to i64
  %6895 = add nsw i64 %6894, 1
  %6896 = mul nsw i64 %6895, %5542
  br label %"for blur_y.s0.x.x.rebased771"

"for blur_y.s0.x.x.rebased771":                   ; preds = %"for blur_y.s0.x.x.rebased771.preheader", %"consume blur_x779"
  %indvars.iv2605 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased771.preheader" ], [ %indvars.iv.next2606, %"consume blur_x779" ]
  %6897 = trunc i64 %indvars.iv2605 to i32
  %6898 = shl nsw i32 %6897, 5
  %6899 = icmp sgt i32 %b156, %6898
  br i1 %6899, label %"produce blur_x777", label %"for blur_y.s0.x.x.rebased771.consume blur_x779_crit_edge"

"for blur_y.s0.x.x.rebased771.consume blur_x779_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased771"
  %.pre2671 = shl nuw nsw i64 %indvars.iv2605, 5
  br label %"consume blur_x779"

"end for blur_y.s0.x.x.rebased772":               ; preds = %"consume blur_x779", %"produce blur_x764"
  br i1 %.not1643, label %"produce blur_x788", label %"produce blur_x783"

"produce blur_x777":                              ; preds = %"for blur_y.s0.x.x.rebased771"
  %t582.s778 = add nsw i32 %6898, %t946769
  %6900 = sext i32 %t582.s778 to i64
  %6901 = getelementptr inbounds i16, i16* %read_input661, i64 %6900
  %6902 = getelementptr inbounds i16, i16* %6901, i64 33
  %6903 = bitcast i16* %6902 to <32 x i16>*
  %6904 = load <32 x i16>, <32 x i16>* %6903, align 2, !tbaa !412
  %6905 = getelementptr inbounds i16, i16* %6901, i64 34
  %6906 = bitcast i16* %6905 to <32 x i16>*
  %6907 = load <32 x i16>, <32 x i16>* %6906, align 2, !tbaa !412
  %6908 = getelementptr inbounds i16, i16* %6901, i64 32
  %6909 = bitcast i16* %6908 to <32 x i16>*
  %6910 = load <32 x i16>, <32 x i16>* %6909, align 2, !tbaa !412
  %6911 = add <32 x i16> %6907, %6904
  %6912 = add <32 x i16> %6911, %6910
  %6913 = shufflevector <32 x i16> %6912, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6913, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6915 = shufflevector <32 x i16> %6912, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6915, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6917 = shufflevector <16 x i16> %6914, <16 x i16> %6916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6918 = lshr <32 x i16> %6917, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6919 = shl nuw nsw i64 %indvars.iv2605, 5
  %.idx1831 = add nsw i64 %6890, %6919
  %6920 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1831
  %6921 = bitcast i16* %6920 to <32 x i16>*
  store <32 x i16> %6918, <32 x i16>* %6921, align 2, !tbaa !423
  br label %"consume blur_x779"

"consume blur_x779":                              ; preds = %"for blur_y.s0.x.x.rebased771.consume blur_x779_crit_edge", %"produce blur_x777"
  %.pre-phi2672 = phi i64 [ %.pre2671, %"for blur_y.s0.x.x.rebased771.consume blur_x779_crit_edge" ], [ %6919, %"produce blur_x777" ]
  %.idx1826 = add nsw i64 %6891, %.pre-phi2672
  %6922 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1826
  %6923 = bitcast i16* %6922 to <32 x i16>*
  %6924 = load <32 x i16>, <32 x i16>* %6923, align 2, !tbaa !423
  %.idx1827 = add nsw i64 %6892, %.pre-phi2672
  %6925 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1827
  %6926 = bitcast i16* %6925 to <32 x i16>*
  %6927 = load <32 x i16>, <32 x i16>* %6926, align 2, !tbaa !423
  %.idx1828 = add nsw i64 %6893, %.pre-phi2672
  %6928 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1828
  %6929 = bitcast i16* %6928 to <32 x i16>*
  %6930 = load <32 x i16>, <32 x i16>* %6929, align 2, !tbaa !423
  %6931 = add <32 x i16> %6927, %6924
  %6932 = add <32 x i16> %6931, %6930
  %6933 = shufflevector <32 x i16> %6932, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6934 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6933, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6935 = shufflevector <32 x i16> %6932, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6936 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6935, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6937 = shufflevector <16 x i16> %6934, <16 x i16> %6936, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6938 = lshr <32 x i16> %6937, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6939 = add nuw nsw i64 %.pre-phi2672, 32
  %6940 = add nsw i64 %6939, %5665
  %.idx1829 = add i64 %6940, %6896
  %6941 = getelementptr inbounds i16, i16* %5664, i64 %.idx1829
  %6942 = bitcast i16* %6941 to <32 x i16>*
  store <32 x i16> %6938, <32 x i16>* %6942, align 2, !tbaa !425
  %indvars.iv.next2606 = add nuw nsw i64 %indvars.iv2605, 1
  %.not1830 = icmp eq i64 %indvars.iv.next2606, %5744
  br i1 %.not1830, label %"end for blur_y.s0.x.x.rebased772", label %"for blur_y.s0.x.x.rebased771"

"produce blur_x783":                              ; preds = %"end for blur_y.s0.x.x.rebased772"
  %6943 = getelementptr inbounds i16, i16* %read_input661, i64 %5671
  %6944 = getelementptr inbounds i16, i16* %6943, i64 1
  %6945 = bitcast i16* %6944 to <32 x i16>*
  %6946 = load <32 x i16>, <32 x i16>* %6945, align 2, !tbaa !412
  %6947 = getelementptr inbounds i16, i16* %6943, i64 2
  %6948 = bitcast i16* %6947 to <32 x i16>*
  %6949 = load <32 x i16>, <32 x i16>* %6948, align 2, !tbaa !412
  %6950 = bitcast i16* %6943 to <32 x i16>*
  %6951 = load <32 x i16>, <32 x i16>* %6950, align 2, !tbaa !412
  %6952 = add <32 x i16> %6949, %6946
  %6953 = add <32 x i16> %6952, %6951
  %6954 = shufflevector <32 x i16> %6953, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6954, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6956 = shufflevector <32 x i16> %6953, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6956, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6958 = shufflevector <16 x i16> %6955, <16 x i16> %6957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6959 = lshr <32 x i16> %6958, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6960 = add nsw i64 %6872, %5659
  %6961 = getelementptr inbounds i16, i16* %blur_x714, i64 %6960
  %6962 = bitcast i16* %6961 to <32 x i16>*
  store <32 x i16> %6959, <32 x i16>* %6962, align 2, !tbaa !423
  %6963 = add nsw i64 %6739, %5659
  %6964 = getelementptr inbounds i16, i16* %blur_x714, i64 %6963
  %6965 = bitcast i16* %6964 to <32 x i16>*
  %6966 = load <32 x i16>, <32 x i16>* %6965, align 2, !tbaa !423
  %6967 = add nsw i64 %6628, %5659
  %6968 = getelementptr inbounds i16, i16* %blur_x714, i64 %6967
  %6969 = bitcast i16* %6968 to <32 x i16>*
  %6970 = load <32 x i16>, <32 x i16>* %6969, align 2, !tbaa !423
  %6971 = add <32 x i16> %6966, %6959
  %6972 = add <32 x i16> %6971, %6970
  %6973 = shufflevector <32 x i16> %6972, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6974 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6973, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6975 = shufflevector <32 x i16> %6972, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6976 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6975, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6977 = shufflevector <16 x i16> %6974, <16 x i16> %6976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6978 = lshr <32 x i16> %6977, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6979 = sext i32 %a161 to i64
  %6980 = add nsw i64 %6979, 1
  %6981 = mul nsw i64 %6980, %5542
  %6982 = add nsw i64 %5668, %6981
  %6983 = getelementptr inbounds i16, i16* %5664, i64 %6982
  %6984 = bitcast i16* %6983 to <32 x i16>*
  store <32 x i16> %6978, <32 x i16>* %6984, align 2, !tbaa !425
  br label %"produce blur_x788"

"produce blur_x788":                              ; preds = %"end for blur_y.s0.x.x.rebased772", %"produce blur_x783"
  %6985 = getelementptr inbounds i16, i16* %read_input661, i64 %5672
  %6986 = getelementptr inbounds i16, i16* %6985, i64 1
  %6987 = bitcast i16* %6986 to <32 x i16>*
  %6988 = load <32 x i16>, <32 x i16>* %6987, align 2, !tbaa !412
  %6989 = getelementptr inbounds i16, i16* %6985, i64 2
  %6990 = bitcast i16* %6989 to <32 x i16>*
  %6991 = load <32 x i16>, <32 x i16>* %6990, align 4, !tbaa !412
  %6992 = bitcast i16* %6985 to <32 x i16>*
  %6993 = load <32 x i16>, <32 x i16>* %6992, align 8, !tbaa !412
  %6994 = add <32 x i16> %6991, %6988
  %6995 = add <32 x i16> %6994, %6993
  %6996 = shufflevector <32 x i16> %6995, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6997 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6996, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6998 = shufflevector <32 x i16> %6995, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6999 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6998, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7000 = shufflevector <16 x i16> %6997, <16 x i16> %6999, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7001 = lshr <32 x i16> %7000, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7001, <32 x i16>* %6522, align 2, !tbaa !423
  %7002 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %7003 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %7004 = add <32 x i16> %7002, %7001
  %7005 = add <32 x i16> %7004, %7003
  %7006 = shufflevector <32 x i16> %7005, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7007 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7006, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7008 = shufflevector <32 x i16> %7005, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7008, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7010 = shufflevector <16 x i16> %7007, <16 x i16> %7009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7011 = lshr <32 x i16> %7010, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7012 = add nsw i64 %6752, 2
  %7013 = mul nsw i64 %7012, %5542
  %7014 = getelementptr inbounds i16, i16* %5664, i64 %7013
  %7015 = bitcast i16* %7014 to <32 x i16>*
  store <32 x i16> %7011, <32 x i16>* %7015, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased795.preheader", label %"end for blur_y.s0.x.x.rebased796", !prof !406

"for blur_y.s0.x.x.rebased795.preheader":         ; preds = %"produce blur_x788"
  %7016 = sext i32 %t939717 to i64
  %7017 = add nsw i64 %7016, 32
  %7018 = add nsw i64 %6872, 32
  %7019 = add nsw i64 %6520, 32
  %7020 = add nsw i64 %6739, 32
  %7021 = sext i32 %a161 to i64
  %7022 = add nsw i64 %7021, 2
  %7023 = mul nsw i64 %7022, %5542
  br label %"for blur_y.s0.x.x.rebased795"

"for blur_y.s0.x.x.rebased795":                   ; preds = %"for blur_y.s0.x.x.rebased795.preheader", %"consume blur_x803"
  %indvars.iv2607 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased795.preheader" ], [ %indvars.iv.next2608, %"consume blur_x803" ]
  %7024 = trunc i64 %indvars.iv2607 to i32
  %7025 = shl nsw i32 %7024, 5
  %7026 = icmp sgt i32 %b156, %7025
  br i1 %7026, label %"produce blur_x801", label %"for blur_y.s0.x.x.rebased795.consume blur_x803_crit_edge"

"for blur_y.s0.x.x.rebased795.consume blur_x803_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased795"
  %.pre2673 = shl nuw nsw i64 %indvars.iv2607, 5
  br label %"consume blur_x803"

"end for blur_y.s0.x.x.rebased796":               ; preds = %"consume blur_x803", %"produce blur_x788"
  br i1 %.not1643, label %"produce blur_x812", label %"produce blur_x807"

"produce blur_x801":                              ; preds = %"for blur_y.s0.x.x.rebased795"
  %7027 = shl nsw i32 %7024, 4
  %t791802 = add nsw i32 %7027, %5660
  %7028 = sext i32 %t791802 to i64
  %7029 = shl nsw i64 %7028, 1
  %7030 = getelementptr inbounds i16, i16* %read_input661, i64 %7029
  %7031 = getelementptr inbounds i16, i16* %7030, i64 33
  %7032 = bitcast i16* %7031 to <32 x i16>*
  %7033 = load <32 x i16>, <32 x i16>* %7032, align 2, !tbaa !412
  %7034 = getelementptr inbounds i16, i16* %7030, i64 34
  %7035 = bitcast i16* %7034 to <32 x i16>*
  %7036 = load <32 x i16>, <32 x i16>* %7035, align 4, !tbaa !412
  %7037 = getelementptr inbounds i16, i16* %7030, i64 32
  %7038 = bitcast i16* %7037 to <32 x i16>*
  %7039 = load <32 x i16>, <32 x i16>* %7038, align 4, !tbaa !412
  %7040 = add <32 x i16> %7036, %7033
  %7041 = add <32 x i16> %7040, %7039
  %7042 = shufflevector <32 x i16> %7041, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7043 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7042, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7044 = shufflevector <32 x i16> %7041, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7045 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7044, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7046 = shufflevector <16 x i16> %7043, <16 x i16> %7045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7047 = lshr <32 x i16> %7046, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7048 = shl nuw nsw i64 %indvars.iv2607, 5
  %.idx1825 = add nsw i64 %7017, %7048
  %7049 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1825
  %7050 = bitcast i16* %7049 to <32 x i16>*
  store <32 x i16> %7047, <32 x i16>* %7050, align 2, !tbaa !423
  br label %"consume blur_x803"

"consume blur_x803":                              ; preds = %"for blur_y.s0.x.x.rebased795.consume blur_x803_crit_edge", %"produce blur_x801"
  %.pre-phi2674 = phi i64 [ %.pre2673, %"for blur_y.s0.x.x.rebased795.consume blur_x803_crit_edge" ], [ %7048, %"produce blur_x801" ]
  %.idx1820 = add nsw i64 %7018, %.pre-phi2674
  %7051 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1820
  %7052 = bitcast i16* %7051 to <32 x i16>*
  %7053 = load <32 x i16>, <32 x i16>* %7052, align 2, !tbaa !423
  %.idx1821 = add nsw i64 %7019, %.pre-phi2674
  %7054 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1821
  %7055 = bitcast i16* %7054 to <32 x i16>*
  %7056 = load <32 x i16>, <32 x i16>* %7055, align 2, !tbaa !423
  %.idx1822 = add nsw i64 %7020, %.pre-phi2674
  %7057 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1822
  %7058 = bitcast i16* %7057 to <32 x i16>*
  %7059 = load <32 x i16>, <32 x i16>* %7058, align 2, !tbaa !423
  %7060 = add <32 x i16> %7056, %7053
  %7061 = add <32 x i16> %7060, %7059
  %7062 = shufflevector <32 x i16> %7061, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7063 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7062, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7064 = shufflevector <32 x i16> %7061, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7064, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7066 = shufflevector <16 x i16> %7063, <16 x i16> %7065, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7067 = lshr <32 x i16> %7066, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7068 = add nuw nsw i64 %.pre-phi2674, 32
  %7069 = add nsw i64 %7068, %5665
  %.idx1823 = add i64 %7069, %7023
  %7070 = getelementptr inbounds i16, i16* %5664, i64 %.idx1823
  %7071 = bitcast i16* %7070 to <32 x i16>*
  store <32 x i16> %7067, <32 x i16>* %7071, align 2, !tbaa !425
  %indvars.iv.next2608 = add nuw nsw i64 %indvars.iv2607, 1
  %.not1824 = icmp eq i64 %indvars.iv.next2608, %5744
  br i1 %.not1824, label %"end for blur_y.s0.x.x.rebased796", label %"for blur_y.s0.x.x.rebased795"

"produce blur_x807":                              ; preds = %"end for blur_y.s0.x.x.rebased796"
  %7072 = getelementptr inbounds i16, i16* %read_input661, i64 %5674
  %7073 = getelementptr inbounds i16, i16* %7072, i64 1
  %7074 = bitcast i16* %7073 to <32 x i16>*
  %7075 = load <32 x i16>, <32 x i16>* %7074, align 2, !tbaa !412
  %7076 = getelementptr inbounds i16, i16* %7072, i64 2
  %7077 = bitcast i16* %7076 to <32 x i16>*
  %7078 = load <32 x i16>, <32 x i16>* %7077, align 2, !tbaa !412
  %7079 = bitcast i16* %7072 to <32 x i16>*
  %7080 = load <32 x i16>, <32 x i16>* %7079, align 2, !tbaa !412
  %7081 = add <32 x i16> %7078, %7075
  %7082 = add <32 x i16> %7081, %7080
  %7083 = shufflevector <32 x i16> %7082, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7084 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7083, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7085 = shufflevector <32 x i16> %7082, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7086 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7085, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7087 = shufflevector <16 x i16> %7084, <16 x i16> %7086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7088 = lshr <32 x i16> %7087, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7089 = add nsw i64 %6520, %5659
  %7090 = getelementptr inbounds i16, i16* %blur_x714, i64 %7089
  %7091 = bitcast i16* %7090 to <32 x i16>*
  store <32 x i16> %7088, <32 x i16>* %7091, align 2, !tbaa !423
  %7092 = add nsw i64 %6872, %5659
  %7093 = getelementptr inbounds i16, i16* %blur_x714, i64 %7092
  %7094 = bitcast i16* %7093 to <32 x i16>*
  %7095 = load <32 x i16>, <32 x i16>* %7094, align 2, !tbaa !423
  %7096 = add nsw i64 %6739, %5659
  %7097 = getelementptr inbounds i16, i16* %blur_x714, i64 %7096
  %7098 = bitcast i16* %7097 to <32 x i16>*
  %7099 = load <32 x i16>, <32 x i16>* %7098, align 2, !tbaa !423
  %7100 = add <32 x i16> %7095, %7088
  %7101 = add <32 x i16> %7100, %7099
  %7102 = shufflevector <32 x i16> %7101, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7103 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7102, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7104 = shufflevector <32 x i16> %7101, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7105 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7104, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7106 = shufflevector <16 x i16> %7103, <16 x i16> %7105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7107 = lshr <32 x i16> %7106, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7108 = sext i32 %a161 to i64
  %7109 = add nsw i64 %7108, 2
  %7110 = mul nsw i64 %7109, %5542
  %7111 = add nsw i64 %5668, %7110
  %7112 = getelementptr inbounds i16, i16* %5664, i64 %7111
  %7113 = bitcast i16* %7112 to <32 x i16>*
  store <32 x i16> %7107, <32 x i16>* %7113, align 2, !tbaa !425
  br label %"produce blur_x812"

"produce blur_x812":                              ; preds = %"end for blur_y.s0.x.x.rebased796", %"produce blur_x807"
  %7114 = getelementptr inbounds i16, i16* %read_input661, i64 %5675
  %7115 = getelementptr inbounds i16, i16* %7114, i64 1
  %7116 = bitcast i16* %7115 to <32 x i16>*
  %7117 = load <32 x i16>, <32 x i16>* %7116, align 2, !tbaa !412
  %7118 = getelementptr inbounds i16, i16* %7114, i64 2
  %7119 = bitcast i16* %7118 to <32 x i16>*
  %7120 = load <32 x i16>, <32 x i16>* %7119, align 2, !tbaa !412
  %7121 = bitcast i16* %7114 to <32 x i16>*
  %7122 = load <32 x i16>, <32 x i16>* %7121, align 2, !tbaa !412
  %7123 = add <32 x i16> %7120, %7117
  %7124 = add <32 x i16> %7123, %7122
  %7125 = shufflevector <32 x i16> %7124, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7126 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7125, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7127 = shufflevector <32 x i16> %7124, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7128 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7127, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7129 = shufflevector <16 x i16> %7126, <16 x i16> %7128, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7130 = lshr <32 x i16> %7129, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7130, <32 x i16>* %6630, align 2, !tbaa !423
  %7131 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %7132 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %7133 = add <32 x i16> %7131, %7130
  %7134 = add <32 x i16> %7133, %7132
  %7135 = shufflevector <32 x i16> %7134, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7135, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7137 = shufflevector <32 x i16> %7134, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7137, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7139 = shufflevector <16 x i16> %7136, <16 x i16> %7138, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7140 = lshr <32 x i16> %7139, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7141 = add nsw i64 %6752, 3
  %7142 = mul nsw i64 %7141, %5542
  %7143 = getelementptr inbounds i16, i16* %5664, i64 %7142
  %7144 = bitcast i16* %7143 to <32 x i16>*
  store <32 x i16> %7140, <32 x i16>* %7144, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased819.preheader", label %"end for blur_y.s0.x.x.rebased820", !prof !406

"for blur_y.s0.x.x.rebased819.preheader":         ; preds = %"produce blur_x812"
  %7145 = sext i32 %t941729 to i64
  %7146 = add nsw i64 %7145, 32
  %7147 = add nsw i64 %6520, 32
  %7148 = add nsw i64 %6628, 32
  %7149 = add nsw i64 %6872, 32
  %7150 = sext i32 %a161 to i64
  %7151 = add nsw i64 %7150, 3
  %7152 = mul nsw i64 %7151, %5542
  br label %"for blur_y.s0.x.x.rebased819"

"for blur_y.s0.x.x.rebased819":                   ; preds = %"for blur_y.s0.x.x.rebased819.preheader", %"consume blur_x827"
  %indvars.iv2609 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased819.preheader" ], [ %indvars.iv.next2610, %"consume blur_x827" ]
  %7153 = trunc i64 %indvars.iv2609 to i32
  %7154 = shl nsw i32 %7153, 5
  %7155 = icmp sgt i32 %b156, %7154
  br i1 %7155, label %"produce blur_x825", label %"for blur_y.s0.x.x.rebased819.consume blur_x827_crit_edge"

"for blur_y.s0.x.x.rebased819.consume blur_x827_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased819"
  %.pre2675 = shl nuw nsw i64 %indvars.iv2609, 5
  br label %"consume blur_x827"

"end for blur_y.s0.x.x.rebased820":               ; preds = %"consume blur_x827", %"produce blur_x812"
  br i1 %.not1643, label %"produce blur_x836", label %"produce blur_x831"

"produce blur_x825":                              ; preds = %"for blur_y.s0.x.x.rebased819"
  %t592.s826 = add nsw i32 %7154, %t956817
  %7156 = sext i32 %t592.s826 to i64
  %7157 = getelementptr inbounds i16, i16* %read_input661, i64 %7156
  %7158 = getelementptr inbounds i16, i16* %7157, i64 33
  %7159 = bitcast i16* %7158 to <32 x i16>*
  %7160 = load <32 x i16>, <32 x i16>* %7159, align 2, !tbaa !412
  %7161 = getelementptr inbounds i16, i16* %7157, i64 34
  %7162 = bitcast i16* %7161 to <32 x i16>*
  %7163 = load <32 x i16>, <32 x i16>* %7162, align 2, !tbaa !412
  %7164 = getelementptr inbounds i16, i16* %7157, i64 32
  %7165 = bitcast i16* %7164 to <32 x i16>*
  %7166 = load <32 x i16>, <32 x i16>* %7165, align 2, !tbaa !412
  %7167 = add <32 x i16> %7163, %7160
  %7168 = add <32 x i16> %7167, %7166
  %7169 = shufflevector <32 x i16> %7168, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7170 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7169, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7171 = shufflevector <32 x i16> %7168, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7171, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7173 = shufflevector <16 x i16> %7170, <16 x i16> %7172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7174 = lshr <32 x i16> %7173, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7175 = shl nuw nsw i64 %indvars.iv2609, 5
  %.idx1819 = add nsw i64 %7146, %7175
  %7176 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1819
  %7177 = bitcast i16* %7176 to <32 x i16>*
  store <32 x i16> %7174, <32 x i16>* %7177, align 2, !tbaa !423
  br label %"consume blur_x827"

"consume blur_x827":                              ; preds = %"for blur_y.s0.x.x.rebased819.consume blur_x827_crit_edge", %"produce blur_x825"
  %.pre-phi2676 = phi i64 [ %.pre2675, %"for blur_y.s0.x.x.rebased819.consume blur_x827_crit_edge" ], [ %7175, %"produce blur_x825" ]
  %.idx1814 = add nsw i64 %7147, %.pre-phi2676
  %7178 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1814
  %7179 = bitcast i16* %7178 to <32 x i16>*
  %7180 = load <32 x i16>, <32 x i16>* %7179, align 2, !tbaa !423
  %.idx1815 = add nsw i64 %7148, %.pre-phi2676
  %7181 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1815
  %7182 = bitcast i16* %7181 to <32 x i16>*
  %7183 = load <32 x i16>, <32 x i16>* %7182, align 2, !tbaa !423
  %.idx1816 = add nsw i64 %7149, %.pre-phi2676
  %7184 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1816
  %7185 = bitcast i16* %7184 to <32 x i16>*
  %7186 = load <32 x i16>, <32 x i16>* %7185, align 2, !tbaa !423
  %7187 = add <32 x i16> %7183, %7180
  %7188 = add <32 x i16> %7187, %7186
  %7189 = shufflevector <32 x i16> %7188, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7190 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7189, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7191 = shufflevector <32 x i16> %7188, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7191, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7193 = shufflevector <16 x i16> %7190, <16 x i16> %7192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7194 = lshr <32 x i16> %7193, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7195 = add nuw nsw i64 %.pre-phi2676, 32
  %7196 = add nsw i64 %7195, %5665
  %.idx1817 = add i64 %7196, %7152
  %7197 = getelementptr inbounds i16, i16* %5664, i64 %.idx1817
  %7198 = bitcast i16* %7197 to <32 x i16>*
  store <32 x i16> %7194, <32 x i16>* %7198, align 2, !tbaa !425
  %indvars.iv.next2610 = add nuw nsw i64 %indvars.iv2609, 1
  %.not1818 = icmp eq i64 %indvars.iv.next2610, %5744
  br i1 %.not1818, label %"end for blur_y.s0.x.x.rebased820", label %"for blur_y.s0.x.x.rebased819"

"produce blur_x831":                              ; preds = %"end for blur_y.s0.x.x.rebased820"
  %7199 = getelementptr inbounds i16, i16* %read_input661, i64 %5676
  %7200 = getelementptr inbounds i16, i16* %7199, i64 1
  %7201 = bitcast i16* %7200 to <32 x i16>*
  %7202 = load <32 x i16>, <32 x i16>* %7201, align 2, !tbaa !412
  %7203 = getelementptr inbounds i16, i16* %7199, i64 2
  %7204 = bitcast i16* %7203 to <32 x i16>*
  %7205 = load <32 x i16>, <32 x i16>* %7204, align 2, !tbaa !412
  %7206 = bitcast i16* %7199 to <32 x i16>*
  %7207 = load <32 x i16>, <32 x i16>* %7206, align 2, !tbaa !412
  %7208 = add <32 x i16> %7205, %7202
  %7209 = add <32 x i16> %7208, %7207
  %7210 = shufflevector <32 x i16> %7209, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7211 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7210, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7212 = shufflevector <32 x i16> %7209, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7213 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7212, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7214 = shufflevector <16 x i16> %7211, <16 x i16> %7213, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7215 = lshr <32 x i16> %7214, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7216 = add nsw i64 %6628, %5659
  %7217 = getelementptr inbounds i16, i16* %blur_x714, i64 %7216
  %7218 = bitcast i16* %7217 to <32 x i16>*
  store <32 x i16> %7215, <32 x i16>* %7218, align 2, !tbaa !423
  %7219 = add nsw i64 %6520, %5659
  %7220 = getelementptr inbounds i16, i16* %blur_x714, i64 %7219
  %7221 = bitcast i16* %7220 to <32 x i16>*
  %7222 = load <32 x i16>, <32 x i16>* %7221, align 2, !tbaa !423
  %7223 = add nsw i64 %6872, %5659
  %7224 = getelementptr inbounds i16, i16* %blur_x714, i64 %7223
  %7225 = bitcast i16* %7224 to <32 x i16>*
  %7226 = load <32 x i16>, <32 x i16>* %7225, align 2, !tbaa !423
  %7227 = add <32 x i16> %7222, %7215
  %7228 = add <32 x i16> %7227, %7226
  %7229 = shufflevector <32 x i16> %7228, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7229, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7231 = shufflevector <32 x i16> %7228, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7231, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7233 = shufflevector <16 x i16> %7230, <16 x i16> %7232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7234 = lshr <32 x i16> %7233, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7235 = sext i32 %a161 to i64
  %7236 = add nsw i64 %7235, 3
  %7237 = mul nsw i64 %7236, %5542
  %7238 = add nsw i64 %5668, %7237
  %7239 = getelementptr inbounds i16, i16* %5664, i64 %7238
  %7240 = bitcast i16* %7239 to <32 x i16>*
  store <32 x i16> %7234, <32 x i16>* %7240, align 2, !tbaa !425
  br label %"produce blur_x836"

"produce blur_x836":                              ; preds = %"end for blur_y.s0.x.x.rebased820", %"produce blur_x831"
  %7241 = getelementptr inbounds i16, i16* %read_input661, i64 %5677
  %7242 = getelementptr inbounds i16, i16* %7241, i64 1
  %7243 = bitcast i16* %7242 to <32 x i16>*
  %7244 = load <32 x i16>, <32 x i16>* %7243, align 2, !tbaa !412
  %7245 = getelementptr inbounds i16, i16* %7241, i64 2
  %7246 = bitcast i16* %7245 to <32 x i16>*
  %7247 = load <32 x i16>, <32 x i16>* %7246, align 4, !tbaa !412
  %7248 = bitcast i16* %7241 to <32 x i16>*
  %7249 = load <32 x i16>, <32 x i16>* %7248, align 4, !tbaa !412
  %7250 = add <32 x i16> %7247, %7244
  %7251 = add <32 x i16> %7250, %7249
  %7252 = shufflevector <32 x i16> %7251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7253 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7252, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7254 = shufflevector <32 x i16> %7251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7254, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7256 = shufflevector <16 x i16> %7253, <16 x i16> %7255, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7257 = lshr <32 x i16> %7256, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7257, <32 x i16>* %6741, align 2, !tbaa !423
  %7258 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %7259 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %7260 = add <32 x i16> %7258, %7257
  %7261 = add <32 x i16> %7260, %7259
  %7262 = shufflevector <32 x i16> %7261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7263 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7262, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7264 = shufflevector <32 x i16> %7261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7264, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7266 = shufflevector <16 x i16> %7263, <16 x i16> %7265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7267 = lshr <32 x i16> %7266, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7268 = add nsw i64 %6752, 4
  %7269 = mul nsw i64 %7268, %5542
  %7270 = getelementptr inbounds i16, i16* %5664, i64 %7269
  %7271 = bitcast i16* %7270 to <32 x i16>*
  store <32 x i16> %7267, <32 x i16>* %7271, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased842.preheader", label %"end for blur_y.s0.x.x.rebased843", !prof !406

"for blur_y.s0.x.x.rebased842.preheader":         ; preds = %"produce blur_x836"
  %7272 = sext i32 %t942745 to i64
  %7273 = add nsw i64 %7272, 32
  %7274 = add nsw i64 %6628, 32
  %7275 = add nsw i64 %6739, 32
  %7276 = add nsw i64 %6520, 32
  %7277 = sext i32 %a161 to i64
  %7278 = add nsw i64 %7277, 4
  %7279 = mul nsw i64 %7278, %5542
  br label %"for blur_y.s0.x.x.rebased842"

"for blur_y.s0.x.x.rebased842":                   ; preds = %"for blur_y.s0.x.x.rebased842.preheader", %"consume blur_x850"
  %indvars.iv2611 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased842.preheader" ], [ %indvars.iv.next2612, %"consume blur_x850" ]
  %7280 = trunc i64 %indvars.iv2611 to i32
  %7281 = shl nsw i32 %7280, 5
  %7282 = icmp sgt i32 %b156, %7281
  br i1 %7282, label %"produce blur_x848", label %"for blur_y.s0.x.x.rebased842.consume blur_x850_crit_edge"

"for blur_y.s0.x.x.rebased842.consume blur_x850_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased842"
  %.pre2677 = shl nuw nsw i64 %indvars.iv2611, 5
  br label %"consume blur_x850"

"end for blur_y.s0.x.x.rebased843":               ; preds = %"consume blur_x850", %"produce blur_x836"
  br i1 %.not1643, label %"produce blur_x859", label %"produce blur_x854"

"produce blur_x848":                              ; preds = %"for blur_y.s0.x.x.rebased842"
  %7283 = shl nsw i32 %7280, 3
  %7284 = add nsw i32 %7283, %a159
  %7285 = shl nsw i32 %7284, 1
  %t798849 = add nsw i32 %7285, %a159
  %7286 = sext i32 %t798849 to i64
  %7287 = shl nsw i64 %7286, 1
  %7288 = getelementptr inbounds i16, i16* %read_input661, i64 %7287
  %7289 = getelementptr inbounds i16, i16* %7288, i64 33
  %7290 = bitcast i16* %7289 to <32 x i16>*
  %7291 = load <32 x i16>, <32 x i16>* %7290, align 2, !tbaa !412
  %7292 = getelementptr inbounds i16, i16* %7288, i64 34
  %7293 = bitcast i16* %7292 to <32 x i16>*
  %7294 = load <32 x i16>, <32 x i16>* %7293, align 4, !tbaa !412
  %7295 = getelementptr inbounds i16, i16* %7288, i64 32
  %7296 = bitcast i16* %7295 to <32 x i16>*
  %7297 = load <32 x i16>, <32 x i16>* %7296, align 4, !tbaa !412
  %7298 = add <32 x i16> %7294, %7291
  %7299 = add <32 x i16> %7298, %7297
  %7300 = shufflevector <32 x i16> %7299, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7301 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7300, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7302 = shufflevector <32 x i16> %7299, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7302, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7304 = shufflevector <16 x i16> %7301, <16 x i16> %7303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7305 = lshr <32 x i16> %7304, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7306 = shl nuw nsw i64 %indvars.iv2611, 5
  %.idx1813 = add nsw i64 %7273, %7306
  %7307 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1813
  %7308 = bitcast i16* %7307 to <32 x i16>*
  store <32 x i16> %7305, <32 x i16>* %7308, align 2, !tbaa !423
  br label %"consume blur_x850"

"consume blur_x850":                              ; preds = %"for blur_y.s0.x.x.rebased842.consume blur_x850_crit_edge", %"produce blur_x848"
  %.pre-phi2678 = phi i64 [ %.pre2677, %"for blur_y.s0.x.x.rebased842.consume blur_x850_crit_edge" ], [ %7306, %"produce blur_x848" ]
  %.idx1808 = add nsw i64 %7274, %.pre-phi2678
  %7309 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1808
  %7310 = bitcast i16* %7309 to <32 x i16>*
  %7311 = load <32 x i16>, <32 x i16>* %7310, align 2, !tbaa !423
  %.idx1809 = add nsw i64 %7275, %.pre-phi2678
  %7312 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1809
  %7313 = bitcast i16* %7312 to <32 x i16>*
  %7314 = load <32 x i16>, <32 x i16>* %7313, align 2, !tbaa !423
  %.idx1810 = add nsw i64 %7276, %.pre-phi2678
  %7315 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1810
  %7316 = bitcast i16* %7315 to <32 x i16>*
  %7317 = load <32 x i16>, <32 x i16>* %7316, align 2, !tbaa !423
  %7318 = add <32 x i16> %7314, %7311
  %7319 = add <32 x i16> %7318, %7317
  %7320 = shufflevector <32 x i16> %7319, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7321 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7320, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7322 = shufflevector <32 x i16> %7319, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7322, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7324 = shufflevector <16 x i16> %7321, <16 x i16> %7323, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7325 = lshr <32 x i16> %7324, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7326 = add nuw nsw i64 %.pre-phi2678, 32
  %7327 = add nsw i64 %7326, %5665
  %.idx1811 = add i64 %7327, %7279
  %7328 = getelementptr inbounds i16, i16* %5664, i64 %.idx1811
  %7329 = bitcast i16* %7328 to <32 x i16>*
  store <32 x i16> %7325, <32 x i16>* %7329, align 2, !tbaa !425
  %indvars.iv.next2612 = add nuw nsw i64 %indvars.iv2611, 1
  %.not1812 = icmp eq i64 %indvars.iv.next2612, %5744
  br i1 %.not1812, label %"end for blur_y.s0.x.x.rebased843", label %"for blur_y.s0.x.x.rebased842"

"produce blur_x854":                              ; preds = %"end for blur_y.s0.x.x.rebased843"
  %7330 = getelementptr inbounds i16, i16* %read_input661, i64 %5679
  %7331 = getelementptr inbounds i16, i16* %7330, i64 1
  %7332 = bitcast i16* %7331 to <32 x i16>*
  %7333 = load <32 x i16>, <32 x i16>* %7332, align 2, !tbaa !412
  %7334 = getelementptr inbounds i16, i16* %7330, i64 2
  %7335 = bitcast i16* %7334 to <32 x i16>*
  %7336 = load <32 x i16>, <32 x i16>* %7335, align 2, !tbaa !412
  %7337 = bitcast i16* %7330 to <32 x i16>*
  %7338 = load <32 x i16>, <32 x i16>* %7337, align 2, !tbaa !412
  %7339 = add <32 x i16> %7336, %7333
  %7340 = add <32 x i16> %7339, %7338
  %7341 = shufflevector <32 x i16> %7340, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7341, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7343 = shufflevector <32 x i16> %7340, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7343, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7345 = shufflevector <16 x i16> %7342, <16 x i16> %7344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7346 = lshr <32 x i16> %7345, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7347 = add nsw i64 %6739, %5659
  %7348 = getelementptr inbounds i16, i16* %blur_x714, i64 %7347
  %7349 = bitcast i16* %7348 to <32 x i16>*
  store <32 x i16> %7346, <32 x i16>* %7349, align 2, !tbaa !423
  %7350 = add nsw i64 %6628, %5659
  %7351 = getelementptr inbounds i16, i16* %blur_x714, i64 %7350
  %7352 = bitcast i16* %7351 to <32 x i16>*
  %7353 = load <32 x i16>, <32 x i16>* %7352, align 2, !tbaa !423
  %7354 = add nsw i64 %6520, %5659
  %7355 = getelementptr inbounds i16, i16* %blur_x714, i64 %7354
  %7356 = bitcast i16* %7355 to <32 x i16>*
  %7357 = load <32 x i16>, <32 x i16>* %7356, align 2, !tbaa !423
  %7358 = add <32 x i16> %7353, %7346
  %7359 = add <32 x i16> %7358, %7357
  %7360 = shufflevector <32 x i16> %7359, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7360, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7362 = shufflevector <32 x i16> %7359, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7363 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7362, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7364 = shufflevector <16 x i16> %7361, <16 x i16> %7363, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7365 = lshr <32 x i16> %7364, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7366 = sext i32 %a161 to i64
  %7367 = add nsw i64 %7366, 4
  %7368 = mul nsw i64 %7367, %5542
  %7369 = add nsw i64 %5668, %7368
  %7370 = getelementptr inbounds i16, i16* %5664, i64 %7369
  %7371 = bitcast i16* %7370 to <32 x i16>*
  store <32 x i16> %7365, <32 x i16>* %7371, align 2, !tbaa !425
  br label %"produce blur_x859"

"produce blur_x859":                              ; preds = %"end for blur_y.s0.x.x.rebased843", %"produce blur_x854"
  %7372 = getelementptr inbounds i16, i16* %read_input661, i64 %5680
  %7373 = getelementptr inbounds i16, i16* %7372, i64 1
  %7374 = bitcast i16* %7373 to <32 x i16>*
  %7375 = load <32 x i16>, <32 x i16>* %7374, align 2, !tbaa !412
  %7376 = getelementptr inbounds i16, i16* %7372, i64 2
  %7377 = bitcast i16* %7376 to <32 x i16>*
  %7378 = load <32 x i16>, <32 x i16>* %7377, align 2, !tbaa !412
  %7379 = bitcast i16* %7372 to <32 x i16>*
  %7380 = load <32 x i16>, <32 x i16>* %7379, align 2, !tbaa !412
  %7381 = add <32 x i16> %7378, %7375
  %7382 = add <32 x i16> %7381, %7380
  %7383 = shufflevector <32 x i16> %7382, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7383, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7385 = shufflevector <32 x i16> %7382, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7386 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7385, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7387 = shufflevector <16 x i16> %7384, <16 x i16> %7386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7388 = lshr <32 x i16> %7387, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7388, <32 x i16>* %6874, align 2, !tbaa !423
  %7389 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %7390 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %7391 = add <32 x i16> %7389, %7388
  %7392 = add <32 x i16> %7391, %7390
  %7393 = shufflevector <32 x i16> %7392, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7394 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7393, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7395 = shufflevector <32 x i16> %7392, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7396 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7395, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7397 = shufflevector <16 x i16> %7394, <16 x i16> %7396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7398 = lshr <32 x i16> %7397, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7399 = add nsw i64 %6752, 5
  %7400 = mul nsw i64 %7399, %5542
  %7401 = getelementptr inbounds i16, i16* %5664, i64 %7400
  %7402 = bitcast i16* %7401 to <32 x i16>*
  store <32 x i16> %7398, <32 x i16>* %7402, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased866.preheader", label %"end for blur_y.s0.x.x.rebased867", !prof !406

"for blur_y.s0.x.x.rebased866.preheader":         ; preds = %"produce blur_x859"
  %7403 = sext i32 %t947768 to i64
  %7404 = add nsw i64 %7403, 32
  %7405 = add nsw i64 %6739, 32
  %7406 = add nsw i64 %6872, 32
  %7407 = add nsw i64 %6628, 32
  %7408 = sext i32 %a161 to i64
  %7409 = add nsw i64 %7408, 5
  %7410 = mul nsw i64 %7409, %5542
  br label %"for blur_y.s0.x.x.rebased866"

"for blur_y.s0.x.x.rebased866":                   ; preds = %"for blur_y.s0.x.x.rebased866.preheader", %"consume blur_x874"
  %indvars.iv2613 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased866.preheader" ], [ %indvars.iv.next2614, %"consume blur_x874" ]
  %7411 = trunc i64 %indvars.iv2613 to i32
  %7412 = shl nsw i32 %7411, 5
  %7413 = icmp sgt i32 %b156, %7412
  br i1 %7413, label %"produce blur_x872", label %"for blur_y.s0.x.x.rebased866.consume blur_x874_crit_edge"

"for blur_y.s0.x.x.rebased866.consume blur_x874_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased866"
  %.pre2679 = shl nuw nsw i64 %indvars.iv2613, 5
  br label %"consume blur_x874"

"end for blur_y.s0.x.x.rebased867":               ; preds = %"consume blur_x874", %"produce blur_x859"
  br i1 %.not1643, label %"produce blur_x883", label %"produce blur_x878"

"produce blur_x872":                              ; preds = %"for blur_y.s0.x.x.rebased866"
  %t602.s873 = add nsw i32 %7412, %t965864
  %7414 = sext i32 %t602.s873 to i64
  %7415 = getelementptr inbounds i16, i16* %read_input661, i64 %7414
  %7416 = getelementptr inbounds i16, i16* %7415, i64 33
  %7417 = bitcast i16* %7416 to <32 x i16>*
  %7418 = load <32 x i16>, <32 x i16>* %7417, align 2, !tbaa !412
  %7419 = getelementptr inbounds i16, i16* %7415, i64 34
  %7420 = bitcast i16* %7419 to <32 x i16>*
  %7421 = load <32 x i16>, <32 x i16>* %7420, align 2, !tbaa !412
  %7422 = getelementptr inbounds i16, i16* %7415, i64 32
  %7423 = bitcast i16* %7422 to <32 x i16>*
  %7424 = load <32 x i16>, <32 x i16>* %7423, align 2, !tbaa !412
  %7425 = add <32 x i16> %7421, %7418
  %7426 = add <32 x i16> %7425, %7424
  %7427 = shufflevector <32 x i16> %7426, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7428 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7427, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7429 = shufflevector <32 x i16> %7426, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7430 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7429, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7431 = shufflevector <16 x i16> %7428, <16 x i16> %7430, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7432 = lshr <32 x i16> %7431, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7433 = shl nuw nsw i64 %indvars.iv2613, 5
  %.idx1807 = add nsw i64 %7404, %7433
  %7434 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1807
  %7435 = bitcast i16* %7434 to <32 x i16>*
  store <32 x i16> %7432, <32 x i16>* %7435, align 2, !tbaa !423
  br label %"consume blur_x874"

"consume blur_x874":                              ; preds = %"for blur_y.s0.x.x.rebased866.consume blur_x874_crit_edge", %"produce blur_x872"
  %.pre-phi2680 = phi i64 [ %.pre2679, %"for blur_y.s0.x.x.rebased866.consume blur_x874_crit_edge" ], [ %7433, %"produce blur_x872" ]
  %.idx1802 = add nsw i64 %7405, %.pre-phi2680
  %7436 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1802
  %7437 = bitcast i16* %7436 to <32 x i16>*
  %7438 = load <32 x i16>, <32 x i16>* %7437, align 2, !tbaa !423
  %.idx1803 = add nsw i64 %7406, %.pre-phi2680
  %7439 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1803
  %7440 = bitcast i16* %7439 to <32 x i16>*
  %7441 = load <32 x i16>, <32 x i16>* %7440, align 2, !tbaa !423
  %.idx1804 = add nsw i64 %7407, %.pre-phi2680
  %7442 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1804
  %7443 = bitcast i16* %7442 to <32 x i16>*
  %7444 = load <32 x i16>, <32 x i16>* %7443, align 2, !tbaa !423
  %7445 = add <32 x i16> %7441, %7438
  %7446 = add <32 x i16> %7445, %7444
  %7447 = shufflevector <32 x i16> %7446, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7448 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7447, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7449 = shufflevector <32 x i16> %7446, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7450 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7449, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7451 = shufflevector <16 x i16> %7448, <16 x i16> %7450, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7452 = lshr <32 x i16> %7451, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7453 = add nuw nsw i64 %.pre-phi2680, 32
  %7454 = add nsw i64 %7453, %5665
  %.idx1805 = add i64 %7454, %7410
  %7455 = getelementptr inbounds i16, i16* %5664, i64 %.idx1805
  %7456 = bitcast i16* %7455 to <32 x i16>*
  store <32 x i16> %7452, <32 x i16>* %7456, align 2, !tbaa !425
  %indvars.iv.next2614 = add nuw nsw i64 %indvars.iv2613, 1
  %.not1806 = icmp eq i64 %indvars.iv.next2614, %5744
  br i1 %.not1806, label %"end for blur_y.s0.x.x.rebased867", label %"for blur_y.s0.x.x.rebased866"

"produce blur_x878":                              ; preds = %"end for blur_y.s0.x.x.rebased867"
  %7457 = getelementptr inbounds i16, i16* %read_input661, i64 %5681
  %7458 = getelementptr inbounds i16, i16* %7457, i64 1
  %7459 = bitcast i16* %7458 to <32 x i16>*
  %7460 = load <32 x i16>, <32 x i16>* %7459, align 2, !tbaa !412
  %7461 = getelementptr inbounds i16, i16* %7457, i64 2
  %7462 = bitcast i16* %7461 to <32 x i16>*
  %7463 = load <32 x i16>, <32 x i16>* %7462, align 2, !tbaa !412
  %7464 = bitcast i16* %7457 to <32 x i16>*
  %7465 = load <32 x i16>, <32 x i16>* %7464, align 2, !tbaa !412
  %7466 = add <32 x i16> %7463, %7460
  %7467 = add <32 x i16> %7466, %7465
  %7468 = shufflevector <32 x i16> %7467, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7469 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7468, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7470 = shufflevector <32 x i16> %7467, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7470, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7472 = shufflevector <16 x i16> %7469, <16 x i16> %7471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7473 = lshr <32 x i16> %7472, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7474 = add nsw i64 %6872, %5659
  %7475 = getelementptr inbounds i16, i16* %blur_x714, i64 %7474
  %7476 = bitcast i16* %7475 to <32 x i16>*
  store <32 x i16> %7473, <32 x i16>* %7476, align 2, !tbaa !423
  %7477 = add nsw i64 %6739, %5659
  %7478 = getelementptr inbounds i16, i16* %blur_x714, i64 %7477
  %7479 = bitcast i16* %7478 to <32 x i16>*
  %7480 = load <32 x i16>, <32 x i16>* %7479, align 2, !tbaa !423
  %7481 = add nsw i64 %6628, %5659
  %7482 = getelementptr inbounds i16, i16* %blur_x714, i64 %7481
  %7483 = bitcast i16* %7482 to <32 x i16>*
  %7484 = load <32 x i16>, <32 x i16>* %7483, align 2, !tbaa !423
  %7485 = add <32 x i16> %7480, %7473
  %7486 = add <32 x i16> %7485, %7484
  %7487 = shufflevector <32 x i16> %7486, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7488 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7487, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7489 = shufflevector <32 x i16> %7486, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7490 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7489, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7491 = shufflevector <16 x i16> %7488, <16 x i16> %7490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7492 = lshr <32 x i16> %7491, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7493 = sext i32 %a161 to i64
  %7494 = add nsw i64 %7493, 5
  %7495 = mul nsw i64 %7494, %5542
  %7496 = add nsw i64 %5668, %7495
  %7497 = getelementptr inbounds i16, i16* %5664, i64 %7496
  %7498 = bitcast i16* %7497 to <32 x i16>*
  store <32 x i16> %7492, <32 x i16>* %7498, align 2, !tbaa !425
  br label %"produce blur_x883"

"produce blur_x883":                              ; preds = %"end for blur_y.s0.x.x.rebased867", %"produce blur_x878"
  %7499 = getelementptr inbounds i16, i16* %read_input661, i64 %5682
  %7500 = getelementptr inbounds i16, i16* %7499, i64 1
  %7501 = bitcast i16* %7500 to <32 x i16>*
  %7502 = load <32 x i16>, <32 x i16>* %7501, align 2, !tbaa !412
  %7503 = getelementptr inbounds i16, i16* %7499, i64 2
  %7504 = bitcast i16* %7503 to <32 x i16>*
  %7505 = load <32 x i16>, <32 x i16>* %7504, align 4, !tbaa !412
  %7506 = bitcast i16* %7499 to <32 x i16>*
  %7507 = load <32 x i16>, <32 x i16>* %7506, align 16, !tbaa !412
  %7508 = add <32 x i16> %7505, %7502
  %7509 = add <32 x i16> %7508, %7507
  %7510 = shufflevector <32 x i16> %7509, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7510, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7512 = shufflevector <32 x i16> %7509, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7512, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7514 = shufflevector <16 x i16> %7511, <16 x i16> %7513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7515 = lshr <32 x i16> %7514, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7515, <32 x i16>* %6522, align 2, !tbaa !423
  %7516 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %7517 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %7518 = add <32 x i16> %7516, %7515
  %7519 = add <32 x i16> %7518, %7517
  %7520 = shufflevector <32 x i16> %7519, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7521 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7520, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7522 = shufflevector <32 x i16> %7519, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7523 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7522, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7524 = shufflevector <16 x i16> %7521, <16 x i16> %7523, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7525 = lshr <32 x i16> %7524, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7526 = add nsw i64 %6752, 6
  %7527 = mul nsw i64 %7526, %5542
  %7528 = getelementptr inbounds i16, i16* %5664, i64 %7527
  %7529 = bitcast i16* %7528 to <32 x i16>*
  store <32 x i16> %7525, <32 x i16>* %7529, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased890.preheader", label %"end for blur_y.s0.x.x.rebased891", !prof !406

"for blur_y.s0.x.x.rebased890.preheader":         ; preds = %"produce blur_x883"
  %7530 = sext i32 %t939717 to i64
  %7531 = add nsw i64 %7530, 32
  %7532 = add nsw i64 %6872, 32
  %7533 = add nsw i64 %6520, 32
  %7534 = add nsw i64 %6739, 32
  %7535 = sext i32 %a161 to i64
  %7536 = add nsw i64 %7535, 6
  %7537 = mul nsw i64 %7536, %5542
  br label %"for blur_y.s0.x.x.rebased890"

"for blur_y.s0.x.x.rebased890":                   ; preds = %"for blur_y.s0.x.x.rebased890.preheader", %"consume blur_x898"
  %indvars.iv2615 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased890.preheader" ], [ %indvars.iv.next2616, %"consume blur_x898" ]
  %7538 = trunc i64 %indvars.iv2615 to i32
  %7539 = shl nsw i32 %7538, 5
  %7540 = icmp sgt i32 %b156, %7539
  br i1 %7540, label %"produce blur_x896", label %"for blur_y.s0.x.x.rebased890.consume blur_x898_crit_edge"

"for blur_y.s0.x.x.rebased890.consume blur_x898_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased890"
  %.pre2681 = shl nuw nsw i64 %indvars.iv2615, 5
  br label %"consume blur_x898"

"end for blur_y.s0.x.x.rebased891":               ; preds = %"consume blur_x898", %"produce blur_x883"
  br i1 %.not1643, label %"produce blur_x907", label %"produce blur_x902"

"produce blur_x896":                              ; preds = %"for blur_y.s0.x.x.rebased890"
  %t607.s897 = add nsw i32 %7539, %t970888
  %7541 = sext i32 %t607.s897 to i64
  %7542 = getelementptr inbounds i16, i16* %read_input661, i64 %7541
  %7543 = getelementptr inbounds i16, i16* %7542, i64 33
  %7544 = bitcast i16* %7543 to <32 x i16>*
  %7545 = load <32 x i16>, <32 x i16>* %7544, align 2, !tbaa !412
  %7546 = getelementptr inbounds i16, i16* %7542, i64 34
  %7547 = bitcast i16* %7546 to <32 x i16>*
  %7548 = load <32 x i16>, <32 x i16>* %7547, align 4, !tbaa !412
  %7549 = getelementptr inbounds i16, i16* %7542, i64 32
  %7550 = bitcast i16* %7549 to <32 x i16>*
  %7551 = load <32 x i16>, <32 x i16>* %7550, align 4, !tbaa !412
  %7552 = add <32 x i16> %7548, %7545
  %7553 = add <32 x i16> %7552, %7551
  %7554 = shufflevector <32 x i16> %7553, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7555 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7554, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7556 = shufflevector <32 x i16> %7553, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7556, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7558 = shufflevector <16 x i16> %7555, <16 x i16> %7557, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7559 = lshr <32 x i16> %7558, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7560 = shl nuw nsw i64 %indvars.iv2615, 5
  %.idx1801 = add nsw i64 %7531, %7560
  %7561 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1801
  %7562 = bitcast i16* %7561 to <32 x i16>*
  store <32 x i16> %7559, <32 x i16>* %7562, align 2, !tbaa !423
  br label %"consume blur_x898"

"consume blur_x898":                              ; preds = %"for blur_y.s0.x.x.rebased890.consume blur_x898_crit_edge", %"produce blur_x896"
  %.pre-phi2682 = phi i64 [ %.pre2681, %"for blur_y.s0.x.x.rebased890.consume blur_x898_crit_edge" ], [ %7560, %"produce blur_x896" ]
  %.idx1796 = add nsw i64 %7532, %.pre-phi2682
  %7563 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1796
  %7564 = bitcast i16* %7563 to <32 x i16>*
  %7565 = load <32 x i16>, <32 x i16>* %7564, align 2, !tbaa !423
  %.idx1797 = add nsw i64 %7533, %.pre-phi2682
  %7566 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1797
  %7567 = bitcast i16* %7566 to <32 x i16>*
  %7568 = load <32 x i16>, <32 x i16>* %7567, align 2, !tbaa !423
  %.idx1798 = add nsw i64 %7534, %.pre-phi2682
  %7569 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1798
  %7570 = bitcast i16* %7569 to <32 x i16>*
  %7571 = load <32 x i16>, <32 x i16>* %7570, align 2, !tbaa !423
  %7572 = add <32 x i16> %7568, %7565
  %7573 = add <32 x i16> %7572, %7571
  %7574 = shufflevector <32 x i16> %7573, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7575 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7574, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7576 = shufflevector <32 x i16> %7573, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7577 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7576, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7578 = shufflevector <16 x i16> %7575, <16 x i16> %7577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7579 = lshr <32 x i16> %7578, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7580 = add nuw nsw i64 %.pre-phi2682, 32
  %7581 = add nsw i64 %7580, %5665
  %.idx1799 = add i64 %7581, %7537
  %7582 = getelementptr inbounds i16, i16* %5664, i64 %.idx1799
  %7583 = bitcast i16* %7582 to <32 x i16>*
  store <32 x i16> %7579, <32 x i16>* %7583, align 2, !tbaa !425
  %indvars.iv.next2616 = add nuw nsw i64 %indvars.iv2615, 1
  %.not1800 = icmp eq i64 %indvars.iv.next2616, %5744
  br i1 %.not1800, label %"end for blur_y.s0.x.x.rebased891", label %"for blur_y.s0.x.x.rebased890"

"produce blur_x902":                              ; preds = %"end for blur_y.s0.x.x.rebased891"
  %7584 = getelementptr inbounds i16, i16* %read_input661, i64 %5683
  %7585 = getelementptr inbounds i16, i16* %7584, i64 1
  %7586 = bitcast i16* %7585 to <32 x i16>*
  %7587 = load <32 x i16>, <32 x i16>* %7586, align 2, !tbaa !412
  %7588 = getelementptr inbounds i16, i16* %7584, i64 2
  %7589 = bitcast i16* %7588 to <32 x i16>*
  %7590 = load <32 x i16>, <32 x i16>* %7589, align 2, !tbaa !412
  %7591 = bitcast i16* %7584 to <32 x i16>*
  %7592 = load <32 x i16>, <32 x i16>* %7591, align 2, !tbaa !412
  %7593 = add <32 x i16> %7590, %7587
  %7594 = add <32 x i16> %7593, %7592
  %7595 = shufflevector <32 x i16> %7594, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7595, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7597 = shufflevector <32 x i16> %7594, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7598 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7597, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7599 = shufflevector <16 x i16> %7596, <16 x i16> %7598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7600 = lshr <32 x i16> %7599, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7601 = add nsw i64 %6520, %5659
  %7602 = getelementptr inbounds i16, i16* %blur_x714, i64 %7601
  %7603 = bitcast i16* %7602 to <32 x i16>*
  store <32 x i16> %7600, <32 x i16>* %7603, align 2, !tbaa !423
  %7604 = add nsw i64 %6872, %5659
  %7605 = getelementptr inbounds i16, i16* %blur_x714, i64 %7604
  %7606 = bitcast i16* %7605 to <32 x i16>*
  %7607 = load <32 x i16>, <32 x i16>* %7606, align 2, !tbaa !423
  %7608 = add nsw i64 %6739, %5659
  %7609 = getelementptr inbounds i16, i16* %blur_x714, i64 %7608
  %7610 = bitcast i16* %7609 to <32 x i16>*
  %7611 = load <32 x i16>, <32 x i16>* %7610, align 2, !tbaa !423
  %7612 = add <32 x i16> %7607, %7600
  %7613 = add <32 x i16> %7612, %7611
  %7614 = shufflevector <32 x i16> %7613, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7615 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7614, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7616 = shufflevector <32 x i16> %7613, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7617 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7616, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7618 = shufflevector <16 x i16> %7615, <16 x i16> %7617, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7619 = lshr <32 x i16> %7618, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7620 = sext i32 %a161 to i64
  %7621 = add nsw i64 %7620, 6
  %7622 = mul nsw i64 %7621, %5542
  %7623 = add nsw i64 %5668, %7622
  %7624 = getelementptr inbounds i16, i16* %5664, i64 %7623
  %7625 = bitcast i16* %7624 to <32 x i16>*
  store <32 x i16> %7619, <32 x i16>* %7625, align 2, !tbaa !425
  br label %"produce blur_x907"

"produce blur_x907":                              ; preds = %"end for blur_y.s0.x.x.rebased891", %"produce blur_x902"
  %7626 = getelementptr inbounds i16, i16* %read_input661, i64 %5684
  %7627 = getelementptr inbounds i16, i16* %7626, i64 1
  %7628 = bitcast i16* %7627 to <32 x i16>*
  %7629 = load <32 x i16>, <32 x i16>* %7628, align 2, !tbaa !412
  %7630 = getelementptr inbounds i16, i16* %7626, i64 2
  %7631 = bitcast i16* %7630 to <32 x i16>*
  %7632 = load <32 x i16>, <32 x i16>* %7631, align 2, !tbaa !412
  %7633 = bitcast i16* %7626 to <32 x i16>*
  %7634 = load <32 x i16>, <32 x i16>* %7633, align 2, !tbaa !412
  %7635 = add <32 x i16> %7632, %7629
  %7636 = add <32 x i16> %7635, %7634
  %7637 = shufflevector <32 x i16> %7636, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7637, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7639 = shufflevector <32 x i16> %7636, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7640 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7639, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7641 = shufflevector <16 x i16> %7638, <16 x i16> %7640, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7642 = lshr <32 x i16> %7641, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7642, <32 x i16>* %6630, align 2, !tbaa !423
  %7643 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %7644 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %7645 = add <32 x i16> %7643, %7642
  %7646 = add <32 x i16> %7645, %7644
  %7647 = shufflevector <32 x i16> %7646, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7648 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7647, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7649 = shufflevector <32 x i16> %7646, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7650 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7649, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7651 = shufflevector <16 x i16> %7648, <16 x i16> %7650, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7652 = lshr <32 x i16> %7651, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7653 = add nsw i64 %6752, 7
  %7654 = mul nsw i64 %7653, %5542
  %7655 = getelementptr inbounds i16, i16* %5664, i64 %7654
  %7656 = bitcast i16* %7655 to <32 x i16>*
  store <32 x i16> %7652, <32 x i16>* %7656, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased914.preheader", label %"end for blur_y.s0.x.x.rebased915", !prof !406

"for blur_y.s0.x.x.rebased914.preheader":         ; preds = %"produce blur_x907"
  %7657 = sext i32 %t941729 to i64
  %7658 = add nsw i64 %7657, 32
  %7659 = add nsw i64 %6520, 32
  %7660 = add nsw i64 %6628, 32
  %7661 = add nsw i64 %6872, 32
  %7662 = sext i32 %a161 to i64
  %7663 = add nsw i64 %7662, 7
  %7664 = mul nsw i64 %7663, %5542
  br label %"for blur_y.s0.x.x.rebased914"

"for blur_y.s0.x.x.rebased914":                   ; preds = %"for blur_y.s0.x.x.rebased914.preheader", %"consume blur_x922"
  %indvars.iv2617 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased914.preheader" ], [ %indvars.iv.next2618, %"consume blur_x922" ]
  %7665 = trunc i64 %indvars.iv2617 to i32
  %7666 = shl nsw i32 %7665, 5
  %7667 = icmp sgt i32 %b156, %7666
  br i1 %7667, label %"produce blur_x920", label %"for blur_y.s0.x.x.rebased914.consume blur_x922_crit_edge"

"for blur_y.s0.x.x.rebased914.consume blur_x922_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased914"
  %.pre2683 = shl nuw nsw i64 %indvars.iv2617, 5
  br label %"consume blur_x922"

"end for blur_y.s0.x.x.rebased915":               ; preds = %"consume blur_x922", %"produce blur_x907"
  br i1 %.not1643, label %"produce blur_x931", label %"produce blur_x926"

"produce blur_x920":                              ; preds = %"for blur_y.s0.x.x.rebased914"
  %t612.s921 = add nsw i32 %7666, %t975912
  %7668 = sext i32 %t612.s921 to i64
  %7669 = getelementptr inbounds i16, i16* %read_input661, i64 %7668
  %7670 = getelementptr inbounds i16, i16* %7669, i64 33
  %7671 = bitcast i16* %7670 to <32 x i16>*
  %7672 = load <32 x i16>, <32 x i16>* %7671, align 2, !tbaa !412
  %7673 = getelementptr inbounds i16, i16* %7669, i64 34
  %7674 = bitcast i16* %7673 to <32 x i16>*
  %7675 = load <32 x i16>, <32 x i16>* %7674, align 2, !tbaa !412
  %7676 = getelementptr inbounds i16, i16* %7669, i64 32
  %7677 = bitcast i16* %7676 to <32 x i16>*
  %7678 = load <32 x i16>, <32 x i16>* %7677, align 2, !tbaa !412
  %7679 = add <32 x i16> %7675, %7672
  %7680 = add <32 x i16> %7679, %7678
  %7681 = shufflevector <32 x i16> %7680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7682 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7681, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7683 = shufflevector <32 x i16> %7680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7684 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7683, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7685 = shufflevector <16 x i16> %7682, <16 x i16> %7684, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7686 = lshr <32 x i16> %7685, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7687 = shl nuw nsw i64 %indvars.iv2617, 5
  %.idx1795 = add nsw i64 %7658, %7687
  %7688 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1795
  %7689 = bitcast i16* %7688 to <32 x i16>*
  store <32 x i16> %7686, <32 x i16>* %7689, align 2, !tbaa !423
  br label %"consume blur_x922"

"consume blur_x922":                              ; preds = %"for blur_y.s0.x.x.rebased914.consume blur_x922_crit_edge", %"produce blur_x920"
  %.pre-phi2684 = phi i64 [ %.pre2683, %"for blur_y.s0.x.x.rebased914.consume blur_x922_crit_edge" ], [ %7687, %"produce blur_x920" ]
  %.idx1790 = add nsw i64 %7659, %.pre-phi2684
  %7690 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1790
  %7691 = bitcast i16* %7690 to <32 x i16>*
  %7692 = load <32 x i16>, <32 x i16>* %7691, align 2, !tbaa !423
  %.idx1791 = add nsw i64 %7660, %.pre-phi2684
  %7693 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1791
  %7694 = bitcast i16* %7693 to <32 x i16>*
  %7695 = load <32 x i16>, <32 x i16>* %7694, align 2, !tbaa !423
  %.idx1792 = add nsw i64 %7661, %.pre-phi2684
  %7696 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1792
  %7697 = bitcast i16* %7696 to <32 x i16>*
  %7698 = load <32 x i16>, <32 x i16>* %7697, align 2, !tbaa !423
  %7699 = add <32 x i16> %7695, %7692
  %7700 = add <32 x i16> %7699, %7698
  %7701 = shufflevector <32 x i16> %7700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7701, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7703 = shufflevector <32 x i16> %7700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7704 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7703, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7705 = shufflevector <16 x i16> %7702, <16 x i16> %7704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7706 = lshr <32 x i16> %7705, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7707 = add nuw nsw i64 %.pre-phi2684, 32
  %7708 = add nsw i64 %7707, %5665
  %.idx1793 = add i64 %7708, %7664
  %7709 = getelementptr inbounds i16, i16* %5664, i64 %.idx1793
  %7710 = bitcast i16* %7709 to <32 x i16>*
  store <32 x i16> %7706, <32 x i16>* %7710, align 2, !tbaa !425
  %indvars.iv.next2618 = add nuw nsw i64 %indvars.iv2617, 1
  %.not1794 = icmp eq i64 %indvars.iv.next2618, %5744
  br i1 %.not1794, label %"end for blur_y.s0.x.x.rebased915", label %"for blur_y.s0.x.x.rebased914"

"produce blur_x926":                              ; preds = %"end for blur_y.s0.x.x.rebased915"
  %7711 = getelementptr inbounds i16, i16* %read_input661, i64 %5685
  %7712 = getelementptr inbounds i16, i16* %7711, i64 1
  %7713 = bitcast i16* %7712 to <32 x i16>*
  %7714 = load <32 x i16>, <32 x i16>* %7713, align 2, !tbaa !412
  %7715 = getelementptr inbounds i16, i16* %7711, i64 2
  %7716 = bitcast i16* %7715 to <32 x i16>*
  %7717 = load <32 x i16>, <32 x i16>* %7716, align 2, !tbaa !412
  %7718 = bitcast i16* %7711 to <32 x i16>*
  %7719 = load <32 x i16>, <32 x i16>* %7718, align 2, !tbaa !412
  %7720 = add <32 x i16> %7717, %7714
  %7721 = add <32 x i16> %7720, %7719
  %7722 = shufflevector <32 x i16> %7721, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7723 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7722, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7724 = shufflevector <32 x i16> %7721, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7725 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7724, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7726 = shufflevector <16 x i16> %7723, <16 x i16> %7725, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7727 = lshr <32 x i16> %7726, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7728 = add nsw i64 %6628, %5659
  %7729 = getelementptr inbounds i16, i16* %blur_x714, i64 %7728
  %7730 = bitcast i16* %7729 to <32 x i16>*
  store <32 x i16> %7727, <32 x i16>* %7730, align 2, !tbaa !423
  %7731 = add nsw i64 %6520, %5659
  %7732 = getelementptr inbounds i16, i16* %blur_x714, i64 %7731
  %7733 = bitcast i16* %7732 to <32 x i16>*
  %7734 = load <32 x i16>, <32 x i16>* %7733, align 2, !tbaa !423
  %7735 = add nsw i64 %6872, %5659
  %7736 = getelementptr inbounds i16, i16* %blur_x714, i64 %7735
  %7737 = bitcast i16* %7736 to <32 x i16>*
  %7738 = load <32 x i16>, <32 x i16>* %7737, align 2, !tbaa !423
  %7739 = add <32 x i16> %7734, %7727
  %7740 = add <32 x i16> %7739, %7738
  %7741 = shufflevector <32 x i16> %7740, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7742 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7741, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7743 = shufflevector <32 x i16> %7740, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7743, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7745 = shufflevector <16 x i16> %7742, <16 x i16> %7744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7746 = lshr <32 x i16> %7745, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7747 = sext i32 %a161 to i64
  %7748 = add nsw i64 %7747, 7
  %7749 = mul nsw i64 %7748, %5542
  %7750 = add nsw i64 %5668, %7749
  %7751 = getelementptr inbounds i16, i16* %5664, i64 %7750
  %7752 = bitcast i16* %7751 to <32 x i16>*
  store <32 x i16> %7746, <32 x i16>* %7752, align 2, !tbaa !425
  br label %"produce blur_x931"

"produce blur_x931":                              ; preds = %"end for blur_y.s0.x.x.rebased915", %"produce blur_x926"
  %7753 = getelementptr inbounds i16, i16* %read_input661, i64 %5686
  %7754 = getelementptr inbounds i16, i16* %7753, i64 1
  %7755 = bitcast i16* %7754 to <32 x i16>*
  %7756 = load <32 x i16>, <32 x i16>* %7755, align 2, !tbaa !412
  %7757 = getelementptr inbounds i16, i16* %7753, i64 2
  %7758 = bitcast i16* %7757 to <32 x i16>*
  %7759 = load <32 x i16>, <32 x i16>* %7758, align 4, !tbaa !412
  %7760 = bitcast i16* %7753 to <32 x i16>*
  %7761 = load <32 x i16>, <32 x i16>* %7760, align 4, !tbaa !412
  %7762 = add <32 x i16> %7759, %7756
  %7763 = add <32 x i16> %7762, %7761
  %7764 = shufflevector <32 x i16> %7763, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7765 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7764, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7766 = shufflevector <32 x i16> %7763, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7767 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7766, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7768 = shufflevector <16 x i16> %7765, <16 x i16> %7767, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7769 = lshr <32 x i16> %7768, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7769, <32 x i16>* %6741, align 2, !tbaa !423
  %7770 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %7771 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %7772 = add <32 x i16> %7770, %7769
  %7773 = add <32 x i16> %7772, %7771
  %7774 = shufflevector <32 x i16> %7773, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7775 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7774, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7776 = shufflevector <32 x i16> %7773, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7777 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7776, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7778 = shufflevector <16 x i16> %7775, <16 x i16> %7777, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7779 = lshr <32 x i16> %7778, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7780 = add nsw i64 %6752, 8
  %7781 = mul nsw i64 %7780, %5542
  %7782 = getelementptr inbounds i16, i16* %5664, i64 %7781
  %7783 = bitcast i16* %7782 to <32 x i16>*
  store <32 x i16> %7779, <32 x i16>* %7783, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased937.preheader", label %"end for blur_y.s0.x.x.rebased938", !prof !406

"for blur_y.s0.x.x.rebased937.preheader":         ; preds = %"produce blur_x931"
  %7784 = sext i32 %t942745 to i64
  %7785 = add nsw i64 %7784, 32
  %7786 = add nsw i64 %6628, 32
  %7787 = add nsw i64 %6739, 32
  %7788 = add nsw i64 %6520, 32
  %7789 = sext i32 %a161 to i64
  %7790 = add nsw i64 %7789, 8
  %7791 = mul nsw i64 %7790, %5542
  br label %"for blur_y.s0.x.x.rebased937"

"for blur_y.s0.x.x.rebased937":                   ; preds = %"for blur_y.s0.x.x.rebased937.preheader", %"consume blur_x945"
  %indvars.iv2619 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased937.preheader" ], [ %indvars.iv.next2620, %"consume blur_x945" ]
  %7792 = trunc i64 %indvars.iv2619 to i32
  %7793 = shl nsw i32 %7792, 5
  %7794 = icmp sgt i32 %b156, %7793
  br i1 %7794, label %"produce blur_x943", label %"for blur_y.s0.x.x.rebased937.consume blur_x945_crit_edge"

"for blur_y.s0.x.x.rebased937.consume blur_x945_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased937"
  %.pre2685 = shl nuw nsw i64 %indvars.iv2619, 5
  br label %"consume blur_x945"

"end for blur_y.s0.x.x.rebased938":               ; preds = %"consume blur_x945", %"produce blur_x931"
  br i1 %.not1643, label %"produce blur_x954", label %"produce blur_x949"

"produce blur_x943":                              ; preds = %"for blur_y.s0.x.x.rebased937"
  %7795 = shl nsw i32 %7792, 2
  %7796 = add nsw i32 %7795, %a159
  %7797 = shl nsw i32 %7796, 2
  %t811944 = add nsw i32 %7797, %a159
  %7798 = sext i32 %t811944 to i64
  %7799 = shl nsw i64 %7798, 1
  %7800 = getelementptr inbounds i16, i16* %read_input661, i64 %7799
  %7801 = getelementptr inbounds i16, i16* %7800, i64 33
  %7802 = bitcast i16* %7801 to <32 x i16>*
  %7803 = load <32 x i16>, <32 x i16>* %7802, align 2, !tbaa !412
  %7804 = getelementptr inbounds i16, i16* %7800, i64 34
  %7805 = bitcast i16* %7804 to <32 x i16>*
  %7806 = load <32 x i16>, <32 x i16>* %7805, align 4, !tbaa !412
  %7807 = getelementptr inbounds i16, i16* %7800, i64 32
  %7808 = bitcast i16* %7807 to <32 x i16>*
  %7809 = load <32 x i16>, <32 x i16>* %7808, align 4, !tbaa !412
  %7810 = add <32 x i16> %7806, %7803
  %7811 = add <32 x i16> %7810, %7809
  %7812 = shufflevector <32 x i16> %7811, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7813 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7812, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7814 = shufflevector <32 x i16> %7811, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7815 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7814, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7816 = shufflevector <16 x i16> %7813, <16 x i16> %7815, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7817 = lshr <32 x i16> %7816, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7818 = shl nuw nsw i64 %indvars.iv2619, 5
  %.idx1789 = add nsw i64 %7785, %7818
  %7819 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1789
  %7820 = bitcast i16* %7819 to <32 x i16>*
  store <32 x i16> %7817, <32 x i16>* %7820, align 2, !tbaa !423
  br label %"consume blur_x945"

"consume blur_x945":                              ; preds = %"for blur_y.s0.x.x.rebased937.consume blur_x945_crit_edge", %"produce blur_x943"
  %.pre-phi2686 = phi i64 [ %.pre2685, %"for blur_y.s0.x.x.rebased937.consume blur_x945_crit_edge" ], [ %7818, %"produce blur_x943" ]
  %.idx1784 = add nsw i64 %7786, %.pre-phi2686
  %7821 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1784
  %7822 = bitcast i16* %7821 to <32 x i16>*
  %7823 = load <32 x i16>, <32 x i16>* %7822, align 2, !tbaa !423
  %.idx1785 = add nsw i64 %7787, %.pre-phi2686
  %7824 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1785
  %7825 = bitcast i16* %7824 to <32 x i16>*
  %7826 = load <32 x i16>, <32 x i16>* %7825, align 2, !tbaa !423
  %.idx1786 = add nsw i64 %7788, %.pre-phi2686
  %7827 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1786
  %7828 = bitcast i16* %7827 to <32 x i16>*
  %7829 = load <32 x i16>, <32 x i16>* %7828, align 2, !tbaa !423
  %7830 = add <32 x i16> %7826, %7823
  %7831 = add <32 x i16> %7830, %7829
  %7832 = shufflevector <32 x i16> %7831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7833 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7832, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7834 = shufflevector <32 x i16> %7831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7834, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7836 = shufflevector <16 x i16> %7833, <16 x i16> %7835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7837 = lshr <32 x i16> %7836, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7838 = add nuw nsw i64 %.pre-phi2686, 32
  %7839 = add nsw i64 %7838, %5665
  %.idx1787 = add i64 %7839, %7791
  %7840 = getelementptr inbounds i16, i16* %5664, i64 %.idx1787
  %7841 = bitcast i16* %7840 to <32 x i16>*
  store <32 x i16> %7837, <32 x i16>* %7841, align 2, !tbaa !425
  %indvars.iv.next2620 = add nuw nsw i64 %indvars.iv2619, 1
  %.not1788 = icmp eq i64 %indvars.iv.next2620, %5744
  br i1 %.not1788, label %"end for blur_y.s0.x.x.rebased938", label %"for blur_y.s0.x.x.rebased937"

"produce blur_x949":                              ; preds = %"end for blur_y.s0.x.x.rebased938"
  %7842 = getelementptr inbounds i16, i16* %read_input661, i64 %5688
  %7843 = getelementptr inbounds i16, i16* %7842, i64 1
  %7844 = bitcast i16* %7843 to <32 x i16>*
  %7845 = load <32 x i16>, <32 x i16>* %7844, align 2, !tbaa !412
  %7846 = getelementptr inbounds i16, i16* %7842, i64 2
  %7847 = bitcast i16* %7846 to <32 x i16>*
  %7848 = load <32 x i16>, <32 x i16>* %7847, align 2, !tbaa !412
  %7849 = bitcast i16* %7842 to <32 x i16>*
  %7850 = load <32 x i16>, <32 x i16>* %7849, align 2, !tbaa !412
  %7851 = add <32 x i16> %7848, %7845
  %7852 = add <32 x i16> %7851, %7850
  %7853 = shufflevector <32 x i16> %7852, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7854 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7853, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7855 = shufflevector <32 x i16> %7852, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7856 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7855, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7857 = shufflevector <16 x i16> %7854, <16 x i16> %7856, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7858 = lshr <32 x i16> %7857, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7859 = add nsw i64 %6739, %5659
  %7860 = getelementptr inbounds i16, i16* %blur_x714, i64 %7859
  %7861 = bitcast i16* %7860 to <32 x i16>*
  store <32 x i16> %7858, <32 x i16>* %7861, align 2, !tbaa !423
  %7862 = add nsw i64 %6628, %5659
  %7863 = getelementptr inbounds i16, i16* %blur_x714, i64 %7862
  %7864 = bitcast i16* %7863 to <32 x i16>*
  %7865 = load <32 x i16>, <32 x i16>* %7864, align 2, !tbaa !423
  %7866 = add nsw i64 %6520, %5659
  %7867 = getelementptr inbounds i16, i16* %blur_x714, i64 %7866
  %7868 = bitcast i16* %7867 to <32 x i16>*
  %7869 = load <32 x i16>, <32 x i16>* %7868, align 2, !tbaa !423
  %7870 = add <32 x i16> %7865, %7858
  %7871 = add <32 x i16> %7870, %7869
  %7872 = shufflevector <32 x i16> %7871, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7872, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7874 = shufflevector <32 x i16> %7871, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7874, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7876 = shufflevector <16 x i16> %7873, <16 x i16> %7875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7877 = lshr <32 x i16> %7876, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7878 = sext i32 %a161 to i64
  %7879 = add nsw i64 %7878, 8
  %7880 = mul nsw i64 %7879, %5542
  %7881 = add nsw i64 %5668, %7880
  %7882 = getelementptr inbounds i16, i16* %5664, i64 %7881
  %7883 = bitcast i16* %7882 to <32 x i16>*
  store <32 x i16> %7877, <32 x i16>* %7883, align 2, !tbaa !425
  br label %"produce blur_x954"

"produce blur_x954":                              ; preds = %"end for blur_y.s0.x.x.rebased938", %"produce blur_x949"
  %7884 = getelementptr inbounds i16, i16* %read_input661, i64 %5689
  %7885 = getelementptr inbounds i16, i16* %7884, i64 1
  %7886 = bitcast i16* %7885 to <32 x i16>*
  %7887 = load <32 x i16>, <32 x i16>* %7886, align 2, !tbaa !412
  %7888 = getelementptr inbounds i16, i16* %7884, i64 2
  %7889 = bitcast i16* %7888 to <32 x i16>*
  %7890 = load <32 x i16>, <32 x i16>* %7889, align 2, !tbaa !412
  %7891 = bitcast i16* %7884 to <32 x i16>*
  %7892 = load <32 x i16>, <32 x i16>* %7891, align 2, !tbaa !412
  %7893 = add <32 x i16> %7890, %7887
  %7894 = add <32 x i16> %7893, %7892
  %7895 = shufflevector <32 x i16> %7894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7896 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7895, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7897 = shufflevector <32 x i16> %7894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7897, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7899 = shufflevector <16 x i16> %7896, <16 x i16> %7898, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7900 = lshr <32 x i16> %7899, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %7900, <32 x i16>* %6874, align 2, !tbaa !423
  %7901 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %7902 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %7903 = add <32 x i16> %7901, %7900
  %7904 = add <32 x i16> %7903, %7902
  %7905 = shufflevector <32 x i16> %7904, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7906 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7905, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7907 = shufflevector <32 x i16> %7904, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7908 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7907, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7909 = shufflevector <16 x i16> %7906, <16 x i16> %7908, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7910 = lshr <32 x i16> %7909, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7911 = add nsw i64 %6752, 9
  %7912 = mul nsw i64 %7911, %5542
  %7913 = getelementptr inbounds i16, i16* %5664, i64 %7912
  %7914 = bitcast i16* %7913 to <32 x i16>*
  store <32 x i16> %7910, <32 x i16>* %7914, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased961.preheader", label %"end for blur_y.s0.x.x.rebased962", !prof !406

"for blur_y.s0.x.x.rebased961.preheader":         ; preds = %"produce blur_x954"
  %7915 = sext i32 %t947768 to i64
  %7916 = add nsw i64 %7915, 32
  %7917 = add nsw i64 %6739, 32
  %7918 = add nsw i64 %6872, 32
  %7919 = add nsw i64 %6628, 32
  %7920 = sext i32 %a161 to i64
  %7921 = add nsw i64 %7920, 9
  %7922 = mul nsw i64 %7921, %5542
  br label %"for blur_y.s0.x.x.rebased961"

"for blur_y.s0.x.x.rebased961":                   ; preds = %"for blur_y.s0.x.x.rebased961.preheader", %"consume blur_x969"
  %indvars.iv2621 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased961.preheader" ], [ %indvars.iv.next2622, %"consume blur_x969" ]
  %7923 = trunc i64 %indvars.iv2621 to i32
  %7924 = shl nsw i32 %7923, 5
  %7925 = icmp sgt i32 %b156, %7924
  br i1 %7925, label %"produce blur_x967", label %"for blur_y.s0.x.x.rebased961.consume blur_x969_crit_edge"

"for blur_y.s0.x.x.rebased961.consume blur_x969_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased961"
  %.pre2687 = shl nuw nsw i64 %indvars.iv2621, 5
  br label %"consume blur_x969"

"end for blur_y.s0.x.x.rebased962":               ; preds = %"consume blur_x969", %"produce blur_x954"
  br i1 %.not1643, label %"produce blur_x978", label %"produce blur_x973"

"produce blur_x967":                              ; preds = %"for blur_y.s0.x.x.rebased961"
  %t622.s968 = add nsw i32 %7924, %t984959
  %7926 = sext i32 %t622.s968 to i64
  %7927 = getelementptr inbounds i16, i16* %read_input661, i64 %7926
  %7928 = getelementptr inbounds i16, i16* %7927, i64 33
  %7929 = bitcast i16* %7928 to <32 x i16>*
  %7930 = load <32 x i16>, <32 x i16>* %7929, align 2, !tbaa !412
  %7931 = getelementptr inbounds i16, i16* %7927, i64 34
  %7932 = bitcast i16* %7931 to <32 x i16>*
  %7933 = load <32 x i16>, <32 x i16>* %7932, align 2, !tbaa !412
  %7934 = getelementptr inbounds i16, i16* %7927, i64 32
  %7935 = bitcast i16* %7934 to <32 x i16>*
  %7936 = load <32 x i16>, <32 x i16>* %7935, align 2, !tbaa !412
  %7937 = add <32 x i16> %7933, %7930
  %7938 = add <32 x i16> %7937, %7936
  %7939 = shufflevector <32 x i16> %7938, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7940 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7939, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7941 = shufflevector <32 x i16> %7938, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7941, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7943 = shufflevector <16 x i16> %7940, <16 x i16> %7942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7944 = lshr <32 x i16> %7943, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7945 = shl nuw nsw i64 %indvars.iv2621, 5
  %.idx1783 = add nsw i64 %7916, %7945
  %7946 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1783
  %7947 = bitcast i16* %7946 to <32 x i16>*
  store <32 x i16> %7944, <32 x i16>* %7947, align 2, !tbaa !423
  br label %"consume blur_x969"

"consume blur_x969":                              ; preds = %"for blur_y.s0.x.x.rebased961.consume blur_x969_crit_edge", %"produce blur_x967"
  %.pre-phi2688 = phi i64 [ %.pre2687, %"for blur_y.s0.x.x.rebased961.consume blur_x969_crit_edge" ], [ %7945, %"produce blur_x967" ]
  %.idx1778 = add nsw i64 %7917, %.pre-phi2688
  %7948 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1778
  %7949 = bitcast i16* %7948 to <32 x i16>*
  %7950 = load <32 x i16>, <32 x i16>* %7949, align 2, !tbaa !423
  %.idx1779 = add nsw i64 %7918, %.pre-phi2688
  %7951 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1779
  %7952 = bitcast i16* %7951 to <32 x i16>*
  %7953 = load <32 x i16>, <32 x i16>* %7952, align 2, !tbaa !423
  %.idx1780 = add nsw i64 %7919, %.pre-phi2688
  %7954 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1780
  %7955 = bitcast i16* %7954 to <32 x i16>*
  %7956 = load <32 x i16>, <32 x i16>* %7955, align 2, !tbaa !423
  %7957 = add <32 x i16> %7953, %7950
  %7958 = add <32 x i16> %7957, %7956
  %7959 = shufflevector <32 x i16> %7958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7960 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7959, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7961 = shufflevector <32 x i16> %7958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7962 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7961, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7963 = shufflevector <16 x i16> %7960, <16 x i16> %7962, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7964 = lshr <32 x i16> %7963, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7965 = add nuw nsw i64 %.pre-phi2688, 32
  %7966 = add nsw i64 %7965, %5665
  %.idx1781 = add i64 %7966, %7922
  %7967 = getelementptr inbounds i16, i16* %5664, i64 %.idx1781
  %7968 = bitcast i16* %7967 to <32 x i16>*
  store <32 x i16> %7964, <32 x i16>* %7968, align 2, !tbaa !425
  %indvars.iv.next2622 = add nuw nsw i64 %indvars.iv2621, 1
  %.not1782 = icmp eq i64 %indvars.iv.next2622, %5744
  br i1 %.not1782, label %"end for blur_y.s0.x.x.rebased962", label %"for blur_y.s0.x.x.rebased961"

"produce blur_x973":                              ; preds = %"end for blur_y.s0.x.x.rebased962"
  %7969 = getelementptr inbounds i16, i16* %read_input661, i64 %5690
  %7970 = getelementptr inbounds i16, i16* %7969, i64 1
  %7971 = bitcast i16* %7970 to <32 x i16>*
  %7972 = load <32 x i16>, <32 x i16>* %7971, align 2, !tbaa !412
  %7973 = getelementptr inbounds i16, i16* %7969, i64 2
  %7974 = bitcast i16* %7973 to <32 x i16>*
  %7975 = load <32 x i16>, <32 x i16>* %7974, align 2, !tbaa !412
  %7976 = bitcast i16* %7969 to <32 x i16>*
  %7977 = load <32 x i16>, <32 x i16>* %7976, align 2, !tbaa !412
  %7978 = add <32 x i16> %7975, %7972
  %7979 = add <32 x i16> %7978, %7977
  %7980 = shufflevector <32 x i16> %7979, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7981 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7980, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7982 = shufflevector <32 x i16> %7979, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7983 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7982, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7984 = shufflevector <16 x i16> %7981, <16 x i16> %7983, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7985 = lshr <32 x i16> %7984, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7986 = add nsw i64 %6872, %5659
  %7987 = getelementptr inbounds i16, i16* %blur_x714, i64 %7986
  %7988 = bitcast i16* %7987 to <32 x i16>*
  store <32 x i16> %7985, <32 x i16>* %7988, align 2, !tbaa !423
  %7989 = add nsw i64 %6739, %5659
  %7990 = getelementptr inbounds i16, i16* %blur_x714, i64 %7989
  %7991 = bitcast i16* %7990 to <32 x i16>*
  %7992 = load <32 x i16>, <32 x i16>* %7991, align 2, !tbaa !423
  %7993 = add nsw i64 %6628, %5659
  %7994 = getelementptr inbounds i16, i16* %blur_x714, i64 %7993
  %7995 = bitcast i16* %7994 to <32 x i16>*
  %7996 = load <32 x i16>, <32 x i16>* %7995, align 2, !tbaa !423
  %7997 = add <32 x i16> %7992, %7985
  %7998 = add <32 x i16> %7997, %7996
  %7999 = shufflevector <32 x i16> %7998, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8000 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7999, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8001 = shufflevector <32 x i16> %7998, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8002 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8001, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8003 = shufflevector <16 x i16> %8000, <16 x i16> %8002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8004 = lshr <32 x i16> %8003, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8005 = sext i32 %a161 to i64
  %8006 = add nsw i64 %8005, 9
  %8007 = mul nsw i64 %8006, %5542
  %8008 = add nsw i64 %5668, %8007
  %8009 = getelementptr inbounds i16, i16* %5664, i64 %8008
  %8010 = bitcast i16* %8009 to <32 x i16>*
  store <32 x i16> %8004, <32 x i16>* %8010, align 2, !tbaa !425
  br label %"produce blur_x978"

"produce blur_x978":                              ; preds = %"end for blur_y.s0.x.x.rebased962", %"produce blur_x973"
  %8011 = getelementptr inbounds i16, i16* %read_input661, i64 %5691
  %8012 = getelementptr inbounds i16, i16* %8011, i64 1
  %8013 = bitcast i16* %8012 to <32 x i16>*
  %8014 = load <32 x i16>, <32 x i16>* %8013, align 2, !tbaa !412
  %8015 = getelementptr inbounds i16, i16* %8011, i64 2
  %8016 = bitcast i16* %8015 to <32 x i16>*
  %8017 = load <32 x i16>, <32 x i16>* %8016, align 4, !tbaa !412
  %8018 = bitcast i16* %8011 to <32 x i16>*
  %8019 = load <32 x i16>, <32 x i16>* %8018, align 8, !tbaa !412
  %8020 = add <32 x i16> %8017, %8014
  %8021 = add <32 x i16> %8020, %8019
  %8022 = shufflevector <32 x i16> %8021, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8023 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8022, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8024 = shufflevector <32 x i16> %8021, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8025 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8024, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8026 = shufflevector <16 x i16> %8023, <16 x i16> %8025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8027 = lshr <32 x i16> %8026, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8027, <32 x i16>* %6522, align 2, !tbaa !423
  %8028 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %8029 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %8030 = add <32 x i16> %8028, %8027
  %8031 = add <32 x i16> %8030, %8029
  %8032 = shufflevector <32 x i16> %8031, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8032, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8034 = shufflevector <32 x i16> %8031, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8035 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8034, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8036 = shufflevector <16 x i16> %8033, <16 x i16> %8035, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8037 = lshr <32 x i16> %8036, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8038 = add nsw i64 %6752, 10
  %8039 = mul nsw i64 %8038, %5542
  %8040 = getelementptr inbounds i16, i16* %5664, i64 %8039
  %8041 = bitcast i16* %8040 to <32 x i16>*
  store <32 x i16> %8037, <32 x i16>* %8041, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased985.preheader", label %"end for blur_y.s0.x.x.rebased986", !prof !406

"for blur_y.s0.x.x.rebased985.preheader":         ; preds = %"produce blur_x978"
  %8042 = sext i32 %t939717 to i64
  %8043 = add nsw i64 %8042, 32
  %8044 = add nsw i64 %6872, 32
  %8045 = add nsw i64 %6520, 32
  %8046 = add nsw i64 %6739, 32
  %8047 = sext i32 %a161 to i64
  %8048 = add nsw i64 %8047, 10
  %8049 = mul nsw i64 %8048, %5542
  br label %"for blur_y.s0.x.x.rebased985"

"for blur_y.s0.x.x.rebased985":                   ; preds = %"for blur_y.s0.x.x.rebased985.preheader", %"consume blur_x993"
  %indvars.iv2623 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased985.preheader" ], [ %indvars.iv.next2624, %"consume blur_x993" ]
  %8050 = trunc i64 %indvars.iv2623 to i32
  %8051 = shl nsw i32 %8050, 5
  %8052 = icmp sgt i32 %b156, %8051
  br i1 %8052, label %"produce blur_x991", label %"for blur_y.s0.x.x.rebased985.consume blur_x993_crit_edge"

"for blur_y.s0.x.x.rebased985.consume blur_x993_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased985"
  %.pre2689 = shl nuw nsw i64 %indvars.iv2623, 5
  br label %"consume blur_x993"

"end for blur_y.s0.x.x.rebased986":               ; preds = %"consume blur_x993", %"produce blur_x978"
  br i1 %.not1643, label %"produce blur_x1002", label %"produce blur_x997"

"produce blur_x991":                              ; preds = %"for blur_y.s0.x.x.rebased985"
  %t627.s992 = add nsw i32 %8051, %t989983
  %8053 = sext i32 %t627.s992 to i64
  %8054 = getelementptr inbounds i16, i16* %read_input661, i64 %8053
  %8055 = getelementptr inbounds i16, i16* %8054, i64 33
  %8056 = bitcast i16* %8055 to <32 x i16>*
  %8057 = load <32 x i16>, <32 x i16>* %8056, align 2, !tbaa !412
  %8058 = getelementptr inbounds i16, i16* %8054, i64 34
  %8059 = bitcast i16* %8058 to <32 x i16>*
  %8060 = load <32 x i16>, <32 x i16>* %8059, align 4, !tbaa !412
  %8061 = getelementptr inbounds i16, i16* %8054, i64 32
  %8062 = bitcast i16* %8061 to <32 x i16>*
  %8063 = load <32 x i16>, <32 x i16>* %8062, align 4, !tbaa !412
  %8064 = add <32 x i16> %8060, %8057
  %8065 = add <32 x i16> %8064, %8063
  %8066 = shufflevector <32 x i16> %8065, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8066, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8068 = shufflevector <32 x i16> %8065, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8068, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8070 = shufflevector <16 x i16> %8067, <16 x i16> %8069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8071 = lshr <32 x i16> %8070, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8072 = shl nuw nsw i64 %indvars.iv2623, 5
  %.idx1777 = add nsw i64 %8043, %8072
  %8073 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1777
  %8074 = bitcast i16* %8073 to <32 x i16>*
  store <32 x i16> %8071, <32 x i16>* %8074, align 2, !tbaa !423
  br label %"consume blur_x993"

"consume blur_x993":                              ; preds = %"for blur_y.s0.x.x.rebased985.consume blur_x993_crit_edge", %"produce blur_x991"
  %.pre-phi2690 = phi i64 [ %.pre2689, %"for blur_y.s0.x.x.rebased985.consume blur_x993_crit_edge" ], [ %8072, %"produce blur_x991" ]
  %.idx1772 = add nsw i64 %8044, %.pre-phi2690
  %8075 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1772
  %8076 = bitcast i16* %8075 to <32 x i16>*
  %8077 = load <32 x i16>, <32 x i16>* %8076, align 2, !tbaa !423
  %.idx1773 = add nsw i64 %8045, %.pre-phi2690
  %8078 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1773
  %8079 = bitcast i16* %8078 to <32 x i16>*
  %8080 = load <32 x i16>, <32 x i16>* %8079, align 2, !tbaa !423
  %.idx1774 = add nsw i64 %8046, %.pre-phi2690
  %8081 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1774
  %8082 = bitcast i16* %8081 to <32 x i16>*
  %8083 = load <32 x i16>, <32 x i16>* %8082, align 2, !tbaa !423
  %8084 = add <32 x i16> %8080, %8077
  %8085 = add <32 x i16> %8084, %8083
  %8086 = shufflevector <32 x i16> %8085, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8087 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8086, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8088 = shufflevector <32 x i16> %8085, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8088, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8090 = shufflevector <16 x i16> %8087, <16 x i16> %8089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8091 = lshr <32 x i16> %8090, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8092 = add nuw nsw i64 %.pre-phi2690, 32
  %8093 = add nsw i64 %8092, %5665
  %.idx1775 = add i64 %8093, %8049
  %8094 = getelementptr inbounds i16, i16* %5664, i64 %.idx1775
  %8095 = bitcast i16* %8094 to <32 x i16>*
  store <32 x i16> %8091, <32 x i16>* %8095, align 2, !tbaa !425
  %indvars.iv.next2624 = add nuw nsw i64 %indvars.iv2623, 1
  %.not1776 = icmp eq i64 %indvars.iv.next2624, %5744
  br i1 %.not1776, label %"end for blur_y.s0.x.x.rebased986", label %"for blur_y.s0.x.x.rebased985"

"produce blur_x997":                              ; preds = %"end for blur_y.s0.x.x.rebased986"
  %8096 = getelementptr inbounds i16, i16* %read_input661, i64 %5692
  %8097 = getelementptr inbounds i16, i16* %8096, i64 1
  %8098 = bitcast i16* %8097 to <32 x i16>*
  %8099 = load <32 x i16>, <32 x i16>* %8098, align 2, !tbaa !412
  %8100 = getelementptr inbounds i16, i16* %8096, i64 2
  %8101 = bitcast i16* %8100 to <32 x i16>*
  %8102 = load <32 x i16>, <32 x i16>* %8101, align 2, !tbaa !412
  %8103 = bitcast i16* %8096 to <32 x i16>*
  %8104 = load <32 x i16>, <32 x i16>* %8103, align 2, !tbaa !412
  %8105 = add <32 x i16> %8102, %8099
  %8106 = add <32 x i16> %8105, %8104
  %8107 = shufflevector <32 x i16> %8106, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8108 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8107, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8109 = shufflevector <32 x i16> %8106, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8110 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8109, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8111 = shufflevector <16 x i16> %8108, <16 x i16> %8110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8112 = lshr <32 x i16> %8111, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8113 = add nsw i64 %6520, %5659
  %8114 = getelementptr inbounds i16, i16* %blur_x714, i64 %8113
  %8115 = bitcast i16* %8114 to <32 x i16>*
  store <32 x i16> %8112, <32 x i16>* %8115, align 2, !tbaa !423
  %8116 = add nsw i64 %6872, %5659
  %8117 = getelementptr inbounds i16, i16* %blur_x714, i64 %8116
  %8118 = bitcast i16* %8117 to <32 x i16>*
  %8119 = load <32 x i16>, <32 x i16>* %8118, align 2, !tbaa !423
  %8120 = add nsw i64 %6739, %5659
  %8121 = getelementptr inbounds i16, i16* %blur_x714, i64 %8120
  %8122 = bitcast i16* %8121 to <32 x i16>*
  %8123 = load <32 x i16>, <32 x i16>* %8122, align 2, !tbaa !423
  %8124 = add <32 x i16> %8119, %8112
  %8125 = add <32 x i16> %8124, %8123
  %8126 = shufflevector <32 x i16> %8125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8127 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8126, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8128 = shufflevector <32 x i16> %8125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8129 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8128, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8130 = shufflevector <16 x i16> %8127, <16 x i16> %8129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8131 = lshr <32 x i16> %8130, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8132 = sext i32 %a161 to i64
  %8133 = add nsw i64 %8132, 10
  %8134 = mul nsw i64 %8133, %5542
  %8135 = add nsw i64 %5668, %8134
  %8136 = getelementptr inbounds i16, i16* %5664, i64 %8135
  %8137 = bitcast i16* %8136 to <32 x i16>*
  store <32 x i16> %8131, <32 x i16>* %8137, align 2, !tbaa !425
  br label %"produce blur_x1002"

"produce blur_x1002":                             ; preds = %"end for blur_y.s0.x.x.rebased986", %"produce blur_x997"
  %8138 = getelementptr inbounds i16, i16* %read_input661, i64 %5693
  %8139 = getelementptr inbounds i16, i16* %8138, i64 1
  %8140 = bitcast i16* %8139 to <32 x i16>*
  %8141 = load <32 x i16>, <32 x i16>* %8140, align 2, !tbaa !412
  %8142 = getelementptr inbounds i16, i16* %8138, i64 2
  %8143 = bitcast i16* %8142 to <32 x i16>*
  %8144 = load <32 x i16>, <32 x i16>* %8143, align 2, !tbaa !412
  %8145 = bitcast i16* %8138 to <32 x i16>*
  %8146 = load <32 x i16>, <32 x i16>* %8145, align 2, !tbaa !412
  %8147 = add <32 x i16> %8144, %8141
  %8148 = add <32 x i16> %8147, %8146
  %8149 = shufflevector <32 x i16> %8148, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8150 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8149, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8151 = shufflevector <32 x i16> %8148, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8152 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8151, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8153 = shufflevector <16 x i16> %8150, <16 x i16> %8152, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8154 = lshr <32 x i16> %8153, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8154, <32 x i16>* %6630, align 2, !tbaa !423
  %8155 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %8156 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %8157 = add <32 x i16> %8155, %8154
  %8158 = add <32 x i16> %8157, %8156
  %8159 = shufflevector <32 x i16> %8158, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8160 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8159, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8161 = shufflevector <32 x i16> %8158, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8162 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8161, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8163 = shufflevector <16 x i16> %8160, <16 x i16> %8162, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8164 = lshr <32 x i16> %8163, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8165 = add nsw i64 %6752, 11
  %8166 = mul nsw i64 %8165, %5542
  %8167 = getelementptr inbounds i16, i16* %5664, i64 %8166
  %8168 = bitcast i16* %8167 to <32 x i16>*
  store <32 x i16> %8164, <32 x i16>* %8168, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1009.preheader", label %"end for blur_y.s0.x.x.rebased1010", !prof !406

"for blur_y.s0.x.x.rebased1009.preheader":        ; preds = %"produce blur_x1002"
  %8169 = sext i32 %t941729 to i64
  %8170 = add nsw i64 %8169, 32
  %8171 = add nsw i64 %6520, 32
  %8172 = add nsw i64 %6628, 32
  %8173 = add nsw i64 %6872, 32
  %8174 = sext i32 %a161 to i64
  %8175 = add nsw i64 %8174, 11
  %8176 = mul nsw i64 %8175, %5542
  br label %"for blur_y.s0.x.x.rebased1009"

"for blur_y.s0.x.x.rebased1009":                  ; preds = %"for blur_y.s0.x.x.rebased1009.preheader", %"consume blur_x1017"
  %indvars.iv2625 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1009.preheader" ], [ %indvars.iv.next2626, %"consume blur_x1017" ]
  %8177 = trunc i64 %indvars.iv2625 to i32
  %8178 = shl nsw i32 %8177, 5
  %8179 = icmp sgt i32 %b156, %8178
  br i1 %8179, label %"produce blur_x1015", label %"for blur_y.s0.x.x.rebased1009.consume blur_x1017_crit_edge"

"for blur_y.s0.x.x.rebased1009.consume blur_x1017_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1009"
  %.pre2691 = shl nuw nsw i64 %indvars.iv2625, 5
  br label %"consume blur_x1017"

"end for blur_y.s0.x.x.rebased1010":              ; preds = %"consume blur_x1017", %"produce blur_x1002"
  br i1 %.not1643, label %"produce blur_x1026", label %"produce blur_x1021"

"produce blur_x1015":                             ; preds = %"for blur_y.s0.x.x.rebased1009"
  %t632.s1016 = add nsw i32 %8178, %t9941007
  %8180 = sext i32 %t632.s1016 to i64
  %8181 = getelementptr inbounds i16, i16* %read_input661, i64 %8180
  %8182 = getelementptr inbounds i16, i16* %8181, i64 33
  %8183 = bitcast i16* %8182 to <32 x i16>*
  %8184 = load <32 x i16>, <32 x i16>* %8183, align 2, !tbaa !412
  %8185 = getelementptr inbounds i16, i16* %8181, i64 34
  %8186 = bitcast i16* %8185 to <32 x i16>*
  %8187 = load <32 x i16>, <32 x i16>* %8186, align 2, !tbaa !412
  %8188 = getelementptr inbounds i16, i16* %8181, i64 32
  %8189 = bitcast i16* %8188 to <32 x i16>*
  %8190 = load <32 x i16>, <32 x i16>* %8189, align 2, !tbaa !412
  %8191 = add <32 x i16> %8187, %8184
  %8192 = add <32 x i16> %8191, %8190
  %8193 = shufflevector <32 x i16> %8192, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8194 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8193, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8195 = shufflevector <32 x i16> %8192, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8196 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8195, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8197 = shufflevector <16 x i16> %8194, <16 x i16> %8196, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8198 = lshr <32 x i16> %8197, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8199 = shl nuw nsw i64 %indvars.iv2625, 5
  %.idx1771 = add nsw i64 %8170, %8199
  %8200 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1771
  %8201 = bitcast i16* %8200 to <32 x i16>*
  store <32 x i16> %8198, <32 x i16>* %8201, align 2, !tbaa !423
  br label %"consume blur_x1017"

"consume blur_x1017":                             ; preds = %"for blur_y.s0.x.x.rebased1009.consume blur_x1017_crit_edge", %"produce blur_x1015"
  %.pre-phi2692 = phi i64 [ %.pre2691, %"for blur_y.s0.x.x.rebased1009.consume blur_x1017_crit_edge" ], [ %8199, %"produce blur_x1015" ]
  %.idx1766 = add nsw i64 %8171, %.pre-phi2692
  %8202 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1766
  %8203 = bitcast i16* %8202 to <32 x i16>*
  %8204 = load <32 x i16>, <32 x i16>* %8203, align 2, !tbaa !423
  %.idx1767 = add nsw i64 %8172, %.pre-phi2692
  %8205 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1767
  %8206 = bitcast i16* %8205 to <32 x i16>*
  %8207 = load <32 x i16>, <32 x i16>* %8206, align 2, !tbaa !423
  %.idx1768 = add nsw i64 %8173, %.pre-phi2692
  %8208 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1768
  %8209 = bitcast i16* %8208 to <32 x i16>*
  %8210 = load <32 x i16>, <32 x i16>* %8209, align 2, !tbaa !423
  %8211 = add <32 x i16> %8207, %8204
  %8212 = add <32 x i16> %8211, %8210
  %8213 = shufflevector <32 x i16> %8212, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8214 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8213, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8215 = shufflevector <32 x i16> %8212, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8216 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8215, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8217 = shufflevector <16 x i16> %8214, <16 x i16> %8216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8218 = lshr <32 x i16> %8217, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8219 = add nuw nsw i64 %.pre-phi2692, 32
  %8220 = add nsw i64 %8219, %5665
  %.idx1769 = add i64 %8220, %8176
  %8221 = getelementptr inbounds i16, i16* %5664, i64 %.idx1769
  %8222 = bitcast i16* %8221 to <32 x i16>*
  store <32 x i16> %8218, <32 x i16>* %8222, align 2, !tbaa !425
  %indvars.iv.next2626 = add nuw nsw i64 %indvars.iv2625, 1
  %.not1770 = icmp eq i64 %indvars.iv.next2626, %5744
  br i1 %.not1770, label %"end for blur_y.s0.x.x.rebased1010", label %"for blur_y.s0.x.x.rebased1009"

"produce blur_x1021":                             ; preds = %"end for blur_y.s0.x.x.rebased1010"
  %8223 = getelementptr inbounds i16, i16* %read_input661, i64 %5694
  %8224 = getelementptr inbounds i16, i16* %8223, i64 1
  %8225 = bitcast i16* %8224 to <32 x i16>*
  %8226 = load <32 x i16>, <32 x i16>* %8225, align 2, !tbaa !412
  %8227 = getelementptr inbounds i16, i16* %8223, i64 2
  %8228 = bitcast i16* %8227 to <32 x i16>*
  %8229 = load <32 x i16>, <32 x i16>* %8228, align 2, !tbaa !412
  %8230 = bitcast i16* %8223 to <32 x i16>*
  %8231 = load <32 x i16>, <32 x i16>* %8230, align 2, !tbaa !412
  %8232 = add <32 x i16> %8229, %8226
  %8233 = add <32 x i16> %8232, %8231
  %8234 = shufflevector <32 x i16> %8233, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8235 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8234, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8236 = shufflevector <32 x i16> %8233, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8237 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8236, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8238 = shufflevector <16 x i16> %8235, <16 x i16> %8237, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8239 = lshr <32 x i16> %8238, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8240 = add nsw i64 %6628, %5659
  %8241 = getelementptr inbounds i16, i16* %blur_x714, i64 %8240
  %8242 = bitcast i16* %8241 to <32 x i16>*
  store <32 x i16> %8239, <32 x i16>* %8242, align 2, !tbaa !423
  %8243 = add nsw i64 %6520, %5659
  %8244 = getelementptr inbounds i16, i16* %blur_x714, i64 %8243
  %8245 = bitcast i16* %8244 to <32 x i16>*
  %8246 = load <32 x i16>, <32 x i16>* %8245, align 2, !tbaa !423
  %8247 = add nsw i64 %6872, %5659
  %8248 = getelementptr inbounds i16, i16* %blur_x714, i64 %8247
  %8249 = bitcast i16* %8248 to <32 x i16>*
  %8250 = load <32 x i16>, <32 x i16>* %8249, align 2, !tbaa !423
  %8251 = add <32 x i16> %8246, %8239
  %8252 = add <32 x i16> %8251, %8250
  %8253 = shufflevector <32 x i16> %8252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8254 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8253, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8255 = shufflevector <32 x i16> %8252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8255, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8257 = shufflevector <16 x i16> %8254, <16 x i16> %8256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8258 = lshr <32 x i16> %8257, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8259 = sext i32 %a161 to i64
  %8260 = add nsw i64 %8259, 11
  %8261 = mul nsw i64 %8260, %5542
  %8262 = add nsw i64 %5668, %8261
  %8263 = getelementptr inbounds i16, i16* %5664, i64 %8262
  %8264 = bitcast i16* %8263 to <32 x i16>*
  store <32 x i16> %8258, <32 x i16>* %8264, align 2, !tbaa !425
  br label %"produce blur_x1026"

"produce blur_x1026":                             ; preds = %"end for blur_y.s0.x.x.rebased1010", %"produce blur_x1021"
  %8265 = getelementptr inbounds i16, i16* %read_input661, i64 %5695
  %8266 = getelementptr inbounds i16, i16* %8265, i64 1
  %8267 = bitcast i16* %8266 to <32 x i16>*
  %8268 = load <32 x i16>, <32 x i16>* %8267, align 2, !tbaa !412
  %8269 = getelementptr inbounds i16, i16* %8265, i64 2
  %8270 = bitcast i16* %8269 to <32 x i16>*
  %8271 = load <32 x i16>, <32 x i16>* %8270, align 4, !tbaa !412
  %8272 = bitcast i16* %8265 to <32 x i16>*
  %8273 = load <32 x i16>, <32 x i16>* %8272, align 4, !tbaa !412
  %8274 = add <32 x i16> %8271, %8268
  %8275 = add <32 x i16> %8274, %8273
  %8276 = shufflevector <32 x i16> %8275, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8277 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8276, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8278 = shufflevector <32 x i16> %8275, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8279 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8278, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8280 = shufflevector <16 x i16> %8277, <16 x i16> %8279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8281 = lshr <32 x i16> %8280, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8281, <32 x i16>* %6741, align 2, !tbaa !423
  %8282 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %8283 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %8284 = add <32 x i16> %8282, %8281
  %8285 = add <32 x i16> %8284, %8283
  %8286 = shufflevector <32 x i16> %8285, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8286, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8288 = shufflevector <32 x i16> %8285, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8288, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8290 = shufflevector <16 x i16> %8287, <16 x i16> %8289, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8291 = lshr <32 x i16> %8290, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8292 = add nsw i64 %6752, 12
  %8293 = mul nsw i64 %8292, %5542
  %8294 = getelementptr inbounds i16, i16* %5664, i64 %8293
  %8295 = bitcast i16* %8294 to <32 x i16>*
  store <32 x i16> %8291, <32 x i16>* %8295, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1033.preheader", label %"end for blur_y.s0.x.x.rebased1034", !prof !406

"for blur_y.s0.x.x.rebased1033.preheader":        ; preds = %"produce blur_x1026"
  %8296 = sext i32 %t942745 to i64
  %8297 = add nsw i64 %8296, 32
  %8298 = add nsw i64 %6628, 32
  %8299 = add nsw i64 %6739, 32
  %8300 = add nsw i64 %6520, 32
  %8301 = sext i32 %a161 to i64
  %8302 = add nsw i64 %8301, 12
  %8303 = mul nsw i64 %8302, %5542
  br label %"for blur_y.s0.x.x.rebased1033"

"for blur_y.s0.x.x.rebased1033":                  ; preds = %"for blur_y.s0.x.x.rebased1033.preheader", %"consume blur_x1041"
  %indvars.iv2627 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1033.preheader" ], [ %indvars.iv.next2628, %"consume blur_x1041" ]
  %8304 = trunc i64 %indvars.iv2627 to i32
  %8305 = shl nsw i32 %8304, 5
  %8306 = icmp sgt i32 %b156, %8305
  br i1 %8306, label %"produce blur_x1039", label %"for blur_y.s0.x.x.rebased1033.consume blur_x1041_crit_edge"

"for blur_y.s0.x.x.rebased1033.consume blur_x1041_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1033"
  %.pre2693 = shl nuw nsw i64 %indvars.iv2627, 5
  br label %"consume blur_x1041"

"end for blur_y.s0.x.x.rebased1034":              ; preds = %"consume blur_x1041", %"produce blur_x1026"
  br i1 %.not1643, label %"produce blur_x1050", label %"produce blur_x1045"

"produce blur_x1039":                             ; preds = %"for blur_y.s0.x.x.rebased1033"
  %t637.s1040 = add nsw i32 %8305, %t9991031
  %8307 = sext i32 %t637.s1040 to i64
  %8308 = getelementptr inbounds i16, i16* %read_input661, i64 %8307
  %8309 = getelementptr inbounds i16, i16* %8308, i64 33
  %8310 = bitcast i16* %8309 to <32 x i16>*
  %8311 = load <32 x i16>, <32 x i16>* %8310, align 2, !tbaa !412
  %8312 = getelementptr inbounds i16, i16* %8308, i64 34
  %8313 = bitcast i16* %8312 to <32 x i16>*
  %8314 = load <32 x i16>, <32 x i16>* %8313, align 4, !tbaa !412
  %8315 = getelementptr inbounds i16, i16* %8308, i64 32
  %8316 = bitcast i16* %8315 to <32 x i16>*
  %8317 = load <32 x i16>, <32 x i16>* %8316, align 4, !tbaa !412
  %8318 = add <32 x i16> %8314, %8311
  %8319 = add <32 x i16> %8318, %8317
  %8320 = shufflevector <32 x i16> %8319, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8321 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8320, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8322 = shufflevector <32 x i16> %8319, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8322, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8324 = shufflevector <16 x i16> %8321, <16 x i16> %8323, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8325 = lshr <32 x i16> %8324, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8326 = shl nuw nsw i64 %indvars.iv2627, 5
  %.idx1765 = add nsw i64 %8297, %8326
  %8327 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1765
  %8328 = bitcast i16* %8327 to <32 x i16>*
  store <32 x i16> %8325, <32 x i16>* %8328, align 2, !tbaa !423
  br label %"consume blur_x1041"

"consume blur_x1041":                             ; preds = %"for blur_y.s0.x.x.rebased1033.consume blur_x1041_crit_edge", %"produce blur_x1039"
  %.pre-phi2694 = phi i64 [ %.pre2693, %"for blur_y.s0.x.x.rebased1033.consume blur_x1041_crit_edge" ], [ %8326, %"produce blur_x1039" ]
  %.idx1760 = add nsw i64 %8298, %.pre-phi2694
  %8329 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1760
  %8330 = bitcast i16* %8329 to <32 x i16>*
  %8331 = load <32 x i16>, <32 x i16>* %8330, align 2, !tbaa !423
  %.idx1761 = add nsw i64 %8299, %.pre-phi2694
  %8332 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1761
  %8333 = bitcast i16* %8332 to <32 x i16>*
  %8334 = load <32 x i16>, <32 x i16>* %8333, align 2, !tbaa !423
  %.idx1762 = add nsw i64 %8300, %.pre-phi2694
  %8335 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1762
  %8336 = bitcast i16* %8335 to <32 x i16>*
  %8337 = load <32 x i16>, <32 x i16>* %8336, align 2, !tbaa !423
  %8338 = add <32 x i16> %8334, %8331
  %8339 = add <32 x i16> %8338, %8337
  %8340 = shufflevector <32 x i16> %8339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8340, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8342 = shufflevector <32 x i16> %8339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8342, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8344 = shufflevector <16 x i16> %8341, <16 x i16> %8343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8345 = lshr <32 x i16> %8344, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8346 = add nuw nsw i64 %.pre-phi2694, 32
  %8347 = add nsw i64 %8346, %5665
  %.idx1763 = add i64 %8347, %8303
  %8348 = getelementptr inbounds i16, i16* %5664, i64 %.idx1763
  %8349 = bitcast i16* %8348 to <32 x i16>*
  store <32 x i16> %8345, <32 x i16>* %8349, align 2, !tbaa !425
  %indvars.iv.next2628 = add nuw nsw i64 %indvars.iv2627, 1
  %.not1764 = icmp eq i64 %indvars.iv.next2628, %5744
  br i1 %.not1764, label %"end for blur_y.s0.x.x.rebased1034", label %"for blur_y.s0.x.x.rebased1033"

"produce blur_x1045":                             ; preds = %"end for blur_y.s0.x.x.rebased1034"
  %8350 = getelementptr inbounds i16, i16* %read_input661, i64 %5696
  %8351 = getelementptr inbounds i16, i16* %8350, i64 1
  %8352 = bitcast i16* %8351 to <32 x i16>*
  %8353 = load <32 x i16>, <32 x i16>* %8352, align 2, !tbaa !412
  %8354 = getelementptr inbounds i16, i16* %8350, i64 2
  %8355 = bitcast i16* %8354 to <32 x i16>*
  %8356 = load <32 x i16>, <32 x i16>* %8355, align 2, !tbaa !412
  %8357 = bitcast i16* %8350 to <32 x i16>*
  %8358 = load <32 x i16>, <32 x i16>* %8357, align 2, !tbaa !412
  %8359 = add <32 x i16> %8356, %8353
  %8360 = add <32 x i16> %8359, %8358
  %8361 = shufflevector <32 x i16> %8360, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8362 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8361, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8363 = shufflevector <32 x i16> %8360, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8364 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8363, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8365 = shufflevector <16 x i16> %8362, <16 x i16> %8364, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8366 = lshr <32 x i16> %8365, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8367 = add nsw i64 %6739, %5659
  %8368 = getelementptr inbounds i16, i16* %blur_x714, i64 %8367
  %8369 = bitcast i16* %8368 to <32 x i16>*
  store <32 x i16> %8366, <32 x i16>* %8369, align 2, !tbaa !423
  %8370 = add nsw i64 %6628, %5659
  %8371 = getelementptr inbounds i16, i16* %blur_x714, i64 %8370
  %8372 = bitcast i16* %8371 to <32 x i16>*
  %8373 = load <32 x i16>, <32 x i16>* %8372, align 2, !tbaa !423
  %8374 = add nsw i64 %6520, %5659
  %8375 = getelementptr inbounds i16, i16* %blur_x714, i64 %8374
  %8376 = bitcast i16* %8375 to <32 x i16>*
  %8377 = load <32 x i16>, <32 x i16>* %8376, align 2, !tbaa !423
  %8378 = add <32 x i16> %8373, %8366
  %8379 = add <32 x i16> %8378, %8377
  %8380 = shufflevector <32 x i16> %8379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8381 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8380, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8382 = shufflevector <32 x i16> %8379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8382, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8384 = shufflevector <16 x i16> %8381, <16 x i16> %8383, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8385 = lshr <32 x i16> %8384, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8386 = sext i32 %a161 to i64
  %8387 = add nsw i64 %8386, 12
  %8388 = mul nsw i64 %8387, %5542
  %8389 = add nsw i64 %5668, %8388
  %8390 = getelementptr inbounds i16, i16* %5664, i64 %8389
  %8391 = bitcast i16* %8390 to <32 x i16>*
  store <32 x i16> %8385, <32 x i16>* %8391, align 2, !tbaa !425
  br label %"produce blur_x1050"

"produce blur_x1050":                             ; preds = %"end for blur_y.s0.x.x.rebased1034", %"produce blur_x1045"
  %8392 = getelementptr inbounds i16, i16* %read_input661, i64 %5697
  %8393 = getelementptr inbounds i16, i16* %8392, i64 1
  %8394 = bitcast i16* %8393 to <32 x i16>*
  %8395 = load <32 x i16>, <32 x i16>* %8394, align 2, !tbaa !412
  %8396 = getelementptr inbounds i16, i16* %8392, i64 2
  %8397 = bitcast i16* %8396 to <32 x i16>*
  %8398 = load <32 x i16>, <32 x i16>* %8397, align 2, !tbaa !412
  %8399 = bitcast i16* %8392 to <32 x i16>*
  %8400 = load <32 x i16>, <32 x i16>* %8399, align 2, !tbaa !412
  %8401 = add <32 x i16> %8398, %8395
  %8402 = add <32 x i16> %8401, %8400
  %8403 = shufflevector <32 x i16> %8402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8404 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8403, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8405 = shufflevector <32 x i16> %8402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8406 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8405, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8407 = shufflevector <16 x i16> %8404, <16 x i16> %8406, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8408 = lshr <32 x i16> %8407, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8408, <32 x i16>* %6874, align 2, !tbaa !423
  %8409 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %8410 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %8411 = add <32 x i16> %8409, %8408
  %8412 = add <32 x i16> %8411, %8410
  %8413 = shufflevector <32 x i16> %8412, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8413, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8415 = shufflevector <32 x i16> %8412, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8416 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8415, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8417 = shufflevector <16 x i16> %8414, <16 x i16> %8416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8418 = lshr <32 x i16> %8417, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8419 = add nsw i64 %6752, 13
  %8420 = mul nsw i64 %8419, %5542
  %8421 = getelementptr inbounds i16, i16* %5664, i64 %8420
  %8422 = bitcast i16* %8421 to <32 x i16>*
  store <32 x i16> %8418, <32 x i16>* %8422, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1057.preheader", label %"end for blur_y.s0.x.x.rebased1058", !prof !406

"for blur_y.s0.x.x.rebased1057.preheader":        ; preds = %"produce blur_x1050"
  %8423 = sext i32 %t947768 to i64
  %8424 = add nsw i64 %8423, 32
  %8425 = add nsw i64 %6739, 32
  %8426 = add nsw i64 %6872, 32
  %8427 = add nsw i64 %6628, 32
  %8428 = sext i32 %a161 to i64
  %8429 = add nsw i64 %8428, 13
  %8430 = mul nsw i64 %8429, %5542
  br label %"for blur_y.s0.x.x.rebased1057"

"for blur_y.s0.x.x.rebased1057":                  ; preds = %"for blur_y.s0.x.x.rebased1057.preheader", %"consume blur_x1065"
  %indvars.iv2629 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1057.preheader" ], [ %indvars.iv.next2630, %"consume blur_x1065" ]
  %8431 = trunc i64 %indvars.iv2629 to i32
  %8432 = shl nsw i32 %8431, 5
  %8433 = icmp sgt i32 %b156, %8432
  br i1 %8433, label %"produce blur_x1063", label %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge"

"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1057"
  %.pre2695 = shl nuw nsw i64 %indvars.iv2629, 5
  br label %"consume blur_x1065"

"end for blur_y.s0.x.x.rebased1058":              ; preds = %"consume blur_x1065", %"produce blur_x1050"
  br i1 %.not1643, label %"produce blur_x1074", label %"produce blur_x1069"

"produce blur_x1063":                             ; preds = %"for blur_y.s0.x.x.rebased1057"
  %t642.s1064 = add nsw i32 %8432, %t10041055
  %8434 = sext i32 %t642.s1064 to i64
  %8435 = getelementptr inbounds i16, i16* %read_input661, i64 %8434
  %8436 = getelementptr inbounds i16, i16* %8435, i64 33
  %8437 = bitcast i16* %8436 to <32 x i16>*
  %8438 = load <32 x i16>, <32 x i16>* %8437, align 2, !tbaa !412
  %8439 = getelementptr inbounds i16, i16* %8435, i64 34
  %8440 = bitcast i16* %8439 to <32 x i16>*
  %8441 = load <32 x i16>, <32 x i16>* %8440, align 2, !tbaa !412
  %8442 = getelementptr inbounds i16, i16* %8435, i64 32
  %8443 = bitcast i16* %8442 to <32 x i16>*
  %8444 = load <32 x i16>, <32 x i16>* %8443, align 2, !tbaa !412
  %8445 = add <32 x i16> %8441, %8438
  %8446 = add <32 x i16> %8445, %8444
  %8447 = shufflevector <32 x i16> %8446, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8448 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8447, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8449 = shufflevector <32 x i16> %8446, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8450 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8449, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8451 = shufflevector <16 x i16> %8448, <16 x i16> %8450, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8452 = lshr <32 x i16> %8451, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8453 = shl nuw nsw i64 %indvars.iv2629, 5
  %.idx1759 = add nsw i64 %8424, %8453
  %8454 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1759
  %8455 = bitcast i16* %8454 to <32 x i16>*
  store <32 x i16> %8452, <32 x i16>* %8455, align 2, !tbaa !423
  br label %"consume blur_x1065"

"consume blur_x1065":                             ; preds = %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge", %"produce blur_x1063"
  %.pre-phi2696 = phi i64 [ %.pre2695, %"for blur_y.s0.x.x.rebased1057.consume blur_x1065_crit_edge" ], [ %8453, %"produce blur_x1063" ]
  %.idx1754 = add nsw i64 %8425, %.pre-phi2696
  %8456 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1754
  %8457 = bitcast i16* %8456 to <32 x i16>*
  %8458 = load <32 x i16>, <32 x i16>* %8457, align 2, !tbaa !423
  %.idx1755 = add nsw i64 %8426, %.pre-phi2696
  %8459 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1755
  %8460 = bitcast i16* %8459 to <32 x i16>*
  %8461 = load <32 x i16>, <32 x i16>* %8460, align 2, !tbaa !423
  %.idx1756 = add nsw i64 %8427, %.pre-phi2696
  %8462 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1756
  %8463 = bitcast i16* %8462 to <32 x i16>*
  %8464 = load <32 x i16>, <32 x i16>* %8463, align 2, !tbaa !423
  %8465 = add <32 x i16> %8461, %8458
  %8466 = add <32 x i16> %8465, %8464
  %8467 = shufflevector <32 x i16> %8466, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8467, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8469 = shufflevector <32 x i16> %8466, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8469, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8471 = shufflevector <16 x i16> %8468, <16 x i16> %8470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8472 = lshr <32 x i16> %8471, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8473 = add nuw nsw i64 %.pre-phi2696, 32
  %8474 = add nsw i64 %8473, %5665
  %.idx1757 = add i64 %8474, %8430
  %8475 = getelementptr inbounds i16, i16* %5664, i64 %.idx1757
  %8476 = bitcast i16* %8475 to <32 x i16>*
  store <32 x i16> %8472, <32 x i16>* %8476, align 2, !tbaa !425
  %indvars.iv.next2630 = add nuw nsw i64 %indvars.iv2629, 1
  %.not1758 = icmp eq i64 %indvars.iv.next2630, %5744
  br i1 %.not1758, label %"end for blur_y.s0.x.x.rebased1058", label %"for blur_y.s0.x.x.rebased1057"

"produce blur_x1069":                             ; preds = %"end for blur_y.s0.x.x.rebased1058"
  %8477 = getelementptr inbounds i16, i16* %read_input661, i64 %5698
  %8478 = getelementptr inbounds i16, i16* %8477, i64 1
  %8479 = bitcast i16* %8478 to <32 x i16>*
  %8480 = load <32 x i16>, <32 x i16>* %8479, align 2, !tbaa !412
  %8481 = getelementptr inbounds i16, i16* %8477, i64 2
  %8482 = bitcast i16* %8481 to <32 x i16>*
  %8483 = load <32 x i16>, <32 x i16>* %8482, align 2, !tbaa !412
  %8484 = bitcast i16* %8477 to <32 x i16>*
  %8485 = load <32 x i16>, <32 x i16>* %8484, align 2, !tbaa !412
  %8486 = add <32 x i16> %8483, %8480
  %8487 = add <32 x i16> %8486, %8485
  %8488 = shufflevector <32 x i16> %8487, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8489 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8488, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8490 = shufflevector <32 x i16> %8487, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8491 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8490, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8492 = shufflevector <16 x i16> %8489, <16 x i16> %8491, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8493 = lshr <32 x i16> %8492, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8494 = add nsw i64 %6872, %5659
  %8495 = getelementptr inbounds i16, i16* %blur_x714, i64 %8494
  %8496 = bitcast i16* %8495 to <32 x i16>*
  store <32 x i16> %8493, <32 x i16>* %8496, align 2, !tbaa !423
  %8497 = add nsw i64 %6739, %5659
  %8498 = getelementptr inbounds i16, i16* %blur_x714, i64 %8497
  %8499 = bitcast i16* %8498 to <32 x i16>*
  %8500 = load <32 x i16>, <32 x i16>* %8499, align 2, !tbaa !423
  %8501 = add nsw i64 %6628, %5659
  %8502 = getelementptr inbounds i16, i16* %blur_x714, i64 %8501
  %8503 = bitcast i16* %8502 to <32 x i16>*
  %8504 = load <32 x i16>, <32 x i16>* %8503, align 2, !tbaa !423
  %8505 = add <32 x i16> %8500, %8493
  %8506 = add <32 x i16> %8505, %8504
  %8507 = shufflevector <32 x i16> %8506, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8508 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8507, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8509 = shufflevector <32 x i16> %8506, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8509, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8511 = shufflevector <16 x i16> %8508, <16 x i16> %8510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8512 = lshr <32 x i16> %8511, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8513 = sext i32 %a161 to i64
  %8514 = add nsw i64 %8513, 13
  %8515 = mul nsw i64 %8514, %5542
  %8516 = add nsw i64 %5668, %8515
  %8517 = getelementptr inbounds i16, i16* %5664, i64 %8516
  %8518 = bitcast i16* %8517 to <32 x i16>*
  store <32 x i16> %8512, <32 x i16>* %8518, align 2, !tbaa !425
  br label %"produce blur_x1074"

"produce blur_x1074":                             ; preds = %"end for blur_y.s0.x.x.rebased1058", %"produce blur_x1069"
  %8519 = getelementptr inbounds i16, i16* %read_input661, i64 %5699
  %8520 = getelementptr inbounds i16, i16* %8519, i64 1
  %8521 = bitcast i16* %8520 to <32 x i16>*
  %8522 = load <32 x i16>, <32 x i16>* %8521, align 2, !tbaa !412
  %8523 = getelementptr inbounds i16, i16* %8519, i64 2
  %8524 = bitcast i16* %8523 to <32 x i16>*
  %8525 = load <32 x i16>, <32 x i16>* %8524, align 4, !tbaa !412
  %8526 = bitcast i16* %8519 to <32 x i16>*
  %8527 = load <32 x i16>, <32 x i16>* %8526, align 32, !tbaa !412
  %8528 = add <32 x i16> %8525, %8522
  %8529 = add <32 x i16> %8528, %8527
  %8530 = shufflevector <32 x i16> %8529, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8531 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8530, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8532 = shufflevector <32 x i16> %8529, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8533 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8532, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8534 = shufflevector <16 x i16> %8531, <16 x i16> %8533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8535 = lshr <32 x i16> %8534, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8535, <32 x i16>* %6522, align 2, !tbaa !423
  %8536 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %8537 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %8538 = add <32 x i16> %8536, %8535
  %8539 = add <32 x i16> %8538, %8537
  %8540 = shufflevector <32 x i16> %8539, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8541 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8540, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8542 = shufflevector <32 x i16> %8539, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8542, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8544 = shufflevector <16 x i16> %8541, <16 x i16> %8543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8545 = lshr <32 x i16> %8544, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8546 = add nsw i64 %6752, 14
  %8547 = mul nsw i64 %8546, %5542
  %8548 = getelementptr inbounds i16, i16* %5664, i64 %8547
  %8549 = bitcast i16* %8548 to <32 x i16>*
  store <32 x i16> %8545, <32 x i16>* %8549, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1081.preheader", label %"end for blur_y.s0.x.x.rebased1082", !prof !406

"for blur_y.s0.x.x.rebased1081.preheader":        ; preds = %"produce blur_x1074"
  %8550 = sext i32 %t939717 to i64
  %8551 = add nsw i64 %8550, 32
  %8552 = add nsw i64 %6872, 32
  %8553 = add nsw i64 %6520, 32
  %8554 = add nsw i64 %6739, 32
  %8555 = sext i32 %a161 to i64
  %8556 = add nsw i64 %8555, 14
  %8557 = mul nsw i64 %8556, %5542
  br label %"for blur_y.s0.x.x.rebased1081"

"for blur_y.s0.x.x.rebased1081":                  ; preds = %"for blur_y.s0.x.x.rebased1081.preheader", %"consume blur_x1089"
  %indvars.iv2631 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1081.preheader" ], [ %indvars.iv.next2632, %"consume blur_x1089" ]
  %8558 = trunc i64 %indvars.iv2631 to i32
  %8559 = shl nsw i32 %8558, 5
  %8560 = icmp sgt i32 %b156, %8559
  br i1 %8560, label %"produce blur_x1087", label %"for blur_y.s0.x.x.rebased1081.consume blur_x1089_crit_edge"

"for blur_y.s0.x.x.rebased1081.consume blur_x1089_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1081"
  %.pre2697 = shl nuw nsw i64 %indvars.iv2631, 5
  br label %"consume blur_x1089"

"end for blur_y.s0.x.x.rebased1082":              ; preds = %"consume blur_x1089", %"produce blur_x1074"
  br i1 %.not1643, label %"produce blur_x1098", label %"produce blur_x1093"

"produce blur_x1087":                             ; preds = %"for blur_y.s0.x.x.rebased1081"
  %t647.s1088 = add nsw i32 %8559, %t10091079
  %8561 = sext i32 %t647.s1088 to i64
  %8562 = getelementptr inbounds i16, i16* %read_input661, i64 %8561
  %8563 = getelementptr inbounds i16, i16* %8562, i64 33
  %8564 = bitcast i16* %8563 to <32 x i16>*
  %8565 = load <32 x i16>, <32 x i16>* %8564, align 2, !tbaa !412
  %8566 = getelementptr inbounds i16, i16* %8562, i64 34
  %8567 = bitcast i16* %8566 to <32 x i16>*
  %8568 = load <32 x i16>, <32 x i16>* %8567, align 4, !tbaa !412
  %8569 = getelementptr inbounds i16, i16* %8562, i64 32
  %8570 = bitcast i16* %8569 to <32 x i16>*
  %8571 = load <32 x i16>, <32 x i16>* %8570, align 4, !tbaa !412
  %8572 = add <32 x i16> %8568, %8565
  %8573 = add <32 x i16> %8572, %8571
  %8574 = shufflevector <32 x i16> %8573, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8575 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8574, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8576 = shufflevector <32 x i16> %8573, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8577 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8576, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8578 = shufflevector <16 x i16> %8575, <16 x i16> %8577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8579 = lshr <32 x i16> %8578, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8580 = shl nuw nsw i64 %indvars.iv2631, 5
  %.idx1753 = add nsw i64 %8551, %8580
  %8581 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1753
  %8582 = bitcast i16* %8581 to <32 x i16>*
  store <32 x i16> %8579, <32 x i16>* %8582, align 2, !tbaa !423
  br label %"consume blur_x1089"

"consume blur_x1089":                             ; preds = %"for blur_y.s0.x.x.rebased1081.consume blur_x1089_crit_edge", %"produce blur_x1087"
  %.pre-phi2698 = phi i64 [ %.pre2697, %"for blur_y.s0.x.x.rebased1081.consume blur_x1089_crit_edge" ], [ %8580, %"produce blur_x1087" ]
  %.idx1748 = add nsw i64 %8552, %.pre-phi2698
  %8583 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1748
  %8584 = bitcast i16* %8583 to <32 x i16>*
  %8585 = load <32 x i16>, <32 x i16>* %8584, align 2, !tbaa !423
  %.idx1749 = add nsw i64 %8553, %.pre-phi2698
  %8586 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1749
  %8587 = bitcast i16* %8586 to <32 x i16>*
  %8588 = load <32 x i16>, <32 x i16>* %8587, align 2, !tbaa !423
  %.idx1750 = add nsw i64 %8554, %.pre-phi2698
  %8589 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1750
  %8590 = bitcast i16* %8589 to <32 x i16>*
  %8591 = load <32 x i16>, <32 x i16>* %8590, align 2, !tbaa !423
  %8592 = add <32 x i16> %8588, %8585
  %8593 = add <32 x i16> %8592, %8591
  %8594 = shufflevector <32 x i16> %8593, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8595 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8594, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8596 = shufflevector <32 x i16> %8593, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8596, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8598 = shufflevector <16 x i16> %8595, <16 x i16> %8597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8599 = lshr <32 x i16> %8598, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8600 = add nuw nsw i64 %.pre-phi2698, 32
  %8601 = add nsw i64 %8600, %5665
  %.idx1751 = add i64 %8601, %8557
  %8602 = getelementptr inbounds i16, i16* %5664, i64 %.idx1751
  %8603 = bitcast i16* %8602 to <32 x i16>*
  store <32 x i16> %8599, <32 x i16>* %8603, align 2, !tbaa !425
  %indvars.iv.next2632 = add nuw nsw i64 %indvars.iv2631, 1
  %.not1752 = icmp eq i64 %indvars.iv.next2632, %5744
  br i1 %.not1752, label %"end for blur_y.s0.x.x.rebased1082", label %"for blur_y.s0.x.x.rebased1081"

"produce blur_x1093":                             ; preds = %"end for blur_y.s0.x.x.rebased1082"
  %8604 = getelementptr inbounds i16, i16* %read_input661, i64 %5700
  %8605 = getelementptr inbounds i16, i16* %8604, i64 1
  %8606 = bitcast i16* %8605 to <32 x i16>*
  %8607 = load <32 x i16>, <32 x i16>* %8606, align 2, !tbaa !412
  %8608 = getelementptr inbounds i16, i16* %8604, i64 2
  %8609 = bitcast i16* %8608 to <32 x i16>*
  %8610 = load <32 x i16>, <32 x i16>* %8609, align 2, !tbaa !412
  %8611 = bitcast i16* %8604 to <32 x i16>*
  %8612 = load <32 x i16>, <32 x i16>* %8611, align 2, !tbaa !412
  %8613 = add <32 x i16> %8610, %8607
  %8614 = add <32 x i16> %8613, %8612
  %8615 = shufflevector <32 x i16> %8614, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8616 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8615, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8617 = shufflevector <32 x i16> %8614, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8618 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8617, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8619 = shufflevector <16 x i16> %8616, <16 x i16> %8618, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8620 = lshr <32 x i16> %8619, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8621 = add nsw i64 %6520, %5659
  %8622 = getelementptr inbounds i16, i16* %blur_x714, i64 %8621
  %8623 = bitcast i16* %8622 to <32 x i16>*
  store <32 x i16> %8620, <32 x i16>* %8623, align 2, !tbaa !423
  %8624 = add nsw i64 %6872, %5659
  %8625 = getelementptr inbounds i16, i16* %blur_x714, i64 %8624
  %8626 = bitcast i16* %8625 to <32 x i16>*
  %8627 = load <32 x i16>, <32 x i16>* %8626, align 2, !tbaa !423
  %8628 = add nsw i64 %6739, %5659
  %8629 = getelementptr inbounds i16, i16* %blur_x714, i64 %8628
  %8630 = bitcast i16* %8629 to <32 x i16>*
  %8631 = load <32 x i16>, <32 x i16>* %8630, align 2, !tbaa !423
  %8632 = add <32 x i16> %8627, %8620
  %8633 = add <32 x i16> %8632, %8631
  %8634 = shufflevector <32 x i16> %8633, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8634, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8636 = shufflevector <32 x i16> %8633, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8636, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8638 = shufflevector <16 x i16> %8635, <16 x i16> %8637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8639 = lshr <32 x i16> %8638, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8640 = sext i32 %a161 to i64
  %8641 = add nsw i64 %8640, 14
  %8642 = mul nsw i64 %8641, %5542
  %8643 = add nsw i64 %5668, %8642
  %8644 = getelementptr inbounds i16, i16* %5664, i64 %8643
  %8645 = bitcast i16* %8644 to <32 x i16>*
  store <32 x i16> %8639, <32 x i16>* %8645, align 2, !tbaa !425
  br label %"produce blur_x1098"

"produce blur_x1098":                             ; preds = %"end for blur_y.s0.x.x.rebased1082", %"produce blur_x1093"
  %8646 = getelementptr inbounds i16, i16* %read_input661, i64 %5701
  %8647 = getelementptr inbounds i16, i16* %8646, i64 1
  %8648 = bitcast i16* %8647 to <32 x i16>*
  %8649 = load <32 x i16>, <32 x i16>* %8648, align 2, !tbaa !412
  %8650 = getelementptr inbounds i16, i16* %8646, i64 2
  %8651 = bitcast i16* %8650 to <32 x i16>*
  %8652 = load <32 x i16>, <32 x i16>* %8651, align 2, !tbaa !412
  %8653 = bitcast i16* %8646 to <32 x i16>*
  %8654 = load <32 x i16>, <32 x i16>* %8653, align 2, !tbaa !412
  %8655 = add <32 x i16> %8652, %8649
  %8656 = add <32 x i16> %8655, %8654
  %8657 = shufflevector <32 x i16> %8656, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8658 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8657, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8659 = shufflevector <32 x i16> %8656, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8660 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8659, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8661 = shufflevector <16 x i16> %8658, <16 x i16> %8660, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8662 = lshr <32 x i16> %8661, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8662, <32 x i16>* %6630, align 2, !tbaa !423
  %8663 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %8664 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %8665 = add <32 x i16> %8663, %8662
  %8666 = add <32 x i16> %8665, %8664
  %8667 = shufflevector <32 x i16> %8666, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8667, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8669 = shufflevector <32 x i16> %8666, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8669, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8671 = shufflevector <16 x i16> %8668, <16 x i16> %8670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8672 = lshr <32 x i16> %8671, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8673 = add nsw i64 %6752, 15
  %8674 = mul nsw i64 %8673, %5542
  %8675 = getelementptr inbounds i16, i16* %5664, i64 %8674
  %8676 = bitcast i16* %8675 to <32 x i16>*
  store <32 x i16> %8672, <32 x i16>* %8676, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1105.preheader", label %"end for blur_y.s0.x.x.rebased1106", !prof !406

"for blur_y.s0.x.x.rebased1105.preheader":        ; preds = %"produce blur_x1098"
  %8677 = sext i32 %t941729 to i64
  %8678 = add nsw i64 %8677, 32
  %8679 = add nsw i64 %6520, 32
  %8680 = add nsw i64 %6628, 32
  %8681 = add nsw i64 %6872, 32
  %8682 = sext i32 %a161 to i64
  %8683 = add nsw i64 %8682, 15
  %8684 = mul nsw i64 %8683, %5542
  br label %"for blur_y.s0.x.x.rebased1105"

"for blur_y.s0.x.x.rebased1105":                  ; preds = %"for blur_y.s0.x.x.rebased1105.preheader", %"consume blur_x1113"
  %indvars.iv2633 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1105.preheader" ], [ %indvars.iv.next2634, %"consume blur_x1113" ]
  %8685 = trunc i64 %indvars.iv2633 to i32
  %8686 = shl nsw i32 %8685, 5
  %8687 = icmp sgt i32 %b156, %8686
  br i1 %8687, label %"produce blur_x1111", label %"for blur_y.s0.x.x.rebased1105.consume blur_x1113_crit_edge"

"for blur_y.s0.x.x.rebased1105.consume blur_x1113_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1105"
  %.pre2699 = shl nuw nsw i64 %indvars.iv2633, 5
  br label %"consume blur_x1113"

"end for blur_y.s0.x.x.rebased1106":              ; preds = %"consume blur_x1113", %"produce blur_x1098"
  br i1 %.not1643, label %"produce blur_x1122", label %"produce blur_x1117"

"produce blur_x1111":                             ; preds = %"for blur_y.s0.x.x.rebased1105"
  %t652.s1112 = add nsw i32 %8686, %t10141103
  %8688 = sext i32 %t652.s1112 to i64
  %8689 = getelementptr inbounds i16, i16* %read_input661, i64 %8688
  %8690 = getelementptr inbounds i16, i16* %8689, i64 33
  %8691 = bitcast i16* %8690 to <32 x i16>*
  %8692 = load <32 x i16>, <32 x i16>* %8691, align 2, !tbaa !412
  %8693 = getelementptr inbounds i16, i16* %8689, i64 34
  %8694 = bitcast i16* %8693 to <32 x i16>*
  %8695 = load <32 x i16>, <32 x i16>* %8694, align 2, !tbaa !412
  %8696 = getelementptr inbounds i16, i16* %8689, i64 32
  %8697 = bitcast i16* %8696 to <32 x i16>*
  %8698 = load <32 x i16>, <32 x i16>* %8697, align 2, !tbaa !412
  %8699 = add <32 x i16> %8695, %8692
  %8700 = add <32 x i16> %8699, %8698
  %8701 = shufflevector <32 x i16> %8700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8701, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8703 = shufflevector <32 x i16> %8700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8704 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8703, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8705 = shufflevector <16 x i16> %8702, <16 x i16> %8704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8706 = lshr <32 x i16> %8705, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8707 = shl nuw nsw i64 %indvars.iv2633, 5
  %.idx1747 = add nsw i64 %8678, %8707
  %8708 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1747
  %8709 = bitcast i16* %8708 to <32 x i16>*
  store <32 x i16> %8706, <32 x i16>* %8709, align 2, !tbaa !423
  br label %"consume blur_x1113"

"consume blur_x1113":                             ; preds = %"for blur_y.s0.x.x.rebased1105.consume blur_x1113_crit_edge", %"produce blur_x1111"
  %.pre-phi2700 = phi i64 [ %.pre2699, %"for blur_y.s0.x.x.rebased1105.consume blur_x1113_crit_edge" ], [ %8707, %"produce blur_x1111" ]
  %.idx1742 = add nsw i64 %8679, %.pre-phi2700
  %8710 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1742
  %8711 = bitcast i16* %8710 to <32 x i16>*
  %8712 = load <32 x i16>, <32 x i16>* %8711, align 2, !tbaa !423
  %.idx1743 = add nsw i64 %8680, %.pre-phi2700
  %8713 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1743
  %8714 = bitcast i16* %8713 to <32 x i16>*
  %8715 = load <32 x i16>, <32 x i16>* %8714, align 2, !tbaa !423
  %.idx1744 = add nsw i64 %8681, %.pre-phi2700
  %8716 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1744
  %8717 = bitcast i16* %8716 to <32 x i16>*
  %8718 = load <32 x i16>, <32 x i16>* %8717, align 2, !tbaa !423
  %8719 = add <32 x i16> %8715, %8712
  %8720 = add <32 x i16> %8719, %8718
  %8721 = shufflevector <32 x i16> %8720, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8721, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8723 = shufflevector <32 x i16> %8720, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8724 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8723, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8725 = shufflevector <16 x i16> %8722, <16 x i16> %8724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8726 = lshr <32 x i16> %8725, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8727 = add nuw nsw i64 %.pre-phi2700, 32
  %8728 = add nsw i64 %8727, %5665
  %.idx1745 = add i64 %8728, %8684
  %8729 = getelementptr inbounds i16, i16* %5664, i64 %.idx1745
  %8730 = bitcast i16* %8729 to <32 x i16>*
  store <32 x i16> %8726, <32 x i16>* %8730, align 2, !tbaa !425
  %indvars.iv.next2634 = add nuw nsw i64 %indvars.iv2633, 1
  %.not1746 = icmp eq i64 %indvars.iv.next2634, %5744
  br i1 %.not1746, label %"end for blur_y.s0.x.x.rebased1106", label %"for blur_y.s0.x.x.rebased1105"

"produce blur_x1117":                             ; preds = %"end for blur_y.s0.x.x.rebased1106"
  %8731 = getelementptr inbounds i16, i16* %read_input661, i64 %5702
  %8732 = getelementptr inbounds i16, i16* %8731, i64 1
  %8733 = bitcast i16* %8732 to <32 x i16>*
  %8734 = load <32 x i16>, <32 x i16>* %8733, align 2, !tbaa !412
  %8735 = getelementptr inbounds i16, i16* %8731, i64 2
  %8736 = bitcast i16* %8735 to <32 x i16>*
  %8737 = load <32 x i16>, <32 x i16>* %8736, align 2, !tbaa !412
  %8738 = bitcast i16* %8731 to <32 x i16>*
  %8739 = load <32 x i16>, <32 x i16>* %8738, align 2, !tbaa !412
  %8740 = add <32 x i16> %8737, %8734
  %8741 = add <32 x i16> %8740, %8739
  %8742 = shufflevector <32 x i16> %8741, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8743 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8742, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8744 = shufflevector <32 x i16> %8741, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8745 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8744, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8746 = shufflevector <16 x i16> %8743, <16 x i16> %8745, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8747 = lshr <32 x i16> %8746, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8748 = add nsw i64 %6628, %5659
  %8749 = getelementptr inbounds i16, i16* %blur_x714, i64 %8748
  %8750 = bitcast i16* %8749 to <32 x i16>*
  store <32 x i16> %8747, <32 x i16>* %8750, align 2, !tbaa !423
  %8751 = add nsw i64 %6520, %5659
  %8752 = getelementptr inbounds i16, i16* %blur_x714, i64 %8751
  %8753 = bitcast i16* %8752 to <32 x i16>*
  %8754 = load <32 x i16>, <32 x i16>* %8753, align 2, !tbaa !423
  %8755 = add nsw i64 %6872, %5659
  %8756 = getelementptr inbounds i16, i16* %blur_x714, i64 %8755
  %8757 = bitcast i16* %8756 to <32 x i16>*
  %8758 = load <32 x i16>, <32 x i16>* %8757, align 2, !tbaa !423
  %8759 = add <32 x i16> %8754, %8747
  %8760 = add <32 x i16> %8759, %8758
  %8761 = shufflevector <32 x i16> %8760, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8762 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8761, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8763 = shufflevector <32 x i16> %8760, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8763, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8765 = shufflevector <16 x i16> %8762, <16 x i16> %8764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8766 = lshr <32 x i16> %8765, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8767 = sext i32 %a161 to i64
  %8768 = add nsw i64 %8767, 15
  %8769 = mul nsw i64 %8768, %5542
  %8770 = add nsw i64 %5668, %8769
  %8771 = getelementptr inbounds i16, i16* %5664, i64 %8770
  %8772 = bitcast i16* %8771 to <32 x i16>*
  store <32 x i16> %8766, <32 x i16>* %8772, align 2, !tbaa !425
  br label %"produce blur_x1122"

"produce blur_x1122":                             ; preds = %"end for blur_y.s0.x.x.rebased1106", %"produce blur_x1117"
  %8773 = getelementptr inbounds i16, i16* %read_input661, i64 %5703
  %8774 = getelementptr inbounds i16, i16* %8773, i64 1
  %8775 = bitcast i16* %8774 to <32 x i16>*
  %8776 = load <32 x i16>, <32 x i16>* %8775, align 2, !tbaa !412
  %8777 = getelementptr inbounds i16, i16* %8773, i64 2
  %8778 = bitcast i16* %8777 to <32 x i16>*
  %8779 = load <32 x i16>, <32 x i16>* %8778, align 4, !tbaa !412
  %8780 = bitcast i16* %8773 to <32 x i16>*
  %8781 = load <32 x i16>, <32 x i16>* %8780, align 4, !tbaa !412
  %8782 = add <32 x i16> %8779, %8776
  %8783 = add <32 x i16> %8782, %8781
  %8784 = shufflevector <32 x i16> %8783, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8784, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8786 = shufflevector <32 x i16> %8783, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8786, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8788 = shufflevector <16 x i16> %8785, <16 x i16> %8787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8789 = lshr <32 x i16> %8788, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8789, <32 x i16>* %6741, align 2, !tbaa !423
  %8790 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %8791 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %8792 = add <32 x i16> %8790, %8789
  %8793 = add <32 x i16> %8792, %8791
  %8794 = shufflevector <32 x i16> %8793, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8795 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8794, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8796 = shufflevector <32 x i16> %8793, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8796, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8798 = shufflevector <16 x i16> %8795, <16 x i16> %8797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8799 = lshr <32 x i16> %8798, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8800 = add nsw i64 %6752, 16
  %8801 = mul nsw i64 %8800, %5542
  %8802 = getelementptr inbounds i16, i16* %5664, i64 %8801
  %8803 = bitcast i16* %8802 to <32 x i16>*
  store <32 x i16> %8799, <32 x i16>* %8803, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1128.preheader", label %"end for blur_y.s0.x.x.rebased1129", !prof !406

"for blur_y.s0.x.x.rebased1128.preheader":        ; preds = %"produce blur_x1122"
  %8804 = sext i32 %t942745 to i64
  %8805 = add nsw i64 %8804, 32
  %8806 = add nsw i64 %6628, 32
  %8807 = add nsw i64 %6739, 32
  %8808 = add nsw i64 %6520, 32
  %8809 = sext i32 %a161 to i64
  %8810 = add nsw i64 %8809, 16
  %8811 = mul nsw i64 %8810, %5542
  br label %"for blur_y.s0.x.x.rebased1128"

"for blur_y.s0.x.x.rebased1128":                  ; preds = %"for blur_y.s0.x.x.rebased1128.preheader", %"consume blur_x1136"
  %indvars.iv2635 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1128.preheader" ], [ %indvars.iv.next2636, %"consume blur_x1136" ]
  %8812 = trunc i64 %indvars.iv2635 to i32
  %8813 = shl nsw i32 %8812, 5
  %8814 = icmp sgt i32 %b156, %8813
  br i1 %8814, label %"produce blur_x1134", label %"for blur_y.s0.x.x.rebased1128.consume blur_x1136_crit_edge"

"for blur_y.s0.x.x.rebased1128.consume blur_x1136_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1128"
  %.pre2701 = shl nuw nsw i64 %indvars.iv2635, 5
  br label %"consume blur_x1136"

"end for blur_y.s0.x.x.rebased1129":              ; preds = %"consume blur_x1136", %"produce blur_x1122"
  br i1 %.not1643, label %"produce blur_x1145", label %"produce blur_x1140"

"produce blur_x1134":                             ; preds = %"for blur_y.s0.x.x.rebased1128"
  %indvars.iv2635.tr = trunc i64 %indvars.iv2635 to i32
  %8815 = shl i32 %indvars.iv2635.tr, 1
  %8816 = add nsw i32 %8815, %a159
  %8817 = shl nsw i32 %8816, 3
  %t8361135 = add nsw i32 %8817, %a159
  %8818 = sext i32 %t8361135 to i64
  %8819 = shl nsw i64 %8818, 1
  %8820 = getelementptr inbounds i16, i16* %read_input661, i64 %8819
  %8821 = getelementptr inbounds i16, i16* %8820, i64 33
  %8822 = bitcast i16* %8821 to <32 x i16>*
  %8823 = load <32 x i16>, <32 x i16>* %8822, align 2, !tbaa !412
  %8824 = getelementptr inbounds i16, i16* %8820, i64 34
  %8825 = bitcast i16* %8824 to <32 x i16>*
  %8826 = load <32 x i16>, <32 x i16>* %8825, align 4, !tbaa !412
  %8827 = getelementptr inbounds i16, i16* %8820, i64 32
  %8828 = bitcast i16* %8827 to <32 x i16>*
  %8829 = load <32 x i16>, <32 x i16>* %8828, align 4, !tbaa !412
  %8830 = add <32 x i16> %8826, %8823
  %8831 = add <32 x i16> %8830, %8829
  %8832 = shufflevector <32 x i16> %8831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8833 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8832, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8834 = shufflevector <32 x i16> %8831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8834, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8836 = shufflevector <16 x i16> %8833, <16 x i16> %8835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8837 = lshr <32 x i16> %8836, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8838 = shl nuw nsw i64 %indvars.iv2635, 5
  %.idx1741 = add nsw i64 %8805, %8838
  %8839 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1741
  %8840 = bitcast i16* %8839 to <32 x i16>*
  store <32 x i16> %8837, <32 x i16>* %8840, align 2, !tbaa !423
  br label %"consume blur_x1136"

"consume blur_x1136":                             ; preds = %"for blur_y.s0.x.x.rebased1128.consume blur_x1136_crit_edge", %"produce blur_x1134"
  %.pre-phi2702 = phi i64 [ %.pre2701, %"for blur_y.s0.x.x.rebased1128.consume blur_x1136_crit_edge" ], [ %8838, %"produce blur_x1134" ]
  %.idx1736 = add nsw i64 %8806, %.pre-phi2702
  %8841 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1736
  %8842 = bitcast i16* %8841 to <32 x i16>*
  %8843 = load <32 x i16>, <32 x i16>* %8842, align 2, !tbaa !423
  %.idx1737 = add nsw i64 %8807, %.pre-phi2702
  %8844 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1737
  %8845 = bitcast i16* %8844 to <32 x i16>*
  %8846 = load <32 x i16>, <32 x i16>* %8845, align 2, !tbaa !423
  %.idx1738 = add nsw i64 %8808, %.pre-phi2702
  %8847 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1738
  %8848 = bitcast i16* %8847 to <32 x i16>*
  %8849 = load <32 x i16>, <32 x i16>* %8848, align 2, !tbaa !423
  %8850 = add <32 x i16> %8846, %8843
  %8851 = add <32 x i16> %8850, %8849
  %8852 = shufflevector <32 x i16> %8851, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8853 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8852, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8854 = shufflevector <32 x i16> %8851, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8855 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8854, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8856 = shufflevector <16 x i16> %8853, <16 x i16> %8855, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8857 = lshr <32 x i16> %8856, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8858 = add nuw nsw i64 %.pre-phi2702, 32
  %8859 = add nsw i64 %8858, %5665
  %.idx1739 = add i64 %8859, %8811
  %8860 = getelementptr inbounds i16, i16* %5664, i64 %.idx1739
  %8861 = bitcast i16* %8860 to <32 x i16>*
  store <32 x i16> %8857, <32 x i16>* %8861, align 2, !tbaa !425
  %indvars.iv.next2636 = add nuw nsw i64 %indvars.iv2635, 1
  %.not1740 = icmp eq i64 %indvars.iv.next2636, %5744
  br i1 %.not1740, label %"end for blur_y.s0.x.x.rebased1129", label %"for blur_y.s0.x.x.rebased1128"

"produce blur_x1140":                             ; preds = %"end for blur_y.s0.x.x.rebased1129"
  %8862 = getelementptr inbounds i16, i16* %read_input661, i64 %5705
  %8863 = getelementptr inbounds i16, i16* %8862, i64 1
  %8864 = bitcast i16* %8863 to <32 x i16>*
  %8865 = load <32 x i16>, <32 x i16>* %8864, align 2, !tbaa !412
  %8866 = getelementptr inbounds i16, i16* %8862, i64 2
  %8867 = bitcast i16* %8866 to <32 x i16>*
  %8868 = load <32 x i16>, <32 x i16>* %8867, align 2, !tbaa !412
  %8869 = bitcast i16* %8862 to <32 x i16>*
  %8870 = load <32 x i16>, <32 x i16>* %8869, align 2, !tbaa !412
  %8871 = add <32 x i16> %8868, %8865
  %8872 = add <32 x i16> %8871, %8870
  %8873 = shufflevector <32 x i16> %8872, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8873, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8875 = shufflevector <32 x i16> %8872, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8875, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8877 = shufflevector <16 x i16> %8874, <16 x i16> %8876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8878 = lshr <32 x i16> %8877, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8879 = add nsw i64 %6739, %5659
  %8880 = getelementptr inbounds i16, i16* %blur_x714, i64 %8879
  %8881 = bitcast i16* %8880 to <32 x i16>*
  store <32 x i16> %8878, <32 x i16>* %8881, align 2, !tbaa !423
  %8882 = add nsw i64 %6628, %5659
  %8883 = getelementptr inbounds i16, i16* %blur_x714, i64 %8882
  %8884 = bitcast i16* %8883 to <32 x i16>*
  %8885 = load <32 x i16>, <32 x i16>* %8884, align 2, !tbaa !423
  %8886 = add nsw i64 %6520, %5659
  %8887 = getelementptr inbounds i16, i16* %blur_x714, i64 %8886
  %8888 = bitcast i16* %8887 to <32 x i16>*
  %8889 = load <32 x i16>, <32 x i16>* %8888, align 2, !tbaa !423
  %8890 = add <32 x i16> %8885, %8878
  %8891 = add <32 x i16> %8890, %8889
  %8892 = shufflevector <32 x i16> %8891, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8892, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8894 = shufflevector <32 x i16> %8891, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8895 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8894, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8896 = shufflevector <16 x i16> %8893, <16 x i16> %8895, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8897 = lshr <32 x i16> %8896, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8898 = sext i32 %a161 to i64
  %8899 = add nsw i64 %8898, 16
  %8900 = mul nsw i64 %8899, %5542
  %8901 = add nsw i64 %5668, %8900
  %8902 = getelementptr inbounds i16, i16* %5664, i64 %8901
  %8903 = bitcast i16* %8902 to <32 x i16>*
  store <32 x i16> %8897, <32 x i16>* %8903, align 2, !tbaa !425
  br label %"produce blur_x1145"

"produce blur_x1145":                             ; preds = %"end for blur_y.s0.x.x.rebased1129", %"produce blur_x1140"
  %8904 = getelementptr inbounds i16, i16* %read_input661, i64 %5706
  %8905 = getelementptr inbounds i16, i16* %8904, i64 1
  %8906 = bitcast i16* %8905 to <32 x i16>*
  %8907 = load <32 x i16>, <32 x i16>* %8906, align 2, !tbaa !412
  %8908 = getelementptr inbounds i16, i16* %8904, i64 2
  %8909 = bitcast i16* %8908 to <32 x i16>*
  %8910 = load <32 x i16>, <32 x i16>* %8909, align 2, !tbaa !412
  %8911 = bitcast i16* %8904 to <32 x i16>*
  %8912 = load <32 x i16>, <32 x i16>* %8911, align 2, !tbaa !412
  %8913 = add <32 x i16> %8910, %8907
  %8914 = add <32 x i16> %8913, %8912
  %8915 = shufflevector <32 x i16> %8914, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8915, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8917 = shufflevector <32 x i16> %8914, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8918 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8917, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8919 = shufflevector <16 x i16> %8916, <16 x i16> %8918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8920 = lshr <32 x i16> %8919, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %8920, <32 x i16>* %6874, align 2, !tbaa !423
  %8921 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %8922 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %8923 = add <32 x i16> %8921, %8920
  %8924 = add <32 x i16> %8923, %8922
  %8925 = shufflevector <32 x i16> %8924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8926 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8925, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8927 = shufflevector <32 x i16> %8924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8928 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8927, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8929 = shufflevector <16 x i16> %8926, <16 x i16> %8928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8930 = lshr <32 x i16> %8929, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8931 = add nsw i64 %6752, 17
  %8932 = mul nsw i64 %8931, %5542
  %8933 = getelementptr inbounds i16, i16* %5664, i64 %8932
  %8934 = bitcast i16* %8933 to <32 x i16>*
  store <32 x i16> %8930, <32 x i16>* %8934, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1152.preheader", label %"end for blur_y.s0.x.x.rebased1153", !prof !406

"for blur_y.s0.x.x.rebased1152.preheader":        ; preds = %"produce blur_x1145"
  %8935 = sext i32 %t947768 to i64
  %8936 = add nsw i64 %8935, 32
  %8937 = add nsw i64 %6739, 32
  %8938 = add nsw i64 %6872, 32
  %8939 = add nsw i64 %6628, 32
  %8940 = sext i32 %a161 to i64
  %8941 = add nsw i64 %8940, 17
  %8942 = mul nsw i64 %8941, %5542
  br label %"for blur_y.s0.x.x.rebased1152"

"for blur_y.s0.x.x.rebased1152":                  ; preds = %"for blur_y.s0.x.x.rebased1152.preheader", %"consume blur_x1160"
  %indvars.iv2637 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1152.preheader" ], [ %indvars.iv.next2638, %"consume blur_x1160" ]
  %8943 = trunc i64 %indvars.iv2637 to i32
  %8944 = shl nsw i32 %8943, 5
  %8945 = icmp sgt i32 %b156, %8944
  br i1 %8945, label %"produce blur_x1158", label %"for blur_y.s0.x.x.rebased1152.consume blur_x1160_crit_edge"

"for blur_y.s0.x.x.rebased1152.consume blur_x1160_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1152"
  %.pre2703 = shl nuw nsw i64 %indvars.iv2637, 5
  br label %"consume blur_x1160"

"end for blur_y.s0.x.x.rebased1153":              ; preds = %"consume blur_x1160", %"produce blur_x1145"
  br i1 %.not1643, label %"produce blur_x1169", label %"produce blur_x1164"

"produce blur_x1158":                             ; preds = %"for blur_y.s0.x.x.rebased1152"
  %t662.s1159 = add nsw i32 %8944, %t10231150
  %8946 = sext i32 %t662.s1159 to i64
  %8947 = getelementptr inbounds i16, i16* %read_input661, i64 %8946
  %8948 = getelementptr inbounds i16, i16* %8947, i64 33
  %8949 = bitcast i16* %8948 to <32 x i16>*
  %8950 = load <32 x i16>, <32 x i16>* %8949, align 2, !tbaa !412
  %8951 = getelementptr inbounds i16, i16* %8947, i64 34
  %8952 = bitcast i16* %8951 to <32 x i16>*
  %8953 = load <32 x i16>, <32 x i16>* %8952, align 2, !tbaa !412
  %8954 = getelementptr inbounds i16, i16* %8947, i64 32
  %8955 = bitcast i16* %8954 to <32 x i16>*
  %8956 = load <32 x i16>, <32 x i16>* %8955, align 2, !tbaa !412
  %8957 = add <32 x i16> %8953, %8950
  %8958 = add <32 x i16> %8957, %8956
  %8959 = shufflevector <32 x i16> %8958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8960 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8959, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8961 = shufflevector <32 x i16> %8958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8962 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8961, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8963 = shufflevector <16 x i16> %8960, <16 x i16> %8962, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8964 = lshr <32 x i16> %8963, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8965 = shl nuw nsw i64 %indvars.iv2637, 5
  %.idx1735 = add nsw i64 %8936, %8965
  %8966 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1735
  %8967 = bitcast i16* %8966 to <32 x i16>*
  store <32 x i16> %8964, <32 x i16>* %8967, align 2, !tbaa !423
  br label %"consume blur_x1160"

"consume blur_x1160":                             ; preds = %"for blur_y.s0.x.x.rebased1152.consume blur_x1160_crit_edge", %"produce blur_x1158"
  %.pre-phi2704 = phi i64 [ %.pre2703, %"for blur_y.s0.x.x.rebased1152.consume blur_x1160_crit_edge" ], [ %8965, %"produce blur_x1158" ]
  %.idx1730 = add nsw i64 %8937, %.pre-phi2704
  %8968 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1730
  %8969 = bitcast i16* %8968 to <32 x i16>*
  %8970 = load <32 x i16>, <32 x i16>* %8969, align 2, !tbaa !423
  %.idx1731 = add nsw i64 %8938, %.pre-phi2704
  %8971 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1731
  %8972 = bitcast i16* %8971 to <32 x i16>*
  %8973 = load <32 x i16>, <32 x i16>* %8972, align 2, !tbaa !423
  %.idx1732 = add nsw i64 %8939, %.pre-phi2704
  %8974 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1732
  %8975 = bitcast i16* %8974 to <32 x i16>*
  %8976 = load <32 x i16>, <32 x i16>* %8975, align 2, !tbaa !423
  %8977 = add <32 x i16> %8973, %8970
  %8978 = add <32 x i16> %8977, %8976
  %8979 = shufflevector <32 x i16> %8978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8979, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8981 = shufflevector <32 x i16> %8978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8982 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8981, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8983 = shufflevector <16 x i16> %8980, <16 x i16> %8982, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8984 = lshr <32 x i16> %8983, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8985 = add nuw nsw i64 %.pre-phi2704, 32
  %8986 = add nsw i64 %8985, %5665
  %.idx1733 = add i64 %8986, %8942
  %8987 = getelementptr inbounds i16, i16* %5664, i64 %.idx1733
  %8988 = bitcast i16* %8987 to <32 x i16>*
  store <32 x i16> %8984, <32 x i16>* %8988, align 2, !tbaa !425
  %indvars.iv.next2638 = add nuw nsw i64 %indvars.iv2637, 1
  %.not1734 = icmp eq i64 %indvars.iv.next2638, %5744
  br i1 %.not1734, label %"end for blur_y.s0.x.x.rebased1153", label %"for blur_y.s0.x.x.rebased1152"

"produce blur_x1164":                             ; preds = %"end for blur_y.s0.x.x.rebased1153"
  %8989 = getelementptr inbounds i16, i16* %read_input661, i64 %5707
  %8990 = getelementptr inbounds i16, i16* %8989, i64 1
  %8991 = bitcast i16* %8990 to <32 x i16>*
  %8992 = load <32 x i16>, <32 x i16>* %8991, align 2, !tbaa !412
  %8993 = getelementptr inbounds i16, i16* %8989, i64 2
  %8994 = bitcast i16* %8993 to <32 x i16>*
  %8995 = load <32 x i16>, <32 x i16>* %8994, align 2, !tbaa !412
  %8996 = bitcast i16* %8989 to <32 x i16>*
  %8997 = load <32 x i16>, <32 x i16>* %8996, align 2, !tbaa !412
  %8998 = add <32 x i16> %8995, %8992
  %8999 = add <32 x i16> %8998, %8997
  %9000 = shufflevector <32 x i16> %8999, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9001 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9000, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9002 = shufflevector <32 x i16> %8999, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9003 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9002, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9004 = shufflevector <16 x i16> %9001, <16 x i16> %9003, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9005 = lshr <32 x i16> %9004, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9006 = add nsw i64 %6872, %5659
  %9007 = getelementptr inbounds i16, i16* %blur_x714, i64 %9006
  %9008 = bitcast i16* %9007 to <32 x i16>*
  store <32 x i16> %9005, <32 x i16>* %9008, align 2, !tbaa !423
  %9009 = add nsw i64 %6739, %5659
  %9010 = getelementptr inbounds i16, i16* %blur_x714, i64 %9009
  %9011 = bitcast i16* %9010 to <32 x i16>*
  %9012 = load <32 x i16>, <32 x i16>* %9011, align 2, !tbaa !423
  %9013 = add nsw i64 %6628, %5659
  %9014 = getelementptr inbounds i16, i16* %blur_x714, i64 %9013
  %9015 = bitcast i16* %9014 to <32 x i16>*
  %9016 = load <32 x i16>, <32 x i16>* %9015, align 2, !tbaa !423
  %9017 = add <32 x i16> %9012, %9005
  %9018 = add <32 x i16> %9017, %9016
  %9019 = shufflevector <32 x i16> %9018, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9019, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9021 = shufflevector <32 x i16> %9018, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9022 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9021, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9023 = shufflevector <16 x i16> %9020, <16 x i16> %9022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9024 = lshr <32 x i16> %9023, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9025 = sext i32 %a161 to i64
  %9026 = add nsw i64 %9025, 17
  %9027 = mul nsw i64 %9026, %5542
  %9028 = add nsw i64 %5668, %9027
  %9029 = getelementptr inbounds i16, i16* %5664, i64 %9028
  %9030 = bitcast i16* %9029 to <32 x i16>*
  store <32 x i16> %9024, <32 x i16>* %9030, align 2, !tbaa !425
  br label %"produce blur_x1169"

"produce blur_x1169":                             ; preds = %"end for blur_y.s0.x.x.rebased1153", %"produce blur_x1164"
  %9031 = getelementptr inbounds i16, i16* %read_input661, i64 %5708
  %9032 = getelementptr inbounds i16, i16* %9031, i64 1
  %9033 = bitcast i16* %9032 to <32 x i16>*
  %9034 = load <32 x i16>, <32 x i16>* %9033, align 2, !tbaa !412
  %9035 = getelementptr inbounds i16, i16* %9031, i64 2
  %9036 = bitcast i16* %9035 to <32 x i16>*
  %9037 = load <32 x i16>, <32 x i16>* %9036, align 4, !tbaa !412
  %9038 = bitcast i16* %9031 to <32 x i16>*
  %9039 = load <32 x i16>, <32 x i16>* %9038, align 8, !tbaa !412
  %9040 = add <32 x i16> %9037, %9034
  %9041 = add <32 x i16> %9040, %9039
  %9042 = shufflevector <32 x i16> %9041, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9043 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9042, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9044 = shufflevector <32 x i16> %9041, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9045 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9044, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9046 = shufflevector <16 x i16> %9043, <16 x i16> %9045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9047 = lshr <32 x i16> %9046, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9047, <32 x i16>* %6522, align 2, !tbaa !423
  %9048 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %9049 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %9050 = add <32 x i16> %9048, %9047
  %9051 = add <32 x i16> %9050, %9049
  %9052 = shufflevector <32 x i16> %9051, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9053 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9052, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9054 = shufflevector <32 x i16> %9051, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9054, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9056 = shufflevector <16 x i16> %9053, <16 x i16> %9055, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9057 = lshr <32 x i16> %9056, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9058 = add nsw i64 %6752, 18
  %9059 = mul nsw i64 %9058, %5542
  %9060 = getelementptr inbounds i16, i16* %5664, i64 %9059
  %9061 = bitcast i16* %9060 to <32 x i16>*
  store <32 x i16> %9057, <32 x i16>* %9061, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1176.preheader", label %"end for blur_y.s0.x.x.rebased1177", !prof !406

"for blur_y.s0.x.x.rebased1176.preheader":        ; preds = %"produce blur_x1169"
  %9062 = sext i32 %t939717 to i64
  %9063 = add nsw i64 %9062, 32
  %9064 = add nsw i64 %6872, 32
  %9065 = add nsw i64 %6520, 32
  %9066 = add nsw i64 %6739, 32
  %9067 = sext i32 %a161 to i64
  %9068 = add nsw i64 %9067, 18
  %9069 = mul nsw i64 %9068, %5542
  br label %"for blur_y.s0.x.x.rebased1176"

"for blur_y.s0.x.x.rebased1176":                  ; preds = %"for blur_y.s0.x.x.rebased1176.preheader", %"consume blur_x1184"
  %indvars.iv2639 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1176.preheader" ], [ %indvars.iv.next2640, %"consume blur_x1184" ]
  %9070 = trunc i64 %indvars.iv2639 to i32
  %9071 = shl nsw i32 %9070, 5
  %9072 = icmp sgt i32 %b156, %9071
  br i1 %9072, label %"produce blur_x1182", label %"for blur_y.s0.x.x.rebased1176.consume blur_x1184_crit_edge"

"for blur_y.s0.x.x.rebased1176.consume blur_x1184_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1176"
  %.pre2705 = shl nuw nsw i64 %indvars.iv2639, 5
  br label %"consume blur_x1184"

"end for blur_y.s0.x.x.rebased1177":              ; preds = %"consume blur_x1184", %"produce blur_x1169"
  br i1 %.not1643, label %"produce blur_x1193", label %"produce blur_x1188"

"produce blur_x1182":                             ; preds = %"for blur_y.s0.x.x.rebased1176"
  %t667.s1183 = add nsw i32 %9071, %t10281174
  %9073 = sext i32 %t667.s1183 to i64
  %9074 = getelementptr inbounds i16, i16* %read_input661, i64 %9073
  %9075 = getelementptr inbounds i16, i16* %9074, i64 33
  %9076 = bitcast i16* %9075 to <32 x i16>*
  %9077 = load <32 x i16>, <32 x i16>* %9076, align 2, !tbaa !412
  %9078 = getelementptr inbounds i16, i16* %9074, i64 34
  %9079 = bitcast i16* %9078 to <32 x i16>*
  %9080 = load <32 x i16>, <32 x i16>* %9079, align 4, !tbaa !412
  %9081 = getelementptr inbounds i16, i16* %9074, i64 32
  %9082 = bitcast i16* %9081 to <32 x i16>*
  %9083 = load <32 x i16>, <32 x i16>* %9082, align 4, !tbaa !412
  %9084 = add <32 x i16> %9080, %9077
  %9085 = add <32 x i16> %9084, %9083
  %9086 = shufflevector <32 x i16> %9085, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9087 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9086, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9088 = shufflevector <32 x i16> %9085, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9088, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9090 = shufflevector <16 x i16> %9087, <16 x i16> %9089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9091 = lshr <32 x i16> %9090, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9092 = shl nuw nsw i64 %indvars.iv2639, 5
  %.idx1729 = add nsw i64 %9063, %9092
  %9093 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1729
  %9094 = bitcast i16* %9093 to <32 x i16>*
  store <32 x i16> %9091, <32 x i16>* %9094, align 2, !tbaa !423
  br label %"consume blur_x1184"

"consume blur_x1184":                             ; preds = %"for blur_y.s0.x.x.rebased1176.consume blur_x1184_crit_edge", %"produce blur_x1182"
  %.pre-phi2706 = phi i64 [ %.pre2705, %"for blur_y.s0.x.x.rebased1176.consume blur_x1184_crit_edge" ], [ %9092, %"produce blur_x1182" ]
  %.idx1724 = add nsw i64 %9064, %.pre-phi2706
  %9095 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1724
  %9096 = bitcast i16* %9095 to <32 x i16>*
  %9097 = load <32 x i16>, <32 x i16>* %9096, align 2, !tbaa !423
  %.idx1725 = add nsw i64 %9065, %.pre-phi2706
  %9098 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1725
  %9099 = bitcast i16* %9098 to <32 x i16>*
  %9100 = load <32 x i16>, <32 x i16>* %9099, align 2, !tbaa !423
  %.idx1726 = add nsw i64 %9066, %.pre-phi2706
  %9101 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1726
  %9102 = bitcast i16* %9101 to <32 x i16>*
  %9103 = load <32 x i16>, <32 x i16>* %9102, align 2, !tbaa !423
  %9104 = add <32 x i16> %9100, %9097
  %9105 = add <32 x i16> %9104, %9103
  %9106 = shufflevector <32 x i16> %9105, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9106, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9108 = shufflevector <32 x i16> %9105, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9109 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9108, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9110 = shufflevector <16 x i16> %9107, <16 x i16> %9109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9111 = lshr <32 x i16> %9110, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9112 = add nuw nsw i64 %.pre-phi2706, 32
  %9113 = add nsw i64 %9112, %5665
  %.idx1727 = add i64 %9113, %9069
  %9114 = getelementptr inbounds i16, i16* %5664, i64 %.idx1727
  %9115 = bitcast i16* %9114 to <32 x i16>*
  store <32 x i16> %9111, <32 x i16>* %9115, align 2, !tbaa !425
  %indvars.iv.next2640 = add nuw nsw i64 %indvars.iv2639, 1
  %.not1728 = icmp eq i64 %indvars.iv.next2640, %5744
  br i1 %.not1728, label %"end for blur_y.s0.x.x.rebased1177", label %"for blur_y.s0.x.x.rebased1176"

"produce blur_x1188":                             ; preds = %"end for blur_y.s0.x.x.rebased1177"
  %9116 = getelementptr inbounds i16, i16* %read_input661, i64 %5709
  %9117 = getelementptr inbounds i16, i16* %9116, i64 1
  %9118 = bitcast i16* %9117 to <32 x i16>*
  %9119 = load <32 x i16>, <32 x i16>* %9118, align 2, !tbaa !412
  %9120 = getelementptr inbounds i16, i16* %9116, i64 2
  %9121 = bitcast i16* %9120 to <32 x i16>*
  %9122 = load <32 x i16>, <32 x i16>* %9121, align 2, !tbaa !412
  %9123 = bitcast i16* %9116 to <32 x i16>*
  %9124 = load <32 x i16>, <32 x i16>* %9123, align 2, !tbaa !412
  %9125 = add <32 x i16> %9122, %9119
  %9126 = add <32 x i16> %9125, %9124
  %9127 = shufflevector <32 x i16> %9126, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9128 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9127, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9129 = shufflevector <32 x i16> %9126, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9130 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9129, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9131 = shufflevector <16 x i16> %9128, <16 x i16> %9130, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9132 = lshr <32 x i16> %9131, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9133 = add nsw i64 %6520, %5659
  %9134 = getelementptr inbounds i16, i16* %blur_x714, i64 %9133
  %9135 = bitcast i16* %9134 to <32 x i16>*
  store <32 x i16> %9132, <32 x i16>* %9135, align 2, !tbaa !423
  %9136 = add nsw i64 %6872, %5659
  %9137 = getelementptr inbounds i16, i16* %blur_x714, i64 %9136
  %9138 = bitcast i16* %9137 to <32 x i16>*
  %9139 = load <32 x i16>, <32 x i16>* %9138, align 2, !tbaa !423
  %9140 = add nsw i64 %6739, %5659
  %9141 = getelementptr inbounds i16, i16* %blur_x714, i64 %9140
  %9142 = bitcast i16* %9141 to <32 x i16>*
  %9143 = load <32 x i16>, <32 x i16>* %9142, align 2, !tbaa !423
  %9144 = add <32 x i16> %9139, %9132
  %9145 = add <32 x i16> %9144, %9143
  %9146 = shufflevector <32 x i16> %9145, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9147 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9146, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9148 = shufflevector <32 x i16> %9145, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9149 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9148, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9150 = shufflevector <16 x i16> %9147, <16 x i16> %9149, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9151 = lshr <32 x i16> %9150, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9152 = sext i32 %a161 to i64
  %9153 = add nsw i64 %9152, 18
  %9154 = mul nsw i64 %9153, %5542
  %9155 = add nsw i64 %5668, %9154
  %9156 = getelementptr inbounds i16, i16* %5664, i64 %9155
  %9157 = bitcast i16* %9156 to <32 x i16>*
  store <32 x i16> %9151, <32 x i16>* %9157, align 2, !tbaa !425
  br label %"produce blur_x1193"

"produce blur_x1193":                             ; preds = %"end for blur_y.s0.x.x.rebased1177", %"produce blur_x1188"
  %9158 = getelementptr inbounds i16, i16* %read_input661, i64 %5710
  %9159 = getelementptr inbounds i16, i16* %9158, i64 1
  %9160 = bitcast i16* %9159 to <32 x i16>*
  %9161 = load <32 x i16>, <32 x i16>* %9160, align 2, !tbaa !412
  %9162 = getelementptr inbounds i16, i16* %9158, i64 2
  %9163 = bitcast i16* %9162 to <32 x i16>*
  %9164 = load <32 x i16>, <32 x i16>* %9163, align 2, !tbaa !412
  %9165 = bitcast i16* %9158 to <32 x i16>*
  %9166 = load <32 x i16>, <32 x i16>* %9165, align 2, !tbaa !412
  %9167 = add <32 x i16> %9164, %9161
  %9168 = add <32 x i16> %9167, %9166
  %9169 = shufflevector <32 x i16> %9168, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9170 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9169, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9171 = shufflevector <32 x i16> %9168, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9171, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9173 = shufflevector <16 x i16> %9170, <16 x i16> %9172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9174 = lshr <32 x i16> %9173, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9174, <32 x i16>* %6630, align 2, !tbaa !423
  %9175 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %9176 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %9177 = add <32 x i16> %9175, %9174
  %9178 = add <32 x i16> %9177, %9176
  %9179 = shufflevector <32 x i16> %9178, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9180 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9179, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9181 = shufflevector <32 x i16> %9178, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9182 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9181, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9183 = shufflevector <16 x i16> %9180, <16 x i16> %9182, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9184 = lshr <32 x i16> %9183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9185 = add nsw i64 %6752, 19
  %9186 = mul nsw i64 %9185, %5542
  %9187 = getelementptr inbounds i16, i16* %5664, i64 %9186
  %9188 = bitcast i16* %9187 to <32 x i16>*
  store <32 x i16> %9184, <32 x i16>* %9188, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1200.preheader", label %"end for blur_y.s0.x.x.rebased1201", !prof !406

"for blur_y.s0.x.x.rebased1200.preheader":        ; preds = %"produce blur_x1193"
  %9189 = sext i32 %t941729 to i64
  %9190 = add nsw i64 %9189, 32
  %9191 = add nsw i64 %6520, 32
  %9192 = add nsw i64 %6628, 32
  %9193 = add nsw i64 %6872, 32
  %9194 = sext i32 %a161 to i64
  %9195 = add nsw i64 %9194, 19
  %9196 = mul nsw i64 %9195, %5542
  br label %"for blur_y.s0.x.x.rebased1200"

"for blur_y.s0.x.x.rebased1200":                  ; preds = %"for blur_y.s0.x.x.rebased1200.preheader", %"consume blur_x1208"
  %indvars.iv2641 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1200.preheader" ], [ %indvars.iv.next2642, %"consume blur_x1208" ]
  %9197 = trunc i64 %indvars.iv2641 to i32
  %9198 = shl nsw i32 %9197, 5
  %9199 = icmp sgt i32 %b156, %9198
  br i1 %9199, label %"produce blur_x1206", label %"for blur_y.s0.x.x.rebased1200.consume blur_x1208_crit_edge"

"for blur_y.s0.x.x.rebased1200.consume blur_x1208_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1200"
  %.pre2707 = shl nuw nsw i64 %indvars.iv2641, 5
  br label %"consume blur_x1208"

"end for blur_y.s0.x.x.rebased1201":              ; preds = %"consume blur_x1208", %"produce blur_x1193"
  br i1 %.not1643, label %"produce blur_x1217", label %"produce blur_x1212"

"produce blur_x1206":                             ; preds = %"for blur_y.s0.x.x.rebased1200"
  %t672.s1207 = add nsw i32 %9198, %t10331198
  %9200 = sext i32 %t672.s1207 to i64
  %9201 = getelementptr inbounds i16, i16* %read_input661, i64 %9200
  %9202 = getelementptr inbounds i16, i16* %9201, i64 33
  %9203 = bitcast i16* %9202 to <32 x i16>*
  %9204 = load <32 x i16>, <32 x i16>* %9203, align 2, !tbaa !412
  %9205 = getelementptr inbounds i16, i16* %9201, i64 34
  %9206 = bitcast i16* %9205 to <32 x i16>*
  %9207 = load <32 x i16>, <32 x i16>* %9206, align 2, !tbaa !412
  %9208 = getelementptr inbounds i16, i16* %9201, i64 32
  %9209 = bitcast i16* %9208 to <32 x i16>*
  %9210 = load <32 x i16>, <32 x i16>* %9209, align 2, !tbaa !412
  %9211 = add <32 x i16> %9207, %9204
  %9212 = add <32 x i16> %9211, %9210
  %9213 = shufflevector <32 x i16> %9212, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9214 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9213, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9215 = shufflevector <32 x i16> %9212, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9216 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9215, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9217 = shufflevector <16 x i16> %9214, <16 x i16> %9216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9218 = lshr <32 x i16> %9217, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9219 = shl nuw nsw i64 %indvars.iv2641, 5
  %.idx1723 = add nsw i64 %9190, %9219
  %9220 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1723
  %9221 = bitcast i16* %9220 to <32 x i16>*
  store <32 x i16> %9218, <32 x i16>* %9221, align 2, !tbaa !423
  br label %"consume blur_x1208"

"consume blur_x1208":                             ; preds = %"for blur_y.s0.x.x.rebased1200.consume blur_x1208_crit_edge", %"produce blur_x1206"
  %.pre-phi2708 = phi i64 [ %.pre2707, %"for blur_y.s0.x.x.rebased1200.consume blur_x1208_crit_edge" ], [ %9219, %"produce blur_x1206" ]
  %.idx1718 = add nsw i64 %9191, %.pre-phi2708
  %9222 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1718
  %9223 = bitcast i16* %9222 to <32 x i16>*
  %9224 = load <32 x i16>, <32 x i16>* %9223, align 2, !tbaa !423
  %.idx1719 = add nsw i64 %9192, %.pre-phi2708
  %9225 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1719
  %9226 = bitcast i16* %9225 to <32 x i16>*
  %9227 = load <32 x i16>, <32 x i16>* %9226, align 2, !tbaa !423
  %.idx1720 = add nsw i64 %9193, %.pre-phi2708
  %9228 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1720
  %9229 = bitcast i16* %9228 to <32 x i16>*
  %9230 = load <32 x i16>, <32 x i16>* %9229, align 2, !tbaa !423
  %9231 = add <32 x i16> %9227, %9224
  %9232 = add <32 x i16> %9231, %9230
  %9233 = shufflevector <32 x i16> %9232, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9233, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9235 = shufflevector <32 x i16> %9232, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9236 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9235, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9237 = shufflevector <16 x i16> %9234, <16 x i16> %9236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9238 = lshr <32 x i16> %9237, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9239 = add nuw nsw i64 %.pre-phi2708, 32
  %9240 = add nsw i64 %9239, %5665
  %.idx1721 = add i64 %9240, %9196
  %9241 = getelementptr inbounds i16, i16* %5664, i64 %.idx1721
  %9242 = bitcast i16* %9241 to <32 x i16>*
  store <32 x i16> %9238, <32 x i16>* %9242, align 2, !tbaa !425
  %indvars.iv.next2642 = add nuw nsw i64 %indvars.iv2641, 1
  %.not1722 = icmp eq i64 %indvars.iv.next2642, %5744
  br i1 %.not1722, label %"end for blur_y.s0.x.x.rebased1201", label %"for blur_y.s0.x.x.rebased1200"

"produce blur_x1212":                             ; preds = %"end for blur_y.s0.x.x.rebased1201"
  %9243 = getelementptr inbounds i16, i16* %read_input661, i64 %5711
  %9244 = getelementptr inbounds i16, i16* %9243, i64 1
  %9245 = bitcast i16* %9244 to <32 x i16>*
  %9246 = load <32 x i16>, <32 x i16>* %9245, align 2, !tbaa !412
  %9247 = getelementptr inbounds i16, i16* %9243, i64 2
  %9248 = bitcast i16* %9247 to <32 x i16>*
  %9249 = load <32 x i16>, <32 x i16>* %9248, align 2, !tbaa !412
  %9250 = bitcast i16* %9243 to <32 x i16>*
  %9251 = load <32 x i16>, <32 x i16>* %9250, align 2, !tbaa !412
  %9252 = add <32 x i16> %9249, %9246
  %9253 = add <32 x i16> %9252, %9251
  %9254 = shufflevector <32 x i16> %9253, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9254, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9256 = shufflevector <32 x i16> %9253, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9256, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9258 = shufflevector <16 x i16> %9255, <16 x i16> %9257, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9259 = lshr <32 x i16> %9258, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9260 = add nsw i64 %6628, %5659
  %9261 = getelementptr inbounds i16, i16* %blur_x714, i64 %9260
  %9262 = bitcast i16* %9261 to <32 x i16>*
  store <32 x i16> %9259, <32 x i16>* %9262, align 2, !tbaa !423
  %9263 = add nsw i64 %6520, %5659
  %9264 = getelementptr inbounds i16, i16* %blur_x714, i64 %9263
  %9265 = bitcast i16* %9264 to <32 x i16>*
  %9266 = load <32 x i16>, <32 x i16>* %9265, align 2, !tbaa !423
  %9267 = add nsw i64 %6872, %5659
  %9268 = getelementptr inbounds i16, i16* %blur_x714, i64 %9267
  %9269 = bitcast i16* %9268 to <32 x i16>*
  %9270 = load <32 x i16>, <32 x i16>* %9269, align 2, !tbaa !423
  %9271 = add <32 x i16> %9266, %9259
  %9272 = add <32 x i16> %9271, %9270
  %9273 = shufflevector <32 x i16> %9272, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9274 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9273, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9275 = shufflevector <32 x i16> %9272, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9276 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9275, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9277 = shufflevector <16 x i16> %9274, <16 x i16> %9276, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9278 = lshr <32 x i16> %9277, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9279 = sext i32 %a161 to i64
  %9280 = add nsw i64 %9279, 19
  %9281 = mul nsw i64 %9280, %5542
  %9282 = add nsw i64 %5668, %9281
  %9283 = getelementptr inbounds i16, i16* %5664, i64 %9282
  %9284 = bitcast i16* %9283 to <32 x i16>*
  store <32 x i16> %9278, <32 x i16>* %9284, align 2, !tbaa !425
  br label %"produce blur_x1217"

"produce blur_x1217":                             ; preds = %"end for blur_y.s0.x.x.rebased1201", %"produce blur_x1212"
  %9285 = getelementptr inbounds i16, i16* %read_input661, i64 %5712
  %9286 = getelementptr inbounds i16, i16* %9285, i64 1
  %9287 = bitcast i16* %9286 to <32 x i16>*
  %9288 = load <32 x i16>, <32 x i16>* %9287, align 2, !tbaa !412
  %9289 = getelementptr inbounds i16, i16* %9285, i64 2
  %9290 = bitcast i16* %9289 to <32 x i16>*
  %9291 = load <32 x i16>, <32 x i16>* %9290, align 4, !tbaa !412
  %9292 = bitcast i16* %9285 to <32 x i16>*
  %9293 = load <32 x i16>, <32 x i16>* %9292, align 4, !tbaa !412
  %9294 = add <32 x i16> %9291, %9288
  %9295 = add <32 x i16> %9294, %9293
  %9296 = shufflevector <32 x i16> %9295, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9297 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9296, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9298 = shufflevector <32 x i16> %9295, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9299 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9298, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9300 = shufflevector <16 x i16> %9297, <16 x i16> %9299, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9301 = lshr <32 x i16> %9300, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9301, <32 x i16>* %6741, align 2, !tbaa !423
  %9302 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %9303 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %9304 = add <32 x i16> %9302, %9301
  %9305 = add <32 x i16> %9304, %9303
  %9306 = shufflevector <32 x i16> %9305, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9306, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9308 = shufflevector <32 x i16> %9305, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9309 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9308, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9310 = shufflevector <16 x i16> %9307, <16 x i16> %9309, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9311 = lshr <32 x i16> %9310, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9312 = add nsw i64 %6752, 20
  %9313 = mul nsw i64 %9312, %5542
  %9314 = getelementptr inbounds i16, i16* %5664, i64 %9313
  %9315 = bitcast i16* %9314 to <32 x i16>*
  store <32 x i16> %9311, <32 x i16>* %9315, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1224.preheader", label %"end for blur_y.s0.x.x.rebased1225", !prof !406

"for blur_y.s0.x.x.rebased1224.preheader":        ; preds = %"produce blur_x1217"
  %9316 = sext i32 %t942745 to i64
  %9317 = add nsw i64 %9316, 32
  %9318 = add nsw i64 %6628, 32
  %9319 = add nsw i64 %6739, 32
  %9320 = add nsw i64 %6520, 32
  %9321 = sext i32 %a161 to i64
  %9322 = add nsw i64 %9321, 20
  %9323 = mul nsw i64 %9322, %5542
  br label %"for blur_y.s0.x.x.rebased1224"

"for blur_y.s0.x.x.rebased1224":                  ; preds = %"for blur_y.s0.x.x.rebased1224.preheader", %"consume blur_x1232"
  %indvars.iv2643 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1224.preheader" ], [ %indvars.iv.next2644, %"consume blur_x1232" ]
  %9324 = trunc i64 %indvars.iv2643 to i32
  %9325 = shl nsw i32 %9324, 5
  %9326 = icmp sgt i32 %b156, %9325
  br i1 %9326, label %"produce blur_x1230", label %"for blur_y.s0.x.x.rebased1224.consume blur_x1232_crit_edge"

"for blur_y.s0.x.x.rebased1224.consume blur_x1232_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1224"
  %.pre2709 = shl nuw nsw i64 %indvars.iv2643, 5
  br label %"consume blur_x1232"

"end for blur_y.s0.x.x.rebased1225":              ; preds = %"consume blur_x1232", %"produce blur_x1217"
  br i1 %.not1643, label %"produce blur_x1241", label %"produce blur_x1236"

"produce blur_x1230":                             ; preds = %"for blur_y.s0.x.x.rebased1224"
  %t677.s1231 = add nsw i32 %9325, %t10381222
  %9327 = sext i32 %t677.s1231 to i64
  %9328 = getelementptr inbounds i16, i16* %read_input661, i64 %9327
  %9329 = getelementptr inbounds i16, i16* %9328, i64 33
  %9330 = bitcast i16* %9329 to <32 x i16>*
  %9331 = load <32 x i16>, <32 x i16>* %9330, align 2, !tbaa !412
  %9332 = getelementptr inbounds i16, i16* %9328, i64 34
  %9333 = bitcast i16* %9332 to <32 x i16>*
  %9334 = load <32 x i16>, <32 x i16>* %9333, align 4, !tbaa !412
  %9335 = getelementptr inbounds i16, i16* %9328, i64 32
  %9336 = bitcast i16* %9335 to <32 x i16>*
  %9337 = load <32 x i16>, <32 x i16>* %9336, align 4, !tbaa !412
  %9338 = add <32 x i16> %9334, %9331
  %9339 = add <32 x i16> %9338, %9337
  %9340 = shufflevector <32 x i16> %9339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9340, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9342 = shufflevector <32 x i16> %9339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9342, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9344 = shufflevector <16 x i16> %9341, <16 x i16> %9343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9345 = lshr <32 x i16> %9344, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9346 = shl nuw nsw i64 %indvars.iv2643, 5
  %.idx1717 = add nsw i64 %9317, %9346
  %9347 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1717
  %9348 = bitcast i16* %9347 to <32 x i16>*
  store <32 x i16> %9345, <32 x i16>* %9348, align 2, !tbaa !423
  br label %"consume blur_x1232"

"consume blur_x1232":                             ; preds = %"for blur_y.s0.x.x.rebased1224.consume blur_x1232_crit_edge", %"produce blur_x1230"
  %.pre-phi2710 = phi i64 [ %.pre2709, %"for blur_y.s0.x.x.rebased1224.consume blur_x1232_crit_edge" ], [ %9346, %"produce blur_x1230" ]
  %.idx1712 = add nsw i64 %9318, %.pre-phi2710
  %9349 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1712
  %9350 = bitcast i16* %9349 to <32 x i16>*
  %9351 = load <32 x i16>, <32 x i16>* %9350, align 2, !tbaa !423
  %.idx1713 = add nsw i64 %9319, %.pre-phi2710
  %9352 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1713
  %9353 = bitcast i16* %9352 to <32 x i16>*
  %9354 = load <32 x i16>, <32 x i16>* %9353, align 2, !tbaa !423
  %.idx1714 = add nsw i64 %9320, %.pre-phi2710
  %9355 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1714
  %9356 = bitcast i16* %9355 to <32 x i16>*
  %9357 = load <32 x i16>, <32 x i16>* %9356, align 2, !tbaa !423
  %9358 = add <32 x i16> %9354, %9351
  %9359 = add <32 x i16> %9358, %9357
  %9360 = shufflevector <32 x i16> %9359, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9360, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9362 = shufflevector <32 x i16> %9359, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9363 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9362, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9364 = shufflevector <16 x i16> %9361, <16 x i16> %9363, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9365 = lshr <32 x i16> %9364, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9366 = add nuw nsw i64 %.pre-phi2710, 32
  %9367 = add nsw i64 %9366, %5665
  %.idx1715 = add i64 %9367, %9323
  %9368 = getelementptr inbounds i16, i16* %5664, i64 %.idx1715
  %9369 = bitcast i16* %9368 to <32 x i16>*
  store <32 x i16> %9365, <32 x i16>* %9369, align 2, !tbaa !425
  %indvars.iv.next2644 = add nuw nsw i64 %indvars.iv2643, 1
  %.not1716 = icmp eq i64 %indvars.iv.next2644, %5744
  br i1 %.not1716, label %"end for blur_y.s0.x.x.rebased1225", label %"for blur_y.s0.x.x.rebased1224"

"produce blur_x1236":                             ; preds = %"end for blur_y.s0.x.x.rebased1225"
  %9370 = getelementptr inbounds i16, i16* %read_input661, i64 %5713
  %9371 = getelementptr inbounds i16, i16* %9370, i64 1
  %9372 = bitcast i16* %9371 to <32 x i16>*
  %9373 = load <32 x i16>, <32 x i16>* %9372, align 2, !tbaa !412
  %9374 = getelementptr inbounds i16, i16* %9370, i64 2
  %9375 = bitcast i16* %9374 to <32 x i16>*
  %9376 = load <32 x i16>, <32 x i16>* %9375, align 2, !tbaa !412
  %9377 = bitcast i16* %9370 to <32 x i16>*
  %9378 = load <32 x i16>, <32 x i16>* %9377, align 2, !tbaa !412
  %9379 = add <32 x i16> %9376, %9373
  %9380 = add <32 x i16> %9379, %9378
  %9381 = shufflevector <32 x i16> %9380, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9382 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9381, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9383 = shufflevector <32 x i16> %9380, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9383, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9385 = shufflevector <16 x i16> %9382, <16 x i16> %9384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9386 = lshr <32 x i16> %9385, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9387 = add nsw i64 %6739, %5659
  %9388 = getelementptr inbounds i16, i16* %blur_x714, i64 %9387
  %9389 = bitcast i16* %9388 to <32 x i16>*
  store <32 x i16> %9386, <32 x i16>* %9389, align 2, !tbaa !423
  %9390 = add nsw i64 %6628, %5659
  %9391 = getelementptr inbounds i16, i16* %blur_x714, i64 %9390
  %9392 = bitcast i16* %9391 to <32 x i16>*
  %9393 = load <32 x i16>, <32 x i16>* %9392, align 2, !tbaa !423
  %9394 = add nsw i64 %6520, %5659
  %9395 = getelementptr inbounds i16, i16* %blur_x714, i64 %9394
  %9396 = bitcast i16* %9395 to <32 x i16>*
  %9397 = load <32 x i16>, <32 x i16>* %9396, align 2, !tbaa !423
  %9398 = add <32 x i16> %9393, %9386
  %9399 = add <32 x i16> %9398, %9397
  %9400 = shufflevector <32 x i16> %9399, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9400, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9402 = shufflevector <32 x i16> %9399, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9403 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9402, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9404 = shufflevector <16 x i16> %9401, <16 x i16> %9403, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9405 = lshr <32 x i16> %9404, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9406 = sext i32 %a161 to i64
  %9407 = add nsw i64 %9406, 20
  %9408 = mul nsw i64 %9407, %5542
  %9409 = add nsw i64 %5668, %9408
  %9410 = getelementptr inbounds i16, i16* %5664, i64 %9409
  %9411 = bitcast i16* %9410 to <32 x i16>*
  store <32 x i16> %9405, <32 x i16>* %9411, align 2, !tbaa !425
  br label %"produce blur_x1241"

"produce blur_x1241":                             ; preds = %"end for blur_y.s0.x.x.rebased1225", %"produce blur_x1236"
  %9412 = getelementptr inbounds i16, i16* %read_input661, i64 %5714
  %9413 = getelementptr inbounds i16, i16* %9412, i64 1
  %9414 = bitcast i16* %9413 to <32 x i16>*
  %9415 = load <32 x i16>, <32 x i16>* %9414, align 2, !tbaa !412
  %9416 = getelementptr inbounds i16, i16* %9412, i64 2
  %9417 = bitcast i16* %9416 to <32 x i16>*
  %9418 = load <32 x i16>, <32 x i16>* %9417, align 2, !tbaa !412
  %9419 = bitcast i16* %9412 to <32 x i16>*
  %9420 = load <32 x i16>, <32 x i16>* %9419, align 2, !tbaa !412
  %9421 = add <32 x i16> %9418, %9415
  %9422 = add <32 x i16> %9421, %9420
  %9423 = shufflevector <32 x i16> %9422, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9423, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9425 = shufflevector <32 x i16> %9422, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9426 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9425, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9427 = shufflevector <16 x i16> %9424, <16 x i16> %9426, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9428 = lshr <32 x i16> %9427, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9428, <32 x i16>* %6874, align 2, !tbaa !423
  %9429 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %9430 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %9431 = add <32 x i16> %9429, %9428
  %9432 = add <32 x i16> %9431, %9430
  %9433 = shufflevector <32 x i16> %9432, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9434 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9433, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9435 = shufflevector <32 x i16> %9432, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9436 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9435, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9437 = shufflevector <16 x i16> %9434, <16 x i16> %9436, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9438 = lshr <32 x i16> %9437, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9439 = add nsw i64 %6752, 21
  %9440 = mul nsw i64 %9439, %5542
  %9441 = getelementptr inbounds i16, i16* %5664, i64 %9440
  %9442 = bitcast i16* %9441 to <32 x i16>*
  store <32 x i16> %9438, <32 x i16>* %9442, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1248.preheader", label %"end for blur_y.s0.x.x.rebased1249", !prof !406

"for blur_y.s0.x.x.rebased1248.preheader":        ; preds = %"produce blur_x1241"
  %9443 = sext i32 %t947768 to i64
  %9444 = add nsw i64 %9443, 32
  %9445 = add nsw i64 %6739, 32
  %9446 = add nsw i64 %6872, 32
  %9447 = add nsw i64 %6628, 32
  %9448 = sext i32 %a161 to i64
  %9449 = add nsw i64 %9448, 21
  %9450 = mul nsw i64 %9449, %5542
  br label %"for blur_y.s0.x.x.rebased1248"

"for blur_y.s0.x.x.rebased1248":                  ; preds = %"for blur_y.s0.x.x.rebased1248.preheader", %"consume blur_x1256"
  %indvars.iv2645 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1248.preheader" ], [ %indvars.iv.next2646, %"consume blur_x1256" ]
  %9451 = trunc i64 %indvars.iv2645 to i32
  %9452 = shl nsw i32 %9451, 5
  %9453 = icmp sgt i32 %b156, %9452
  br i1 %9453, label %"produce blur_x1254", label %"for blur_y.s0.x.x.rebased1248.consume blur_x1256_crit_edge"

"for blur_y.s0.x.x.rebased1248.consume blur_x1256_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1248"
  %.pre2711 = shl nuw nsw i64 %indvars.iv2645, 5
  br label %"consume blur_x1256"

"end for blur_y.s0.x.x.rebased1249":              ; preds = %"consume blur_x1256", %"produce blur_x1241"
  br i1 %.not1643, label %"produce blur_x1265", label %"produce blur_x1260"

"produce blur_x1254":                             ; preds = %"for blur_y.s0.x.x.rebased1248"
  %t682.s1255 = add nsw i32 %9452, %t10431246
  %9454 = sext i32 %t682.s1255 to i64
  %9455 = getelementptr inbounds i16, i16* %read_input661, i64 %9454
  %9456 = getelementptr inbounds i16, i16* %9455, i64 33
  %9457 = bitcast i16* %9456 to <32 x i16>*
  %9458 = load <32 x i16>, <32 x i16>* %9457, align 2, !tbaa !412
  %9459 = getelementptr inbounds i16, i16* %9455, i64 34
  %9460 = bitcast i16* %9459 to <32 x i16>*
  %9461 = load <32 x i16>, <32 x i16>* %9460, align 2, !tbaa !412
  %9462 = getelementptr inbounds i16, i16* %9455, i64 32
  %9463 = bitcast i16* %9462 to <32 x i16>*
  %9464 = load <32 x i16>, <32 x i16>* %9463, align 2, !tbaa !412
  %9465 = add <32 x i16> %9461, %9458
  %9466 = add <32 x i16> %9465, %9464
  %9467 = shufflevector <32 x i16> %9466, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9467, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9469 = shufflevector <32 x i16> %9466, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9469, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9471 = shufflevector <16 x i16> %9468, <16 x i16> %9470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9472 = lshr <32 x i16> %9471, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9473 = shl nuw nsw i64 %indvars.iv2645, 5
  %.idx1711 = add nsw i64 %9444, %9473
  %9474 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1711
  %9475 = bitcast i16* %9474 to <32 x i16>*
  store <32 x i16> %9472, <32 x i16>* %9475, align 2, !tbaa !423
  br label %"consume blur_x1256"

"consume blur_x1256":                             ; preds = %"for blur_y.s0.x.x.rebased1248.consume blur_x1256_crit_edge", %"produce blur_x1254"
  %.pre-phi2712 = phi i64 [ %.pre2711, %"for blur_y.s0.x.x.rebased1248.consume blur_x1256_crit_edge" ], [ %9473, %"produce blur_x1254" ]
  %.idx1706 = add nsw i64 %9445, %.pre-phi2712
  %9476 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1706
  %9477 = bitcast i16* %9476 to <32 x i16>*
  %9478 = load <32 x i16>, <32 x i16>* %9477, align 2, !tbaa !423
  %.idx1707 = add nsw i64 %9446, %.pre-phi2712
  %9479 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1707
  %9480 = bitcast i16* %9479 to <32 x i16>*
  %9481 = load <32 x i16>, <32 x i16>* %9480, align 2, !tbaa !423
  %.idx1708 = add nsw i64 %9447, %.pre-phi2712
  %9482 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1708
  %9483 = bitcast i16* %9482 to <32 x i16>*
  %9484 = load <32 x i16>, <32 x i16>* %9483, align 2, !tbaa !423
  %9485 = add <32 x i16> %9481, %9478
  %9486 = add <32 x i16> %9485, %9484
  %9487 = shufflevector <32 x i16> %9486, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9488 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9487, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9489 = shufflevector <32 x i16> %9486, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9490 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9489, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9491 = shufflevector <16 x i16> %9488, <16 x i16> %9490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9492 = lshr <32 x i16> %9491, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9493 = add nuw nsw i64 %.pre-phi2712, 32
  %9494 = add nsw i64 %9493, %5665
  %.idx1709 = add i64 %9494, %9450
  %9495 = getelementptr inbounds i16, i16* %5664, i64 %.idx1709
  %9496 = bitcast i16* %9495 to <32 x i16>*
  store <32 x i16> %9492, <32 x i16>* %9496, align 2, !tbaa !425
  %indvars.iv.next2646 = add nuw nsw i64 %indvars.iv2645, 1
  %.not1710 = icmp eq i64 %indvars.iv.next2646, %5744
  br i1 %.not1710, label %"end for blur_y.s0.x.x.rebased1249", label %"for blur_y.s0.x.x.rebased1248"

"produce blur_x1260":                             ; preds = %"end for blur_y.s0.x.x.rebased1249"
  %9497 = getelementptr inbounds i16, i16* %read_input661, i64 %5715
  %9498 = getelementptr inbounds i16, i16* %9497, i64 1
  %9499 = bitcast i16* %9498 to <32 x i16>*
  %9500 = load <32 x i16>, <32 x i16>* %9499, align 2, !tbaa !412
  %9501 = getelementptr inbounds i16, i16* %9497, i64 2
  %9502 = bitcast i16* %9501 to <32 x i16>*
  %9503 = load <32 x i16>, <32 x i16>* %9502, align 2, !tbaa !412
  %9504 = bitcast i16* %9497 to <32 x i16>*
  %9505 = load <32 x i16>, <32 x i16>* %9504, align 2, !tbaa !412
  %9506 = add <32 x i16> %9503, %9500
  %9507 = add <32 x i16> %9506, %9505
  %9508 = shufflevector <32 x i16> %9507, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9508, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9510 = shufflevector <32 x i16> %9507, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9510, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9512 = shufflevector <16 x i16> %9509, <16 x i16> %9511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9513 = lshr <32 x i16> %9512, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9514 = add nsw i64 %6872, %5659
  %9515 = getelementptr inbounds i16, i16* %blur_x714, i64 %9514
  %9516 = bitcast i16* %9515 to <32 x i16>*
  store <32 x i16> %9513, <32 x i16>* %9516, align 2, !tbaa !423
  %9517 = add nsw i64 %6739, %5659
  %9518 = getelementptr inbounds i16, i16* %blur_x714, i64 %9517
  %9519 = bitcast i16* %9518 to <32 x i16>*
  %9520 = load <32 x i16>, <32 x i16>* %9519, align 2, !tbaa !423
  %9521 = add nsw i64 %6628, %5659
  %9522 = getelementptr inbounds i16, i16* %blur_x714, i64 %9521
  %9523 = bitcast i16* %9522 to <32 x i16>*
  %9524 = load <32 x i16>, <32 x i16>* %9523, align 2, !tbaa !423
  %9525 = add <32 x i16> %9520, %9513
  %9526 = add <32 x i16> %9525, %9524
  %9527 = shufflevector <32 x i16> %9526, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9527, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9529 = shufflevector <32 x i16> %9526, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9530 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9529, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9531 = shufflevector <16 x i16> %9528, <16 x i16> %9530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9532 = lshr <32 x i16> %9531, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9533 = sext i32 %a161 to i64
  %9534 = add nsw i64 %9533, 21
  %9535 = mul nsw i64 %9534, %5542
  %9536 = add nsw i64 %5668, %9535
  %9537 = getelementptr inbounds i16, i16* %5664, i64 %9536
  %9538 = bitcast i16* %9537 to <32 x i16>*
  store <32 x i16> %9532, <32 x i16>* %9538, align 2, !tbaa !425
  br label %"produce blur_x1265"

"produce blur_x1265":                             ; preds = %"end for blur_y.s0.x.x.rebased1249", %"produce blur_x1260"
  %9539 = getelementptr inbounds i16, i16* %read_input661, i64 %5716
  %9540 = getelementptr inbounds i16, i16* %9539, i64 1
  %9541 = bitcast i16* %9540 to <32 x i16>*
  %9542 = load <32 x i16>, <32 x i16>* %9541, align 2, !tbaa !412
  %9543 = getelementptr inbounds i16, i16* %9539, i64 2
  %9544 = bitcast i16* %9543 to <32 x i16>*
  %9545 = load <32 x i16>, <32 x i16>* %9544, align 4, !tbaa !412
  %9546 = bitcast i16* %9539 to <32 x i16>*
  %9547 = load <32 x i16>, <32 x i16>* %9546, align 16, !tbaa !412
  %9548 = add <32 x i16> %9545, %9542
  %9549 = add <32 x i16> %9548, %9547
  %9550 = shufflevector <32 x i16> %9549, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9550, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9552 = shufflevector <32 x i16> %9549, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9553 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9552, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9554 = shufflevector <16 x i16> %9551, <16 x i16> %9553, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9555 = lshr <32 x i16> %9554, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9555, <32 x i16>* %6522, align 2, !tbaa !423
  %9556 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %9557 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %9558 = add <32 x i16> %9556, %9555
  %9559 = add <32 x i16> %9558, %9557
  %9560 = shufflevector <32 x i16> %9559, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9561 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9560, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9562 = shufflevector <32 x i16> %9559, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9563 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9562, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9564 = shufflevector <16 x i16> %9561, <16 x i16> %9563, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9565 = lshr <32 x i16> %9564, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9566 = add nsw i64 %6752, 22
  %9567 = mul nsw i64 %9566, %5542
  %9568 = getelementptr inbounds i16, i16* %5664, i64 %9567
  %9569 = bitcast i16* %9568 to <32 x i16>*
  store <32 x i16> %9565, <32 x i16>* %9569, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1272.preheader", label %"end for blur_y.s0.x.x.rebased1273", !prof !406

"for blur_y.s0.x.x.rebased1272.preheader":        ; preds = %"produce blur_x1265"
  %9570 = sext i32 %t939717 to i64
  %9571 = add nsw i64 %9570, 32
  %9572 = add nsw i64 %6872, 32
  %9573 = add nsw i64 %6520, 32
  %9574 = add nsw i64 %6739, 32
  %9575 = sext i32 %a161 to i64
  %9576 = add nsw i64 %9575, 22
  %9577 = mul nsw i64 %9576, %5542
  br label %"for blur_y.s0.x.x.rebased1272"

"for blur_y.s0.x.x.rebased1272":                  ; preds = %"for blur_y.s0.x.x.rebased1272.preheader", %"consume blur_x1280"
  %indvars.iv2647 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1272.preheader" ], [ %indvars.iv.next2648, %"consume blur_x1280" ]
  %9578 = trunc i64 %indvars.iv2647 to i32
  %9579 = shl nsw i32 %9578, 5
  %9580 = icmp sgt i32 %b156, %9579
  br i1 %9580, label %"produce blur_x1278", label %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge"

"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1272"
  %.pre2713 = shl nuw nsw i64 %indvars.iv2647, 5
  br label %"consume blur_x1280"

"end for blur_y.s0.x.x.rebased1273":              ; preds = %"consume blur_x1280", %"produce blur_x1265"
  br i1 %.not1643, label %"produce blur_x1289", label %"produce blur_x1284"

"produce blur_x1278":                             ; preds = %"for blur_y.s0.x.x.rebased1272"
  %t687.s1279 = add nsw i32 %9579, %t10481270
  %9581 = sext i32 %t687.s1279 to i64
  %9582 = getelementptr inbounds i16, i16* %read_input661, i64 %9581
  %9583 = getelementptr inbounds i16, i16* %9582, i64 33
  %9584 = bitcast i16* %9583 to <32 x i16>*
  %9585 = load <32 x i16>, <32 x i16>* %9584, align 2, !tbaa !412
  %9586 = getelementptr inbounds i16, i16* %9582, i64 34
  %9587 = bitcast i16* %9586 to <32 x i16>*
  %9588 = load <32 x i16>, <32 x i16>* %9587, align 4, !tbaa !412
  %9589 = getelementptr inbounds i16, i16* %9582, i64 32
  %9590 = bitcast i16* %9589 to <32 x i16>*
  %9591 = load <32 x i16>, <32 x i16>* %9590, align 4, !tbaa !412
  %9592 = add <32 x i16> %9588, %9585
  %9593 = add <32 x i16> %9592, %9591
  %9594 = shufflevector <32 x i16> %9593, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9595 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9594, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9596 = shufflevector <32 x i16> %9593, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9596, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9598 = shufflevector <16 x i16> %9595, <16 x i16> %9597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9599 = lshr <32 x i16> %9598, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9600 = shl nuw nsw i64 %indvars.iv2647, 5
  %.idx1705 = add nsw i64 %9571, %9600
  %9601 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1705
  %9602 = bitcast i16* %9601 to <32 x i16>*
  store <32 x i16> %9599, <32 x i16>* %9602, align 2, !tbaa !423
  br label %"consume blur_x1280"

"consume blur_x1280":                             ; preds = %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge", %"produce blur_x1278"
  %.pre-phi2714 = phi i64 [ %.pre2713, %"for blur_y.s0.x.x.rebased1272.consume blur_x1280_crit_edge" ], [ %9600, %"produce blur_x1278" ]
  %.idx1700 = add nsw i64 %9572, %.pre-phi2714
  %9603 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1700
  %9604 = bitcast i16* %9603 to <32 x i16>*
  %9605 = load <32 x i16>, <32 x i16>* %9604, align 2, !tbaa !423
  %.idx1701 = add nsw i64 %9573, %.pre-phi2714
  %9606 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1701
  %9607 = bitcast i16* %9606 to <32 x i16>*
  %9608 = load <32 x i16>, <32 x i16>* %9607, align 2, !tbaa !423
  %.idx1702 = add nsw i64 %9574, %.pre-phi2714
  %9609 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1702
  %9610 = bitcast i16* %9609 to <32 x i16>*
  %9611 = load <32 x i16>, <32 x i16>* %9610, align 2, !tbaa !423
  %9612 = add <32 x i16> %9608, %9605
  %9613 = add <32 x i16> %9612, %9611
  %9614 = shufflevector <32 x i16> %9613, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9615 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9614, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9616 = shufflevector <32 x i16> %9613, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9617 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9616, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9618 = shufflevector <16 x i16> %9615, <16 x i16> %9617, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9619 = lshr <32 x i16> %9618, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9620 = add nuw nsw i64 %.pre-phi2714, 32
  %9621 = add nsw i64 %9620, %5665
  %.idx1703 = add i64 %9621, %9577
  %9622 = getelementptr inbounds i16, i16* %5664, i64 %.idx1703
  %9623 = bitcast i16* %9622 to <32 x i16>*
  store <32 x i16> %9619, <32 x i16>* %9623, align 2, !tbaa !425
  %indvars.iv.next2648 = add nuw nsw i64 %indvars.iv2647, 1
  %.not1704 = icmp eq i64 %indvars.iv.next2648, %5744
  br i1 %.not1704, label %"end for blur_y.s0.x.x.rebased1273", label %"for blur_y.s0.x.x.rebased1272"

"produce blur_x1284":                             ; preds = %"end for blur_y.s0.x.x.rebased1273"
  %9624 = getelementptr inbounds i16, i16* %read_input661, i64 %5717
  %9625 = getelementptr inbounds i16, i16* %9624, i64 1
  %9626 = bitcast i16* %9625 to <32 x i16>*
  %9627 = load <32 x i16>, <32 x i16>* %9626, align 2, !tbaa !412
  %9628 = getelementptr inbounds i16, i16* %9624, i64 2
  %9629 = bitcast i16* %9628 to <32 x i16>*
  %9630 = load <32 x i16>, <32 x i16>* %9629, align 2, !tbaa !412
  %9631 = bitcast i16* %9624 to <32 x i16>*
  %9632 = load <32 x i16>, <32 x i16>* %9631, align 2, !tbaa !412
  %9633 = add <32 x i16> %9630, %9627
  %9634 = add <32 x i16> %9633, %9632
  %9635 = shufflevector <32 x i16> %9634, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9635, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9637 = shufflevector <32 x i16> %9634, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9637, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9639 = shufflevector <16 x i16> %9636, <16 x i16> %9638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9640 = lshr <32 x i16> %9639, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9641 = add nsw i64 %6520, %5659
  %9642 = getelementptr inbounds i16, i16* %blur_x714, i64 %9641
  %9643 = bitcast i16* %9642 to <32 x i16>*
  store <32 x i16> %9640, <32 x i16>* %9643, align 2, !tbaa !423
  %9644 = add nsw i64 %6872, %5659
  %9645 = getelementptr inbounds i16, i16* %blur_x714, i64 %9644
  %9646 = bitcast i16* %9645 to <32 x i16>*
  %9647 = load <32 x i16>, <32 x i16>* %9646, align 2, !tbaa !423
  %9648 = add nsw i64 %6739, %5659
  %9649 = getelementptr inbounds i16, i16* %blur_x714, i64 %9648
  %9650 = bitcast i16* %9649 to <32 x i16>*
  %9651 = load <32 x i16>, <32 x i16>* %9650, align 2, !tbaa !423
  %9652 = add <32 x i16> %9647, %9640
  %9653 = add <32 x i16> %9652, %9651
  %9654 = shufflevector <32 x i16> %9653, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9655 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9654, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9656 = shufflevector <32 x i16> %9653, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9657 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9656, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9658 = shufflevector <16 x i16> %9655, <16 x i16> %9657, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9659 = lshr <32 x i16> %9658, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9660 = sext i32 %a161 to i64
  %9661 = add nsw i64 %9660, 22
  %9662 = mul nsw i64 %9661, %5542
  %9663 = add nsw i64 %5668, %9662
  %9664 = getelementptr inbounds i16, i16* %5664, i64 %9663
  %9665 = bitcast i16* %9664 to <32 x i16>*
  store <32 x i16> %9659, <32 x i16>* %9665, align 2, !tbaa !425
  br label %"produce blur_x1289"

"produce blur_x1289":                             ; preds = %"end for blur_y.s0.x.x.rebased1273", %"produce blur_x1284"
  %9666 = getelementptr inbounds i16, i16* %read_input661, i64 %5718
  %9667 = getelementptr inbounds i16, i16* %9666, i64 1
  %9668 = bitcast i16* %9667 to <32 x i16>*
  %9669 = load <32 x i16>, <32 x i16>* %9668, align 2, !tbaa !412
  %9670 = getelementptr inbounds i16, i16* %9666, i64 2
  %9671 = bitcast i16* %9670 to <32 x i16>*
  %9672 = load <32 x i16>, <32 x i16>* %9671, align 2, !tbaa !412
  %9673 = bitcast i16* %9666 to <32 x i16>*
  %9674 = load <32 x i16>, <32 x i16>* %9673, align 2, !tbaa !412
  %9675 = add <32 x i16> %9672, %9669
  %9676 = add <32 x i16> %9675, %9674
  %9677 = shufflevector <32 x i16> %9676, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9677, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9679 = shufflevector <32 x i16> %9676, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9679, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9681 = shufflevector <16 x i16> %9678, <16 x i16> %9680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9682 = lshr <32 x i16> %9681, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9682, <32 x i16>* %6630, align 2, !tbaa !423
  %9683 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %9684 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %9685 = add <32 x i16> %9683, %9682
  %9686 = add <32 x i16> %9685, %9684
  %9687 = shufflevector <32 x i16> %9686, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9688 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9687, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9689 = shufflevector <32 x i16> %9686, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9690 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9689, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9691 = shufflevector <16 x i16> %9688, <16 x i16> %9690, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9692 = lshr <32 x i16> %9691, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9693 = add nsw i64 %6752, 23
  %9694 = mul nsw i64 %9693, %5542
  %9695 = getelementptr inbounds i16, i16* %5664, i64 %9694
  %9696 = bitcast i16* %9695 to <32 x i16>*
  store <32 x i16> %9692, <32 x i16>* %9696, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1296.preheader", label %"end for blur_y.s0.x.x.rebased1297", !prof !406

"for blur_y.s0.x.x.rebased1296.preheader":        ; preds = %"produce blur_x1289"
  %9697 = sext i32 %t941729 to i64
  %9698 = add nsw i64 %9697, 32
  %9699 = add nsw i64 %6520, 32
  %9700 = add nsw i64 %6628, 32
  %9701 = add nsw i64 %6872, 32
  %9702 = sext i32 %a161 to i64
  %9703 = add nsw i64 %9702, 23
  %9704 = mul nsw i64 %9703, %5542
  br label %"for blur_y.s0.x.x.rebased1296"

"for blur_y.s0.x.x.rebased1296":                  ; preds = %"for blur_y.s0.x.x.rebased1296.preheader", %"consume blur_x1304"
  %indvars.iv2649 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1296.preheader" ], [ %indvars.iv.next2650, %"consume blur_x1304" ]
  %9705 = trunc i64 %indvars.iv2649 to i32
  %9706 = shl nsw i32 %9705, 5
  %9707 = icmp sgt i32 %b156, %9706
  br i1 %9707, label %"produce blur_x1302", label %"for blur_y.s0.x.x.rebased1296.consume blur_x1304_crit_edge"

"for blur_y.s0.x.x.rebased1296.consume blur_x1304_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1296"
  %.pre2715 = shl nuw nsw i64 %indvars.iv2649, 5
  br label %"consume blur_x1304"

"end for blur_y.s0.x.x.rebased1297":              ; preds = %"consume blur_x1304", %"produce blur_x1289"
  br i1 %.not1643, label %"produce blur_x1313", label %"produce blur_x1308"

"produce blur_x1302":                             ; preds = %"for blur_y.s0.x.x.rebased1296"
  %t692.s1303 = add nsw i32 %9706, %t10531294
  %9708 = sext i32 %t692.s1303 to i64
  %9709 = getelementptr inbounds i16, i16* %read_input661, i64 %9708
  %9710 = getelementptr inbounds i16, i16* %9709, i64 33
  %9711 = bitcast i16* %9710 to <32 x i16>*
  %9712 = load <32 x i16>, <32 x i16>* %9711, align 2, !tbaa !412
  %9713 = getelementptr inbounds i16, i16* %9709, i64 34
  %9714 = bitcast i16* %9713 to <32 x i16>*
  %9715 = load <32 x i16>, <32 x i16>* %9714, align 2, !tbaa !412
  %9716 = getelementptr inbounds i16, i16* %9709, i64 32
  %9717 = bitcast i16* %9716 to <32 x i16>*
  %9718 = load <32 x i16>, <32 x i16>* %9717, align 2, !tbaa !412
  %9719 = add <32 x i16> %9715, %9712
  %9720 = add <32 x i16> %9719, %9718
  %9721 = shufflevector <32 x i16> %9720, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9721, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9723 = shufflevector <32 x i16> %9720, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9724 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9723, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9725 = shufflevector <16 x i16> %9722, <16 x i16> %9724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9726 = lshr <32 x i16> %9725, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9727 = shl nuw nsw i64 %indvars.iv2649, 5
  %.idx1699 = add nsw i64 %9698, %9727
  %9728 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1699
  %9729 = bitcast i16* %9728 to <32 x i16>*
  store <32 x i16> %9726, <32 x i16>* %9729, align 2, !tbaa !423
  br label %"consume blur_x1304"

"consume blur_x1304":                             ; preds = %"for blur_y.s0.x.x.rebased1296.consume blur_x1304_crit_edge", %"produce blur_x1302"
  %.pre-phi2716 = phi i64 [ %.pre2715, %"for blur_y.s0.x.x.rebased1296.consume blur_x1304_crit_edge" ], [ %9727, %"produce blur_x1302" ]
  %.idx1694 = add nsw i64 %9699, %.pre-phi2716
  %9730 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1694
  %9731 = bitcast i16* %9730 to <32 x i16>*
  %9732 = load <32 x i16>, <32 x i16>* %9731, align 2, !tbaa !423
  %.idx1695 = add nsw i64 %9700, %.pre-phi2716
  %9733 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1695
  %9734 = bitcast i16* %9733 to <32 x i16>*
  %9735 = load <32 x i16>, <32 x i16>* %9734, align 2, !tbaa !423
  %.idx1696 = add nsw i64 %9701, %.pre-phi2716
  %9736 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1696
  %9737 = bitcast i16* %9736 to <32 x i16>*
  %9738 = load <32 x i16>, <32 x i16>* %9737, align 2, !tbaa !423
  %9739 = add <32 x i16> %9735, %9732
  %9740 = add <32 x i16> %9739, %9738
  %9741 = shufflevector <32 x i16> %9740, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9742 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9741, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9743 = shufflevector <32 x i16> %9740, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9743, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9745 = shufflevector <16 x i16> %9742, <16 x i16> %9744, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9746 = lshr <32 x i16> %9745, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9747 = add nuw nsw i64 %.pre-phi2716, 32
  %9748 = add nsw i64 %9747, %5665
  %.idx1697 = add i64 %9748, %9704
  %9749 = getelementptr inbounds i16, i16* %5664, i64 %.idx1697
  %9750 = bitcast i16* %9749 to <32 x i16>*
  store <32 x i16> %9746, <32 x i16>* %9750, align 2, !tbaa !425
  %indvars.iv.next2650 = add nuw nsw i64 %indvars.iv2649, 1
  %.not1698 = icmp eq i64 %indvars.iv.next2650, %5744
  br i1 %.not1698, label %"end for blur_y.s0.x.x.rebased1297", label %"for blur_y.s0.x.x.rebased1296"

"produce blur_x1308":                             ; preds = %"end for blur_y.s0.x.x.rebased1297"
  %9751 = getelementptr inbounds i16, i16* %read_input661, i64 %5719
  %9752 = getelementptr inbounds i16, i16* %9751, i64 1
  %9753 = bitcast i16* %9752 to <32 x i16>*
  %9754 = load <32 x i16>, <32 x i16>* %9753, align 2, !tbaa !412
  %9755 = getelementptr inbounds i16, i16* %9751, i64 2
  %9756 = bitcast i16* %9755 to <32 x i16>*
  %9757 = load <32 x i16>, <32 x i16>* %9756, align 2, !tbaa !412
  %9758 = bitcast i16* %9751 to <32 x i16>*
  %9759 = load <32 x i16>, <32 x i16>* %9758, align 2, !tbaa !412
  %9760 = add <32 x i16> %9757, %9754
  %9761 = add <32 x i16> %9760, %9759
  %9762 = shufflevector <32 x i16> %9761, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9763 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9762, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9764 = shufflevector <32 x i16> %9761, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9765 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9764, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9766 = shufflevector <16 x i16> %9763, <16 x i16> %9765, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9767 = lshr <32 x i16> %9766, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9768 = add nsw i64 %6628, %5659
  %9769 = getelementptr inbounds i16, i16* %blur_x714, i64 %9768
  %9770 = bitcast i16* %9769 to <32 x i16>*
  store <32 x i16> %9767, <32 x i16>* %9770, align 2, !tbaa !423
  %9771 = add nsw i64 %6520, %5659
  %9772 = getelementptr inbounds i16, i16* %blur_x714, i64 %9771
  %9773 = bitcast i16* %9772 to <32 x i16>*
  %9774 = load <32 x i16>, <32 x i16>* %9773, align 2, !tbaa !423
  %9775 = add nsw i64 %6872, %5659
  %9776 = getelementptr inbounds i16, i16* %blur_x714, i64 %9775
  %9777 = bitcast i16* %9776 to <32 x i16>*
  %9778 = load <32 x i16>, <32 x i16>* %9777, align 2, !tbaa !423
  %9779 = add <32 x i16> %9774, %9767
  %9780 = add <32 x i16> %9779, %9778
  %9781 = shufflevector <32 x i16> %9780, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9781, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9783 = shufflevector <32 x i16> %9780, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9783, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9785 = shufflevector <16 x i16> %9782, <16 x i16> %9784, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9786 = lshr <32 x i16> %9785, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9787 = sext i32 %a161 to i64
  %9788 = add nsw i64 %9787, 23
  %9789 = mul nsw i64 %9788, %5542
  %9790 = add nsw i64 %5668, %9789
  %9791 = getelementptr inbounds i16, i16* %5664, i64 %9790
  %9792 = bitcast i16* %9791 to <32 x i16>*
  store <32 x i16> %9786, <32 x i16>* %9792, align 2, !tbaa !425
  br label %"produce blur_x1313"

"produce blur_x1313":                             ; preds = %"end for blur_y.s0.x.x.rebased1297", %"produce blur_x1308"
  %9793 = getelementptr inbounds i16, i16* %read_input661, i64 %5720
  %9794 = getelementptr inbounds i16, i16* %9793, i64 1
  %9795 = bitcast i16* %9794 to <32 x i16>*
  %9796 = load <32 x i16>, <32 x i16>* %9795, align 2, !tbaa !412
  %9797 = getelementptr inbounds i16, i16* %9793, i64 2
  %9798 = bitcast i16* %9797 to <32 x i16>*
  %9799 = load <32 x i16>, <32 x i16>* %9798, align 4, !tbaa !412
  %9800 = bitcast i16* %9793 to <32 x i16>*
  %9801 = load <32 x i16>, <32 x i16>* %9800, align 4, !tbaa !412
  %9802 = add <32 x i16> %9799, %9796
  %9803 = add <32 x i16> %9802, %9801
  %9804 = shufflevector <32 x i16> %9803, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9804, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9806 = shufflevector <32 x i16> %9803, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9807 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9806, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9808 = shufflevector <16 x i16> %9805, <16 x i16> %9807, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9809 = lshr <32 x i16> %9808, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9809, <32 x i16>* %6741, align 2, !tbaa !423
  %9810 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %9811 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %9812 = add <32 x i16> %9810, %9809
  %9813 = add <32 x i16> %9812, %9811
  %9814 = shufflevector <32 x i16> %9813, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9815 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9814, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9816 = shufflevector <32 x i16> %9813, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9817 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9816, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9818 = shufflevector <16 x i16> %9815, <16 x i16> %9817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9819 = lshr <32 x i16> %9818, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9820 = add nsw i64 %6752, 24
  %9821 = mul nsw i64 %9820, %5542
  %9822 = getelementptr inbounds i16, i16* %5664, i64 %9821
  %9823 = bitcast i16* %9822 to <32 x i16>*
  store <32 x i16> %9819, <32 x i16>* %9823, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1320.preheader", label %"end for blur_y.s0.x.x.rebased1321", !prof !406

"for blur_y.s0.x.x.rebased1320.preheader":        ; preds = %"produce blur_x1313"
  %9824 = sext i32 %t942745 to i64
  %9825 = add nsw i64 %9824, 32
  %9826 = add nsw i64 %6628, 32
  %9827 = add nsw i64 %6739, 32
  %9828 = add nsw i64 %6520, 32
  %9829 = sext i32 %a161 to i64
  %9830 = add nsw i64 %9829, 24
  %9831 = mul nsw i64 %9830, %5542
  br label %"for blur_y.s0.x.x.rebased1320"

"for blur_y.s0.x.x.rebased1320":                  ; preds = %"for blur_y.s0.x.x.rebased1320.preheader", %"consume blur_x1328"
  %indvars.iv2651 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1320.preheader" ], [ %indvars.iv.next2652, %"consume blur_x1328" ]
  %9832 = trunc i64 %indvars.iv2651 to i32
  %9833 = shl nsw i32 %9832, 5
  %9834 = icmp sgt i32 %b156, %9833
  br i1 %9834, label %"produce blur_x1326", label %"for blur_y.s0.x.x.rebased1320.consume blur_x1328_crit_edge"

"for blur_y.s0.x.x.rebased1320.consume blur_x1328_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1320"
  %.pre2717 = shl nuw nsw i64 %indvars.iv2651, 5
  br label %"consume blur_x1328"

"end for blur_y.s0.x.x.rebased1321":              ; preds = %"consume blur_x1328", %"produce blur_x1313"
  br i1 %.not1643, label %"produce blur_x1337", label %"produce blur_x1332"

"produce blur_x1326":                             ; preds = %"for blur_y.s0.x.x.rebased1320"
  %t697.s1327 = add nsw i32 %9833, %t10581318
  %9835 = sext i32 %t697.s1327 to i64
  %9836 = getelementptr inbounds i16, i16* %read_input661, i64 %9835
  %9837 = getelementptr inbounds i16, i16* %9836, i64 33
  %9838 = bitcast i16* %9837 to <32 x i16>*
  %9839 = load <32 x i16>, <32 x i16>* %9838, align 2, !tbaa !412
  %9840 = getelementptr inbounds i16, i16* %9836, i64 34
  %9841 = bitcast i16* %9840 to <32 x i16>*
  %9842 = load <32 x i16>, <32 x i16>* %9841, align 4, !tbaa !412
  %9843 = getelementptr inbounds i16, i16* %9836, i64 32
  %9844 = bitcast i16* %9843 to <32 x i16>*
  %9845 = load <32 x i16>, <32 x i16>* %9844, align 4, !tbaa !412
  %9846 = add <32 x i16> %9842, %9839
  %9847 = add <32 x i16> %9846, %9845
  %9848 = shufflevector <32 x i16> %9847, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9849 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9848, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9850 = shufflevector <32 x i16> %9847, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9851 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9850, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9852 = shufflevector <16 x i16> %9849, <16 x i16> %9851, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9853 = lshr <32 x i16> %9852, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9854 = shl nuw nsw i64 %indvars.iv2651, 5
  %.idx1693 = add nsw i64 %9825, %9854
  %9855 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1693
  %9856 = bitcast i16* %9855 to <32 x i16>*
  store <32 x i16> %9853, <32 x i16>* %9856, align 2, !tbaa !423
  br label %"consume blur_x1328"

"consume blur_x1328":                             ; preds = %"for blur_y.s0.x.x.rebased1320.consume blur_x1328_crit_edge", %"produce blur_x1326"
  %.pre-phi2718 = phi i64 [ %.pre2717, %"for blur_y.s0.x.x.rebased1320.consume blur_x1328_crit_edge" ], [ %9854, %"produce blur_x1326" ]
  %.idx1688 = add nsw i64 %9826, %.pre-phi2718
  %9857 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1688
  %9858 = bitcast i16* %9857 to <32 x i16>*
  %9859 = load <32 x i16>, <32 x i16>* %9858, align 2, !tbaa !423
  %.idx1689 = add nsw i64 %9827, %.pre-phi2718
  %9860 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1689
  %9861 = bitcast i16* %9860 to <32 x i16>*
  %9862 = load <32 x i16>, <32 x i16>* %9861, align 2, !tbaa !423
  %.idx1690 = add nsw i64 %9828, %.pre-phi2718
  %9863 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1690
  %9864 = bitcast i16* %9863 to <32 x i16>*
  %9865 = load <32 x i16>, <32 x i16>* %9864, align 2, !tbaa !423
  %9866 = add <32 x i16> %9862, %9859
  %9867 = add <32 x i16> %9866, %9865
  %9868 = shufflevector <32 x i16> %9867, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9868, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9870 = shufflevector <32 x i16> %9867, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9871 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9870, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9872 = shufflevector <16 x i16> %9869, <16 x i16> %9871, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9873 = lshr <32 x i16> %9872, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9874 = add nuw nsw i64 %.pre-phi2718, 32
  %9875 = add nsw i64 %9874, %5665
  %.idx1691 = add i64 %9875, %9831
  %9876 = getelementptr inbounds i16, i16* %5664, i64 %.idx1691
  %9877 = bitcast i16* %9876 to <32 x i16>*
  store <32 x i16> %9873, <32 x i16>* %9877, align 2, !tbaa !425
  %indvars.iv.next2652 = add nuw nsw i64 %indvars.iv2651, 1
  %.not1692 = icmp eq i64 %indvars.iv.next2652, %5744
  br i1 %.not1692, label %"end for blur_y.s0.x.x.rebased1321", label %"for blur_y.s0.x.x.rebased1320"

"produce blur_x1332":                             ; preds = %"end for blur_y.s0.x.x.rebased1321"
  %9878 = getelementptr inbounds i16, i16* %read_input661, i64 %5721
  %9879 = getelementptr inbounds i16, i16* %9878, i64 1
  %9880 = bitcast i16* %9879 to <32 x i16>*
  %9881 = load <32 x i16>, <32 x i16>* %9880, align 2, !tbaa !412
  %9882 = getelementptr inbounds i16, i16* %9878, i64 2
  %9883 = bitcast i16* %9882 to <32 x i16>*
  %9884 = load <32 x i16>, <32 x i16>* %9883, align 2, !tbaa !412
  %9885 = bitcast i16* %9878 to <32 x i16>*
  %9886 = load <32 x i16>, <32 x i16>* %9885, align 2, !tbaa !412
  %9887 = add <32 x i16> %9884, %9881
  %9888 = add <32 x i16> %9887, %9886
  %9889 = shufflevector <32 x i16> %9888, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9890 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9889, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9891 = shufflevector <32 x i16> %9888, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9891, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9893 = shufflevector <16 x i16> %9890, <16 x i16> %9892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9894 = lshr <32 x i16> %9893, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9895 = add nsw i64 %6739, %5659
  %9896 = getelementptr inbounds i16, i16* %blur_x714, i64 %9895
  %9897 = bitcast i16* %9896 to <32 x i16>*
  store <32 x i16> %9894, <32 x i16>* %9897, align 2, !tbaa !423
  %9898 = add nsw i64 %6628, %5659
  %9899 = getelementptr inbounds i16, i16* %blur_x714, i64 %9898
  %9900 = bitcast i16* %9899 to <32 x i16>*
  %9901 = load <32 x i16>, <32 x i16>* %9900, align 2, !tbaa !423
  %9902 = add nsw i64 %6520, %5659
  %9903 = getelementptr inbounds i16, i16* %blur_x714, i64 %9902
  %9904 = bitcast i16* %9903 to <32 x i16>*
  %9905 = load <32 x i16>, <32 x i16>* %9904, align 2, !tbaa !423
  %9906 = add <32 x i16> %9901, %9894
  %9907 = add <32 x i16> %9906, %9905
  %9908 = shufflevector <32 x i16> %9907, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9909 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9908, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9910 = shufflevector <32 x i16> %9907, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9911 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9910, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9912 = shufflevector <16 x i16> %9909, <16 x i16> %9911, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9913 = lshr <32 x i16> %9912, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9914 = sext i32 %a161 to i64
  %9915 = add nsw i64 %9914, 24
  %9916 = mul nsw i64 %9915, %5542
  %9917 = add nsw i64 %5668, %9916
  %9918 = getelementptr inbounds i16, i16* %5664, i64 %9917
  %9919 = bitcast i16* %9918 to <32 x i16>*
  store <32 x i16> %9913, <32 x i16>* %9919, align 2, !tbaa !425
  br label %"produce blur_x1337"

"produce blur_x1337":                             ; preds = %"end for blur_y.s0.x.x.rebased1321", %"produce blur_x1332"
  %9920 = getelementptr inbounds i16, i16* %read_input661, i64 %5722
  %9921 = getelementptr inbounds i16, i16* %9920, i64 1
  %9922 = bitcast i16* %9921 to <32 x i16>*
  %9923 = load <32 x i16>, <32 x i16>* %9922, align 2, !tbaa !412
  %9924 = getelementptr inbounds i16, i16* %9920, i64 2
  %9925 = bitcast i16* %9924 to <32 x i16>*
  %9926 = load <32 x i16>, <32 x i16>* %9925, align 2, !tbaa !412
  %9927 = bitcast i16* %9920 to <32 x i16>*
  %9928 = load <32 x i16>, <32 x i16>* %9927, align 2, !tbaa !412
  %9929 = add <32 x i16> %9926, %9923
  %9930 = add <32 x i16> %9929, %9928
  %9931 = shufflevector <32 x i16> %9930, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9932 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9931, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9933 = shufflevector <32 x i16> %9930, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9934 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9933, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9935 = shufflevector <16 x i16> %9932, <16 x i16> %9934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9936 = lshr <32 x i16> %9935, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %9936, <32 x i16>* %6874, align 2, !tbaa !423
  %9937 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %9938 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %9939 = add <32 x i16> %9937, %9936
  %9940 = add <32 x i16> %9939, %9938
  %9941 = shufflevector <32 x i16> %9940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9941, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9943 = shufflevector <32 x i16> %9940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9944 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9943, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9945 = shufflevector <16 x i16> %9942, <16 x i16> %9944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9946 = lshr <32 x i16> %9945, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9947 = add nsw i64 %6752, 25
  %9948 = mul nsw i64 %9947, %5542
  %9949 = getelementptr inbounds i16, i16* %5664, i64 %9948
  %9950 = bitcast i16* %9949 to <32 x i16>*
  store <32 x i16> %9946, <32 x i16>* %9950, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1344.preheader", label %"end for blur_y.s0.x.x.rebased1345", !prof !406

"for blur_y.s0.x.x.rebased1344.preheader":        ; preds = %"produce blur_x1337"
  %9951 = sext i32 %t947768 to i64
  %9952 = add nsw i64 %9951, 32
  %9953 = add nsw i64 %6739, 32
  %9954 = add nsw i64 %6872, 32
  %9955 = add nsw i64 %6628, 32
  %9956 = sext i32 %a161 to i64
  %9957 = add nsw i64 %9956, 25
  %9958 = mul nsw i64 %9957, %5542
  br label %"for blur_y.s0.x.x.rebased1344"

"for blur_y.s0.x.x.rebased1344":                  ; preds = %"for blur_y.s0.x.x.rebased1344.preheader", %"consume blur_x1352"
  %indvars.iv2653 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1344.preheader" ], [ %indvars.iv.next2654, %"consume blur_x1352" ]
  %9959 = trunc i64 %indvars.iv2653 to i32
  %9960 = shl nsw i32 %9959, 5
  %9961 = icmp sgt i32 %b156, %9960
  br i1 %9961, label %"produce blur_x1350", label %"for blur_y.s0.x.x.rebased1344.consume blur_x1352_crit_edge"

"for blur_y.s0.x.x.rebased1344.consume blur_x1352_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1344"
  %.pre2719 = shl nuw nsw i64 %indvars.iv2653, 5
  br label %"consume blur_x1352"

"end for blur_y.s0.x.x.rebased1345":              ; preds = %"consume blur_x1352", %"produce blur_x1337"
  br i1 %.not1643, label %"produce blur_x1361", label %"produce blur_x1356"

"produce blur_x1350":                             ; preds = %"for blur_y.s0.x.x.rebased1344"
  %t702.s1351 = add nsw i32 %9960, %t10631342
  %9962 = sext i32 %t702.s1351 to i64
  %9963 = getelementptr inbounds i16, i16* %read_input661, i64 %9962
  %9964 = getelementptr inbounds i16, i16* %9963, i64 33
  %9965 = bitcast i16* %9964 to <32 x i16>*
  %9966 = load <32 x i16>, <32 x i16>* %9965, align 2, !tbaa !412
  %9967 = getelementptr inbounds i16, i16* %9963, i64 34
  %9968 = bitcast i16* %9967 to <32 x i16>*
  %9969 = load <32 x i16>, <32 x i16>* %9968, align 2, !tbaa !412
  %9970 = getelementptr inbounds i16, i16* %9963, i64 32
  %9971 = bitcast i16* %9970 to <32 x i16>*
  %9972 = load <32 x i16>, <32 x i16>* %9971, align 2, !tbaa !412
  %9973 = add <32 x i16> %9969, %9966
  %9974 = add <32 x i16> %9973, %9972
  %9975 = shufflevector <32 x i16> %9974, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9976 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9975, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9977 = shufflevector <32 x i16> %9974, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9977, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9979 = shufflevector <16 x i16> %9976, <16 x i16> %9978, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9980 = lshr <32 x i16> %9979, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9981 = shl nuw nsw i64 %indvars.iv2653, 5
  %.idx1687 = add nsw i64 %9952, %9981
  %9982 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1687
  %9983 = bitcast i16* %9982 to <32 x i16>*
  store <32 x i16> %9980, <32 x i16>* %9983, align 2, !tbaa !423
  br label %"consume blur_x1352"

"consume blur_x1352":                             ; preds = %"for blur_y.s0.x.x.rebased1344.consume blur_x1352_crit_edge", %"produce blur_x1350"
  %.pre-phi2720 = phi i64 [ %.pre2719, %"for blur_y.s0.x.x.rebased1344.consume blur_x1352_crit_edge" ], [ %9981, %"produce blur_x1350" ]
  %.idx1682 = add nsw i64 %9953, %.pre-phi2720
  %9984 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1682
  %9985 = bitcast i16* %9984 to <32 x i16>*
  %9986 = load <32 x i16>, <32 x i16>* %9985, align 2, !tbaa !423
  %.idx1683 = add nsw i64 %9954, %.pre-phi2720
  %9987 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1683
  %9988 = bitcast i16* %9987 to <32 x i16>*
  %9989 = load <32 x i16>, <32 x i16>* %9988, align 2, !tbaa !423
  %.idx1684 = add nsw i64 %9955, %.pre-phi2720
  %9990 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1684
  %9991 = bitcast i16* %9990 to <32 x i16>*
  %9992 = load <32 x i16>, <32 x i16>* %9991, align 2, !tbaa !423
  %9993 = add <32 x i16> %9989, %9986
  %9994 = add <32 x i16> %9993, %9992
  %9995 = shufflevector <32 x i16> %9994, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9996 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9995, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9997 = shufflevector <32 x i16> %9994, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9998 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9997, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9999 = shufflevector <16 x i16> %9996, <16 x i16> %9998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10000 = lshr <32 x i16> %9999, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10001 = add nuw nsw i64 %.pre-phi2720, 32
  %10002 = add nsw i64 %10001, %5665
  %.idx1685 = add i64 %10002, %9958
  %10003 = getelementptr inbounds i16, i16* %5664, i64 %.idx1685
  %10004 = bitcast i16* %10003 to <32 x i16>*
  store <32 x i16> %10000, <32 x i16>* %10004, align 2, !tbaa !425
  %indvars.iv.next2654 = add nuw nsw i64 %indvars.iv2653, 1
  %.not1686 = icmp eq i64 %indvars.iv.next2654, %5744
  br i1 %.not1686, label %"end for blur_y.s0.x.x.rebased1345", label %"for blur_y.s0.x.x.rebased1344"

"produce blur_x1356":                             ; preds = %"end for blur_y.s0.x.x.rebased1345"
  %10005 = getelementptr inbounds i16, i16* %read_input661, i64 %5723
  %10006 = getelementptr inbounds i16, i16* %10005, i64 1
  %10007 = bitcast i16* %10006 to <32 x i16>*
  %10008 = load <32 x i16>, <32 x i16>* %10007, align 2, !tbaa !412
  %10009 = getelementptr inbounds i16, i16* %10005, i64 2
  %10010 = bitcast i16* %10009 to <32 x i16>*
  %10011 = load <32 x i16>, <32 x i16>* %10010, align 2, !tbaa !412
  %10012 = bitcast i16* %10005 to <32 x i16>*
  %10013 = load <32 x i16>, <32 x i16>* %10012, align 2, !tbaa !412
  %10014 = add <32 x i16> %10011, %10008
  %10015 = add <32 x i16> %10014, %10013
  %10016 = shufflevector <32 x i16> %10015, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10017 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10016, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10018 = shufflevector <32 x i16> %10015, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10019 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10018, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10020 = shufflevector <16 x i16> %10017, <16 x i16> %10019, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10021 = lshr <32 x i16> %10020, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10022 = add nsw i64 %6872, %5659
  %10023 = getelementptr inbounds i16, i16* %blur_x714, i64 %10022
  %10024 = bitcast i16* %10023 to <32 x i16>*
  store <32 x i16> %10021, <32 x i16>* %10024, align 2, !tbaa !423
  %10025 = add nsw i64 %6739, %5659
  %10026 = getelementptr inbounds i16, i16* %blur_x714, i64 %10025
  %10027 = bitcast i16* %10026 to <32 x i16>*
  %10028 = load <32 x i16>, <32 x i16>* %10027, align 2, !tbaa !423
  %10029 = add nsw i64 %6628, %5659
  %10030 = getelementptr inbounds i16, i16* %blur_x714, i64 %10029
  %10031 = bitcast i16* %10030 to <32 x i16>*
  %10032 = load <32 x i16>, <32 x i16>* %10031, align 2, !tbaa !423
  %10033 = add <32 x i16> %10028, %10021
  %10034 = add <32 x i16> %10033, %10032
  %10035 = shufflevector <32 x i16> %10034, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10036 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10035, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10037 = shufflevector <32 x i16> %10034, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10037, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10039 = shufflevector <16 x i16> %10036, <16 x i16> %10038, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10040 = lshr <32 x i16> %10039, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10041 = sext i32 %a161 to i64
  %10042 = add nsw i64 %10041, 25
  %10043 = mul nsw i64 %10042, %5542
  %10044 = add nsw i64 %5668, %10043
  %10045 = getelementptr inbounds i16, i16* %5664, i64 %10044
  %10046 = bitcast i16* %10045 to <32 x i16>*
  store <32 x i16> %10040, <32 x i16>* %10046, align 2, !tbaa !425
  br label %"produce blur_x1361"

"produce blur_x1361":                             ; preds = %"end for blur_y.s0.x.x.rebased1345", %"produce blur_x1356"
  %10047 = getelementptr inbounds i16, i16* %read_input661, i64 %5724
  %10048 = getelementptr inbounds i16, i16* %10047, i64 1
  %10049 = bitcast i16* %10048 to <32 x i16>*
  %10050 = load <32 x i16>, <32 x i16>* %10049, align 2, !tbaa !412
  %10051 = getelementptr inbounds i16, i16* %10047, i64 2
  %10052 = bitcast i16* %10051 to <32 x i16>*
  %10053 = load <32 x i16>, <32 x i16>* %10052, align 4, !tbaa !412
  %10054 = bitcast i16* %10047 to <32 x i16>*
  %10055 = load <32 x i16>, <32 x i16>* %10054, align 8, !tbaa !412
  %10056 = add <32 x i16> %10053, %10050
  %10057 = add <32 x i16> %10056, %10055
  %10058 = shufflevector <32 x i16> %10057, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10059 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10058, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10060 = shufflevector <32 x i16> %10057, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10061 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10060, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10062 = shufflevector <16 x i16> %10059, <16 x i16> %10061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10063 = lshr <32 x i16> %10062, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %10063, <32 x i16>* %6522, align 2, !tbaa !423
  %10064 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %10065 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %10066 = add <32 x i16> %10064, %10063
  %10067 = add <32 x i16> %10066, %10065
  %10068 = shufflevector <32 x i16> %10067, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10068, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10070 = shufflevector <32 x i16> %10067, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10071 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10070, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10072 = shufflevector <16 x i16> %10069, <16 x i16> %10071, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10073 = lshr <32 x i16> %10072, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10074 = add nsw i64 %6752, 26
  %10075 = mul nsw i64 %10074, %5542
  %10076 = getelementptr inbounds i16, i16* %5664, i64 %10075
  %10077 = bitcast i16* %10076 to <32 x i16>*
  store <32 x i16> %10073, <32 x i16>* %10077, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1368.preheader", label %"end for blur_y.s0.x.x.rebased1369", !prof !406

"for blur_y.s0.x.x.rebased1368.preheader":        ; preds = %"produce blur_x1361"
  %10078 = sext i32 %t939717 to i64
  %10079 = add nsw i64 %10078, 32
  %10080 = add nsw i64 %6872, 32
  %10081 = add nsw i64 %6520, 32
  %10082 = add nsw i64 %6739, 32
  %10083 = sext i32 %a161 to i64
  %10084 = add nsw i64 %10083, 26
  %10085 = mul nsw i64 %10084, %5542
  br label %"for blur_y.s0.x.x.rebased1368"

"for blur_y.s0.x.x.rebased1368":                  ; preds = %"for blur_y.s0.x.x.rebased1368.preheader", %"consume blur_x1376"
  %indvars.iv2655 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1368.preheader" ], [ %indvars.iv.next2656, %"consume blur_x1376" ]
  %10086 = trunc i64 %indvars.iv2655 to i32
  %10087 = shl nsw i32 %10086, 5
  %10088 = icmp sgt i32 %b156, %10087
  br i1 %10088, label %"produce blur_x1374", label %"for blur_y.s0.x.x.rebased1368.consume blur_x1376_crit_edge"

"for blur_y.s0.x.x.rebased1368.consume blur_x1376_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1368"
  %.pre2721 = shl nuw nsw i64 %indvars.iv2655, 5
  br label %"consume blur_x1376"

"end for blur_y.s0.x.x.rebased1369":              ; preds = %"consume blur_x1376", %"produce blur_x1361"
  br i1 %.not1643, label %"produce blur_x1385", label %"produce blur_x1380"

"produce blur_x1374":                             ; preds = %"for blur_y.s0.x.x.rebased1368"
  %t707.s1375 = add nsw i32 %10087, %t10681366
  %10089 = sext i32 %t707.s1375 to i64
  %10090 = getelementptr inbounds i16, i16* %read_input661, i64 %10089
  %10091 = getelementptr inbounds i16, i16* %10090, i64 33
  %10092 = bitcast i16* %10091 to <32 x i16>*
  %10093 = load <32 x i16>, <32 x i16>* %10092, align 2, !tbaa !412
  %10094 = getelementptr inbounds i16, i16* %10090, i64 34
  %10095 = bitcast i16* %10094 to <32 x i16>*
  %10096 = load <32 x i16>, <32 x i16>* %10095, align 4, !tbaa !412
  %10097 = getelementptr inbounds i16, i16* %10090, i64 32
  %10098 = bitcast i16* %10097 to <32 x i16>*
  %10099 = load <32 x i16>, <32 x i16>* %10098, align 4, !tbaa !412
  %10100 = add <32 x i16> %10096, %10093
  %10101 = add <32 x i16> %10100, %10099
  %10102 = shufflevector <32 x i16> %10101, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10103 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10102, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10104 = shufflevector <32 x i16> %10101, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10105 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10104, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10106 = shufflevector <16 x i16> %10103, <16 x i16> %10105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10107 = lshr <32 x i16> %10106, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10108 = shl nuw nsw i64 %indvars.iv2655, 5
  %.idx1681 = add nsw i64 %10079, %10108
  %10109 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1681
  %10110 = bitcast i16* %10109 to <32 x i16>*
  store <32 x i16> %10107, <32 x i16>* %10110, align 2, !tbaa !423
  br label %"consume blur_x1376"

"consume blur_x1376":                             ; preds = %"for blur_y.s0.x.x.rebased1368.consume blur_x1376_crit_edge", %"produce blur_x1374"
  %.pre-phi2722 = phi i64 [ %.pre2721, %"for blur_y.s0.x.x.rebased1368.consume blur_x1376_crit_edge" ], [ %10108, %"produce blur_x1374" ]
  %.idx1676 = add nsw i64 %10080, %.pre-phi2722
  %10111 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1676
  %10112 = bitcast i16* %10111 to <32 x i16>*
  %10113 = load <32 x i16>, <32 x i16>* %10112, align 2, !tbaa !423
  %.idx1677 = add nsw i64 %10081, %.pre-phi2722
  %10114 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1677
  %10115 = bitcast i16* %10114 to <32 x i16>*
  %10116 = load <32 x i16>, <32 x i16>* %10115, align 2, !tbaa !423
  %.idx1678 = add nsw i64 %10082, %.pre-phi2722
  %10117 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1678
  %10118 = bitcast i16* %10117 to <32 x i16>*
  %10119 = load <32 x i16>, <32 x i16>* %10118, align 2, !tbaa !423
  %10120 = add <32 x i16> %10116, %10113
  %10121 = add <32 x i16> %10120, %10119
  %10122 = shufflevector <32 x i16> %10121, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10122, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10124 = shufflevector <32 x i16> %10121, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10125 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10124, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10126 = shufflevector <16 x i16> %10123, <16 x i16> %10125, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10127 = lshr <32 x i16> %10126, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10128 = add nuw nsw i64 %.pre-phi2722, 32
  %10129 = add nsw i64 %10128, %5665
  %.idx1679 = add i64 %10129, %10085
  %10130 = getelementptr inbounds i16, i16* %5664, i64 %.idx1679
  %10131 = bitcast i16* %10130 to <32 x i16>*
  store <32 x i16> %10127, <32 x i16>* %10131, align 2, !tbaa !425
  %indvars.iv.next2656 = add nuw nsw i64 %indvars.iv2655, 1
  %.not1680 = icmp eq i64 %indvars.iv.next2656, %5744
  br i1 %.not1680, label %"end for blur_y.s0.x.x.rebased1369", label %"for blur_y.s0.x.x.rebased1368"

"produce blur_x1380":                             ; preds = %"end for blur_y.s0.x.x.rebased1369"
  %10132 = getelementptr inbounds i16, i16* %read_input661, i64 %5725
  %10133 = getelementptr inbounds i16, i16* %10132, i64 1
  %10134 = bitcast i16* %10133 to <32 x i16>*
  %10135 = load <32 x i16>, <32 x i16>* %10134, align 2, !tbaa !412
  %10136 = getelementptr inbounds i16, i16* %10132, i64 2
  %10137 = bitcast i16* %10136 to <32 x i16>*
  %10138 = load <32 x i16>, <32 x i16>* %10137, align 2, !tbaa !412
  %10139 = bitcast i16* %10132 to <32 x i16>*
  %10140 = load <32 x i16>, <32 x i16>* %10139, align 2, !tbaa !412
  %10141 = add <32 x i16> %10138, %10135
  %10142 = add <32 x i16> %10141, %10140
  %10143 = shufflevector <32 x i16> %10142, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10143, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10145 = shufflevector <32 x i16> %10142, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10146 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10145, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10147 = shufflevector <16 x i16> %10144, <16 x i16> %10146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10148 = lshr <32 x i16> %10147, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10149 = add nsw i64 %6520, %5659
  %10150 = getelementptr inbounds i16, i16* %blur_x714, i64 %10149
  %10151 = bitcast i16* %10150 to <32 x i16>*
  store <32 x i16> %10148, <32 x i16>* %10151, align 2, !tbaa !423
  %10152 = add nsw i64 %6872, %5659
  %10153 = getelementptr inbounds i16, i16* %blur_x714, i64 %10152
  %10154 = bitcast i16* %10153 to <32 x i16>*
  %10155 = load <32 x i16>, <32 x i16>* %10154, align 2, !tbaa !423
  %10156 = add nsw i64 %6739, %5659
  %10157 = getelementptr inbounds i16, i16* %blur_x714, i64 %10156
  %10158 = bitcast i16* %10157 to <32 x i16>*
  %10159 = load <32 x i16>, <32 x i16>* %10158, align 2, !tbaa !423
  %10160 = add <32 x i16> %10155, %10148
  %10161 = add <32 x i16> %10160, %10159
  %10162 = shufflevector <32 x i16> %10161, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10163 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10162, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10164 = shufflevector <32 x i16> %10161, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10165 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10164, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10166 = shufflevector <16 x i16> %10163, <16 x i16> %10165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10167 = lshr <32 x i16> %10166, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10168 = sext i32 %a161 to i64
  %10169 = add nsw i64 %10168, 26
  %10170 = mul nsw i64 %10169, %5542
  %10171 = add nsw i64 %5668, %10170
  %10172 = getelementptr inbounds i16, i16* %5664, i64 %10171
  %10173 = bitcast i16* %10172 to <32 x i16>*
  store <32 x i16> %10167, <32 x i16>* %10173, align 2, !tbaa !425
  br label %"produce blur_x1385"

"produce blur_x1385":                             ; preds = %"end for blur_y.s0.x.x.rebased1369", %"produce blur_x1380"
  %10174 = getelementptr inbounds i16, i16* %read_input661, i64 %5726
  %10175 = getelementptr inbounds i16, i16* %10174, i64 1
  %10176 = bitcast i16* %10175 to <32 x i16>*
  %10177 = load <32 x i16>, <32 x i16>* %10176, align 2, !tbaa !412
  %10178 = getelementptr inbounds i16, i16* %10174, i64 2
  %10179 = bitcast i16* %10178 to <32 x i16>*
  %10180 = load <32 x i16>, <32 x i16>* %10179, align 2, !tbaa !412
  %10181 = bitcast i16* %10174 to <32 x i16>*
  %10182 = load <32 x i16>, <32 x i16>* %10181, align 2, !tbaa !412
  %10183 = add <32 x i16> %10180, %10177
  %10184 = add <32 x i16> %10183, %10182
  %10185 = shufflevector <32 x i16> %10184, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10186 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10185, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10187 = shufflevector <32 x i16> %10184, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10188 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10187, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10189 = shufflevector <16 x i16> %10186, <16 x i16> %10188, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10190 = lshr <32 x i16> %10189, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %10190, <32 x i16>* %6630, align 2, !tbaa !423
  %10191 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %10192 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %10193 = add <32 x i16> %10191, %10190
  %10194 = add <32 x i16> %10193, %10192
  %10195 = shufflevector <32 x i16> %10194, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10196 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10195, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10197 = shufflevector <32 x i16> %10194, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10198 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10197, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10199 = shufflevector <16 x i16> %10196, <16 x i16> %10198, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10200 = lshr <32 x i16> %10199, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10201 = add nsw i64 %6752, 27
  %10202 = mul nsw i64 %10201, %5542
  %10203 = getelementptr inbounds i16, i16* %5664, i64 %10202
  %10204 = bitcast i16* %10203 to <32 x i16>*
  store <32 x i16> %10200, <32 x i16>* %10204, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1392.preheader", label %"end for blur_y.s0.x.x.rebased1393", !prof !406

"for blur_y.s0.x.x.rebased1392.preheader":        ; preds = %"produce blur_x1385"
  %10205 = sext i32 %t941729 to i64
  %10206 = add nsw i64 %10205, 32
  %10207 = add nsw i64 %6520, 32
  %10208 = add nsw i64 %6628, 32
  %10209 = add nsw i64 %6872, 32
  %10210 = sext i32 %a161 to i64
  %10211 = add nsw i64 %10210, 27
  %10212 = mul nsw i64 %10211, %5542
  br label %"for blur_y.s0.x.x.rebased1392"

"for blur_y.s0.x.x.rebased1392":                  ; preds = %"for blur_y.s0.x.x.rebased1392.preheader", %"consume blur_x1400"
  %indvars.iv2657 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1392.preheader" ], [ %indvars.iv.next2658, %"consume blur_x1400" ]
  %10213 = trunc i64 %indvars.iv2657 to i32
  %10214 = shl nsw i32 %10213, 5
  %10215 = icmp sgt i32 %b156, %10214
  br i1 %10215, label %"produce blur_x1398", label %"for blur_y.s0.x.x.rebased1392.consume blur_x1400_crit_edge"

"for blur_y.s0.x.x.rebased1392.consume blur_x1400_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1392"
  %.pre2723 = shl nuw nsw i64 %indvars.iv2657, 5
  br label %"consume blur_x1400"

"end for blur_y.s0.x.x.rebased1393":              ; preds = %"consume blur_x1400", %"produce blur_x1385"
  br i1 %.not1643, label %"produce blur_x1409", label %"produce blur_x1404"

"produce blur_x1398":                             ; preds = %"for blur_y.s0.x.x.rebased1392"
  %t712.s1399 = add nsw i32 %10214, %t10731390
  %10216 = sext i32 %t712.s1399 to i64
  %10217 = getelementptr inbounds i16, i16* %read_input661, i64 %10216
  %10218 = getelementptr inbounds i16, i16* %10217, i64 33
  %10219 = bitcast i16* %10218 to <32 x i16>*
  %10220 = load <32 x i16>, <32 x i16>* %10219, align 2, !tbaa !412
  %10221 = getelementptr inbounds i16, i16* %10217, i64 34
  %10222 = bitcast i16* %10221 to <32 x i16>*
  %10223 = load <32 x i16>, <32 x i16>* %10222, align 2, !tbaa !412
  %10224 = getelementptr inbounds i16, i16* %10217, i64 32
  %10225 = bitcast i16* %10224 to <32 x i16>*
  %10226 = load <32 x i16>, <32 x i16>* %10225, align 2, !tbaa !412
  %10227 = add <32 x i16> %10223, %10220
  %10228 = add <32 x i16> %10227, %10226
  %10229 = shufflevector <32 x i16> %10228, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10229, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10231 = shufflevector <32 x i16> %10228, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10231, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10233 = shufflevector <16 x i16> %10230, <16 x i16> %10232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10234 = lshr <32 x i16> %10233, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10235 = shl nuw nsw i64 %indvars.iv2657, 5
  %.idx1675 = add nsw i64 %10206, %10235
  %10236 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1675
  %10237 = bitcast i16* %10236 to <32 x i16>*
  store <32 x i16> %10234, <32 x i16>* %10237, align 2, !tbaa !423
  br label %"consume blur_x1400"

"consume blur_x1400":                             ; preds = %"for blur_y.s0.x.x.rebased1392.consume blur_x1400_crit_edge", %"produce blur_x1398"
  %.pre-phi2724 = phi i64 [ %.pre2723, %"for blur_y.s0.x.x.rebased1392.consume blur_x1400_crit_edge" ], [ %10235, %"produce blur_x1398" ]
  %.idx1670 = add nsw i64 %10207, %.pre-phi2724
  %10238 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1670
  %10239 = bitcast i16* %10238 to <32 x i16>*
  %10240 = load <32 x i16>, <32 x i16>* %10239, align 2, !tbaa !423
  %.idx1671 = add nsw i64 %10208, %.pre-phi2724
  %10241 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1671
  %10242 = bitcast i16* %10241 to <32 x i16>*
  %10243 = load <32 x i16>, <32 x i16>* %10242, align 2, !tbaa !423
  %.idx1672 = add nsw i64 %10209, %.pre-phi2724
  %10244 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1672
  %10245 = bitcast i16* %10244 to <32 x i16>*
  %10246 = load <32 x i16>, <32 x i16>* %10245, align 2, !tbaa !423
  %10247 = add <32 x i16> %10243, %10240
  %10248 = add <32 x i16> %10247, %10246
  %10249 = shufflevector <32 x i16> %10248, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10249, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10251 = shufflevector <32 x i16> %10248, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10252 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10251, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10253 = shufflevector <16 x i16> %10250, <16 x i16> %10252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10254 = lshr <32 x i16> %10253, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10255 = add nuw nsw i64 %.pre-phi2724, 32
  %10256 = add nsw i64 %10255, %5665
  %.idx1673 = add i64 %10256, %10212
  %10257 = getelementptr inbounds i16, i16* %5664, i64 %.idx1673
  %10258 = bitcast i16* %10257 to <32 x i16>*
  store <32 x i16> %10254, <32 x i16>* %10258, align 2, !tbaa !425
  %indvars.iv.next2658 = add nuw nsw i64 %indvars.iv2657, 1
  %.not1674 = icmp eq i64 %indvars.iv.next2658, %5744
  br i1 %.not1674, label %"end for blur_y.s0.x.x.rebased1393", label %"for blur_y.s0.x.x.rebased1392"

"produce blur_x1404":                             ; preds = %"end for blur_y.s0.x.x.rebased1393"
  %10259 = getelementptr inbounds i16, i16* %read_input661, i64 %5727
  %10260 = getelementptr inbounds i16, i16* %10259, i64 1
  %10261 = bitcast i16* %10260 to <32 x i16>*
  %10262 = load <32 x i16>, <32 x i16>* %10261, align 2, !tbaa !412
  %10263 = getelementptr inbounds i16, i16* %10259, i64 2
  %10264 = bitcast i16* %10263 to <32 x i16>*
  %10265 = load <32 x i16>, <32 x i16>* %10264, align 2, !tbaa !412
  %10266 = bitcast i16* %10259 to <32 x i16>*
  %10267 = load <32 x i16>, <32 x i16>* %10266, align 2, !tbaa !412
  %10268 = add <32 x i16> %10265, %10262
  %10269 = add <32 x i16> %10268, %10267
  %10270 = shufflevector <32 x i16> %10269, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10271 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10270, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10272 = shufflevector <32 x i16> %10269, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10273 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10272, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10274 = shufflevector <16 x i16> %10271, <16 x i16> %10273, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10275 = lshr <32 x i16> %10274, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10276 = add nsw i64 %6628, %5659
  %10277 = getelementptr inbounds i16, i16* %blur_x714, i64 %10276
  %10278 = bitcast i16* %10277 to <32 x i16>*
  store <32 x i16> %10275, <32 x i16>* %10278, align 2, !tbaa !423
  %10279 = add nsw i64 %6520, %5659
  %10280 = getelementptr inbounds i16, i16* %blur_x714, i64 %10279
  %10281 = bitcast i16* %10280 to <32 x i16>*
  %10282 = load <32 x i16>, <32 x i16>* %10281, align 2, !tbaa !423
  %10283 = add nsw i64 %6872, %5659
  %10284 = getelementptr inbounds i16, i16* %blur_x714, i64 %10283
  %10285 = bitcast i16* %10284 to <32 x i16>*
  %10286 = load <32 x i16>, <32 x i16>* %10285, align 2, !tbaa !423
  %10287 = add <32 x i16> %10282, %10275
  %10288 = add <32 x i16> %10287, %10286
  %10289 = shufflevector <32 x i16> %10288, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10289, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10291 = shufflevector <32 x i16> %10288, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10291, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10293 = shufflevector <16 x i16> %10290, <16 x i16> %10292, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10294 = lshr <32 x i16> %10293, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10295 = sext i32 %a161 to i64
  %10296 = add nsw i64 %10295, 27
  %10297 = mul nsw i64 %10296, %5542
  %10298 = add nsw i64 %5668, %10297
  %10299 = getelementptr inbounds i16, i16* %5664, i64 %10298
  %10300 = bitcast i16* %10299 to <32 x i16>*
  store <32 x i16> %10294, <32 x i16>* %10300, align 2, !tbaa !425
  br label %"produce blur_x1409"

"produce blur_x1409":                             ; preds = %"end for blur_y.s0.x.x.rebased1393", %"produce blur_x1404"
  %10301 = getelementptr inbounds i16, i16* %read_input661, i64 %5728
  %10302 = getelementptr inbounds i16, i16* %10301, i64 1
  %10303 = bitcast i16* %10302 to <32 x i16>*
  %10304 = load <32 x i16>, <32 x i16>* %10303, align 2, !tbaa !412
  %10305 = getelementptr inbounds i16, i16* %10301, i64 2
  %10306 = bitcast i16* %10305 to <32 x i16>*
  %10307 = load <32 x i16>, <32 x i16>* %10306, align 4, !tbaa !412
  %10308 = bitcast i16* %10301 to <32 x i16>*
  %10309 = load <32 x i16>, <32 x i16>* %10308, align 4, !tbaa !412
  %10310 = add <32 x i16> %10307, %10304
  %10311 = add <32 x i16> %10310, %10309
  %10312 = shufflevector <32 x i16> %10311, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10313 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10312, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10314 = shufflevector <32 x i16> %10311, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10315 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10314, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10316 = shufflevector <16 x i16> %10313, <16 x i16> %10315, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10317 = lshr <32 x i16> %10316, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %10317, <32 x i16>* %6741, align 2, !tbaa !423
  %10318 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %10319 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %10320 = add <32 x i16> %10318, %10317
  %10321 = add <32 x i16> %10320, %10319
  %10322 = shufflevector <32 x i16> %10321, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10323 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10322, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10324 = shufflevector <32 x i16> %10321, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10324, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10326 = shufflevector <16 x i16> %10323, <16 x i16> %10325, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10327 = lshr <32 x i16> %10326, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10328 = add nsw i64 %6752, 28
  %10329 = mul nsw i64 %10328, %5542
  %10330 = getelementptr inbounds i16, i16* %5664, i64 %10329
  %10331 = bitcast i16* %10330 to <32 x i16>*
  store <32 x i16> %10327, <32 x i16>* %10331, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1416.preheader", label %"end for blur_y.s0.x.x.rebased1417", !prof !406

"for blur_y.s0.x.x.rebased1416.preheader":        ; preds = %"produce blur_x1409"
  %10332 = sext i32 %t942745 to i64
  %10333 = add nsw i64 %10332, 32
  %10334 = add nsw i64 %6628, 32
  %10335 = add nsw i64 %6739, 32
  %10336 = add nsw i64 %6520, 32
  %10337 = sext i32 %a161 to i64
  %10338 = add nsw i64 %10337, 28
  %10339 = mul nsw i64 %10338, %5542
  br label %"for blur_y.s0.x.x.rebased1416"

"for blur_y.s0.x.x.rebased1416":                  ; preds = %"for blur_y.s0.x.x.rebased1416.preheader", %"consume blur_x1424"
  %indvars.iv2659 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1416.preheader" ], [ %indvars.iv.next2660, %"consume blur_x1424" ]
  %10340 = trunc i64 %indvars.iv2659 to i32
  %10341 = shl nsw i32 %10340, 5
  %10342 = icmp sgt i32 %b156, %10341
  br i1 %10342, label %"produce blur_x1422", label %"for blur_y.s0.x.x.rebased1416.consume blur_x1424_crit_edge"

"for blur_y.s0.x.x.rebased1416.consume blur_x1424_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1416"
  %.pre2725 = shl nuw nsw i64 %indvars.iv2659, 5
  br label %"consume blur_x1424"

"end for blur_y.s0.x.x.rebased1417":              ; preds = %"consume blur_x1424", %"produce blur_x1409"
  br i1 %.not1643, label %"produce blur_x1433", label %"produce blur_x1428"

"produce blur_x1422":                             ; preds = %"for blur_y.s0.x.x.rebased1416"
  %t717.s1423 = add nsw i32 %10341, %t10781414
  %10343 = sext i32 %t717.s1423 to i64
  %10344 = getelementptr inbounds i16, i16* %read_input661, i64 %10343
  %10345 = getelementptr inbounds i16, i16* %10344, i64 33
  %10346 = bitcast i16* %10345 to <32 x i16>*
  %10347 = load <32 x i16>, <32 x i16>* %10346, align 2, !tbaa !412
  %10348 = getelementptr inbounds i16, i16* %10344, i64 34
  %10349 = bitcast i16* %10348 to <32 x i16>*
  %10350 = load <32 x i16>, <32 x i16>* %10349, align 4, !tbaa !412
  %10351 = getelementptr inbounds i16, i16* %10344, i64 32
  %10352 = bitcast i16* %10351 to <32 x i16>*
  %10353 = load <32 x i16>, <32 x i16>* %10352, align 4, !tbaa !412
  %10354 = add <32 x i16> %10350, %10347
  %10355 = add <32 x i16> %10354, %10353
  %10356 = shufflevector <32 x i16> %10355, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10357 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10356, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10358 = shufflevector <32 x i16> %10355, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10358, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10360 = shufflevector <16 x i16> %10357, <16 x i16> %10359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10361 = lshr <32 x i16> %10360, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10362 = shl nuw nsw i64 %indvars.iv2659, 5
  %.idx1669 = add nsw i64 %10333, %10362
  %10363 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1669
  %10364 = bitcast i16* %10363 to <32 x i16>*
  store <32 x i16> %10361, <32 x i16>* %10364, align 2, !tbaa !423
  br label %"consume blur_x1424"

"consume blur_x1424":                             ; preds = %"for blur_y.s0.x.x.rebased1416.consume blur_x1424_crit_edge", %"produce blur_x1422"
  %.pre-phi2726 = phi i64 [ %.pre2725, %"for blur_y.s0.x.x.rebased1416.consume blur_x1424_crit_edge" ], [ %10362, %"produce blur_x1422" ]
  %.idx1664 = add nsw i64 %10334, %.pre-phi2726
  %10365 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1664
  %10366 = bitcast i16* %10365 to <32 x i16>*
  %10367 = load <32 x i16>, <32 x i16>* %10366, align 2, !tbaa !423
  %.idx1665 = add nsw i64 %10335, %.pre-phi2726
  %10368 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1665
  %10369 = bitcast i16* %10368 to <32 x i16>*
  %10370 = load <32 x i16>, <32 x i16>* %10369, align 2, !tbaa !423
  %.idx1666 = add nsw i64 %10336, %.pre-phi2726
  %10371 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1666
  %10372 = bitcast i16* %10371 to <32 x i16>*
  %10373 = load <32 x i16>, <32 x i16>* %10372, align 2, !tbaa !423
  %10374 = add <32 x i16> %10370, %10367
  %10375 = add <32 x i16> %10374, %10373
  %10376 = shufflevector <32 x i16> %10375, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10376, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10378 = shufflevector <32 x i16> %10375, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10379 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10378, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10380 = shufflevector <16 x i16> %10377, <16 x i16> %10379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10381 = lshr <32 x i16> %10380, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10382 = add nuw nsw i64 %.pre-phi2726, 32
  %10383 = add nsw i64 %10382, %5665
  %.idx1667 = add i64 %10383, %10339
  %10384 = getelementptr inbounds i16, i16* %5664, i64 %.idx1667
  %10385 = bitcast i16* %10384 to <32 x i16>*
  store <32 x i16> %10381, <32 x i16>* %10385, align 2, !tbaa !425
  %indvars.iv.next2660 = add nuw nsw i64 %indvars.iv2659, 1
  %.not1668 = icmp eq i64 %indvars.iv.next2660, %5744
  br i1 %.not1668, label %"end for blur_y.s0.x.x.rebased1417", label %"for blur_y.s0.x.x.rebased1416"

"produce blur_x1428":                             ; preds = %"end for blur_y.s0.x.x.rebased1417"
  %10386 = getelementptr inbounds i16, i16* %read_input661, i64 %5729
  %10387 = getelementptr inbounds i16, i16* %10386, i64 1
  %10388 = bitcast i16* %10387 to <32 x i16>*
  %10389 = load <32 x i16>, <32 x i16>* %10388, align 2, !tbaa !412
  %10390 = getelementptr inbounds i16, i16* %10386, i64 2
  %10391 = bitcast i16* %10390 to <32 x i16>*
  %10392 = load <32 x i16>, <32 x i16>* %10391, align 2, !tbaa !412
  %10393 = bitcast i16* %10386 to <32 x i16>*
  %10394 = load <32 x i16>, <32 x i16>* %10393, align 2, !tbaa !412
  %10395 = add <32 x i16> %10392, %10389
  %10396 = add <32 x i16> %10395, %10394
  %10397 = shufflevector <32 x i16> %10396, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10397, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10399 = shufflevector <32 x i16> %10396, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10399, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10401 = shufflevector <16 x i16> %10398, <16 x i16> %10400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10402 = lshr <32 x i16> %10401, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10403 = add nsw i64 %6739, %5659
  %10404 = getelementptr inbounds i16, i16* %blur_x714, i64 %10403
  %10405 = bitcast i16* %10404 to <32 x i16>*
  store <32 x i16> %10402, <32 x i16>* %10405, align 2, !tbaa !423
  %10406 = add nsw i64 %6628, %5659
  %10407 = getelementptr inbounds i16, i16* %blur_x714, i64 %10406
  %10408 = bitcast i16* %10407 to <32 x i16>*
  %10409 = load <32 x i16>, <32 x i16>* %10408, align 2, !tbaa !423
  %10410 = add nsw i64 %6520, %5659
  %10411 = getelementptr inbounds i16, i16* %blur_x714, i64 %10410
  %10412 = bitcast i16* %10411 to <32 x i16>*
  %10413 = load <32 x i16>, <32 x i16>* %10412, align 2, !tbaa !423
  %10414 = add <32 x i16> %10409, %10402
  %10415 = add <32 x i16> %10414, %10413
  %10416 = shufflevector <32 x i16> %10415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10417 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10416, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10418 = shufflevector <32 x i16> %10415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10419 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10418, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10420 = shufflevector <16 x i16> %10417, <16 x i16> %10419, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10421 = lshr <32 x i16> %10420, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10422 = sext i32 %a161 to i64
  %10423 = add nsw i64 %10422, 28
  %10424 = mul nsw i64 %10423, %5542
  %10425 = add nsw i64 %5668, %10424
  %10426 = getelementptr inbounds i16, i16* %5664, i64 %10425
  %10427 = bitcast i16* %10426 to <32 x i16>*
  store <32 x i16> %10421, <32 x i16>* %10427, align 2, !tbaa !425
  br label %"produce blur_x1433"

"produce blur_x1433":                             ; preds = %"end for blur_y.s0.x.x.rebased1417", %"produce blur_x1428"
  %10428 = getelementptr inbounds i16, i16* %read_input661, i64 %5730
  %10429 = getelementptr inbounds i16, i16* %10428, i64 1
  %10430 = bitcast i16* %10429 to <32 x i16>*
  %10431 = load <32 x i16>, <32 x i16>* %10430, align 2, !tbaa !412
  %10432 = getelementptr inbounds i16, i16* %10428, i64 2
  %10433 = bitcast i16* %10432 to <32 x i16>*
  %10434 = load <32 x i16>, <32 x i16>* %10433, align 2, !tbaa !412
  %10435 = bitcast i16* %10428 to <32 x i16>*
  %10436 = load <32 x i16>, <32 x i16>* %10435, align 2, !tbaa !412
  %10437 = add <32 x i16> %10434, %10431
  %10438 = add <32 x i16> %10437, %10436
  %10439 = shufflevector <32 x i16> %10438, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10439, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10441 = shufflevector <32 x i16> %10438, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10442 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10441, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10443 = shufflevector <16 x i16> %10440, <16 x i16> %10442, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10444 = lshr <32 x i16> %10443, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %10444, <32 x i16>* %6874, align 2, !tbaa !423
  %10445 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %10446 = load <32 x i16>, <32 x i16>* %6630, align 2, !tbaa !423
  %10447 = add <32 x i16> %10445, %10444
  %10448 = add <32 x i16> %10447, %10446
  %10449 = shufflevector <32 x i16> %10448, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10450 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10449, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10451 = shufflevector <32 x i16> %10448, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10451, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10453 = shufflevector <16 x i16> %10450, <16 x i16> %10452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10454 = lshr <32 x i16> %10453, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10455 = add nsw i64 %6752, 29
  %10456 = mul nsw i64 %10455, %5542
  %10457 = getelementptr inbounds i16, i16* %5664, i64 %10456
  %10458 = bitcast i16* %10457 to <32 x i16>*
  store <32 x i16> %10454, <32 x i16>* %10458, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1440.preheader", label %"end for blur_y.s0.x.x.rebased1441", !prof !406

"for blur_y.s0.x.x.rebased1440.preheader":        ; preds = %"produce blur_x1433"
  %10459 = sext i32 %t947768 to i64
  %10460 = add nsw i64 %10459, 32
  %10461 = add nsw i64 %6739, 32
  %10462 = add nsw i64 %6872, 32
  %10463 = add nsw i64 %6628, 32
  %10464 = sext i32 %a161 to i64
  %10465 = add nsw i64 %10464, 29
  %10466 = mul nsw i64 %10465, %5542
  br label %"for blur_y.s0.x.x.rebased1440"

"for blur_y.s0.x.x.rebased1440":                  ; preds = %"for blur_y.s0.x.x.rebased1440.preheader", %"consume blur_x1448"
  %indvars.iv2661 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1440.preheader" ], [ %indvars.iv.next2662, %"consume blur_x1448" ]
  %10467 = trunc i64 %indvars.iv2661 to i32
  %10468 = shl nsw i32 %10467, 5
  %10469 = icmp sgt i32 %b156, %10468
  br i1 %10469, label %"produce blur_x1446", label %"for blur_y.s0.x.x.rebased1440.consume blur_x1448_crit_edge"

"for blur_y.s0.x.x.rebased1440.consume blur_x1448_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1440"
  %.pre2727 = shl nuw nsw i64 %indvars.iv2661, 5
  br label %"consume blur_x1448"

"end for blur_y.s0.x.x.rebased1441":              ; preds = %"consume blur_x1448", %"produce blur_x1433"
  br i1 %.not1643, label %"produce blur_x1457", label %"produce blur_x1452"

"produce blur_x1446":                             ; preds = %"for blur_y.s0.x.x.rebased1440"
  %t722.s1447 = add nsw i32 %10468, %t10831438
  %10470 = sext i32 %t722.s1447 to i64
  %10471 = getelementptr inbounds i16, i16* %read_input661, i64 %10470
  %10472 = getelementptr inbounds i16, i16* %10471, i64 33
  %10473 = bitcast i16* %10472 to <32 x i16>*
  %10474 = load <32 x i16>, <32 x i16>* %10473, align 2, !tbaa !412
  %10475 = getelementptr inbounds i16, i16* %10471, i64 34
  %10476 = bitcast i16* %10475 to <32 x i16>*
  %10477 = load <32 x i16>, <32 x i16>* %10476, align 2, !tbaa !412
  %10478 = getelementptr inbounds i16, i16* %10471, i64 32
  %10479 = bitcast i16* %10478 to <32 x i16>*
  %10480 = load <32 x i16>, <32 x i16>* %10479, align 2, !tbaa !412
  %10481 = add <32 x i16> %10477, %10474
  %10482 = add <32 x i16> %10481, %10480
  %10483 = shufflevector <32 x i16> %10482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10484 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10483, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10485 = shufflevector <32 x i16> %10482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10485, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10487 = shufflevector <16 x i16> %10484, <16 x i16> %10486, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10488 = lshr <32 x i16> %10487, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10489 = shl nuw nsw i64 %indvars.iv2661, 5
  %.idx1663 = add nsw i64 %10460, %10489
  %10490 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1663
  %10491 = bitcast i16* %10490 to <32 x i16>*
  store <32 x i16> %10488, <32 x i16>* %10491, align 2, !tbaa !423
  br label %"consume blur_x1448"

"consume blur_x1448":                             ; preds = %"for blur_y.s0.x.x.rebased1440.consume blur_x1448_crit_edge", %"produce blur_x1446"
  %.pre-phi2728 = phi i64 [ %.pre2727, %"for blur_y.s0.x.x.rebased1440.consume blur_x1448_crit_edge" ], [ %10489, %"produce blur_x1446" ]
  %.idx1658 = add nsw i64 %10461, %.pre-phi2728
  %10492 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1658
  %10493 = bitcast i16* %10492 to <32 x i16>*
  %10494 = load <32 x i16>, <32 x i16>* %10493, align 2, !tbaa !423
  %.idx1659 = add nsw i64 %10462, %.pre-phi2728
  %10495 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1659
  %10496 = bitcast i16* %10495 to <32 x i16>*
  %10497 = load <32 x i16>, <32 x i16>* %10496, align 2, !tbaa !423
  %.idx1660 = add nsw i64 %10463, %.pre-phi2728
  %10498 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1660
  %10499 = bitcast i16* %10498 to <32 x i16>*
  %10500 = load <32 x i16>, <32 x i16>* %10499, align 2, !tbaa !423
  %10501 = add <32 x i16> %10497, %10494
  %10502 = add <32 x i16> %10501, %10500
  %10503 = shufflevector <32 x i16> %10502, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10504 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10503, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10505 = shufflevector <32 x i16> %10502, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10506 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10505, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10507 = shufflevector <16 x i16> %10504, <16 x i16> %10506, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10508 = lshr <32 x i16> %10507, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10509 = add nuw nsw i64 %.pre-phi2728, 32
  %10510 = add nsw i64 %10509, %5665
  %.idx1661 = add i64 %10510, %10466
  %10511 = getelementptr inbounds i16, i16* %5664, i64 %.idx1661
  %10512 = bitcast i16* %10511 to <32 x i16>*
  store <32 x i16> %10508, <32 x i16>* %10512, align 2, !tbaa !425
  %indvars.iv.next2662 = add nuw nsw i64 %indvars.iv2661, 1
  %.not1662 = icmp eq i64 %indvars.iv.next2662, %5744
  br i1 %.not1662, label %"end for blur_y.s0.x.x.rebased1441", label %"for blur_y.s0.x.x.rebased1440"

"produce blur_x1452":                             ; preds = %"end for blur_y.s0.x.x.rebased1441"
  %10513 = getelementptr inbounds i16, i16* %read_input661, i64 %5731
  %10514 = getelementptr inbounds i16, i16* %10513, i64 1
  %10515 = bitcast i16* %10514 to <32 x i16>*
  %10516 = load <32 x i16>, <32 x i16>* %10515, align 2, !tbaa !412
  %10517 = getelementptr inbounds i16, i16* %10513, i64 2
  %10518 = bitcast i16* %10517 to <32 x i16>*
  %10519 = load <32 x i16>, <32 x i16>* %10518, align 2, !tbaa !412
  %10520 = bitcast i16* %10513 to <32 x i16>*
  %10521 = load <32 x i16>, <32 x i16>* %10520, align 2, !tbaa !412
  %10522 = add <32 x i16> %10519, %10516
  %10523 = add <32 x i16> %10522, %10521
  %10524 = shufflevector <32 x i16> %10523, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10524, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10526 = shufflevector <32 x i16> %10523, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10526, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10528 = shufflevector <16 x i16> %10525, <16 x i16> %10527, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10529 = lshr <32 x i16> %10528, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10530 = add nsw i64 %6872, %5659
  %10531 = getelementptr inbounds i16, i16* %blur_x714, i64 %10530
  %10532 = bitcast i16* %10531 to <32 x i16>*
  store <32 x i16> %10529, <32 x i16>* %10532, align 2, !tbaa !423
  %10533 = add nsw i64 %6739, %5659
  %10534 = getelementptr inbounds i16, i16* %blur_x714, i64 %10533
  %10535 = bitcast i16* %10534 to <32 x i16>*
  %10536 = load <32 x i16>, <32 x i16>* %10535, align 2, !tbaa !423
  %10537 = add nsw i64 %6628, %5659
  %10538 = getelementptr inbounds i16, i16* %blur_x714, i64 %10537
  %10539 = bitcast i16* %10538 to <32 x i16>*
  %10540 = load <32 x i16>, <32 x i16>* %10539, align 2, !tbaa !423
  %10541 = add <32 x i16> %10536, %10529
  %10542 = add <32 x i16> %10541, %10540
  %10543 = shufflevector <32 x i16> %10542, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10544 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10543, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10545 = shufflevector <32 x i16> %10542, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10546 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10545, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10547 = shufflevector <16 x i16> %10544, <16 x i16> %10546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10548 = lshr <32 x i16> %10547, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10549 = sext i32 %a161 to i64
  %10550 = add nsw i64 %10549, 29
  %10551 = mul nsw i64 %10550, %5542
  %10552 = add nsw i64 %5668, %10551
  %10553 = getelementptr inbounds i16, i16* %5664, i64 %10552
  %10554 = bitcast i16* %10553 to <32 x i16>*
  store <32 x i16> %10548, <32 x i16>* %10554, align 2, !tbaa !425
  br label %"produce blur_x1457"

"produce blur_x1457":                             ; preds = %"end for blur_y.s0.x.x.rebased1441", %"produce blur_x1452"
  %10555 = getelementptr inbounds i16, i16* %read_input661, i64 %5732
  %10556 = getelementptr inbounds i16, i16* %10555, i64 1
  %10557 = bitcast i16* %10556 to <32 x i16>*
  %10558 = load <32 x i16>, <32 x i16>* %10557, align 2, !tbaa !412
  %10559 = getelementptr inbounds i16, i16* %10555, i64 2
  %10560 = bitcast i16* %10559 to <32 x i16>*
  %10561 = load <32 x i16>, <32 x i16>* %10560, align 4, !tbaa !412
  %10562 = bitcast i16* %10555 to <32 x i16>*
  %10563 = load <32 x i16>, <32 x i16>* %10562, align 64, !tbaa !412
  %10564 = add <32 x i16> %10561, %10558
  %10565 = add <32 x i16> %10564, %10563
  %10566 = shufflevector <32 x i16> %10565, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10566, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10568 = shufflevector <32 x i16> %10565, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10568, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10570 = shufflevector <16 x i16> %10567, <16 x i16> %10569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10571 = lshr <32 x i16> %10570, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %10571, <32 x i16>* %6522, align 2, !tbaa !423
  %10572 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %10573 = load <32 x i16>, <32 x i16>* %6741, align 2, !tbaa !423
  %10574 = add <32 x i16> %10572, %10571
  %10575 = add <32 x i16> %10574, %10573
  %10576 = shufflevector <32 x i16> %10575, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10577 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10576, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10578 = shufflevector <32 x i16> %10575, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10579 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10578, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10580 = shufflevector <16 x i16> %10577, <16 x i16> %10579, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10581 = lshr <32 x i16> %10580, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10582 = add nsw i64 %6752, 30
  %10583 = mul nsw i64 %10582, %5542
  %10584 = getelementptr inbounds i16, i16* %5664, i64 %10583
  %10585 = bitcast i16* %10584 to <32 x i16>*
  store <32 x i16> %10581, <32 x i16>* %10585, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1464.preheader", label %"end for blur_y.s0.x.x.rebased1465", !prof !406

"for blur_y.s0.x.x.rebased1464.preheader":        ; preds = %"produce blur_x1457"
  %10586 = sext i32 %t939717 to i64
  %10587 = add nsw i64 %10586, 32
  %10588 = add nsw i64 %6872, 32
  %10589 = add nsw i64 %6520, 32
  %10590 = add nsw i64 %6739, 32
  %10591 = sext i32 %a161 to i64
  %10592 = add nsw i64 %10591, 30
  %10593 = mul nsw i64 %10592, %5542
  br label %"for blur_y.s0.x.x.rebased1464"

"for blur_y.s0.x.x.rebased1464":                  ; preds = %"for blur_y.s0.x.x.rebased1464.preheader", %"consume blur_x1472"
  %indvars.iv2663 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1464.preheader" ], [ %indvars.iv.next2664, %"consume blur_x1472" ]
  %10594 = trunc i64 %indvars.iv2663 to i32
  %10595 = shl nsw i32 %10594, 5
  %10596 = icmp sgt i32 %b156, %10595
  br i1 %10596, label %"produce blur_x1470", label %"for blur_y.s0.x.x.rebased1464.consume blur_x1472_crit_edge"

"for blur_y.s0.x.x.rebased1464.consume blur_x1472_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1464"
  %.pre2729 = shl nuw nsw i64 %indvars.iv2663, 5
  br label %"consume blur_x1472"

"end for blur_y.s0.x.x.rebased1465":              ; preds = %"consume blur_x1472", %"produce blur_x1457"
  br i1 %.not1643, label %"produce blur_x1481", label %"produce blur_x1476"

"produce blur_x1470":                             ; preds = %"for blur_y.s0.x.x.rebased1464"
  %t727.s1471 = add nsw i32 %10595, %t10881462
  %10597 = sext i32 %t727.s1471 to i64
  %10598 = getelementptr inbounds i16, i16* %read_input661, i64 %10597
  %10599 = getelementptr inbounds i16, i16* %10598, i64 33
  %10600 = bitcast i16* %10599 to <32 x i16>*
  %10601 = load <32 x i16>, <32 x i16>* %10600, align 2, !tbaa !412
  %10602 = getelementptr inbounds i16, i16* %10598, i64 34
  %10603 = bitcast i16* %10602 to <32 x i16>*
  %10604 = load <32 x i16>, <32 x i16>* %10603, align 4, !tbaa !412
  %10605 = getelementptr inbounds i16, i16* %10598, i64 32
  %10606 = bitcast i16* %10605 to <32 x i16>*
  %10607 = load <32 x i16>, <32 x i16>* %10606, align 4, !tbaa !412
  %10608 = add <32 x i16> %10604, %10601
  %10609 = add <32 x i16> %10608, %10607
  %10610 = shufflevector <32 x i16> %10609, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10610, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10612 = shufflevector <32 x i16> %10609, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10613 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10612, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10614 = shufflevector <16 x i16> %10611, <16 x i16> %10613, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10615 = lshr <32 x i16> %10614, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10616 = shl nuw nsw i64 %indvars.iv2663, 5
  %.idx1657 = add nsw i64 %10587, %10616
  %10617 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1657
  %10618 = bitcast i16* %10617 to <32 x i16>*
  store <32 x i16> %10615, <32 x i16>* %10618, align 2, !tbaa !423
  br label %"consume blur_x1472"

"consume blur_x1472":                             ; preds = %"for blur_y.s0.x.x.rebased1464.consume blur_x1472_crit_edge", %"produce blur_x1470"
  %.pre-phi2730 = phi i64 [ %.pre2729, %"for blur_y.s0.x.x.rebased1464.consume blur_x1472_crit_edge" ], [ %10616, %"produce blur_x1470" ]
  %.idx1652 = add nsw i64 %10588, %.pre-phi2730
  %10619 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1652
  %10620 = bitcast i16* %10619 to <32 x i16>*
  %10621 = load <32 x i16>, <32 x i16>* %10620, align 2, !tbaa !423
  %.idx1653 = add nsw i64 %10589, %.pre-phi2730
  %10622 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1653
  %10623 = bitcast i16* %10622 to <32 x i16>*
  %10624 = load <32 x i16>, <32 x i16>* %10623, align 2, !tbaa !423
  %.idx1654 = add nsw i64 %10590, %.pre-phi2730
  %10625 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1654
  %10626 = bitcast i16* %10625 to <32 x i16>*
  %10627 = load <32 x i16>, <32 x i16>* %10626, align 2, !tbaa !423
  %10628 = add <32 x i16> %10624, %10621
  %10629 = add <32 x i16> %10628, %10627
  %10630 = shufflevector <32 x i16> %10629, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10631 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10630, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10632 = shufflevector <32 x i16> %10629, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10633 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10632, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10634 = shufflevector <16 x i16> %10631, <16 x i16> %10633, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10635 = lshr <32 x i16> %10634, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10636 = add nuw nsw i64 %.pre-phi2730, 32
  %10637 = add nsw i64 %10636, %5665
  %.idx1655 = add i64 %10637, %10593
  %10638 = getelementptr inbounds i16, i16* %5664, i64 %.idx1655
  %10639 = bitcast i16* %10638 to <32 x i16>*
  store <32 x i16> %10635, <32 x i16>* %10639, align 2, !tbaa !425
  %indvars.iv.next2664 = add nuw nsw i64 %indvars.iv2663, 1
  %.not1656 = icmp eq i64 %indvars.iv.next2664, %5744
  br i1 %.not1656, label %"end for blur_y.s0.x.x.rebased1465", label %"for blur_y.s0.x.x.rebased1464"

"produce blur_x1476":                             ; preds = %"end for blur_y.s0.x.x.rebased1465"
  %10640 = getelementptr inbounds i16, i16* %read_input661, i64 %5733
  %10641 = getelementptr inbounds i16, i16* %10640, i64 1
  %10642 = bitcast i16* %10641 to <32 x i16>*
  %10643 = load <32 x i16>, <32 x i16>* %10642, align 2, !tbaa !412
  %10644 = getelementptr inbounds i16, i16* %10640, i64 2
  %10645 = bitcast i16* %10644 to <32 x i16>*
  %10646 = load <32 x i16>, <32 x i16>* %10645, align 2, !tbaa !412
  %10647 = bitcast i16* %10640 to <32 x i16>*
  %10648 = load <32 x i16>, <32 x i16>* %10647, align 2, !tbaa !412
  %10649 = add <32 x i16> %10646, %10643
  %10650 = add <32 x i16> %10649, %10648
  %10651 = shufflevector <32 x i16> %10650, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10651, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10653 = shufflevector <32 x i16> %10650, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10653, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10655 = shufflevector <16 x i16> %10652, <16 x i16> %10654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10656 = lshr <32 x i16> %10655, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10657 = add nsw i64 %6520, %5659
  %10658 = getelementptr inbounds i16, i16* %blur_x714, i64 %10657
  %10659 = bitcast i16* %10658 to <32 x i16>*
  store <32 x i16> %10656, <32 x i16>* %10659, align 2, !tbaa !423
  %10660 = add nsw i64 %6872, %5659
  %10661 = getelementptr inbounds i16, i16* %blur_x714, i64 %10660
  %10662 = bitcast i16* %10661 to <32 x i16>*
  %10663 = load <32 x i16>, <32 x i16>* %10662, align 2, !tbaa !423
  %10664 = add nsw i64 %6739, %5659
  %10665 = getelementptr inbounds i16, i16* %blur_x714, i64 %10664
  %10666 = bitcast i16* %10665 to <32 x i16>*
  %10667 = load <32 x i16>, <32 x i16>* %10666, align 2, !tbaa !423
  %10668 = add <32 x i16> %10663, %10656
  %10669 = add <32 x i16> %10668, %10667
  %10670 = shufflevector <32 x i16> %10669, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10671 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10670, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10672 = shufflevector <32 x i16> %10669, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10673 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10672, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10674 = shufflevector <16 x i16> %10671, <16 x i16> %10673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10675 = lshr <32 x i16> %10674, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10676 = sext i32 %a161 to i64
  %10677 = add nsw i64 %10676, 30
  %10678 = mul nsw i64 %10677, %5542
  %10679 = add nsw i64 %5668, %10678
  %10680 = getelementptr inbounds i16, i16* %5664, i64 %10679
  %10681 = bitcast i16* %10680 to <32 x i16>*
  store <32 x i16> %10675, <32 x i16>* %10681, align 2, !tbaa !425
  br label %"produce blur_x1481"

"produce blur_x1481":                             ; preds = %"end for blur_y.s0.x.x.rebased1465", %"produce blur_x1476"
  %10682 = getelementptr inbounds i16, i16* %read_input661, i64 %5734
  %10683 = getelementptr inbounds i16, i16* %10682, i64 1
  %10684 = bitcast i16* %10683 to <32 x i16>*
  %10685 = load <32 x i16>, <32 x i16>* %10684, align 2, !tbaa !412
  %10686 = getelementptr inbounds i16, i16* %10682, i64 2
  %10687 = bitcast i16* %10686 to <32 x i16>*
  %10688 = load <32 x i16>, <32 x i16>* %10687, align 2, !tbaa !412
  %10689 = bitcast i16* %10682 to <32 x i16>*
  %10690 = load <32 x i16>, <32 x i16>* %10689, align 2, !tbaa !412
  %10691 = add <32 x i16> %10688, %10685
  %10692 = add <32 x i16> %10691, %10690
  %10693 = shufflevector <32 x i16> %10692, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10693, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10695 = shufflevector <32 x i16> %10692, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10696 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10695, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10697 = shufflevector <16 x i16> %10694, <16 x i16> %10696, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10698 = lshr <32 x i16> %10697, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  store <32 x i16> %10698, <32 x i16>* %6630, align 2, !tbaa !423
  %10699 = load <32 x i16>, <32 x i16>* %6522, align 2, !tbaa !423
  %10700 = load <32 x i16>, <32 x i16>* %6874, align 2, !tbaa !423
  %10701 = add <32 x i16> %10699, %10698
  %10702 = add <32 x i16> %10701, %10700
  %10703 = shufflevector <32 x i16> %10702, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10704 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10703, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10705 = shufflevector <32 x i16> %10702, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10706 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10705, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10707 = shufflevector <16 x i16> %10704, <16 x i16> %10706, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10708 = lshr <32 x i16> %10707, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10709 = add nsw i64 %6752, 31
  %10710 = mul nsw i64 %10709, %5542
  %10711 = getelementptr inbounds i16, i16* %5664, i64 %10710
  %10712 = bitcast i16* %10711 to <32 x i16>*
  store <32 x i16> %10708, <32 x i16>* %10712, align 2, !tbaa !425
  br i1 %5658, label %"for blur_y.s0.x.x.rebased1488.preheader", label %"end for blur_y.s0.x.x.rebased1489", !prof !406

"for blur_y.s0.x.x.rebased1488.preheader":        ; preds = %"produce blur_x1481"
  %10713 = sext i32 %t941729 to i64
  %10714 = add nsw i64 %10713, 32
  %10715 = add nsw i64 %6520, 32
  %10716 = add nsw i64 %6628, 32
  %10717 = add nsw i64 %6872, 32
  %10718 = sext i32 %a161 to i64
  %10719 = add nsw i64 %10718, 31
  %10720 = mul nsw i64 %10719, %5542
  br label %"for blur_y.s0.x.x.rebased1488"

"for blur_y.s0.x.x.rebased1488":                  ; preds = %"for blur_y.s0.x.x.rebased1488.preheader", %"consume blur_x1496"
  %indvars.iv2665 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1488.preheader" ], [ %indvars.iv.next2666, %"consume blur_x1496" ]
  %10721 = trunc i64 %indvars.iv2665 to i32
  %10722 = shl nsw i32 %10721, 5
  %10723 = icmp sgt i32 %b156, %10722
  br i1 %10723, label %"produce blur_x1494", label %"for blur_y.s0.x.x.rebased1488.consume blur_x1496_crit_edge"

"for blur_y.s0.x.x.rebased1488.consume blur_x1496_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1488"
  %.pre2731 = shl nuw nsw i64 %indvars.iv2665, 5
  br label %"consume blur_x1496"

"end for blur_y.s0.x.x.rebased1489":              ; preds = %"consume blur_x1496", %"produce blur_x1481"
  br i1 %.not1643, label %after_bb1497, label %"produce blur_x1500"

"produce blur_x1494":                             ; preds = %"for blur_y.s0.x.x.rebased1488"
  %t732.s1495 = add nsw i32 %10722, %t10931486
  %10724 = sext i32 %t732.s1495 to i64
  %10725 = getelementptr inbounds i16, i16* %read_input661, i64 %10724
  %10726 = getelementptr inbounds i16, i16* %10725, i64 33
  %10727 = bitcast i16* %10726 to <32 x i16>*
  %10728 = load <32 x i16>, <32 x i16>* %10727, align 2, !tbaa !412
  %10729 = getelementptr inbounds i16, i16* %10725, i64 34
  %10730 = bitcast i16* %10729 to <32 x i16>*
  %10731 = load <32 x i16>, <32 x i16>* %10730, align 2, !tbaa !412
  %10732 = getelementptr inbounds i16, i16* %10725, i64 32
  %10733 = bitcast i16* %10732 to <32 x i16>*
  %10734 = load <32 x i16>, <32 x i16>* %10733, align 2, !tbaa !412
  %10735 = add <32 x i16> %10731, %10728
  %10736 = add <32 x i16> %10735, %10734
  %10737 = shufflevector <32 x i16> %10736, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10738 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10737, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10739 = shufflevector <32 x i16> %10736, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10740 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10739, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10741 = shufflevector <16 x i16> %10738, <16 x i16> %10740, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10742 = lshr <32 x i16> %10741, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10743 = shl nuw nsw i64 %indvars.iv2665, 5
  %.idx1651 = add nsw i64 %10714, %10743
  %10744 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1651
  %10745 = bitcast i16* %10744 to <32 x i16>*
  store <32 x i16> %10742, <32 x i16>* %10745, align 2, !tbaa !423
  br label %"consume blur_x1496"

"consume blur_x1496":                             ; preds = %"for blur_y.s0.x.x.rebased1488.consume blur_x1496_crit_edge", %"produce blur_x1494"
  %.pre-phi2732 = phi i64 [ %.pre2731, %"for blur_y.s0.x.x.rebased1488.consume blur_x1496_crit_edge" ], [ %10743, %"produce blur_x1494" ]
  %.idx = add nsw i64 %10715, %.pre-phi2732
  %10746 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx
  %10747 = bitcast i16* %10746 to <32 x i16>*
  %10748 = load <32 x i16>, <32 x i16>* %10747, align 2, !tbaa !423
  %.idx1647 = add nsw i64 %10716, %.pre-phi2732
  %10749 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1647
  %10750 = bitcast i16* %10749 to <32 x i16>*
  %10751 = load <32 x i16>, <32 x i16>* %10750, align 2, !tbaa !423
  %.idx1648 = add nsw i64 %10717, %.pre-phi2732
  %10752 = getelementptr inbounds i16, i16* %blur_x714, i64 %.idx1648
  %10753 = bitcast i16* %10752 to <32 x i16>*
  %10754 = load <32 x i16>, <32 x i16>* %10753, align 2, !tbaa !423
  %10755 = add <32 x i16> %10751, %10748
  %10756 = add <32 x i16> %10755, %10754
  %10757 = shufflevector <32 x i16> %10756, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10758 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10757, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10759 = shufflevector <32 x i16> %10756, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10760 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10759, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10761 = shufflevector <16 x i16> %10758, <16 x i16> %10760, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10762 = lshr <32 x i16> %10761, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10763 = add nuw nsw i64 %.pre-phi2732, 32
  %10764 = add nsw i64 %10763, %5665
  %.idx1649 = add i64 %10764, %10720
  %10765 = getelementptr inbounds i16, i16* %5664, i64 %.idx1649
  %10766 = bitcast i16* %10765 to <32 x i16>*
  store <32 x i16> %10762, <32 x i16>* %10766, align 2, !tbaa !425
  %indvars.iv.next2666 = add nuw nsw i64 %indvars.iv2665, 1
  %.not1650 = icmp eq i64 %indvars.iv.next2666, %5744
  br i1 %.not1650, label %"end for blur_y.s0.x.x.rebased1489", label %"for blur_y.s0.x.x.rebased1488"

after_bb1497:                                     ; preds = %"end for blur_y.s0.x.x.rebased1489", %"produce blur_x1500"
  %10767 = add nuw nsw i32 %blur_y.s0.y.y6552483, 1
  %.not1646 = icmp eq i32 %10767, %t884652
  br i1 %.not1646, label %if.then.i, label %"for blur_y.s0.y.y653"

"produce blur_x1500":                             ; preds = %"end for blur_y.s0.x.x.rebased1489"
  %10768 = getelementptr inbounds i16, i16* %read_input661, i64 %5735
  %10769 = getelementptr inbounds i16, i16* %10768, i64 1
  %10770 = bitcast i16* %10769 to <32 x i16>*
  %10771 = load <32 x i16>, <32 x i16>* %10770, align 2, !tbaa !412
  %10772 = getelementptr inbounds i16, i16* %10768, i64 2
  %10773 = bitcast i16* %10772 to <32 x i16>*
  %10774 = load <32 x i16>, <32 x i16>* %10773, align 2, !tbaa !412
  %10775 = bitcast i16* %10768 to <32 x i16>*
  %10776 = load <32 x i16>, <32 x i16>* %10775, align 2, !tbaa !412
  %10777 = add <32 x i16> %10774, %10771
  %10778 = add <32 x i16> %10777, %10776
  %10779 = shufflevector <32 x i16> %10778, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10780 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10779, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10781 = shufflevector <32 x i16> %10778, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10781, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10783 = shufflevector <16 x i16> %10780, <16 x i16> %10782, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10784 = lshr <32 x i16> %10783, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10785 = add nsw i64 %6628, %5659
  %10786 = getelementptr inbounds i16, i16* %blur_x714, i64 %10785
  %10787 = bitcast i16* %10786 to <32 x i16>*
  store <32 x i16> %10784, <32 x i16>* %10787, align 2, !tbaa !423
  %10788 = add nsw i64 %6520, %5659
  %10789 = getelementptr inbounds i16, i16* %blur_x714, i64 %10788
  %10790 = bitcast i16* %10789 to <32 x i16>*
  %10791 = load <32 x i16>, <32 x i16>* %10790, align 2, !tbaa !423
  %10792 = add nsw i64 %6872, %5659
  %10793 = getelementptr inbounds i16, i16* %blur_x714, i64 %10792
  %10794 = bitcast i16* %10793 to <32 x i16>*
  %10795 = load <32 x i16>, <32 x i16>* %10794, align 2, !tbaa !423
  %10796 = add <32 x i16> %10791, %10784
  %10797 = add <32 x i16> %10796, %10795
  %10798 = shufflevector <32 x i16> %10797, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10799 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10798, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10800 = shufflevector <32 x i16> %10797, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10801 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10800, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10802 = shufflevector <16 x i16> %10799, <16 x i16> %10801, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10803 = lshr <32 x i16> %10802, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10804 = sext i32 %a161 to i64
  %10805 = add nsw i64 %10804, 31
  %10806 = mul nsw i64 %10805, %5542
  %10807 = add nsw i64 %5668, %10806
  %10808 = getelementptr inbounds i16, i16* %5664, i64 %10807
  %10809 = bitcast i16* %10808 to <32 x i16>*
  store <32 x i16> %10803, <32 x i16>* %10809, align 2, !tbaa !425
  br label %after_bb1497
}

; Function Attrs: nounwind
define i32 @blur3x3_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur3x3(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #20
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur3x3_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur3x3_metadata_storage
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.cttz.i64(i64, i1 immarg) #5

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #13

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #14

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #15

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #16

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare i8* @llvm.load.relative.i64(i8*, i64) #17

attributes #0 = { mustprogress nounwind "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nounwind "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #5 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #7 = { alwaysinline mustprogress nounwind "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #8 = { nounwind "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #9 = { nofree nosync nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { mustprogress nofree norecurse nosync nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #14 = { nofree nosync nounwind willreturn writeonly }
attributes #15 = { nofree nosync nounwind readonly willreturn }
attributes #16 = { nofree nosync nounwind readnone willreturn }
attributes #17 = { argmemonly nofree nosync nounwind readonly willreturn }
attributes #18 = { nobuiltin nounwind "no-builtins" }
attributes #19 = { nobuiltin "no-builtins" }
attributes #20 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9}
!llvm.ident = !{!10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10, !10}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!4 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!5 = !{i32 2, !"halide_mattrs", !"+fma,+f16c,+avx512f,+avx512cd,+avx512vl,+avx512bw,+avx512dq"}
!6 = !{i32 2, !"halide_mabi", !""}
!7 = !{i32 2, !"halide_use_pic", i32 1}
!8 = !{i32 2, !"halide_use_large_code_model", i32 0}
!9 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!10 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!11 = !{!12, !12, i64 0}
!12 = !{!"any pointer", !13, i64 0}
!13 = !{!"omnipotent char", !14, i64 0}
!14 = !{!"Simple C++ TBAA"}
!15 = !{!13, !13, i64 0}
!16 = !{!17, !17, i64 0}
!17 = !{!"bool", !13, i64 0}
!18 = !{i8 0, i8 2}
!19 = !{!20, !20, i64 0}
!20 = !{!"long", !13, i64 0}
!21 = !{!22, !12, i64 0}
!22 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !23, i64 0, !12, i64 56, !12, i64 64, !12, i64 72, !24, i64 80, !12, i64 88, !24, i64 96, !12, i64 104, !24, i64 112, !24, i64 116, !24, i64 120, !17, i64 124}
!23 = !{!"_ZTS22halide_parallel_task_t", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !24, i64 32, !24, i64 36, !24, i64 40, !24, i64 44, !17, i64 48}
!24 = !{!"int", !13, i64 0}
!25 = !{!22, !24, i64 36}
!26 = !{!22, !24, i64 40}
!27 = !{!22, !17, i64 48}
!28 = !{!22, !12, i64 24}
!29 = !{!22, !24, i64 32}
!30 = !{!22, !12, i64 8}
!31 = !{!22, !24, i64 44}
!32 = !{!22, !12, i64 16}
!33 = !{!22, !12, i64 56}
!34 = !{!22, !12, i64 104}
!35 = !{!22, !24, i64 116}
!36 = !{!22, !24, i64 112}
!37 = !{!22, !24, i64 120}
!38 = !{!22, !17, i64 124}
!39 = !{!22, !12, i64 72}
!40 = !{!22, !24, i64 80}
!41 = !{!22, !12, i64 88}
!42 = !{!43, !43, i64 0}
!43 = !{!"vtable pointer", !14, i64 0}
!44 = !{!45, !12, i64 8}
!45 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !12, i64 8}
!46 = distinct !{!46, !47}
!47 = !{!"llvm.loop.mustprogress"}
!48 = !{!49, !17, i64 2121}
!49 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !50, i64 0, !24, i64 8, !24, i64 12, !12, i64 16, !24, i64 24, !24, i64 28, !24, i64 32, !51, i64 40, !51, i64 48, !51, i64 56, !24, i64 64, !24, i64 68, !13, i64 72, !17, i64 2120, !17, i64 2121, !24, i64 2124}
!50 = !{!"_ZTS12halide_mutex", !13, i64 0}
!51 = !{!"_ZTS11halide_cond", !13, i64 0}
!52 = !{!49, !24, i64 8}
!53 = !{!49, !24, i64 24}
!54 = !{!49, !24, i64 2124}
!55 = !{!49, !24, i64 28}
!56 = distinct !{!56, !47}
!57 = !{!22, !24, i64 96}
!58 = !{!49, !12, i64 16}
!59 = !{!22, !12, i64 64}
!60 = !{!49, !24, i64 68}
!61 = !{!49, !24, i64 32}
!62 = distinct !{!62, !47}
!63 = distinct !{!63, !47}
!64 = distinct !{!64, !47}
!65 = !{!49, !17, i64 2120}
!66 = distinct !{!66, !47}
!67 = !{!68, !12, i64 0}
!68 = !{!"_ZTS26halide_semaphore_acquire_t", !12, i64 0, !24, i64 8}
!69 = !{!68, !24, i64 8}
!70 = distinct !{!70, !47}
!71 = distinct !{!71, !47}
!72 = !{!49, !24, i64 64}
!73 = distinct !{!73, !47}
!74 = distinct !{!74, !47}
!75 = !{i64 0, i64 8, !11, i64 8, i64 8, !11, i64 16, i64 8, !11, i64 24, i64 8, !11, i64 32, i64 4, !76, i64 36, i64 4, !76, i64 40, i64 4, !76, i64 44, i64 4, !76, i64 48, i64 1, !16, i64 56, i64 8, !11, i64 64, i64 8, !11, i64 72, i64 8, !11, i64 80, i64 4, !76, i64 88, i64 8, !11, i64 96, i64 4, !76, i64 104, i64 8, !11, i64 112, i64 4, !76, i64 116, i64 4, !76, i64 120, i64 4, !76, i64 124, i64 1, !16}
!76 = !{!24, !24, i64 0}
!77 = !{i64 0, i64 8, !11, i64 8, i64 8, !11, i64 16, i64 8, !11, i64 24, i64 4, !76, i64 28, i64 4, !76, i64 32, i64 4, !76, i64 36, i64 4, !76, i64 40, i64 1, !16, i64 48, i64 8, !11, i64 56, i64 8, !11, i64 64, i64 8, !11, i64 72, i64 4, !76, i64 80, i64 8, !11, i64 88, i64 4, !76, i64 96, i64 8, !11, i64 104, i64 4, !76, i64 108, i64 4, !76, i64 112, i64 4, !76, i64 116, i64 1, !16}
!78 = !{i64 0, i64 8, !11, i64 8, i64 8, !11, i64 16, i64 8, !11, i64 24, i64 4, !76, i64 32, i64 8, !11, i64 40, i64 4, !76, i64 48, i64 8, !11, i64 56, i64 4, !76, i64 60, i64 4, !76, i64 64, i64 4, !76, i64 68, i64 1, !16}
!79 = !{i64 0, i64 8, !11, i64 8, i64 4, !76, i64 12, i64 4, !76, i64 16, i64 4, !76, i64 20, i64 1, !16}
!80 = distinct !{!80, !47}
!81 = distinct !{!81, !47}
!82 = !{!83, !12, i64 144}
!83 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !84, i64 0, !87, i64 136, !12, i64 144, !87, i64 152}
!84 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !85, i64 0, !86, i64 64, !17, i64 128}
!85 = !{!"_ZTS15pthread_mutex_t", !13, i64 0}
!86 = !{!"_ZTS14pthread_cond_t", !13, i64 0}
!87 = !{!"long long", !13, i64 0}
!88 = !{!89, !12, i64 16}
!89 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !90, i64 0, !12, i64 8, !12, i64 16}
!90 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !87, i64 0}
!91 = distinct !{!91, !47}
!92 = !{!83, !87, i64 152}
!93 = !{!84, !17, i64 128}
!94 = distinct !{!94, !47}
!95 = !{!96, !12, i64 152}
!96 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !84, i64 0, !12, i64 136, !12, i64 144, !12, i64 152}
!97 = !{!96, !12, i64 136}
!98 = !{!96, !12, i64 144}
!99 = distinct !{!99, !47}
!100 = distinct !{!100, !47}
!101 = distinct !{!101, !47}
!102 = distinct !{!102, !47}
!103 = distinct !{!103, !47}
!104 = !{!105, !12, i64 8}
!105 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !12, i64 8, !12, i64 16}
!106 = !{!105, !12, i64 16}
!107 = !{!108, !12, i64 8}
!108 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !12, i64 8, !12, i64 16}
!109 = !{!108, !12, i64 16}
!110 = !{!83, !87, i64 136}
!111 = !{!112, !17, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !17, i64 0, !87, i64 8}
!113 = !{!112, !87, i64 8}
!114 = !{!89, !12, i64 8}
!115 = !{!87, !87, i64 0}
!116 = !{!117, !12, i64 0}
!117 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !12, i64 0, !12, i64 8}
!118 = distinct !{!118, !47}
!119 = !{!117, !12, i64 8}
!120 = !{!121, !12, i64 0}
!121 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !12, i64 0, !12, i64 8, !20, i64 16}
!122 = !{!121, !12, i64 8}
!123 = !{!121, !20, i64 16}
!124 = !{!23, !24, i64 40}
!125 = !{i64 0, i64 8, !11, i64 8, i64 8, !11, i64 16, i64 8, !11, i64 24, i64 8, !11, i64 32, i64 4, !76, i64 36, i64 4, !76, i64 40, i64 4, !76, i64 44, i64 4, !76, i64 48, i64 1, !16}
!126 = distinct !{!126, !47}
!127 = distinct !{!127, !47}
!128 = distinct !{!128, !47}
!129 = !{!130, !12, i64 8}
!130 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !12, i64 8, !12, i64 16}
!131 = !{!130, !12, i64 16}
!132 = !{!133, !12, i64 0}
!133 = !{!"_ZTS18halide_mutex_array", !12, i64 0}
!134 = distinct !{!134, !47}
!135 = !{!136, !139, i64 34}
!136 = !{!"_ZTS20halide_trace_event_t", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !137, i64 32, !140, i64 36, !24, i64 40, !24, i64 44, !24, i64 48}
!137 = !{!"_ZTS13halide_type_t", !138, i64 0, !13, i64 1, !139, i64 2}
!138 = !{!"_ZTS18halide_type_code_t", !13, i64 0}
!139 = !{!"short", !13, i64 0}
!140 = !{!"_ZTS25halide_trace_event_code_t", !13, i64 0}
!141 = !{!137, !13, i64 1}
!142 = !{!136, !24, i64 48}
!143 = !{!136, !12, i64 0}
!144 = !{!136, !12, i64 24}
!145 = !{!146, !24, i64 0}
!146 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !24, i64 0}
!147 = distinct !{!147, !47}
!148 = !{!149, !24, i64 4}
!149 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !146, i64 0, !24, i64 4, !24, i64 8, !13, i64 12}
!150 = !{!149, !24, i64 8}
!151 = distinct !{!151, !47}
!152 = !{!153, !24, i64 0}
!153 = !{!"_ZTS21halide_trace_packet_t", !24, i64 0, !24, i64 4, !137, i64 8, !140, i64 12, !24, i64 16, !24, i64 20, !24, i64 24}
!154 = !{!153, !24, i64 4}
!155 = !{!136, !12, i64 16}
!156 = !{!136, !12, i64 8}
!157 = !{!153, !24, i64 24}
!158 = !{!153, !139, i64 10}
!159 = distinct !{!159, !47}
!160 = !{!136, !140, i64 36}
!161 = !{!136, !13, i64 33}
!162 = distinct !{!162, !47}
!163 = !{!136, !24, i64 44}
!164 = distinct !{!164, !47, !165}
!165 = !{!"llvm.loop.peeled.count", i32 1}
!166 = !{!136, !138, i64 32}
!167 = !{!139, !139, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"float", !13, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"double", !13, i64 0}
!172 = distinct !{!172, !47, !165}
!173 = distinct !{!173, !47}
!174 = !{!136, !24, i64 40}
!175 = distinct !{!175, !47}
!176 = distinct !{!176, !47}
!177 = distinct !{!177, !47}
!178 = !{!179, !12, i64 16}
!179 = !{!"_ZTS15halide_buffer_t", !87, i64 0, !12, i64 8, !12, i64 16, !87, i64 24, !137, i64 32, !24, i64 36, !12, i64 40, !12, i64 48}
!180 = !{!179, !24, i64 36}
!181 = !{!179, !12, i64 40}
!182 = !{i64 0, i64 4, !76, i64 4, i64 4, !76, i64 8, i64 4, !76, i64 12, i64 4, !76}
!183 = !{!184, !24, i64 4}
!184 = !{!"_ZTS18halide_dimension_t", !24, i64 0, !24, i64 4, !24, i64 8, !24, i64 12}
!185 = distinct !{!185, !47}
!186 = !{!184, !24, i64 0}
!187 = !{!184, !24, i64 8}
!188 = distinct !{!188, !47, !189}
!189 = !{!"llvm.loop.isvectorized", i32 1}
!190 = distinct !{!190, !191}
!191 = !{!"llvm.loop.unroll.disable"}
!192 = distinct !{!192, !47, !193, !189}
!193 = !{!"llvm.loop.unroll.runtime.disable"}
!194 = !{!195, !139, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !139, i64 0, !139, i64 2, !24, i64 4, !139, i64 8, !13, i64 10, !24, i64 190, !13, i64 194, !13, i64 202}
!196 = !{!195, !139, i64 2}
!197 = !{!195, !24, i64 4}
!198 = !{!195, !139, i64 8}
!199 = !{!200, !139, i64 0}
!200 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !139, i64 0, !139, i64 2, !24, i64 4, !13, i64 8}
!201 = !{!200, !139, i64 2}
!202 = !{!200, !24, i64 4}
!203 = distinct !{!203, !47}
!204 = distinct !{!204, !47}
!205 = distinct !{!205, !47}
!206 = distinct !{!206, !47}
!207 = distinct !{!207, !47}
!208 = !{!209}
!209 = distinct !{!209, !210}
!210 = distinct !{!210, !"LVerDomain"}
!211 = !{!212}
!212 = distinct !{!212, !210}
!213 = distinct !{!213, !47, !189}
!214 = distinct !{!214, !191}
!215 = distinct !{!215, !191}
!216 = distinct !{!216, !47, !189}
!217 = distinct !{!217, !191}
!218 = distinct !{!218, !47, !189}
!219 = distinct !{!219, !47, !189}
!220 = distinct !{!220, !47, !193, !189}
!221 = distinct !{!221, !47, !189}
!222 = distinct !{!222, !47, !193, !189}
!223 = distinct !{!223, !47, !189}
!224 = distinct !{!224, !47, !193, !189}
!225 = distinct !{!225, !47}
!226 = distinct !{!226, !47, !189}
!227 = distinct !{!227, !47, !193, !189}
!228 = distinct !{!228, !47}
!229 = distinct !{!229, !47, !230}
!230 = !{!"llvm.loop.unswitch.partial.disable"}
!231 = distinct !{!231, !47}
!232 = distinct !{!232, !47}
!233 = !{!234, !12, i64 0}
!234 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !20, i64 32, !12, i64 40, !24, i64 48, !24, i64 52, !24, i64 56, !24, i64 60, !12, i64 64, !12, i64 72, !87, i64 80, !17, i64 88}
!235 = distinct !{!235, !47}
!236 = !{!234, !24, i64 56}
!237 = !{!234, !12, i64 24}
!238 = !{!234, !12, i64 72}
!239 = distinct !{!239, !47}
!240 = distinct !{!240, !47}
!241 = !{!242, !87, i64 0}
!242 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !87, i64 0, !87, i64 8, !87, i64 16, !13, i64 24, !13, i64 152, !13, i64 280, !87, i64 408}
!243 = !{!242, !87, i64 8}
!244 = !{!242, !87, i64 408}
!245 = distinct !{!245, !47}
!246 = !{!242, !87, i64 16}
!247 = !{!179, !87, i64 0}
!248 = distinct !{!248, !47, !189}
!249 = distinct !{!249, !47, !193, !189}
!250 = distinct !{!250, !47}
!251 = distinct !{!251, !191}
!252 = distinct !{!252, !47}
!253 = distinct !{!253, !47}
!254 = distinct !{!254, !47}
!255 = !{i64 0, i64 8, !115, i64 8, i64 8, !115, i64 16, i64 8, !115, i64 24, i64 128, !15, i64 152, i64 128, !15, i64 280, i64 128, !15, i64 408, i64 8, !115}
!256 = distinct !{!256, !47}
!257 = !{!184, !24, i64 12}
!258 = !{!234, !12, i64 16}
!259 = !{!234, !20, i64 32}
!260 = !{!234, !24, i64 48}
!261 = !{!234, !24, i64 52}
!262 = !{!234, !24, i64 60}
!263 = !{!234, !12, i64 64}
!264 = !{!234, !12, i64 40}
!265 = distinct !{!265, !47}
!266 = distinct !{!266, !47}
!267 = distinct !{!267, !47}
!268 = !{!234, !17, i64 88}
!269 = !{!234, !87, i64 80}
!270 = !{i64 0, i64 8, !115, i64 8, i64 8, !11, i64 16, i64 8, !11, i64 24, i64 8, !115, i64 32, i64 1, !271, i64 33, i64 1, !15, i64 34, i64 2, !167, i64 36, i64 4, !76, i64 40, i64 8, !11, i64 48, i64 8, !11}
!271 = !{!138, !138, i64 0}
!272 = distinct !{!272, !47}
!273 = distinct !{!273, !191}
!274 = distinct !{!274, !47}
!275 = !{!234, !12, i64 8}
!276 = distinct !{!276, !47}
!277 = distinct !{!277, !47, !189}
!278 = distinct !{!278, !47, !193, !189}
!279 = distinct !{!279, !47, !189}
!280 = distinct !{!280, !47, !193, !189}
!281 = distinct !{!281, !47}
!282 = distinct !{!282, !47}
!283 = distinct !{!283, !47}
!284 = distinct !{!284, !47}
!285 = distinct !{!285, !47}
!286 = distinct !{!286, !47, !189}
!287 = distinct !{!287, !47, !193, !189}
!288 = distinct !{!288, !47, !189}
!289 = distinct !{!289, !47, !193, !189}
!290 = distinct !{!290, !47}
!291 = !{!292, !24, i64 8}
!292 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !12, i64 0, !24, i64 8}
!293 = !{!292, !12, i64 0}
!294 = distinct !{!294, !47}
!295 = distinct !{!295, !191}
!296 = distinct !{!296, !47}
!297 = distinct !{!297, !47}
!298 = distinct !{!298, !47}
!299 = distinct !{!299, !47, !189}
!300 = distinct !{!300, !47, !193, !189}
!301 = distinct !{!301, !47, !189}
!302 = distinct !{!302, !47, !193, !189}
!303 = distinct !{!303, !47}
!304 = distinct !{!304, !47}
!305 = distinct !{!305, !47}
!306 = distinct !{!306, !47}
!307 = distinct !{!307, !47}
!308 = distinct !{!308, !47}
!309 = distinct !{!309, !47}
!310 = distinct !{!310, !47}
!311 = distinct !{!311, !191}
!312 = distinct !{!312, !47}
!313 = distinct !{!313, !47}
!314 = !{!137, !138, i64 0}
!315 = !{!137, !139, i64 2}
!316 = !{!179, !12, i64 8}
!317 = !{!179, !87, i64 24}
!318 = distinct !{!318, !47}
!319 = !{!320, !12, i64 0}
!320 = !{!"_ZTS29halide_device_allocation_pool", !12, i64 0, !12, i64 8}
!321 = distinct !{!321, !47}
!322 = !{!320, !12, i64 8}
!323 = !{!324, !12, i64 120}
!324 = !{!"_ZTS25halide_device_interface_t", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !12, i64 80, !12, i64 88, !12, i64 96, !12, i64 104, !12, i64 112, !12, i64 120}
!325 = !{!326, !12, i64 48}
!326 = !{!"_ZTS30halide_device_interface_impl_t", !12, i64 0, !12, i64 8, !12, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !12, i64 80, !12, i64 88, !12, i64 96, !12, i64 104, !12, i64 112, !12, i64 120}
!327 = !{!326, !12, i64 40}
!328 = !{!326, !12, i64 56}
!329 = !{!326, !12, i64 0}
!330 = !{!326, !12, i64 16}
!331 = !{!326, !12, i64 8}
!332 = !{!326, !12, i64 32}
!333 = !{!326, !12, i64 24}
!334 = !{!326, !12, i64 64}
!335 = !{!326, !12, i64 72}
!336 = distinct !{!336, !47, !189}
!337 = distinct !{!337, !47, !193, !189}
!338 = distinct !{!338, !47, !189}
!339 = distinct !{!339, !47, !193, !189}
!340 = !{!326, !12, i64 112}
!341 = !{!326, !12, i64 120}
!342 = !{!326, !12, i64 80}
!343 = !{!326, !12, i64 88}
!344 = !{!326, !12, i64 96}
!345 = !{!326, !12, i64 104}
!346 = !{i32 22, i32 33}
!347 = !{!348, !12, i64 40}
!348 = !{!"_ZTS21halide_profiler_state", !50, i64 0, !24, i64 8, !24, i64 12, !24, i64 16, !24, i64 20, !12, i64 24, !12, i64 32, !12, i64 40}
!349 = !{!348, !24, i64 16}
!350 = !{!351, !87, i64 0}
!351 = !{!"_ZTS30halide_profiler_pipeline_stats", !87, i64 0, !87, i64 8, !87, i64 16, !87, i64 24, !87, i64 32, !87, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !24, i64 72, !24, i64 76, !24, i64 80, !24, i64 84, !24, i64 88}
!352 = !{!351, !24, i64 80}
!353 = !{!351, !87, i64 32}
!354 = !{!351, !87, i64 40}
!355 = !{!351, !12, i64 48}
!356 = !{!351, !24, i64 84}
!357 = !{!351, !24, i64 88}
!358 = !{!351, !87, i64 16}
!359 = !{!351, !87, i64 24}
!360 = !{!351, !24, i64 72}
!361 = !{!351, !12, i64 56}
!362 = distinct !{!362, !47}
!363 = !{!364, !87, i64 32}
!364 = !{!"_ZTS26halide_profiler_func_stats", !87, i64 0, !87, i64 8, !87, i64 16, !87, i64 24, !87, i64 32, !87, i64 40, !87, i64 48, !12, i64 56, !24, i64 64}
!365 = !{!364, !87, i64 0}
!366 = !{!364, !12, i64 56}
!367 = distinct !{!367, !47}
!368 = distinct !{!368, !47}
!369 = distinct !{!369, !47}
!370 = !{!364, !87, i64 40}
!371 = !{!364, !87, i64 48}
!372 = distinct !{!372, !47}
!373 = !{!364, !87, i64 16}
!374 = distinct !{!374, !47}
!375 = !{!364, !24, i64 64}
!376 = distinct !{!376, !47}
!377 = !{!364, !87, i64 24}
!378 = distinct !{!378, !47}
!379 = distinct !{!379, !47}
!380 = !{!348, !12, i64 24}
!381 = !{!351, !12, i64 64}
!382 = distinct !{!382, !47}
!383 = !{!348, !24, i64 12}
!384 = distinct !{!384, !47}
!385 = !{!351, !24, i64 76}
!386 = distinct !{!386, !47}
!387 = distinct !{!387, !47}
!388 = !{!348, !12, i64 32}
!389 = !{!348, !24, i64 20}
!390 = !{!348, !24, i64 8}
!391 = distinct !{!391, !47}
!392 = distinct !{!392, !47}
!393 = distinct !{!393, !47}
!394 = distinct !{!394, !47}
!395 = distinct !{!395, !47}
!396 = !{!"branch_weights", i32 0, i32 1073741824}
!397 = !{!398, !12, i64 0}
!398 = !{!"_ZTS25halide_pseudostack_slot_t", !12, i64 0, !20, i64 8, !20, i64 16}
!399 = !{!398, !20, i64 16}
!400 = !{!179, !138, i64 32}
!401 = !{!179, !13, i64 33}
!402 = !{!179, !139, i64 34}
!403 = !{i64 0, i64 64}
!404 = !{!"branch_weights", i32 1073741824, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0}
!405 = !{!"branch_weights", i32 1073741824, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0}
!406 = !{!"branch_weights", i32 1073741824, i32 0}
!407 = !{!398, !20, i64 8}
!408 = !{!"branch_weights", i32 1, i32 2000}
!409 = !{!410, !410, i64 0}
!410 = !{!"input", !411, i64 0}
!411 = !{!"Halide buffer"}
!412 = !{!413, !413, i64 0}
!413 = !{!"read_input", !411, i64 0}
!414 = distinct !{!414, !191}
!415 = !{!416, !416, i64 0}
!416 = !{!"read_input.width64.base0", !417, i64 0}
!417 = !{!"read_input.width128.base0", !418, i64 0}
!418 = !{!"read_input.width256.base0", !419, i64 0}
!419 = !{!"read_input.width512.base0", !420, i64 0}
!420 = !{!"read_input.width1024.base0", !413, i64 0}
!421 = !{!422, !422, i64 0}
!422 = !{!"read_input.width32.base0", !416, i64 0}
!423 = !{!424, !424, i64 0}
!424 = !{!"blur_x", !411, i64 0}
!425 = !{!426, !426, i64 0}
!426 = !{!"blur_y", !411, i64 0}
!427 = distinct !{!427, !191}
